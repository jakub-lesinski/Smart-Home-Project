
smarthome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be08  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  0800bfd8  0800bfd8  0001bfd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3c0  0800c3c0  00020198  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3c0  0800c3c0  0001c3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3c8  0800c3c8  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3c8  0800c3c8  0001c3c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3cc  0800c3cc  0001c3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  0800c3d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  20000198  0800c568  00020198  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  0800c568  000206c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a151  00000000  00000000  0002020b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a3d  00000000  00000000  0003a35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  0003dda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001105  00000000  00000000  0003f358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b7f  00000000  00000000  0004045d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001db78  00000000  00000000  00068fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f76dd  00000000  00000000  00086b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006254  00000000  00000000  0017e234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00184488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000198 	.word	0x20000198
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bfc0 	.word	0x0800bfc0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000019c 	.word	0x2000019c
 800020c:	0800bfc0 	.word	0x0800bfc0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2uiz>:
 8000bdc:	004a      	lsls	r2, r1, #1
 8000bde:	d211      	bcs.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be4:	d211      	bcs.n	8000c0a <__aeabi_d2uiz+0x2e>
 8000be6:	d50d      	bpl.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf0:	d40e      	bmi.n	8000c10 <__aeabi_d2uiz+0x34>
 8000bf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0e:	d102      	bne.n	8000c16 <__aeabi_d2uiz+0x3a>
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	4770      	bx	lr
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_d2f>:
 8000c1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c24:	bf24      	itt	cs
 8000c26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2e:	d90d      	bls.n	8000c4c <__aeabi_d2f+0x30>
 8000c30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c44:	bf08      	it	eq
 8000c46:	f020 0001 	biceq.w	r0, r0, #1
 8000c4a:	4770      	bx	lr
 8000c4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c50:	d121      	bne.n	8000c96 <__aeabi_d2f+0x7a>
 8000c52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c56:	bfbc      	itt	lt
 8000c58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	4770      	bxlt	lr
 8000c5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c66:	f1c2 0218 	rsb	r2, r2, #24
 8000c6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c72:	fa20 f002 	lsr.w	r0, r0, r2
 8000c76:	bf18      	it	ne
 8000c78:	f040 0001 	orrne.w	r0, r0, #1
 8000c7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c88:	ea40 000c 	orr.w	r0, r0, ip
 8000c8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c94:	e7cc      	b.n	8000c30 <__aeabi_d2f+0x14>
 8000c96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9a:	d107      	bne.n	8000cac <__aeabi_d2f+0x90>
 8000c9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca0:	bf1e      	ittt	ne
 8000ca2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000caa:	4770      	bxne	lr
 8000cac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd0:	f000 b970 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f806 	bl	8000cec <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__udivmoddi4>:
 8000cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	9e08      	ldr	r6, [sp, #32]
 8000cf2:	460d      	mov	r5, r1
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	460f      	mov	r7, r1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d14a      	bne.n	8000d92 <__udivmoddi4+0xa6>
 8000cfc:	428a      	cmp	r2, r1
 8000cfe:	4694      	mov	ip, r2
 8000d00:	d965      	bls.n	8000dce <__udivmoddi4+0xe2>
 8000d02:	fab2 f382 	clz	r3, r2
 8000d06:	b143      	cbz	r3, 8000d1a <__udivmoddi4+0x2e>
 8000d08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d0c:	f1c3 0220 	rsb	r2, r3, #32
 8000d10:	409f      	lsls	r7, r3
 8000d12:	fa20 f202 	lsr.w	r2, r0, r2
 8000d16:	4317      	orrs	r7, r2
 8000d18:	409c      	lsls	r4, r3
 8000d1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d1e:	fa1f f58c 	uxth.w	r5, ip
 8000d22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d26:	0c22      	lsrs	r2, r4, #16
 8000d28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d30:	fb01 f005 	mul.w	r0, r1, r5
 8000d34:	4290      	cmp	r0, r2
 8000d36:	d90a      	bls.n	8000d4e <__udivmoddi4+0x62>
 8000d38:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d40:	f080 811c 	bcs.w	8000f7c <__udivmoddi4+0x290>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f240 8119 	bls.w	8000f7c <__udivmoddi4+0x290>
 8000d4a:	3902      	subs	r1, #2
 8000d4c:	4462      	add	r2, ip
 8000d4e:	1a12      	subs	r2, r2, r0
 8000d50:	b2a4      	uxth	r4, r4
 8000d52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5e:	fb00 f505 	mul.w	r5, r0, r5
 8000d62:	42a5      	cmp	r5, r4
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x90>
 8000d66:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6e:	f080 8107 	bcs.w	8000f80 <__udivmoddi4+0x294>
 8000d72:	42a5      	cmp	r5, r4
 8000d74:	f240 8104 	bls.w	8000f80 <__udivmoddi4+0x294>
 8000d78:	4464      	add	r4, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d80:	1b64      	subs	r4, r4, r5
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11e      	cbz	r6, 8000d8e <__udivmoddi4+0xa2>
 8000d86:	40dc      	lsrs	r4, r3
 8000d88:	2300      	movs	r3, #0
 8000d8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0xbc>
 8000d96:	2e00      	cmp	r6, #0
 8000d98:	f000 80ed 	beq.w	8000f76 <__udivmoddi4+0x28a>
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000da2:	4608      	mov	r0, r1
 8000da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da8:	fab3 f183 	clz	r1, r3
 8000dac:	2900      	cmp	r1, #0
 8000dae:	d149      	bne.n	8000e44 <__udivmoddi4+0x158>
 8000db0:	42ab      	cmp	r3, r5
 8000db2:	d302      	bcc.n	8000dba <__udivmoddi4+0xce>
 8000db4:	4282      	cmp	r2, r0
 8000db6:	f200 80f8 	bhi.w	8000faa <__udivmoddi4+0x2be>
 8000dba:	1a84      	subs	r4, r0, r2
 8000dbc:	eb65 0203 	sbc.w	r2, r5, r3
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	4617      	mov	r7, r2
 8000dc4:	2e00      	cmp	r6, #0
 8000dc6:	d0e2      	beq.n	8000d8e <__udivmoddi4+0xa2>
 8000dc8:	e9c6 4700 	strd	r4, r7, [r6]
 8000dcc:	e7df      	b.n	8000d8e <__udivmoddi4+0xa2>
 8000dce:	b902      	cbnz	r2, 8000dd2 <__udivmoddi4+0xe6>
 8000dd0:	deff      	udf	#255	; 0xff
 8000dd2:	fab2 f382 	clz	r3, r2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x210>
 8000ddc:	1a8a      	subs	r2, r1, r2
 8000dde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de2:	fa1f fe8c 	uxth.w	lr, ip
 8000de6:	2101      	movs	r1, #1
 8000de8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dec:	fb07 2015 	mls	r0, r7, r5, r2
 8000df0:	0c22      	lsrs	r2, r4, #16
 8000df2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000df6:	fb0e f005 	mul.w	r0, lr, r5
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x124>
 8000dfe:	eb1c 0202 	adds.w	r2, ip, r2
 8000e02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x122>
 8000e08:	4290      	cmp	r0, r2
 8000e0a:	f200 80cb 	bhi.w	8000fa4 <__udivmoddi4+0x2b8>
 8000e0e:	4645      	mov	r5, r8
 8000e10:	1a12      	subs	r2, r2, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e18:	fb07 2210 	mls	r2, r7, r0, r2
 8000e1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e20:	fb0e fe00 	mul.w	lr, lr, r0
 8000e24:	45a6      	cmp	lr, r4
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x14e>
 8000e28:	eb1c 0404 	adds.w	r4, ip, r4
 8000e2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e30:	d202      	bcs.n	8000e38 <__udivmoddi4+0x14c>
 8000e32:	45a6      	cmp	lr, r4
 8000e34:	f200 80bb 	bhi.w	8000fae <__udivmoddi4+0x2c2>
 8000e38:	4610      	mov	r0, r2
 8000e3a:	eba4 040e 	sub.w	r4, r4, lr
 8000e3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e42:	e79f      	b.n	8000d84 <__udivmoddi4+0x98>
 8000e44:	f1c1 0720 	rsb	r7, r1, #32
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e52:	fa05 f401 	lsl.w	r4, r5, r1
 8000e56:	fa20 f307 	lsr.w	r3, r0, r7
 8000e5a:	40fd      	lsrs	r5, r7
 8000e5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e60:	4323      	orrs	r3, r4
 8000e62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e66:	fa1f fe8c 	uxth.w	lr, ip
 8000e6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000e6e:	0c1c      	lsrs	r4, r3, #16
 8000e70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e74:	fb08 f50e 	mul.w	r5, r8, lr
 8000e78:	42a5      	cmp	r5, r4
 8000e7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e82:	d90b      	bls.n	8000e9c <__udivmoddi4+0x1b0>
 8000e84:	eb1c 0404 	adds.w	r4, ip, r4
 8000e88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e8c:	f080 8088 	bcs.w	8000fa0 <__udivmoddi4+0x2b4>
 8000e90:	42a5      	cmp	r5, r4
 8000e92:	f240 8085 	bls.w	8000fa0 <__udivmoddi4+0x2b4>
 8000e96:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9a:	4464      	add	r4, ip
 8000e9c:	1b64      	subs	r4, r4, r5
 8000e9e:	b29d      	uxth	r5, r3
 8000ea0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eb0:	45a6      	cmp	lr, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1da>
 8000eb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ebc:	d26c      	bcs.n	8000f98 <__udivmoddi4+0x2ac>
 8000ebe:	45a6      	cmp	lr, r4
 8000ec0:	d96a      	bls.n	8000f98 <__udivmoddi4+0x2ac>
 8000ec2:	3b02      	subs	r3, #2
 8000ec4:	4464      	add	r4, ip
 8000ec6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eca:	fba3 9502 	umull	r9, r5, r3, r2
 8000ece:	eba4 040e 	sub.w	r4, r4, lr
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	46c8      	mov	r8, r9
 8000ed6:	46ae      	mov	lr, r5
 8000ed8:	d356      	bcc.n	8000f88 <__udivmoddi4+0x29c>
 8000eda:	d053      	beq.n	8000f84 <__udivmoddi4+0x298>
 8000edc:	b156      	cbz	r6, 8000ef4 <__udivmoddi4+0x208>
 8000ede:	ebb0 0208 	subs.w	r2, r0, r8
 8000ee2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ee6:	fa04 f707 	lsl.w	r7, r4, r7
 8000eea:	40ca      	lsrs	r2, r1
 8000eec:	40cc      	lsrs	r4, r1
 8000eee:	4317      	orrs	r7, r2
 8000ef0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efc:	f1c3 0120 	rsb	r1, r3, #32
 8000f00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f04:	fa20 f201 	lsr.w	r2, r0, r1
 8000f08:	fa25 f101 	lsr.w	r1, r5, r1
 8000f0c:	409d      	lsls	r5, r3
 8000f0e:	432a      	orrs	r2, r5
 8000f10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f14:	fa1f fe8c 	uxth.w	lr, ip
 8000f18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000f20:	0c11      	lsrs	r1, r2, #16
 8000f22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f26:	fb00 f50e 	mul.w	r5, r0, lr
 8000f2a:	428d      	cmp	r5, r1
 8000f2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x258>
 8000f32:	eb1c 0101 	adds.w	r1, ip, r1
 8000f36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f3a:	d22f      	bcs.n	8000f9c <__udivmoddi4+0x2b0>
 8000f3c:	428d      	cmp	r5, r1
 8000f3e:	d92d      	bls.n	8000f9c <__udivmoddi4+0x2b0>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4461      	add	r1, ip
 8000f44:	1b49      	subs	r1, r1, r5
 8000f46:	b292      	uxth	r2, r2
 8000f48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000f50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f54:	fb05 f10e 	mul.w	r1, r5, lr
 8000f58:	4291      	cmp	r1, r2
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x282>
 8000f5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f64:	d216      	bcs.n	8000f94 <__udivmoddi4+0x2a8>
 8000f66:	4291      	cmp	r1, r2
 8000f68:	d914      	bls.n	8000f94 <__udivmoddi4+0x2a8>
 8000f6a:	3d02      	subs	r5, #2
 8000f6c:	4462      	add	r2, ip
 8000f6e:	1a52      	subs	r2, r2, r1
 8000f70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f74:	e738      	b.n	8000de8 <__udivmoddi4+0xfc>
 8000f76:	4631      	mov	r1, r6
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e708      	b.n	8000d8e <__udivmoddi4+0xa2>
 8000f7c:	4639      	mov	r1, r7
 8000f7e:	e6e6      	b.n	8000d4e <__udivmoddi4+0x62>
 8000f80:	4610      	mov	r0, r2
 8000f82:	e6fb      	b.n	8000d7c <__udivmoddi4+0x90>
 8000f84:	4548      	cmp	r0, r9
 8000f86:	d2a9      	bcs.n	8000edc <__udivmoddi4+0x1f0>
 8000f88:	ebb9 0802 	subs.w	r8, r9, r2
 8000f8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f90:	3b01      	subs	r3, #1
 8000f92:	e7a3      	b.n	8000edc <__udivmoddi4+0x1f0>
 8000f94:	4645      	mov	r5, r8
 8000f96:	e7ea      	b.n	8000f6e <__udivmoddi4+0x282>
 8000f98:	462b      	mov	r3, r5
 8000f9a:	e794      	b.n	8000ec6 <__udivmoddi4+0x1da>
 8000f9c:	4640      	mov	r0, r8
 8000f9e:	e7d1      	b.n	8000f44 <__udivmoddi4+0x258>
 8000fa0:	46d0      	mov	r8, sl
 8000fa2:	e77b      	b.n	8000e9c <__udivmoddi4+0x1b0>
 8000fa4:	3d02      	subs	r5, #2
 8000fa6:	4462      	add	r2, ip
 8000fa8:	e732      	b.n	8000e10 <__udivmoddi4+0x124>
 8000faa:	4608      	mov	r0, r1
 8000fac:	e70a      	b.n	8000dc4 <__udivmoddi4+0xd8>
 8000fae:	4464      	add	r4, ip
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	e742      	b.n	8000e3a <__udivmoddi4+0x14e>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <Read16>:
uint16_t ina219_calibrationValue;
int16_t ina219_currentDivider_mA;
int16_t ina219_powerMultiplier_mW;

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af04      	add	r7, sp, #16
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	2180      	movs	r1, #128	; 0x80
 8000fe0:	f005 f910 	bl	8006204 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8000fe4:	7b3b      	ldrb	r3, [r7, #12]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	b21a      	sxth	r2, r3
 8000fea:	7b7b      	ldrb	r3, [r7, #13]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	b29b      	uxth	r3, r3
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af04      	add	r7, sp, #16
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	70fb      	strb	r3, [r7, #3]
 8001008:	4613      	mov	r3, r2
 800100a:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 800100c:	883b      	ldrh	r3, [r7, #0]
 800100e:	0a1b      	lsrs	r3, r3, #8
 8001010:	b29b      	uxth	r3, r3
 8001012:	b2db      	uxtb	r3, r3
 8001014:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 8001016:	883b      	ldrh	r3, [r7, #0]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	2302      	movs	r3, #2
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2301      	movs	r3, #1
 8001036:	2180      	movs	r1, #128	; 0x80
 8001038:	f004 ffd0 	bl	8005fdc <HAL_I2C_Mem_Write>
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 800104c:	2102      	movs	r1, #2
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ffb2 	bl	8000fb8 <Read16>
 8001054:	4603      	mov	r3, r0
 8001056:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 8001058:	89fb      	ldrh	r3, [r7, #14]
 800105a:	08db      	lsrs	r3, r3, #3
 800105c:	b29b      	uxth	r3, r3
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	b29b      	uxth	r3, r3

}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b084      	sub	sp, #16
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8001072:	2104      	movs	r1, #4
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff9f 	bl	8000fb8 <Read16>
 800107a:	4603      	mov	r3, r0
 800107c:	81fb      	strh	r3, [r7, #14]

	return (result );
 800107e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ffe8 	bl	800106a <INA219_ReadCurrent_raw>
 800109a:	4603      	mov	r3, r0
 800109c:	81fb      	strh	r3, [r7, #14]

	return (result / ina219_currentDivider_mA );
 800109e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010a2:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <INA219_ReadCurrent+0x2c>)
 80010a4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80010a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80010ac:	b21b      	sxth	r3, r3
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200001b6 	.word	0x200001b6
 80010bc:	00000000 	.word	0x00000000

080010c0 <INA219_ReadShuntVolage>:

uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 80010c8:	2101      	movs	r1, #1
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ff74 	bl	8000fb8 <Read16>
 80010d0:	4603      	mov	r3, r0
 80010d2:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01 );
 80010d4:	89fb      	ldrh	r3, [r7, #14]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fa54 	bl	8000584 <__aeabi_i2d>
 80010dc:	a308      	add	r3, pc, #32	; (adr r3, 8001100 <INA219_ReadShuntVolage+0x40>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	f7ff fab9 	bl	8000658 <__aeabi_dmul>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fd75 	bl	8000bdc <__aeabi_d2uiz>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29b      	uxth	r3, r3
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	47ae147b 	.word	0x47ae147b
 8001104:	3f847ae1 	.word	0x3f847ae1

08001108 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8001110:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001114:	2100      	movs	r1, #0
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ff70 	bl	8000ffc <Write16>
	HAL_Delay(1);
 800111c:	2001      	movs	r0, #1
 800111e:	f004 fb59 	bl	80057d4 <HAL_Delay>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	460b      	mov	r3, r1
 8001134:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8001136:	887b      	ldrh	r3, [r7, #2]
 8001138:	461a      	mov	r2, r3
 800113a:	2105      	movs	r1, #5
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff5d 	bl	8000ffc <Write16>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	460b      	mov	r3, r1
 8001154:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8001156:	887b      	ldrh	r3, [r7, #2]
 8001158:	461a      	mov	r2, r3
 800115a:	2100      	movs	r1, #0
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff4d 	bl	8000ffc <Write16>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <INA219_setCalibration_16V_400mA>:
	INA219_setCalibration(ina219, ina219_calibrationValue);
	INA219_setConfig(ina219, config);
}

void INA219_setCalibration_16V_400mA(INA219_t *ina219)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_16V |
 8001174:	f240 139f 	movw	r3, #415	; 0x19f
 8001178:	81fb      	strh	r3, [r7, #14]
	                    INA219_CONFIG_GAIN_1_40MV | INA219_CONFIG_BADCRES_12BIT |
	                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
	                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 8192;
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <INA219_setCalibration_16V_400mA+0x40>)
 800117c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001180:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 20;    // Current LSB = 50uA per bit (1000/50 = 20)
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <INA219_setCalibration_16V_400mA+0x44>)
 8001184:	2214      	movs	r2, #20
 8001186:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 1.0f; // Power LSB = 1mW per bit
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <INA219_setCalibration_16V_400mA+0x48>)
 800118a:	2201      	movs	r2, #1
 800118c:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <INA219_setCalibration_16V_400mA+0x40>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	4619      	mov	r1, r3
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ffc8 	bl	800112a <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 800119a:	89fb      	ldrh	r3, [r7, #14]
 800119c:	4619      	mov	r1, r3
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffd3 	bl	800114a <INA219_setConfig>
}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200001b4 	.word	0x200001b4
 80011b0:	200001b6 	.word	0x200001b6
 80011b4:	200001b8 	.word	0x200001b8

080011b8 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	4613      	mov	r3, r2
 80011c4:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	79fa      	ldrb	r2, [r7, #7]
 80011d0:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <INA219_Init+0x5c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <INA219_Init+0x60>)
 80011da:	2200      	movs	r2, #0
 80011dc:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	b299      	uxth	r1, r3
 80011e6:	2302      	movs	r3, #2
 80011e8:	2203      	movs	r2, #3
 80011ea:	68b8      	ldr	r0, [r7, #8]
 80011ec:	f005 f924 	bl	8006438 <HAL_I2C_IsDeviceReady>
 80011f0:	4603      	mov	r3, r0
 80011f2:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 80011f4:	7dfb      	ldrb	r3, [r7, #23]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d107      	bne.n	800120a <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f7ff ff84 	bl	8001108 <INA219_Reset>
		INA219_setCalibration_16V_400mA(ina219);
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f7ff ffb3 	bl	800116c <INA219_setCalibration_16V_400mA>

		return 1;
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <INA219_Init+0x54>
	}

	else
	{
		return 0;
 800120a:	2300      	movs	r3, #0
	}
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200001b6 	.word	0x200001b6
 8001218:	200001b8 	.word	0x200001b8

0800121c <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 fa47 	bl	80016b8 <null_ptr_check>
 800122a:	4603      	mov	r3, r0
 800122c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 800122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d117      	bne.n	8001266 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2201      	movs	r2, #1
 800123c:	20d0      	movs	r0, #208	; 0xd0
 800123e:	f000 f818 	bl	8001272 <bmp2_get_regs>
 8001242:	4603      	mov	r3, r0
 8001244:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8001246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10b      	bne.n	8001266 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b58      	cmp	r3, #88	; 0x58
 8001254:	d105      	bne.n	8001262 <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 fa79 	bl	800174e <get_calib_param>
 800125c:	4603      	mov	r3, r0
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	e001      	b.n	8001266 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8001262:	23fc      	movs	r3, #252	; 0xfc
 8001264:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001266:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8001272:	b590      	push	{r4, r7, lr}
 8001274:	b087      	sub	sp, #28
 8001276:	af00      	add	r7, sp, #0
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	4603      	mov	r3, r0
 8001280:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001282:	6838      	ldr	r0, [r7, #0]
 8001284:	f000 fa18 	bl	80016b8 <null_ptr_check>
 8001288:	4603      	mov	r3, r0
 800128a:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 800128c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d11e      	bne.n	80012d2 <bmp2_get_regs+0x60>
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d01b      	beq.n	80012d2 <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	785b      	ldrb	r3, [r3, #1]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d103      	bne.n	80012aa <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012a8:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	68dc      	ldr	r4, [r3, #12]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	7bf8      	ldrb	r0, [r7, #15]
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	68b9      	ldr	r1, [r7, #8]
 80012b8:	47a0      	blx	r4
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d004      	beq.n	80012d6 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 80012cc:	23fe      	movs	r3, #254	; 0xfe
 80012ce:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80012d0:	e001      	b.n	80012d6 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012d2:	23ff      	movs	r3, #255	; 0xff
 80012d4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	371c      	adds	r7, #28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd90      	pop	{r4, r7, pc}

080012e2 <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 80012e2:	b590      	push	{r4, r7, lr}
 80012e4:	b08b      	sub	sp, #44	; 0x2c
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	d901      	bls.n	80012fa <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 80012f6:	2304      	movs	r3, #4
 80012f8:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 80012fa:	6838      	ldr	r0, [r7, #0]
 80012fc:	f000 f9dc 	bl	80016b8 <null_ptr_check>
 8001300:	4603      	mov	r3, r0
 8001302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001306:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800130a:	2b00      	cmp	r3, #0
 800130c:	d150      	bne.n	80013b0 <bmp2_set_regs+0xce>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d04d      	beq.n	80013b0 <bmp2_set_regs+0xce>
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d04a      	beq.n	80013b0 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d043      	beq.n	80013a8 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	785b      	ldrb	r3, [r3, #1]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d114      	bne.n	8001358 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800132e:	2300      	movs	r3, #0
 8001330:	77fb      	strb	r3, [r7, #31]
 8001332:	e00d      	b.n	8001350 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 8001334:	7ffb      	ldrb	r3, [r7, #31]
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	4413      	add	r3, r2
 800133a:	781a      	ldrb	r2, [r3, #0]
 800133c:	7ffb      	ldrb	r3, [r7, #31]
 800133e:	68f9      	ldr	r1, [r7, #12]
 8001340:	440b      	add	r3, r1
 8001342:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800134a:	7ffb      	ldrb	r3, [r7, #31]
 800134c:	3301      	adds	r3, #1
 800134e:	77fb      	strb	r3, [r7, #31]
 8001350:	7ffb      	ldrb	r3, [r7, #31]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	429a      	cmp	r2, r3
 8001356:	d8ed      	bhi.n	8001334 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d90b      	bls.n	8001376 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 800135e:	f107 0114 	add.w	r1, r7, #20
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f000 f9c6 	bl	80016f8 <interleave_data>
                temp_len = ((len * 2) - 1);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	3b01      	subs	r3, #1
 8001372:	623b      	str	r3, [r7, #32]
 8001374:	e001      	b.n	800137a <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	691c      	ldr	r4, [r3, #16]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	7818      	ldrb	r0, [r3, #0]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f107 0114 	add.w	r1, r7, #20
 800138a:	6a3a      	ldr	r2, [r7, #32]
 800138c:	47a0      	blx	r4
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00b      	beq.n	80013b8 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 80013a0:	23fe      	movs	r3, #254	; 0xfe
 80013a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 80013a6:	e007      	b.n	80013b8 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 80013a8:	23fd      	movs	r3, #253	; 0xfd
 80013aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 80013ae:	e003      	b.n	80013b8 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80013b0:	23ff      	movs	r3, #255	; 0xff
 80013b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013b6:	e000      	b.n	80013ba <bmp2_set_regs+0xd8>
        if (len > 0)
 80013b8:	bf00      	nop
    }

    return rslt;
 80013ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80013be:	4618      	mov	r0, r3
 80013c0:	372c      	adds	r7, #44	; 0x2c
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd90      	pop	{r4, r7, pc}

080013c6 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b084      	sub	sp, #16
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 80013ce:	23e0      	movs	r3, #224	; 0xe0
 80013d0:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 80013d2:	23b6      	movs	r3, #182	; 0xb6
 80013d4:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80013d6:	f107 010d 	add.w	r1, r7, #13
 80013da:	f107 000e 	add.w	r0, r7, #14
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f7ff ff7e 	bl	80012e2 <bmp2_set_regs>
 80013e6:	4603      	mov	r3, r0
 80013e8:	73fb      	strb	r3, [r7, #15]

    return rslt;
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b084      	sub	sp, #16
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001400:	2300      	movs	r3, #0
 8001402:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d02d      	beq.n	8001466 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 800140a:	f107 010c 	add.w	r1, r7, #12
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	2202      	movs	r2, #2
 8001412:	20f4      	movs	r0, #244	; 0xf4
 8001414:	f7ff ff2d 	bl	8001272 <bmp2_get_regs>
 8001418:	4603      	mov	r3, r0
 800141a:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 800141c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d122      	bne.n	800146a <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8001424:	7b3b      	ldrb	r3, [r7, #12]
 8001426:	095b      	lsrs	r3, r3, #5
 8001428:	b2da      	uxtb	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 800142e:	7b3b      	ldrb	r3, [r7, #12]
 8001430:	109b      	asrs	r3, r3, #2
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	b2da      	uxtb	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 800143e:	7b7b      	ldrb	r3, [r7, #13]
 8001440:	095b      	lsrs	r3, r3, #5
 8001442:	b2da      	uxtb	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 8001448:	7b7b      	ldrb	r3, [r7, #13]
 800144a:	109b      	asrs	r3, r3, #2
 800144c:	b2db      	uxtb	r3, r3
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	b2da      	uxtb	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 8001458:	7b7b      	ldrb	r3, [r7, #13]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	b2da      	uxtb	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	715a      	strb	r2, [r3, #5]
 8001464:	e001      	b.n	800146a <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001466:	23ff      	movs	r3, #255	; 0xff
 8001468:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	2000      	movs	r0, #0
 8001486:	f000 f9fd 	bl	8001884 <conf_sensor>
 800148a:	4603      	mov	r3, r0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d01b      	beq.n	80014dc <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 80014a4:	f107 010e 	add.w	r1, r7, #14
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	2201      	movs	r2, #1
 80014ac:	20f3      	movs	r0, #243	; 0xf3
 80014ae:	f7ff fee0 	bl	8001272 <bmp2_get_regs>
 80014b2:	4603      	mov	r3, r0
 80014b4:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 80014b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d110      	bne.n	80014e0 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 80014be:	7bbb      	ldrb	r3, [r7, #14]
 80014c0:	10db      	asrs	r3, r3, #3
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 80014ce:	7bbb      	ldrb	r3, [r7, #14]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	705a      	strb	r2, [r3, #1]
 80014da:	e001      	b.n	80014e0 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80014dc:	23ff      	movs	r3, #255	; 0xff
 80014de:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	68b9      	ldr	r1, [r7, #8]
 8001500:	4618      	mov	r0, r3
 8001502:	f000 f9bf 	bl	8001884 <conf_sensor>
 8001506:	4603      	mov	r3, r0
 8001508:	75fb      	strb	r3, [r7, #23]

    return rslt;
 800150a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 8001520:	2300      	movs	r3, #0
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	2300      	movs	r3, #0
 8001526:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d024      	beq.n	8001582 <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8001538:	f107 0110 	add.w	r1, r7, #16
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	2206      	movs	r2, #6
 8001540:	20f7      	movs	r0, #247	; 0xf7
 8001542:	f7ff fe96 	bl	8001272 <bmp2_get_regs>
 8001546:	4603      	mov	r3, r0
 8001548:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 800154a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d119      	bne.n	8001586 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 8001552:	f107 0208 	add.w	r2, r7, #8
 8001556:	f107 0310 	add.w	r3, r7, #16
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f000 fab9 	bl	8001ad4 <parse_sensor_data>
 8001562:	4603      	mov	r3, r0
 8001564:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001566:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10b      	bne.n	8001586 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4618      	mov	r0, r3
 8001578:	f000 f80b 	bl	8001592 <bmp2_compensate_data>
 800157c:	4603      	mov	r3, r0
 800157e:	75fb      	strb	r3, [r7, #23]
 8001580:	e001      	b.n	8001586 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001582:	23ff      	movs	r3, #255	; 0xff
 8001584:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001586:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b086      	sub	sp, #24
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f88a 	bl	80016b8 <null_ptr_check>
 80015a4:	4603      	mov	r3, r0
 80015a6:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 80015a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d129      	bne.n	8001604 <bmp2_compensate_data+0x72>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d026      	beq.n	8001604 <bmp2_compensate_data+0x72>
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d023      	beq.n	8001604 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 80015ca:	68b9      	ldr	r1, [r7, #8]
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	3308      	adds	r3, #8
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	68f9      	ldr	r1, [r7, #12]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 fabb 	bl	8001b5c <compensate_temperature>
 80015e6:	4603      	mov	r3, r0
 80015e8:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80015ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10a      	bne.n	8001608 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	68f9      	ldr	r1, [r7, #12]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 fba5 	bl	8001d48 <compensate_pressure>
 80015fe:	4603      	mov	r3, r0
 8001600:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 8001602:	e001      	b.n	8001608 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001604:	23ff      	movs	r3, #255	; 0xff
 8001606:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001608:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001614:	b5b0      	push	{r4, r5, r7, lr}
 8001616:	b092      	sub	sp, #72	; 0x48
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 8001620:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <bmp2_compute_meas_time+0x9c>)
 8001622:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001626:	461d      	mov	r5, r3
 8001628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800162a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800162c:	682b      	ldr	r3, [r5, #0]
 800162e:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 8001630:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <bmp2_compute_meas_time+0xa0>)
 8001632:	f107 0410 	add.w	r4, r7, #16
 8001636:	461d      	mov	r5, r3
 8001638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800163a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800163c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001640:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 f837 	bl	80016b8 <null_ptr_check>
 800164a:	4603      	mov	r3, r0
 800164c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 8001650:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001654:	2b00      	cmp	r3, #0
 8001656:	d122      	bne.n	800169e <bmp2_compute_meas_time+0x8a>
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d01f      	beq.n	800169e <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7e1b      	ldrb	r3, [r3, #24]
 8001662:	2b03      	cmp	r3, #3
 8001664:	d111      	bne.n	800168a <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	78db      	ldrb	r3, [r3, #3]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	3348      	adds	r3, #72	; 0x48
 800166e:	443b      	add	r3, r7
 8001670:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	789b      	ldrb	r3, [r3, #2]
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	3348      	adds	r3, #72	; 0x48
 800167c:	443b      	add	r3, r7
 800167e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001682:	441a      	add	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001688:	e00c      	b.n	80016a4 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	78db      	ldrb	r3, [r3, #3]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	3348      	adds	r3, #72	; 0x48
 8001692:	443b      	add	r3, r7
 8001694:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 800169c:	e002      	b.n	80016a4 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800169e:	23ff      	movs	r3, #255	; 0xff
 80016a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 80016a4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3748      	adds	r7, #72	; 0x48
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bdb0      	pop	{r4, r5, r7, pc}
 80016b0:	0800bfd8 	.word	0x0800bfd8
 80016b4:	0800bfec 	.word	0x0800bfec

080016b8 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00b      	beq.n	80016de <null_ptr_check+0x26>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d007      	beq.n	80016de <null_ptr_check+0x26>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <null_ptr_check+0x26>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d102      	bne.n	80016e4 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 80016de:	23ff      	movs	r3, #255	; 0xff
 80016e0:	73fb      	strb	r3, [r7, #15]
 80016e2:	e001      	b.n	80016e8 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80016e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001706:	2301      	movs	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	e015      	b.n	8001738 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	441a      	add	r2, r3
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	3b01      	subs	r3, #1
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	440b      	add	r3, r1
 800171c:	7812      	ldrb	r2, [r2, #0]
 800171e:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	441a      	add	r2, r3
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	440b      	add	r3, r1
 800172e:	7812      	ldrb	r2, [r2, #0]
 8001730:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3301      	adds	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d3e5      	bcc.n	800170c <interleave_data+0x14>
    }
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b08a      	sub	sp, #40	; 0x28
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	f107 0310 	add.w	r3, r7, #16
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	611a      	str	r2, [r3, #16]
 800176a:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 800176c:	f107 010c 	add.w	r1, r7, #12
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2219      	movs	r2, #25
 8001774:	2088      	movs	r0, #136	; 0x88
 8001776:	f7ff fd7c 	bl	8001272 <bmp2_get_regs>
 800177a:	4603      	mov	r3, r0
 800177c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 8001780:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001784:	2b00      	cmp	r3, #0
 8001786:	d177      	bne.n	8001878 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 8001788:	7b7b      	ldrb	r3, [r7, #13]
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	b21a      	sxth	r2, r3
 800178e:	7b3b      	ldrb	r3, [r7, #12]
 8001790:	b21b      	sxth	r3, r3
 8001792:	4313      	orrs	r3, r2
 8001794:	b21b      	sxth	r3, r3
 8001796:	b29a      	uxth	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 800179c:	7bfb      	ldrb	r3, [r7, #15]
 800179e:	021b      	lsls	r3, r3, #8
 80017a0:	b21a      	sxth	r2, r3
 80017a2:	7bbb      	ldrb	r3, [r7, #14]
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	4313      	orrs	r3, r2
 80017a8:	b21a      	sxth	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 80017ae:	7c7b      	ldrb	r3, [r7, #17]
 80017b0:	021b      	lsls	r3, r3, #8
 80017b2:	b21a      	sxth	r2, r3
 80017b4:	7c3b      	ldrb	r3, [r7, #16]
 80017b6:	b21b      	sxth	r3, r3
 80017b8:	4313      	orrs	r3, r2
 80017ba:	b21a      	sxth	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 80017c0:	7cfb      	ldrb	r3, [r7, #19]
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	7cbb      	ldrb	r3, [r7, #18]
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	4313      	orrs	r3, r2
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 80017d4:	7d7b      	ldrb	r3, [r7, #21]
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	b21a      	sxth	r2, r3
 80017da:	7d3b      	ldrb	r3, [r7, #20]
 80017dc:	b21b      	sxth	r3, r3
 80017de:	4313      	orrs	r3, r2
 80017e0:	b21a      	sxth	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	b21a      	sxth	r2, r3
 80017ec:	7dbb      	ldrb	r3, [r7, #22]
 80017ee:	b21b      	sxth	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 80017f8:	7e7b      	ldrb	r3, [r7, #25]
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	b21a      	sxth	r2, r3
 80017fe:	7e3b      	ldrb	r3, [r7, #24]
 8001800:	b21b      	sxth	r3, r3
 8001802:	4313      	orrs	r3, r2
 8001804:	b21a      	sxth	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 800180a:	7efb      	ldrb	r3, [r7, #27]
 800180c:	021b      	lsls	r3, r3, #8
 800180e:	b21a      	sxth	r2, r3
 8001810:	7ebb      	ldrb	r3, [r7, #26]
 8001812:	b21b      	sxth	r3, r3
 8001814:	4313      	orrs	r3, r2
 8001816:	b21a      	sxth	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 800181c:	7f7b      	ldrb	r3, [r7, #29]
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	b21a      	sxth	r2, r3
 8001822:	7f3b      	ldrb	r3, [r7, #28]
 8001824:	b21b      	sxth	r3, r3
 8001826:	4313      	orrs	r3, r2
 8001828:	b21a      	sxth	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 800182e:	7ffb      	ldrb	r3, [r7, #31]
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	b21a      	sxth	r2, r3
 8001834:	7fbb      	ldrb	r3, [r7, #30]
 8001836:	b21b      	sxth	r3, r3
 8001838:	4313      	orrs	r3, r2
 800183a:	b21a      	sxth	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8001840:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	b21a      	sxth	r2, r3
 8001848:	f897 3020 	ldrb.w	r3, [r7, #32]
 800184c:	b21b      	sxth	r3, r3
 800184e:	4313      	orrs	r3, r2
 8001850:	b21a      	sxth	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 8001856:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	b21a      	sxth	r2, r3
 800185e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001862:	b21b      	sxth	r3, r3
 8001864:	4313      	orrs	r3, r2
 8001866:	b21a      	sxth	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 800186c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001870:	b25a      	sxtb	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 8001878:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800187c:	4618      	mov	r0, r3
 800187e:	3728      	adds	r7, #40	; 0x28
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
 8001890:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001892:	2300      	movs	r3, #0
 8001894:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 8001896:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 800189a:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d074      	beq.n	800198c <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80018a2:	f107 0114 	add.w	r1, r7, #20
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2202      	movs	r2, #2
 80018aa:	20f4      	movs	r0, #244	; 0xf4
 80018ac:	f7ff fce1 	bl	8001272 <bmp2_get_regs>
 80018b0:	4603      	mov	r3, r0
 80018b2:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80018b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d169      	bne.n	8001990 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff fd82 	bl	80013c6 <bmp2_soft_reset>
 80018c2:	4603      	mov	r3, r0
 80018c4:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80018c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d160      	bne.n	8001990 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	68b9      	ldr	r1, [r7, #8]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 f861 	bl	800199c <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 80018da:	7d7b      	ldrb	r3, [r7, #21]
 80018dc:	b25b      	sxtb	r3, r3
 80018de:	f003 031f 	and.w	r3, r3, #31
 80018e2:	b25a      	sxtb	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	789b      	ldrb	r3, [r3, #2]
 80018e8:	015b      	lsls	r3, r3, #5
 80018ea:	b25b      	sxtb	r3, r3
 80018ec:	4313      	orrs	r3, r2
 80018ee:	b25b      	sxtb	r3, r3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 80018f4:	7d7b      	ldrb	r3, [r7, #21]
 80018f6:	b25b      	sxtb	r3, r3
 80018f8:	f023 031c 	bic.w	r3, r3, #28
 80018fc:	b25a      	sxtb	r2, r3
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	791b      	ldrb	r3, [r3, #4]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	b25b      	sxtb	r3, r3
 8001906:	f003 031c 	and.w	r3, r3, #28
 800190a:	b25b      	sxtb	r3, r3
 800190c:	4313      	orrs	r3, r2
 800190e:	b25b      	sxtb	r3, r3
 8001910:	b2db      	uxtb	r3, r3
 8001912:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001914:	7d7b      	ldrb	r3, [r7, #21]
 8001916:	b25b      	sxtb	r3, r3
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	b25a      	sxtb	r2, r3
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	795b      	ldrb	r3, [r3, #5]
 8001922:	b25b      	sxtb	r3, r3
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	b25b      	sxtb	r3, r3
 800192a:	4313      	orrs	r3, r2
 800192c:	b25b      	sxtb	r3, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 8001932:	f107 0114 	add.w	r1, r7, #20
 8001936:	f107 0010 	add.w	r0, r7, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2202      	movs	r2, #2
 800193e:	f7ff fcd0 	bl	80012e2 <bmp2_set_regs>
 8001942:	4603      	mov	r3, r0
 8001944:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 8001946:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d120      	bne.n	8001990 <conf_sensor+0x10c>
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d01d      	beq.n	8001990 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	7bfa      	ldrb	r2, [r7, #15]
 8001958:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 800195a:	7d3b      	ldrb	r3, [r7, #20]
 800195c:	b25b      	sxtb	r3, r3
 800195e:	f023 0303 	bic.w	r3, r3, #3
 8001962:	b25a      	sxtb	r2, r3
 8001964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	b25b      	sxtb	r3, r3
 800196e:	4313      	orrs	r3, r2
 8001970:	b25b      	sxtb	r3, r3
 8001972:	b2db      	uxtb	r3, r3
 8001974:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 8001976:	f107 0114 	add.w	r1, r7, #20
 800197a:	f107 0010 	add.w	r0, r7, #16
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f7ff fcae 	bl	80012e2 <bmp2_set_regs>
 8001986:	4603      	mov	r3, r0
 8001988:	75fb      	strb	r3, [r7, #23]
 800198a:	e001      	b.n	8001990 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800198c:	23ff      	movs	r3, #255	; 0xff
 800198e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001990:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	78db      	ldrb	r3, [r3, #3]
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	f200 808b 	bhi.w	8001ac6 <set_os_mode+0x12a>
 80019b0:	a201      	add	r2, pc, #4	; (adr r2, 80019b8 <set_os_mode+0x1c>)
 80019b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b6:	bf00      	nop
 80019b8:	080019cd 	.word	0x080019cd
 80019bc:	080019ff 	.word	0x080019ff
 80019c0:	08001a31 	.word	0x08001a31
 80019c4:	08001a63 	.word	0x08001a63
 80019c8:	08001a95 	.word	0x08001a95
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	b25b      	sxtb	r3, r3
 80019d2:	f003 031f 	and.w	r3, r3, #31
 80019d6:	b25b      	sxtb	r3, r3
 80019d8:	f043 0320 	orr.w	r3, r3, #32
 80019dc:	b25b      	sxtb	r3, r3
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b25b      	sxtb	r3, r3
 80019ea:	f023 031c 	bic.w	r3, r3, #28
 80019ee:	b25b      	sxtb	r3, r3
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	b25b      	sxtb	r3, r3
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	701a      	strb	r2, [r3, #0]
            break;
 80019fc:	e064      	b.n	8001ac8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	b25b      	sxtb	r3, r3
 8001a04:	f003 031f 	and.w	r3, r3, #31
 8001a08:	b25b      	sxtb	r3, r3
 8001a0a:	f043 0320 	orr.w	r3, r3, #32
 8001a0e:	b25b      	sxtb	r3, r3
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	f023 031c 	bic.w	r3, r3, #28
 8001a20:	b25b      	sxtb	r3, r3
 8001a22:	f043 0308 	orr.w	r3, r3, #8
 8001a26:	b25b      	sxtb	r3, r3
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	701a      	strb	r2, [r3, #0]
            break;
 8001a2e:	e04b      	b.n	8001ac8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	b25b      	sxtb	r3, r3
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	b25b      	sxtb	r3, r3
 8001a3c:	f043 0320 	orr.w	r3, r3, #32
 8001a40:	b25b      	sxtb	r3, r3
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b25b      	sxtb	r3, r3
 8001a4e:	f023 031c 	bic.w	r3, r3, #28
 8001a52:	b25b      	sxtb	r3, r3
 8001a54:	f043 030c 	orr.w	r3, r3, #12
 8001a58:	b25b      	sxtb	r3, r3
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	701a      	strb	r2, [r3, #0]
            break;
 8001a60:	e032      	b.n	8001ac8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	b25b      	sxtb	r3, r3
 8001a68:	f003 031f 	and.w	r3, r3, #31
 8001a6c:	b25b      	sxtb	r3, r3
 8001a6e:	f043 0320 	orr.w	r3, r3, #32
 8001a72:	b25b      	sxtb	r3, r3
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	b25b      	sxtb	r3, r3
 8001a80:	f023 031c 	bic.w	r3, r3, #28
 8001a84:	b25b      	sxtb	r3, r3
 8001a86:	f043 0310 	orr.w	r3, r3, #16
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	701a      	strb	r2, [r3, #0]
            break;
 8001a92:	e019      	b.n	8001ac8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	b25b      	sxtb	r3, r3
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	b25b      	sxtb	r3, r3
 8001aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa4:	b25b      	sxtb	r3, r3
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	b25b      	sxtb	r3, r3
 8001ab2:	f023 031c 	bic.w	r3, r3, #28
 8001ab6:	b25b      	sxtb	r3, r3
 8001ab8:	f043 0314 	orr.w	r3, r3, #20
 8001abc:	b25b      	sxtb	r3, r3
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	701a      	strb	r2, [r3, #0]
            break;
 8001ac4:	e000      	b.n	8001ac8 <set_os_mode+0x12c>
        default:
            break;
 8001ac6:	bf00      	nop
    }
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	031b      	lsls	r3, r3, #12
 8001ae4:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3302      	adds	r3, #2
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	091b      	lsrs	r3, r3, #4
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	431a      	orrs	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	431a      	orrs	r2, r3
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3303      	adds	r3, #3
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	031b      	lsls	r3, r3, #12
 8001b12:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3304      	adds	r3, #4
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3305      	adds	r3, #5
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	461a      	mov	r2, r3
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	4619      	mov	r1, r3
 8001b44:	4610      	mov	r0, r2
 8001b46:	f000 fae3 	bl	8002110 <st_check_boundaries>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	72fb      	strb	r3, [r7, #11]

    return rslt;
 8001b4e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001b5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b60:	b08c      	sub	sp, #48	; 0x30
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fd05 	bl	8000584 <__aeabi_i2d>
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	4b6c      	ldr	r3, [pc, #432]	; (8001d30 <compensate_temperature+0x1d4>)
 8001b80:	f7fe fe94 	bl	80008ac <__aeabi_ddiv>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4614      	mov	r4, r2
 8001b8a:	461d      	mov	r5, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	8b9b      	ldrh	r3, [r3, #28]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fce7 	bl	8000564 <__aeabi_ui2d>
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	4b66      	ldr	r3, [pc, #408]	; (8001d34 <compensate_temperature+0x1d8>)
 8001b9c:	f7fe fe86 	bl	80008ac <__aeabi_ddiv>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	f7fe fb9e 	bl	80002e8 <__aeabi_dsub>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4614      	mov	r4, r2
 8001bb2:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fce2 	bl	8000584 <__aeabi_i2d>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	f7fe fd46 	bl	8000658 <__aeabi_dmul>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fcd3 	bl	8000584 <__aeabi_i2d>
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001be6:	f7fe fe61 	bl	80008ac <__aeabi_ddiv>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4614      	mov	r4, r2
 8001bf0:	461d      	mov	r5, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	8b9b      	ldrh	r3, [r3, #28]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fcb4 	bl	8000564 <__aeabi_ui2d>
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	4b4d      	ldr	r3, [pc, #308]	; (8001d38 <compensate_temperature+0x1dc>)
 8001c02:	f7fe fe53 	bl	80008ac <__aeabi_ddiv>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	4629      	mov	r1, r5
 8001c0e:	f7fe fb6b 	bl	80002e8 <__aeabi_dsub>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4614      	mov	r4, r2
 8001c18:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fcb0 	bl	8000584 <__aeabi_i2d>
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001c2c:	f7fe fe3e 	bl	80008ac <__aeabi_ddiv>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4690      	mov	r8, r2
 8001c36:	4699      	mov	r9, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	8b9b      	ldrh	r3, [r3, #28]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fc91 	bl	8000564 <__aeabi_ui2d>
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	4b3c      	ldr	r3, [pc, #240]	; (8001d38 <compensate_temperature+0x1dc>)
 8001c48:	f7fe fe30 	bl	80008ac <__aeabi_ddiv>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4640      	mov	r0, r8
 8001c52:	4649      	mov	r1, r9
 8001c54:	f7fe fb48 	bl	80002e8 <__aeabi_dsub>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	4629      	mov	r1, r5
 8001c60:	f7fe fcfa 	bl	8000658 <__aeabi_dmul>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4614      	mov	r4, r2
 8001c6a:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fc86 	bl	8000584 <__aeabi_i2d>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
    var2 =
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	4629      	mov	r1, r5
 8001c80:	f7fe fcea 	bl	8000658 <__aeabi_dmul>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001c8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c94:	f7fe fb2a 	bl	80002ec <__adddf3>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f7fe ff74 	bl	8000b8c <__aeabi_d2iz>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 8001caa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cb2:	f7fe fb1b 	bl	80002ec <__adddf3>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4610      	mov	r0, r2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <compensate_temperature+0x1e0>)
 8001cc4:	f7fe fdf2 	bl	80008ac <__aeabi_ddiv>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <compensate_temperature+0x1e4>)
 8001cd6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cda:	f7fe ff2f 	bl	8000b3c <__aeabi_dcmplt>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d007      	beq.n	8001cf4 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <compensate_temperature+0x1e4>)
 8001cea:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <compensate_temperature+0x1e8>)
 8001cfa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cfe:	f7fe ff3b 	bl	8000b78 <__aeabi_dcmpgt>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d007      	beq.n	8001d18 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <compensate_temperature+0x1e8>)
 8001d0e:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 8001d18:	68f9      	ldr	r1, [r7, #12]
 8001d1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d1e:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001d22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3730      	adds	r7, #48	; 0x30
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d30:	40d00000 	.word	0x40d00000
 8001d34:	40900000 	.word	0x40900000
 8001d38:	40c00000 	.word	0x40c00000
 8001d3c:	40b40000 	.word	0x40b40000
 8001d40:	c0440000 	.word	0xc0440000
 8001d44:	40554000 	.word	0x40554000

08001d48 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001d48:	b5b0      	push	{r4, r5, r7, lr}
 8001d4a:	b08c      	sub	sp, #48	; 0x30
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fc0a 	bl	8000584 <__aeabi_i2d>
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d78:	f7fe fd98 	bl	80008ac <__aeabi_ddiv>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4610      	mov	r0, r2
 8001d82:	4619      	mov	r1, r3
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	4bcb      	ldr	r3, [pc, #812]	; (80020b8 <compensate_pressure+0x370>)
 8001d8a:	f7fe faad 	bl	80002e8 <__aeabi_dsub>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001d96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d9e:	f7fe fc5b 	bl	8000658 <__aeabi_dmul>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4614      	mov	r4, r2
 8001da8:	461d      	mov	r5, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe fbe7 	bl	8000584 <__aeabi_i2d>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4620      	mov	r0, r4
 8001dbc:	4629      	mov	r1, r5
 8001dbe:	f7fe fc4b 	bl	8000658 <__aeabi_dmul>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	4bbb      	ldr	r3, [pc, #748]	; (80020bc <compensate_pressure+0x374>)
 8001dd0:	f7fe fd6c 	bl	80008ac <__aeabi_ddiv>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fbce 	bl	8000584 <__aeabi_i2d>
 8001de8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dec:	f7fe fc34 	bl	8000658 <__aeabi_dmul>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	f7fe fa76 	bl	80002ec <__adddf3>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e08:	f7fe fa70 	bl	80002ec <__adddf3>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	4ba9      	ldr	r3, [pc, #676]	; (80020c0 <compensate_pressure+0x378>)
 8001e1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e1e:	f7fe fd45 	bl	80008ac <__aeabi_ddiv>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4614      	mov	r4, r2
 8001e28:	461d      	mov	r5, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fba7 	bl	8000584 <__aeabi_i2d>
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	4ba2      	ldr	r3, [pc, #648]	; (80020c4 <compensate_pressure+0x37c>)
 8001e3c:	f7fe fc0c 	bl	8000658 <__aeabi_dmul>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4620      	mov	r0, r4
 8001e46:	4629      	mov	r1, r5
 8001e48:	f7fe fa50 	bl	80002ec <__adddf3>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fb92 	bl	8000584 <__aeabi_i2d>
 8001e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e64:	f7fe fbf8 	bl	8000658 <__aeabi_dmul>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e74:	f7fe fbf0 	bl	8000658 <__aeabi_dmul>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	4b90      	ldr	r3, [pc, #576]	; (80020c8 <compensate_pressure+0x380>)
 8001e86:	f7fe fd11 	bl	80008ac <__aeabi_ddiv>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4614      	mov	r4, r2
 8001e90:	461d      	mov	r5, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fb73 	bl	8000584 <__aeabi_i2d>
 8001e9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ea2:	f7fe fbd9 	bl	8000658 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4620      	mov	r0, r4
 8001eac:	4629      	mov	r1, r5
 8001eae:	f7fe fa1d 	bl	80002ec <__adddf3>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	4b82      	ldr	r3, [pc, #520]	; (80020c8 <compensate_pressure+0x380>)
 8001ec0:	f7fe fcf4 	bl	80008ac <__aeabi_ddiv>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	4b7a      	ldr	r3, [pc, #488]	; (80020bc <compensate_pressure+0x374>)
 8001ed2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ed6:	f7fe fce9 	bl	80008ac <__aeabi_ddiv>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4610      	mov	r0, r2
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	4b79      	ldr	r3, [pc, #484]	; (80020cc <compensate_pressure+0x384>)
 8001ee8:	f7fe fa00 	bl	80002ec <__adddf3>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4614      	mov	r4, r2
 8001ef2:	461d      	mov	r5, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fb33 	bl	8000564 <__aeabi_ui2d>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4620      	mov	r0, r4
 8001f04:	4629      	mov	r1, r5
 8001f06:	f7fe fba7 	bl	8000658 <__aeabi_dmul>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f1e:	f7fe fe0d 	bl	8000b3c <__aeabi_dcmplt>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10b      	bne.n	8001f40 <compensate_pressure+0x1f8>
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f34:	f7fe fe20 	bl	8000b78 <__aeabi_dcmpgt>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 80de 	beq.w	80020fc <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fb0d 	bl	8000564 <__aeabi_ui2d>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	f04f 0000 	mov.w	r0, #0
 8001f52:	495f      	ldr	r1, [pc, #380]	; (80020d0 <compensate_pressure+0x388>)
 8001f54:	f7fe f9c8 	bl	80002e8 <__aeabi_dsub>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	4b5b      	ldr	r3, [pc, #364]	; (80020d4 <compensate_pressure+0x38c>)
 8001f66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f6a:	f7fe fc9f 	bl	80008ac <__aeabi_ddiv>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f76:	f7fe f9b7 	bl	80002e8 <__aeabi_dsub>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	a347      	add	r3, pc, #284	; (adr r3, 80020a0 <compensate_pressure+0x358>)
 8001f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f88:	f7fe fb66 	bl	8000658 <__aeabi_dmul>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f98:	f7fe fc88 	bl	80008ac <__aeabi_ddiv>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe faea 	bl	8000584 <__aeabi_i2d>
 8001fb0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fb4:	f7fe fb50 	bl	8000658 <__aeabi_dmul>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fc4:	f7fe fb48 	bl	8000658 <__aeabi_dmul>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	4b40      	ldr	r3, [pc, #256]	; (80020d8 <compensate_pressure+0x390>)
 8001fd6:	f7fe fc69 	bl	80008ac <__aeabi_ddiv>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe facb 	bl	8000584 <__aeabi_i2d>
 8001fee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ff2:	f7fe fb31 	bl	8000658 <__aeabi_dmul>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	4b2e      	ldr	r3, [pc, #184]	; (80020bc <compensate_pressure+0x374>)
 8002004:	f7fe fc52 	bl	80008ac <__aeabi_ddiv>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8002010:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002014:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002018:	f7fe f968 	bl	80002ec <__adddf3>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4614      	mov	r4, r2
 8002022:	461d      	mov	r5, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe faaa 	bl	8000584 <__aeabi_i2d>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4620      	mov	r0, r4
 8002036:	4629      	mov	r1, r5
 8002038:	f7fe f958 	bl	80002ec <__adddf3>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <compensate_pressure+0x394>)
 800204a:	f7fe fc2f 	bl	80008ac <__aeabi_ddiv>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002056:	f7fe f949 	bl	80002ec <__adddf3>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8002062:	a311      	add	r3, pc, #68	; (adr r3, 80020a8 <compensate_pressure+0x360>)
 8002064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002068:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800206c:	f7fe fd66 	bl	8000b3c <__aeabi_dcmplt>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d007      	beq.n	8002086 <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8002076:	a30c      	add	r3, pc, #48	; (adr r3, 80020a8 <compensate_pressure+0x360>)
 8002078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207c:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8002080:	2303      	movs	r3, #3
 8002082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8002086:	a30a      	add	r3, pc, #40	; (adr r3, 80020b0 <compensate_pressure+0x368>)
 8002088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002090:	f7fe fd72 	bl	8000b78 <__aeabi_dcmpgt>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	e022      	b.n	80020e0 <compensate_pressure+0x398>
 800209a:	bf00      	nop
 800209c:	f3af 8000 	nop.w
 80020a0:	00000000 	.word	0x00000000
 80020a4:	40b86a00 	.word	0x40b86a00
 80020a8:	00000000 	.word	0x00000000
 80020ac:	40dd4c00 	.word	0x40dd4c00
 80020b0:	00000000 	.word	0x00000000
 80020b4:	40fadb00 	.word	0x40fadb00
 80020b8:	40ef4000 	.word	0x40ef4000
 80020bc:	40e00000 	.word	0x40e00000
 80020c0:	40100000 	.word	0x40100000
 80020c4:	40f00000 	.word	0x40f00000
 80020c8:	41200000 	.word	0x41200000
 80020cc:	3ff00000 	.word	0x3ff00000
 80020d0:	41300000 	.word	0x41300000
 80020d4:	40b00000 	.word	0x40b00000
 80020d8:	41e00000 	.word	0x41e00000
 80020dc:	40300000 	.word	0x40300000
 80020e0:	d007      	beq.n	80020f2 <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 80020e2:	a309      	add	r3, pc, #36	; (adr r3, 8002108 <compensate_pressure+0x3c0>)
 80020e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e8:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 80020ec:	2304      	movs	r3, #4
 80020ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 80020f2:	68f9      	ldr	r1, [r7, #12]
 80020f4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020f8:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 80020fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002100:	4618      	mov	r0, r3
 8002102:	3730      	adds	r7, #48	; 0x30
 8002104:	46bd      	mov	sp, r7
 8002106:	bdb0      	pop	{r4, r5, r7, pc}
 8002108:	00000000 	.word	0x00000000
 800210c:	40fadb00 	.word	0x40fadb00

08002110 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	db03      	blt.n	800212c <st_check_boundaries+0x1c>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	4a1c      	ldr	r2, [pc, #112]	; (8002198 <st_check_boundaries+0x88>)
 8002128:	4293      	cmp	r3, r2
 800212a:	dd09      	ble.n	8002140 <st_check_boundaries+0x30>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	db06      	blt.n	8002140 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a18      	ldr	r2, [pc, #96]	; (8002198 <st_check_boundaries+0x88>)
 8002136:	4293      	cmp	r3, r2
 8002138:	dc02      	bgt.n	8002140 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 800213a:	23fa      	movs	r3, #250	; 0xfa
 800213c:	73fb      	strb	r3, [r7, #15]
 800213e:	e023      	b.n	8002188 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	db03      	blt.n	800214e <st_check_boundaries+0x3e>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a13      	ldr	r2, [pc, #76]	; (8002198 <st_check_boundaries+0x88>)
 800214a:	4293      	cmp	r3, r2
 800214c:	dd09      	ble.n	8002162 <st_check_boundaries+0x52>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	db06      	blt.n	8002162 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	4a10      	ldr	r2, [pc, #64]	; (8002198 <st_check_boundaries+0x88>)
 8002158:	4293      	cmp	r3, r2
 800215a:	dc02      	bgt.n	8002162 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 800215c:	23fb      	movs	r3, #251	; 0xfb
 800215e:	73fb      	strb	r3, [r7, #15]
 8002160:	e012      	b.n	8002188 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	db03      	blt.n	8002170 <st_check_boundaries+0x60>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4a0b      	ldr	r2, [pc, #44]	; (8002198 <st_check_boundaries+0x88>)
 800216c:	4293      	cmp	r3, r2
 800216e:	dd09      	ble.n	8002184 <st_check_boundaries+0x74>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	db03      	blt.n	800217e <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a07      	ldr	r2, [pc, #28]	; (8002198 <st_check_boundaries+0x88>)
 800217a:	4293      	cmp	r3, r2
 800217c:	dd02      	ble.n	8002184 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 800217e:	23f9      	movs	r3, #249	; 0xf9
 8002180:	73fb      	strb	r3, [r7, #15]
 8002182:	e001      	b.n	8002188 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002188:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	000ffff0 	.word	0x000ffff0

0800219c <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff f839 	bl	800121c <bmp2_init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 80021ae:	f107 0308 	add.w	r3, r7, #8
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff f91e 	bl	80013f6 <bmp2_get_config>
 80021ba:	4603      	mov	r3, r0
 80021bc:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 80021be:	2303      	movs	r3, #3
 80021c0:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 80021c2:	2300      	movs	r3, #0
 80021c4:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 80021c6:	2303      	movs	r3, #3
 80021c8:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 80021ca:	f107 0308 	add.w	r3, r7, #8
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff f950 	bl	8001476 <bmp2_set_config>
 80021d6:	4603      	mov	r3, r0
 80021d8:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 80021da:	f107 0308 	add.w	r3, r7, #8
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	4619      	mov	r1, r3
 80021e2:	2003      	movs	r0, #3
 80021e4:	f7ff f982 	bl	80014ec <bmp2_set_power_mode>
 80021e8:	4603      	mov	r3, r0
 80021ea:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 80021ec:	f107 0108 	add.w	r1, r7, #8
 80021f0:	f107 0310 	add.w	r3, r7, #16
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fa0c 	bl	8001614 <bmp2_compute_meas_time>
 80021fc:	4603      	mov	r3, r0
 80021fe:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8002200:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	4603      	mov	r3, r0
 800221a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 800221c:	2300      	movs	r3, #0
 800221e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002220:	2300      	movs	r3, #0
 8002222:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	6858      	ldr	r0, [r3, #4]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	891b      	ldrh	r3, [r3, #8]
 8002230:	2200      	movs	r2, #0
 8002232:	4619      	mov	r1, r3
 8002234:	f003 fdea 	bl	8005e0c <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	f107 010f 	add.w	r1, r7, #15
 8002240:	2305      	movs	r3, #5
 8002242:	2201      	movs	r2, #1
 8002244:	f005 fea7 	bl	8007f96 <HAL_SPI_Transmit>
 8002248:	4603      	mov	r3, r0
 800224a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	b29a      	uxth	r2, r3
 8002254:	2305      	movs	r3, #5
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	f006 f80b 	bl	8008272 <HAL_SPI_Receive>
 800225c:	4603      	mov	r3, r0
 800225e:	461a      	mov	r2, r3
 8002260:	7dbb      	ldrb	r3, [r7, #22]
 8002262:	4413      	add	r3, r2
 8002264:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	6858      	ldr	r0, [r3, #4]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	891b      	ldrh	r3, [r3, #8]
 800226e:	2201      	movs	r2, #1
 8002270:	4619      	mov	r1, r3
 8002272:	f003 fdcb 	bl	8005e0c <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002276:	7dbb      	ldrb	r3, [r7, #22]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <bmp2_spi_read+0x74>
    iError = -1;
 800227c:	23ff      	movs	r3, #255	; 0xff
 800227e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002280:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	4603      	mov	r3, r0
 800229a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 800229c:	2300      	movs	r3, #0
 800229e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 80022a0:	2300      	movs	r3, #0
 80022a2:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	6858      	ldr	r0, [r3, #4]
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	891b      	ldrh	r3, [r3, #8]
 80022b0:	2200      	movs	r2, #0
 80022b2:	4619      	mov	r1, r3
 80022b4:	f003 fdaa 	bl	8005e0c <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	f107 010f 	add.w	r1, r7, #15
 80022c0:	2305      	movs	r3, #5
 80022c2:	2201      	movs	r2, #1
 80022c4:	f005 fe67 	bl	8007f96 <HAL_SPI_Transmit>
 80022c8:	4603      	mov	r3, r0
 80022ca:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	2305      	movs	r3, #5
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	f005 fe5d 	bl	8007f96 <HAL_SPI_Transmit>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	7dbb      	ldrb	r3, [r7, #22]
 80022e2:	4413      	add	r3, r2
 80022e4:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	6858      	ldr	r0, [r3, #4]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	891b      	ldrh	r3, [r3, #8]
 80022ee:	2201      	movs	r2, #1
 80022f0:	4619      	mov	r1, r3
 80022f2:	f003 fd8b 	bl	8005e0c <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 80022f6:	7dbb      	ldrb	r3, [r7, #22]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <bmp2_spi_write+0x74>
    iError = -1;
 80022fc:	23ff      	movs	r3, #255	; 0xff
 80022fe:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002300:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a05      	ldr	r2, [pc, #20]	; (8002330 <bmp2_delay_us+0x24>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	099b      	lsrs	r3, r3, #6
 8002320:	4618      	mov	r0, r3
 8002322:	f003 fa57 	bl	80057d4 <HAL_Delay>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	10624dd3 	.word	0x10624dd3

08002334 <BMP2_ReadData>:
 *  @retval 0 -> Success.
 *  @retval <0 -> Failure.
 *
 */
int8_t BMP2_ReadData(struct bmp2_dev *dev, double* press, double* temp)
{
 8002334:	b590      	push	{r4, r7, lr}
 8002336:	b08b      	sub	sp, #44	; 0x2c
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 8002340:	23ff      	movs	r3, #255	; 0xff
 8002342:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  struct bmp2_status status;
  struct bmp2_data comp_data;
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	899b      	ldrh	r3, [r3, #12]
 800234c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 8002350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002354:	68f9      	ldr	r1, [r7, #12]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff f89c 	bl	8001494 <bmp2_get_status>
 800235c:	4603      	mov	r3, r0
 800235e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 8002362:	f107 0310 	add.w	r3, r7, #16
 8002366:	68f9      	ldr	r1, [r7, #12]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff f8d4 	bl	8001516 <bmp2_get_sensor_data>
 800236e:	4603      	mov	r3, r0
 8002370:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    *temp = comp_data.temperature;
 8002374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	e9c1 2300 	strd	r2, r3, [r1]
    *press = comp_data.pressure / 100.0;
 800237e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	4b1c      	ldr	r3, [pc, #112]	; (80023f8 <BMP2_ReadData+0xc4>)
 8002388:	f7fe fa90 	bl	80008ac <__aeabi_ddiv>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	e9c1 2300 	strd	r2, r3, [r1]
    try--;
 8002396:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800239a:	b2db      	uxtb	r3, r3
 800239c:	3b01      	subs	r3, #1
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 80023a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <BMP2_ReadData+0x80>
 80023ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	dccd      	bgt.n	8002350 <BMP2_ReadData+0x1c>

  /* Save reading result in sensor handler */
  BMP2_GET_PRESS(dev) = *press;
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ba:	68f9      	ldr	r1, [r7, #12]
 80023bc:	684c      	ldr	r4, [r1, #4]
 80023be:	4610      	mov	r0, r2
 80023c0:	4619      	mov	r1, r3
 80023c2:	f7fe fc2b 	bl	8000c1c <__aeabi_d2f>
 80023c6:	4603      	mov	r3, r0
 80023c8:	6163      	str	r3, [r4, #20]
  BMP2_GET_TEMP(dev) = *temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d0:	68f9      	ldr	r1, [r7, #12]
 80023d2:	684c      	ldr	r4, [r1, #4]
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	f7fe fc20 	bl	8000c1c <__aeabi_d2f>
 80023dc:	4603      	mov	r3, r0
 80023de:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80023e8:	729a      	strb	r2, [r3, #10]

  return rslt;
 80023ea:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	372c      	adds	r7, #44	; 0x2c
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd90      	pop	{r4, r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40590000 	.word	0x40590000

080023fc <MX_GPIO_Init>:
        * EXTI
     PD8   ------> USART3_TX
     PD9   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08e      	sub	sp, #56	; 0x38
 8002400:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	605a      	str	r2, [r3, #4]
 800240c:	609a      	str	r2, [r3, #8]
 800240e:	60da      	str	r2, [r3, #12]
 8002410:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002412:	4b82      	ldr	r3, [pc, #520]	; (800261c <MX_GPIO_Init+0x220>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a81      	ldr	r2, [pc, #516]	; (800261c <MX_GPIO_Init+0x220>)
 8002418:	f043 0310 	orr.w	r3, r3, #16
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b7f      	ldr	r3, [pc, #508]	; (800261c <MX_GPIO_Init+0x220>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	623b      	str	r3, [r7, #32]
 8002428:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800242a:	4b7c      	ldr	r3, [pc, #496]	; (800261c <MX_GPIO_Init+0x220>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a7b      	ldr	r2, [pc, #492]	; (800261c <MX_GPIO_Init+0x220>)
 8002430:	f043 0304 	orr.w	r3, r3, #4
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b79      	ldr	r3, [pc, #484]	; (800261c <MX_GPIO_Init+0x220>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	61fb      	str	r3, [r7, #28]
 8002440:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002442:	4b76      	ldr	r3, [pc, #472]	; (800261c <MX_GPIO_Init+0x220>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	4a75      	ldr	r2, [pc, #468]	; (800261c <MX_GPIO_Init+0x220>)
 8002448:	f043 0320 	orr.w	r3, r3, #32
 800244c:	6313      	str	r3, [r2, #48]	; 0x30
 800244e:	4b73      	ldr	r3, [pc, #460]	; (800261c <MX_GPIO_Init+0x220>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800245a:	4b70      	ldr	r3, [pc, #448]	; (800261c <MX_GPIO_Init+0x220>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	4a6f      	ldr	r2, [pc, #444]	; (800261c <MX_GPIO_Init+0x220>)
 8002460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002464:	6313      	str	r3, [r2, #48]	; 0x30
 8002466:	4b6d      	ldr	r3, [pc, #436]	; (800261c <MX_GPIO_Init+0x220>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002472:	4b6a      	ldr	r3, [pc, #424]	; (800261c <MX_GPIO_Init+0x220>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	4a69      	ldr	r2, [pc, #420]	; (800261c <MX_GPIO_Init+0x220>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6313      	str	r3, [r2, #48]	; 0x30
 800247e:	4b67      	ldr	r3, [pc, #412]	; (800261c <MX_GPIO_Init+0x220>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800248a:	4b64      	ldr	r3, [pc, #400]	; (800261c <MX_GPIO_Init+0x220>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4a63      	ldr	r2, [pc, #396]	; (800261c <MX_GPIO_Init+0x220>)
 8002490:	f043 0302 	orr.w	r3, r3, #2
 8002494:	6313      	str	r3, [r2, #48]	; 0x30
 8002496:	4b61      	ldr	r3, [pc, #388]	; (800261c <MX_GPIO_Init+0x220>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024a2:	4b5e      	ldr	r3, [pc, #376]	; (800261c <MX_GPIO_Init+0x220>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a5d      	ldr	r2, [pc, #372]	; (800261c <MX_GPIO_Init+0x220>)
 80024a8:	f043 0308 	orr.w	r3, r3, #8
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b5b      	ldr	r3, [pc, #364]	; (800261c <MX_GPIO_Init+0x220>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024ba:	4b58      	ldr	r3, [pc, #352]	; (800261c <MX_GPIO_Init+0x220>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a57      	ldr	r2, [pc, #348]	; (800261c <MX_GPIO_Init+0x220>)
 80024c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b55      	ldr	r3, [pc, #340]	; (800261c <MX_GPIO_Init+0x220>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP2_CSB_Pin|Alarm_LED_Pin, GPIO_PIN_RESET);
 80024d2:	2200      	movs	r2, #0
 80024d4:	f248 0110 	movw	r1, #32784	; 0x8010
 80024d8:	4851      	ldr	r0, [pc, #324]	; (8002620 <MX_GPIO_Init+0x224>)
 80024da:	f003 fc97 	bl	8005e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Battery_Pin|Output_Pin, GPIO_PIN_RESET);
 80024de:	2200      	movs	r2, #0
 80024e0:	2128      	movs	r1, #40	; 0x28
 80024e2:	4850      	ldr	r0, [pc, #320]	; (8002624 <MX_GPIO_Init+0x228>)
 80024e4:	f003 fc92 	bl	8005e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PowerSupply_GPIO_Port, PowerSupply_Pin, GPIO_PIN_RESET);
 80024e8:	2200      	movs	r2, #0
 80024ea:	2108      	movs	r1, #8
 80024ec:	484e      	ldr	r0, [pc, #312]	; (8002628 <MX_GPIO_Init+0x22c>)
 80024ee:	f003 fc8d 	bl	8005e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80024f2:	2200      	movs	r2, #0
 80024f4:	2140      	movs	r1, #64	; 0x40
 80024f6:	484d      	ldr	r0, [pc, #308]	; (800262c <MX_GPIO_Init+0x230>)
 80024f8:	f003 fc88 	bl	8005e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80024fc:	2200      	movs	r2, #0
 80024fe:	2180      	movs	r1, #128	; 0x80
 8002500:	484b      	ldr	r0, [pc, #300]	; (8002630 <MX_GPIO_Init+0x234>)
 8002502:	f003 fc83 	bl	8005e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BMP2_CSB_Pin|Alarm_LED_Pin;
 8002506:	f248 0310 	movw	r3, #32784	; 0x8010
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800250c:	2301      	movs	r3, #1
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002514:	2300      	movs	r3, #0
 8002516:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800251c:	4619      	mov	r1, r3
 800251e:	4840      	ldr	r0, [pc, #256]	; (8002620 <MX_GPIO_Init+0x224>)
 8002520:	f003 fab0 	bl	8005a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002524:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800252a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800252e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002538:	4619      	mov	r1, r3
 800253a:	483e      	ldr	r0, [pc, #248]	; (8002634 <MX_GPIO_Init+0x238>)
 800253c:	f003 faa2 	bl	8005a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = Battery_Pin|Output_Pin;
 8002540:	2328      	movs	r3, #40	; 0x28
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002544:	2301      	movs	r3, #1
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254c:	2300      	movs	r3, #0
 800254e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002554:	4619      	mov	r1, r3
 8002556:	4833      	ldr	r0, [pc, #204]	; (8002624 <MX_GPIO_Init+0x228>)
 8002558:	f003 fa94 	bl	8005a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PowerSupply_Pin;
 800255c:	2308      	movs	r3, #8
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002560:	2301      	movs	r3, #1
 8002562:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002568:	2300      	movs	r3, #0
 800256a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PowerSupply_GPIO_Port, &GPIO_InitStruct);
 800256c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002570:	4619      	mov	r1, r3
 8002572:	482d      	ldr	r0, [pc, #180]	; (8002628 <MX_GPIO_Init+0x22c>)
 8002574:	f003 fa86 	bl	8005a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PIR_Livingroom_Pin|PIR_Garage_Pin|PIR_Kitchen_Pin;
 8002578:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800257e:	2300      	movs	r3, #0
 8002580:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800258a:	4619      	mov	r1, r3
 800258c:	4824      	ldr	r0, [pc, #144]	; (8002620 <MX_GPIO_Init+0x224>)
 800258e:	f003 fa79 	bl	8005a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002592:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002598:	2302      	movs	r3, #2
 800259a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800259c:	2301      	movs	r3, #1
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a0:	2303      	movs	r3, #3
 80025a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025a4:	2307      	movs	r3, #7
 80025a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ac:	4619      	mov	r1, r3
 80025ae:	4822      	ldr	r0, [pc, #136]	; (8002638 <MX_GPIO_Init+0x23c>)
 80025b0:	f003 fa68 	bl	8005a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80025b4:	2340      	movs	r3, #64	; 0x40
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b8:	2301      	movs	r3, #1
 80025ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c0:	2300      	movs	r3, #0
 80025c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80025c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c8:	4619      	mov	r1, r3
 80025ca:	4818      	ldr	r0, [pc, #96]	; (800262c <MX_GPIO_Init+0x230>)
 80025cc:	f003 fa5a 	bl	8005a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025d4:	2300      	movs	r3, #0
 80025d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80025dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e0:	4619      	mov	r1, r3
 80025e2:	4812      	ldr	r0, [pc, #72]	; (800262c <MX_GPIO_Init+0x230>)
 80025e4:	f003 fa4e 	bl	8005a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80025e8:	2380      	movs	r3, #128	; 0x80
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ec:	2301      	movs	r3, #1
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f4:	2300      	movs	r3, #0
 80025f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80025f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025fc:	4619      	mov	r1, r3
 80025fe:	480c      	ldr	r0, [pc, #48]	; (8002630 <MX_GPIO_Init+0x234>)
 8002600:	f003 fa40 	bl	8005a84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002604:	2200      	movs	r2, #0
 8002606:	2100      	movs	r1, #0
 8002608:	2028      	movs	r0, #40	; 0x28
 800260a:	f003 f9e2 	bl	80059d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800260e:	2028      	movs	r0, #40	; 0x28
 8002610:	f003 f9fb 	bl	8005a0a <HAL_NVIC_EnableIRQ>

}
 8002614:	bf00      	nop
 8002616:	3738      	adds	r7, #56	; 0x38
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40023800 	.word	0x40023800
 8002620:	40021000 	.word	0x40021000
 8002624:	40021400 	.word	0x40021400
 8002628:	40020000 	.word	0x40020000
 800262c:	40021800 	.word	0x40021800
 8002630:	40020400 	.word	0x40020400
 8002634:	40020800 	.word	0x40020800
 8002638:	40020c00 	.word	0x40020c00

0800263c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002640:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <MX_I2C1_Init+0x74>)
 8002642:	4a1c      	ldr	r2, [pc, #112]	; (80026b4 <MX_I2C1_Init+0x78>)
 8002644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8002646:	4b1a      	ldr	r3, [pc, #104]	; (80026b0 <MX_I2C1_Init+0x74>)
 8002648:	4a1b      	ldr	r2, [pc, #108]	; (80026b8 <MX_I2C1_Init+0x7c>)
 800264a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800264c:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <MX_I2C1_Init+0x74>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002652:	4b17      	ldr	r3, [pc, #92]	; (80026b0 <MX_I2C1_Init+0x74>)
 8002654:	2201      	movs	r2, #1
 8002656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002658:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <MX_I2C1_Init+0x74>)
 800265a:	2200      	movs	r2, #0
 800265c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800265e:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <MX_I2C1_Init+0x74>)
 8002660:	2200      	movs	r2, #0
 8002662:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002664:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <MX_I2C1_Init+0x74>)
 8002666:	2200      	movs	r2, #0
 8002668:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800266a:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <MX_I2C1_Init+0x74>)
 800266c:	2200      	movs	r2, #0
 800266e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002670:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <MX_I2C1_Init+0x74>)
 8002672:	2200      	movs	r2, #0
 8002674:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002676:	480e      	ldr	r0, [pc, #56]	; (80026b0 <MX_I2C1_Init+0x74>)
 8002678:	f003 fc20 	bl	8005ebc <HAL_I2C_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002682:	f002 fa73 	bl	8004b6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002686:	2100      	movs	r1, #0
 8002688:	4809      	ldr	r0, [pc, #36]	; (80026b0 <MX_I2C1_Init+0x74>)
 800268a:	f004 fa77 	bl	8006b7c <HAL_I2CEx_ConfigAnalogFilter>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002694:	f002 fa6a 	bl	8004b6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002698:	2100      	movs	r1, #0
 800269a:	4805      	ldr	r0, [pc, #20]	; (80026b0 <MX_I2C1_Init+0x74>)
 800269c:	f004 fab9 	bl	8006c12 <HAL_I2CEx_ConfigDigitalFilter>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80026a6:	f002 fa61 	bl	8004b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	200001bc 	.word	0x200001bc
 80026b4:	40005400 	.word	0x40005400
 80026b8:	00808cd2 	.word	0x00808cd2

080026bc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80026c0:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <MX_I2C2_Init+0x74>)
 80026c2:	4a1c      	ldr	r2, [pc, #112]	; (8002734 <MX_I2C2_Init+0x78>)
 80026c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 80026c6:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <MX_I2C2_Init+0x74>)
 80026c8:	4a1b      	ldr	r2, [pc, #108]	; (8002738 <MX_I2C2_Init+0x7c>)
 80026ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80026cc:	4b18      	ldr	r3, [pc, #96]	; (8002730 <MX_I2C2_Init+0x74>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026d2:	4b17      	ldr	r3, [pc, #92]	; (8002730 <MX_I2C2_Init+0x74>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026d8:	4b15      	ldr	r3, [pc, #84]	; (8002730 <MX_I2C2_Init+0x74>)
 80026da:	2200      	movs	r2, #0
 80026dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80026de:	4b14      	ldr	r3, [pc, #80]	; (8002730 <MX_I2C2_Init+0x74>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026e4:	4b12      	ldr	r3, [pc, #72]	; (8002730 <MX_I2C2_Init+0x74>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026ea:	4b11      	ldr	r3, [pc, #68]	; (8002730 <MX_I2C2_Init+0x74>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <MX_I2C2_Init+0x74>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80026f6:	480e      	ldr	r0, [pc, #56]	; (8002730 <MX_I2C2_Init+0x74>)
 80026f8:	f003 fbe0 	bl	8005ebc <HAL_I2C_Init>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002702:	f002 fa33 	bl	8004b6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002706:	2100      	movs	r1, #0
 8002708:	4809      	ldr	r0, [pc, #36]	; (8002730 <MX_I2C2_Init+0x74>)
 800270a:	f004 fa37 	bl	8006b7c <HAL_I2CEx_ConfigAnalogFilter>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002714:	f002 fa2a 	bl	8004b6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002718:	2100      	movs	r1, #0
 800271a:	4805      	ldr	r0, [pc, #20]	; (8002730 <MX_I2C2_Init+0x74>)
 800271c:	f004 fa79 	bl	8006c12 <HAL_I2CEx_ConfigDigitalFilter>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002726:	f002 fa21 	bl	8004b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20000210 	.word	0x20000210
 8002734:	40005800 	.word	0x40005800
 8002738:	00808cd2 	.word	0x00808cd2

0800273c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b0ac      	sub	sp, #176	; 0xb0
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002754:	f107 0318 	add.w	r3, r7, #24
 8002758:	2284      	movs	r2, #132	; 0x84
 800275a:	2100      	movs	r1, #0
 800275c:	4618      	mov	r0, r3
 800275e:	f008 fee1 	bl	800b524 <memset>
  if(i2cHandle->Instance==I2C1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a43      	ldr	r2, [pc, #268]	; (8002874 <HAL_I2C_MspInit+0x138>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d13d      	bne.n	80027e8 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800276c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002770:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002772:	2300      	movs	r3, #0
 8002774:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002776:	f107 0318 	add.w	r3, r7, #24
 800277a:	4618      	mov	r0, r3
 800277c:	f004 ff70 	bl	8007660 <HAL_RCCEx_PeriphCLKConfig>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002786:	f002 f9f1 	bl	8004b6c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278a:	4b3b      	ldr	r3, [pc, #236]	; (8002878 <HAL_I2C_MspInit+0x13c>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a3a      	ldr	r2, [pc, #232]	; (8002878 <HAL_I2C_MspInit+0x13c>)
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b38      	ldr	r3, [pc, #224]	; (8002878 <HAL_I2C_MspInit+0x13c>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_INA219_Solar_Pin|I2C1_SDA_INA219_Solar_Pin;
 80027a2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80027a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027aa:	2312      	movs	r3, #18
 80027ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b6:	2303      	movs	r3, #3
 80027b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027bc:	2304      	movs	r3, #4
 80027be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027c6:	4619      	mov	r1, r3
 80027c8:	482c      	ldr	r0, [pc, #176]	; (800287c <HAL_I2C_MspInit+0x140>)
 80027ca:	f003 f95b 	bl	8005a84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027ce:	4b2a      	ldr	r3, [pc, #168]	; (8002878 <HAL_I2C_MspInit+0x13c>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	4a29      	ldr	r2, [pc, #164]	; (8002878 <HAL_I2C_MspInit+0x13c>)
 80027d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027d8:	6413      	str	r3, [r2, #64]	; 0x40
 80027da:	4b27      	ldr	r3, [pc, #156]	; (8002878 <HAL_I2C_MspInit+0x13c>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80027e6:	e041      	b.n	800286c <HAL_I2C_MspInit+0x130>
  else if(i2cHandle->Instance==I2C2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a24      	ldr	r2, [pc, #144]	; (8002880 <HAL_I2C_MspInit+0x144>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d13c      	bne.n	800286c <HAL_I2C_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80027f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027fe:	f107 0318 	add.w	r3, r7, #24
 8002802:	4618      	mov	r0, r3
 8002804:	f004 ff2c 	bl	8007660 <HAL_RCCEx_PeriphCLKConfig>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800280e:	f002 f9ad 	bl	8004b6c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002812:	4b19      	ldr	r3, [pc, #100]	; (8002878 <HAL_I2C_MspInit+0x13c>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a18      	ldr	r2, [pc, #96]	; (8002878 <HAL_I2C_MspInit+0x13c>)
 8002818:	f043 0320 	orr.w	r3, r3, #32
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b16      	ldr	r3, [pc, #88]	; (8002878 <HAL_I2C_MspInit+0x13c>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C2_SDA_INA219_Output_Pin|I2C2_SCL_Output_Pin;
 800282a:	2303      	movs	r3, #3
 800282c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002830:	2312      	movs	r3, #18
 8002832:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283c:	2303      	movs	r3, #3
 800283e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002842:	2304      	movs	r3, #4
 8002844:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002848:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800284c:	4619      	mov	r1, r3
 800284e:	480d      	ldr	r0, [pc, #52]	; (8002884 <HAL_I2C_MspInit+0x148>)
 8002850:	f003 f918 	bl	8005a84 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002854:	4b08      	ldr	r3, [pc, #32]	; (8002878 <HAL_I2C_MspInit+0x13c>)
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	4a07      	ldr	r2, [pc, #28]	; (8002878 <HAL_I2C_MspInit+0x13c>)
 800285a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800285e:	6413      	str	r3, [r2, #64]	; 0x40
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_I2C_MspInit+0x13c>)
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	68bb      	ldr	r3, [r7, #8]
}
 800286c:	bf00      	nop
 800286e:	37b0      	adds	r7, #176	; 0xb0
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40005400 	.word	0x40005400
 8002878:	40023800 	.word	0x40023800
 800287c:	40020400 	.word	0x40020400
 8002880:	40005800 	.word	0x40005800
 8002884:	40021400 	.word	0x40021400

08002888 <keypad_config>:

const char Rows[4]={R1, R2, R3, R4};
const char Cols[4]={C1, C2, C3, C4};

void keypad_config(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08a      	sub	sp, #40	; 0x28
 800288c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  if (KEYPAD_4x4_GPIO == GPIOA) __HAL_RCC_GPIOA_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOB) __HAL_RCC_GPIOB_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOC) __HAL_RCC_GPIOC_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOD) __HAL_RCC_GPIOD_CLK_ENABLE(); else
 800288e:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <keypad_config+0x60>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a15      	ldr	r2, [pc, #84]	; (80028e8 <keypad_config+0x60>)
 8002894:	f043 0308 	orr.w	r3, r3, #8
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <keypad_config+0x60>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	607b      	str	r3, [r7, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
  if (KEYPAD_4x4_GPIO == GPIOE) __HAL_RCC_GPIOE_CLK_ENABLE();


  GPIO_InitStruct.Pin = R1 | R2 | R3 | R4;
 80028a6:	230f      	movs	r3, #15
 80028a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028aa:	2301      	movs	r3, #1
 80028ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b2:	2300      	movs	r3, #0
 80028b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEYPAD_4x4_GPIO, &GPIO_InitStruct);
 80028b6:	f107 0314 	add.w	r3, r7, #20
 80028ba:	4619      	mov	r1, r3
 80028bc:	480b      	ldr	r0, [pc, #44]	; (80028ec <keypad_config+0x64>)
 80028be:	f003 f8e1 	bl	8005a84 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = C1 | C2 | C3 | C4;
 80028c2:	23f0      	movs	r3, #240	; 0xf0
 80028c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028ca:	2302      	movs	r3, #2
 80028cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ce:	2300      	movs	r3, #0
 80028d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEYPAD_4x4_GPIO, &GPIO_InitStruct);
 80028d2:	f107 0314 	add.w	r3, r7, #20
 80028d6:	4619      	mov	r1, r3
 80028d8:	4804      	ldr	r0, [pc, #16]	; (80028ec <keypad_config+0x64>)
 80028da:	f003 f8d3 	bl	8005a84 <HAL_GPIO_Init>

}
 80028de:	bf00      	nop
 80028e0:	3728      	adds	r7, #40	; 0x28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40020c00 	.word	0x40020c00

080028f0 <keypad_readkey>:

char keypad_readkey(void)
{ //returns ASCII code of a pressed key
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
  unsigned char r, c;
  char pressedKey=0x00;
 80028f6:	2300      	movs	r3, #0
 80028f8:	717b      	strb	r3, [r7, #5]

  r=0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	71fb      	strb	r3, [r7, #7]
  while (r<4) {
 80028fe:	e030      	b.n	8002962 <keypad_readkey+0x72>
    HAL_GPIO_WritePin(KEYPAD_4x4_GPIO, Rows[r], GPIO_PIN_SET);        //activate row
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	4a1c      	ldr	r2, [pc, #112]	; (8002974 <keypad_readkey+0x84>)
 8002904:	5cd3      	ldrb	r3, [r2, r3]
 8002906:	b29b      	uxth	r3, r3
 8002908:	2201      	movs	r2, #1
 800290a:	4619      	mov	r1, r3
 800290c:	481a      	ldr	r0, [pc, #104]	; (8002978 <keypad_readkey+0x88>)
 800290e:	f003 fa7d 	bl	8005e0c <HAL_GPIO_WritePin>
    c=0;
 8002912:	2300      	movs	r3, #0
 8002914:	71bb      	strb	r3, [r7, #6]
    while (c<4) {
 8002916:	e015      	b.n	8002944 <keypad_readkey+0x54>
      if (HAL_GPIO_ReadPin(KEYPAD_4x4_GPIO, Cols[c])==GPIO_PIN_SET){  //check columns
 8002918:	79bb      	ldrb	r3, [r7, #6]
 800291a:	4a18      	ldr	r2, [pc, #96]	; (800297c <keypad_readkey+0x8c>)
 800291c:	5cd3      	ldrb	r3, [r2, r3]
 800291e:	b29b      	uxth	r3, r3
 8002920:	4619      	mov	r1, r3
 8002922:	4815      	ldr	r0, [pc, #84]	; (8002978 <keypad_readkey+0x88>)
 8002924:	f003 fa5a 	bl	8005ddc <HAL_GPIO_ReadPin>
 8002928:	4603      	mov	r3, r0
 800292a:	2b01      	cmp	r3, #1
 800292c:	d107      	bne.n	800293e <keypad_readkey+0x4e>
        pressedKey=KeyMap[r][c];                                   //if column active - find key value
 800292e:	79fa      	ldrb	r2, [r7, #7]
 8002930:	79bb      	ldrb	r3, [r7, #6]
 8002932:	4913      	ldr	r1, [pc, #76]	; (8002980 <keypad_readkey+0x90>)
 8002934:	0092      	lsls	r2, r2, #2
 8002936:	440a      	add	r2, r1
 8002938:	4413      	add	r3, r2
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	717b      	strb	r3, [r7, #5]
      }
      c++;
 800293e:	79bb      	ldrb	r3, [r7, #6]
 8002940:	3301      	adds	r3, #1
 8002942:	71bb      	strb	r3, [r7, #6]
    while (c<4) {
 8002944:	79bb      	ldrb	r3, [r7, #6]
 8002946:	2b03      	cmp	r3, #3
 8002948:	d9e6      	bls.n	8002918 <keypad_readkey+0x28>
    }
    HAL_GPIO_WritePin(KEYPAD_4x4_GPIO, Rows[r], GPIO_PIN_RESET);      //deactivate row
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	4a09      	ldr	r2, [pc, #36]	; (8002974 <keypad_readkey+0x84>)
 800294e:	5cd3      	ldrb	r3, [r2, r3]
 8002950:	b29b      	uxth	r3, r3
 8002952:	2200      	movs	r2, #0
 8002954:	4619      	mov	r1, r3
 8002956:	4808      	ldr	r0, [pc, #32]	; (8002978 <keypad_readkey+0x88>)
 8002958:	f003 fa58 	bl	8005e0c <HAL_GPIO_WritePin>
    r++;
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	3301      	adds	r3, #1
 8002960:	71fb      	strb	r3, [r7, #7]
  while (r<4) {
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d9cb      	bls.n	8002900 <keypad_readkey+0x10>
  }
  return pressedKey;                                               //return ASCII key value
 8002968:	797b      	ldrb	r3, [r7, #5]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	0800c26c 	.word	0x0800c26c
 8002978:	40020c00 	.word	0x40020c00
 800297c:	0800c270 	.word	0x0800c270
 8002980:	0800c25c 	.word	0x0800c25c

08002984 <LCD_WriteNibble>:

GPIO_InitTypeDef GPIO_InitStruct;

//-----------------------------------------------------------------------------
void LCD_WriteNibble(char nibbleToWrite)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_SET);
 800298e:	2201      	movs	r2, #1
 8002990:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002994:	4818      	ldr	r0, [pc, #96]	; (80029f8 <LCD_WriteNibble+0x74>)
 8002996:	f003 fa39 	bl	8005e0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D4, (GPIO_PinState)(nibbleToWrite & 0x01));
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	2108      	movs	r1, #8
 80029a6:	4814      	ldr	r0, [pc, #80]	; (80029f8 <LCD_WriteNibble+0x74>)
 80029a8:	f003 fa30 	bl	8005e0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D5, (GPIO_PinState)(nibbleToWrite & 0x02));
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	2104      	movs	r1, #4
 80029b8:	480f      	ldr	r0, [pc, #60]	; (80029f8 <LCD_WriteNibble+0x74>)
 80029ba:	f003 fa27 	bl	8005e0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D6, (GPIO_PinState)(nibbleToWrite & 0x04));
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	2140      	movs	r1, #64	; 0x40
 80029ca:	480b      	ldr	r0, [pc, #44]	; (80029f8 <LCD_WriteNibble+0x74>)
 80029cc:	f003 fa1e 	bl	8005e0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D7, (GPIO_PinState)(nibbleToWrite & 0x08));
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	461a      	mov	r2, r3
 80029da:	2101      	movs	r1, #1
 80029dc:	4806      	ldr	r0, [pc, #24]	; (80029f8 <LCD_WriteNibble+0x74>)
 80029de:	f003 fa15 	bl	8005e0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_RESET);
 80029e2:	2200      	movs	r2, #0
 80029e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029e8:	4803      	ldr	r0, [pc, #12]	; (80029f8 <LCD_WriteNibble+0x74>)
 80029ea:	f003 fa0f 	bl	8005e0c <HAL_GPIO_WritePin>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40020800 	.word	0x40020800

080029fc <LCD_ReadNibble>:


//-----------------------------------------------------------------------------
unsigned char LCD_ReadNibble(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
  unsigned char tmp = 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_SET);
 8002a06:	2201      	movs	r2, #1
 8002a08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a0c:	481e      	ldr	r0, [pc, #120]	; (8002a88 <LCD_ReadNibble+0x8c>)
 8002a0e:	f003 f9fd 	bl	8005e0c <HAL_GPIO_WritePin>
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D4) << 0);
 8002a12:	2108      	movs	r1, #8
 8002a14:	481c      	ldr	r0, [pc, #112]	; (8002a88 <LCD_ReadNibble+0x8c>)
 8002a16:	f003 f9e1 	bl	8005ddc <HAL_GPIO_ReadPin>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	b25a      	sxtb	r2, r3
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	b25b      	sxtb	r3, r3
 8002a26:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D5) << 1);
 8002a28:	2104      	movs	r1, #4
 8002a2a:	4817      	ldr	r0, [pc, #92]	; (8002a88 <LCD_ReadNibble+0x8c>)
 8002a2c:	f003 f9d6 	bl	8005ddc <HAL_GPIO_ReadPin>
 8002a30:	4603      	mov	r3, r0
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	b25a      	sxtb	r2, r3
 8002a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	b25b      	sxtb	r3, r3
 8002a3e:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D6) << 2);
 8002a40:	2140      	movs	r1, #64	; 0x40
 8002a42:	4811      	ldr	r0, [pc, #68]	; (8002a88 <LCD_ReadNibble+0x8c>)
 8002a44:	f003 f9ca 	bl	8005ddc <HAL_GPIO_ReadPin>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	b25a      	sxtb	r2, r3
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	b25b      	sxtb	r3, r3
 8002a56:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D7) << 3);
 8002a58:	2101      	movs	r1, #1
 8002a5a:	480b      	ldr	r0, [pc, #44]	; (8002a88 <LCD_ReadNibble+0x8c>)
 8002a5c:	f003 f9be 	bl	8005ddc <HAL_GPIO_ReadPin>
 8002a60:	4603      	mov	r3, r0
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	b25a      	sxtb	r2, r3
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	b25b      	sxtb	r3, r3
 8002a6e:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_RESET);
 8002a70:	2200      	movs	r2, #0
 8002a72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a76:	4804      	ldr	r0, [pc, #16]	; (8002a88 <LCD_ReadNibble+0x8c>)
 8002a78:	f003 f9c8 	bl	8005e0c <HAL_GPIO_WritePin>
  return tmp;
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40020800 	.word	0x40020800

08002a8c <LCD_ReadStatus>:


//-----------------------------------------------------------------------------
unsigned char LCD_ReadStatus(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
  unsigned char status = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	71fb      	strb	r3, [r7, #7]
  
  GPIO_InitStruct.Pin =  LCD_D4 | LCD_D5 | LCD_D6 | LCD_D7;
 8002a96:	4b21      	ldr	r3, [pc, #132]	; (8002b1c <LCD_ReadStatus+0x90>)
 8002a98:	224d      	movs	r2, #77	; 0x4d
 8002a9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a9c:	4b1f      	ldr	r3, [pc, #124]	; (8002b1c <LCD_ReadStatus+0x90>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aa2:	4b1e      	ldr	r3, [pc, #120]	; (8002b1c <LCD_ReadStatus+0x90>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002aa8:	4b1c      	ldr	r3, [pc, #112]	; (8002b1c <LCD_ReadStatus+0x90>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aae:	491b      	ldr	r1, [pc, #108]	; (8002b1c <LCD_ReadStatus+0x90>)
 8002ab0:	481b      	ldr	r0, [pc, #108]	; (8002b20 <LCD_ReadStatus+0x94>)
 8002ab2:	f002 ffe7 	bl	8005a84 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW, GPIO_PIN_SET);
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002abc:	4818      	ldr	r0, [pc, #96]	; (8002b20 <LCD_ReadStatus+0x94>)
 8002abe:	f003 f9a5 	bl	8005e0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RS, GPIO_PIN_RESET);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ac8:	4815      	ldr	r0, [pc, #84]	; (8002b20 <LCD_ReadStatus+0x94>)
 8002aca:	f003 f99f 	bl	8005e0c <HAL_GPIO_WritePin>
  
  status |= (LCD_ReadNibble() << 4);
 8002ace:	f7ff ff95 	bl	80029fc <LCD_ReadNibble>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	b25a      	sxtb	r2, r3
 8002ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	b25b      	sxtb	r3, r3
 8002ae0:	71fb      	strb	r3, [r7, #7]
  status |= LCD_ReadNibble();
 8002ae2:	f7ff ff8b 	bl	80029fc <LCD_ReadNibble>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	461a      	mov	r2, r3
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	71fb      	strb	r3, [r7, #7]
  

  GPIO_InitStruct.Pin = LCD_D4|LCD_D5|LCD_D6|LCD_D7;
 8002af0:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <LCD_ReadStatus+0x90>)
 8002af2:	224d      	movs	r2, #77	; 0x4d
 8002af4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af6:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <LCD_ReadStatus+0x90>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <LCD_ReadStatus+0x90>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <LCD_ReadStatus+0x90>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b08:	4904      	ldr	r1, [pc, #16]	; (8002b1c <LCD_ReadStatus+0x90>)
 8002b0a:	4805      	ldr	r0, [pc, #20]	; (8002b20 <LCD_ReadStatus+0x94>)
 8002b0c:	f002 ffba 	bl	8005a84 <HAL_GPIO_Init>

  return status;
 8002b10:	79fb      	ldrb	r3, [r7, #7]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000264 	.word	0x20000264
 8002b20:	40020800 	.word	0x40020800

08002b24 <LCD_WriteData>:


//-----------------------------------------------------------------------------
void LCD_WriteData(char dataToWrite)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW, GPIO_PIN_RESET);
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b34:	4810      	ldr	r0, [pc, #64]	; (8002b78 <LCD_WriteData+0x54>)
 8002b36:	f003 f969 	bl	8005e0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RS, GPIO_PIN_SET);
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b40:	480d      	ldr	r0, [pc, #52]	; (8002b78 <LCD_WriteData+0x54>)
 8002b42:	f003 f963 	bl	8005e0c <HAL_GPIO_WritePin>
  
  LCD_WriteNibble(dataToWrite >> 4);
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff19 	bl	8002984 <LCD_WriteNibble>
  LCD_WriteNibble(dataToWrite & 0x0F);
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff ff12 	bl	8002984 <LCD_WriteNibble>
  
  while(LCD_ReadStatus() & 0x80);
 8002b60:	bf00      	nop
 8002b62:	f7ff ff93 	bl	8002a8c <LCD_ReadStatus>
 8002b66:	4603      	mov	r3, r0
 8002b68:	b25b      	sxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	dbf9      	blt.n	8002b62 <LCD_WriteData+0x3e>
}
 8002b6e:	bf00      	nop
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40020800 	.word	0x40020800

08002b7c <LCD_WriteCommand>:


//-----------------------------------------------------------------------------
void LCD_WriteCommand(char commandToWrite)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW | LCD_RS, GPIO_PIN_RESET);
 8002b86:	2200      	movs	r2, #0
 8002b88:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002b8c:	480d      	ldr	r0, [pc, #52]	; (8002bc4 <LCD_WriteCommand+0x48>)
 8002b8e:	f003 f93d 	bl	8005e0c <HAL_GPIO_WritePin>
  LCD_WriteNibble(commandToWrite >> 4);
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff fef3 	bl	8002984 <LCD_WriteNibble>
  LCD_WriteNibble(commandToWrite & 0x0F);
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff feec 	bl	8002984 <LCD_WriteNibble>
  
  while(LCD_ReadStatus() & 0x80);
 8002bac:	bf00      	nop
 8002bae:	f7ff ff6d 	bl	8002a8c <LCD_ReadStatus>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	b25b      	sxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	dbf9      	blt.n	8002bae <LCD_WriteCommand+0x32>
}
 8002bba:	bf00      	nop
 8002bbc:	bf00      	nop
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40020800 	.word	0x40020800

08002bc8 <LCD_WriteText>:


//-----------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  while(*text)
 8002bd0:	e006      	b.n	8002be0 <LCD_WriteText+0x18>
    LCD_WriteData(*text++);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ffa2 	bl	8002b24 <LCD_WriteData>
  while(*text)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1f4      	bne.n	8002bd2 <LCD_WriteText+0xa>
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <LCD_GoTo>:


//-----------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	460a      	mov	r2, r1
 8002bfc:	71fb      	strb	r3, [r7, #7]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	71bb      	strb	r3, [r7, #6]
  LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 8002c02:	79bb      	ldrb	r3, [r7, #6]
 8002c04:	019b      	lsls	r3, r3, #6
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	b25b      	sxtb	r3, r3
 8002c10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c14:	b25b      	sxtb	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ffaf 	bl	8002b7c <LCD_WriteCommand>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <LCD_WriteTextXY>:


//-----------------------------------------------------------------------------
void LCD_WriteTextXY(char * text, unsigned char x, unsigned char y)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	460b      	mov	r3, r1
 8002c30:	70fb      	strb	r3, [r7, #3]
 8002c32:	4613      	mov	r3, r2
 8002c34:	70bb      	strb	r3, [r7, #2]
  LCD_GoTo(x,y);
 8002c36:	78ba      	ldrb	r2, [r7, #2]
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ffd8 	bl	8002bf2 <LCD_GoTo>
  while(*text)
 8002c42:	e006      	b.n	8002c52 <LCD_WriteTextXY+0x2c>
    LCD_WriteData(*text++);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	607a      	str	r2, [r7, #4]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff ff69 	bl	8002b24 <LCD_WriteData>
  while(*text)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f4      	bne.n	8002c44 <LCD_WriteTextXY+0x1e>
}
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <LCD_Initialize>:
}


//-----------------------------------------------------------------------------
void LCD_Initialize(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0
  volatile unsigned char i = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	77fb      	strb	r3, [r7, #31]
  volatile unsigned int delayCnt = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61bb      	str	r3, [r7, #24]
  
  if (LCD_GPIO == GPIOA) __HAL_RCC_GPIOA_CLK_ENABLE(); else
  if (LCD_GPIO == GPIOB) __HAL_RCC_GPIOB_CLK_ENABLE(); else
  if (LCD_GPIO == GPIOC) __HAL_RCC_GPIOC_CLK_ENABLE(); else
 8002c72:	4b34      	ldr	r3, [pc, #208]	; (8002d44 <LCD_Initialize+0xe0>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	4a33      	ldr	r2, [pc, #204]	; (8002d44 <LCD_Initialize+0xe0>)
 8002c78:	f043 0304 	orr.w	r3, r3, #4
 8002c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7e:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <LCD_Initialize+0xe0>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]
  if (LCD_GPIO == GPIOD) __HAL_RCC_GPIOD_CLK_ENABLE(); else
  if (LCD_GPIO == GPIOE) __HAL_RCC_GPIOE_CLK_ENABLE();


  GPIO_InitStruct.Pin = LCD_D4|LCD_D5|LCD_D6|LCD_D7|LCD_RS|LCD_RW|LCD_EN;
 8002c8a:	4b2f      	ldr	r3, [pc, #188]	; (8002d48 <LCD_Initialize+0xe4>)
 8002c8c:	f641 424d 	movw	r2, #7245	; 0x1c4d
 8002c90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c92:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <LCD_Initialize+0xe4>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c98:	4b2b      	ldr	r3, [pc, #172]	; (8002d48 <LCD_Initialize+0xe4>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002c9e:	4b2a      	ldr	r3, [pc, #168]	; (8002d48 <LCD_Initialize+0xe4>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_GPIO, &GPIO_InitStruct);
 8002ca4:	4928      	ldr	r1, [pc, #160]	; (8002d48 <LCD_Initialize+0xe4>)
 8002ca6:	4829      	ldr	r0, [pc, #164]	; (8002d4c <LCD_Initialize+0xe8>)
 8002ca8:	f002 feec 	bl	8005a84 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RS | LCD_EN | LCD_RW, GPIO_PIN_RESET);
 8002cac:	2200      	movs	r2, #0
 8002cae:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002cb2:	4826      	ldr	r0, [pc, #152]	; (8002d4c <LCD_Initialize+0xe8>)
 8002cb4:	f003 f8aa 	bl	8005e0c <HAL_GPIO_WritePin>
  

  for(delayCnt = 0; delayCnt < 300000; delayCnt++);
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61bb      	str	r3, [r7, #24]
 8002cbc:	e002      	b.n	8002cc4 <LCD_Initialize+0x60>
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	61bb      	str	r3, [r7, #24]
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	4a22      	ldr	r2, [pc, #136]	; (8002d50 <LCD_Initialize+0xec>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d9f8      	bls.n	8002cbe <LCD_Initialize+0x5a>

  for(i = 0; i < 3; i++) {
 8002ccc:	2300      	movs	r3, #0
 8002cce:	77fb      	strb	r3, [r7, #31]
 8002cd0:	e012      	b.n	8002cf8 <LCD_Initialize+0x94>
    LCD_WriteNibble(0x03);            
 8002cd2:	2003      	movs	r0, #3
 8002cd4:	f7ff fe56 	bl	8002984 <LCD_WriteNibble>
    for(delayCnt = 0; delayCnt < 30000; delayCnt++);
 8002cd8:	2300      	movs	r3, #0
 8002cda:	61bb      	str	r3, [r7, #24]
 8002cdc:	e002      	b.n	8002ce4 <LCD_Initialize+0x80>
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	61bb      	str	r3, [r7, #24]
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	f247 522f 	movw	r2, #29999	; 0x752f
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d9f7      	bls.n	8002cde <LCD_Initialize+0x7a>
  for(i = 0; i < 3; i++) {
 8002cee:	7ffb      	ldrb	r3, [r7, #31]
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	77fb      	strb	r3, [r7, #31]
 8002cf8:	7ffb      	ldrb	r3, [r7, #31]
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d9e8      	bls.n	8002cd2 <LCD_Initialize+0x6e>
  }
  
  LCD_WriteNibble(0x02);             
 8002d00:	2002      	movs	r0, #2
 8002d02:	f7ff fe3f 	bl	8002984 <LCD_WriteNibble>
  
  for(delayCnt = 0; delayCnt < 6000; delayCnt++);
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	e002      	b.n	8002d12 <LCD_Initialize+0xae>
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	61bb      	str	r3, [r7, #24]
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	f241 726f 	movw	r2, #5999	; 0x176f
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d9f7      	bls.n	8002d0c <LCD_Initialize+0xa8>
     
  LCD_WriteCommand(HD44780_FUNCTION_SET | 
 8002d1c:	2028      	movs	r0, #40	; 0x28
 8002d1e:	f7ff ff2d 	bl	8002b7c <LCD_WriteCommand>
                   HD44780_FONT5x7 | 
                   HD44780_TWO_LINE | 
                   HD44780_4_BIT);
  
  LCD_WriteCommand(HD44780_DISPLAY_ONOFF | 
 8002d22:	2008      	movs	r0, #8
 8002d24:	f7ff ff2a 	bl	8002b7c <LCD_WriteCommand>
                   HD44780_DISPLAY_OFF); 
  
  LCD_WriteCommand(HD44780_CLEAR); 
 8002d28:	2001      	movs	r0, #1
 8002d2a:	f7ff ff27 	bl	8002b7c <LCD_WriteCommand>
  
  LCD_WriteCommand(HD44780_ENTRY_MODE | 
 8002d2e:	2006      	movs	r0, #6
 8002d30:	f7ff ff24 	bl	8002b7c <LCD_WriteCommand>
                   HD44780_EM_SHIFT_CURSOR | 
                   HD44780_EM_INCREMENT);
  
  LCD_WriteCommand(HD44780_DISPLAY_ONOFF | 
 8002d34:	200c      	movs	r0, #12
 8002d36:	f7ff ff21 	bl	8002b7c <LCD_WriteCommand>
                   HD44780_DISPLAY_ON |
                   HD44780_CURSOR_OFF | 
                   HD44780_CURSOR_NOBLINK);
}
 8002d3a:	bf00      	nop
 8002d3c:	3720      	adds	r7, #32
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800
 8002d48:	20000264 	.word	0x20000264
 8002d4c:	40020800 	.word	0x40020800
 8002d50:	000493df 	.word	0x000493df

08002d54 <move_menu>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void move_menu(char *a[])
  {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
	symbol[0] = keypad_readkey();
 8002d5c:	f7ff fdc8 	bl	80028f0 <keypad_readkey>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461a      	mov	r2, r3
 8002d64:	4b29      	ldr	r3, [pc, #164]	; (8002e0c <move_menu+0xb8>)
 8002d66:	701a      	strb	r2, [r3, #0]
	  if (symbol[0] == 'B' && (position<max_pos)) {
 8002d68:	4b28      	ldr	r3, [pc, #160]	; (8002e0c <move_menu+0xb8>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b42      	cmp	r3, #66	; 0x42
 8002d6e:	d10e      	bne.n	8002d8e <move_menu+0x3a>
 8002d70:	4b27      	ldr	r3, [pc, #156]	; (8002e10 <move_menu+0xbc>)
 8002d72:	781a      	ldrb	r2, [r3, #0]
 8002d74:	4b27      	ldr	r3, [pc, #156]	; (8002e14 <move_menu+0xc0>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d208      	bcs.n	8002d8e <move_menu+0x3a>
	  	   	  position++;
 8002d7c:	4b24      	ldr	r3, [pc, #144]	; (8002e10 <move_menu+0xbc>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	3301      	adds	r3, #1
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	4b22      	ldr	r3, [pc, #136]	; (8002e10 <move_menu+0xbc>)
 8002d86:	701a      	strb	r2, [r3, #0]
	  	   	  refreshLCD=true;
 8002d88:	4b23      	ldr	r3, [pc, #140]	; (8002e18 <move_menu+0xc4>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	701a      	strb	r2, [r3, #0]
	  	   	}

	  	   	if (symbol[0] == 'A' && (position>1)) {
 8002d8e:	4b1f      	ldr	r3, [pc, #124]	; (8002e0c <move_menu+0xb8>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b41      	cmp	r3, #65	; 0x41
 8002d94:	d10c      	bne.n	8002db0 <move_menu+0x5c>
 8002d96:	4b1e      	ldr	r3, [pc, #120]	; (8002e10 <move_menu+0xbc>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d908      	bls.n	8002db0 <move_menu+0x5c>
	  	   	  position--;
 8002d9e:	4b1c      	ldr	r3, [pc, #112]	; (8002e10 <move_menu+0xbc>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <move_menu+0xbc>)
 8002da8:	701a      	strb	r2, [r3, #0]
	  	   	  refreshLCD=true;
 8002daa:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <move_menu+0xc4>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
	  	   	}
	  	  if (refreshLCD){                           //Odswiezanie LCD tylko przy zmiane zawartosci - usuwa problem "migotania" LCD
 8002db0:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <move_menu+0xc4>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d024      	beq.n	8002e02 <move_menu+0xae>
	   	  LCD_WriteCommand(HD44780_CLEAR);
 8002db8:	2001      	movs	r0, #1
 8002dba:	f7ff fedf 	bl	8002b7c <LCD_WriteCommand>
	   	  LCD_WriteText("->");
 8002dbe:	4817      	ldr	r0, [pc, #92]	; (8002e1c <move_menu+0xc8>)
 8002dc0:	f7ff ff02 	bl	8002bc8 <LCD_WriteText>
	   	  LCD_WriteText(a[position-1]);
 8002dc4:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <move_menu+0xbc>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fef5 	bl	8002bc8 <LCD_WriteText>
	   	  if (position<4){
 8002dde:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <move_menu+0xbc>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d80a      	bhi.n	8002dfc <move_menu+0xa8>
	   		LCD_WriteTextXY(a[position-1+1],2,1);
 8002de6:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <move_menu+0xbc>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	4413      	add	r3, r2
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2201      	movs	r2, #1
 8002df4:	2102      	movs	r1, #2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff ff15 	bl	8002c26 <LCD_WriteTextXY>
	   	  }
	   	  refreshLCD=false;
 8002dfc:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <move_menu+0xc4>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
	   	}
  }
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000278 	.word	0x20000278
 8002e10:	20000054 	.word	0x20000054
 8002e14:	20000055 	.word	0x20000055
 8002e18:	200002dd 	.word	0x200002dd
 8002e1c:	0800c0d4 	.word	0x0800c0d4

08002e20 <roundToTwoDecimals>:

double roundToTwoDecimals(double value) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	ed87 0b00 	vstr	d0, [r7]
	return floor(value * 100.0 + 0.5) / 100.0;
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <roundToTwoDecimals+0x64>)
 8002e30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e34:	f7fd fc10 	bl	8000658 <__aeabi_dmul>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	4619      	mov	r1, r3
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <roundToTwoDecimals+0x68>)
 8002e46:	f7fd fa51 	bl	80002ec <__adddf3>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	ec43 2b17 	vmov	d7, r2, r3
 8002e52:	eeb0 0a47 	vmov.f32	s0, s14
 8002e56:	eef0 0a67 	vmov.f32	s1, s15
 8002e5a:	f008 ffe9 	bl	800be30 <floor>
 8002e5e:	ec51 0b10 	vmov	r0, r1, d0
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <roundToTwoDecimals+0x64>)
 8002e68:	f7fd fd20 	bl	80008ac <__aeabi_ddiv>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	ec43 2b17 	vmov	d7, r2, r3
}
 8002e74:	eeb0 0a47 	vmov.f32	s0, s14
 8002e78:	eef0 0a67 	vmov.f32	s1, s15
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40590000 	.word	0x40590000
 8002e88:	3fe00000 	.word	0x3fe00000

08002e8c <PowerSupply_SetState>:
//ENERGY SYSTEM

// Wył/Wł PowerSupply
void PowerSupply_SetState(GPIO_PinState state) {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(PowerSupply_GPIO_Port, PowerSupply_Pin, state);
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	2108      	movs	r1, #8
 8002e9c:	4803      	ldr	r0, [pc, #12]	; (8002eac <PowerSupply_SetState+0x20>)
 8002e9e:	f002 ffb5 	bl	8005e0c <HAL_GPIO_WritePin>
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40020000 	.word	0x40020000

08002eb0 <PowerSupply_Off>:

bool PowerSupply_Off(void) {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
    PowerSupply_SetState(GPIO_PIN_SET);
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	f7ff ffe9 	bl	8002e8c <PowerSupply_SetState>
    return PowerSupply = false;
 8002eba:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <PowerSupply_Off+0x18>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	701a      	strb	r2, [r3, #0]
 8002ec0:	4b01      	ldr	r3, [pc, #4]	; (8002ec8 <PowerSupply_Off+0x18>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20000338 	.word	0x20000338

08002ecc <PowerSupply_On>:

bool PowerSupply_On(void) {
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
    PowerSupply_SetState(GPIO_PIN_RESET);
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f7ff ffdb 	bl	8002e8c <PowerSupply_SetState>
    return PowerSupply = true;
 8002ed6:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <PowerSupply_On+0x18>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	701a      	strb	r2, [r3, #0]
 8002edc:	4b01      	ldr	r3, [pc, #4]	; (8002ee4 <PowerSupply_On+0x18>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20000338 	.word	0x20000338

08002ee8 <Battery_SetState>:

// Wył/Wł baterie
void Battery_SetState(GPIO_PinState state) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(Battery_GPIO_Port, Battery_Pin, state);
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2108      	movs	r1, #8
 8002ef8:	4803      	ldr	r0, [pc, #12]	; (8002f08 <Battery_SetState+0x20>)
 8002efa:	f002 ff87 	bl	8005e0c <HAL_GPIO_WritePin>
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40021400 	.word	0x40021400

08002f0c <Battery_Off>:

bool Battery_Off(void) {
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
    Battery_SetState(GPIO_PIN_SET);
 8002f10:	2001      	movs	r0, #1
 8002f12:	f7ff ffe9 	bl	8002ee8 <Battery_SetState>
    return Battery = false;
 8002f16:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <Battery_Off+0x18>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]
 8002f1c:	4b01      	ldr	r3, [pc, #4]	; (8002f24 <Battery_Off+0x18>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20000339 	.word	0x20000339

08002f28 <Battery_On>:

bool Battery_On(void) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
    Battery_SetState(GPIO_PIN_RESET);
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f7ff ffdb 	bl	8002ee8 <Battery_SetState>
    return Battery = true;
 8002f32:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <Battery_On+0x18>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	701a      	strb	r2, [r3, #0]
 8002f38:	4b01      	ldr	r3, [pc, #4]	; (8002f40 <Battery_On+0x18>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	20000339 	.word	0x20000339

08002f44 <Output_SetState>:

// Wył/Wł wyjście
void Output_SetState(GPIO_PinState state) {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(Output_GPIO_Port, Output_Pin, state);
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	461a      	mov	r2, r3
 8002f52:	2120      	movs	r1, #32
 8002f54:	4803      	ldr	r0, [pc, #12]	; (8002f64 <Output_SetState+0x20>)
 8002f56:	f002 ff59 	bl	8005e0c <HAL_GPIO_WritePin>
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40021400 	.word	0x40021400

08002f68 <Output_On>:
bool Output_Off(void) {
    Output_SetState(GPIO_PIN_SET);
    return Output = false;
}

bool Output_On(void) {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
    Output_SetState(GPIO_PIN_RESET);
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	f7ff ffe9 	bl	8002f44 <Output_SetState>
    return Output = true;
 8002f72:	4b03      	ldr	r3, [pc, #12]	; (8002f80 <Output_On+0x18>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	701a      	strb	r2, [r3, #0]
 8002f78:	4b01      	ldr	r3, [pc, #4]	; (8002f80 <Output_On+0x18>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	2000033a 	.word	0x2000033a

08002f84 <sendBluetoothData>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void sendBluetoothData(const char* data){
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	snprintf(buffer, sizeof(buffer), "%s\n", data);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a0c      	ldr	r2, [pc, #48]	; (8002fc0 <sendBluetoothData+0x3c>)
 8002f90:	210a      	movs	r1, #10
 8002f92:	480c      	ldr	r0, [pc, #48]	; (8002fc4 <sendBluetoothData+0x40>)
 8002f94:	f008 fa92 	bl	800b4bc <sniprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002f98:	480a      	ldr	r0, [pc, #40]	; (8002fc4 <sendBluetoothData+0x40>)
 8002f9a:	f7fd f943 	bl	8000224 <strlen>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa6:	4907      	ldr	r1, [pc, #28]	; (8002fc4 <sendBluetoothData+0x40>)
 8002fa8:	4807      	ldr	r0, [pc, #28]	; (8002fc8 <sendBluetoothData+0x44>)
 8002faa:	f007 faf3 	bl	800a594 <HAL_UART_Transmit>
	HAL_Delay(500);
 8002fae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fb2:	f002 fc0f 	bl	80057d4 <HAL_Delay>
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	0800c0d8 	.word	0x0800c0d8
 8002fc4:	200002b8 	.word	0x200002b8
 8002fc8:	200004f0 	.word	0x200004f0

08002fcc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6) {
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a0e      	ldr	r2, [pc, #56]	; (8003014 <HAL_UART_RxCpltCallback+0x48>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d116      	bne.n	800300c <HAL_UART_RxCpltCallback+0x40>
        rxIndex++;
 8002fde:	4b0e      	ldr	r3, [pc, #56]	; (8003018 <HAL_UART_RxCpltCallback+0x4c>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <HAL_UART_RxCpltCallback+0x4c>)
 8002fe8:	701a      	strb	r2, [r3, #0]

        if (rxIndex >= RX_BUFFER_SIZE+2) {
 8002fea:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <HAL_UART_RxCpltCallback+0x4c>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b05      	cmp	r3, #5
 8002ff0:	d902      	bls.n	8002ff8 <HAL_UART_RxCpltCallback+0x2c>
            rxIndex = 0;
 8002ff2:	4b09      	ldr	r3, [pc, #36]	; (8003018 <HAL_UART_RxCpltCallback+0x4c>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(huart, &rxBuffer[rxIndex], 1);
 8002ff8:	4b07      	ldr	r3, [pc, #28]	; (8003018 <HAL_UART_RxCpltCallback+0x4c>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4b07      	ldr	r3, [pc, #28]	; (800301c <HAL_UART_RxCpltCallback+0x50>)
 8003000:	4413      	add	r3, r2
 8003002:	2201      	movs	r2, #1
 8003004:	4619      	mov	r1, r3
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f007 fb47 	bl	800a69a <HAL_UART_Receive_IT>
    }
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40011400 	.word	0x40011400
 8003018:	200002ce 	.word	0x200002ce
 800301c:	200002c4 	.word	0x200002c4

08003020 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if(htim == &htim2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a1a      	ldr	r2, [pc, #104]	; (8003094 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d12d      	bne.n	800308c <HAL_TIM_PeriodElapsedCallback+0x6c>
  {
	  if((PIR_Garage == true || PIR_Kitchen == true || PIR_Livingroom == true) && alarm == true)
 8003030:	4b19      	ldr	r3, [pc, #100]	; (8003098 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d107      	bne.n	8003048 <HAL_TIM_PeriodElapsedCallback+0x28>
 8003038:	4b18      	ldr	r3, [pc, #96]	; (800309c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d103      	bne.n	8003048 <HAL_TIM_PeriodElapsedCallback+0x28>
 8003040:	4b17      	ldr	r3, [pc, #92]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d009      	beq.n	800305c <HAL_TIM_PeriodElapsedCallback+0x3c>
 8003048:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_TIM_PeriodElapsedCallback+0x3c>
	  {
		  PIR_detected = true, alarmLED = true;
 8003050:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003052:	2201      	movs	r2, #1
 8003054:	701a      	strb	r2, [r3, #0]
 8003056:	4b15      	ldr	r3, [pc, #84]	; (80030ac <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003058:	2201      	movs	r2, #1
 800305a:	701a      	strb	r2, [r3, #0]
	  }

	  if(alarmLED == true && PIR_detected == true)
 800305c:	4b13      	ldr	r3, [pc, #76]	; (80030ac <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00d      	beq.n	8003080 <HAL_TIM_PeriodElapsedCallback+0x60>
 8003064:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d009      	beq.n	8003080 <HAL_TIM_PeriodElapsedCallback+0x60>
	  {
		  HAL_GPIO_TogglePin(Alarm_LED_GPIO_Port, Alarm_LED_Pin);
 800306c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003070:	480f      	ldr	r0, [pc, #60]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003072:	f002 fee4 	bl	8005e3e <HAL_GPIO_TogglePin>
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8003076:	2108      	movs	r1, #8
 8003078:	4806      	ldr	r0, [pc, #24]	; (8003094 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800307a:	f006 f8b5 	bl	80091e8 <HAL_TIM_PWM_Start>
	  else
	  {
		  HAL_GPIO_WritePin(Alarm_LED_GPIO_Port, Alarm_LED_Pin, GPIO_PIN_RESET);
	  };
  }
}
 800307e:	e005      	b.n	800308c <HAL_TIM_PeriodElapsedCallback+0x6c>
		  HAL_GPIO_WritePin(Alarm_LED_GPIO_Port, Alarm_LED_Pin, GPIO_PIN_RESET);
 8003080:	2200      	movs	r2, #0
 8003082:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003086:	480a      	ldr	r0, [pc, #40]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003088:	f002 fec0 	bl	8005e0c <HAL_GPIO_WritePin>
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	2000040c 	.word	0x2000040c
 8003098:	200002e0 	.word	0x200002e0
 800309c:	200002e2 	.word	0x200002e2
 80030a0:	200002e1 	.word	0x200002e1
 80030a4:	200002de 	.word	0x200002de
 80030a8:	200002e3 	.word	0x200002e3
 80030ac:	200002df 	.word	0x200002df
 80030b0:	40021000 	.word	0x40021000
 80030b4:	00000000 	.word	0x00000000

080030b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030b8:	b5b0      	push	{r4, r5, r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030be:	f002 fb2c 	bl	800571a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030c2:	f001 fceb 	bl	8004a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030c6:	f7ff f999 	bl	80023fc <MX_GPIO_Init>
  MX_TIM2_Init();
 80030ca:	f001 ff7f 	bl	8004fcc <MX_TIM2_Init>
  MX_TIM3_Init();
 80030ce:	f002 f80f 	bl	80050f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80030d2:	f002 f885 	bl	80051e0 <MX_TIM4_Init>
  MX_SPI4_Init();
 80030d6:	f001 fd4f 	bl	8004b78 <MX_SPI4_Init>
  MX_I2C1_Init();
 80030da:	f7ff faaf 	bl	800263c <MX_I2C1_Init>
  MX_USART6_UART_Init();
 80030de:	f002 fa63 	bl	80055a8 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80030e2:	f001 fea3 	bl	8004e2c <MX_TIM1_Init>
  MX_I2C2_Init();
 80030e6:	f7ff fae9 	bl	80026bc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  //LOAD CONFIG
  keypad_config();
 80030ea:	f7ff fbcd 	bl	8002888 <keypad_config>
  LCD_Initialize();
 80030ee:	f7ff fdb9 	bl	8002c64 <LCD_Initialize>
 //TIMERS AND INTERRUPTS
  HAL_TIM_Base_Start_IT(&htim2);
 80030f2:	48a5      	ldr	r0, [pc, #660]	; (8003388 <main+0x2d0>)
 80030f4:	f005 ff70 	bl	8008fd8 <HAL_TIM_Base_Start_IT>
  BMP2_Init(&bmp2dev);
 80030f8:	48a4      	ldr	r0, [pc, #656]	; (800338c <main+0x2d4>)
 80030fa:	f7ff f84f 	bl	800219c <BMP2_Init>
  //ENERGY SYSTEM
  INA219_Init(&ina219, &hi2c1, INA219_ADDRESS);
 80030fe:	2240      	movs	r2, #64	; 0x40
 8003100:	49a3      	ldr	r1, [pc, #652]	; (8003390 <main+0x2d8>)
 8003102:	48a4      	ldr	r0, [pc, #656]	; (8003394 <main+0x2dc>)
 8003104:	f7fe f858 	bl	80011b8 <INA219_Init>
  INA219_Init(&ina219_2, &hi2c2, INA219_ADDRESS);
 8003108:	2240      	movs	r2, #64	; 0x40
 800310a:	49a3      	ldr	r1, [pc, #652]	; (8003398 <main+0x2e0>)
 800310c:	48a3      	ldr	r0, [pc, #652]	; (800339c <main+0x2e4>)
 800310e:	f7fe f853 	bl	80011b8 <INA219_Init>
  Output_On();
 8003112:	f7ff ff29 	bl	8002f68 <Output_On>
  //START SCREEN
  LCD_WriteCommand(HD44780_CLEAR);
 8003116:	2001      	movs	r0, #1
 8003118:	f7ff fd30 	bl	8002b7c <LCD_WriteCommand>
  LCD_WriteText("Welcome to");
 800311c:	48a0      	ldr	r0, [pc, #640]	; (80033a0 <main+0x2e8>)
 800311e:	f7ff fd53 	bl	8002bc8 <LCD_WriteText>
  LCD_WriteTextXY("Smarthome system",0,1);
 8003122:	2201      	movs	r2, #1
 8003124:	2100      	movs	r1, #0
 8003126:	489f      	ldr	r0, [pc, #636]	; (80033a4 <main+0x2ec>)
 8003128:	f7ff fd7d 	bl	8002c26 <LCD_WriteTextXY>
  HAL_Delay(3000);
 800312c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003130:	f002 fb50 	bl	80057d4 <HAL_Delay>
  refreshLCD = true;
 8003134:	4b9c      	ldr	r3, [pc, #624]	; (80033a8 <main+0x2f0>)
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &rxBuffer[rxIndex], 1);  // Rozpocznij odbiór
 800313a:	4b9c      	ldr	r3, [pc, #624]	; (80033ac <main+0x2f4>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	4b9b      	ldr	r3, [pc, #620]	; (80033b0 <main+0x2f8>)
 8003142:	4413      	add	r3, r2
 8003144:	2201      	movs	r2, #1
 8003146:	4619      	mov	r1, r3
 8003148:	489a      	ldr	r0, [pc, #616]	; (80033b4 <main+0x2fc>)
 800314a:	f007 faa6 	bl	800a69a <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(PIR_Garage_GPIO_Port, PIR_Garage_Pin) == GPIO_PIN_SET){PIR_Garage = true;}
 800314e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003152:	4899      	ldr	r0, [pc, #612]	; (80033b8 <main+0x300>)
 8003154:	f002 fe42 	bl	8005ddc <HAL_GPIO_ReadPin>
 8003158:	4603      	mov	r3, r0
 800315a:	2b01      	cmp	r3, #1
 800315c:	d103      	bne.n	8003166 <main+0xae>
 800315e:	4b97      	ldr	r3, [pc, #604]	; (80033bc <main+0x304>)
 8003160:	2201      	movs	r2, #1
 8003162:	701a      	strb	r2, [r3, #0]
 8003164:	e002      	b.n	800316c <main+0xb4>
	  	  else {PIR_Garage = false;};
 8003166:	4b95      	ldr	r3, [pc, #596]	; (80033bc <main+0x304>)
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(PIR_Kitchen_GPIO_Port, PIR_Kitchen_Pin) == GPIO_PIN_SET){PIR_Kitchen = true;}
 800316c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003170:	4891      	ldr	r0, [pc, #580]	; (80033b8 <main+0x300>)
 8003172:	f002 fe33 	bl	8005ddc <HAL_GPIO_ReadPin>
 8003176:	4603      	mov	r3, r0
 8003178:	2b01      	cmp	r3, #1
 800317a:	d103      	bne.n	8003184 <main+0xcc>
 800317c:	4b90      	ldr	r3, [pc, #576]	; (80033c0 <main+0x308>)
 800317e:	2201      	movs	r2, #1
 8003180:	701a      	strb	r2, [r3, #0]
 8003182:	e002      	b.n	800318a <main+0xd2>
	  	  else {PIR_Kitchen = false;};
 8003184:	4b8e      	ldr	r3, [pc, #568]	; (80033c0 <main+0x308>)
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(PIR_Livingroom_GPIO_Port, PIR_Livingroom_Pin) == GPIO_PIN_SET){PIR_Livingroom = true;}
 800318a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800318e:	488a      	ldr	r0, [pc, #552]	; (80033b8 <main+0x300>)
 8003190:	f002 fe24 	bl	8005ddc <HAL_GPIO_ReadPin>
 8003194:	4603      	mov	r3, r0
 8003196:	2b01      	cmp	r3, #1
 8003198:	d103      	bne.n	80031a2 <main+0xea>
 800319a:	4b8a      	ldr	r3, [pc, #552]	; (80033c4 <main+0x30c>)
 800319c:	2201      	movs	r2, #1
 800319e:	701a      	strb	r2, [r3, #0]
 80031a0:	e002      	b.n	80031a8 <main+0xf0>
	  	  else{PIR_Livingroom = false;};
 80031a2:	4b88      	ldr	r3, [pc, #544]	; (80033c4 <main+0x30c>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
	  move_menu(act_menu);
 80031a8:	4b87      	ldr	r3, [pc, #540]	; (80033c8 <main+0x310>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fdd1 	bl	8002d54 <move_menu>
 	if (symbol[0] == '*' && act_menu == mainmenu){
 80031b2:	4b86      	ldr	r3, [pc, #536]	; (80033cc <main+0x314>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b2a      	cmp	r3, #42	; 0x2a
 80031b8:	f040 80af 	bne.w	800331a <main+0x262>
 80031bc:	4b82      	ldr	r3, [pc, #520]	; (80033c8 <main+0x310>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a83      	ldr	r2, [pc, #524]	; (80033d0 <main+0x318>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	f040 80a9 	bne.w	800331a <main+0x262>
 		refreshLCD = true;
 80031c8:	4b77      	ldr	r3, [pc, #476]	; (80033a8 <main+0x2f0>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	701a      	strb	r2, [r3, #0]
 		switch (position){
 80031ce:	4b81      	ldr	r3, [pc, #516]	; (80033d4 <main+0x31c>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	f200 8094 	bhi.w	8003302 <main+0x24a>
 80031da:	a201      	add	r2, pc, #4	; (adr r2, 80031e0 <main+0x128>)
 80031dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e0:	080031f1 	.word	0x080031f1
 80031e4:	08003205 	.word	0x08003205
 80031e8:	08003219 	.word	0x08003219
 80031ec:	0800322d 	.word	0x0800322d
			case 1: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 80031f0:	4b75      	ldr	r3, [pc, #468]	; (80033c8 <main+0x310>)
 80031f2:	4a79      	ldr	r2, [pc, #484]	; (80033d8 <main+0x320>)
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	4b77      	ldr	r3, [pc, #476]	; (80033d4 <main+0x31c>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	4b77      	ldr	r3, [pc, #476]	; (80033dc <main+0x324>)
 80031fe:	2202      	movs	r2, #2
 8003200:	701a      	strb	r2, [r3, #0]
 8003202:	e088      	b.n	8003316 <main+0x25e>
			case 2: act_menu = menuLivingroom, position = 1, max_pos = 3; break;
 8003204:	4b70      	ldr	r3, [pc, #448]	; (80033c8 <main+0x310>)
 8003206:	4a76      	ldr	r2, [pc, #472]	; (80033e0 <main+0x328>)
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	4b72      	ldr	r3, [pc, #456]	; (80033d4 <main+0x31c>)
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
 8003210:	4b72      	ldr	r3, [pc, #456]	; (80033dc <main+0x324>)
 8003212:	2203      	movs	r2, #3
 8003214:	701a      	strb	r2, [r3, #0]
 8003216:	e07e      	b.n	8003316 <main+0x25e>
			case 3: act_menu = menuGarage, position = 1, max_pos = 3; break;
 8003218:	4b6b      	ldr	r3, [pc, #428]	; (80033c8 <main+0x310>)
 800321a:	4a72      	ldr	r2, [pc, #456]	; (80033e4 <main+0x32c>)
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	4b6d      	ldr	r3, [pc, #436]	; (80033d4 <main+0x31c>)
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
 8003224:	4b6d      	ldr	r3, [pc, #436]	; (80033dc <main+0x324>)
 8003226:	2203      	movs	r2, #3
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	e074      	b.n	8003316 <main+0x25e>
			case 4:
					i = 0;
 800322c:	4b6e      	ldr	r3, [pc, #440]	; (80033e8 <main+0x330>)
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
					HAL_Delay(200);
 8003232:	20c8      	movs	r0, #200	; 0xc8
 8003234:	f002 face 	bl	80057d4 <HAL_Delay>
					memset(buff, 0, sizeof(buff));
 8003238:	2205      	movs	r2, #5
 800323a:	2100      	movs	r1, #0
 800323c:	486b      	ldr	r0, [pc, #428]	; (80033ec <main+0x334>)
 800323e:	f008 f971 	bl	800b524 <memset>
					LCD_WriteCommand(HD44780_CLEAR);
 8003242:	2001      	movs	r0, #1
 8003244:	f7ff fc9a 	bl	8002b7c <LCD_WriteCommand>
					LCD_WriteText("Write PIN");
 8003248:	4869      	ldr	r0, [pc, #420]	; (80033f0 <main+0x338>)
 800324a:	f7ff fcbd 	bl	8002bc8 <LCD_WriteText>
					while(1) {
						refreshLCD = true;
 800324e:	4b56      	ldr	r3, [pc, #344]	; (80033a8 <main+0x2f0>)
 8003250:	2201      	movs	r2, #1
 8003252:	701a      	strb	r2, [r3, #0]
						symbol[0] = keypad_readkey();
 8003254:	f7ff fb4c 	bl	80028f0 <keypad_readkey>
 8003258:	4603      	mov	r3, r0
 800325a:	461a      	mov	r2, r3
 800325c:	4b5b      	ldr	r3, [pc, #364]	; (80033cc <main+0x314>)
 800325e:	701a      	strb	r2, [r3, #0]
						if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 8003260:	4b5a      	ldr	r3, [pc, #360]	; (80033cc <main+0x314>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b2f      	cmp	r3, #47	; 0x2f
 8003266:	d922      	bls.n	80032ae <main+0x1f6>
 8003268:	4b58      	ldr	r3, [pc, #352]	; (80033cc <main+0x314>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b39      	cmp	r3, #57	; 0x39
 800326e:	d81e      	bhi.n	80032ae <main+0x1f6>
 8003270:	4b5d      	ldr	r3, [pc, #372]	; (80033e8 <main+0x330>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b03      	cmp	r3, #3
 8003276:	d81a      	bhi.n	80032ae <main+0x1f6>
							buff[i] = symbol[0];
 8003278:	4b5b      	ldr	r3, [pc, #364]	; (80033e8 <main+0x330>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a53      	ldr	r2, [pc, #332]	; (80033cc <main+0x314>)
 800327e:	7811      	ldrb	r1, [r2, #0]
 8003280:	4a5a      	ldr	r2, [pc, #360]	; (80033ec <main+0x334>)
 8003282:	54d1      	strb	r1, [r2, r3]
							i++;
 8003284:	4b58      	ldr	r3, [pc, #352]	; (80033e8 <main+0x330>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	3301      	adds	r3, #1
 800328a:	4a57      	ldr	r2, [pc, #348]	; (80033e8 <main+0x330>)
 800328c:	6013      	str	r3, [r2, #0]
							buff[i] = '\0';
 800328e:	4b56      	ldr	r3, [pc, #344]	; (80033e8 <main+0x330>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a56      	ldr	r2, [pc, #344]	; (80033ec <main+0x334>)
 8003294:	2100      	movs	r1, #0
 8003296:	54d1      	strb	r1, [r2, r3]
							LCD_WriteCommand(HD44780_CLEAR);
 8003298:	2001      	movs	r0, #1
 800329a:	f7ff fc6f 	bl	8002b7c <LCD_WriteCommand>
							LCD_WriteText("PIN: ");
 800329e:	4855      	ldr	r0, [pc, #340]	; (80033f4 <main+0x33c>)
 80032a0:	f7ff fc92 	bl	8002bc8 <LCD_WriteText>
							LCD_WriteTextXY(buff, 0, 1);
 80032a4:	2201      	movs	r2, #1
 80032a6:	2100      	movs	r1, #0
 80032a8:	4850      	ldr	r0, [pc, #320]	; (80033ec <main+0x334>)
 80032aa:	f7ff fcbc 	bl	8002c26 <LCD_WriteTextXY>
						}
						HAL_Delay(300);
 80032ae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80032b2:	f002 fa8f 	bl	80057d4 <HAL_Delay>
						symbol[0] = keypad_readkey();
 80032b6:	f7ff fb1b 	bl	80028f0 <keypad_readkey>
 80032ba:	4603      	mov	r3, r0
 80032bc:	461a      	mov	r2, r3
 80032be:	4b43      	ldr	r3, [pc, #268]	; (80033cc <main+0x314>)
 80032c0:	701a      	strb	r2, [r3, #0]
						if(symbol[0] == '*') {
 80032c2:	4b42      	ldr	r3, [pc, #264]	; (80033cc <main+0x314>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b2a      	cmp	r3, #42	; 0x2a
 80032c8:	d115      	bne.n	80032f6 <main+0x23e>
							pinKey = atoi(buff);
 80032ca:	4848      	ldr	r0, [pc, #288]	; (80033ec <main+0x334>)
 80032cc:	f008 f866 	bl	800b39c <atoi>
 80032d0:	4603      	mov	r3, r0
 80032d2:	4a49      	ldr	r2, [pc, #292]	; (80033f8 <main+0x340>)
 80032d4:	6013      	str	r3, [r2, #0]
							if(pinKey == 1234) {
 80032d6:	4b48      	ldr	r3, [pc, #288]	; (80033f8 <main+0x340>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f240 42d2 	movw	r2, #1234	; 0x4d2
 80032de:	4293      	cmp	r3, r2
 80032e0:	d10d      	bne.n	80032fe <main+0x246>
								act_menu = menuAlarm, position = 1, max_pos = 2; break;
 80032e2:	4b39      	ldr	r3, [pc, #228]	; (80033c8 <main+0x310>)
 80032e4:	4a45      	ldr	r2, [pc, #276]	; (80033fc <main+0x344>)
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	4b3a      	ldr	r3, [pc, #232]	; (80033d4 <main+0x31c>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	4b3b      	ldr	r3, [pc, #236]	; (80033dc <main+0x324>)
 80032f0:	2202      	movs	r2, #2
 80032f2:	701a      	strb	r2, [r3, #0]
 80032f4:	e004      	b.n	8003300 <main+0x248>
							}
							break;
						}
						HAL_Delay(100);
 80032f6:	2064      	movs	r0, #100	; 0x64
 80032f8:	f002 fa6c 	bl	80057d4 <HAL_Delay>
						refreshLCD = true;
 80032fc:	e7a7      	b.n	800324e <main+0x196>
							break;
 80032fe:	bf00      	nop
					}
					break;
 8003300:	e009      	b.n	8003316 <main+0x25e>
			default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8003302:	4b31      	ldr	r3, [pc, #196]	; (80033c8 <main+0x310>)
 8003304:	4a34      	ldr	r2, [pc, #208]	; (80033d8 <main+0x320>)
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	4b32      	ldr	r3, [pc, #200]	; (80033d4 <main+0x31c>)
 800330a:	2201      	movs	r2, #1
 800330c:	701a      	strb	r2, [r3, #0]
 800330e:	4b33      	ldr	r3, [pc, #204]	; (80033dc <main+0x324>)
 8003310:	2202      	movs	r2, #2
 8003312:	701a      	strb	r2, [r3, #0]
 8003314:	bf00      	nop
 		switch (position){
 8003316:	f000 bec9 	b.w	80040ac <main+0xff4>
 		}
 	}
 	else if(symbol[0] == '*' && act_menu == menuAlarm){
 800331a:	4b2c      	ldr	r3, [pc, #176]	; (80033cc <main+0x314>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b2a      	cmp	r3, #42	; 0x2a
 8003320:	f040 80a9 	bne.w	8003476 <main+0x3be>
 8003324:	4b28      	ldr	r3, [pc, #160]	; (80033c8 <main+0x310>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a34      	ldr	r2, [pc, #208]	; (80033fc <main+0x344>)
 800332a:	4293      	cmp	r3, r2
 800332c:	f040 80a3 	bne.w	8003476 <main+0x3be>
 		refreshLCD = true;
 8003330:	4b1d      	ldr	r3, [pc, #116]	; (80033a8 <main+0x2f0>)
 8003332:	2201      	movs	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
 		switch (position){
 8003336:	4b27      	ldr	r3, [pc, #156]	; (80033d4 <main+0x31c>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d002      	beq.n	8003344 <main+0x28c>
 800333e:	2b02      	cmp	r3, #2
 8003340:	d068      	beq.n	8003414 <main+0x35c>
 8003342:	e08c      	b.n	800345e <main+0x3a6>
			case 1: alarm = true;
 8003344:	4b2e      	ldr	r3, [pc, #184]	; (8003400 <main+0x348>)
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]
				PIR_detected = false;
 800334a:	4b2e      	ldr	r3, [pc, #184]	; (8003404 <main+0x34c>)
 800334c:	2200      	movs	r2, #0
 800334e:	701a      	strb	r2, [r3, #0]
				alarmLED = false;
 8003350:	4b2d      	ldr	r3, [pc, #180]	; (8003408 <main+0x350>)
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
				LCD_WriteCommand(HD44780_CLEAR);
 8003356:	2001      	movs	r0, #1
 8003358:	f7ff fc10 	bl	8002b7c <LCD_WriteCommand>
				LCD_WriteText("Alarm");
 800335c:	482b      	ldr	r0, [pc, #172]	; (800340c <main+0x354>)
 800335e:	f7ff fc33 	bl	8002bc8 <LCD_WriteText>
				LCD_WriteTextXY("turned on",0,1);
 8003362:	2201      	movs	r2, #1
 8003364:	2100      	movs	r1, #0
 8003366:	482a      	ldr	r0, [pc, #168]	; (8003410 <main+0x358>)
 8003368:	f7ff fc5d 	bl	8002c26 <LCD_WriteTextXY>
				HAL_TIM_Base_Start_IT(&htim2);
 800336c:	4806      	ldr	r0, [pc, #24]	; (8003388 <main+0x2d0>)
 800336e:	f005 fe33 	bl	8008fd8 <HAL_TIM_Base_Start_IT>
				act_menu = mainmenu, position = 1, max_pos = 4;
 8003372:	4b15      	ldr	r3, [pc, #84]	; (80033c8 <main+0x310>)
 8003374:	4a16      	ldr	r2, [pc, #88]	; (80033d0 <main+0x318>)
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	4b16      	ldr	r3, [pc, #88]	; (80033d4 <main+0x31c>)
 800337a:	2201      	movs	r2, #1
 800337c:	701a      	strb	r2, [r3, #0]
 800337e:	4b17      	ldr	r3, [pc, #92]	; (80033dc <main+0x324>)
 8003380:	2204      	movs	r2, #4
 8003382:	701a      	strb	r2, [r3, #0]
				break;
 8003384:	e075      	b.n	8003472 <main+0x3ba>
 8003386:	bf00      	nop
 8003388:	2000040c 	.word	0x2000040c
 800338c:	20000018 	.word	0x20000018
 8003390:	200001bc 	.word	0x200001bc
 8003394:	20000318 	.word	0x20000318
 8003398:	20000210 	.word	0x20000210
 800339c:	20000320 	.word	0x20000320
 80033a0:	0800c0dc 	.word	0x0800c0dc
 80033a4:	0800c0e8 	.word	0x0800c0e8
 80033a8:	200002dd 	.word	0x200002dd
 80033ac:	200002ce 	.word	0x200002ce
 80033b0:	200002c4 	.word	0x200002c4
 80033b4:	200004f0 	.word	0x200004f0
 80033b8:	40021000 	.word	0x40021000
 80033bc:	200002e0 	.word	0x200002e0
 80033c0:	200002e2 	.word	0x200002e2
 80033c4:	200002e1 	.word	0x200002e1
 80033c8:	20000128 	.word	0x20000128
 80033cc:	20000278 	.word	0x20000278
 80033d0:	20000058 	.word	0x20000058
 80033d4:	20000054 	.word	0x20000054
 80033d8:	20000068 	.word	0x20000068
 80033dc:	20000055 	.word	0x20000055
 80033e0:	20000098 	.word	0x20000098
 80033e4:	200000d8 	.word	0x200000d8
 80033e8:	200002e8 	.word	0x200002e8
 80033ec:	2000027c 	.word	0x2000027c
 80033f0:	0800c0fc 	.word	0x0800c0fc
 80033f4:	0800c108 	.word	0x0800c108
 80033f8:	200002f0 	.word	0x200002f0
 80033fc:	20000118 	.word	0x20000118
 8003400:	200002de 	.word	0x200002de
 8003404:	200002e3 	.word	0x200002e3
 8003408:	200002df 	.word	0x200002df
 800340c:	0800c110 	.word	0x0800c110
 8003410:	0800c118 	.word	0x0800c118

 	 		case 2: alarm = false;
 8003414:	4b9e      	ldr	r3, [pc, #632]	; (8003690 <main+0x5d8>)
 8003416:	2200      	movs	r2, #0
 8003418:	701a      	strb	r2, [r3, #0]
				PIR_detected = false;
 800341a:	4b9e      	ldr	r3, [pc, #632]	; (8003694 <main+0x5dc>)
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]
				alarmLED = false;
 8003420:	4b9d      	ldr	r3, [pc, #628]	; (8003698 <main+0x5e0>)
 8003422:	2200      	movs	r2, #0
 8003424:	701a      	strb	r2, [r3, #0]
				LCD_WriteCommand(HD44780_CLEAR);
 8003426:	2001      	movs	r0, #1
 8003428:	f7ff fba8 	bl	8002b7c <LCD_WriteCommand>
				LCD_WriteText("Alarm");
 800342c:	489b      	ldr	r0, [pc, #620]	; (800369c <main+0x5e4>)
 800342e:	f7ff fbcb 	bl	8002bc8 <LCD_WriteText>
				LCD_WriteTextXY("turned off",0,1);
 8003432:	2201      	movs	r2, #1
 8003434:	2100      	movs	r1, #0
 8003436:	489a      	ldr	r0, [pc, #616]	; (80036a0 <main+0x5e8>)
 8003438:	f7ff fbf5 	bl	8002c26 <LCD_WriteTextXY>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800343c:	2108      	movs	r1, #8
 800343e:	4899      	ldr	r0, [pc, #612]	; (80036a4 <main+0x5ec>)
 8003440:	f005 ffcc 	bl	80093dc <HAL_TIM_PWM_Stop>
				HAL_TIM_Base_Stop_IT(&htim2);
 8003444:	4897      	ldr	r0, [pc, #604]	; (80036a4 <main+0x5ec>)
 8003446:	f005 fe3f 	bl	80090c8 <HAL_TIM_Base_Stop_IT>
				act_menu = mainmenu, position = 1, max_pos = 4;
 800344a:	4b97      	ldr	r3, [pc, #604]	; (80036a8 <main+0x5f0>)
 800344c:	4a97      	ldr	r2, [pc, #604]	; (80036ac <main+0x5f4>)
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	4b97      	ldr	r3, [pc, #604]	; (80036b0 <main+0x5f8>)
 8003452:	2201      	movs	r2, #1
 8003454:	701a      	strb	r2, [r3, #0]
 8003456:	4b97      	ldr	r3, [pc, #604]	; (80036b4 <main+0x5fc>)
 8003458:	2204      	movs	r2, #4
 800345a:	701a      	strb	r2, [r3, #0]
				break;
 800345c:	e009      	b.n	8003472 <main+0x3ba>

 	 		default: act_menu = menuAlarm, position = 1, max_pos = 2; break;
 800345e:	4b92      	ldr	r3, [pc, #584]	; (80036a8 <main+0x5f0>)
 8003460:	4a95      	ldr	r2, [pc, #596]	; (80036b8 <main+0x600>)
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	4b92      	ldr	r3, [pc, #584]	; (80036b0 <main+0x5f8>)
 8003466:	2201      	movs	r2, #1
 8003468:	701a      	strb	r2, [r3, #0]
 800346a:	4b92      	ldr	r3, [pc, #584]	; (80036b4 <main+0x5fc>)
 800346c:	2202      	movs	r2, #2
 800346e:	701a      	strb	r2, [r3, #0]
 8003470:	bf00      	nop
 		switch (position){
 8003472:	f000 be1b 	b.w	80040ac <main+0xff4>
 		}
 	}
	else if(symbol[0] == '*' && act_menu == menuKitchen){
 8003476:	4b91      	ldr	r3, [pc, #580]	; (80036bc <main+0x604>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b2a      	cmp	r3, #42	; 0x2a
 800347c:	d12e      	bne.n	80034dc <main+0x424>
 800347e:	4b8a      	ldr	r3, [pc, #552]	; (80036a8 <main+0x5f0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a8f      	ldr	r2, [pc, #572]	; (80036c0 <main+0x608>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d129      	bne.n	80034dc <main+0x424>
		refreshLCD = true;
 8003488:	4b8e      	ldr	r3, [pc, #568]	; (80036c4 <main+0x60c>)
 800348a:	2201      	movs	r2, #1
 800348c:	701a      	strb	r2, [r3, #0]
		switch (position){
 800348e:	4b88      	ldr	r3, [pc, #544]	; (80036b0 <main+0x5f8>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d002      	beq.n	800349c <main+0x3e4>
 8003496:	2b02      	cmp	r3, #2
 8003498:	d00a      	beq.n	80034b0 <main+0x3f8>
 800349a:	e013      	b.n	80034c4 <main+0x40c>
			case 1: act_menu = menuKitchenLighting, position = 1, max_pos = 3; break;
 800349c:	4b82      	ldr	r3, [pc, #520]	; (80036a8 <main+0x5f0>)
 800349e:	4a8a      	ldr	r2, [pc, #552]	; (80036c8 <main+0x610>)
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	4b83      	ldr	r3, [pc, #524]	; (80036b0 <main+0x5f8>)
 80034a4:	2201      	movs	r2, #1
 80034a6:	701a      	strb	r2, [r3, #0]
 80034a8:	4b82      	ldr	r3, [pc, #520]	; (80036b4 <main+0x5fc>)
 80034aa:	2203      	movs	r2, #3
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	e013      	b.n	80034d8 <main+0x420>
			case 2: act_menu = menuKitchenShutter, position = 1, max_pos = 2; break;
 80034b0:	4b7d      	ldr	r3, [pc, #500]	; (80036a8 <main+0x5f0>)
 80034b2:	4a86      	ldr	r2, [pc, #536]	; (80036cc <main+0x614>)
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	4b7e      	ldr	r3, [pc, #504]	; (80036b0 <main+0x5f8>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	701a      	strb	r2, [r3, #0]
 80034bc:	4b7d      	ldr	r3, [pc, #500]	; (80036b4 <main+0x5fc>)
 80034be:	2202      	movs	r2, #2
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	e009      	b.n	80034d8 <main+0x420>
			default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 80034c4:	4b78      	ldr	r3, [pc, #480]	; (80036a8 <main+0x5f0>)
 80034c6:	4a7e      	ldr	r2, [pc, #504]	; (80036c0 <main+0x608>)
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	4b79      	ldr	r3, [pc, #484]	; (80036b0 <main+0x5f8>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	701a      	strb	r2, [r3, #0]
 80034d0:	4b78      	ldr	r3, [pc, #480]	; (80036b4 <main+0x5fc>)
 80034d2:	2202      	movs	r2, #2
 80034d4:	701a      	strb	r2, [r3, #0]
 80034d6:	bf00      	nop
		switch (position){
 80034d8:	f000 bde8 	b.w	80040ac <main+0xff4>
		}
	}
	else if(symbol[0] == '*' && act_menu == menuKitchenLighting){
 80034dc:	4b77      	ldr	r3, [pc, #476]	; (80036bc <main+0x604>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b2a      	cmp	r3, #42	; 0x2a
 80034e2:	f040 80bc 	bne.w	800365e <main+0x5a6>
 80034e6:	4b70      	ldr	r3, [pc, #448]	; (80036a8 <main+0x5f0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a77      	ldr	r2, [pc, #476]	; (80036c8 <main+0x610>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	f040 80b6 	bne.w	800365e <main+0x5a6>
 		 	 		refreshLCD = true;
 80034f2:	4b74      	ldr	r3, [pc, #464]	; (80036c4 <main+0x60c>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 80034f8:	4b6d      	ldr	r3, [pc, #436]	; (80036b0 <main+0x5f8>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b03      	cmp	r3, #3
 80034fe:	d02c      	beq.n	800355a <main+0x4a2>
 8003500:	2b03      	cmp	r3, #3
 8003502:	f300 80a0 	bgt.w	8003646 <main+0x58e>
 8003506:	2b01      	cmp	r3, #1
 8003508:	d002      	beq.n	8003510 <main+0x458>
 800350a:	2b02      	cmp	r3, #2
 800350c:	d015      	beq.n	800353a <main+0x482>
 800350e:	e09a      	b.n	8003646 <main+0x58e>
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 8003510:	2001      	movs	r0, #1
 8003512:	f7ff fb33 	bl	8002b7c <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 8003516:	486e      	ldr	r0, [pc, #440]	; (80036d0 <main+0x618>)
 8003518:	f7ff fb56 	bl	8002bc8 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 800351c:	2201      	movs	r2, #1
 800351e:	2100      	movs	r1, #0
 8003520:	486c      	ldr	r0, [pc, #432]	; (80036d4 <main+0x61c>)
 8003522:	f7ff fb80 	bl	8002c26 <LCD_WriteTextXY>
 		 	 				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, brightnessKitchen);
 8003526:	4b6c      	ldr	r3, [pc, #432]	; (80036d8 <main+0x620>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	4b5e      	ldr	r3, [pc, #376]	; (80036a4 <main+0x5ec>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	641a      	str	r2, [r3, #64]	; 0x40
 		 	 				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8003530:	210c      	movs	r1, #12
 8003532:	485c      	ldr	r0, [pc, #368]	; (80036a4 <main+0x5ec>)
 8003534:	f005 fe58 	bl	80091e8 <HAL_TIM_PWM_Start>
 		 	 				break;
 8003538:	e08f      	b.n	800365a <main+0x5a2>

 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 800353a:	2001      	movs	r0, #1
 800353c:	f7ff fb1e 	bl	8002b7c <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 8003540:	4863      	ldr	r0, [pc, #396]	; (80036d0 <main+0x618>)
 8003542:	f7ff fb41 	bl	8002bc8 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 8003546:	2201      	movs	r2, #1
 8003548:	2100      	movs	r1, #0
 800354a:	4855      	ldr	r0, [pc, #340]	; (80036a0 <main+0x5e8>)
 800354c:	f7ff fb6b 	bl	8002c26 <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8003550:	210c      	movs	r1, #12
 8003552:	4854      	ldr	r0, [pc, #336]	; (80036a4 <main+0x5ec>)
 8003554:	f005 ff42 	bl	80093dc <HAL_TIM_PWM_Stop>
 				 	 		break;
 8003558:	e07f      	b.n	800365a <main+0x5a2>

 		 	 		case 3:
							i = 0;
 800355a:	4b60      	ldr	r3, [pc, #384]	; (80036dc <main+0x624>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
							HAL_Delay(200);
 8003560:	20c8      	movs	r0, #200	; 0xc8
 8003562:	f002 f937 	bl	80057d4 <HAL_Delay>
							memset(buff, 0, sizeof(buff));
 8003566:	2205      	movs	r2, #5
 8003568:	2100      	movs	r1, #0
 800356a:	485d      	ldr	r0, [pc, #372]	; (80036e0 <main+0x628>)
 800356c:	f007 ffda 	bl	800b524 <memset>
							LCD_WriteCommand(HD44780_CLEAR);
 8003570:	2001      	movs	r0, #1
 8003572:	f7ff fb03 	bl	8002b7c <LCD_WriteCommand>
							LCD_WriteText("Write Bright");
 8003576:	485b      	ldr	r0, [pc, #364]	; (80036e4 <main+0x62c>)
 8003578:	f7ff fb26 	bl	8002bc8 <LCD_WriteText>
							while(1) {
								refreshLCD = true;
 800357c:	4b51      	ldr	r3, [pc, #324]	; (80036c4 <main+0x60c>)
 800357e:	2201      	movs	r2, #1
 8003580:	701a      	strb	r2, [r3, #0]
								symbol[0] = keypad_readkey();
 8003582:	f7ff f9b5 	bl	80028f0 <keypad_readkey>
 8003586:	4603      	mov	r3, r0
 8003588:	461a      	mov	r2, r3
 800358a:	4b4c      	ldr	r3, [pc, #304]	; (80036bc <main+0x604>)
 800358c:	701a      	strb	r2, [r3, #0]
								if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 800358e:	4b4b      	ldr	r3, [pc, #300]	; (80036bc <main+0x604>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b2f      	cmp	r3, #47	; 0x2f
 8003594:	d922      	bls.n	80035dc <main+0x524>
 8003596:	4b49      	ldr	r3, [pc, #292]	; (80036bc <main+0x604>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b39      	cmp	r3, #57	; 0x39
 800359c:	d81e      	bhi.n	80035dc <main+0x524>
 800359e:	4b4f      	ldr	r3, [pc, #316]	; (80036dc <main+0x624>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d81a      	bhi.n	80035dc <main+0x524>
									buff[i] = symbol[0];
 80035a6:	4b4d      	ldr	r3, [pc, #308]	; (80036dc <main+0x624>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a44      	ldr	r2, [pc, #272]	; (80036bc <main+0x604>)
 80035ac:	7811      	ldrb	r1, [r2, #0]
 80035ae:	4a4c      	ldr	r2, [pc, #304]	; (80036e0 <main+0x628>)
 80035b0:	54d1      	strb	r1, [r2, r3]
									i++;
 80035b2:	4b4a      	ldr	r3, [pc, #296]	; (80036dc <main+0x624>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3301      	adds	r3, #1
 80035b8:	4a48      	ldr	r2, [pc, #288]	; (80036dc <main+0x624>)
 80035ba:	6013      	str	r3, [r2, #0]
									buff[i] = '\0';
 80035bc:	4b47      	ldr	r3, [pc, #284]	; (80036dc <main+0x624>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a47      	ldr	r2, [pc, #284]	; (80036e0 <main+0x628>)
 80035c2:	2100      	movs	r1, #0
 80035c4:	54d1      	strb	r1, [r2, r3]
									LCD_WriteCommand(HD44780_CLEAR);
 80035c6:	2001      	movs	r0, #1
 80035c8:	f7ff fad8 	bl	8002b7c <LCD_WriteCommand>
									LCD_WriteText("Brightness: ");
 80035cc:	4846      	ldr	r0, [pc, #280]	; (80036e8 <main+0x630>)
 80035ce:	f7ff fafb 	bl	8002bc8 <LCD_WriteText>
									LCD_WriteTextXY(buff, 0, 1);
 80035d2:	2201      	movs	r2, #1
 80035d4:	2100      	movs	r1, #0
 80035d6:	4842      	ldr	r0, [pc, #264]	; (80036e0 <main+0x628>)
 80035d8:	f7ff fb25 	bl	8002c26 <LCD_WriteTextXY>
								}
								HAL_Delay(200);
 80035dc:	20c8      	movs	r0, #200	; 0xc8
 80035de:	f002 f8f9 	bl	80057d4 <HAL_Delay>
								symbol[0] = keypad_readkey();
 80035e2:	f7ff f985 	bl	80028f0 <keypad_readkey>
 80035e6:	4603      	mov	r3, r0
 80035e8:	461a      	mov	r2, r3
 80035ea:	4b34      	ldr	r3, [pc, #208]	; (80036bc <main+0x604>)
 80035ec:	701a      	strb	r2, [r3, #0]
								if(symbol[0] == '*') {
 80035ee:	4b33      	ldr	r3, [pc, #204]	; (80036bc <main+0x604>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b2a      	cmp	r3, #42	; 0x2a
 80035f4:	d123      	bne.n	800363e <main+0x586>
									brightnessKitchen = atoi(buff)*10;
 80035f6:	483a      	ldr	r0, [pc, #232]	; (80036e0 <main+0x628>)
 80035f8:	f007 fed0 	bl	800b39c <atoi>
 80035fc:	4602      	mov	r2, r0
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	461a      	mov	r2, r3
 8003608:	4b33      	ldr	r3, [pc, #204]	; (80036d8 <main+0x620>)
 800360a:	601a      	str	r2, [r3, #0]
									if(brightnessKitchen >= 1000) {
 800360c:	4b32      	ldr	r3, [pc, #200]	; (80036d8 <main+0x620>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003614:	db03      	blt.n	800361e <main+0x566>
										brightnessKitchen = 999;
 8003616:	4b30      	ldr	r3, [pc, #192]	; (80036d8 <main+0x620>)
 8003618:	f240 32e7 	movw	r2, #999	; 0x3e7
 800361c:	601a      	str	r2, [r3, #0]
									}
								   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, brightnessKitchen);
 800361e:	4b2e      	ldr	r3, [pc, #184]	; (80036d8 <main+0x620>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <main+0x5ec>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	641a      	str	r2, [r3, #64]	; 0x40
									act_menu = menuKitchenLighting;
 8003628:	4b1f      	ldr	r3, [pc, #124]	; (80036a8 <main+0x5f0>)
 800362a:	4a27      	ldr	r2, [pc, #156]	; (80036c8 <main+0x610>)
 800362c:	601a      	str	r2, [r3, #0]
									position = 1;
 800362e:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <main+0x5f8>)
 8003630:	2201      	movs	r2, #1
 8003632:	701a      	strb	r2, [r3, #0]
									max_pos = 3;
 8003634:	4b1f      	ldr	r3, [pc, #124]	; (80036b4 <main+0x5fc>)
 8003636:	2203      	movs	r2, #3
 8003638:	701a      	strb	r2, [r3, #0]
									break;
 800363a:	bf00      	nop
								}
								HAL_Delay(100);
							}
							break;
 800363c:	e00d      	b.n	800365a <main+0x5a2>
								HAL_Delay(100);
 800363e:	2064      	movs	r0, #100	; 0x64
 8003640:	f002 f8c8 	bl	80057d4 <HAL_Delay>
								refreshLCD = true;
 8003644:	e79a      	b.n	800357c <main+0x4c4>
 		 	 		default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8003646:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <main+0x5f0>)
 8003648:	4a1d      	ldr	r2, [pc, #116]	; (80036c0 <main+0x608>)
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	4b18      	ldr	r3, [pc, #96]	; (80036b0 <main+0x5f8>)
 800364e:	2201      	movs	r2, #1
 8003650:	701a      	strb	r2, [r3, #0]
 8003652:	4b18      	ldr	r3, [pc, #96]	; (80036b4 <main+0x5fc>)
 8003654:	2202      	movs	r2, #2
 8003656:	701a      	strb	r2, [r3, #0]
 8003658:	bf00      	nop
 		 	 	  switch (position){
 800365a:	f000 bd27 	b.w	80040ac <main+0xff4>
 		 	 	  	  }
	}

	else if(symbol[0] == '*' && act_menu == menuKitchenShutter) {
 800365e:	4b17      	ldr	r3, [pc, #92]	; (80036bc <main+0x604>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b2a      	cmp	r3, #42	; 0x2a
 8003664:	d179      	bne.n	800375a <main+0x6a2>
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <main+0x5f0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a18      	ldr	r2, [pc, #96]	; (80036cc <main+0x614>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d174      	bne.n	800375a <main+0x6a2>
			refreshLCD = true;
 8003670:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <main+0x60c>)
 8003672:	2201      	movs	r2, #1
 8003674:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003676:	2100      	movs	r1, #0
 8003678:	481c      	ldr	r0, [pc, #112]	; (80036ec <main+0x634>)
 800367a:	f005 fdb5 	bl	80091e8 <HAL_TIM_PWM_Start>
			switch(position) {
 800367e:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <main+0x5f8>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d034      	beq.n	80036f0 <main+0x638>
 8003686:	2b02      	cmp	r3, #2
 8003688:	d04d      	beq.n	8003726 <main+0x66e>
 800368a:	f000 bd0f 	b.w	80040ac <main+0xff4>
 800368e:	bf00      	nop
 8003690:	200002de 	.word	0x200002de
 8003694:	200002e3 	.word	0x200002e3
 8003698:	200002df 	.word	0x200002df
 800369c:	0800c110 	.word	0x0800c110
 80036a0:	0800c124 	.word	0x0800c124
 80036a4:	2000040c 	.word	0x2000040c
 80036a8:	20000128 	.word	0x20000128
 80036ac:	20000058 	.word	0x20000058
 80036b0:	20000054 	.word	0x20000054
 80036b4:	20000055 	.word	0x20000055
 80036b8:	20000118 	.word	0x20000118
 80036bc:	20000278 	.word	0x20000278
 80036c0:	20000068 	.word	0x20000068
 80036c4:	200002dd 	.word	0x200002dd
 80036c8:	20000078 	.word	0x20000078
 80036cc:	20000088 	.word	0x20000088
 80036d0:	0800c130 	.word	0x0800c130
 80036d4:	0800c118 	.word	0x0800c118
 80036d8:	20000130 	.word	0x20000130
 80036dc:	200002e8 	.word	0x200002e8
 80036e0:	2000027c 	.word	0x2000027c
 80036e4:	0800c138 	.word	0x0800c138
 80036e8:	0800c148 	.word	0x0800c148
 80036ec:	200003c0 	.word	0x200003c0
				case 1:
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 500);
 80036f0:	4b9c      	ldr	r3, [pc, #624]	; (8003964 <main+0x8ac>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80036f8:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_Delay(500);
 80036fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80036fe:	f002 f869 	bl	80057d4 <HAL_Delay>
				   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 8003702:	4b98      	ldr	r3, [pc, #608]	; (8003964 <main+0x8ac>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2200      	movs	r2, #0
 8003708:	635a      	str	r2, [r3, #52]	; 0x34

				   kitchenShutter = true;
 800370a:	4b97      	ldr	r3, [pc, #604]	; (8003968 <main+0x8b0>)
 800370c:	2201      	movs	r2, #1
 800370e:	701a      	strb	r2, [r3, #0]
				   LCD_WriteText("Shutter");
 8003710:	4896      	ldr	r0, [pc, #600]	; (800396c <main+0x8b4>)
 8003712:	f7ff fa59 	bl	8002bc8 <LCD_WriteText>
				   LCD_WriteTextXY("is lowering",0,1);
 8003716:	2201      	movs	r2, #1
 8003718:	2100      	movs	r1, #0
 800371a:	4895      	ldr	r0, [pc, #596]	; (8003970 <main+0x8b8>)
 800371c:	f7ff fa83 	bl	8002c26 <LCD_WriteTextXY>
				   break;
 8003720:	bf00      	nop
			switch(position) {
 8003722:	f000 bcc3 	b.w	80040ac <main+0xff4>
				case 2:
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 2000);
 8003726:	4b8f      	ldr	r3, [pc, #572]	; (8003964 <main+0x8ac>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800372e:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_Delay(500);
 8003730:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003734:	f002 f84e 	bl	80057d4 <HAL_Delay>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8003738:	4b8a      	ldr	r3, [pc, #552]	; (8003964 <main+0x8ac>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2200      	movs	r2, #0
 800373e:	635a      	str	r2, [r3, #52]	; 0x34
					kitchenShutter = false;
 8003740:	4b89      	ldr	r3, [pc, #548]	; (8003968 <main+0x8b0>)
 8003742:	2200      	movs	r2, #0
 8003744:	701a      	strb	r2, [r3, #0]
					LCD_WriteText("Shutter");
 8003746:	4889      	ldr	r0, [pc, #548]	; (800396c <main+0x8b4>)
 8003748:	f7ff fa3e 	bl	8002bc8 <LCD_WriteText>
					LCD_WriteTextXY("go up",0,1);
 800374c:	2201      	movs	r2, #1
 800374e:	2100      	movs	r1, #0
 8003750:	4888      	ldr	r0, [pc, #544]	; (8003974 <main+0x8bc>)
 8003752:	f7ff fa68 	bl	8002c26 <LCD_WriteTextXY>
			switch(position) {
 8003756:	f000 bca9 	b.w	80040ac <main+0xff4>
			}
	}

	else if(symbol[0] == '*' && act_menu == menuLivingroom){
 800375a:	4b87      	ldr	r3, [pc, #540]	; (8003978 <main+0x8c0>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b2a      	cmp	r3, #42	; 0x2a
 8003760:	d13c      	bne.n	80037dc <main+0x724>
 8003762:	4b86      	ldr	r3, [pc, #536]	; (800397c <main+0x8c4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a86      	ldr	r2, [pc, #536]	; (8003980 <main+0x8c8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d137      	bne.n	80037dc <main+0x724>
					refreshLCD = true;
 800376c:	4b85      	ldr	r3, [pc, #532]	; (8003984 <main+0x8cc>)
 800376e:	2201      	movs	r2, #1
 8003770:	701a      	strb	r2, [r3, #0]
				  switch (position){
 8003772:	4b85      	ldr	r3, [pc, #532]	; (8003988 <main+0x8d0>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b03      	cmp	r3, #3
 8003778:	d01a      	beq.n	80037b0 <main+0x6f8>
 800377a:	2b03      	cmp	r3, #3
 800377c:	dc22      	bgt.n	80037c4 <main+0x70c>
 800377e:	2b01      	cmp	r3, #1
 8003780:	d002      	beq.n	8003788 <main+0x6d0>
 8003782:	2b02      	cmp	r3, #2
 8003784:	d00a      	beq.n	800379c <main+0x6e4>
 8003786:	e01d      	b.n	80037c4 <main+0x70c>
						case 1: act_menu = menuLivingroomTemperature, position = 1, max_pos = 2; break;
 8003788:	4b7c      	ldr	r3, [pc, #496]	; (800397c <main+0x8c4>)
 800378a:	4a80      	ldr	r2, [pc, #512]	; (800398c <main+0x8d4>)
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	4b7e      	ldr	r3, [pc, #504]	; (8003988 <main+0x8d0>)
 8003790:	2201      	movs	r2, #1
 8003792:	701a      	strb	r2, [r3, #0]
 8003794:	4b7e      	ldr	r3, [pc, #504]	; (8003990 <main+0x8d8>)
 8003796:	2202      	movs	r2, #2
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	e01d      	b.n	80037d8 <main+0x720>
						case 2: act_menu = menuLivingroomLighting, position = 1, max_pos = 3; break;
 800379c:	4b77      	ldr	r3, [pc, #476]	; (800397c <main+0x8c4>)
 800379e:	4a7d      	ldr	r2, [pc, #500]	; (8003994 <main+0x8dc>)
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	4b79      	ldr	r3, [pc, #484]	; (8003988 <main+0x8d0>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
 80037a8:	4b79      	ldr	r3, [pc, #484]	; (8003990 <main+0x8d8>)
 80037aa:	2203      	movs	r2, #3
 80037ac:	701a      	strb	r2, [r3, #0]
 80037ae:	e013      	b.n	80037d8 <main+0x720>
						case 3: act_menu = menuLivingroomShutter, position = 1, max_pos = 2; break;
 80037b0:	4b72      	ldr	r3, [pc, #456]	; (800397c <main+0x8c4>)
 80037b2:	4a79      	ldr	r2, [pc, #484]	; (8003998 <main+0x8e0>)
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	4b74      	ldr	r3, [pc, #464]	; (8003988 <main+0x8d0>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	701a      	strb	r2, [r3, #0]
 80037bc:	4b74      	ldr	r3, [pc, #464]	; (8003990 <main+0x8d8>)
 80037be:	2202      	movs	r2, #2
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	e009      	b.n	80037d8 <main+0x720>
					default: act_menu = menuLivingroom, position = 1, max_pos = 2; break;
 80037c4:	4b6d      	ldr	r3, [pc, #436]	; (800397c <main+0x8c4>)
 80037c6:	4a6e      	ldr	r2, [pc, #440]	; (8003980 <main+0x8c8>)
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	4b6f      	ldr	r3, [pc, #444]	; (8003988 <main+0x8d0>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	4b6f      	ldr	r3, [pc, #444]	; (8003990 <main+0x8d8>)
 80037d2:	2202      	movs	r2, #2
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	bf00      	nop
				  switch (position){
 80037d8:	f000 bc68 	b.w	80040ac <main+0xff4>
					  }
	}
	else if(symbol[0] == '*' && act_menu == menuLivingroomLighting){
 80037dc:	4b66      	ldr	r3, [pc, #408]	; (8003978 <main+0x8c0>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b2a      	cmp	r3, #42	; 0x2a
 80037e2:	f040 80ed 	bne.w	80039c0 <main+0x908>
 80037e6:	4b65      	ldr	r3, [pc, #404]	; (800397c <main+0x8c4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a6a      	ldr	r2, [pc, #424]	; (8003994 <main+0x8dc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	f040 80e7 	bne.w	80039c0 <main+0x908>
 		 	 		refreshLCD = true;
 80037f2:	4b64      	ldr	r3, [pc, #400]	; (8003984 <main+0x8cc>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 80037f8:	4b63      	ldr	r3, [pc, #396]	; (8003988 <main+0x8d0>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d02c      	beq.n	800385a <main+0x7a2>
 8003800:	2b03      	cmp	r3, #3
 8003802:	f300 80a3 	bgt.w	800394c <main+0x894>
 8003806:	2b01      	cmp	r3, #1
 8003808:	d002      	beq.n	8003810 <main+0x758>
 800380a:	2b02      	cmp	r3, #2
 800380c:	d015      	beq.n	800383a <main+0x782>
 800380e:	e09d      	b.n	800394c <main+0x894>
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 8003810:	2001      	movs	r0, #1
 8003812:	f7ff f9b3 	bl	8002b7c <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 8003816:	4861      	ldr	r0, [pc, #388]	; (800399c <main+0x8e4>)
 8003818:	f7ff f9d6 	bl	8002bc8 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 800381c:	2201      	movs	r2, #1
 800381e:	2100      	movs	r1, #0
 8003820:	485f      	ldr	r0, [pc, #380]	; (80039a0 <main+0x8e8>)
 8003822:	f7ff fa00 	bl	8002c26 <LCD_WriteTextXY>
 		 	 				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 8003826:	4b5f      	ldr	r3, [pc, #380]	; (80039a4 <main+0x8ec>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4b5f      	ldr	r3, [pc, #380]	; (80039a8 <main+0x8f0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	635a      	str	r2, [r3, #52]	; 0x34
							HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003830:	2100      	movs	r1, #0
 8003832:	485d      	ldr	r0, [pc, #372]	; (80039a8 <main+0x8f0>)
 8003834:	f005 fcd8 	bl	80091e8 <HAL_TIM_PWM_Start>
 		 	 				break;
 8003838:	e092      	b.n	8003960 <main+0x8a8>

 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 800383a:	2001      	movs	r0, #1
 800383c:	f7ff f99e 	bl	8002b7c <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 8003840:	4856      	ldr	r0, [pc, #344]	; (800399c <main+0x8e4>)
 8003842:	f7ff f9c1 	bl	8002bc8 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 8003846:	2201      	movs	r2, #1
 8003848:	2100      	movs	r1, #0
 800384a:	4858      	ldr	r0, [pc, #352]	; (80039ac <main+0x8f4>)
 800384c:	f7ff f9eb 	bl	8002c26 <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim4 , TIM_CHANNEL_1);
 8003850:	2100      	movs	r1, #0
 8003852:	4855      	ldr	r0, [pc, #340]	; (80039a8 <main+0x8f0>)
 8003854:	f005 fdc2 	bl	80093dc <HAL_TIM_PWM_Stop>
 				 	 		break;
 8003858:	e082      	b.n	8003960 <main+0x8a8>
 		 	 		case 3:
							i = 0;
 800385a:	4b55      	ldr	r3, [pc, #340]	; (80039b0 <main+0x8f8>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
							refreshLCD = true;
 8003860:	4b48      	ldr	r3, [pc, #288]	; (8003984 <main+0x8cc>)
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
							HAL_Delay(200);
 8003866:	20c8      	movs	r0, #200	; 0xc8
 8003868:	f001 ffb4 	bl	80057d4 <HAL_Delay>
							memset(buff, 0, sizeof(buff));
 800386c:	2205      	movs	r2, #5
 800386e:	2100      	movs	r1, #0
 8003870:	4850      	ldr	r0, [pc, #320]	; (80039b4 <main+0x8fc>)
 8003872:	f007 fe57 	bl	800b524 <memset>
							LCD_WriteCommand(HD44780_CLEAR);
 8003876:	2001      	movs	r0, #1
 8003878:	f7ff f980 	bl	8002b7c <LCD_WriteCommand>
							LCD_WriteText("Write Bright");
 800387c:	484e      	ldr	r0, [pc, #312]	; (80039b8 <main+0x900>)
 800387e:	f7ff f9a3 	bl	8002bc8 <LCD_WriteText>
							while(1) {
								refreshLCD = true;
 8003882:	4b40      	ldr	r3, [pc, #256]	; (8003984 <main+0x8cc>)
 8003884:	2201      	movs	r2, #1
 8003886:	701a      	strb	r2, [r3, #0]
								symbol[0] = keypad_readkey();
 8003888:	f7ff f832 	bl	80028f0 <keypad_readkey>
 800388c:	4603      	mov	r3, r0
 800388e:	461a      	mov	r2, r3
 8003890:	4b39      	ldr	r3, [pc, #228]	; (8003978 <main+0x8c0>)
 8003892:	701a      	strb	r2, [r3, #0]
								if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 8003894:	4b38      	ldr	r3, [pc, #224]	; (8003978 <main+0x8c0>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b2f      	cmp	r3, #47	; 0x2f
 800389a:	d922      	bls.n	80038e2 <main+0x82a>
 800389c:	4b36      	ldr	r3, [pc, #216]	; (8003978 <main+0x8c0>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b39      	cmp	r3, #57	; 0x39
 80038a2:	d81e      	bhi.n	80038e2 <main+0x82a>
 80038a4:	4b42      	ldr	r3, [pc, #264]	; (80039b0 <main+0x8f8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d81a      	bhi.n	80038e2 <main+0x82a>
									buff[i] = symbol[0];
 80038ac:	4b40      	ldr	r3, [pc, #256]	; (80039b0 <main+0x8f8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a31      	ldr	r2, [pc, #196]	; (8003978 <main+0x8c0>)
 80038b2:	7811      	ldrb	r1, [r2, #0]
 80038b4:	4a3f      	ldr	r2, [pc, #252]	; (80039b4 <main+0x8fc>)
 80038b6:	54d1      	strb	r1, [r2, r3]
									i++;
 80038b8:	4b3d      	ldr	r3, [pc, #244]	; (80039b0 <main+0x8f8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3301      	adds	r3, #1
 80038be:	4a3c      	ldr	r2, [pc, #240]	; (80039b0 <main+0x8f8>)
 80038c0:	6013      	str	r3, [r2, #0]
									buff[i] = '\0';
 80038c2:	4b3b      	ldr	r3, [pc, #236]	; (80039b0 <main+0x8f8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a3b      	ldr	r2, [pc, #236]	; (80039b4 <main+0x8fc>)
 80038c8:	2100      	movs	r1, #0
 80038ca:	54d1      	strb	r1, [r2, r3]
									LCD_WriteCommand(HD44780_CLEAR);
 80038cc:	2001      	movs	r0, #1
 80038ce:	f7ff f955 	bl	8002b7c <LCD_WriteCommand>
									LCD_WriteText("Brightness: ");
 80038d2:	483a      	ldr	r0, [pc, #232]	; (80039bc <main+0x904>)
 80038d4:	f7ff f978 	bl	8002bc8 <LCD_WriteText>
									LCD_WriteTextXY(buff, 0, 1);
 80038d8:	2201      	movs	r2, #1
 80038da:	2100      	movs	r1, #0
 80038dc:	4835      	ldr	r0, [pc, #212]	; (80039b4 <main+0x8fc>)
 80038de:	f7ff f9a2 	bl	8002c26 <LCD_WriteTextXY>
								}
								HAL_Delay(200);
 80038e2:	20c8      	movs	r0, #200	; 0xc8
 80038e4:	f001 ff76 	bl	80057d4 <HAL_Delay>
								symbol[0] = keypad_readkey();
 80038e8:	f7ff f802 	bl	80028f0 <keypad_readkey>
 80038ec:	4603      	mov	r3, r0
 80038ee:	461a      	mov	r2, r3
 80038f0:	4b21      	ldr	r3, [pc, #132]	; (8003978 <main+0x8c0>)
 80038f2:	701a      	strb	r2, [r3, #0]
								if(symbol[0] == '*') {
 80038f4:	4b20      	ldr	r3, [pc, #128]	; (8003978 <main+0x8c0>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b2a      	cmp	r3, #42	; 0x2a
 80038fa:	d123      	bne.n	8003944 <main+0x88c>
									brightnessLivingroom = atoi(buff)*10;
 80038fc:	482d      	ldr	r0, [pc, #180]	; (80039b4 <main+0x8fc>)
 80038fe:	f007 fd4d 	bl	800b39c <atoi>
 8003902:	4602      	mov	r2, r0
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	461a      	mov	r2, r3
 800390e:	4b25      	ldr	r3, [pc, #148]	; (80039a4 <main+0x8ec>)
 8003910:	601a      	str	r2, [r3, #0]
									if(brightnessLivingroom >= 1000) {
 8003912:	4b24      	ldr	r3, [pc, #144]	; (80039a4 <main+0x8ec>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800391a:	db03      	blt.n	8003924 <main+0x86c>
										brightnessLivingroom = 999;
 800391c:	4b21      	ldr	r3, [pc, #132]	; (80039a4 <main+0x8ec>)
 800391e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003922:	601a      	str	r2, [r3, #0]
									}
								   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 8003924:	4b1f      	ldr	r3, [pc, #124]	; (80039a4 <main+0x8ec>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	4b1f      	ldr	r3, [pc, #124]	; (80039a8 <main+0x8f0>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	635a      	str	r2, [r3, #52]	; 0x34
									act_menu = menuLivingroomLighting;
 800392e:	4b13      	ldr	r3, [pc, #76]	; (800397c <main+0x8c4>)
 8003930:	4a18      	ldr	r2, [pc, #96]	; (8003994 <main+0x8dc>)
 8003932:	601a      	str	r2, [r3, #0]
									position = 1;
 8003934:	4b14      	ldr	r3, [pc, #80]	; (8003988 <main+0x8d0>)
 8003936:	2201      	movs	r2, #1
 8003938:	701a      	strb	r2, [r3, #0]
									max_pos = 3;
 800393a:	4b15      	ldr	r3, [pc, #84]	; (8003990 <main+0x8d8>)
 800393c:	2203      	movs	r2, #3
 800393e:	701a      	strb	r2, [r3, #0]
									break;
 8003940:	bf00      	nop
								}
								HAL_Delay(100);
							}
							break;
 8003942:	e00d      	b.n	8003960 <main+0x8a8>
								HAL_Delay(100);
 8003944:	2064      	movs	r0, #100	; 0x64
 8003946:	f001 ff45 	bl	80057d4 <HAL_Delay>
								refreshLCD = true;
 800394a:	e79a      	b.n	8003882 <main+0x7ca>
 		 	 		default: act_menu = menuLivingroom, position = 1, max_pos = 2; break;
 800394c:	4b0b      	ldr	r3, [pc, #44]	; (800397c <main+0x8c4>)
 800394e:	4a0c      	ldr	r2, [pc, #48]	; (8003980 <main+0x8c8>)
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	4b0d      	ldr	r3, [pc, #52]	; (8003988 <main+0x8d0>)
 8003954:	2201      	movs	r2, #1
 8003956:	701a      	strb	r2, [r3, #0]
 8003958:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <main+0x8d8>)
 800395a:	2202      	movs	r2, #2
 800395c:	701a      	strb	r2, [r3, #0]
 800395e:	bf00      	nop
 		 	 	  switch (position){
 8003960:	e3a4      	b.n	80040ac <main+0xff4>
 8003962:	bf00      	nop
 8003964:	200003c0 	.word	0x200003c0
 8003968:	200002e4 	.word	0x200002e4
 800396c:	0800c158 	.word	0x0800c158
 8003970:	0800c160 	.word	0x0800c160
 8003974:	0800c16c 	.word	0x0800c16c
 8003978:	20000278 	.word	0x20000278
 800397c:	20000128 	.word	0x20000128
 8003980:	20000098 	.word	0x20000098
 8003984:	200002dd 	.word	0x200002dd
 8003988:	20000054 	.word	0x20000054
 800398c:	200000b8 	.word	0x200000b8
 8003990:	20000055 	.word	0x20000055
 8003994:	200000a8 	.word	0x200000a8
 8003998:	200000c8 	.word	0x200000c8
 800399c:	0800c130 	.word	0x0800c130
 80039a0:	0800c118 	.word	0x0800c118
 80039a4:	2000012c 	.word	0x2000012c
 80039a8:	200004a4 	.word	0x200004a4
 80039ac:	0800c124 	.word	0x0800c124
 80039b0:	200002e8 	.word	0x200002e8
 80039b4:	2000027c 	.word	0x2000027c
 80039b8:	0800c138 	.word	0x0800c138
 80039bc:	0800c148 	.word	0x0800c148
 		 	 	  	  }
 		 	 	}
	else if(symbol[0] == '*' && act_menu == menuLivingroomTemperature){
 80039c0:	4ba4      	ldr	r3, [pc, #656]	; (8003c54 <main+0xb9c>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b2a      	cmp	r3, #42	; 0x2a
 80039c6:	f040 8113 	bne.w	8003bf0 <main+0xb38>
 80039ca:	4ba3      	ldr	r3, [pc, #652]	; (8003c58 <main+0xba0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4aa3      	ldr	r2, [pc, #652]	; (8003c5c <main+0xba4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	f040 810d 	bne.w	8003bf0 <main+0xb38>
		refreshLCD = true;
 80039d6:	4ba2      	ldr	r3, [pc, #648]	; (8003c60 <main+0xba8>)
 80039d8:	2201      	movs	r2, #1
 80039da:	701a      	strb	r2, [r3, #0]
		switch (position){
 80039dc:	4ba1      	ldr	r3, [pc, #644]	; (8003c64 <main+0xbac>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	f000 8089 	beq.w	8003af8 <main+0xa40>
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	f300 80f7 	bgt.w	8003bda <main+0xb22>
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d002      	beq.n	80039f6 <main+0x93e>
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d075      	beq.n	8003ae0 <main+0xa28>
 80039f4:	e0f1      	b.n	8003bda <main+0xb22>
			case 1:
				while(1) {
					HAL_Delay(500);
 80039f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80039fa:	f001 feeb 	bl	80057d4 <HAL_Delay>
					BMP2_ReadData(&bmp2dev, &press, &temp);
 80039fe:	4a9a      	ldr	r2, [pc, #616]	; (8003c68 <main+0xbb0>)
 8003a00:	499a      	ldr	r1, [pc, #616]	; (8003c6c <main+0xbb4>)
 8003a02:	489b      	ldr	r0, [pc, #620]	; (8003c70 <main+0xbb8>)
 8003a04:	f7fe fc96 	bl	8002334 <BMP2_ReadData>
					roundedValue = roundToTwoDecimals(temp);
 8003a08:	4b97      	ldr	r3, [pc, #604]	; (8003c68 <main+0xbb0>)
 8003a0a:	ed93 7b00 	vldr	d7, [r3]
 8003a0e:	eeb0 0a47 	vmov.f32	s0, s14
 8003a12:	eef0 0a67 	vmov.f32	s1, s15
 8003a16:	f7ff fa03 	bl	8002e20 <roundToTwoDecimals>
 8003a1a:	eeb0 7a40 	vmov.f32	s14, s0
 8003a1e:	eef0 7a60 	vmov.f32	s15, s1
 8003a22:	4b94      	ldr	r3, [pc, #592]	; (8003c74 <main+0xbbc>)
 8003a24:	ed83 7b00 	vstr	d7, [r3]
					intPart = (int)roundedValue;
 8003a28:	4b92      	ldr	r3, [pc, #584]	; (8003c74 <main+0xbbc>)
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	4610      	mov	r0, r2
 8003a30:	4619      	mov	r1, r3
 8003a32:	f7fd f8ab 	bl	8000b8c <__aeabi_d2iz>
 8003a36:	4603      	mov	r3, r0
 8003a38:	4a8f      	ldr	r2, [pc, #572]	; (8003c78 <main+0xbc0>)
 8003a3a:	6013      	str	r3, [r2, #0]
					fracPart = (int)((roundedValue - intPart) * 100);
 8003a3c:	4b8d      	ldr	r3, [pc, #564]	; (8003c74 <main+0xbbc>)
 8003a3e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003a42:	4b8d      	ldr	r3, [pc, #564]	; (8003c78 <main+0xbc0>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fc fd9c 	bl	8000584 <__aeabi_i2d>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4620      	mov	r0, r4
 8003a52:	4629      	mov	r1, r5
 8003a54:	f7fc fc48 	bl	80002e8 <__aeabi_dsub>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	4619      	mov	r1, r3
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	4b85      	ldr	r3, [pc, #532]	; (8003c7c <main+0xbc4>)
 8003a66:	f7fc fdf7 	bl	8000658 <__aeabi_dmul>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4610      	mov	r0, r2
 8003a70:	4619      	mov	r1, r3
 8003a72:	f7fd f88b 	bl	8000b8c <__aeabi_d2iz>
 8003a76:	4603      	mov	r3, r0
 8003a78:	4a81      	ldr	r2, [pc, #516]	; (8003c80 <main+0xbc8>)
 8003a7a:	6013      	str	r3, [r2, #0]
					snprintf(result, sizeof(result), "Temp: %d.%04d", intPart, abs(fracPart));
 8003a7c:	4b7e      	ldr	r3, [pc, #504]	; (8003c78 <main+0xbc0>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	4b7f      	ldr	r3, [pc, #508]	; (8003c80 <main+0xbc8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bfb8      	it	lt
 8003a88:	425b      	neglt	r3, r3
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	4a7d      	ldr	r2, [pc, #500]	; (8003c84 <main+0xbcc>)
 8003a90:	2132      	movs	r1, #50	; 0x32
 8003a92:	487d      	ldr	r0, [pc, #500]	; (8003c88 <main+0xbd0>)
 8003a94:	f007 fd12 	bl	800b4bc <sniprintf>
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 990);
 8003a98:	4b7c      	ldr	r3, [pc, #496]	; (8003c8c <main+0xbd4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f240 32de 	movw	r2, #990	; 0x3de
 8003aa0:	63da      	str	r2, [r3, #60]	; 0x3c
					HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003aa2:	2108      	movs	r1, #8
 8003aa4:	4879      	ldr	r0, [pc, #484]	; (8003c8c <main+0xbd4>)
 8003aa6:	f005 fb9f 	bl	80091e8 <HAL_TIM_PWM_Start>
					LCD_WriteCommand(HD44780_CLEAR);
 8003aaa:	2001      	movs	r0, #1
 8003aac:	f7ff f866 	bl	8002b7c <LCD_WriteCommand>
					LCD_WriteText(result);
 8003ab0:	4875      	ldr	r0, [pc, #468]	; (8003c88 <main+0xbd0>)
 8003ab2:	f7ff f889 	bl	8002bc8 <LCD_WriteText>
					if(symbol[0] == '*') {
 8003ab6:	4b67      	ldr	r3, [pc, #412]	; (8003c54 <main+0xb9c>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b2a      	cmp	r3, #42	; 0x2a
 8003abc:	d10a      	bne.n	8003ad4 <main+0xa1c>
						act_menu = menuLivingroomTemperature;
 8003abe:	4b66      	ldr	r3, [pc, #408]	; (8003c58 <main+0xba0>)
 8003ac0:	4a66      	ldr	r2, [pc, #408]	; (8003c5c <main+0xba4>)
 8003ac2:	601a      	str	r2, [r3, #0]
						position = 1;
 8003ac4:	4b67      	ldr	r3, [pc, #412]	; (8003c64 <main+0xbac>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	701a      	strb	r2, [r3, #0]
						max_pos = 3;
 8003aca:	4b71      	ldr	r3, [pc, #452]	; (8003c90 <main+0xbd8>)
 8003acc:	2203      	movs	r2, #3
 8003ace:	701a      	strb	r2, [r3, #0]
						break;
 8003ad0:	bf00      	nop
					}
					i++;
				}
				break;
 8003ad2:	e08c      	b.n	8003bee <main+0xb36>
					i++;
 8003ad4:	4b6f      	ldr	r3, [pc, #444]	; (8003c94 <main+0xbdc>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	4a6e      	ldr	r2, [pc, #440]	; (8003c94 <main+0xbdc>)
 8003adc:	6013      	str	r3, [r2, #0]
				while(1) {
 8003ade:	e78a      	b.n	80039f6 <main+0x93e>
			case 2: LCD_WriteCommand(HD44780_CLEAR);
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	f7ff f84b 	bl	8002b7c <LCD_WriteCommand>
					LCD_WriteText("Heat");
 8003ae6:	486c      	ldr	r0, [pc, #432]	; (8003c98 <main+0xbe0>)
 8003ae8:	f7ff f86e 	bl	8002bc8 <LCD_WriteText>
					LCD_WriteTextXY("Turned off",0,1);; break;
 8003aec:	2201      	movs	r2, #1
 8003aee:	2100      	movs	r1, #0
 8003af0:	486a      	ldr	r0, [pc, #424]	; (8003c9c <main+0xbe4>)
 8003af2:	f7ff f898 	bl	8002c26 <LCD_WriteTextXY>
 8003af6:	e07a      	b.n	8003bee <main+0xb36>
			case 3:
				i = 0;
 8003af8:	4b66      	ldr	r3, [pc, #408]	; (8003c94 <main+0xbdc>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
				HAL_Delay(200);
 8003afe:	20c8      	movs	r0, #200	; 0xc8
 8003b00:	f001 fe68 	bl	80057d4 <HAL_Delay>
				memset(buff, 0, sizeof(buff));
 8003b04:	2205      	movs	r2, #5
 8003b06:	2100      	movs	r1, #0
 8003b08:	4865      	ldr	r0, [pc, #404]	; (8003ca0 <main+0xbe8>)
 8003b0a:	f007 fd0b 	bl	800b524 <memset>
				LCD_WriteCommand(HD44780_CLEAR);
 8003b0e:	2001      	movs	r0, #1
 8003b10:	f7ff f834 	bl	8002b7c <LCD_WriteCommand>
				LCD_WriteText("Write Temp");
 8003b14:	4863      	ldr	r0, [pc, #396]	; (8003ca4 <main+0xbec>)
 8003b16:	f7ff f857 	bl	8002bc8 <LCD_WriteText>
				while(1) {
					refreshLCD = true;
 8003b1a:	4b51      	ldr	r3, [pc, #324]	; (8003c60 <main+0xba8>)
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	701a      	strb	r2, [r3, #0]
					symbol[0] = keypad_readkey();
 8003b20:	f7fe fee6 	bl	80028f0 <keypad_readkey>
 8003b24:	4603      	mov	r3, r0
 8003b26:	461a      	mov	r2, r3
 8003b28:	4b4a      	ldr	r3, [pc, #296]	; (8003c54 <main+0xb9c>)
 8003b2a:	701a      	strb	r2, [r3, #0]
					if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 8003b2c:	4b49      	ldr	r3, [pc, #292]	; (8003c54 <main+0xb9c>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b2f      	cmp	r3, #47	; 0x2f
 8003b32:	d922      	bls.n	8003b7a <main+0xac2>
 8003b34:	4b47      	ldr	r3, [pc, #284]	; (8003c54 <main+0xb9c>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b39      	cmp	r3, #57	; 0x39
 8003b3a:	d81e      	bhi.n	8003b7a <main+0xac2>
 8003b3c:	4b55      	ldr	r3, [pc, #340]	; (8003c94 <main+0xbdc>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d81a      	bhi.n	8003b7a <main+0xac2>
						buff[i] = symbol[0];
 8003b44:	4b53      	ldr	r3, [pc, #332]	; (8003c94 <main+0xbdc>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a42      	ldr	r2, [pc, #264]	; (8003c54 <main+0xb9c>)
 8003b4a:	7811      	ldrb	r1, [r2, #0]
 8003b4c:	4a54      	ldr	r2, [pc, #336]	; (8003ca0 <main+0xbe8>)
 8003b4e:	54d1      	strb	r1, [r2, r3]
						i++;
 8003b50:	4b50      	ldr	r3, [pc, #320]	; (8003c94 <main+0xbdc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3301      	adds	r3, #1
 8003b56:	4a4f      	ldr	r2, [pc, #316]	; (8003c94 <main+0xbdc>)
 8003b58:	6013      	str	r3, [r2, #0]
						buff[i] = '\0';
 8003b5a:	4b4e      	ldr	r3, [pc, #312]	; (8003c94 <main+0xbdc>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a50      	ldr	r2, [pc, #320]	; (8003ca0 <main+0xbe8>)
 8003b60:	2100      	movs	r1, #0
 8003b62:	54d1      	strb	r1, [r2, r3]
						LCD_WriteCommand(HD44780_CLEAR);
 8003b64:	2001      	movs	r0, #1
 8003b66:	f7ff f809 	bl	8002b7c <LCD_WriteCommand>
						LCD_WriteText("Temp: ");
 8003b6a:	484f      	ldr	r0, [pc, #316]	; (8003ca8 <main+0xbf0>)
 8003b6c:	f7ff f82c 	bl	8002bc8 <LCD_WriteText>
						LCD_WriteTextXY(buff, 0, 1);
 8003b70:	2201      	movs	r2, #1
 8003b72:	2100      	movs	r1, #0
 8003b74:	484a      	ldr	r0, [pc, #296]	; (8003ca0 <main+0xbe8>)
 8003b76:	f7ff f856 	bl	8002c26 <LCD_WriteTextXY>
					}
					HAL_Delay(200);
 8003b7a:	20c8      	movs	r0, #200	; 0xc8
 8003b7c:	f001 fe2a 	bl	80057d4 <HAL_Delay>
					symbol[0] = keypad_readkey();
 8003b80:	f7fe feb6 	bl	80028f0 <keypad_readkey>
 8003b84:	4603      	mov	r3, r0
 8003b86:	461a      	mov	r2, r3
 8003b88:	4b32      	ldr	r3, [pc, #200]	; (8003c54 <main+0xb9c>)
 8003b8a:	701a      	strb	r2, [r3, #0]
					if(symbol[0] == '*') {
 8003b8c:	4b31      	ldr	r3, [pc, #196]	; (8003c54 <main+0xb9c>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b2a      	cmp	r3, #42	; 0x2a
 8003b92:	d11e      	bne.n	8003bd2 <main+0xb1a>
						tempLivingroom = atoi(buff)*10;
 8003b94:	4842      	ldr	r0, [pc, #264]	; (8003ca0 <main+0xbe8>)
 8003b96:	f007 fc01 	bl	800b39c <atoi>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4b41      	ldr	r3, [pc, #260]	; (8003cac <main+0xbf4>)
 8003ba8:	601a      	str	r2, [r3, #0]
						if(tempLivingroom >= 1000) {
 8003baa:	4b40      	ldr	r3, [pc, #256]	; (8003cac <main+0xbf4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bb2:	db03      	blt.n	8003bbc <main+0xb04>
							tempLivingroom = 999;
 8003bb4:	4b3d      	ldr	r3, [pc, #244]	; (8003cac <main+0xbf4>)
 8003bb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003bba:	601a      	str	r2, [r3, #0]
						}
						act_menu = menuLivingroomTemperature;
 8003bbc:	4b26      	ldr	r3, [pc, #152]	; (8003c58 <main+0xba0>)
 8003bbe:	4a27      	ldr	r2, [pc, #156]	; (8003c5c <main+0xba4>)
 8003bc0:	601a      	str	r2, [r3, #0]
						position = 1;
 8003bc2:	4b28      	ldr	r3, [pc, #160]	; (8003c64 <main+0xbac>)
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	701a      	strb	r2, [r3, #0]
						max_pos = 3;
 8003bc8:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <main+0xbd8>)
 8003bca:	2203      	movs	r2, #3
 8003bcc:	701a      	strb	r2, [r3, #0]
						break;
 8003bce:	bf00      	nop
					}
					HAL_Delay(100);
				}
			break;
 8003bd0:	e00d      	b.n	8003bee <main+0xb36>
					HAL_Delay(100);
 8003bd2:	2064      	movs	r0, #100	; 0x64
 8003bd4:	f001 fdfe 	bl	80057d4 <HAL_Delay>
					refreshLCD = true;
 8003bd8:	e79f      	b.n	8003b1a <main+0xa62>
			default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8003bda:	4b1f      	ldr	r3, [pc, #124]	; (8003c58 <main+0xba0>)
 8003bdc:	4a34      	ldr	r2, [pc, #208]	; (8003cb0 <main+0xbf8>)
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	4b20      	ldr	r3, [pc, #128]	; (8003c64 <main+0xbac>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	701a      	strb	r2, [r3, #0]
 8003be6:	4b2a      	ldr	r3, [pc, #168]	; (8003c90 <main+0xbd8>)
 8003be8:	2202      	movs	r2, #2
 8003bea:	701a      	strb	r2, [r3, #0]
 8003bec:	bf00      	nop
		switch (position){
 8003bee:	e25d      	b.n	80040ac <main+0xff4>
				  }
			}
	else if(symbol[0] == '*' && act_menu == menuLivingroomShutter) {
 8003bf0:	4b18      	ldr	r3, [pc, #96]	; (8003c54 <main+0xb9c>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8003bf6:	f040 8080 	bne.w	8003cfa <main+0xc42>
 8003bfa:	4b17      	ldr	r3, [pc, #92]	; (8003c58 <main+0xba0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a2d      	ldr	r2, [pc, #180]	; (8003cb4 <main+0xbfc>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d17a      	bne.n	8003cfa <main+0xc42>
			refreshLCD = true;
 8003c04:	4b16      	ldr	r3, [pc, #88]	; (8003c60 <main+0xba8>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003c0a:	2104      	movs	r1, #4
 8003c0c:	482a      	ldr	r0, [pc, #168]	; (8003cb8 <main+0xc00>)
 8003c0e:	f005 faeb 	bl	80091e8 <HAL_TIM_PWM_Start>
			switch(position) {
 8003c12:	4b14      	ldr	r3, [pc, #80]	; (8003c64 <main+0xbac>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d002      	beq.n	8003c20 <main+0xb68>
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d054      	beq.n	8003cc8 <main+0xc10>
 8003c1e:	e245      	b.n	80040ac <main+0xff4>
				case 1:
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 500);
 8003c20:	4b25      	ldr	r3, [pc, #148]	; (8003cb8 <main+0xc00>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003c28:	639a      	str	r2, [r3, #56]	; 0x38
					HAL_Delay(500);
 8003c2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c2e:	f001 fdd1 	bl	80057d4 <HAL_Delay>
				   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 0);
 8003c32:	4b21      	ldr	r3, [pc, #132]	; (8003cb8 <main+0xc00>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2200      	movs	r2, #0
 8003c38:	639a      	str	r2, [r3, #56]	; 0x38
				   livingroomShutter = true;
 8003c3a:	4b20      	ldr	r3, [pc, #128]	; (8003cbc <main+0xc04>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	701a      	strb	r2, [r3, #0]
				   LCD_WriteText("Shutter");
 8003c40:	481f      	ldr	r0, [pc, #124]	; (8003cc0 <main+0xc08>)
 8003c42:	f7fe ffc1 	bl	8002bc8 <LCD_WriteText>
				   LCD_WriteTextXY("is lowering",0,1);
 8003c46:	2201      	movs	r2, #1
 8003c48:	2100      	movs	r1, #0
 8003c4a:	481e      	ldr	r0, [pc, #120]	; (8003cc4 <main+0xc0c>)
 8003c4c:	f7fe ffeb 	bl	8002c26 <LCD_WriteTextXY>
				   break;
 8003c50:	bf00      	nop
			switch(position) {
 8003c52:	e22b      	b.n	80040ac <main+0xff4>
 8003c54:	20000278 	.word	0x20000278
 8003c58:	20000128 	.word	0x20000128
 8003c5c:	200000b8 	.word	0x200000b8
 8003c60:	200002dd 	.word	0x200002dd
 8003c64:	20000054 	.word	0x20000054
 8003c68:	20000300 	.word	0x20000300
 8003c6c:	20000308 	.word	0x20000308
 8003c70:	20000018 	.word	0x20000018
 8003c74:	20000310 	.word	0x20000310
 8003c78:	200002f4 	.word	0x200002f4
 8003c7c:	40590000 	.word	0x40590000
 8003c80:	200002f8 	.word	0x200002f8
 8003c84:	0800c174 	.word	0x0800c174
 8003c88:	20000284 	.word	0x20000284
 8003c8c:	200004a4 	.word	0x200004a4
 8003c90:	20000055 	.word	0x20000055
 8003c94:	200002e8 	.word	0x200002e8
 8003c98:	0800c184 	.word	0x0800c184
 8003c9c:	0800c18c 	.word	0x0800c18c
 8003ca0:	2000027c 	.word	0x2000027c
 8003ca4:	0800c198 	.word	0x0800c198
 8003ca8:	0800c1a4 	.word	0x0800c1a4
 8003cac:	200002ec 	.word	0x200002ec
 8003cb0:	20000068 	.word	0x20000068
 8003cb4:	200000c8 	.word	0x200000c8
 8003cb8:	200003c0 	.word	0x200003c0
 8003cbc:	200002e5 	.word	0x200002e5
 8003cc0:	0800c158 	.word	0x0800c158
 8003cc4:	0800c160 	.word	0x0800c160
				case 2:
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 2000);
 8003cc8:	4b99      	ldr	r3, [pc, #612]	; (8003f30 <main+0xe78>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38
					HAL_Delay(500);
 8003cd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003cd6:	f001 fd7d 	bl	80057d4 <HAL_Delay>
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 0);
 8003cda:	4b95      	ldr	r3, [pc, #596]	; (8003f30 <main+0xe78>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	639a      	str	r2, [r3, #56]	; 0x38
					livingroomShutter = false;
 8003ce2:	4b94      	ldr	r3, [pc, #592]	; (8003f34 <main+0xe7c>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	701a      	strb	r2, [r3, #0]
					LCD_WriteText("Shutter");
 8003ce8:	4893      	ldr	r0, [pc, #588]	; (8003f38 <main+0xe80>)
 8003cea:	f7fe ff6d 	bl	8002bc8 <LCD_WriteText>
					LCD_WriteTextXY("go up",0,1);
 8003cee:	2201      	movs	r2, #1
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4892      	ldr	r0, [pc, #584]	; (8003f3c <main+0xe84>)
 8003cf4:	f7fe ff97 	bl	8002c26 <LCD_WriteTextXY>
			switch(position) {
 8003cf8:	e1d8      	b.n	80040ac <main+0xff4>
			}
	}
	else if(symbol[0] == '*' && act_menu == menuGarage){
 8003cfa:	4b91      	ldr	r3, [pc, #580]	; (8003f40 <main+0xe88>)
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8003d00:	d13b      	bne.n	8003d7a <main+0xcc2>
 8003d02:	4b90      	ldr	r3, [pc, #576]	; (8003f44 <main+0xe8c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a90      	ldr	r2, [pc, #576]	; (8003f48 <main+0xe90>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d136      	bne.n	8003d7a <main+0xcc2>
 		 		 	 		refreshLCD = true;
 8003d0c:	4b8f      	ldr	r3, [pc, #572]	; (8003f4c <main+0xe94>)
 8003d0e:	2201      	movs	r2, #1
 8003d10:	701a      	strb	r2, [r3, #0]
 		 		 	 	  switch (position){
 8003d12:	4b8f      	ldr	r3, [pc, #572]	; (8003f50 <main+0xe98>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d01a      	beq.n	8003d50 <main+0xc98>
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	dc22      	bgt.n	8003d64 <main+0xcac>
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d002      	beq.n	8003d28 <main+0xc70>
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d00a      	beq.n	8003d3c <main+0xc84>
 8003d26:	e01d      	b.n	8003d64 <main+0xcac>
 		 		 	 	  	  	case 1: act_menu = menuGarageLighting, position = 1, max_pos = 3; break;
 8003d28:	4b86      	ldr	r3, [pc, #536]	; (8003f44 <main+0xe8c>)
 8003d2a:	4a8a      	ldr	r2, [pc, #552]	; (8003f54 <main+0xe9c>)
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	4b88      	ldr	r3, [pc, #544]	; (8003f50 <main+0xe98>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	701a      	strb	r2, [r3, #0]
 8003d34:	4b88      	ldr	r3, [pc, #544]	; (8003f58 <main+0xea0>)
 8003d36:	2203      	movs	r2, #3
 8003d38:	701a      	strb	r2, [r3, #0]
 8003d3a:	e01d      	b.n	8003d78 <main+0xcc0>
 		 		 	 	  	  	case 2: act_menu = menuGarageShutter, position = 1, max_pos = 2; break;
 8003d3c:	4b81      	ldr	r3, [pc, #516]	; (8003f44 <main+0xe8c>)
 8003d3e:	4a87      	ldr	r2, [pc, #540]	; (8003f5c <main+0xea4>)
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	4b83      	ldr	r3, [pc, #524]	; (8003f50 <main+0xe98>)
 8003d44:	2201      	movs	r2, #1
 8003d46:	701a      	strb	r2, [r3, #0]
 8003d48:	4b83      	ldr	r3, [pc, #524]	; (8003f58 <main+0xea0>)
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	e013      	b.n	8003d78 <main+0xcc0>
 		 		 	 	  	  	case 3: act_menu = menuGarageGate, position = 1, max_pos = 2; break;
 8003d50:	4b7c      	ldr	r3, [pc, #496]	; (8003f44 <main+0xe8c>)
 8003d52:	4a83      	ldr	r2, [pc, #524]	; (8003f60 <main+0xea8>)
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	4b7e      	ldr	r3, [pc, #504]	; (8003f50 <main+0xe98>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	4b7e      	ldr	r3, [pc, #504]	; (8003f58 <main+0xea0>)
 8003d5e:	2202      	movs	r2, #2
 8003d60:	701a      	strb	r2, [r3, #0]
 8003d62:	e009      	b.n	8003d78 <main+0xcc0>
 		 		 	 		default: act_menu = menuGarage, position = 1, max_pos = 1; break;
 8003d64:	4b77      	ldr	r3, [pc, #476]	; (8003f44 <main+0xe8c>)
 8003d66:	4a78      	ldr	r2, [pc, #480]	; (8003f48 <main+0xe90>)
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	4b79      	ldr	r3, [pc, #484]	; (8003f50 <main+0xe98>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	701a      	strb	r2, [r3, #0]
 8003d70:	4b79      	ldr	r3, [pc, #484]	; (8003f58 <main+0xea0>)
 8003d72:	2201      	movs	r2, #1
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	bf00      	nop
 		 		 	 	  switch (position){
 8003d78:	e198      	b.n	80040ac <main+0xff4>
 		 		 	 	  	  }
 		 		 	 	}
 			else if(symbol[0] == '*' && act_menu == menuGarageLighting){
 8003d7a:	4b71      	ldr	r3, [pc, #452]	; (8003f40 <main+0xe88>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d80:	f040 80be 	bne.w	8003f00 <main+0xe48>
 8003d84:	4b6f      	ldr	r3, [pc, #444]	; (8003f44 <main+0xe8c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a72      	ldr	r2, [pc, #456]	; (8003f54 <main+0xe9c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	f040 80b8 	bne.w	8003f00 <main+0xe48>
 		 	 		refreshLCD = true;
 8003d90:	4b6e      	ldr	r3, [pc, #440]	; (8003f4c <main+0xe94>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 8003d96:	4b6e      	ldr	r3, [pc, #440]	; (8003f50 <main+0xe98>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d02c      	beq.n	8003df8 <main+0xd40>
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	f300 80a3 	bgt.w	8003eea <main+0xe32>
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d002      	beq.n	8003dae <main+0xcf6>
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d015      	beq.n	8003dd8 <main+0xd20>
 8003dac:	e09d      	b.n	8003eea <main+0xe32>
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 8003dae:	2001      	movs	r0, #1
 8003db0:	f7fe fee4 	bl	8002b7c <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 8003db4:	486b      	ldr	r0, [pc, #428]	; (8003f64 <main+0xeac>)
 8003db6:	f7fe ff07 	bl	8002bc8 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 8003dba:	2201      	movs	r2, #1
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	486a      	ldr	r0, [pc, #424]	; (8003f68 <main+0xeb0>)
 8003dc0:	f7fe ff31 	bl	8002c26 <LCD_WriteTextXY>
 		 	 				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 8003dc4:	4b69      	ldr	r3, [pc, #420]	; (8003f6c <main+0xeb4>)
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	4b69      	ldr	r3, [pc, #420]	; (8003f70 <main+0xeb8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	635a      	str	r2, [r3, #52]	; 0x34
 		 	 				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003dce:	2100      	movs	r1, #0
 8003dd0:	4867      	ldr	r0, [pc, #412]	; (8003f70 <main+0xeb8>)
 8003dd2:	f005 fa09 	bl	80091e8 <HAL_TIM_PWM_Start>
 		 	 				break;
 8003dd6:	e092      	b.n	8003efe <main+0xe46>

 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 8003dd8:	2001      	movs	r0, #1
 8003dda:	f7fe fecf 	bl	8002b7c <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 8003dde:	4861      	ldr	r0, [pc, #388]	; (8003f64 <main+0xeac>)
 8003de0:	f7fe fef2 	bl	8002bc8 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 8003de4:	2201      	movs	r2, #1
 8003de6:	2100      	movs	r1, #0
 8003de8:	4862      	ldr	r0, [pc, #392]	; (8003f74 <main+0xebc>)
 8003dea:	f7fe ff1c 	bl	8002c26 <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8003dee:	2100      	movs	r1, #0
 8003df0:	485f      	ldr	r0, [pc, #380]	; (8003f70 <main+0xeb8>)
 8003df2:	f005 faf3 	bl	80093dc <HAL_TIM_PWM_Stop>
 				 	 		break;
 8003df6:	e082      	b.n	8003efe <main+0xe46>

 		 	 		case 3:
							i = 0;
 8003df8:	4b5f      	ldr	r3, [pc, #380]	; (8003f78 <main+0xec0>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]
							refreshLCD = true;
 8003dfe:	4b53      	ldr	r3, [pc, #332]	; (8003f4c <main+0xe94>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	701a      	strb	r2, [r3, #0]
							HAL_Delay(200);
 8003e04:	20c8      	movs	r0, #200	; 0xc8
 8003e06:	f001 fce5 	bl	80057d4 <HAL_Delay>
							memset(buff, 0, sizeof(buff));
 8003e0a:	2205      	movs	r2, #5
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	485b      	ldr	r0, [pc, #364]	; (8003f7c <main+0xec4>)
 8003e10:	f007 fb88 	bl	800b524 <memset>
							LCD_WriteCommand(HD44780_CLEAR);
 8003e14:	2001      	movs	r0, #1
 8003e16:	f7fe feb1 	bl	8002b7c <LCD_WriteCommand>
							LCD_WriteText("Write Bright");
 8003e1a:	4859      	ldr	r0, [pc, #356]	; (8003f80 <main+0xec8>)
 8003e1c:	f7fe fed4 	bl	8002bc8 <LCD_WriteText>
							while(1) {
								refreshLCD = true;
 8003e20:	4b4a      	ldr	r3, [pc, #296]	; (8003f4c <main+0xe94>)
 8003e22:	2201      	movs	r2, #1
 8003e24:	701a      	strb	r2, [r3, #0]
								symbol[0] = keypad_readkey();
 8003e26:	f7fe fd63 	bl	80028f0 <keypad_readkey>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4b44      	ldr	r3, [pc, #272]	; (8003f40 <main+0xe88>)
 8003e30:	701a      	strb	r2, [r3, #0]
								if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 8003e32:	4b43      	ldr	r3, [pc, #268]	; (8003f40 <main+0xe88>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b2f      	cmp	r3, #47	; 0x2f
 8003e38:	d922      	bls.n	8003e80 <main+0xdc8>
 8003e3a:	4b41      	ldr	r3, [pc, #260]	; (8003f40 <main+0xe88>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	2b39      	cmp	r3, #57	; 0x39
 8003e40:	d81e      	bhi.n	8003e80 <main+0xdc8>
 8003e42:	4b4d      	ldr	r3, [pc, #308]	; (8003f78 <main+0xec0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d81a      	bhi.n	8003e80 <main+0xdc8>
									buff[i] = symbol[0];
 8003e4a:	4b4b      	ldr	r3, [pc, #300]	; (8003f78 <main+0xec0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a3c      	ldr	r2, [pc, #240]	; (8003f40 <main+0xe88>)
 8003e50:	7811      	ldrb	r1, [r2, #0]
 8003e52:	4a4a      	ldr	r2, [pc, #296]	; (8003f7c <main+0xec4>)
 8003e54:	54d1      	strb	r1, [r2, r3]
									i++;
 8003e56:	4b48      	ldr	r3, [pc, #288]	; (8003f78 <main+0xec0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	4a46      	ldr	r2, [pc, #280]	; (8003f78 <main+0xec0>)
 8003e5e:	6013      	str	r3, [r2, #0]
									buff[i] = '\0';
 8003e60:	4b45      	ldr	r3, [pc, #276]	; (8003f78 <main+0xec0>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a45      	ldr	r2, [pc, #276]	; (8003f7c <main+0xec4>)
 8003e66:	2100      	movs	r1, #0
 8003e68:	54d1      	strb	r1, [r2, r3]
									LCD_WriteCommand(HD44780_CLEAR);
 8003e6a:	2001      	movs	r0, #1
 8003e6c:	f7fe fe86 	bl	8002b7c <LCD_WriteCommand>
									LCD_WriteText("Brightness: ");
 8003e70:	4844      	ldr	r0, [pc, #272]	; (8003f84 <main+0xecc>)
 8003e72:	f7fe fea9 	bl	8002bc8 <LCD_WriteText>
									LCD_WriteTextXY(buff, 0, 1);
 8003e76:	2201      	movs	r2, #1
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4840      	ldr	r0, [pc, #256]	; (8003f7c <main+0xec4>)
 8003e7c:	f7fe fed3 	bl	8002c26 <LCD_WriteTextXY>
								}
								HAL_Delay(200);
 8003e80:	20c8      	movs	r0, #200	; 0xc8
 8003e82:	f001 fca7 	bl	80057d4 <HAL_Delay>
								symbol[0] = keypad_readkey();
 8003e86:	f7fe fd33 	bl	80028f0 <keypad_readkey>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4b2c      	ldr	r3, [pc, #176]	; (8003f40 <main+0xe88>)
 8003e90:	701a      	strb	r2, [r3, #0]
								if(symbol[0] == '*') {
 8003e92:	4b2b      	ldr	r3, [pc, #172]	; (8003f40 <main+0xe88>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b2a      	cmp	r3, #42	; 0x2a
 8003e98:	d123      	bne.n	8003ee2 <main+0xe2a>
									brightnessGarage = atoi(buff)*10;
 8003e9a:	4838      	ldr	r0, [pc, #224]	; (8003f7c <main+0xec4>)
 8003e9c:	f007 fa7e 	bl	800b39c <atoi>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	461a      	mov	r2, r3
 8003eac:	4b2f      	ldr	r3, [pc, #188]	; (8003f6c <main+0xeb4>)
 8003eae:	601a      	str	r2, [r3, #0]
									if(brightnessGarage >= 1000) {
 8003eb0:	4b2e      	ldr	r3, [pc, #184]	; (8003f6c <main+0xeb4>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003eb8:	db03      	blt.n	8003ec2 <main+0xe0a>
										brightnessGarage = 999;
 8003eba:	4b2c      	ldr	r3, [pc, #176]	; (8003f6c <main+0xeb4>)
 8003ebc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ec0:	601a      	str	r2, [r3, #0]
									}
								   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 8003ec2:	4b2a      	ldr	r3, [pc, #168]	; (8003f6c <main+0xeb4>)
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	4b2a      	ldr	r3, [pc, #168]	; (8003f70 <main+0xeb8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	635a      	str	r2, [r3, #52]	; 0x34
									act_menu = menuGarageLighting;
 8003ecc:	4b1d      	ldr	r3, [pc, #116]	; (8003f44 <main+0xe8c>)
 8003ece:	4a21      	ldr	r2, [pc, #132]	; (8003f54 <main+0xe9c>)
 8003ed0:	601a      	str	r2, [r3, #0]
									position = 1;
 8003ed2:	4b1f      	ldr	r3, [pc, #124]	; (8003f50 <main+0xe98>)
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	701a      	strb	r2, [r3, #0]
									max_pos = 3;
 8003ed8:	4b1f      	ldr	r3, [pc, #124]	; (8003f58 <main+0xea0>)
 8003eda:	2203      	movs	r2, #3
 8003edc:	701a      	strb	r2, [r3, #0]
									break;
 8003ede:	bf00      	nop
								}
								HAL_Delay(100);
							}
							break;
 8003ee0:	e00d      	b.n	8003efe <main+0xe46>
								HAL_Delay(100);
 8003ee2:	2064      	movs	r0, #100	; 0x64
 8003ee4:	f001 fc76 	bl	80057d4 <HAL_Delay>
								refreshLCD = true;
 8003ee8:	e79a      	b.n	8003e20 <main+0xd68>
 		 	 		default: act_menu = menuGarage, position = 1, max_pos = 2; break;
 8003eea:	4b16      	ldr	r3, [pc, #88]	; (8003f44 <main+0xe8c>)
 8003eec:	4a16      	ldr	r2, [pc, #88]	; (8003f48 <main+0xe90>)
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <main+0xe98>)
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	4b18      	ldr	r3, [pc, #96]	; (8003f58 <main+0xea0>)
 8003ef8:	2202      	movs	r2, #2
 8003efa:	701a      	strb	r2, [r3, #0]
 8003efc:	bf00      	nop
 		 	 	  switch (position){
 8003efe:	e0d5      	b.n	80040ac <main+0xff4>
 		 	 	  }
			}
 			else if(symbol[0] == '*' && act_menu == menuGarageShutter) {
 8003f00:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <main+0xe88>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b2a      	cmp	r3, #42	; 0x2a
 8003f06:	d172      	bne.n	8003fee <main+0xf36>
 8003f08:	4b0e      	ldr	r3, [pc, #56]	; (8003f44 <main+0xe8c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a13      	ldr	r2, [pc, #76]	; (8003f5c <main+0xea4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d16d      	bne.n	8003fee <main+0xf36>
 						refreshLCD = true;
 8003f12:	4b0e      	ldr	r3, [pc, #56]	; (8003f4c <main+0xe94>)
 8003f14:	2201      	movs	r2, #1
 8003f16:	701a      	strb	r2, [r3, #0]
 						HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003f18:	2108      	movs	r1, #8
 8003f1a:	4805      	ldr	r0, [pc, #20]	; (8003f30 <main+0xe78>)
 8003f1c:	f005 f964 	bl	80091e8 <HAL_TIM_PWM_Start>
 						switch(position) {
 8003f20:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <main+0xe98>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d02f      	beq.n	8003f88 <main+0xed0>
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d047      	beq.n	8003fbc <main+0xf04>
 8003f2c:	e0be      	b.n	80040ac <main+0xff4>
 8003f2e:	bf00      	nop
 8003f30:	200003c0 	.word	0x200003c0
 8003f34:	200002e5 	.word	0x200002e5
 8003f38:	0800c158 	.word	0x0800c158
 8003f3c:	0800c16c 	.word	0x0800c16c
 8003f40:	20000278 	.word	0x20000278
 8003f44:	20000128 	.word	0x20000128
 8003f48:	200000d8 	.word	0x200000d8
 8003f4c:	200002dd 	.word	0x200002dd
 8003f50:	20000054 	.word	0x20000054
 8003f54:	200000e8 	.word	0x200000e8
 8003f58:	20000055 	.word	0x20000055
 8003f5c:	200000f8 	.word	0x200000f8
 8003f60:	20000108 	.word	0x20000108
 8003f64:	0800c130 	.word	0x0800c130
 8003f68:	0800c118 	.word	0x0800c118
 8003f6c:	20000134 	.word	0x20000134
 8003f70:	2000040c 	.word	0x2000040c
 8003f74:	0800c124 	.word	0x0800c124
 8003f78:	200002e8 	.word	0x200002e8
 8003f7c:	2000027c 	.word	0x2000027c
 8003f80:	0800c138 	.word	0x0800c138
 8003f84:	0800c148 	.word	0x0800c148
 							case 1:
 								__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 500);
 8003f88:	4b31      	ldr	r3, [pc, #196]	; (8004050 <main+0xf98>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003f90:	63da      	str	r2, [r3, #60]	; 0x3c
 								HAL_Delay(500);
 8003f92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f96:	f001 fc1d 	bl	80057d4 <HAL_Delay>
 							   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 0);
 8003f9a:	4b2d      	ldr	r3, [pc, #180]	; (8004050 <main+0xf98>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	63da      	str	r2, [r3, #60]	; 0x3c
 							  garageShutter= true;
 8003fa2:	4b2c      	ldr	r3, [pc, #176]	; (8004054 <main+0xf9c>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	701a      	strb	r2, [r3, #0]
 							   LCD_WriteText("Shutter");
 8003fa8:	482b      	ldr	r0, [pc, #172]	; (8004058 <main+0xfa0>)
 8003faa:	f7fe fe0d 	bl	8002bc8 <LCD_WriteText>
 							   LCD_WriteTextXY("is lowering",0,1);
 8003fae:	2201      	movs	r2, #1
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	482a      	ldr	r0, [pc, #168]	; (800405c <main+0xfa4>)
 8003fb4:	f7fe fe37 	bl	8002c26 <LCD_WriteTextXY>
 							   break;
 8003fb8:	bf00      	nop
 						switch(position) {
 8003fba:	e077      	b.n	80040ac <main+0xff4>
 							case 2:
 								__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 2000);
 8003fbc:	4b24      	ldr	r3, [pc, #144]	; (8004050 <main+0xf98>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003fc4:	63da      	str	r2, [r3, #60]	; 0x3c
 								HAL_Delay(500);
 8003fc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003fca:	f001 fc03 	bl	80057d4 <HAL_Delay>
 								__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 0);
 8003fce:	4b20      	ldr	r3, [pc, #128]	; (8004050 <main+0xf98>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	63da      	str	r2, [r3, #60]	; 0x3c
 								garageShutter = false;
 8003fd6:	4b1f      	ldr	r3, [pc, #124]	; (8004054 <main+0xf9c>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	701a      	strb	r2, [r3, #0]
 								LCD_WriteText("Shutter");
 8003fdc:	481e      	ldr	r0, [pc, #120]	; (8004058 <main+0xfa0>)
 8003fde:	f7fe fdf3 	bl	8002bc8 <LCD_WriteText>
 								LCD_WriteTextXY("go up",0,1);
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	481e      	ldr	r0, [pc, #120]	; (8004060 <main+0xfa8>)
 8003fe8:	f7fe fe1d 	bl	8002c26 <LCD_WriteTextXY>
 						switch(position) {
 8003fec:	e05e      	b.n	80040ac <main+0xff4>
 						}
 				}
 			else if(symbol[0] == '*' && act_menu == menuGarageGate) {
 8003fee:	4b1d      	ldr	r3, [pc, #116]	; (8004064 <main+0xfac>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ff4:	d15a      	bne.n	80040ac <main+0xff4>
 8003ff6:	4b1c      	ldr	r3, [pc, #112]	; (8004068 <main+0xfb0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a1c      	ldr	r2, [pc, #112]	; (800406c <main+0xfb4>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d155      	bne.n	80040ac <main+0xff4>
 			 						refreshLCD = true;
 8004000:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <main+0xfb8>)
 8004002:	2201      	movs	r2, #1
 8004004:	701a      	strb	r2, [r3, #0]
 			 						HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8004006:	2108      	movs	r1, #8
 8004008:	4811      	ldr	r0, [pc, #68]	; (8004050 <main+0xf98>)
 800400a:	f005 f8ed 	bl	80091e8 <HAL_TIM_PWM_Start>
 			 						switch(position) {
 800400e:	4b19      	ldr	r3, [pc, #100]	; (8004074 <main+0xfbc>)
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d002      	beq.n	800401c <main+0xf64>
 8004016:	2b02      	cmp	r3, #2
 8004018:	d030      	beq.n	800407c <main+0xfc4>
 800401a:	e047      	b.n	80040ac <main+0xff4>
 			 							case 1:
 			 								__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 500);
 800401c:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <main+0xf98>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004024:	63da      	str	r2, [r3, #60]	; 0x3c
 			 								HAL_Delay(500);
 8004026:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800402a:	f001 fbd3 	bl	80057d4 <HAL_Delay>
 			 							   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 0);
 800402e:	4b08      	ldr	r3, [pc, #32]	; (8004050 <main+0xf98>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2200      	movs	r2, #0
 8004034:	63da      	str	r2, [r3, #60]	; 0x3c
 			 							  garageShutter= true;
 8004036:	4b07      	ldr	r3, [pc, #28]	; (8004054 <main+0xf9c>)
 8004038:	2201      	movs	r2, #1
 800403a:	701a      	strb	r2, [r3, #0]
 			 							   LCD_WriteText("Gate");
 800403c:	480e      	ldr	r0, [pc, #56]	; (8004078 <main+0xfc0>)
 800403e:	f7fe fdc3 	bl	8002bc8 <LCD_WriteText>
 			 							   LCD_WriteTextXY("is lowering",0,1);
 8004042:	2201      	movs	r2, #1
 8004044:	2100      	movs	r1, #0
 8004046:	4805      	ldr	r0, [pc, #20]	; (800405c <main+0xfa4>)
 8004048:	f7fe fded 	bl	8002c26 <LCD_WriteTextXY>
 			 							   break;
 800404c:	e02e      	b.n	80040ac <main+0xff4>
 800404e:	bf00      	nop
 8004050:	200003c0 	.word	0x200003c0
 8004054:	200002e6 	.word	0x200002e6
 8004058:	0800c158 	.word	0x0800c158
 800405c:	0800c160 	.word	0x0800c160
 8004060:	0800c16c 	.word	0x0800c16c
 8004064:	20000278 	.word	0x20000278
 8004068:	20000128 	.word	0x20000128
 800406c:	20000108 	.word	0x20000108
 8004070:	200002dd 	.word	0x200002dd
 8004074:	20000054 	.word	0x20000054
 8004078:	0800c1ac 	.word	0x0800c1ac
 			 							case 2:
 			 								__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 2000);
 800407c:	4bc3      	ldr	r3, [pc, #780]	; (800438c <main+0x12d4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004084:	63da      	str	r2, [r3, #60]	; 0x3c
 			 								HAL_Delay(500);
 8004086:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800408a:	f001 fba3 	bl	80057d4 <HAL_Delay>
 			 								__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 0);
 800408e:	4bbf      	ldr	r3, [pc, #764]	; (800438c <main+0x12d4>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2200      	movs	r2, #0
 8004094:	63da      	str	r2, [r3, #60]	; 0x3c
 			 								garageShutter = false;
 8004096:	4bbe      	ldr	r3, [pc, #760]	; (8004390 <main+0x12d8>)
 8004098:	2200      	movs	r2, #0
 800409a:	701a      	strb	r2, [r3, #0]
 			 								LCD_WriteText("Gate");
 800409c:	48bd      	ldr	r0, [pc, #756]	; (8004394 <main+0x12dc>)
 800409e:	f7fe fd93 	bl	8002bc8 <LCD_WriteText>
 			 								LCD_WriteTextXY("go up",0,1);
 80040a2:	2201      	movs	r2, #1
 80040a4:	2100      	movs	r1, #0
 80040a6:	48bc      	ldr	r0, [pc, #752]	; (8004398 <main+0x12e0>)
 80040a8:	f7fe fdbd 	bl	8002c26 <LCD_WriteTextXY>
 			 						}
 			 				}

 	if (symbol[0] == '#')
 80040ac:	4bbb      	ldr	r3, [pc, #748]	; (800439c <main+0x12e4>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b23      	cmp	r3, #35	; 0x23
 80040b2:	d10b      	bne.n	80040cc <main+0x1014>
 	{
 		refreshLCD = true;
 80040b4:	4bba      	ldr	r3, [pc, #744]	; (80043a0 <main+0x12e8>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	701a      	strb	r2, [r3, #0]
 		act_menu = mainmenu;
 80040ba:	4bba      	ldr	r3, [pc, #744]	; (80043a4 <main+0x12ec>)
 80040bc:	4aba      	ldr	r2, [pc, #744]	; (80043a8 <main+0x12f0>)
 80040be:	601a      	str	r2, [r3, #0]
 		position = 1;
 80040c0:	4bba      	ldr	r3, [pc, #744]	; (80043ac <main+0x12f4>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	701a      	strb	r2, [r3, #0]
 		max_pos = 4;
 80040c6:	4bba      	ldr	r3, [pc, #744]	; (80043b0 <main+0x12f8>)
 80040c8:	2204      	movs	r2, #4
 80040ca:	701a      	strb	r2, [r3, #0]
 	}

 	HAL_Delay(200);
 80040cc:	20c8      	movs	r0, #200	; 0xc8
 80040ce:	f001 fb81 	bl	80057d4 <HAL_Delay>
 	///////////////SYSTEM ZASILANIA///////////////////////////////////////////////////
 	vbus = INA219_ReadBusVoltage(&ina219);
 80040d2:	48b8      	ldr	r0, [pc, #736]	; (80043b4 <main+0x12fc>)
 80040d4:	f7fc ffb6 	bl	8001044 <INA219_ReadBusVoltage>
 80040d8:	4603      	mov	r3, r0
 80040da:	461a      	mov	r2, r3
 80040dc:	4bb6      	ldr	r3, [pc, #728]	; (80043b8 <main+0x1300>)
 80040de:	801a      	strh	r2, [r3, #0]
 		 	   vshunt = INA219_ReadShuntVolage(&ina219);
 80040e0:	48b4      	ldr	r0, [pc, #720]	; (80043b4 <main+0x12fc>)
 80040e2:	f7fc ffed 	bl	80010c0 <INA219_ReadShuntVolage>
 80040e6:	4603      	mov	r3, r0
 80040e8:	461a      	mov	r2, r3
 80040ea:	4bb4      	ldr	r3, [pc, #720]	; (80043bc <main+0x1304>)
 80040ec:	801a      	strh	r2, [r3, #0]
 		 	   current = INA219_ReadCurrent(&ina219);
 80040ee:	48b1      	ldr	r0, [pc, #708]	; (80043b4 <main+0x12fc>)
 80040f0:	f7fc ffcc 	bl	800108c <INA219_ReadCurrent>
 80040f4:	4603      	mov	r3, r0
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	4bb1      	ldr	r3, [pc, #708]	; (80043c0 <main+0x1308>)
 80040fa:	801a      	strh	r2, [r3, #0]
 		 	   power = vbus * current;
 80040fc:	4bae      	ldr	r3, [pc, #696]	; (80043b8 <main+0x1300>)
 80040fe:	881a      	ldrh	r2, [r3, #0]
 8004100:	4baf      	ldr	r3, [pc, #700]	; (80043c0 <main+0x1308>)
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	fb12 f303 	smulbb	r3, r2, r3
 8004108:	b29a      	uxth	r2, r3
 800410a:	4bae      	ldr	r3, [pc, #696]	; (80043c4 <main+0x130c>)
 800410c:	801a      	strh	r2, [r3, #0]

 		 	   // Konwersja na jednostki podstawowe (V i A)
 		 	    solar_volts = vbus / 1000.0;  // mV -> V
 800410e:	4baa      	ldr	r3, [pc, #680]	; (80043b8 <main+0x1300>)
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	4618      	mov	r0, r3
 8004114:	f7fc fa36 	bl	8000584 <__aeabi_i2d>
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	4baa      	ldr	r3, [pc, #680]	; (80043c8 <main+0x1310>)
 800411e:	f7fc fbc5 	bl	80008ac <__aeabi_ddiv>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	4610      	mov	r0, r2
 8004128:	4619      	mov	r1, r3
 800412a:	f7fc fd77 	bl	8000c1c <__aeabi_d2f>
 800412e:	4603      	mov	r3, r0
 8004130:	4aa6      	ldr	r2, [pc, #664]	; (80043cc <main+0x1314>)
 8004132:	6013      	str	r3, [r2, #0]
 		 	    vshunt_volts = vshunt / 1000.0; // mV -> V
 8004134:	4ba1      	ldr	r3, [pc, #644]	; (80043bc <main+0x1304>)
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f7fc fa23 	bl	8000584 <__aeabi_i2d>
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	4ba1      	ldr	r3, [pc, #644]	; (80043c8 <main+0x1310>)
 8004144:	f7fc fbb2 	bl	80008ac <__aeabi_ddiv>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	4610      	mov	r0, r2
 800414e:	4619      	mov	r1, r3
 8004150:	f7fc fd64 	bl	8000c1c <__aeabi_d2f>
 8004154:	4603      	mov	r3, r0
 8004156:	4a9e      	ldr	r2, [pc, #632]	; (80043d0 <main+0x1318>)
 8004158:	6013      	str	r3, [r2, #0]
 		 	    solar_amps = current / 1000.0; // mA -> A
 800415a:	4b99      	ldr	r3, [pc, #612]	; (80043c0 <main+0x1308>)
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7fc fa10 	bl	8000584 <__aeabi_i2d>
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	4b97      	ldr	r3, [pc, #604]	; (80043c8 <main+0x1310>)
 800416a:	f7fc fb9f 	bl	80008ac <__aeabi_ddiv>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4610      	mov	r0, r2
 8004174:	4619      	mov	r1, r3
 8004176:	f7fc fd51 	bl	8000c1c <__aeabi_d2f>
 800417a:	4603      	mov	r3, r0
 800417c:	4a95      	ldr	r2, [pc, #596]	; (80043d4 <main+0x131c>)
 800417e:	6013      	str	r3, [r2, #0]

 		 	//        Zaokrąglanie do 3 miejsc po przecinku
 		 	       solar_volts = round(solar_volts * 1000) / 1000;
 8004180:	4b92      	ldr	r3, [pc, #584]	; (80043cc <main+0x1314>)
 8004182:	edd3 7a00 	vldr	s15, [r3]
 8004186:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80043d8 <main+0x1320>
 800418a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800418e:	ee17 0a90 	vmov	r0, s15
 8004192:	f7fc fa09 	bl	80005a8 <__aeabi_f2d>
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	ec43 2b10 	vmov	d0, r2, r3
 800419e:	f007 fec7 	bl	800bf30 <round>
 80041a2:	ec51 0b10 	vmov	r0, r1, d0
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	4b87      	ldr	r3, [pc, #540]	; (80043c8 <main+0x1310>)
 80041ac:	f7fc fb7e 	bl	80008ac <__aeabi_ddiv>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4610      	mov	r0, r2
 80041b6:	4619      	mov	r1, r3
 80041b8:	f7fc fd30 	bl	8000c1c <__aeabi_d2f>
 80041bc:	4603      	mov	r3, r0
 80041be:	4a83      	ldr	r2, [pc, #524]	; (80043cc <main+0x1314>)
 80041c0:	6013      	str	r3, [r2, #0]
 		 	       vshunt_volts = round(vshunt_volts * 1000) / 1000;
 80041c2:	4b83      	ldr	r3, [pc, #524]	; (80043d0 <main+0x1318>)
 80041c4:	edd3 7a00 	vldr	s15, [r3]
 80041c8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80043d8 <main+0x1320>
 80041cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041d0:	ee17 0a90 	vmov	r0, s15
 80041d4:	f7fc f9e8 	bl	80005a8 <__aeabi_f2d>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	ec43 2b10 	vmov	d0, r2, r3
 80041e0:	f007 fea6 	bl	800bf30 <round>
 80041e4:	ec51 0b10 	vmov	r0, r1, d0
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	4b76      	ldr	r3, [pc, #472]	; (80043c8 <main+0x1310>)
 80041ee:	f7fc fb5d 	bl	80008ac <__aeabi_ddiv>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4610      	mov	r0, r2
 80041f8:	4619      	mov	r1, r3
 80041fa:	f7fc fd0f 	bl	8000c1c <__aeabi_d2f>
 80041fe:	4603      	mov	r3, r0
 8004200:	4a73      	ldr	r2, [pc, #460]	; (80043d0 <main+0x1318>)
 8004202:	6013      	str	r3, [r2, #0]
 		 	       solar_amps = round(solar_amps * 1000) / 1000;
 8004204:	4b73      	ldr	r3, [pc, #460]	; (80043d4 <main+0x131c>)
 8004206:	edd3 7a00 	vldr	s15, [r3]
 800420a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80043d8 <main+0x1320>
 800420e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004212:	ee17 0a90 	vmov	r0, s15
 8004216:	f7fc f9c7 	bl	80005a8 <__aeabi_f2d>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	ec43 2b10 	vmov	d0, r2, r3
 8004222:	f007 fe85 	bl	800bf30 <round>
 8004226:	ec51 0b10 	vmov	r0, r1, d0
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	4b66      	ldr	r3, [pc, #408]	; (80043c8 <main+0x1310>)
 8004230:	f7fc fb3c 	bl	80008ac <__aeabi_ddiv>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4610      	mov	r0, r2
 800423a:	4619      	mov	r1, r3
 800423c:	f7fc fcee 	bl	8000c1c <__aeabi_d2f>
 8004240:	4603      	mov	r3, r0
 8004242:	4a64      	ldr	r2, [pc, #400]	; (80043d4 <main+0x131c>)
 8004244:	6013      	str	r3, [r2, #0]
 		 	       solar_power = solar_volts * solar_amps;
 8004246:	4b61      	ldr	r3, [pc, #388]	; (80043cc <main+0x1314>)
 8004248:	ed93 7a00 	vldr	s14, [r3]
 800424c:	4b61      	ldr	r3, [pc, #388]	; (80043d4 <main+0x131c>)
 800424e:	edd3 7a00 	vldr	s15, [r3]
 8004252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004256:	4b61      	ldr	r3, [pc, #388]	; (80043dc <main+0x1324>)
 8004258:	edc3 7a00 	vstr	s15, [r3]

 		  vbus2 = INA219_ReadBusVoltage(&ina219_2);
 800425c:	4860      	ldr	r0, [pc, #384]	; (80043e0 <main+0x1328>)
 800425e:	f7fc fef1 	bl	8001044 <INA219_ReadBusVoltage>
 8004262:	4603      	mov	r3, r0
 8004264:	461a      	mov	r2, r3
 8004266:	4b5f      	ldr	r3, [pc, #380]	; (80043e4 <main+0x132c>)
 8004268:	801a      	strh	r2, [r3, #0]
 		   vshunt2 = INA219_ReadShuntVolage(&ina219_2);
 800426a:	485d      	ldr	r0, [pc, #372]	; (80043e0 <main+0x1328>)
 800426c:	f7fc ff28 	bl	80010c0 <INA219_ReadShuntVolage>
 8004270:	4603      	mov	r3, r0
 8004272:	461a      	mov	r2, r3
 8004274:	4b5c      	ldr	r3, [pc, #368]	; (80043e8 <main+0x1330>)
 8004276:	801a      	strh	r2, [r3, #0]
 			   current2 = INA219_ReadCurrent(&ina219_2);
 8004278:	4859      	ldr	r0, [pc, #356]	; (80043e0 <main+0x1328>)
 800427a:	f7fc ff07 	bl	800108c <INA219_ReadCurrent>
 800427e:	4603      	mov	r3, r0
 8004280:	b29a      	uxth	r2, r3
 8004282:	4b5a      	ldr	r3, [pc, #360]	; (80043ec <main+0x1334>)
 8004284:	801a      	strh	r2, [r3, #0]
 			   power2 = vbus2 * current2;
 8004286:	4b57      	ldr	r3, [pc, #348]	; (80043e4 <main+0x132c>)
 8004288:	881a      	ldrh	r2, [r3, #0]
 800428a:	4b58      	ldr	r3, [pc, #352]	; (80043ec <main+0x1334>)
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	fb12 f303 	smulbb	r3, r2, r3
 8004292:	b29a      	uxth	r2, r3
 8004294:	4b56      	ldr	r3, [pc, #344]	; (80043f0 <main+0x1338>)
 8004296:	801a      	strh	r2, [r3, #0]

 			   // Konwersja na jednostki podstawowe (V i A)
 			   	 	    output_volts = vbus2 / 1000.0;  // mV -> V
 8004298:	4b52      	ldr	r3, [pc, #328]	; (80043e4 <main+0x132c>)
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f7fc f971 	bl	8000584 <__aeabi_i2d>
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	4b48      	ldr	r3, [pc, #288]	; (80043c8 <main+0x1310>)
 80042a8:	f7fc fb00 	bl	80008ac <__aeabi_ddiv>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4610      	mov	r0, r2
 80042b2:	4619      	mov	r1, r3
 80042b4:	f7fc fcb2 	bl	8000c1c <__aeabi_d2f>
 80042b8:	4603      	mov	r3, r0
 80042ba:	4a4e      	ldr	r2, [pc, #312]	; (80043f4 <main+0x133c>)
 80042bc:	6013      	str	r3, [r2, #0]
 			   	 	    vshunt_volts2 = vshunt2 / 1000.0; // mV -> V
 80042be:	4b4a      	ldr	r3, [pc, #296]	; (80043e8 <main+0x1330>)
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fc f95e 	bl	8000584 <__aeabi_i2d>
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	4b3e      	ldr	r3, [pc, #248]	; (80043c8 <main+0x1310>)
 80042ce:	f7fc faed 	bl	80008ac <__aeabi_ddiv>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4610      	mov	r0, r2
 80042d8:	4619      	mov	r1, r3
 80042da:	f7fc fc9f 	bl	8000c1c <__aeabi_d2f>
 80042de:	4603      	mov	r3, r0
 80042e0:	4a45      	ldr	r2, [pc, #276]	; (80043f8 <main+0x1340>)
 80042e2:	6013      	str	r3, [r2, #0]
 			   	 	    current_amps2 = current2 / 1000.0; // mA -> A
 80042e4:	4b41      	ldr	r3, [pc, #260]	; (80043ec <main+0x1334>)
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fc f94b 	bl	8000584 <__aeabi_i2d>
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	4b35      	ldr	r3, [pc, #212]	; (80043c8 <main+0x1310>)
 80042f4:	f7fc fada 	bl	80008ac <__aeabi_ddiv>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4610      	mov	r0, r2
 80042fe:	4619      	mov	r1, r3
 8004300:	f7fc fc8c 	bl	8000c1c <__aeabi_d2f>
 8004304:	4603      	mov	r3, r0
 8004306:	4a3d      	ldr	r2, [pc, #244]	; (80043fc <main+0x1344>)
 8004308:	6013      	str	r3, [r2, #0]

 			   	 	      //  Zaokrąglanie do 3 miejsc po przecinku
 			   	 	       output_volts = round(output_volts * 1000) / 1000;
 800430a:	4b3a      	ldr	r3, [pc, #232]	; (80043f4 <main+0x133c>)
 800430c:	edd3 7a00 	vldr	s15, [r3]
 8004310:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80043d8 <main+0x1320>
 8004314:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004318:	ee17 0a90 	vmov	r0, s15
 800431c:	f7fc f944 	bl	80005a8 <__aeabi_f2d>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	ec43 2b10 	vmov	d0, r2, r3
 8004328:	f007 fe02 	bl	800bf30 <round>
 800432c:	ec51 0b10 	vmov	r0, r1, d0
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	4b24      	ldr	r3, [pc, #144]	; (80043c8 <main+0x1310>)
 8004336:	f7fc fab9 	bl	80008ac <__aeabi_ddiv>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4610      	mov	r0, r2
 8004340:	4619      	mov	r1, r3
 8004342:	f7fc fc6b 	bl	8000c1c <__aeabi_d2f>
 8004346:	4603      	mov	r3, r0
 8004348:	4a2a      	ldr	r2, [pc, #168]	; (80043f4 <main+0x133c>)
 800434a:	6013      	str	r3, [r2, #0]
 			   	 	       vshunt_volts2 = round(vshunt_volts2 * 1000) / 1000;
 800434c:	4b2a      	ldr	r3, [pc, #168]	; (80043f8 <main+0x1340>)
 800434e:	edd3 7a00 	vldr	s15, [r3]
 8004352:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80043d8 <main+0x1320>
 8004356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800435a:	ee17 0a90 	vmov	r0, s15
 800435e:	f7fc f923 	bl	80005a8 <__aeabi_f2d>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	ec43 2b10 	vmov	d0, r2, r3
 800436a:	f007 fde1 	bl	800bf30 <round>
 800436e:	ec51 0b10 	vmov	r0, r1, d0
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	4b14      	ldr	r3, [pc, #80]	; (80043c8 <main+0x1310>)
 8004378:	f7fc fa98 	bl	80008ac <__aeabi_ddiv>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4610      	mov	r0, r2
 8004382:	4619      	mov	r1, r3
 8004384:	f7fc fc4a 	bl	8000c1c <__aeabi_d2f>
 8004388:	4603      	mov	r3, r0
 800438a:	e039      	b.n	8004400 <main+0x1348>
 800438c:	200003c0 	.word	0x200003c0
 8004390:	200002e6 	.word	0x200002e6
 8004394:	0800c1ac 	.word	0x0800c1ac
 8004398:	0800c16c 	.word	0x0800c16c
 800439c:	20000278 	.word	0x20000278
 80043a0:	200002dd 	.word	0x200002dd
 80043a4:	20000128 	.word	0x20000128
 80043a8:	20000058 	.word	0x20000058
 80043ac:	20000054 	.word	0x20000054
 80043b0:	20000055 	.word	0x20000055
 80043b4:	20000318 	.word	0x20000318
 80043b8:	20000328 	.word	0x20000328
 80043bc:	2000032a 	.word	0x2000032a
 80043c0:	2000032c 	.word	0x2000032c
 80043c4:	2000032e 	.word	0x2000032e
 80043c8:	408f4000 	.word	0x408f4000
 80043cc:	2000033c 	.word	0x2000033c
 80043d0:	20000340 	.word	0x20000340
 80043d4:	20000344 	.word	0x20000344
 80043d8:	447a0000 	.word	0x447a0000
 80043dc:	20000354 	.word	0x20000354
 80043e0:	20000320 	.word	0x20000320
 80043e4:	20000330 	.word	0x20000330
 80043e8:	20000332 	.word	0x20000332
 80043ec:	20000334 	.word	0x20000334
 80043f0:	20000336 	.word	0x20000336
 80043f4:	20000348 	.word	0x20000348
 80043f8:	2000034c 	.word	0x2000034c
 80043fc:	20000350 	.word	0x20000350
 8004400:	4a4f      	ldr	r2, [pc, #316]	; (8004540 <main+0x1488>)
 8004402:	6013      	str	r3, [r2, #0]
 			   	 	       current_amps2 = round(current_amps2 * 1000) /  1000;
 8004404:	4b4f      	ldr	r3, [pc, #316]	; (8004544 <main+0x148c>)
 8004406:	edd3 7a00 	vldr	s15, [r3]
 800440a:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004548 <main+0x1490>
 800440e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004412:	ee17 0a90 	vmov	r0, s15
 8004416:	f7fc f8c7 	bl	80005a8 <__aeabi_f2d>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	ec43 2b10 	vmov	d0, r2, r3
 8004422:	f007 fd85 	bl	800bf30 <round>
 8004426:	ec51 0b10 	vmov	r0, r1, d0
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	4b47      	ldr	r3, [pc, #284]	; (800454c <main+0x1494>)
 8004430:	f7fc fa3c 	bl	80008ac <__aeabi_ddiv>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4610      	mov	r0, r2
 800443a:	4619      	mov	r1, r3
 800443c:	f7fc fbee 	bl	8000c1c <__aeabi_d2f>
 8004440:	4603      	mov	r3, r0
 8004442:	4a40      	ldr	r2, [pc, #256]	; (8004544 <main+0x148c>)
 8004444:	6013      	str	r3, [r2, #0]
 	    if(Output == true)
 8004446:	4b42      	ldr	r3, [pc, #264]	; (8004550 <main+0x1498>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d035      	beq.n	80044ba <main+0x1402>
 	    {
 		if(solar_volts >= 4.6) energymode = 1;
 800444e:	4b41      	ldr	r3, [pc, #260]	; (8004554 <main+0x149c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f7fc f8a8 	bl	80005a8 <__aeabi_f2d>
 8004458:	a337      	add	r3, pc, #220	; (adr r3, 8004538 <main+0x1480>)
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	f7fc fb81 	bl	8000b64 <__aeabi_dcmpge>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <main+0x13b8>
 8004468:	4b3b      	ldr	r3, [pc, #236]	; (8004558 <main+0x14a0>)
 800446a:	2201      	movs	r2, #1
 800446c:	801a      	strh	r2, [r3, #0]
 800446e:	e017      	b.n	80044a0 <main+0x13e8>
 		else if(PowerSupply == false && solar_volts < 4.5 && energymode != 2) energymode = 2;
 8004470:	4b3a      	ldr	r3, [pc, #232]	; (800455c <main+0x14a4>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	f083 0301 	eor.w	r3, r3, #1
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d010      	beq.n	80044a0 <main+0x13e8>
 800447e:	4b35      	ldr	r3, [pc, #212]	; (8004554 <main+0x149c>)
 8004480:	edd3 7a00 	vldr	s15, [r3]
 8004484:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 8004488:	eef4 7ac7 	vcmpe.f32	s15, s14
 800448c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004490:	d506      	bpl.n	80044a0 <main+0x13e8>
 8004492:	4b31      	ldr	r3, [pc, #196]	; (8004558 <main+0x14a0>)
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d002      	beq.n	80044a0 <main+0x13e8>
 800449a:	4b2f      	ldr	r3, [pc, #188]	; (8004558 <main+0x14a0>)
 800449c:	2202      	movs	r2, #2
 800449e:	801a      	strh	r2, [r3, #0]
 		if(output_volts < 4) energymode = 3;
 80044a0:	4b2f      	ldr	r3, [pc, #188]	; (8004560 <main+0x14a8>)
 80044a2:	edd3 7a00 	vldr	s15, [r3]
 80044a6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80044aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b2:	d502      	bpl.n	80044ba <main+0x1402>
 80044b4:	4b28      	ldr	r3, [pc, #160]	; (8004558 <main+0x14a0>)
 80044b6:	2203      	movs	r2, #3
 80044b8:	801a      	strh	r2, [r3, #0]
 	    }
 		if(Output == false) energymode = 4; //wylaczenie zasilania, panel jesli jest w stanie to ładuje akumulator
 80044ba:	4b25      	ldr	r3, [pc, #148]	; (8004550 <main+0x1498>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	f083 0301 	eor.w	r3, r3, #1
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <main+0x1416>
 80044c8:	4b23      	ldr	r3, [pc, #140]	; (8004558 <main+0x14a0>)
 80044ca:	2204      	movs	r2, #4
 80044cc:	801a      	strh	r2, [r3, #0]
 		switch (energymode) {
 80044ce:	4b22      	ldr	r3, [pc, #136]	; (8004558 <main+0x14a0>)
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	2b03      	cmp	r3, #3
 80044d6:	d829      	bhi.n	800452c <main+0x1474>
 80044d8:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <main+0x1428>)
 80044da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044de:	bf00      	nop
 80044e0:	080044f1 	.word	0x080044f1
 80044e4:	08004501 	.word	0x08004501
 80044e8:	0800450d 	.word	0x0800450d
 80044ec:	0800451d 	.word	0x0800451d
 		case 1:
 			PowerSupply_Off();
 80044f0:	f7fe fcde 	bl	8002eb0 <PowerSupply_Off>
 			Battery_Off();
 80044f4:	f7fe fd0a 	bl	8002f0c <Battery_Off>
 			Solar = true;
 80044f8:	4b1a      	ldr	r3, [pc, #104]	; (8004564 <main+0x14ac>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	701a      	strb	r2, [r3, #0]
 			break;
 80044fe:	e015      	b.n	800452c <main+0x1474>
 		case 2:
 			Battery_On();
 8004500:	f7fe fd12 	bl	8002f28 <Battery_On>
 			Solar = false;
 8004504:	4b17      	ldr	r3, [pc, #92]	; (8004564 <main+0x14ac>)
 8004506:	2200      	movs	r2, #0
 8004508:	701a      	strb	r2, [r3, #0]
 			break;
 800450a:	e00f      	b.n	800452c <main+0x1474>

 		case 3:
 			Battery_Off();
 800450c:	f7fe fcfe 	bl	8002f0c <Battery_Off>
 			PowerSupply_On();
 8004510:	f7fe fcdc 	bl	8002ecc <PowerSupply_On>
 			Solar = false;
 8004514:	4b13      	ldr	r3, [pc, #76]	; (8004564 <main+0x14ac>)
 8004516:	2200      	movs	r2, #0
 8004518:	701a      	strb	r2, [r3, #0]

 			break;
 800451a:	e007      	b.n	800452c <main+0x1474>
 		case 4:
 			PowerSupply_Off();
 800451c:	f7fe fcc8 	bl	8002eb0 <PowerSupply_Off>
 			Battery_Off();
 8004520:	f7fe fcf4 	bl	8002f0c <Battery_Off>
 			Solar = false;
 8004524:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <main+0x14ac>)
 8004526:	2200      	movs	r2, #0
 8004528:	701a      	strb	r2, [r3, #0]
 			break;
 800452a:	bf00      	nop
 		}
 	////////////////////////////////////////////////////////////////////////////////////
 	for (int i = 0; i < RX_BUFFER_SIZE; i++) {
 800452c:	2300      	movs	r3, #0
 800452e:	607b      	str	r3, [r7, #4]
 8004530:	e026      	b.n	8004580 <main+0x14c8>
 8004532:	bf00      	nop
 8004534:	f3af 8000 	nop.w
 8004538:	66666666 	.word	0x66666666
 800453c:	40126666 	.word	0x40126666
 8004540:	2000034c 	.word	0x2000034c
 8004544:	20000350 	.word	0x20000350
 8004548:	447a0000 	.word	0x447a0000
 800454c:	408f4000 	.word	0x408f4000
 8004550:	2000033a 	.word	0x2000033a
 8004554:	2000033c 	.word	0x2000033c
 8004558:	20000138 	.word	0x20000138
 800455c:	20000338 	.word	0x20000338
 8004560:	20000348 	.word	0x20000348
 8004564:	2000033b 	.word	0x2000033b
 	    received[i] = rxBuffer[i]; // Kopiuj dane
 8004568:	4aa4      	ldr	r2, [pc, #656]	; (80047fc <main+0x1744>)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4413      	add	r3, r2
 800456e:	7819      	ldrb	r1, [r3, #0]
 8004570:	4aa3      	ldr	r2, [pc, #652]	; (8004800 <main+0x1748>)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4413      	add	r3, r2
 8004576:	460a      	mov	r2, r1
 8004578:	701a      	strb	r2, [r3, #0]
 	for (int i = 0; i < RX_BUFFER_SIZE; i++) {
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3301      	adds	r3, #1
 800457e:	607b      	str	r3, [r7, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b03      	cmp	r3, #3
 8004584:	ddf0      	ble.n	8004568 <main+0x14b0>
 	}
 	received[RX_BUFFER_SIZE] = '\0'; // Dodaj znak końca stringa
 8004586:	4b9e      	ldr	r3, [pc, #632]	; (8004800 <main+0x1748>)
 8004588:	2200      	movs	r2, #0
 800458a:	711a      	strb	r2, [r3, #4]
 	//Wyłączenie światła w kuchnii
 	if (strcmp(received, "LK00") == 0 && strcmp(lastMessage, "LK00") != 0) {
 800458c:	499d      	ldr	r1, [pc, #628]	; (8004804 <main+0x174c>)
 800458e:	489c      	ldr	r0, [pc, #624]	; (8004800 <main+0x1748>)
 8004590:	f7fb fe3e 	bl	8000210 <strcmp>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d111      	bne.n	80045be <main+0x1506>
 800459a:	499a      	ldr	r1, [pc, #616]	; (8004804 <main+0x174c>)
 800459c:	489a      	ldr	r0, [pc, #616]	; (8004808 <main+0x1750>)
 800459e:	f7fb fe37 	bl	8000210 <strcmp>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <main+0x1506>
 	    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80045a8:	2108      	movs	r1, #8
 80045aa:	4898      	ldr	r0, [pc, #608]	; (800480c <main+0x1754>)
 80045ac:	f004 ff16 	bl	80093dc <HAL_TIM_PWM_Stop>
 	    strcpy(lastMessage, "LK00");
 80045b0:	4b95      	ldr	r3, [pc, #596]	; (8004808 <main+0x1750>)
 80045b2:	4a94      	ldr	r2, [pc, #592]	; (8004804 <main+0x174c>)
 80045b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045b8:	6018      	str	r0, [r3, #0]
 80045ba:	3304      	adds	r3, #4
 80045bc:	7019      	strb	r1, [r3, #0]
 	}
 	//Włączenie światła w kuchnii
 	if (strcmp(received, "LK01") == 0 && strcmp(lastMessage, "LK01") != 0) {
 80045be:	4994      	ldr	r1, [pc, #592]	; (8004810 <main+0x1758>)
 80045c0:	488f      	ldr	r0, [pc, #572]	; (8004800 <main+0x1748>)
 80045c2:	f7fb fe25 	bl	8000210 <strcmp>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d116      	bne.n	80045fa <main+0x1542>
 80045cc:	4990      	ldr	r1, [pc, #576]	; (8004810 <main+0x1758>)
 80045ce:	488e      	ldr	r0, [pc, #568]	; (8004808 <main+0x1750>)
 80045d0:	f7fb fe1e 	bl	8000210 <strcmp>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00f      	beq.n	80045fa <main+0x1542>
 	 	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, brightnessKitchen);
 80045da:	4b8e      	ldr	r3, [pc, #568]	; (8004814 <main+0x175c>)
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	4b8b      	ldr	r3, [pc, #556]	; (800480c <main+0x1754>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	63da      	str	r2, [r3, #60]	; 0x3c
 	 	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80045e4:	2108      	movs	r1, #8
 80045e6:	4889      	ldr	r0, [pc, #548]	; (800480c <main+0x1754>)
 80045e8:	f004 fdfe 	bl	80091e8 <HAL_TIM_PWM_Start>
 	 	strcpy(lastMessage, "LK01");
 80045ec:	4b86      	ldr	r3, [pc, #536]	; (8004808 <main+0x1750>)
 80045ee:	4a88      	ldr	r2, [pc, #544]	; (8004810 <main+0x1758>)
 80045f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045f4:	6018      	str	r0, [r3, #0]
 80045f6:	3304      	adds	r3, #4
 80045f8:	7019      	strb	r1, [r3, #0]
 	}
 	//Wyłączenie światła w salonie
 	if (strcmp(received, "LL00") == 0 && strcmp(lastMessage, "LL00") != 0) {
 80045fa:	4987      	ldr	r1, [pc, #540]	; (8004818 <main+0x1760>)
 80045fc:	4880      	ldr	r0, [pc, #512]	; (8004800 <main+0x1748>)
 80045fe:	f7fb fe07 	bl	8000210 <strcmp>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d111      	bne.n	800462c <main+0x1574>
 8004608:	4983      	ldr	r1, [pc, #524]	; (8004818 <main+0x1760>)
 800460a:	487f      	ldr	r0, [pc, #508]	; (8004808 <main+0x1750>)
 800460c:	f7fb fe00 	bl	8000210 <strcmp>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <main+0x1574>
 	 	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8004616:	2100      	movs	r1, #0
 8004618:	4880      	ldr	r0, [pc, #512]	; (800481c <main+0x1764>)
 800461a:	f004 fedf 	bl	80093dc <HAL_TIM_PWM_Stop>
 	 	strcpy(lastMessage, "LL00");
 800461e:	4b7a      	ldr	r3, [pc, #488]	; (8004808 <main+0x1750>)
 8004620:	4a7d      	ldr	r2, [pc, #500]	; (8004818 <main+0x1760>)
 8004622:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004626:	6018      	str	r0, [r3, #0]
 8004628:	3304      	adds	r3, #4
 800462a:	7019      	strb	r1, [r3, #0]
 	}
 	//Włączenie światła w salonie
 	if (strcmp(received, "LL01") == 0 && strcmp(lastMessage, "LL01") != 0) {
 800462c:	497c      	ldr	r1, [pc, #496]	; (8004820 <main+0x1768>)
 800462e:	4874      	ldr	r0, [pc, #464]	; (8004800 <main+0x1748>)
 8004630:	f7fb fdee 	bl	8000210 <strcmp>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d116      	bne.n	8004668 <main+0x15b0>
 800463a:	4979      	ldr	r1, [pc, #484]	; (8004820 <main+0x1768>)
 800463c:	4872      	ldr	r0, [pc, #456]	; (8004808 <main+0x1750>)
 800463e:	f7fb fde7 	bl	8000210 <strcmp>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00f      	beq.n	8004668 <main+0x15b0>
 	 	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 8004648:	4b76      	ldr	r3, [pc, #472]	; (8004824 <main+0x176c>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	4b73      	ldr	r3, [pc, #460]	; (800481c <main+0x1764>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	635a      	str	r2, [r3, #52]	; 0x34
 	 	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8004652:	2100      	movs	r1, #0
 8004654:	4871      	ldr	r0, [pc, #452]	; (800481c <main+0x1764>)
 8004656:	f004 fdc7 	bl	80091e8 <HAL_TIM_PWM_Start>
 	 	strcpy(lastMessage, "LL01");
 800465a:	4b6b      	ldr	r3, [pc, #428]	; (8004808 <main+0x1750>)
 800465c:	4a70      	ldr	r2, [pc, #448]	; (8004820 <main+0x1768>)
 800465e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004662:	6018      	str	r0, [r3, #0]
 8004664:	3304      	adds	r3, #4
 8004666:	7019      	strb	r1, [r3, #0]
 	}

 	if (strcmp(received, "LG00") == 0 && strcmp(lastMessage, "LG00") != 0) {
 8004668:	496f      	ldr	r1, [pc, #444]	; (8004828 <main+0x1770>)
 800466a:	4865      	ldr	r0, [pc, #404]	; (8004800 <main+0x1748>)
 800466c:	f7fb fdd0 	bl	8000210 <strcmp>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d111      	bne.n	800469a <main+0x15e2>
 8004676:	496c      	ldr	r1, [pc, #432]	; (8004828 <main+0x1770>)
 8004678:	4863      	ldr	r0, [pc, #396]	; (8004808 <main+0x1750>)
 800467a:	f7fb fdc9 	bl	8000210 <strcmp>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <main+0x15e2>
 	 	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8004684:	2100      	movs	r1, #0
 8004686:	4869      	ldr	r0, [pc, #420]	; (800482c <main+0x1774>)
 8004688:	f004 fea8 	bl	80093dc <HAL_TIM_PWM_Stop>
 	 	strcpy(lastMessage, "LG00");
 800468c:	4b5e      	ldr	r3, [pc, #376]	; (8004808 <main+0x1750>)
 800468e:	4a66      	ldr	r2, [pc, #408]	; (8004828 <main+0x1770>)
 8004690:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004694:	6018      	str	r0, [r3, #0]
 8004696:	3304      	adds	r3, #4
 8004698:	7019      	strb	r1, [r3, #0]
 	}

 	if (strcmp(received, "LG01") == 0 && strcmp(lastMessage, "LG01") != 0) {
 800469a:	4965      	ldr	r1, [pc, #404]	; (8004830 <main+0x1778>)
 800469c:	4858      	ldr	r0, [pc, #352]	; (8004800 <main+0x1748>)
 800469e:	f7fb fdb7 	bl	8000210 <strcmp>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d116      	bne.n	80046d6 <main+0x161e>
 80046a8:	4961      	ldr	r1, [pc, #388]	; (8004830 <main+0x1778>)
 80046aa:	4857      	ldr	r0, [pc, #348]	; (8004808 <main+0x1750>)
 80046ac:	f7fb fdb0 	bl	8000210 <strcmp>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00f      	beq.n	80046d6 <main+0x161e>
 	 	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 80046b6:	4b5f      	ldr	r3, [pc, #380]	; (8004834 <main+0x177c>)
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	4b5c      	ldr	r3, [pc, #368]	; (800482c <main+0x1774>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	635a      	str	r2, [r3, #52]	; 0x34
 	 	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80046c0:	2100      	movs	r1, #0
 80046c2:	485a      	ldr	r0, [pc, #360]	; (800482c <main+0x1774>)
 80046c4:	f004 fd90 	bl	80091e8 <HAL_TIM_PWM_Start>
 	 	strcpy(lastMessage, "LG01");
 80046c8:	4b4f      	ldr	r3, [pc, #316]	; (8004808 <main+0x1750>)
 80046ca:	4a59      	ldr	r2, [pc, #356]	; (8004830 <main+0x1778>)
 80046cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046d0:	6018      	str	r0, [r3, #0]
 80046d2:	3304      	adds	r3, #4
 80046d4:	7019      	strb	r1, [r3, #0]
 	}

 	if(rxBuffer[0]=='1')  //Suwak jasności kuchnia
 80046d6:	4b49      	ldr	r3, [pc, #292]	; (80047fc <main+0x1744>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b31      	cmp	r3, #49	; 0x31
 80046dc:	d119      	bne.n	8004712 <main+0x165a>
 	{
 		brightnessKitchen = (received[1] - '0') * 100
 80046de:	4b48      	ldr	r3, [pc, #288]	; (8004800 <main+0x1748>)
 80046e0:	785b      	ldrb	r3, [r3, #1]
 80046e2:	3b30      	subs	r3, #48	; 0x30
 80046e4:	2264      	movs	r2, #100	; 0x64
 80046e6:	fb02 f103 	mul.w	r1, r2, r3
 		                  + (received[2] - '0') * 10
 80046ea:	4b45      	ldr	r3, [pc, #276]	; (8004800 <main+0x1748>)
 80046ec:	789b      	ldrb	r3, [r3, #2]
 80046ee:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	18ca      	adds	r2, r1, r3
 		                  + (received[3] - '0');
 80046fc:	4b40      	ldr	r3, [pc, #256]	; (8004800 <main+0x1748>)
 80046fe:	78db      	ldrb	r3, [r3, #3]
 8004700:	3b30      	subs	r3, #48	; 0x30
 8004702:	4413      	add	r3, r2
 		brightnessKitchen = (received[1] - '0') * 100
 8004704:	4a43      	ldr	r2, [pc, #268]	; (8004814 <main+0x175c>)
 8004706:	6013      	str	r3, [r2, #0]
 		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, brightnessKitchen);
 8004708:	4b42      	ldr	r3, [pc, #264]	; (8004814 <main+0x175c>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	4b3f      	ldr	r3, [pc, #252]	; (800480c <main+0x1754>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	63da      	str	r2, [r3, #60]	; 0x3c
 	}

 	if(received[0]=='2')	//Suwak jasności salon
 8004712:	4b3b      	ldr	r3, [pc, #236]	; (8004800 <main+0x1748>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b32      	cmp	r3, #50	; 0x32
 8004718:	d119      	bne.n	800474e <main+0x1696>
 	{
 		brightnessLivingroom = (received[1] - '0') * 100
 800471a:	4b39      	ldr	r3, [pc, #228]	; (8004800 <main+0x1748>)
 800471c:	785b      	ldrb	r3, [r3, #1]
 800471e:	3b30      	subs	r3, #48	; 0x30
 8004720:	2264      	movs	r2, #100	; 0x64
 8004722:	fb02 f103 	mul.w	r1, r2, r3
                 + (received[2] - '0') * 10
 8004726:	4b36      	ldr	r3, [pc, #216]	; (8004800 <main+0x1748>)
 8004728:	789b      	ldrb	r3, [r3, #2]
 800472a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800472e:	4613      	mov	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4413      	add	r3, r2
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	18ca      	adds	r2, r1, r3
                 + (received[3] - '0');
 8004738:	4b31      	ldr	r3, [pc, #196]	; (8004800 <main+0x1748>)
 800473a:	78db      	ldrb	r3, [r3, #3]
 800473c:	3b30      	subs	r3, #48	; 0x30
 800473e:	4413      	add	r3, r2
 		brightnessLivingroom = (received[1] - '0') * 100
 8004740:	4a38      	ldr	r2, [pc, #224]	; (8004824 <main+0x176c>)
 8004742:	6013      	str	r3, [r2, #0]
 		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 8004744:	4b37      	ldr	r3, [pc, #220]	; (8004824 <main+0x176c>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	4b34      	ldr	r3, [pc, #208]	; (800481c <main+0x1764>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	635a      	str	r2, [r3, #52]	; 0x34
 	}
 	if(received[0]=='3')	//Suwak jasności garaż
 800474e:	4b2c      	ldr	r3, [pc, #176]	; (8004800 <main+0x1748>)
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b33      	cmp	r3, #51	; 0x33
 8004754:	d119      	bne.n	800478a <main+0x16d2>
 	{
 		brightnessGarage = (received[1] - '0') * 100
 8004756:	4b2a      	ldr	r3, [pc, #168]	; (8004800 <main+0x1748>)
 8004758:	785b      	ldrb	r3, [r3, #1]
 800475a:	3b30      	subs	r3, #48	; 0x30
 800475c:	2264      	movs	r2, #100	; 0x64
 800475e:	fb02 f103 	mul.w	r1, r2, r3
                 + (received[2] - '0') * 10
 8004762:	4b27      	ldr	r3, [pc, #156]	; (8004800 <main+0x1748>)
 8004764:	789b      	ldrb	r3, [r3, #2]
 8004766:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	18ca      	adds	r2, r1, r3
                 + (received[3] - '0');
 8004774:	4b22      	ldr	r3, [pc, #136]	; (8004800 <main+0x1748>)
 8004776:	78db      	ldrb	r3, [r3, #3]
 8004778:	3b30      	subs	r3, #48	; 0x30
 800477a:	4413      	add	r3, r2
 		brightnessGarage = (received[1] - '0') * 100
 800477c:	4a2d      	ldr	r2, [pc, #180]	; (8004834 <main+0x177c>)
 800477e:	6013      	str	r3, [r2, #0]
 		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 8004780:	4b2c      	ldr	r3, [pc, #176]	; (8004834 <main+0x177c>)
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	4b29      	ldr	r3, [pc, #164]	; (800482c <main+0x1774>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	635a      	str	r2, [r3, #52]	; 0x34
 	}
 	//Włączenie alarmu
 	if (strcmp(received, "AL01") == 0 && strcmp(lastMessage, "AL01") != 0)
 800478a:	492b      	ldr	r1, [pc, #172]	; (8004838 <main+0x1780>)
 800478c:	481c      	ldr	r0, [pc, #112]	; (8004800 <main+0x1748>)
 800478e:	f7fb fd3f 	bl	8000210 <strcmp>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d112      	bne.n	80047be <main+0x1706>
 8004798:	4927      	ldr	r1, [pc, #156]	; (8004838 <main+0x1780>)
 800479a:	481b      	ldr	r0, [pc, #108]	; (8004808 <main+0x1750>)
 800479c:	f7fb fd38 	bl	8000210 <strcmp>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00b      	beq.n	80047be <main+0x1706>
 	{
 		alarm = true;
 80047a6:	4b25      	ldr	r3, [pc, #148]	; (800483c <main+0x1784>)
 80047a8:	2201      	movs	r2, #1
 80047aa:	701a      	strb	r2, [r3, #0]
		PIR_detected = false;
 80047ac:	4b24      	ldr	r3, [pc, #144]	; (8004840 <main+0x1788>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	701a      	strb	r2, [r3, #0]
		alarmLED = false;
 80047b2:	4b24      	ldr	r3, [pc, #144]	; (8004844 <main+0x178c>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim2);
 80047b8:	481c      	ldr	r0, [pc, #112]	; (800482c <main+0x1774>)
 80047ba:	f004 fc0d 	bl	8008fd8 <HAL_TIM_Base_Start_IT>
 	}
 	//Wyłączenie alarmu
 	if (strcmp(received, "AL00") == 0 && strcmp(lastMessage, "AL00") != 0)
 80047be:	4922      	ldr	r1, [pc, #136]	; (8004848 <main+0x1790>)
 80047c0:	480f      	ldr	r0, [pc, #60]	; (8004800 <main+0x1748>)
 80047c2:	f7fb fd25 	bl	8000210 <strcmp>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d13f      	bne.n	800484c <main+0x1794>
 80047cc:	491e      	ldr	r1, [pc, #120]	; (8004848 <main+0x1790>)
 80047ce:	480e      	ldr	r0, [pc, #56]	; (8004808 <main+0x1750>)
 80047d0:	f7fb fd1e 	bl	8000210 <strcmp>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d038      	beq.n	800484c <main+0x1794>
 	{
 		alarm = false;
 80047da:	4b18      	ldr	r3, [pc, #96]	; (800483c <main+0x1784>)
 80047dc:	2200      	movs	r2, #0
 80047de:	701a      	strb	r2, [r3, #0]
		PIR_detected = false;
 80047e0:	4b17      	ldr	r3, [pc, #92]	; (8004840 <main+0x1788>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	701a      	strb	r2, [r3, #0]
		alarmLED = false;
 80047e6:	4b17      	ldr	r3, [pc, #92]	; (8004844 <main+0x178c>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80047ec:	2108      	movs	r1, #8
 80047ee:	480f      	ldr	r0, [pc, #60]	; (800482c <main+0x1774>)
 80047f0:	f004 fdf4 	bl	80093dc <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop_IT(&htim2);
 80047f4:	480d      	ldr	r0, [pc, #52]	; (800482c <main+0x1774>)
 80047f6:	f004 fc67 	bl	80090c8 <HAL_TIM_Base_Stop_IT>
 80047fa:	e027      	b.n	800484c <main+0x1794>
 80047fc:	200002c4 	.word	0x200002c4
 8004800:	200002d0 	.word	0x200002d0
 8004804:	0800c1b4 	.word	0x0800c1b4
 8004808:	200002d8 	.word	0x200002d8
 800480c:	20000458 	.word	0x20000458
 8004810:	0800c1bc 	.word	0x0800c1bc
 8004814:	20000130 	.word	0x20000130
 8004818:	0800c1c4 	.word	0x0800c1c4
 800481c:	200004a4 	.word	0x200004a4
 8004820:	0800c1cc 	.word	0x0800c1cc
 8004824:	2000012c 	.word	0x2000012c
 8004828:	0800c1d4 	.word	0x0800c1d4
 800482c:	2000040c 	.word	0x2000040c
 8004830:	0800c1dc 	.word	0x0800c1dc
 8004834:	20000134 	.word	0x20000134
 8004838:	0800c1e4 	.word	0x0800c1e4
 800483c:	200002de 	.word	0x200002de
 8004840:	200002e3 	.word	0x200002e3
 8004844:	200002df 	.word	0x200002df
 8004848:	0800c1ec 	.word	0x0800c1ec
 	}
 	//Zamknięcie drzwi
	if (strcmp(received, "DM00") == 0 && strcmp(lastMessage, "DM00") != 0)
 800484c:	4983      	ldr	r1, [pc, #524]	; (8004a5c <main+0x19a4>)
 800484e:	4884      	ldr	r0, [pc, #528]	; (8004a60 <main+0x19a8>)
 8004850:	f7fb fcde 	bl	8000210 <strcmp>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10d      	bne.n	8004876 <main+0x17be>
 800485a:	4980      	ldr	r1, [pc, #512]	; (8004a5c <main+0x19a4>)
 800485c:	4881      	ldr	r0, [pc, #516]	; (8004a64 <main+0x19ac>)
 800485e:	f7fb fcd7 	bl	8000210 <strcmp>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d006      	beq.n	8004876 <main+0x17be>
	{
		//Logika do napisania

		strcpy(lastMessage, "DM00");
 8004868:	4b7e      	ldr	r3, [pc, #504]	; (8004a64 <main+0x19ac>)
 800486a:	4a7c      	ldr	r2, [pc, #496]	; (8004a5c <main+0x19a4>)
 800486c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004870:	6018      	str	r0, [r3, #0]
 8004872:	3304      	adds	r3, #4
 8004874:	7019      	strb	r1, [r3, #0]
	}

	//Otwarcie drzwi
	 if (strcmp(received, "DM01") == 0 && strcmp(lastMessage, "DM01") != 0)
 8004876:	497c      	ldr	r1, [pc, #496]	; (8004a68 <main+0x19b0>)
 8004878:	4879      	ldr	r0, [pc, #484]	; (8004a60 <main+0x19a8>)
 800487a:	f7fb fcc9 	bl	8000210 <strcmp>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10d      	bne.n	80048a0 <main+0x17e8>
 8004884:	4978      	ldr	r1, [pc, #480]	; (8004a68 <main+0x19b0>)
 8004886:	4877      	ldr	r0, [pc, #476]	; (8004a64 <main+0x19ac>)
 8004888:	f7fb fcc2 	bl	8000210 <strcmp>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d006      	beq.n	80048a0 <main+0x17e8>
	 {
		//Logika do napisania

		strcpy(lastMessage, "DM01");
 8004892:	4b74      	ldr	r3, [pc, #464]	; (8004a64 <main+0x19ac>)
 8004894:	4a74      	ldr	r2, [pc, #464]	; (8004a68 <main+0x19b0>)
 8004896:	e892 0003 	ldmia.w	r2, {r0, r1}
 800489a:	6018      	str	r0, [r3, #0]
 800489c:	3304      	adds	r3, #4
 800489e:	7019      	strb	r1, [r3, #0]
	 }

	 //Zamknięcie bramy
	if (strcmp(received, "GM00") == 0 && strcmp(lastMessage, "GM00") != 0)
 80048a0:	4972      	ldr	r1, [pc, #456]	; (8004a6c <main+0x19b4>)
 80048a2:	486f      	ldr	r0, [pc, #444]	; (8004a60 <main+0x19a8>)
 80048a4:	f7fb fcb4 	bl	8000210 <strcmp>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10d      	bne.n	80048ca <main+0x1812>
 80048ae:	496f      	ldr	r1, [pc, #444]	; (8004a6c <main+0x19b4>)
 80048b0:	486c      	ldr	r0, [pc, #432]	; (8004a64 <main+0x19ac>)
 80048b2:	f7fb fcad 	bl	8000210 <strcmp>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d006      	beq.n	80048ca <main+0x1812>
	{
		//Logika do napisania

		strcpy(lastMessage, "GM00");
 80048bc:	4b69      	ldr	r3, [pc, #420]	; (8004a64 <main+0x19ac>)
 80048be:	4a6b      	ldr	r2, [pc, #428]	; (8004a6c <main+0x19b4>)
 80048c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80048c4:	6018      	str	r0, [r3, #0]
 80048c6:	3304      	adds	r3, #4
 80048c8:	7019      	strb	r1, [r3, #0]
	}

	//Otwarcie bramy
	if (strcmp(received, "GM01") == 0 && strcmp(lastMessage, "GM01") != 0)
 80048ca:	4969      	ldr	r1, [pc, #420]	; (8004a70 <main+0x19b8>)
 80048cc:	4864      	ldr	r0, [pc, #400]	; (8004a60 <main+0x19a8>)
 80048ce:	f7fb fc9f 	bl	8000210 <strcmp>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10d      	bne.n	80048f4 <main+0x183c>
 80048d8:	4965      	ldr	r1, [pc, #404]	; (8004a70 <main+0x19b8>)
 80048da:	4862      	ldr	r0, [pc, #392]	; (8004a64 <main+0x19ac>)
 80048dc:	f7fb fc98 	bl	8000210 <strcmp>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d006      	beq.n	80048f4 <main+0x183c>
	{
		//Logika do napisania

		strcpy(lastMessage, "GM01");
 80048e6:	4b5f      	ldr	r3, [pc, #380]	; (8004a64 <main+0x19ac>)
 80048e8:	4a61      	ldr	r2, [pc, #388]	; (8004a70 <main+0x19b8>)
 80048ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80048ee:	6018      	str	r0, [r3, #0]
 80048f0:	3304      	adds	r3, #4
 80048f2:	7019      	strb	r1, [r3, #0]
	}

	//Zamknięcie rolety w kuchnii
	if (strcmp(received, "SK00") == 0 && strcmp(lastMessage, "SK00") != 0)
 80048f4:	495f      	ldr	r1, [pc, #380]	; (8004a74 <main+0x19bc>)
 80048f6:	485a      	ldr	r0, [pc, #360]	; (8004a60 <main+0x19a8>)
 80048f8:	f7fb fc8a 	bl	8000210 <strcmp>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10d      	bne.n	800491e <main+0x1866>
 8004902:	495c      	ldr	r1, [pc, #368]	; (8004a74 <main+0x19bc>)
 8004904:	4857      	ldr	r0, [pc, #348]	; (8004a64 <main+0x19ac>)
 8004906:	f7fb fc83 	bl	8000210 <strcmp>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d006      	beq.n	800491e <main+0x1866>
	{
		//Logika do napisania

		strcpy(lastMessage, "SK00");
 8004910:	4b54      	ldr	r3, [pc, #336]	; (8004a64 <main+0x19ac>)
 8004912:	4a58      	ldr	r2, [pc, #352]	; (8004a74 <main+0x19bc>)
 8004914:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004918:	6018      	str	r0, [r3, #0]
 800491a:	3304      	adds	r3, #4
 800491c:	7019      	strb	r1, [r3, #0]
	}

	//Otwarcie rolety w kuchnii
	if (strcmp(received, "SK01") == 0 && strcmp(lastMessage, "SK01") != 0)
 800491e:	4956      	ldr	r1, [pc, #344]	; (8004a78 <main+0x19c0>)
 8004920:	484f      	ldr	r0, [pc, #316]	; (8004a60 <main+0x19a8>)
 8004922:	f7fb fc75 	bl	8000210 <strcmp>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10d      	bne.n	8004948 <main+0x1890>
 800492c:	4952      	ldr	r1, [pc, #328]	; (8004a78 <main+0x19c0>)
 800492e:	484d      	ldr	r0, [pc, #308]	; (8004a64 <main+0x19ac>)
 8004930:	f7fb fc6e 	bl	8000210 <strcmp>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d006      	beq.n	8004948 <main+0x1890>
	{
		//Logika do napisania

		strcpy(lastMessage, "SK01");
 800493a:	4b4a      	ldr	r3, [pc, #296]	; (8004a64 <main+0x19ac>)
 800493c:	4a4e      	ldr	r2, [pc, #312]	; (8004a78 <main+0x19c0>)
 800493e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004942:	6018      	str	r0, [r3, #0]
 8004944:	3304      	adds	r3, #4
 8004946:	7019      	strb	r1, [r3, #0]
	}

	//Zamknięcie rolety w salonie
	if (strcmp(received, "SL00") == 0 && strcmp(lastMessage, "SL00") != 0)
 8004948:	494c      	ldr	r1, [pc, #304]	; (8004a7c <main+0x19c4>)
 800494a:	4845      	ldr	r0, [pc, #276]	; (8004a60 <main+0x19a8>)
 800494c:	f7fb fc60 	bl	8000210 <strcmp>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10d      	bne.n	8004972 <main+0x18ba>
 8004956:	4949      	ldr	r1, [pc, #292]	; (8004a7c <main+0x19c4>)
 8004958:	4842      	ldr	r0, [pc, #264]	; (8004a64 <main+0x19ac>)
 800495a:	f7fb fc59 	bl	8000210 <strcmp>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d006      	beq.n	8004972 <main+0x18ba>
	{
		//Logika do napisania

		strcpy(lastMessage, "SL00");
 8004964:	4b3f      	ldr	r3, [pc, #252]	; (8004a64 <main+0x19ac>)
 8004966:	4a45      	ldr	r2, [pc, #276]	; (8004a7c <main+0x19c4>)
 8004968:	e892 0003 	ldmia.w	r2, {r0, r1}
 800496c:	6018      	str	r0, [r3, #0]
 800496e:	3304      	adds	r3, #4
 8004970:	7019      	strb	r1, [r3, #0]
	}

	//Otwarcie rolety w salonie
	if (strcmp(received, "SL01") == 0 && strcmp(lastMessage, "SL01") != 0)
 8004972:	4943      	ldr	r1, [pc, #268]	; (8004a80 <main+0x19c8>)
 8004974:	483a      	ldr	r0, [pc, #232]	; (8004a60 <main+0x19a8>)
 8004976:	f7fb fc4b 	bl	8000210 <strcmp>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10d      	bne.n	800499c <main+0x18e4>
 8004980:	493f      	ldr	r1, [pc, #252]	; (8004a80 <main+0x19c8>)
 8004982:	4838      	ldr	r0, [pc, #224]	; (8004a64 <main+0x19ac>)
 8004984:	f7fb fc44 	bl	8000210 <strcmp>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d006      	beq.n	800499c <main+0x18e4>
	{
		//Logika do napisania

		strcpy(lastMessage, "SL01");
 800498e:	4b35      	ldr	r3, [pc, #212]	; (8004a64 <main+0x19ac>)
 8004990:	4a3b      	ldr	r2, [pc, #236]	; (8004a80 <main+0x19c8>)
 8004992:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004996:	6018      	str	r0, [r3, #0]
 8004998:	3304      	adds	r3, #4
 800499a:	7019      	strb	r1, [r3, #0]
	}


	//Zamknięcie rolety w garażu
	if (strcmp(received, "SG00") == 0 && strcmp(lastMessage, "SG00") != 0)
 800499c:	4939      	ldr	r1, [pc, #228]	; (8004a84 <main+0x19cc>)
 800499e:	4830      	ldr	r0, [pc, #192]	; (8004a60 <main+0x19a8>)
 80049a0:	f7fb fc36 	bl	8000210 <strcmp>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10d      	bne.n	80049c6 <main+0x190e>
 80049aa:	4936      	ldr	r1, [pc, #216]	; (8004a84 <main+0x19cc>)
 80049ac:	482d      	ldr	r0, [pc, #180]	; (8004a64 <main+0x19ac>)
 80049ae:	f7fb fc2f 	bl	8000210 <strcmp>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d006      	beq.n	80049c6 <main+0x190e>
	{
		//Logika do napisania

		strcpy(lastMessage, "SG00");
 80049b8:	4b2a      	ldr	r3, [pc, #168]	; (8004a64 <main+0x19ac>)
 80049ba:	4a32      	ldr	r2, [pc, #200]	; (8004a84 <main+0x19cc>)
 80049bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049c0:	6018      	str	r0, [r3, #0]
 80049c2:	3304      	adds	r3, #4
 80049c4:	7019      	strb	r1, [r3, #0]
	}

	//Otwarcie rolety w garażu
	if (strcmp(received, "SG01") == 0 && strcmp(lastMessage, "SG01") != 0)
 80049c6:	4930      	ldr	r1, [pc, #192]	; (8004a88 <main+0x19d0>)
 80049c8:	4825      	ldr	r0, [pc, #148]	; (8004a60 <main+0x19a8>)
 80049ca:	f7fb fc21 	bl	8000210 <strcmp>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10d      	bne.n	80049f0 <main+0x1938>
 80049d4:	492c      	ldr	r1, [pc, #176]	; (8004a88 <main+0x19d0>)
 80049d6:	4823      	ldr	r0, [pc, #140]	; (8004a64 <main+0x19ac>)
 80049d8:	f7fb fc1a 	bl	8000210 <strcmp>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d006      	beq.n	80049f0 <main+0x1938>
	{
		//Logika do napisania

		strcpy(lastMessage, "SG01");
 80049e2:	4b20      	ldr	r3, [pc, #128]	; (8004a64 <main+0x19ac>)
 80049e4:	4a28      	ldr	r2, [pc, #160]	; (8004a88 <main+0x19d0>)
 80049e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049ea:	6018      	str	r0, [r3, #0]
 80049ec:	3304      	adds	r3, #4
 80049ee:	7019      	strb	r1, [r3, #0]
	}

	//Wyłączenie systemu zasilania
	if (strcmp(received, "PW00") == 0 && strcmp(lastMessage, "PW00") != 0)
 80049f0:	4926      	ldr	r1, [pc, #152]	; (8004a8c <main+0x19d4>)
 80049f2:	481b      	ldr	r0, [pc, #108]	; (8004a60 <main+0x19a8>)
 80049f4:	f7fb fc0c 	bl	8000210 <strcmp>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10d      	bne.n	8004a1a <main+0x1962>
 80049fe:	4923      	ldr	r1, [pc, #140]	; (8004a8c <main+0x19d4>)
 8004a00:	4818      	ldr	r0, [pc, #96]	; (8004a64 <main+0x19ac>)
 8004a02:	f7fb fc05 	bl	8000210 <strcmp>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d006      	beq.n	8004a1a <main+0x1962>
	{
		//Logika do napisania

		strcpy(lastMessage, "PW00");
 8004a0c:	4b15      	ldr	r3, [pc, #84]	; (8004a64 <main+0x19ac>)
 8004a0e:	4a1f      	ldr	r2, [pc, #124]	; (8004a8c <main+0x19d4>)
 8004a10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a14:	6018      	str	r0, [r3, #0]
 8004a16:	3304      	adds	r3, #4
 8004a18:	7019      	strb	r1, [r3, #0]
	}

	//Włączenie systemu zasilania
	if (strcmp(received, "PW01") == 0 && strcmp(lastMessage, "PW01") != 0)
 8004a1a:	491d      	ldr	r1, [pc, #116]	; (8004a90 <main+0x19d8>)
 8004a1c:	4810      	ldr	r0, [pc, #64]	; (8004a60 <main+0x19a8>)
 8004a1e:	f7fb fbf7 	bl	8000210 <strcmp>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10d      	bne.n	8004a44 <main+0x198c>
 8004a28:	4919      	ldr	r1, [pc, #100]	; (8004a90 <main+0x19d8>)
 8004a2a:	480e      	ldr	r0, [pc, #56]	; (8004a64 <main+0x19ac>)
 8004a2c:	f7fb fbf0 	bl	8000210 <strcmp>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d006      	beq.n	8004a44 <main+0x198c>
	{
		//Logika do napisania

		strcpy(lastMessage, "PW01");
 8004a36:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <main+0x19ac>)
 8004a38:	4a15      	ldr	r2, [pc, #84]	; (8004a90 <main+0x19d8>)
 8004a3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a3e:	6018      	str	r0, [r3, #0]
 8004a40:	3304      	adds	r3, #4
 8004a42:	7019      	strb	r1, [r3, #0]
	}

	//Odbieranie zadanej temperatury
	if(received[0]=='T' && received[1]=='M' )	//Suwak jasności garaż
 8004a44:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <main+0x19a8>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	2b54      	cmp	r3, #84	; 0x54
 	////////////////////////////////////////////////////////////////////////////////////
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

 	sendBluetoothData("70");
 8004a4a:	4812      	ldr	r0, [pc, #72]	; (8004a94 <main+0x19dc>)
 8004a4c:	f7fe fa9a 	bl	8002f84 <sendBluetoothData>
 	sendBluetoothData("23");
 8004a50:	4811      	ldr	r0, [pc, #68]	; (8004a98 <main+0x19e0>)
 8004a52:	f7fe fa97 	bl	8002f84 <sendBluetoothData>
	  if(HAL_GPIO_ReadPin(PIR_Garage_GPIO_Port, PIR_Garage_Pin) == GPIO_PIN_SET){PIR_Garage = true;}
 8004a56:	f7fe bb7a 	b.w	800314e <main+0x96>
 8004a5a:	bf00      	nop
 8004a5c:	0800c1f4 	.word	0x0800c1f4
 8004a60:	200002d0 	.word	0x200002d0
 8004a64:	200002d8 	.word	0x200002d8
 8004a68:	0800c1fc 	.word	0x0800c1fc
 8004a6c:	0800c204 	.word	0x0800c204
 8004a70:	0800c20c 	.word	0x0800c20c
 8004a74:	0800c214 	.word	0x0800c214
 8004a78:	0800c21c 	.word	0x0800c21c
 8004a7c:	0800c224 	.word	0x0800c224
 8004a80:	0800c22c 	.word	0x0800c22c
 8004a84:	0800c234 	.word	0x0800c234
 8004a88:	0800c23c 	.word	0x0800c23c
 8004a8c:	0800c244 	.word	0x0800c244
 8004a90:	0800c24c 	.word	0x0800c24c
 8004a94:	0800c254 	.word	0x0800c254
 8004a98:	0800c258 	.word	0x0800c258

08004a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b094      	sub	sp, #80	; 0x50
 8004aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004aa2:	f107 0320 	add.w	r3, r7, #32
 8004aa6:	2230      	movs	r2, #48	; 0x30
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f006 fd3a 	bl	800b524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ab0:	f107 030c 	add.w	r3, r7, #12
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	605a      	str	r2, [r3, #4]
 8004aba:	609a      	str	r2, [r3, #8]
 8004abc:	60da      	str	r2, [r3, #12]
 8004abe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004ac0:	f002 f8f4 	bl	8006cac <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ac4:	4b27      	ldr	r3, [pc, #156]	; (8004b64 <SystemClock_Config+0xc8>)
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	4a26      	ldr	r2, [pc, #152]	; (8004b64 <SystemClock_Config+0xc8>)
 8004aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ace:	6413      	str	r3, [r2, #64]	; 0x40
 8004ad0:	4b24      	ldr	r3, [pc, #144]	; (8004b64 <SystemClock_Config+0xc8>)
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad8:	60bb      	str	r3, [r7, #8]
 8004ada:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004adc:	4b22      	ldr	r3, [pc, #136]	; (8004b68 <SystemClock_Config+0xcc>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004ae4:	4a20      	ldr	r2, [pc, #128]	; (8004b68 <SystemClock_Config+0xcc>)
 8004ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004aea:	6013      	str	r3, [r2, #0]
 8004aec:	4b1e      	ldr	r3, [pc, #120]	; (8004b68 <SystemClock_Config+0xcc>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004af4:	607b      	str	r3, [r7, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004af8:	2302      	movs	r3, #2
 8004afa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004afc:	2301      	movs	r3, #1
 8004afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b00:	2310      	movs	r3, #16
 8004b02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b04:	2302      	movs	r3, #2
 8004b06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004b0c:	2308      	movs	r3, #8
 8004b0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8004b10:	2348      	movs	r3, #72	; 0x48
 8004b12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004b14:	2302      	movs	r3, #2
 8004b16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b1c:	f107 0320 	add.w	r3, r7, #32
 8004b20:	4618      	mov	r0, r3
 8004b22:	f002 f8d3 	bl	8006ccc <HAL_RCC_OscConfig>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004b2c:	f000 f81e 	bl	8004b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b30:	230f      	movs	r3, #15
 8004b32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b34:	2302      	movs	r3, #2
 8004b36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b42:	2300      	movs	r3, #0
 8004b44:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004b46:	f107 030c 	add.w	r3, r7, #12
 8004b4a:	2102      	movs	r1, #2
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f002 fb61 	bl	8007214 <HAL_RCC_ClockConfig>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004b58:	f000 f808 	bl	8004b6c <Error_Handler>
  }
}
 8004b5c:	bf00      	nop
 8004b5e:	3750      	adds	r7, #80	; 0x50
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40023800 	.word	0x40023800
 8004b68:	40007000 	.word	0x40007000

08004b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b70:	b672      	cpsid	i
}
 8004b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004b74:	e7fe      	b.n	8004b74 <Error_Handler+0x8>
	...

08004b78 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8004b7c:	4b1b      	ldr	r3, [pc, #108]	; (8004bec <MX_SPI4_Init+0x74>)
 8004b7e:	4a1c      	ldr	r2, [pc, #112]	; (8004bf0 <MX_SPI4_Init+0x78>)
 8004b80:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8004b82:	4b1a      	ldr	r3, [pc, #104]	; (8004bec <MX_SPI4_Init+0x74>)
 8004b84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b88:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8004b8a:	4b18      	ldr	r3, [pc, #96]	; (8004bec <MX_SPI4_Init+0x74>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b90:	4b16      	ldr	r3, [pc, #88]	; (8004bec <MX_SPI4_Init+0x74>)
 8004b92:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004b96:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004b98:	4b14      	ldr	r3, [pc, #80]	; (8004bec <MX_SPI4_Init+0x74>)
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004b9e:	4b13      	ldr	r3, [pc, #76]	; (8004bec <MX_SPI4_Init+0x74>)
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004ba4:	4b11      	ldr	r3, [pc, #68]	; (8004bec <MX_SPI4_Init+0x74>)
 8004ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004baa:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004bac:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <MX_SPI4_Init+0x74>)
 8004bae:	2210      	movs	r2, #16
 8004bb0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004bb2:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <MX_SPI4_Init+0x74>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <MX_SPI4_Init+0x74>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bbe:	4b0b      	ldr	r3, [pc, #44]	; (8004bec <MX_SPI4_Init+0x74>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8004bc4:	4b09      	ldr	r3, [pc, #36]	; (8004bec <MX_SPI4_Init+0x74>)
 8004bc6:	2207      	movs	r2, #7
 8004bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004bca:	4b08      	ldr	r3, [pc, #32]	; (8004bec <MX_SPI4_Init+0x74>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004bd0:	4b06      	ldr	r3, [pc, #24]	; (8004bec <MX_SPI4_Init+0x74>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004bd6:	4805      	ldr	r0, [pc, #20]	; (8004bec <MX_SPI4_Init+0x74>)
 8004bd8:	f003 f932 	bl	8007e40 <HAL_SPI_Init>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8004be2:	f7ff ffc3 	bl	8004b6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8004be6:	bf00      	nop
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000358 	.word	0x20000358
 8004bf0:	40013400 	.word	0x40013400

08004bf4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08a      	sub	sp, #40	; 0x28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bfc:	f107 0314 	add.w	r3, r7, #20
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	605a      	str	r2, [r3, #4]
 8004c06:	609a      	str	r2, [r3, #8]
 8004c08:	60da      	str	r2, [r3, #12]
 8004c0a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a1b      	ldr	r2, [pc, #108]	; (8004c80 <HAL_SPI_MspInit+0x8c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d12f      	bne.n	8004c76 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004c16:	4b1b      	ldr	r3, [pc, #108]	; (8004c84 <HAL_SPI_MspInit+0x90>)
 8004c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1a:	4a1a      	ldr	r2, [pc, #104]	; (8004c84 <HAL_SPI_MspInit+0x90>)
 8004c1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c20:	6453      	str	r3, [r2, #68]	; 0x44
 8004c22:	4b18      	ldr	r3, [pc, #96]	; (8004c84 <HAL_SPI_MspInit+0x90>)
 8004c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c2a:	613b      	str	r3, [r7, #16]
 8004c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c2e:	4b15      	ldr	r3, [pc, #84]	; (8004c84 <HAL_SPI_MspInit+0x90>)
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	4a14      	ldr	r2, [pc, #80]	; (8004c84 <HAL_SPI_MspInit+0x90>)
 8004c34:	f043 0310 	orr.w	r3, r3, #16
 8004c38:	6313      	str	r3, [r2, #48]	; 0x30
 8004c3a:	4b12      	ldr	r3, [pc, #72]	; (8004c84 <HAL_SPI_MspInit+0x90>)
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = SPI4_SCK_temperature_Pin|SPI4_MISO_temperature_Pin|SPI4_MOSI_temperature_Pin;
 8004c46:	2364      	movs	r3, #100	; 0x64
 8004c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c52:	2303      	movs	r3, #3
 8004c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004c56:	2305      	movs	r3, #5
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c5a:	f107 0314 	add.w	r3, r7, #20
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4809      	ldr	r0, [pc, #36]	; (8004c88 <HAL_SPI_MspInit+0x94>)
 8004c62:	f000 ff0f 	bl	8005a84 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8004c66:	2200      	movs	r2, #0
 8004c68:	2100      	movs	r1, #0
 8004c6a:	2054      	movs	r0, #84	; 0x54
 8004c6c:	f000 feb1 	bl	80059d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8004c70:	2054      	movs	r0, #84	; 0x54
 8004c72:	f000 feca 	bl	8005a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8004c76:	bf00      	nop
 8004c78:	3728      	adds	r7, #40	; 0x28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	40013400 	.word	0x40013400
 8004c84:	40023800 	.word	0x40023800
 8004c88:	40021000 	.word	0x40021000

08004c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004c92:	4b0f      	ldr	r3, [pc, #60]	; (8004cd0 <HAL_MspInit+0x44>)
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	4a0e      	ldr	r2, [pc, #56]	; (8004cd0 <HAL_MspInit+0x44>)
 8004c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c9e:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <HAL_MspInit+0x44>)
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	607b      	str	r3, [r7, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004caa:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <HAL_MspInit+0x44>)
 8004cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cae:	4a08      	ldr	r2, [pc, #32]	; (8004cd0 <HAL_MspInit+0x44>)
 8004cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8004cb6:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <HAL_MspInit+0x44>)
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	40023800 	.word	0x40023800

08004cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004cd8:	e7fe      	b.n	8004cd8 <NMI_Handler+0x4>

08004cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004cde:	e7fe      	b.n	8004cde <HardFault_Handler+0x4>

08004ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ce4:	e7fe      	b.n	8004ce4 <MemManage_Handler+0x4>

08004ce6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004cea:	e7fe      	b.n	8004cea <BusFault_Handler+0x4>

08004cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004cf0:	e7fe      	b.n	8004cf0 <UsageFault_Handler+0x4>

08004cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004cf6:	bf00      	nop
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d04:	bf00      	nop
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d12:	bf00      	nop
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d20:	f000 fd38 	bl	8005794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d24:	bf00      	nop
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004d2c:	4802      	ldr	r0, [pc, #8]	; (8004d38 <TIM1_CC_IRQHandler+0x10>)
 8004d2e:	f004 fbd5 	bl	80094dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004d32:	bf00      	nop
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	200003c0 	.word	0x200003c0

08004d3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004d40:	4802      	ldr	r0, [pc, #8]	; (8004d4c <TIM2_IRQHandler+0x10>)
 8004d42:	f004 fbcb 	bl	80094dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004d46:	bf00      	nop
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	2000040c 	.word	0x2000040c

08004d50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004d54:	4802      	ldr	r0, [pc, #8]	; (8004d60 <TIM3_IRQHandler+0x10>)
 8004d56:	f004 fbc1 	bl	80094dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004d5a:	bf00      	nop
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	20000458 	.word	0x20000458

08004d64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004d68:	4802      	ldr	r0, [pc, #8]	; (8004d74 <TIM4_IRQHandler+0x10>)
 8004d6a:	f004 fbb7 	bl	80094dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004d6e:	bf00      	nop
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	200004a4 	.word	0x200004a4

08004d78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8004d7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004d80:	f001 f878 	bl	8005e74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004d84:	bf00      	nop
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8004d8c:	4802      	ldr	r0, [pc, #8]	; (8004d98 <SPI4_IRQHandler+0x10>)
 8004d8e:	f003 fdb3 	bl	80088f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8004d92:	bf00      	nop
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20000358 	.word	0x20000358

08004d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004da4:	4a14      	ldr	r2, [pc, #80]	; (8004df8 <_sbrk+0x5c>)
 8004da6:	4b15      	ldr	r3, [pc, #84]	; (8004dfc <_sbrk+0x60>)
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004db0:	4b13      	ldr	r3, [pc, #76]	; (8004e00 <_sbrk+0x64>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d102      	bne.n	8004dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004db8:	4b11      	ldr	r3, [pc, #68]	; (8004e00 <_sbrk+0x64>)
 8004dba:	4a12      	ldr	r2, [pc, #72]	; (8004e04 <_sbrk+0x68>)
 8004dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004dbe:	4b10      	ldr	r3, [pc, #64]	; (8004e00 <_sbrk+0x64>)
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d207      	bcs.n	8004ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004dcc:	f006 fbb2 	bl	800b534 <__errno>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	220c      	movs	r2, #12
 8004dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dda:	e009      	b.n	8004df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ddc:	4b08      	ldr	r3, [pc, #32]	; (8004e00 <_sbrk+0x64>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004de2:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <_sbrk+0x64>)
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4413      	add	r3, r2
 8004dea:	4a05      	ldr	r2, [pc, #20]	; (8004e00 <_sbrk+0x64>)
 8004dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004dee:	68fb      	ldr	r3, [r7, #12]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	20050000 	.word	0x20050000
 8004dfc:	00000400 	.word	0x00000400
 8004e00:	200003bc 	.word	0x200003bc
 8004e04:	200006c8 	.word	0x200006c8

08004e08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e0c:	4b06      	ldr	r3, [pc, #24]	; (8004e28 <SystemInit+0x20>)
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e12:	4a05      	ldr	r2, [pc, #20]	; (8004e28 <SystemInit+0x20>)
 8004e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e1c:	bf00      	nop
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	e000ed00 	.word	0xe000ed00

08004e2c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b09a      	sub	sp, #104	; 0x68
 8004e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	605a      	str	r2, [r3, #4]
 8004e3c:	609a      	str	r2, [r3, #8]
 8004e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	605a      	str	r2, [r3, #4]
 8004e4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	605a      	str	r2, [r3, #4]
 8004e56:	609a      	str	r2, [r3, #8]
 8004e58:	60da      	str	r2, [r3, #12]
 8004e5a:	611a      	str	r2, [r3, #16]
 8004e5c:	615a      	str	r2, [r3, #20]
 8004e5e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004e60:	1d3b      	adds	r3, r7, #4
 8004e62:	222c      	movs	r2, #44	; 0x2c
 8004e64:	2100      	movs	r1, #0
 8004e66:	4618      	mov	r0, r3
 8004e68:	f006 fb5c 	bl	800b524 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004e6c:	4b55      	ldr	r3, [pc, #340]	; (8004fc4 <MX_TIM1_Init+0x198>)
 8004e6e:	4a56      	ldr	r2, [pc, #344]	; (8004fc8 <MX_TIM1_Init+0x19c>)
 8004e70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8004e72:	4b54      	ldr	r3, [pc, #336]	; (8004fc4 <MX_TIM1_Init+0x198>)
 8004e74:	2247      	movs	r2, #71	; 0x47
 8004e76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e78:	4b52      	ldr	r3, [pc, #328]	; (8004fc4 <MX_TIM1_Init+0x198>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8004e7e:	4b51      	ldr	r3, [pc, #324]	; (8004fc4 <MX_TIM1_Init+0x198>)
 8004e80:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004e84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e86:	4b4f      	ldr	r3, [pc, #316]	; (8004fc4 <MX_TIM1_Init+0x198>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004e8c:	4b4d      	ldr	r3, [pc, #308]	; (8004fc4 <MX_TIM1_Init+0x198>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e92:	4b4c      	ldr	r3, [pc, #304]	; (8004fc4 <MX_TIM1_Init+0x198>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004e98:	484a      	ldr	r0, [pc, #296]	; (8004fc4 <MX_TIM1_Init+0x198>)
 8004e9a:	f004 f845 	bl	8008f28 <HAL_TIM_Base_Init>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004ea4:	f7ff fe62 	bl	8004b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eac:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004eae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4843      	ldr	r0, [pc, #268]	; (8004fc4 <MX_TIM1_Init+0x198>)
 8004eb6:	f004 fd45 	bl	8009944 <HAL_TIM_ConfigClockSource>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004ec0:	f7ff fe54 	bl	8004b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004ec4:	483f      	ldr	r0, [pc, #252]	; (8004fc4 <MX_TIM1_Init+0x198>)
 8004ec6:	f004 f92e 	bl	8009126 <HAL_TIM_PWM_Init>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004ed0:	f7ff fe4c 	bl	8004b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004edc:	2300      	movs	r3, #0
 8004ede:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004ee0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4837      	ldr	r0, [pc, #220]	; (8004fc4 <MX_TIM1_Init+0x198>)
 8004ee8:	f005 f9dc 	bl	800a2a4 <HAL_TIMEx_MasterConfigSynchronization>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004ef2:	f7ff fe3b 	bl	8004b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ef6:	2360      	movs	r3, #96	; 0x60
 8004ef8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8004efa:	2300      	movs	r3, #0
 8004efc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004efe:	2300      	movs	r3, #0
 8004f00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004f02:	2300      	movs	r3, #0
 8004f04:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f06:	2300      	movs	r3, #0
 8004f08:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f16:	2200      	movs	r2, #0
 8004f18:	4619      	mov	r1, r3
 8004f1a:	482a      	ldr	r0, [pc, #168]	; (8004fc4 <MX_TIM1_Init+0x198>)
 8004f1c:	f004 fbfe 	bl	800971c <HAL_TIM_PWM_ConfigChannel>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8004f26:	f7ff fe21 	bl	8004b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004f2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f2e:	2204      	movs	r2, #4
 8004f30:	4619      	mov	r1, r3
 8004f32:	4824      	ldr	r0, [pc, #144]	; (8004fc4 <MX_TIM1_Init+0x198>)
 8004f34:	f004 fbf2 	bl	800971c <HAL_TIM_PWM_ConfigChannel>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8004f3e:	f7ff fe15 	bl	8004b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004f42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f46:	2208      	movs	r2, #8
 8004f48:	4619      	mov	r1, r3
 8004f4a:	481e      	ldr	r0, [pc, #120]	; (8004fc4 <MX_TIM1_Init+0x198>)
 8004f4c:	f004 fbe6 	bl	800971c <HAL_TIM_PWM_ConfigChannel>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8004f56:	f7ff fe09 	bl	8004b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004f5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f5e:	220c      	movs	r2, #12
 8004f60:	4619      	mov	r1, r3
 8004f62:	4818      	ldr	r0, [pc, #96]	; (8004fc4 <MX_TIM1_Init+0x198>)
 8004f64:	f004 fbda 	bl	800971c <HAL_TIM_PWM_ConfigChannel>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8004f6e:	f7ff fdfd 	bl	8004b6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004f72:	2300      	movs	r3, #0
 8004f74:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004f86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f8a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004f90:	2300      	movs	r3, #0
 8004f92:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004f94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004fa2:	1d3b      	adds	r3, r7, #4
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	4807      	ldr	r0, [pc, #28]	; (8004fc4 <MX_TIM1_Init+0x198>)
 8004fa8:	f005 fa0a 	bl	800a3c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8004fb2:	f7ff fddb 	bl	8004b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004fb6:	4803      	ldr	r0, [pc, #12]	; (8004fc4 <MX_TIM1_Init+0x198>)
 8004fb8:	f000 fa10 	bl	80053dc <HAL_TIM_MspPostInit>

}
 8004fbc:	bf00      	nop
 8004fbe:	3768      	adds	r7, #104	; 0x68
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	200003c0 	.word	0x200003c0
 8004fc8:	40010000 	.word	0x40010000

08004fcc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08e      	sub	sp, #56	; 0x38
 8004fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004fd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	605a      	str	r2, [r3, #4]
 8004fdc:	609a      	str	r2, [r3, #8]
 8004fde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fe0:	f107 031c 	add.w	r3, r7, #28
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	605a      	str	r2, [r3, #4]
 8004fea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004fec:	463b      	mov	r3, r7
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	605a      	str	r2, [r3, #4]
 8004ff4:	609a      	str	r2, [r3, #8]
 8004ff6:	60da      	str	r2, [r3, #12]
 8004ff8:	611a      	str	r2, [r3, #16]
 8004ffa:	615a      	str	r2, [r3, #20]
 8004ffc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004ffe:	4b3b      	ldr	r3, [pc, #236]	; (80050ec <MX_TIM2_Init+0x120>)
 8005000:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005004:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8005006:	4b39      	ldr	r3, [pc, #228]	; (80050ec <MX_TIM2_Init+0x120>)
 8005008:	2247      	movs	r2, #71	; 0x47
 800500a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800500c:	4b37      	ldr	r3, [pc, #220]	; (80050ec <MX_TIM2_Init+0x120>)
 800500e:	2200      	movs	r2, #0
 8005010:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8005012:	4b36      	ldr	r3, [pc, #216]	; (80050ec <MX_TIM2_Init+0x120>)
 8005014:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005018:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800501a:	4b34      	ldr	r3, [pc, #208]	; (80050ec <MX_TIM2_Init+0x120>)
 800501c:	2200      	movs	r2, #0
 800501e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005020:	4b32      	ldr	r3, [pc, #200]	; (80050ec <MX_TIM2_Init+0x120>)
 8005022:	2200      	movs	r2, #0
 8005024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005026:	4831      	ldr	r0, [pc, #196]	; (80050ec <MX_TIM2_Init+0x120>)
 8005028:	f003 ff7e 	bl	8008f28 <HAL_TIM_Base_Init>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8005032:	f7ff fd9b 	bl	8004b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800503a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800503c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005040:	4619      	mov	r1, r3
 8005042:	482a      	ldr	r0, [pc, #168]	; (80050ec <MX_TIM2_Init+0x120>)
 8005044:	f004 fc7e 	bl	8009944 <HAL_TIM_ConfigClockSource>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800504e:	f7ff fd8d 	bl	8004b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005052:	4826      	ldr	r0, [pc, #152]	; (80050ec <MX_TIM2_Init+0x120>)
 8005054:	f004 f867 	bl	8009126 <HAL_TIM_PWM_Init>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800505e:	f7ff fd85 	bl	8004b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005062:	2300      	movs	r3, #0
 8005064:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005066:	2300      	movs	r3, #0
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800506a:	f107 031c 	add.w	r3, r7, #28
 800506e:	4619      	mov	r1, r3
 8005070:	481e      	ldr	r0, [pc, #120]	; (80050ec <MX_TIM2_Init+0x120>)
 8005072:	f005 f917 	bl	800a2a4 <HAL_TIMEx_MasterConfigSynchronization>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800507c:	f7ff fd76 	bl	8004b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005080:	2360      	movs	r3, #96	; 0x60
 8005082:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8005084:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005088:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800508a:	2300      	movs	r3, #0
 800508c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800508e:	2300      	movs	r3, #0
 8005090:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005092:	463b      	mov	r3, r7
 8005094:	2200      	movs	r2, #0
 8005096:	4619      	mov	r1, r3
 8005098:	4814      	ldr	r0, [pc, #80]	; (80050ec <MX_TIM2_Init+0x120>)
 800509a:	f004 fb3f 	bl	800971c <HAL_TIM_PWM_ConfigChannel>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80050a4:	f7ff fd62 	bl	8004b6c <Error_Handler>
  }
  sConfigOC.Pulse = 10;
 80050a8:	230a      	movs	r3, #10
 80050aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80050ac:	463b      	mov	r3, r7
 80050ae:	2208      	movs	r2, #8
 80050b0:	4619      	mov	r1, r3
 80050b2:	480e      	ldr	r0, [pc, #56]	; (80050ec <MX_TIM2_Init+0x120>)
 80050b4:	f004 fb32 	bl	800971c <HAL_TIM_PWM_ConfigChannel>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 80050be:	f7ff fd55 	bl	8004b6c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80050c2:	2300      	movs	r3, #0
 80050c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80050c6:	463b      	mov	r3, r7
 80050c8:	220c      	movs	r2, #12
 80050ca:	4619      	mov	r1, r3
 80050cc:	4807      	ldr	r0, [pc, #28]	; (80050ec <MX_TIM2_Init+0x120>)
 80050ce:	f004 fb25 	bl	800971c <HAL_TIM_PWM_ConfigChannel>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 80050d8:	f7ff fd48 	bl	8004b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80050dc:	4803      	ldr	r0, [pc, #12]	; (80050ec <MX_TIM2_Init+0x120>)
 80050de:	f000 f97d 	bl	80053dc <HAL_TIM_MspPostInit>

}
 80050e2:	bf00      	nop
 80050e4:	3738      	adds	r7, #56	; 0x38
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	2000040c 	.word	0x2000040c

080050f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08e      	sub	sp, #56	; 0x38
 80050f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	605a      	str	r2, [r3, #4]
 8005100:	609a      	str	r2, [r3, #8]
 8005102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005104:	f107 031c 	add.w	r3, r7, #28
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	605a      	str	r2, [r3, #4]
 800510e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005110:	463b      	mov	r3, r7
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	605a      	str	r2, [r3, #4]
 8005118:	609a      	str	r2, [r3, #8]
 800511a:	60da      	str	r2, [r3, #12]
 800511c:	611a      	str	r2, [r3, #16]
 800511e:	615a      	str	r2, [r3, #20]
 8005120:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005122:	4b2d      	ldr	r3, [pc, #180]	; (80051d8 <MX_TIM3_Init+0xe8>)
 8005124:	4a2d      	ldr	r2, [pc, #180]	; (80051dc <MX_TIM3_Init+0xec>)
 8005126:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8005128:	4b2b      	ldr	r3, [pc, #172]	; (80051d8 <MX_TIM3_Init+0xe8>)
 800512a:	2247      	movs	r2, #71	; 0x47
 800512c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800512e:	4b2a      	ldr	r3, [pc, #168]	; (80051d8 <MX_TIM3_Init+0xe8>)
 8005130:	2200      	movs	r2, #0
 8005132:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8005134:	4b28      	ldr	r3, [pc, #160]	; (80051d8 <MX_TIM3_Init+0xe8>)
 8005136:	f644 6220 	movw	r2, #20000	; 0x4e20
 800513a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800513c:	4b26      	ldr	r3, [pc, #152]	; (80051d8 <MX_TIM3_Init+0xe8>)
 800513e:	2200      	movs	r2, #0
 8005140:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005142:	4b25      	ldr	r3, [pc, #148]	; (80051d8 <MX_TIM3_Init+0xe8>)
 8005144:	2200      	movs	r2, #0
 8005146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005148:	4823      	ldr	r0, [pc, #140]	; (80051d8 <MX_TIM3_Init+0xe8>)
 800514a:	f003 feed 	bl	8008f28 <HAL_TIM_Base_Init>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8005154:	f7ff fd0a 	bl	8004b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800515c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800515e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005162:	4619      	mov	r1, r3
 8005164:	481c      	ldr	r0, [pc, #112]	; (80051d8 <MX_TIM3_Init+0xe8>)
 8005166:	f004 fbed 	bl	8009944 <HAL_TIM_ConfigClockSource>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005170:	f7ff fcfc 	bl	8004b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005174:	4818      	ldr	r0, [pc, #96]	; (80051d8 <MX_TIM3_Init+0xe8>)
 8005176:	f003 ffd6 	bl	8009126 <HAL_TIM_PWM_Init>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005180:	f7ff fcf4 	bl	8004b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005184:	2300      	movs	r3, #0
 8005186:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005188:	2300      	movs	r3, #0
 800518a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800518c:	f107 031c 	add.w	r3, r7, #28
 8005190:	4619      	mov	r1, r3
 8005192:	4811      	ldr	r0, [pc, #68]	; (80051d8 <MX_TIM3_Init+0xe8>)
 8005194:	f005 f886 	bl	800a2a4 <HAL_TIMEx_MasterConfigSynchronization>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800519e:	f7ff fce5 	bl	8004b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80051a2:	2360      	movs	r3, #96	; 0x60
 80051a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80051aa:	2300      	movs	r3, #0
 80051ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80051ae:	2300      	movs	r3, #0
 80051b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80051b2:	463b      	mov	r3, r7
 80051b4:	220c      	movs	r2, #12
 80051b6:	4619      	mov	r1, r3
 80051b8:	4807      	ldr	r0, [pc, #28]	; (80051d8 <MX_TIM3_Init+0xe8>)
 80051ba:	f004 faaf 	bl	800971c <HAL_TIM_PWM_ConfigChannel>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80051c4:	f7ff fcd2 	bl	8004b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80051c8:	4803      	ldr	r0, [pc, #12]	; (80051d8 <MX_TIM3_Init+0xe8>)
 80051ca:	f000 f907 	bl	80053dc <HAL_TIM_MspPostInit>

}
 80051ce:	bf00      	nop
 80051d0:	3738      	adds	r7, #56	; 0x38
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20000458 	.word	0x20000458
 80051dc:	40000400 	.word	0x40000400

080051e0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08e      	sub	sp, #56	; 0x38
 80051e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80051e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	605a      	str	r2, [r3, #4]
 80051f0:	609a      	str	r2, [r3, #8]
 80051f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051f4:	f107 031c 	add.w	r3, r7, #28
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	605a      	str	r2, [r3, #4]
 80051fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005200:	463b      	mov	r3, r7
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	605a      	str	r2, [r3, #4]
 8005208:	609a      	str	r2, [r3, #8]
 800520a:	60da      	str	r2, [r3, #12]
 800520c:	611a      	str	r2, [r3, #16]
 800520e:	615a      	str	r2, [r3, #20]
 8005210:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005212:	4b34      	ldr	r3, [pc, #208]	; (80052e4 <MX_TIM4_Init+0x104>)
 8005214:	4a34      	ldr	r2, [pc, #208]	; (80052e8 <MX_TIM4_Init+0x108>)
 8005216:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8005218:	4b32      	ldr	r3, [pc, #200]	; (80052e4 <MX_TIM4_Init+0x104>)
 800521a:	2247      	movs	r2, #71	; 0x47
 800521c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800521e:	4b31      	ldr	r3, [pc, #196]	; (80052e4 <MX_TIM4_Init+0x104>)
 8005220:	2200      	movs	r2, #0
 8005222:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8005224:	4b2f      	ldr	r3, [pc, #188]	; (80052e4 <MX_TIM4_Init+0x104>)
 8005226:	f240 32e7 	movw	r2, #999	; 0x3e7
 800522a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800522c:	4b2d      	ldr	r3, [pc, #180]	; (80052e4 <MX_TIM4_Init+0x104>)
 800522e:	2200      	movs	r2, #0
 8005230:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005232:	4b2c      	ldr	r3, [pc, #176]	; (80052e4 <MX_TIM4_Init+0x104>)
 8005234:	2200      	movs	r2, #0
 8005236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005238:	482a      	ldr	r0, [pc, #168]	; (80052e4 <MX_TIM4_Init+0x104>)
 800523a:	f003 fe75 	bl	8008f28 <HAL_TIM_Base_Init>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8005244:	f7ff fc92 	bl	8004b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800524c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800524e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005252:	4619      	mov	r1, r3
 8005254:	4823      	ldr	r0, [pc, #140]	; (80052e4 <MX_TIM4_Init+0x104>)
 8005256:	f004 fb75 	bl	8009944 <HAL_TIM_ConfigClockSource>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8005260:	f7ff fc84 	bl	8004b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005264:	481f      	ldr	r0, [pc, #124]	; (80052e4 <MX_TIM4_Init+0x104>)
 8005266:	f003 ff5e 	bl	8009126 <HAL_TIM_PWM_Init>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8005270:	f7ff fc7c 	bl	8004b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005274:	2300      	movs	r3, #0
 8005276:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005278:	2300      	movs	r3, #0
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800527c:	f107 031c 	add.w	r3, r7, #28
 8005280:	4619      	mov	r1, r3
 8005282:	4818      	ldr	r0, [pc, #96]	; (80052e4 <MX_TIM4_Init+0x104>)
 8005284:	f005 f80e 	bl	800a2a4 <HAL_TIMEx_MasterConfigSynchronization>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800528e:	f7ff fc6d 	bl	8004b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005292:	2360      	movs	r3, #96	; 0x60
 8005294:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8005296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800529a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800529c:	2300      	movs	r3, #0
 800529e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052a0:	2300      	movs	r3, #0
 80052a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80052a4:	463b      	mov	r3, r7
 80052a6:	2200      	movs	r2, #0
 80052a8:	4619      	mov	r1, r3
 80052aa:	480e      	ldr	r0, [pc, #56]	; (80052e4 <MX_TIM4_Init+0x104>)
 80052ac:	f004 fa36 	bl	800971c <HAL_TIM_PWM_ConfigChannel>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80052b6:	f7ff fc59 	bl	8004b6c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80052ba:	2300      	movs	r3, #0
 80052bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80052be:	463b      	mov	r3, r7
 80052c0:	2208      	movs	r2, #8
 80052c2:	4619      	mov	r1, r3
 80052c4:	4807      	ldr	r0, [pc, #28]	; (80052e4 <MX_TIM4_Init+0x104>)
 80052c6:	f004 fa29 	bl	800971c <HAL_TIM_PWM_ConfigChannel>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 80052d0:	f7ff fc4c 	bl	8004b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80052d4:	4803      	ldr	r0, [pc, #12]	; (80052e4 <MX_TIM4_Init+0x104>)
 80052d6:	f000 f881 	bl	80053dc <HAL_TIM_MspPostInit>

}
 80052da:	bf00      	nop
 80052dc:	3738      	adds	r7, #56	; 0x38
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	200004a4 	.word	0x200004a4
 80052e8:	40000800 	.word	0x40000800

080052ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a34      	ldr	r2, [pc, #208]	; (80053cc <HAL_TIM_Base_MspInit+0xe0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d114      	bne.n	8005328 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80052fe:	4b34      	ldr	r3, [pc, #208]	; (80053d0 <HAL_TIM_Base_MspInit+0xe4>)
 8005300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005302:	4a33      	ldr	r2, [pc, #204]	; (80053d0 <HAL_TIM_Base_MspInit+0xe4>)
 8005304:	f043 0301 	orr.w	r3, r3, #1
 8005308:	6453      	str	r3, [r2, #68]	; 0x44
 800530a:	4b31      	ldr	r3, [pc, #196]	; (80053d0 <HAL_TIM_Base_MspInit+0xe4>)
 800530c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8005316:	2200      	movs	r2, #0
 8005318:	2100      	movs	r1, #0
 800531a:	201b      	movs	r0, #27
 800531c:	f000 fb59 	bl	80059d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005320:	201b      	movs	r0, #27
 8005322:	f000 fb72 	bl	8005a0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005326:	e04c      	b.n	80053c2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005330:	d114      	bne.n	800535c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005332:	4b27      	ldr	r3, [pc, #156]	; (80053d0 <HAL_TIM_Base_MspInit+0xe4>)
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	4a26      	ldr	r2, [pc, #152]	; (80053d0 <HAL_TIM_Base_MspInit+0xe4>)
 8005338:	f043 0301 	orr.w	r3, r3, #1
 800533c:	6413      	str	r3, [r2, #64]	; 0x40
 800533e:	4b24      	ldr	r3, [pc, #144]	; (80053d0 <HAL_TIM_Base_MspInit+0xe4>)
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800534a:	2200      	movs	r2, #0
 800534c:	2100      	movs	r1, #0
 800534e:	201c      	movs	r0, #28
 8005350:	f000 fb3f 	bl	80059d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005354:	201c      	movs	r0, #28
 8005356:	f000 fb58 	bl	8005a0a <HAL_NVIC_EnableIRQ>
}
 800535a:	e032      	b.n	80053c2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1c      	ldr	r2, [pc, #112]	; (80053d4 <HAL_TIM_Base_MspInit+0xe8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d114      	bne.n	8005390 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005366:	4b1a      	ldr	r3, [pc, #104]	; (80053d0 <HAL_TIM_Base_MspInit+0xe4>)
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	4a19      	ldr	r2, [pc, #100]	; (80053d0 <HAL_TIM_Base_MspInit+0xe4>)
 800536c:	f043 0302 	orr.w	r3, r3, #2
 8005370:	6413      	str	r3, [r2, #64]	; 0x40
 8005372:	4b17      	ldr	r3, [pc, #92]	; (80053d0 <HAL_TIM_Base_MspInit+0xe4>)
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	60fb      	str	r3, [r7, #12]
 800537c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800537e:	2200      	movs	r2, #0
 8005380:	2100      	movs	r1, #0
 8005382:	201d      	movs	r0, #29
 8005384:	f000 fb25 	bl	80059d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005388:	201d      	movs	r0, #29
 800538a:	f000 fb3e 	bl	8005a0a <HAL_NVIC_EnableIRQ>
}
 800538e:	e018      	b.n	80053c2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a10      	ldr	r2, [pc, #64]	; (80053d8 <HAL_TIM_Base_MspInit+0xec>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d113      	bne.n	80053c2 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800539a:	4b0d      	ldr	r3, [pc, #52]	; (80053d0 <HAL_TIM_Base_MspInit+0xe4>)
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	4a0c      	ldr	r2, [pc, #48]	; (80053d0 <HAL_TIM_Base_MspInit+0xe4>)
 80053a0:	f043 0304 	orr.w	r3, r3, #4
 80053a4:	6413      	str	r3, [r2, #64]	; 0x40
 80053a6:	4b0a      	ldr	r3, [pc, #40]	; (80053d0 <HAL_TIM_Base_MspInit+0xe4>)
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f003 0304 	and.w	r3, r3, #4
 80053ae:	60bb      	str	r3, [r7, #8]
 80053b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80053b2:	2200      	movs	r2, #0
 80053b4:	2100      	movs	r1, #0
 80053b6:	201e      	movs	r0, #30
 80053b8:	f000 fb0b 	bl	80059d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80053bc:	201e      	movs	r0, #30
 80053be:	f000 fb24 	bl	8005a0a <HAL_NVIC_EnableIRQ>
}
 80053c2:	bf00      	nop
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	40010000 	.word	0x40010000
 80053d0:	40023800 	.word	0x40023800
 80053d4:	40000400 	.word	0x40000400
 80053d8:	40000800 	.word	0x40000800

080053dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b08e      	sub	sp, #56	; 0x38
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	605a      	str	r2, [r3, #4]
 80053ee:	609a      	str	r2, [r3, #8]
 80053f0:	60da      	str	r2, [r3, #12]
 80053f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a62      	ldr	r2, [pc, #392]	; (8005584 <HAL_TIM_MspPostInit+0x1a8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d13a      	bne.n	8005474 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80053fe:	4b62      	ldr	r3, [pc, #392]	; (8005588 <HAL_TIM_MspPostInit+0x1ac>)
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	4a61      	ldr	r2, [pc, #388]	; (8005588 <HAL_TIM_MspPostInit+0x1ac>)
 8005404:	f043 0310 	orr.w	r3, r3, #16
 8005408:	6313      	str	r3, [r2, #48]	; 0x30
 800540a:	4b5f      	ldr	r3, [pc, #380]	; (8005588 <HAL_TIM_MspPostInit+0x1ac>)
 800540c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540e:	f003 0310 	and.w	r3, r3, #16
 8005412:	623b      	str	r3, [r7, #32]
 8005414:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005416:	4b5c      	ldr	r3, [pc, #368]	; (8005588 <HAL_TIM_MspPostInit+0x1ac>)
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	4a5b      	ldr	r2, [pc, #364]	; (8005588 <HAL_TIM_MspPostInit+0x1ac>)
 800541c:	f043 0301 	orr.w	r3, r3, #1
 8005420:	6313      	str	r3, [r2, #48]	; 0x30
 8005422:	4b59      	ldr	r3, [pc, #356]	; (8005588 <HAL_TIM_MspPostInit+0x1ac>)
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	61fb      	str	r3, [r7, #28]
 800542c:	69fb      	ldr	r3, [r7, #28]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_Kitchen_Shutter_Pin|TIM1_CH2_LivingRoom_Shutter_Pin|TIM1_CH3_Garage_Shutter_Pin;
 800542e:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8005432:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005434:	2302      	movs	r3, #2
 8005436:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005438:	2300      	movs	r3, #0
 800543a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800543c:	2300      	movs	r3, #0
 800543e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005440:	2301      	movs	r3, #1
 8005442:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005448:	4619      	mov	r1, r3
 800544a:	4850      	ldr	r0, [pc, #320]	; (800558c <HAL_TIM_MspPostInit+0x1b0>)
 800544c:	f000 fb1a 	bl	8005a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM1_CH4_Door_Pin;
 8005450:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005456:	2302      	movs	r3, #2
 8005458:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800545a:	2300      	movs	r3, #0
 800545c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800545e:	2300      	movs	r3, #0
 8005460:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005462:	2301      	movs	r3, #1
 8005464:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM1_CH4_Door_GPIO_Port, &GPIO_InitStruct);
 8005466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800546a:	4619      	mov	r1, r3
 800546c:	4848      	ldr	r0, [pc, #288]	; (8005590 <HAL_TIM_MspPostInit+0x1b4>)
 800546e:	f000 fb09 	bl	8005a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005472:	e083      	b.n	800557c <HAL_TIM_MspPostInit+0x1a0>
  else if(timHandle->Instance==TIM2)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800547c:	d139      	bne.n	80054f2 <HAL_TIM_MspPostInit+0x116>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800547e:	4b42      	ldr	r3, [pc, #264]	; (8005588 <HAL_TIM_MspPostInit+0x1ac>)
 8005480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005482:	4a41      	ldr	r2, [pc, #260]	; (8005588 <HAL_TIM_MspPostInit+0x1ac>)
 8005484:	f043 0301 	orr.w	r3, r3, #1
 8005488:	6313      	str	r3, [r2, #48]	; 0x30
 800548a:	4b3f      	ldr	r3, [pc, #252]	; (8005588 <HAL_TIM_MspPostInit+0x1ac>)
 800548c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	61bb      	str	r3, [r7, #24]
 8005494:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005496:	4b3c      	ldr	r3, [pc, #240]	; (8005588 <HAL_TIM_MspPostInit+0x1ac>)
 8005498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549a:	4a3b      	ldr	r2, [pc, #236]	; (8005588 <HAL_TIM_MspPostInit+0x1ac>)
 800549c:	f043 0302 	orr.w	r3, r3, #2
 80054a0:	6313      	str	r3, [r2, #48]	; 0x30
 80054a2:	4b39      	ldr	r3, [pc, #228]	; (8005588 <HAL_TIM_MspPostInit+0x1ac>)
 80054a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_RGB_Garage_Pin;
 80054ae:	2301      	movs	r3, #1
 80054b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b2:	2302      	movs	r3, #2
 80054b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054ba:	2300      	movs	r3, #0
 80054bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80054be:	2301      	movs	r3, #1
 80054c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH1_RGB_Garage_GPIO_Port, &GPIO_InitStruct);
 80054c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054c6:	4619      	mov	r1, r3
 80054c8:	4831      	ldr	r0, [pc, #196]	; (8005590 <HAL_TIM_MspPostInit+0x1b4>)
 80054ca:	f000 fadb 	bl	8005a84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM2_CH3_Alarm_Buzzer_Pin|TIM2_CH4_RGB_Kitchen_Pin;
 80054ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80054d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054d4:	2302      	movs	r3, #2
 80054d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d8:	2300      	movs	r3, #0
 80054da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054dc:	2300      	movs	r3, #0
 80054de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80054e0:	2301      	movs	r3, #1
 80054e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054e8:	4619      	mov	r1, r3
 80054ea:	482a      	ldr	r0, [pc, #168]	; (8005594 <HAL_TIM_MspPostInit+0x1b8>)
 80054ec:	f000 faca 	bl	8005a84 <HAL_GPIO_Init>
}
 80054f0:	e044      	b.n	800557c <HAL_TIM_MspPostInit+0x1a0>
  else if(timHandle->Instance==TIM3)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a28      	ldr	r2, [pc, #160]	; (8005598 <HAL_TIM_MspPostInit+0x1bc>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d11d      	bne.n	8005538 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054fc:	4b22      	ldr	r3, [pc, #136]	; (8005588 <HAL_TIM_MspPostInit+0x1ac>)
 80054fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005500:	4a21      	ldr	r2, [pc, #132]	; (8005588 <HAL_TIM_MspPostInit+0x1ac>)
 8005502:	f043 0304 	orr.w	r3, r3, #4
 8005506:	6313      	str	r3, [r2, #48]	; 0x30
 8005508:	4b1f      	ldr	r3, [pc, #124]	; (8005588 <HAL_TIM_MspPostInit+0x1ac>)
 800550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	613b      	str	r3, [r7, #16]
 8005512:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM3_CH4_Garage_Pin;
 8005514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800551a:	2302      	movs	r3, #2
 800551c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800551e:	2300      	movs	r3, #0
 8005520:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005522:	2300      	movs	r3, #0
 8005524:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005526:	2302      	movs	r3, #2
 8005528:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM3_CH4_Garage_GPIO_Port, &GPIO_InitStruct);
 800552a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800552e:	4619      	mov	r1, r3
 8005530:	481a      	ldr	r0, [pc, #104]	; (800559c <HAL_TIM_MspPostInit+0x1c0>)
 8005532:	f000 faa7 	bl	8005a84 <HAL_GPIO_Init>
}
 8005536:	e021      	b.n	800557c <HAL_TIM_MspPostInit+0x1a0>
  else if(timHandle->Instance==TIM4)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a18      	ldr	r2, [pc, #96]	; (80055a0 <HAL_TIM_MspPostInit+0x1c4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d11c      	bne.n	800557c <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005542:	4b11      	ldr	r3, [pc, #68]	; (8005588 <HAL_TIM_MspPostInit+0x1ac>)
 8005544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005546:	4a10      	ldr	r2, [pc, #64]	; (8005588 <HAL_TIM_MspPostInit+0x1ac>)
 8005548:	f043 0308 	orr.w	r3, r3, #8
 800554c:	6313      	str	r3, [r2, #48]	; 0x30
 800554e:	4b0e      	ldr	r3, [pc, #56]	; (8005588 <HAL_TIM_MspPostInit+0x1ac>)
 8005550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_RGB_LivingRoom_Pin|TIM4_CH3_heating_Pin;
 800555a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800555e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005560:	2302      	movs	r3, #2
 8005562:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005564:	2300      	movs	r3, #0
 8005566:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005568:	2300      	movs	r3, #0
 800556a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800556c:	2302      	movs	r3, #2
 800556e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005574:	4619      	mov	r1, r3
 8005576:	480b      	ldr	r0, [pc, #44]	; (80055a4 <HAL_TIM_MspPostInit+0x1c8>)
 8005578:	f000 fa84 	bl	8005a84 <HAL_GPIO_Init>
}
 800557c:	bf00      	nop
 800557e:	3738      	adds	r7, #56	; 0x38
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40010000 	.word	0x40010000
 8005588:	40023800 	.word	0x40023800
 800558c:	40021000 	.word	0x40021000
 8005590:	40020000 	.word	0x40020000
 8005594:	40020400 	.word	0x40020400
 8005598:	40000400 	.word	0x40000400
 800559c:	40020800 	.word	0x40020800
 80055a0:	40000800 	.word	0x40000800
 80055a4:	40020c00 	.word	0x40020c00

080055a8 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80055ac:	4b14      	ldr	r3, [pc, #80]	; (8005600 <MX_USART6_UART_Init+0x58>)
 80055ae:	4a15      	ldr	r2, [pc, #84]	; (8005604 <MX_USART6_UART_Init+0x5c>)
 80055b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80055b2:	4b13      	ldr	r3, [pc, #76]	; (8005600 <MX_USART6_UART_Init+0x58>)
 80055b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80055b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80055ba:	4b11      	ldr	r3, [pc, #68]	; (8005600 <MX_USART6_UART_Init+0x58>)
 80055bc:	2200      	movs	r2, #0
 80055be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80055c0:	4b0f      	ldr	r3, [pc, #60]	; (8005600 <MX_USART6_UART_Init+0x58>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80055c6:	4b0e      	ldr	r3, [pc, #56]	; (8005600 <MX_USART6_UART_Init+0x58>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80055cc:	4b0c      	ldr	r3, [pc, #48]	; (8005600 <MX_USART6_UART_Init+0x58>)
 80055ce:	220c      	movs	r2, #12
 80055d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055d2:	4b0b      	ldr	r3, [pc, #44]	; (8005600 <MX_USART6_UART_Init+0x58>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80055d8:	4b09      	ldr	r3, [pc, #36]	; (8005600 <MX_USART6_UART_Init+0x58>)
 80055da:	2200      	movs	r2, #0
 80055dc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80055de:	4b08      	ldr	r3, [pc, #32]	; (8005600 <MX_USART6_UART_Init+0x58>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80055e4:	4b06      	ldr	r3, [pc, #24]	; (8005600 <MX_USART6_UART_Init+0x58>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80055ea:	4805      	ldr	r0, [pc, #20]	; (8005600 <MX_USART6_UART_Init+0x58>)
 80055ec:	f004 ff84 	bl	800a4f8 <HAL_UART_Init>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80055f6:	f7ff fab9 	bl	8004b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80055fa:	bf00      	nop
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	200004f0 	.word	0x200004f0
 8005604:	40011400 	.word	0x40011400

08005608 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b0aa      	sub	sp, #168	; 0xa8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005610:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	605a      	str	r2, [r3, #4]
 800561a:	609a      	str	r2, [r3, #8]
 800561c:	60da      	str	r2, [r3, #12]
 800561e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005620:	f107 0310 	add.w	r3, r7, #16
 8005624:	2284      	movs	r2, #132	; 0x84
 8005626:	2100      	movs	r1, #0
 8005628:	4618      	mov	r0, r3
 800562a:	f005 ff7b 	bl	800b524 <memset>
  if(uartHandle->Instance==USART6)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a22      	ldr	r2, [pc, #136]	; (80056bc <HAL_UART_MspInit+0xb4>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d13c      	bne.n	80056b2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8005638:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800563c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800563e:	2300      	movs	r3, #0
 8005640:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005642:	f107 0310 	add.w	r3, r7, #16
 8005646:	4618      	mov	r0, r3
 8005648:	f002 f80a 	bl	8007660 <HAL_RCCEx_PeriphCLKConfig>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005652:	f7ff fa8b 	bl	8004b6c <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8005656:	4b1a      	ldr	r3, [pc, #104]	; (80056c0 <HAL_UART_MspInit+0xb8>)
 8005658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565a:	4a19      	ldr	r2, [pc, #100]	; (80056c0 <HAL_UART_MspInit+0xb8>)
 800565c:	f043 0320 	orr.w	r3, r3, #32
 8005660:	6453      	str	r3, [r2, #68]	; 0x44
 8005662:	4b17      	ldr	r3, [pc, #92]	; (80056c0 <HAL_UART_MspInit+0xb8>)
 8005664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005666:	f003 0320 	and.w	r3, r3, #32
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800566e:	4b14      	ldr	r3, [pc, #80]	; (80056c0 <HAL_UART_MspInit+0xb8>)
 8005670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005672:	4a13      	ldr	r2, [pc, #76]	; (80056c0 <HAL_UART_MspInit+0xb8>)
 8005674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005678:	6313      	str	r3, [r2, #48]	; 0x30
 800567a:	4b11      	ldr	r3, [pc, #68]	; (80056c0 <HAL_UART_MspInit+0xb8>)
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005682:	60bb      	str	r3, [r7, #8]
 8005684:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8005686:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800568a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800568e:	2302      	movs	r3, #2
 8005690:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005694:	2300      	movs	r3, #0
 8005696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800569a:	2303      	movs	r3, #3
 800569c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80056a0:	2308      	movs	r3, #8
 80056a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80056a6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80056aa:	4619      	mov	r1, r3
 80056ac:	4805      	ldr	r0, [pc, #20]	; (80056c4 <HAL_UART_MspInit+0xbc>)
 80056ae:	f000 f9e9 	bl	8005a84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80056b2:	bf00      	nop
 80056b4:	37a8      	adds	r7, #168	; 0xa8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	40011400 	.word	0x40011400
 80056c0:	40023800 	.word	0x40023800
 80056c4:	40021800 	.word	0x40021800

080056c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80056c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005700 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80056cc:	480d      	ldr	r0, [pc, #52]	; (8005704 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80056ce:	490e      	ldr	r1, [pc, #56]	; (8005708 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80056d0:	4a0e      	ldr	r2, [pc, #56]	; (800570c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80056d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80056d4:	e002      	b.n	80056dc <LoopCopyDataInit>

080056d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056da:	3304      	adds	r3, #4

080056dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056e0:	d3f9      	bcc.n	80056d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056e2:	4a0b      	ldr	r2, [pc, #44]	; (8005710 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80056e4:	4c0b      	ldr	r4, [pc, #44]	; (8005714 <LoopFillZerobss+0x26>)
  movs r3, #0
 80056e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056e8:	e001      	b.n	80056ee <LoopFillZerobss>

080056ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056ec:	3204      	adds	r2, #4

080056ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056f0:	d3fb      	bcc.n	80056ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80056f2:	f7ff fb89 	bl	8004e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056f6:	f005 ff23 	bl	800b540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056fa:	f7fd fcdd 	bl	80030b8 <main>
  bx  lr    
 80056fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005700:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005708:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 800570c:	0800c3d0 	.word	0x0800c3d0
  ldr r2, =_sbss
 8005710:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8005714:	200006c4 	.word	0x200006c4

08005718 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005718:	e7fe      	b.n	8005718 <ADC_IRQHandler>

0800571a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800571e:	2003      	movs	r0, #3
 8005720:	f000 f94c 	bl	80059bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005724:	2000      	movs	r0, #0
 8005726:	f000 f805 	bl	8005734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800572a:	f7ff faaf 	bl	8004c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800573c:	4b12      	ldr	r3, [pc, #72]	; (8005788 <HAL_InitTick+0x54>)
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	4b12      	ldr	r3, [pc, #72]	; (800578c <HAL_InitTick+0x58>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	4619      	mov	r1, r3
 8005746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800574a:	fbb3 f3f1 	udiv	r3, r3, r1
 800574e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005752:	4618      	mov	r0, r3
 8005754:	f000 f967 	bl	8005a26 <HAL_SYSTICK_Config>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e00e      	b.n	8005780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b0f      	cmp	r3, #15
 8005766:	d80a      	bhi.n	800577e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005768:	2200      	movs	r2, #0
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	f04f 30ff 	mov.w	r0, #4294967295
 8005770:	f000 f92f 	bl	80059d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005774:	4a06      	ldr	r2, [pc, #24]	; (8005790 <HAL_InitTick+0x5c>)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	e000      	b.n	8005780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
}
 8005780:	4618      	mov	r0, r3
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	2000013c 	.word	0x2000013c
 800578c:	20000144 	.word	0x20000144
 8005790:	20000140 	.word	0x20000140

08005794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005798:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <HAL_IncTick+0x20>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <HAL_IncTick+0x24>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4413      	add	r3, r2
 80057a4:	4a04      	ldr	r2, [pc, #16]	; (80057b8 <HAL_IncTick+0x24>)
 80057a6:	6013      	str	r3, [r2, #0]
}
 80057a8:	bf00      	nop
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	20000144 	.word	0x20000144
 80057b8:	20000578 	.word	0x20000578

080057bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
  return uwTick;
 80057c0:	4b03      	ldr	r3, [pc, #12]	; (80057d0 <HAL_GetTick+0x14>)
 80057c2:	681b      	ldr	r3, [r3, #0]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20000578 	.word	0x20000578

080057d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80057dc:	f7ff ffee 	bl	80057bc <HAL_GetTick>
 80057e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ec:	d005      	beq.n	80057fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80057ee:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <HAL_Delay+0x44>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	461a      	mov	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4413      	add	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80057fa:	bf00      	nop
 80057fc:	f7ff ffde 	bl	80057bc <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	429a      	cmp	r2, r3
 800580a:	d8f7      	bhi.n	80057fc <HAL_Delay+0x28>
  {
  }
}
 800580c:	bf00      	nop
 800580e:	bf00      	nop
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20000144 	.word	0x20000144

0800581c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800582c:	4b0b      	ldr	r3, [pc, #44]	; (800585c <__NVIC_SetPriorityGrouping+0x40>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005838:	4013      	ands	r3, r2
 800583a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005844:	4b06      	ldr	r3, [pc, #24]	; (8005860 <__NVIC_SetPriorityGrouping+0x44>)
 8005846:	4313      	orrs	r3, r2
 8005848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800584a:	4a04      	ldr	r2, [pc, #16]	; (800585c <__NVIC_SetPriorityGrouping+0x40>)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	60d3      	str	r3, [r2, #12]
}
 8005850:	bf00      	nop
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	e000ed00 	.word	0xe000ed00
 8005860:	05fa0000 	.word	0x05fa0000

08005864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005868:	4b04      	ldr	r3, [pc, #16]	; (800587c <__NVIC_GetPriorityGrouping+0x18>)
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	0a1b      	lsrs	r3, r3, #8
 800586e:	f003 0307 	and.w	r3, r3, #7
}
 8005872:	4618      	mov	r0, r3
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	e000ed00 	.word	0xe000ed00

08005880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800588a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800588e:	2b00      	cmp	r3, #0
 8005890:	db0b      	blt.n	80058aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005892:	79fb      	ldrb	r3, [r7, #7]
 8005894:	f003 021f 	and.w	r2, r3, #31
 8005898:	4907      	ldr	r1, [pc, #28]	; (80058b8 <__NVIC_EnableIRQ+0x38>)
 800589a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589e:	095b      	lsrs	r3, r3, #5
 80058a0:	2001      	movs	r0, #1
 80058a2:	fa00 f202 	lsl.w	r2, r0, r2
 80058a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	e000e100 	.word	0xe000e100

080058bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	4603      	mov	r3, r0
 80058c4:	6039      	str	r1, [r7, #0]
 80058c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	db0a      	blt.n	80058e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	490c      	ldr	r1, [pc, #48]	; (8005908 <__NVIC_SetPriority+0x4c>)
 80058d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058da:	0112      	lsls	r2, r2, #4
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	440b      	add	r3, r1
 80058e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058e4:	e00a      	b.n	80058fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	4908      	ldr	r1, [pc, #32]	; (800590c <__NVIC_SetPriority+0x50>)
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	3b04      	subs	r3, #4
 80058f4:	0112      	lsls	r2, r2, #4
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	440b      	add	r3, r1
 80058fa:	761a      	strb	r2, [r3, #24]
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	e000e100 	.word	0xe000e100
 800590c:	e000ed00 	.word	0xe000ed00

08005910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005910:	b480      	push	{r7}
 8005912:	b089      	sub	sp, #36	; 0x24
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f003 0307 	and.w	r3, r3, #7
 8005922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	f1c3 0307 	rsb	r3, r3, #7
 800592a:	2b04      	cmp	r3, #4
 800592c:	bf28      	it	cs
 800592e:	2304      	movcs	r3, #4
 8005930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	3304      	adds	r3, #4
 8005936:	2b06      	cmp	r3, #6
 8005938:	d902      	bls.n	8005940 <NVIC_EncodePriority+0x30>
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	3b03      	subs	r3, #3
 800593e:	e000      	b.n	8005942 <NVIC_EncodePriority+0x32>
 8005940:	2300      	movs	r3, #0
 8005942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005944:	f04f 32ff 	mov.w	r2, #4294967295
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	fa02 f303 	lsl.w	r3, r2, r3
 800594e:	43da      	mvns	r2, r3
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	401a      	ands	r2, r3
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005958:	f04f 31ff 	mov.w	r1, #4294967295
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	fa01 f303 	lsl.w	r3, r1, r3
 8005962:	43d9      	mvns	r1, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005968:	4313      	orrs	r3, r2
         );
}
 800596a:	4618      	mov	r0, r3
 800596c:	3724      	adds	r7, #36	; 0x24
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
	...

08005978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3b01      	subs	r3, #1
 8005984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005988:	d301      	bcc.n	800598e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800598a:	2301      	movs	r3, #1
 800598c:	e00f      	b.n	80059ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800598e:	4a0a      	ldr	r2, [pc, #40]	; (80059b8 <SysTick_Config+0x40>)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3b01      	subs	r3, #1
 8005994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005996:	210f      	movs	r1, #15
 8005998:	f04f 30ff 	mov.w	r0, #4294967295
 800599c:	f7ff ff8e 	bl	80058bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059a0:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <SysTick_Config+0x40>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059a6:	4b04      	ldr	r3, [pc, #16]	; (80059b8 <SysTick_Config+0x40>)
 80059a8:	2207      	movs	r2, #7
 80059aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	e000e010 	.word	0xe000e010

080059bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7ff ff29 	bl	800581c <__NVIC_SetPriorityGrouping>
}
 80059ca:	bf00      	nop
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b086      	sub	sp, #24
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	4603      	mov	r3, r0
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	607a      	str	r2, [r7, #4]
 80059de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80059e0:	2300      	movs	r3, #0
 80059e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059e4:	f7ff ff3e 	bl	8005864 <__NVIC_GetPriorityGrouping>
 80059e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	68b9      	ldr	r1, [r7, #8]
 80059ee:	6978      	ldr	r0, [r7, #20]
 80059f0:	f7ff ff8e 	bl	8005910 <NVIC_EncodePriority>
 80059f4:	4602      	mov	r2, r0
 80059f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059fa:	4611      	mov	r1, r2
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7ff ff5d 	bl	80058bc <__NVIC_SetPriority>
}
 8005a02:	bf00      	nop
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b082      	sub	sp, #8
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	4603      	mov	r3, r0
 8005a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7ff ff31 	bl	8005880 <__NVIC_EnableIRQ>
}
 8005a1e:	bf00      	nop
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b082      	sub	sp, #8
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7ff ffa2 	bl	8005978 <SysTick_Config>
 8005a34:	4603      	mov	r3, r0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d004      	beq.n	8005a5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2280      	movs	r2, #128	; 0x80
 8005a56:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e00c      	b.n	8005a76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2205      	movs	r2, #5
 8005a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0201 	bic.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
	...

08005a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b089      	sub	sp, #36	; 0x24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005a92:	2300      	movs	r3, #0
 8005a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005a96:	2300      	movs	r3, #0
 8005a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61fb      	str	r3, [r7, #28]
 8005aa2:	e175      	b.n	8005d90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	f040 8164 	bne.w	8005d8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d005      	beq.n	8005ada <HAL_GPIO_Init+0x56>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d130      	bne.n	8005b3c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	2203      	movs	r2, #3
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	43db      	mvns	r3, r3
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	4013      	ands	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	005b      	lsls	r3, r3, #1
 8005afa:	fa02 f303 	lsl.w	r3, r2, r3
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b10:	2201      	movs	r2, #1
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	43db      	mvns	r3, r3
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	091b      	lsrs	r3, r3, #4
 8005b26:	f003 0201 	and.w	r2, r3, #1
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f003 0303 	and.w	r3, r3, #3
 8005b44:	2b03      	cmp	r3, #3
 8005b46:	d017      	beq.n	8005b78 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	2203      	movs	r2, #3
 8005b54:	fa02 f303 	lsl.w	r3, r2, r3
 8005b58:	43db      	mvns	r3, r3
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f003 0303 	and.w	r3, r3, #3
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d123      	bne.n	8005bcc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	08da      	lsrs	r2, r3, #3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3208      	adds	r2, #8
 8005b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	f003 0307 	and.w	r3, r3, #7
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	220f      	movs	r2, #15
 8005b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba0:	43db      	mvns	r3, r3
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	08da      	lsrs	r2, r3, #3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	3208      	adds	r2, #8
 8005bc6:	69b9      	ldr	r1, [r7, #24]
 8005bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	2203      	movs	r2, #3
 8005bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bdc:	43db      	mvns	r3, r3
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	4013      	ands	r3, r2
 8005be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f003 0203 	and.w	r2, r3, #3
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 80be 	beq.w	8005d8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c0e:	4b66      	ldr	r3, [pc, #408]	; (8005da8 <HAL_GPIO_Init+0x324>)
 8005c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c12:	4a65      	ldr	r2, [pc, #404]	; (8005da8 <HAL_GPIO_Init+0x324>)
 8005c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c18:	6453      	str	r3, [r2, #68]	; 0x44
 8005c1a:	4b63      	ldr	r3, [pc, #396]	; (8005da8 <HAL_GPIO_Init+0x324>)
 8005c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005c26:	4a61      	ldr	r2, [pc, #388]	; (8005dac <HAL_GPIO_Init+0x328>)
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	089b      	lsrs	r3, r3, #2
 8005c2c:	3302      	adds	r3, #2
 8005c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	220f      	movs	r2, #15
 8005c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c42:	43db      	mvns	r3, r3
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	4013      	ands	r3, r2
 8005c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a58      	ldr	r2, [pc, #352]	; (8005db0 <HAL_GPIO_Init+0x32c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d037      	beq.n	8005cc2 <HAL_GPIO_Init+0x23e>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a57      	ldr	r2, [pc, #348]	; (8005db4 <HAL_GPIO_Init+0x330>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d031      	beq.n	8005cbe <HAL_GPIO_Init+0x23a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a56      	ldr	r2, [pc, #344]	; (8005db8 <HAL_GPIO_Init+0x334>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d02b      	beq.n	8005cba <HAL_GPIO_Init+0x236>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a55      	ldr	r2, [pc, #340]	; (8005dbc <HAL_GPIO_Init+0x338>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d025      	beq.n	8005cb6 <HAL_GPIO_Init+0x232>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a54      	ldr	r2, [pc, #336]	; (8005dc0 <HAL_GPIO_Init+0x33c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d01f      	beq.n	8005cb2 <HAL_GPIO_Init+0x22e>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a53      	ldr	r2, [pc, #332]	; (8005dc4 <HAL_GPIO_Init+0x340>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d019      	beq.n	8005cae <HAL_GPIO_Init+0x22a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a52      	ldr	r2, [pc, #328]	; (8005dc8 <HAL_GPIO_Init+0x344>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d013      	beq.n	8005caa <HAL_GPIO_Init+0x226>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a51      	ldr	r2, [pc, #324]	; (8005dcc <HAL_GPIO_Init+0x348>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00d      	beq.n	8005ca6 <HAL_GPIO_Init+0x222>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a50      	ldr	r2, [pc, #320]	; (8005dd0 <HAL_GPIO_Init+0x34c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d007      	beq.n	8005ca2 <HAL_GPIO_Init+0x21e>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a4f      	ldr	r2, [pc, #316]	; (8005dd4 <HAL_GPIO_Init+0x350>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d101      	bne.n	8005c9e <HAL_GPIO_Init+0x21a>
 8005c9a:	2309      	movs	r3, #9
 8005c9c:	e012      	b.n	8005cc4 <HAL_GPIO_Init+0x240>
 8005c9e:	230a      	movs	r3, #10
 8005ca0:	e010      	b.n	8005cc4 <HAL_GPIO_Init+0x240>
 8005ca2:	2308      	movs	r3, #8
 8005ca4:	e00e      	b.n	8005cc4 <HAL_GPIO_Init+0x240>
 8005ca6:	2307      	movs	r3, #7
 8005ca8:	e00c      	b.n	8005cc4 <HAL_GPIO_Init+0x240>
 8005caa:	2306      	movs	r3, #6
 8005cac:	e00a      	b.n	8005cc4 <HAL_GPIO_Init+0x240>
 8005cae:	2305      	movs	r3, #5
 8005cb0:	e008      	b.n	8005cc4 <HAL_GPIO_Init+0x240>
 8005cb2:	2304      	movs	r3, #4
 8005cb4:	e006      	b.n	8005cc4 <HAL_GPIO_Init+0x240>
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e004      	b.n	8005cc4 <HAL_GPIO_Init+0x240>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e002      	b.n	8005cc4 <HAL_GPIO_Init+0x240>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e000      	b.n	8005cc4 <HAL_GPIO_Init+0x240>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	69fa      	ldr	r2, [r7, #28]
 8005cc6:	f002 0203 	and.w	r2, r2, #3
 8005cca:	0092      	lsls	r2, r2, #2
 8005ccc:	4093      	lsls	r3, r2
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005cd4:	4935      	ldr	r1, [pc, #212]	; (8005dac <HAL_GPIO_Init+0x328>)
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	089b      	lsrs	r3, r3, #2
 8005cda:	3302      	adds	r3, #2
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ce2:	4b3d      	ldr	r3, [pc, #244]	; (8005dd8 <HAL_GPIO_Init+0x354>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	43db      	mvns	r3, r3
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d06:	4a34      	ldr	r2, [pc, #208]	; (8005dd8 <HAL_GPIO_Init+0x354>)
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d0c:	4b32      	ldr	r3, [pc, #200]	; (8005dd8 <HAL_GPIO_Init+0x354>)
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	43db      	mvns	r3, r3
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d30:	4a29      	ldr	r2, [pc, #164]	; (8005dd8 <HAL_GPIO_Init+0x354>)
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005d36:	4b28      	ldr	r3, [pc, #160]	; (8005dd8 <HAL_GPIO_Init+0x354>)
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	43db      	mvns	r3, r3
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	4013      	ands	r3, r2
 8005d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d5a:	4a1f      	ldr	r2, [pc, #124]	; (8005dd8 <HAL_GPIO_Init+0x354>)
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d60:	4b1d      	ldr	r3, [pc, #116]	; (8005dd8 <HAL_GPIO_Init+0x354>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	43db      	mvns	r3, r3
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d84:	4a14      	ldr	r2, [pc, #80]	; (8005dd8 <HAL_GPIO_Init+0x354>)
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	61fb      	str	r3, [r7, #28]
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	2b0f      	cmp	r3, #15
 8005d94:	f67f ae86 	bls.w	8005aa4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005d98:	bf00      	nop
 8005d9a:	bf00      	nop
 8005d9c:	3724      	adds	r7, #36	; 0x24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	40023800 	.word	0x40023800
 8005dac:	40013800 	.word	0x40013800
 8005db0:	40020000 	.word	0x40020000
 8005db4:	40020400 	.word	0x40020400
 8005db8:	40020800 	.word	0x40020800
 8005dbc:	40020c00 	.word	0x40020c00
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	40021400 	.word	0x40021400
 8005dc8:	40021800 	.word	0x40021800
 8005dcc:	40021c00 	.word	0x40021c00
 8005dd0:	40022000 	.word	0x40022000
 8005dd4:	40022400 	.word	0x40022400
 8005dd8:	40013c00 	.word	0x40013c00

08005ddc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	460b      	mov	r3, r1
 8005de6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	691a      	ldr	r2, [r3, #16]
 8005dec:	887b      	ldrh	r3, [r7, #2]
 8005dee:	4013      	ands	r3, r2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d002      	beq.n	8005dfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005df4:	2301      	movs	r3, #1
 8005df6:	73fb      	strb	r3, [r7, #15]
 8005df8:	e001      	b.n	8005dfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	807b      	strh	r3, [r7, #2]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e1c:	787b      	ldrb	r3, [r7, #1]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e22:	887a      	ldrh	r2, [r7, #2]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005e28:	e003      	b.n	8005e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005e2a:	887b      	ldrh	r3, [r7, #2]
 8005e2c:	041a      	lsls	r2, r3, #16
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	619a      	str	r2, [r3, #24]
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b085      	sub	sp, #20
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	460b      	mov	r3, r1
 8005e48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e50:	887a      	ldrh	r2, [r7, #2]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4013      	ands	r3, r2
 8005e56:	041a      	lsls	r2, r3, #16
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	43d9      	mvns	r1, r3
 8005e5c:	887b      	ldrh	r3, [r7, #2]
 8005e5e:	400b      	ands	r3, r1
 8005e60:	431a      	orrs	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	619a      	str	r2, [r3, #24]
}
 8005e66:	bf00      	nop
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
	...

08005e74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005e7e:	4b08      	ldr	r3, [pc, #32]	; (8005ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e80:	695a      	ldr	r2, [r3, #20]
 8005e82:	88fb      	ldrh	r3, [r7, #6]
 8005e84:	4013      	ands	r3, r2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d006      	beq.n	8005e98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005e8a:	4a05      	ldr	r2, [pc, #20]	; (8005ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e8c:	88fb      	ldrh	r3, [r7, #6]
 8005e8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e90:	88fb      	ldrh	r3, [r7, #6]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 f806 	bl	8005ea4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005e98:	bf00      	nop
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	40013c00 	.word	0x40013c00

08005ea4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	4603      	mov	r3, r0
 8005eac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
	...

08005ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e07f      	b.n	8005fce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d106      	bne.n	8005ee8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7fc fc2a 	bl	800273c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2224      	movs	r2, #36	; 0x24
 8005eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0201 	bic.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d107      	bne.n	8005f36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f32:	609a      	str	r2, [r3, #8]
 8005f34:	e006      	b.n	8005f44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689a      	ldr	r2, [r3, #8]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005f42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d104      	bne.n	8005f56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6859      	ldr	r1, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	4b1d      	ldr	r3, [pc, #116]	; (8005fd8 <HAL_I2C_Init+0x11c>)
 8005f62:	430b      	orrs	r3, r1
 8005f64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68da      	ldr	r2, [r3, #12]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691a      	ldr	r2, [r3, #16]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	69d9      	ldr	r1, [r3, #28]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a1a      	ldr	r2, [r3, #32]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f042 0201 	orr.w	r2, r2, #1
 8005fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	02008000 	.word	0x02008000

08005fdc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b088      	sub	sp, #32
 8005fe0:	af02      	add	r7, sp, #8
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	4608      	mov	r0, r1
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	461a      	mov	r2, r3
 8005fea:	4603      	mov	r3, r0
 8005fec:	817b      	strh	r3, [r7, #10]
 8005fee:	460b      	mov	r3, r1
 8005ff0:	813b      	strh	r3, [r7, #8]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b20      	cmp	r3, #32
 8006000:	f040 80f9 	bne.w	80061f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <HAL_I2C_Mem_Write+0x34>
 800600a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800600c:	2b00      	cmp	r3, #0
 800600e:	d105      	bne.n	800601c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006016:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e0ed      	b.n	80061f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006022:	2b01      	cmp	r3, #1
 8006024:	d101      	bne.n	800602a <HAL_I2C_Mem_Write+0x4e>
 8006026:	2302      	movs	r3, #2
 8006028:	e0e6      	b.n	80061f8 <HAL_I2C_Mem_Write+0x21c>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006032:	f7ff fbc3 	bl	80057bc <HAL_GetTick>
 8006036:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	2319      	movs	r3, #25
 800603e:	2201      	movs	r2, #1
 8006040:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 fbcb 	bl	80067e0 <I2C_WaitOnFlagUntilTimeout>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e0d1      	b.n	80061f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2221      	movs	r2, #33	; 0x21
 8006058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2240      	movs	r2, #64	; 0x40
 8006060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a3a      	ldr	r2, [r7, #32]
 800606e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006074:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800607c:	88f8      	ldrh	r0, [r7, #6]
 800607e:	893a      	ldrh	r2, [r7, #8]
 8006080:	8979      	ldrh	r1, [r7, #10]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	9301      	str	r3, [sp, #4]
 8006086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	4603      	mov	r3, r0
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f000 fadb 	bl	8006648 <I2C_RequestMemoryWrite>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d005      	beq.n	80060a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e0a9      	b.n	80061f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	2bff      	cmp	r3, #255	; 0xff
 80060ac:	d90e      	bls.n	80060cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	22ff      	movs	r2, #255	; 0xff
 80060b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	8979      	ldrh	r1, [r7, #10]
 80060bc:	2300      	movs	r3, #0
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 fd27 	bl	8006b18 <I2C_TransferConfig>
 80060ca:	e00f      	b.n	80060ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	8979      	ldrh	r1, [r7, #10]
 80060de:	2300      	movs	r3, #0
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 fd16 	bl	8006b18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 fbb5 	bl	8006860 <I2C_WaitOnTXISFlagUntilTimeout>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e07b      	b.n	80061f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	781a      	ldrb	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611a:	b29b      	uxth	r3, r3
 800611c:	3b01      	subs	r3, #1
 800611e:	b29a      	uxth	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006128:	3b01      	subs	r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d034      	beq.n	80061a4 <HAL_I2C_Mem_Write+0x1c8>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800613e:	2b00      	cmp	r3, #0
 8006140:	d130      	bne.n	80061a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006148:	2200      	movs	r2, #0
 800614a:	2180      	movs	r1, #128	; 0x80
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 fb47 	bl	80067e0 <I2C_WaitOnFlagUntilTimeout>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e04d      	b.n	80061f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006160:	b29b      	uxth	r3, r3
 8006162:	2bff      	cmp	r3, #255	; 0xff
 8006164:	d90e      	bls.n	8006184 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	22ff      	movs	r2, #255	; 0xff
 800616a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006170:	b2da      	uxtb	r2, r3
 8006172:	8979      	ldrh	r1, [r7, #10]
 8006174:	2300      	movs	r3, #0
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 fccb 	bl	8006b18 <I2C_TransferConfig>
 8006182:	e00f      	b.n	80061a4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006188:	b29a      	uxth	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006192:	b2da      	uxtb	r2, r3
 8006194:	8979      	ldrh	r1, [r7, #10]
 8006196:	2300      	movs	r3, #0
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 fcba 	bl	8006b18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d19e      	bne.n	80060ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 fb94 	bl	80068e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d001      	beq.n	80061c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e01a      	b.n	80061f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2220      	movs	r2, #32
 80061c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6859      	ldr	r1, [r3, #4]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	4b0a      	ldr	r3, [pc, #40]	; (8006200 <HAL_I2C_Mem_Write+0x224>)
 80061d6:	400b      	ands	r3, r1
 80061d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2220      	movs	r2, #32
 80061de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	e000      	b.n	80061f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80061f6:	2302      	movs	r3, #2
  }
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3718      	adds	r7, #24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	fe00e800 	.word	0xfe00e800

08006204 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af02      	add	r7, sp, #8
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	4608      	mov	r0, r1
 800620e:	4611      	mov	r1, r2
 8006210:	461a      	mov	r2, r3
 8006212:	4603      	mov	r3, r0
 8006214:	817b      	strh	r3, [r7, #10]
 8006216:	460b      	mov	r3, r1
 8006218:	813b      	strh	r3, [r7, #8]
 800621a:	4613      	mov	r3, r2
 800621c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b20      	cmp	r3, #32
 8006228:	f040 80fd 	bne.w	8006426 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <HAL_I2C_Mem_Read+0x34>
 8006232:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006234:	2b00      	cmp	r3, #0
 8006236:	d105      	bne.n	8006244 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800623e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e0f1      	b.n	8006428 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800624a:	2b01      	cmp	r3, #1
 800624c:	d101      	bne.n	8006252 <HAL_I2C_Mem_Read+0x4e>
 800624e:	2302      	movs	r3, #2
 8006250:	e0ea      	b.n	8006428 <HAL_I2C_Mem_Read+0x224>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800625a:	f7ff faaf 	bl	80057bc <HAL_GetTick>
 800625e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	2319      	movs	r3, #25
 8006266:	2201      	movs	r2, #1
 8006268:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 fab7 	bl	80067e0 <I2C_WaitOnFlagUntilTimeout>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e0d5      	b.n	8006428 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2222      	movs	r2, #34	; 0x22
 8006280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2240      	movs	r2, #64	; 0x40
 8006288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6a3a      	ldr	r2, [r7, #32]
 8006296:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800629c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062a4:	88f8      	ldrh	r0, [r7, #6]
 80062a6:	893a      	ldrh	r2, [r7, #8]
 80062a8:	8979      	ldrh	r1, [r7, #10]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	9301      	str	r3, [sp, #4]
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	4603      	mov	r3, r0
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 fa1b 	bl	80066f0 <I2C_RequestMemoryRead>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d005      	beq.n	80062cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e0ad      	b.n	8006428 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	2bff      	cmp	r3, #255	; 0xff
 80062d4:	d90e      	bls.n	80062f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	22ff      	movs	r2, #255	; 0xff
 80062da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	8979      	ldrh	r1, [r7, #10]
 80062e4:	4b52      	ldr	r3, [pc, #328]	; (8006430 <HAL_I2C_Mem_Read+0x22c>)
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 fc13 	bl	8006b18 <I2C_TransferConfig>
 80062f2:	e00f      	b.n	8006314 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006302:	b2da      	uxtb	r2, r3
 8006304:	8979      	ldrh	r1, [r7, #10]
 8006306:	4b4a      	ldr	r3, [pc, #296]	; (8006430 <HAL_I2C_Mem_Read+0x22c>)
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 fc02 	bl	8006b18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631a:	2200      	movs	r2, #0
 800631c:	2104      	movs	r1, #4
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f000 fa5e 	bl	80067e0 <I2C_WaitOnFlagUntilTimeout>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e07c      	b.n	8006428 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	b2d2      	uxtb	r2, r2
 800633a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	1c5a      	adds	r2, r3, #1
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800634a:	3b01      	subs	r3, #1
 800634c:	b29a      	uxth	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006356:	b29b      	uxth	r3, r3
 8006358:	3b01      	subs	r3, #1
 800635a:	b29a      	uxth	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006364:	b29b      	uxth	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d034      	beq.n	80063d4 <HAL_I2C_Mem_Read+0x1d0>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800636e:	2b00      	cmp	r3, #0
 8006370:	d130      	bne.n	80063d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006378:	2200      	movs	r2, #0
 800637a:	2180      	movs	r1, #128	; 0x80
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 fa2f 	bl	80067e0 <I2C_WaitOnFlagUntilTimeout>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e04d      	b.n	8006428 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006390:	b29b      	uxth	r3, r3
 8006392:	2bff      	cmp	r3, #255	; 0xff
 8006394:	d90e      	bls.n	80063b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	22ff      	movs	r2, #255	; 0xff
 800639a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	8979      	ldrh	r1, [r7, #10]
 80063a4:	2300      	movs	r3, #0
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 fbb3 	bl	8006b18 <I2C_TransferConfig>
 80063b2:	e00f      	b.n	80063d4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	8979      	ldrh	r1, [r7, #10]
 80063c6:	2300      	movs	r3, #0
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 fba2 	bl	8006b18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d19a      	bne.n	8006314 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 fa7c 	bl	80068e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e01a      	b.n	8006428 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2220      	movs	r2, #32
 80063f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6859      	ldr	r1, [r3, #4]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	4b0b      	ldr	r3, [pc, #44]	; (8006434 <HAL_I2C_Mem_Read+0x230>)
 8006406:	400b      	ands	r3, r1
 8006408:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2220      	movs	r2, #32
 800640e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	e000      	b.n	8006428 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006426:	2302      	movs	r3, #2
  }
}
 8006428:	4618      	mov	r0, r3
 800642a:	3718      	adds	r7, #24
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	80002400 	.word	0x80002400
 8006434:	fe00e800 	.word	0xfe00e800

08006438 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08a      	sub	sp, #40	; 0x28
 800643c:	af02      	add	r7, sp, #8
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	607a      	str	r2, [r7, #4]
 8006442:	603b      	str	r3, [r7, #0]
 8006444:	460b      	mov	r3, r1
 8006446:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006448:	2300      	movs	r3, #0
 800644a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b20      	cmp	r3, #32
 8006456:	f040 80ef 	bne.w	8006638 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006468:	d101      	bne.n	800646e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800646a:	2302      	movs	r3, #2
 800646c:	e0e5      	b.n	800663a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_I2C_IsDeviceReady+0x44>
 8006478:	2302      	movs	r3, #2
 800647a:	e0de      	b.n	800663a <HAL_I2C_IsDeviceReady+0x202>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2224      	movs	r2, #36	; 0x24
 8006488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d105      	bne.n	80064a6 <HAL_I2C_IsDeviceReady+0x6e>
 800649a:	897b      	ldrh	r3, [r7, #10]
 800649c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80064a0:	4b68      	ldr	r3, [pc, #416]	; (8006644 <HAL_I2C_IsDeviceReady+0x20c>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	e004      	b.n	80064b0 <HAL_I2C_IsDeviceReady+0x78>
 80064a6:	897b      	ldrh	r3, [r7, #10]
 80064a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064ac:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	6812      	ldr	r2, [r2, #0]
 80064b4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80064b6:	f7ff f981 	bl	80057bc <HAL_GetTick>
 80064ba:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	f003 0320 	and.w	r3, r3, #32
 80064c6:	2b20      	cmp	r3, #32
 80064c8:	bf0c      	ite	eq
 80064ca:	2301      	moveq	r3, #1
 80064cc:	2300      	movne	r3, #0
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	f003 0310 	and.w	r3, r3, #16
 80064dc:	2b10      	cmp	r3, #16
 80064de:	bf0c      	ite	eq
 80064e0:	2301      	moveq	r3, #1
 80064e2:	2300      	movne	r3, #0
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80064e8:	e034      	b.n	8006554 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f0:	d01a      	beq.n	8006528 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80064f2:	f7ff f963 	bl	80057bc <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d302      	bcc.n	8006508 <HAL_I2C_IsDeviceReady+0xd0>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10f      	bne.n	8006528 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2220      	movs	r2, #32
 800650c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006514:	f043 0220 	orr.w	r2, r3, #32
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e088      	b.n	800663a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b20      	cmp	r3, #32
 8006534:	bf0c      	ite	eq
 8006536:	2301      	moveq	r3, #1
 8006538:	2300      	movne	r3, #0
 800653a:	b2db      	uxtb	r3, r3
 800653c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	f003 0310 	and.w	r3, r3, #16
 8006548:	2b10      	cmp	r3, #16
 800654a:	bf0c      	ite	eq
 800654c:	2301      	moveq	r3, #1
 800654e:	2300      	movne	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006554:	7ffb      	ldrb	r3, [r7, #31]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d102      	bne.n	8006560 <HAL_I2C_IsDeviceReady+0x128>
 800655a:	7fbb      	ldrb	r3, [r7, #30]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0c4      	beq.n	80064ea <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	f003 0310 	and.w	r3, r3, #16
 800656a:	2b10      	cmp	r3, #16
 800656c:	d01a      	beq.n	80065a4 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2200      	movs	r2, #0
 8006576:	2120      	movs	r1, #32
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 f931 	bl	80067e0 <I2C_WaitOnFlagUntilTimeout>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e058      	b.n	800663a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2220      	movs	r2, #32
 800658e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2220      	movs	r2, #32
 8006594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	e04a      	b.n	800663a <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	2200      	movs	r2, #0
 80065ac:	2120      	movs	r1, #32
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 f916 	bl	80067e0 <I2C_WaitOnFlagUntilTimeout>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e03d      	b.n	800663a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2210      	movs	r2, #16
 80065c4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2220      	movs	r2, #32
 80065cc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d118      	bne.n	8006608 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065e4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2200      	movs	r2, #0
 80065ee:	2120      	movs	r1, #32
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 f8f5 	bl	80067e0 <I2C_WaitOnFlagUntilTimeout>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e01c      	b.n	800663a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2220      	movs	r2, #32
 8006606:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	3301      	adds	r3, #1
 800660c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	429a      	cmp	r2, r3
 8006614:	f63f af3d 	bhi.w	8006492 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2220      	movs	r2, #32
 800661c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006624:	f043 0220 	orr.w	r2, r3, #32
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e000      	b.n	800663a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8006638:	2302      	movs	r3, #2
  }
}
 800663a:	4618      	mov	r0, r3
 800663c:	3720      	adds	r7, #32
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	02002000 	.word	0x02002000

08006648 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af02      	add	r7, sp, #8
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	4608      	mov	r0, r1
 8006652:	4611      	mov	r1, r2
 8006654:	461a      	mov	r2, r3
 8006656:	4603      	mov	r3, r0
 8006658:	817b      	strh	r3, [r7, #10]
 800665a:	460b      	mov	r3, r1
 800665c:	813b      	strh	r3, [r7, #8]
 800665e:	4613      	mov	r3, r2
 8006660:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006662:	88fb      	ldrh	r3, [r7, #6]
 8006664:	b2da      	uxtb	r2, r3
 8006666:	8979      	ldrh	r1, [r7, #10]
 8006668:	4b20      	ldr	r3, [pc, #128]	; (80066ec <I2C_RequestMemoryWrite+0xa4>)
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 fa51 	bl	8006b18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006676:	69fa      	ldr	r2, [r7, #28]
 8006678:	69b9      	ldr	r1, [r7, #24]
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 f8f0 	bl	8006860 <I2C_WaitOnTXISFlagUntilTimeout>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e02c      	b.n	80066e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800668a:	88fb      	ldrh	r3, [r7, #6]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d105      	bne.n	800669c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006690:	893b      	ldrh	r3, [r7, #8]
 8006692:	b2da      	uxtb	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	629a      	str	r2, [r3, #40]	; 0x28
 800669a:	e015      	b.n	80066c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800669c:	893b      	ldrh	r3, [r7, #8]
 800669e:	0a1b      	lsrs	r3, r3, #8
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066aa:	69fa      	ldr	r2, [r7, #28]
 80066ac:	69b9      	ldr	r1, [r7, #24]
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 f8d6 	bl	8006860 <I2C_WaitOnTXISFlagUntilTimeout>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e012      	b.n	80066e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066be:	893b      	ldrh	r3, [r7, #8]
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	2200      	movs	r2, #0
 80066d0:	2180      	movs	r1, #128	; 0x80
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 f884 	bl	80067e0 <I2C_WaitOnFlagUntilTimeout>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e000      	b.n	80066e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	80002000 	.word	0x80002000

080066f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af02      	add	r7, sp, #8
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	4608      	mov	r0, r1
 80066fa:	4611      	mov	r1, r2
 80066fc:	461a      	mov	r2, r3
 80066fe:	4603      	mov	r3, r0
 8006700:	817b      	strh	r3, [r7, #10]
 8006702:	460b      	mov	r3, r1
 8006704:	813b      	strh	r3, [r7, #8]
 8006706:	4613      	mov	r3, r2
 8006708:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800670a:	88fb      	ldrh	r3, [r7, #6]
 800670c:	b2da      	uxtb	r2, r3
 800670e:	8979      	ldrh	r1, [r7, #10]
 8006710:	4b20      	ldr	r3, [pc, #128]	; (8006794 <I2C_RequestMemoryRead+0xa4>)
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	2300      	movs	r3, #0
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 f9fe 	bl	8006b18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800671c:	69fa      	ldr	r2, [r7, #28]
 800671e:	69b9      	ldr	r1, [r7, #24]
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 f89d 	bl	8006860 <I2C_WaitOnTXISFlagUntilTimeout>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e02c      	b.n	800678a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006730:	88fb      	ldrh	r3, [r7, #6]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d105      	bne.n	8006742 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006736:	893b      	ldrh	r3, [r7, #8]
 8006738:	b2da      	uxtb	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	629a      	str	r2, [r3, #40]	; 0x28
 8006740:	e015      	b.n	800676e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006742:	893b      	ldrh	r3, [r7, #8]
 8006744:	0a1b      	lsrs	r3, r3, #8
 8006746:	b29b      	uxth	r3, r3
 8006748:	b2da      	uxtb	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006750:	69fa      	ldr	r2, [r7, #28]
 8006752:	69b9      	ldr	r1, [r7, #24]
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 f883 	bl	8006860 <I2C_WaitOnTXISFlagUntilTimeout>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d001      	beq.n	8006764 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e012      	b.n	800678a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006764:	893b      	ldrh	r3, [r7, #8]
 8006766:	b2da      	uxtb	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	2200      	movs	r2, #0
 8006776:	2140      	movs	r1, #64	; 0x40
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f000 f831 	bl	80067e0 <I2C_WaitOnFlagUntilTimeout>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e000      	b.n	800678a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	80002000 	.word	0x80002000

08006798 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d103      	bne.n	80067b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2200      	movs	r2, #0
 80067b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d007      	beq.n	80067d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699a      	ldr	r2, [r3, #24]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0201 	orr.w	r2, r2, #1
 80067d2:	619a      	str	r2, [r3, #24]
  }
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	603b      	str	r3, [r7, #0]
 80067ec:	4613      	mov	r3, r2
 80067ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067f0:	e022      	b.n	8006838 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f8:	d01e      	beq.n	8006838 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067fa:	f7fe ffdf 	bl	80057bc <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	429a      	cmp	r2, r3
 8006808:	d302      	bcc.n	8006810 <I2C_WaitOnFlagUntilTimeout+0x30>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d113      	bne.n	8006838 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006814:	f043 0220 	orr.w	r2, r3, #32
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2220      	movs	r2, #32
 8006820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e00f      	b.n	8006858 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	699a      	ldr	r2, [r3, #24]
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	4013      	ands	r3, r2
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	429a      	cmp	r2, r3
 8006846:	bf0c      	ite	eq
 8006848:	2301      	moveq	r3, #1
 800684a:	2300      	movne	r3, #0
 800684c:	b2db      	uxtb	r3, r3
 800684e:	461a      	mov	r2, r3
 8006850:	79fb      	ldrb	r3, [r7, #7]
 8006852:	429a      	cmp	r2, r3
 8006854:	d0cd      	beq.n	80067f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800686c:	e02c      	b.n	80068c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	68b9      	ldr	r1, [r7, #8]
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 f870 	bl	8006958 <I2C_IsErrorOccurred>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e02a      	b.n	80068d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006888:	d01e      	beq.n	80068c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800688a:	f7fe ff97 	bl	80057bc <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	429a      	cmp	r2, r3
 8006898:	d302      	bcc.n	80068a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d113      	bne.n	80068c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a4:	f043 0220 	orr.w	r2, r3, #32
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2220      	movs	r2, #32
 80068b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e007      	b.n	80068d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d1cb      	bne.n	800686e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068ec:	e028      	b.n	8006940 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	68b9      	ldr	r1, [r7, #8]
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 f830 	bl	8006958 <I2C_IsErrorOccurred>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e026      	b.n	8006950 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006902:	f7fe ff5b 	bl	80057bc <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	429a      	cmp	r2, r3
 8006910:	d302      	bcc.n	8006918 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d113      	bne.n	8006940 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691c:	f043 0220 	orr.w	r2, r3, #32
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2220      	movs	r2, #32
 8006928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e007      	b.n	8006950 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	f003 0320 	and.w	r3, r3, #32
 800694a:	2b20      	cmp	r3, #32
 800694c:	d1cf      	bne.n	80068ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b08a      	sub	sp, #40	; 0x28
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006972:	2300      	movs	r3, #0
 8006974:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	f003 0310 	and.w	r3, r3, #16
 8006980:	2b00      	cmp	r3, #0
 8006982:	d068      	beq.n	8006a56 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2210      	movs	r2, #16
 800698a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800698c:	e049      	b.n	8006a22 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006994:	d045      	beq.n	8006a22 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006996:	f7fe ff11 	bl	80057bc <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d302      	bcc.n	80069ac <I2C_IsErrorOccurred+0x54>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d13a      	bne.n	8006a22 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ce:	d121      	bne.n	8006a14 <I2C_IsErrorOccurred+0xbc>
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069d6:	d01d      	beq.n	8006a14 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80069d8:	7cfb      	ldrb	r3, [r7, #19]
 80069da:	2b20      	cmp	r3, #32
 80069dc:	d01a      	beq.n	8006a14 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80069ee:	f7fe fee5 	bl	80057bc <HAL_GetTick>
 80069f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069f4:	e00e      	b.n	8006a14 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80069f6:	f7fe fee1 	bl	80057bc <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	2b19      	cmp	r3, #25
 8006a02:	d907      	bls.n	8006a14 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	f043 0320 	orr.w	r3, r3, #32
 8006a0a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006a12:	e006      	b.n	8006a22 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	f003 0320 	and.w	r3, r3, #32
 8006a1e:	2b20      	cmp	r3, #32
 8006a20:	d1e9      	bne.n	80069f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	f003 0320 	and.w	r3, r3, #32
 8006a2c:	2b20      	cmp	r3, #32
 8006a2e:	d003      	beq.n	8006a38 <I2C_IsErrorOccurred+0xe0>
 8006a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d0aa      	beq.n	800698e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d103      	bne.n	8006a48 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2220      	movs	r2, #32
 8006a46:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	f043 0304 	orr.w	r3, r3, #4
 8006a4e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00b      	beq.n	8006a80 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	f043 0301 	orr.w	r3, r3, #1
 8006a6e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00b      	beq.n	8006aa2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	f043 0308 	orr.w	r3, r3, #8
 8006a90:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00b      	beq.n	8006ac4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	f043 0302 	orr.w	r3, r3, #2
 8006ab2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006abc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d01c      	beq.n	8006b06 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f7ff fe63 	bl	8006798 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6859      	ldr	r1, [r3, #4]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	4b0d      	ldr	r3, [pc, #52]	; (8006b14 <I2C_IsErrorOccurred+0x1bc>)
 8006ade:	400b      	ands	r3, r1
 8006ae0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006b06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3728      	adds	r7, #40	; 0x28
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	fe00e800 	.word	0xfe00e800

08006b18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	607b      	str	r3, [r7, #4]
 8006b22:	460b      	mov	r3, r1
 8006b24:	817b      	strh	r3, [r7, #10]
 8006b26:	4613      	mov	r3, r2
 8006b28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b2a:	897b      	ldrh	r3, [r7, #10]
 8006b2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b30:	7a7b      	ldrb	r3, [r7, #9]
 8006b32:	041b      	lsls	r3, r3, #16
 8006b34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b38:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b46:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	0d5b      	lsrs	r3, r3, #21
 8006b52:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006b56:	4b08      	ldr	r3, [pc, #32]	; (8006b78 <I2C_TransferConfig+0x60>)
 8006b58:	430b      	orrs	r3, r1
 8006b5a:	43db      	mvns	r3, r3
 8006b5c:	ea02 0103 	and.w	r1, r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b6a:	bf00      	nop
 8006b6c:	371c      	adds	r7, #28
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	03ff63ff 	.word	0x03ff63ff

08006b7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b20      	cmp	r3, #32
 8006b90:	d138      	bne.n	8006c04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d101      	bne.n	8006ba0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e032      	b.n	8006c06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2224      	movs	r2, #36	; 0x24
 8006bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0201 	bic.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006bce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6819      	ldr	r1, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0201 	orr.w	r2, r2, #1
 8006bee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	e000      	b.n	8006c06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c04:	2302      	movs	r3, #2
  }
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b085      	sub	sp, #20
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b20      	cmp	r3, #32
 8006c26:	d139      	bne.n	8006c9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e033      	b.n	8006c9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2224      	movs	r2, #36	; 0x24
 8006c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0201 	bic.w	r2, r2, #1
 8006c54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	021b      	lsls	r3, r3, #8
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0201 	orr.w	r2, r2, #1
 8006c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	e000      	b.n	8006c9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c9c:	2302      	movs	r3, #2
  }
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
	...

08006cac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006cac:	b480      	push	{r7}
 8006cae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cb0:	4b05      	ldr	r3, [pc, #20]	; (8006cc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a04      	ldr	r2, [pc, #16]	; (8006cc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cba:	6013      	str	r3, [r2, #0]
}
 8006cbc:	bf00      	nop
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	40007000 	.word	0x40007000

08006ccc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e291      	b.n	8007206 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 8087 	beq.w	8006dfe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006cf0:	4b96      	ldr	r3, [pc, #600]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f003 030c 	and.w	r3, r3, #12
 8006cf8:	2b04      	cmp	r3, #4
 8006cfa:	d00c      	beq.n	8006d16 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cfc:	4b93      	ldr	r3, [pc, #588]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f003 030c 	and.w	r3, r3, #12
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	d112      	bne.n	8006d2e <HAL_RCC_OscConfig+0x62>
 8006d08:	4b90      	ldr	r3, [pc, #576]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d14:	d10b      	bne.n	8006d2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d16:	4b8d      	ldr	r3, [pc, #564]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d06c      	beq.n	8006dfc <HAL_RCC_OscConfig+0x130>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d168      	bne.n	8006dfc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e26b      	b.n	8007206 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d36:	d106      	bne.n	8006d46 <HAL_RCC_OscConfig+0x7a>
 8006d38:	4b84      	ldr	r3, [pc, #528]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a83      	ldr	r2, [pc, #524]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d42:	6013      	str	r3, [r2, #0]
 8006d44:	e02e      	b.n	8006da4 <HAL_RCC_OscConfig+0xd8>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10c      	bne.n	8006d68 <HAL_RCC_OscConfig+0x9c>
 8006d4e:	4b7f      	ldr	r3, [pc, #508]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a7e      	ldr	r2, [pc, #504]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d58:	6013      	str	r3, [r2, #0]
 8006d5a:	4b7c      	ldr	r3, [pc, #496]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a7b      	ldr	r2, [pc, #492]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006d60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d64:	6013      	str	r3, [r2, #0]
 8006d66:	e01d      	b.n	8006da4 <HAL_RCC_OscConfig+0xd8>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d70:	d10c      	bne.n	8006d8c <HAL_RCC_OscConfig+0xc0>
 8006d72:	4b76      	ldr	r3, [pc, #472]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a75      	ldr	r2, [pc, #468]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d7c:	6013      	str	r3, [r2, #0]
 8006d7e:	4b73      	ldr	r3, [pc, #460]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a72      	ldr	r2, [pc, #456]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	e00b      	b.n	8006da4 <HAL_RCC_OscConfig+0xd8>
 8006d8c:	4b6f      	ldr	r3, [pc, #444]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a6e      	ldr	r2, [pc, #440]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d96:	6013      	str	r3, [r2, #0]
 8006d98:	4b6c      	ldr	r3, [pc, #432]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a6b      	ldr	r2, [pc, #428]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d013      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dac:	f7fe fd06 	bl	80057bc <HAL_GetTick>
 8006db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006db2:	e008      	b.n	8006dc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006db4:	f7fe fd02 	bl	80057bc <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	2b64      	cmp	r3, #100	; 0x64
 8006dc0:	d901      	bls.n	8006dc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e21f      	b.n	8007206 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dc6:	4b61      	ldr	r3, [pc, #388]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d0f0      	beq.n	8006db4 <HAL_RCC_OscConfig+0xe8>
 8006dd2:	e014      	b.n	8006dfe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd4:	f7fe fcf2 	bl	80057bc <HAL_GetTick>
 8006dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dda:	e008      	b.n	8006dee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ddc:	f7fe fcee 	bl	80057bc <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	2b64      	cmp	r3, #100	; 0x64
 8006de8:	d901      	bls.n	8006dee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e20b      	b.n	8007206 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dee:	4b57      	ldr	r3, [pc, #348]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1f0      	bne.n	8006ddc <HAL_RCC_OscConfig+0x110>
 8006dfa:	e000      	b.n	8006dfe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0302 	and.w	r3, r3, #2
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d069      	beq.n	8006ede <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e0a:	4b50      	ldr	r3, [pc, #320]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f003 030c 	and.w	r3, r3, #12
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00b      	beq.n	8006e2e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e16:	4b4d      	ldr	r3, [pc, #308]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f003 030c 	and.w	r3, r3, #12
 8006e1e:	2b08      	cmp	r3, #8
 8006e20:	d11c      	bne.n	8006e5c <HAL_RCC_OscConfig+0x190>
 8006e22:	4b4a      	ldr	r3, [pc, #296]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d116      	bne.n	8006e5c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e2e:	4b47      	ldr	r3, [pc, #284]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d005      	beq.n	8006e46 <HAL_RCC_OscConfig+0x17a>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d001      	beq.n	8006e46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e1df      	b.n	8007206 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e46:	4b41      	ldr	r3, [pc, #260]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	00db      	lsls	r3, r3, #3
 8006e54:	493d      	ldr	r1, [pc, #244]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e5a:	e040      	b.n	8006ede <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d023      	beq.n	8006eac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e64:	4b39      	ldr	r3, [pc, #228]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a38      	ldr	r2, [pc, #224]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006e6a:	f043 0301 	orr.w	r3, r3, #1
 8006e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e70:	f7fe fca4 	bl	80057bc <HAL_GetTick>
 8006e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e76:	e008      	b.n	8006e8a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e78:	f7fe fca0 	bl	80057bc <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d901      	bls.n	8006e8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e1bd      	b.n	8007206 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e8a:	4b30      	ldr	r3, [pc, #192]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d0f0      	beq.n	8006e78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e96:	4b2d      	ldr	r3, [pc, #180]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	4929      	ldr	r1, [pc, #164]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	600b      	str	r3, [r1, #0]
 8006eaa:	e018      	b.n	8006ede <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eac:	4b27      	ldr	r3, [pc, #156]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a26      	ldr	r2, [pc, #152]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006eb2:	f023 0301 	bic.w	r3, r3, #1
 8006eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb8:	f7fe fc80 	bl	80057bc <HAL_GetTick>
 8006ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ebe:	e008      	b.n	8006ed2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ec0:	f7fe fc7c 	bl	80057bc <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e199      	b.n	8007206 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ed2:	4b1e      	ldr	r3, [pc, #120]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0302 	and.w	r3, r3, #2
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1f0      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0308 	and.w	r3, r3, #8
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d038      	beq.n	8006f5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d019      	beq.n	8006f26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ef2:	4b16      	ldr	r3, [pc, #88]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ef6:	4a15      	ldr	r2, [pc, #84]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006ef8:	f043 0301 	orr.w	r3, r3, #1
 8006efc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006efe:	f7fe fc5d 	bl	80057bc <HAL_GetTick>
 8006f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f04:	e008      	b.n	8006f18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f06:	f7fe fc59 	bl	80057bc <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d901      	bls.n	8006f18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e176      	b.n	8007206 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f18:	4b0c      	ldr	r3, [pc, #48]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f1c:	f003 0302 	and.w	r3, r3, #2
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d0f0      	beq.n	8006f06 <HAL_RCC_OscConfig+0x23a>
 8006f24:	e01a      	b.n	8006f5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f26:	4b09      	ldr	r3, [pc, #36]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f2a:	4a08      	ldr	r2, [pc, #32]	; (8006f4c <HAL_RCC_OscConfig+0x280>)
 8006f2c:	f023 0301 	bic.w	r3, r3, #1
 8006f30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f32:	f7fe fc43 	bl	80057bc <HAL_GetTick>
 8006f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f38:	e00a      	b.n	8006f50 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f3a:	f7fe fc3f 	bl	80057bc <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d903      	bls.n	8006f50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e15c      	b.n	8007206 <HAL_RCC_OscConfig+0x53a>
 8006f4c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f50:	4b91      	ldr	r3, [pc, #580]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 8006f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1ee      	bne.n	8006f3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0304 	and.w	r3, r3, #4
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 80a4 	beq.w	80070b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f6a:	4b8b      	ldr	r3, [pc, #556]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10d      	bne.n	8006f92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f76:	4b88      	ldr	r3, [pc, #544]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 8006f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7a:	4a87      	ldr	r2, [pc, #540]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 8006f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f80:	6413      	str	r3, [r2, #64]	; 0x40
 8006f82:	4b85      	ldr	r3, [pc, #532]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f8a:	60bb      	str	r3, [r7, #8]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f92:	4b82      	ldr	r3, [pc, #520]	; (800719c <HAL_RCC_OscConfig+0x4d0>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d118      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006f9e:	4b7f      	ldr	r3, [pc, #508]	; (800719c <HAL_RCC_OscConfig+0x4d0>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a7e      	ldr	r2, [pc, #504]	; (800719c <HAL_RCC_OscConfig+0x4d0>)
 8006fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006faa:	f7fe fc07 	bl	80057bc <HAL_GetTick>
 8006fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fb0:	e008      	b.n	8006fc4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fb2:	f7fe fc03 	bl	80057bc <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	2b64      	cmp	r3, #100	; 0x64
 8006fbe:	d901      	bls.n	8006fc4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e120      	b.n	8007206 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fc4:	4b75      	ldr	r3, [pc, #468]	; (800719c <HAL_RCC_OscConfig+0x4d0>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0f0      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d106      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x31a>
 8006fd8:	4b6f      	ldr	r3, [pc, #444]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 8006fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fdc:	4a6e      	ldr	r2, [pc, #440]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 8006fde:	f043 0301 	orr.w	r3, r3, #1
 8006fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8006fe4:	e02d      	b.n	8007042 <HAL_RCC_OscConfig+0x376>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10c      	bne.n	8007008 <HAL_RCC_OscConfig+0x33c>
 8006fee:	4b6a      	ldr	r3, [pc, #424]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 8006ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff2:	4a69      	ldr	r2, [pc, #420]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 8006ff4:	f023 0301 	bic.w	r3, r3, #1
 8006ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8006ffa:	4b67      	ldr	r3, [pc, #412]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 8006ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffe:	4a66      	ldr	r2, [pc, #408]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 8007000:	f023 0304 	bic.w	r3, r3, #4
 8007004:	6713      	str	r3, [r2, #112]	; 0x70
 8007006:	e01c      	b.n	8007042 <HAL_RCC_OscConfig+0x376>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	2b05      	cmp	r3, #5
 800700e:	d10c      	bne.n	800702a <HAL_RCC_OscConfig+0x35e>
 8007010:	4b61      	ldr	r3, [pc, #388]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 8007012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007014:	4a60      	ldr	r2, [pc, #384]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 8007016:	f043 0304 	orr.w	r3, r3, #4
 800701a:	6713      	str	r3, [r2, #112]	; 0x70
 800701c:	4b5e      	ldr	r3, [pc, #376]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 800701e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007020:	4a5d      	ldr	r2, [pc, #372]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 8007022:	f043 0301 	orr.w	r3, r3, #1
 8007026:	6713      	str	r3, [r2, #112]	; 0x70
 8007028:	e00b      	b.n	8007042 <HAL_RCC_OscConfig+0x376>
 800702a:	4b5b      	ldr	r3, [pc, #364]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 800702c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800702e:	4a5a      	ldr	r2, [pc, #360]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 8007030:	f023 0301 	bic.w	r3, r3, #1
 8007034:	6713      	str	r3, [r2, #112]	; 0x70
 8007036:	4b58      	ldr	r3, [pc, #352]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 8007038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703a:	4a57      	ldr	r2, [pc, #348]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 800703c:	f023 0304 	bic.w	r3, r3, #4
 8007040:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d015      	beq.n	8007076 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800704a:	f7fe fbb7 	bl	80057bc <HAL_GetTick>
 800704e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007050:	e00a      	b.n	8007068 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007052:	f7fe fbb3 	bl	80057bc <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007060:	4293      	cmp	r3, r2
 8007062:	d901      	bls.n	8007068 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e0ce      	b.n	8007206 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007068:	4b4b      	ldr	r3, [pc, #300]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 800706a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b00      	cmp	r3, #0
 8007072:	d0ee      	beq.n	8007052 <HAL_RCC_OscConfig+0x386>
 8007074:	e014      	b.n	80070a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007076:	f7fe fba1 	bl	80057bc <HAL_GetTick>
 800707a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800707c:	e00a      	b.n	8007094 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800707e:	f7fe fb9d 	bl	80057bc <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	f241 3288 	movw	r2, #5000	; 0x1388
 800708c:	4293      	cmp	r3, r2
 800708e:	d901      	bls.n	8007094 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e0b8      	b.n	8007206 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007094:	4b40      	ldr	r3, [pc, #256]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 8007096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1ee      	bne.n	800707e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d105      	bne.n	80070b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070a6:	4b3c      	ldr	r3, [pc, #240]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	4a3b      	ldr	r2, [pc, #236]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 80070ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f000 80a4 	beq.w	8007204 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070bc:	4b36      	ldr	r3, [pc, #216]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f003 030c 	and.w	r3, r3, #12
 80070c4:	2b08      	cmp	r3, #8
 80070c6:	d06b      	beq.n	80071a0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d149      	bne.n	8007164 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070d0:	4b31      	ldr	r3, [pc, #196]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a30      	ldr	r2, [pc, #192]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 80070d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070dc:	f7fe fb6e 	bl	80057bc <HAL_GetTick>
 80070e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070e2:	e008      	b.n	80070f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070e4:	f7fe fb6a 	bl	80057bc <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e087      	b.n	8007206 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070f6:	4b28      	ldr	r3, [pc, #160]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1f0      	bne.n	80070e4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	69da      	ldr	r2, [r3, #28]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	431a      	orrs	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	019b      	lsls	r3, r3, #6
 8007112:	431a      	orrs	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007118:	085b      	lsrs	r3, r3, #1
 800711a:	3b01      	subs	r3, #1
 800711c:	041b      	lsls	r3, r3, #16
 800711e:	431a      	orrs	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007124:	061b      	lsls	r3, r3, #24
 8007126:	4313      	orrs	r3, r2
 8007128:	4a1b      	ldr	r2, [pc, #108]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 800712a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800712e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007130:	4b19      	ldr	r3, [pc, #100]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a18      	ldr	r2, [pc, #96]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 8007136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800713a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800713c:	f7fe fb3e 	bl	80057bc <HAL_GetTick>
 8007140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007142:	e008      	b.n	8007156 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007144:	f7fe fb3a 	bl	80057bc <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b02      	cmp	r3, #2
 8007150:	d901      	bls.n	8007156 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e057      	b.n	8007206 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007156:	4b10      	ldr	r3, [pc, #64]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0f0      	beq.n	8007144 <HAL_RCC_OscConfig+0x478>
 8007162:	e04f      	b.n	8007204 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007164:	4b0c      	ldr	r3, [pc, #48]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a0b      	ldr	r2, [pc, #44]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 800716a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800716e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007170:	f7fe fb24 	bl	80057bc <HAL_GetTick>
 8007174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007176:	e008      	b.n	800718a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007178:	f7fe fb20 	bl	80057bc <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	2b02      	cmp	r3, #2
 8007184:	d901      	bls.n	800718a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e03d      	b.n	8007206 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800718a:	4b03      	ldr	r3, [pc, #12]	; (8007198 <HAL_RCC_OscConfig+0x4cc>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1f0      	bne.n	8007178 <HAL_RCC_OscConfig+0x4ac>
 8007196:	e035      	b.n	8007204 <HAL_RCC_OscConfig+0x538>
 8007198:	40023800 	.word	0x40023800
 800719c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80071a0:	4b1b      	ldr	r3, [pc, #108]	; (8007210 <HAL_RCC_OscConfig+0x544>)
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d028      	beq.n	8007200 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d121      	bne.n	8007200 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d11a      	bne.n	8007200 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071d0:	4013      	ands	r3, r2
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80071d8:	4293      	cmp	r3, r2
 80071da:	d111      	bne.n	8007200 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e6:	085b      	lsrs	r3, r3, #1
 80071e8:	3b01      	subs	r3, #1
 80071ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d107      	bne.n	8007200 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d001      	beq.n	8007204 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e000      	b.n	8007206 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	40023800 	.word	0x40023800

08007214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800721e:	2300      	movs	r3, #0
 8007220:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e0d0      	b.n	80073ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800722c:	4b6a      	ldr	r3, [pc, #424]	; (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 030f 	and.w	r3, r3, #15
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	429a      	cmp	r2, r3
 8007238:	d910      	bls.n	800725c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800723a:	4b67      	ldr	r3, [pc, #412]	; (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f023 020f 	bic.w	r2, r3, #15
 8007242:	4965      	ldr	r1, [pc, #404]	; (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	4313      	orrs	r3, r2
 8007248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800724a:	4b63      	ldr	r3, [pc, #396]	; (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 030f 	and.w	r3, r3, #15
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	429a      	cmp	r2, r3
 8007256:	d001      	beq.n	800725c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e0b8      	b.n	80073ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b00      	cmp	r3, #0
 8007266:	d020      	beq.n	80072aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0304 	and.w	r3, r3, #4
 8007270:	2b00      	cmp	r3, #0
 8007272:	d005      	beq.n	8007280 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007274:	4b59      	ldr	r3, [pc, #356]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	4a58      	ldr	r2, [pc, #352]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 800727a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800727e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0308 	and.w	r3, r3, #8
 8007288:	2b00      	cmp	r3, #0
 800728a:	d005      	beq.n	8007298 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800728c:	4b53      	ldr	r3, [pc, #332]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	4a52      	ldr	r2, [pc, #328]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 8007292:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007296:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007298:	4b50      	ldr	r3, [pc, #320]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	494d      	ldr	r1, [pc, #308]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d040      	beq.n	8007338 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d107      	bne.n	80072ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072be:	4b47      	ldr	r3, [pc, #284]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d115      	bne.n	80072f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e07f      	b.n	80073ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d107      	bne.n	80072e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072d6:	4b41      	ldr	r3, [pc, #260]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d109      	bne.n	80072f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e073      	b.n	80073ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072e6:	4b3d      	ldr	r3, [pc, #244]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e06b      	b.n	80073ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072f6:	4b39      	ldr	r3, [pc, #228]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f023 0203 	bic.w	r2, r3, #3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	4936      	ldr	r1, [pc, #216]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 8007304:	4313      	orrs	r3, r2
 8007306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007308:	f7fe fa58 	bl	80057bc <HAL_GetTick>
 800730c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800730e:	e00a      	b.n	8007326 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007310:	f7fe fa54 	bl	80057bc <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	f241 3288 	movw	r2, #5000	; 0x1388
 800731e:	4293      	cmp	r3, r2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e053      	b.n	80073ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007326:	4b2d      	ldr	r3, [pc, #180]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	f003 020c 	and.w	r2, r3, #12
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	429a      	cmp	r2, r3
 8007336:	d1eb      	bne.n	8007310 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007338:	4b27      	ldr	r3, [pc, #156]	; (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	429a      	cmp	r2, r3
 8007344:	d210      	bcs.n	8007368 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007346:	4b24      	ldr	r3, [pc, #144]	; (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f023 020f 	bic.w	r2, r3, #15
 800734e:	4922      	ldr	r1, [pc, #136]	; (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	4313      	orrs	r3, r2
 8007354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007356:	4b20      	ldr	r3, [pc, #128]	; (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 030f 	and.w	r3, r3, #15
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	429a      	cmp	r2, r3
 8007362:	d001      	beq.n	8007368 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e032      	b.n	80073ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0304 	and.w	r3, r3, #4
 8007370:	2b00      	cmp	r3, #0
 8007372:	d008      	beq.n	8007386 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007374:	4b19      	ldr	r3, [pc, #100]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	4916      	ldr	r1, [pc, #88]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 8007382:	4313      	orrs	r3, r2
 8007384:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0308 	and.w	r3, r3, #8
 800738e:	2b00      	cmp	r3, #0
 8007390:	d009      	beq.n	80073a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007392:	4b12      	ldr	r3, [pc, #72]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	00db      	lsls	r3, r3, #3
 80073a0:	490e      	ldr	r1, [pc, #56]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80073a6:	f000 f821 	bl	80073ec <HAL_RCC_GetSysClockFreq>
 80073aa:	4602      	mov	r2, r0
 80073ac:	4b0b      	ldr	r3, [pc, #44]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	091b      	lsrs	r3, r3, #4
 80073b2:	f003 030f 	and.w	r3, r3, #15
 80073b6:	490a      	ldr	r1, [pc, #40]	; (80073e0 <HAL_RCC_ClockConfig+0x1cc>)
 80073b8:	5ccb      	ldrb	r3, [r1, r3]
 80073ba:	fa22 f303 	lsr.w	r3, r2, r3
 80073be:	4a09      	ldr	r2, [pc, #36]	; (80073e4 <HAL_RCC_ClockConfig+0x1d0>)
 80073c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80073c2:	4b09      	ldr	r3, [pc, #36]	; (80073e8 <HAL_RCC_ClockConfig+0x1d4>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fe f9b4 	bl	8005734 <HAL_InitTick>

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	40023c00 	.word	0x40023c00
 80073dc:	40023800 	.word	0x40023800
 80073e0:	0800c274 	.word	0x0800c274
 80073e4:	2000013c 	.word	0x2000013c
 80073e8:	20000140 	.word	0x20000140

080073ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073f0:	b094      	sub	sp, #80	; 0x50
 80073f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80073f4:	2300      	movs	r3, #0
 80073f6:	647b      	str	r3, [r7, #68]	; 0x44
 80073f8:	2300      	movs	r3, #0
 80073fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073fc:	2300      	movs	r3, #0
 80073fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007400:	2300      	movs	r3, #0
 8007402:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007404:	4b79      	ldr	r3, [pc, #484]	; (80075ec <HAL_RCC_GetSysClockFreq+0x200>)
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f003 030c 	and.w	r3, r3, #12
 800740c:	2b08      	cmp	r3, #8
 800740e:	d00d      	beq.n	800742c <HAL_RCC_GetSysClockFreq+0x40>
 8007410:	2b08      	cmp	r3, #8
 8007412:	f200 80e1 	bhi.w	80075d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007416:	2b00      	cmp	r3, #0
 8007418:	d002      	beq.n	8007420 <HAL_RCC_GetSysClockFreq+0x34>
 800741a:	2b04      	cmp	r3, #4
 800741c:	d003      	beq.n	8007426 <HAL_RCC_GetSysClockFreq+0x3a>
 800741e:	e0db      	b.n	80075d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007420:	4b73      	ldr	r3, [pc, #460]	; (80075f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007422:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007424:	e0db      	b.n	80075de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007426:	4b73      	ldr	r3, [pc, #460]	; (80075f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007428:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800742a:	e0d8      	b.n	80075de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800742c:	4b6f      	ldr	r3, [pc, #444]	; (80075ec <HAL_RCC_GetSysClockFreq+0x200>)
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007434:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007436:	4b6d      	ldr	r3, [pc, #436]	; (80075ec <HAL_RCC_GetSysClockFreq+0x200>)
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d063      	beq.n	800750a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007442:	4b6a      	ldr	r3, [pc, #424]	; (80075ec <HAL_RCC_GetSysClockFreq+0x200>)
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	099b      	lsrs	r3, r3, #6
 8007448:	2200      	movs	r2, #0
 800744a:	63bb      	str	r3, [r7, #56]	; 0x38
 800744c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800744e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007454:	633b      	str	r3, [r7, #48]	; 0x30
 8007456:	2300      	movs	r3, #0
 8007458:	637b      	str	r3, [r7, #52]	; 0x34
 800745a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800745e:	4622      	mov	r2, r4
 8007460:	462b      	mov	r3, r5
 8007462:	f04f 0000 	mov.w	r0, #0
 8007466:	f04f 0100 	mov.w	r1, #0
 800746a:	0159      	lsls	r1, r3, #5
 800746c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007470:	0150      	lsls	r0, r2, #5
 8007472:	4602      	mov	r2, r0
 8007474:	460b      	mov	r3, r1
 8007476:	4621      	mov	r1, r4
 8007478:	1a51      	subs	r1, r2, r1
 800747a:	6139      	str	r1, [r7, #16]
 800747c:	4629      	mov	r1, r5
 800747e:	eb63 0301 	sbc.w	r3, r3, r1
 8007482:	617b      	str	r3, [r7, #20]
 8007484:	f04f 0200 	mov.w	r2, #0
 8007488:	f04f 0300 	mov.w	r3, #0
 800748c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007490:	4659      	mov	r1, fp
 8007492:	018b      	lsls	r3, r1, #6
 8007494:	4651      	mov	r1, sl
 8007496:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800749a:	4651      	mov	r1, sl
 800749c:	018a      	lsls	r2, r1, #6
 800749e:	4651      	mov	r1, sl
 80074a0:	ebb2 0801 	subs.w	r8, r2, r1
 80074a4:	4659      	mov	r1, fp
 80074a6:	eb63 0901 	sbc.w	r9, r3, r1
 80074aa:	f04f 0200 	mov.w	r2, #0
 80074ae:	f04f 0300 	mov.w	r3, #0
 80074b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074be:	4690      	mov	r8, r2
 80074c0:	4699      	mov	r9, r3
 80074c2:	4623      	mov	r3, r4
 80074c4:	eb18 0303 	adds.w	r3, r8, r3
 80074c8:	60bb      	str	r3, [r7, #8]
 80074ca:	462b      	mov	r3, r5
 80074cc:	eb49 0303 	adc.w	r3, r9, r3
 80074d0:	60fb      	str	r3, [r7, #12]
 80074d2:	f04f 0200 	mov.w	r2, #0
 80074d6:	f04f 0300 	mov.w	r3, #0
 80074da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80074de:	4629      	mov	r1, r5
 80074e0:	024b      	lsls	r3, r1, #9
 80074e2:	4621      	mov	r1, r4
 80074e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80074e8:	4621      	mov	r1, r4
 80074ea:	024a      	lsls	r2, r1, #9
 80074ec:	4610      	mov	r0, r2
 80074ee:	4619      	mov	r1, r3
 80074f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074f2:	2200      	movs	r2, #0
 80074f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80074f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80074fc:	f7f9 fbde 	bl	8000cbc <__aeabi_uldivmod>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4613      	mov	r3, r2
 8007506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007508:	e058      	b.n	80075bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800750a:	4b38      	ldr	r3, [pc, #224]	; (80075ec <HAL_RCC_GetSysClockFreq+0x200>)
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	099b      	lsrs	r3, r3, #6
 8007510:	2200      	movs	r2, #0
 8007512:	4618      	mov	r0, r3
 8007514:	4611      	mov	r1, r2
 8007516:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800751a:	623b      	str	r3, [r7, #32]
 800751c:	2300      	movs	r3, #0
 800751e:	627b      	str	r3, [r7, #36]	; 0x24
 8007520:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007524:	4642      	mov	r2, r8
 8007526:	464b      	mov	r3, r9
 8007528:	f04f 0000 	mov.w	r0, #0
 800752c:	f04f 0100 	mov.w	r1, #0
 8007530:	0159      	lsls	r1, r3, #5
 8007532:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007536:	0150      	lsls	r0, r2, #5
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	4641      	mov	r1, r8
 800753e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007542:	4649      	mov	r1, r9
 8007544:	eb63 0b01 	sbc.w	fp, r3, r1
 8007548:	f04f 0200 	mov.w	r2, #0
 800754c:	f04f 0300 	mov.w	r3, #0
 8007550:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007554:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007558:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800755c:	ebb2 040a 	subs.w	r4, r2, sl
 8007560:	eb63 050b 	sbc.w	r5, r3, fp
 8007564:	f04f 0200 	mov.w	r2, #0
 8007568:	f04f 0300 	mov.w	r3, #0
 800756c:	00eb      	lsls	r3, r5, #3
 800756e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007572:	00e2      	lsls	r2, r4, #3
 8007574:	4614      	mov	r4, r2
 8007576:	461d      	mov	r5, r3
 8007578:	4643      	mov	r3, r8
 800757a:	18e3      	adds	r3, r4, r3
 800757c:	603b      	str	r3, [r7, #0]
 800757e:	464b      	mov	r3, r9
 8007580:	eb45 0303 	adc.w	r3, r5, r3
 8007584:	607b      	str	r3, [r7, #4]
 8007586:	f04f 0200 	mov.w	r2, #0
 800758a:	f04f 0300 	mov.w	r3, #0
 800758e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007592:	4629      	mov	r1, r5
 8007594:	028b      	lsls	r3, r1, #10
 8007596:	4621      	mov	r1, r4
 8007598:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800759c:	4621      	mov	r1, r4
 800759e:	028a      	lsls	r2, r1, #10
 80075a0:	4610      	mov	r0, r2
 80075a2:	4619      	mov	r1, r3
 80075a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075a6:	2200      	movs	r2, #0
 80075a8:	61bb      	str	r3, [r7, #24]
 80075aa:	61fa      	str	r2, [r7, #28]
 80075ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075b0:	f7f9 fb84 	bl	8000cbc <__aeabi_uldivmod>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4613      	mov	r3, r2
 80075ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80075bc:	4b0b      	ldr	r3, [pc, #44]	; (80075ec <HAL_RCC_GetSysClockFreq+0x200>)
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	0c1b      	lsrs	r3, r3, #16
 80075c2:	f003 0303 	and.w	r3, r3, #3
 80075c6:	3301      	adds	r3, #1
 80075c8:	005b      	lsls	r3, r3, #1
 80075ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80075cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80075d6:	e002      	b.n	80075de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80075d8:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80075da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80075dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3750      	adds	r7, #80	; 0x50
 80075e4:	46bd      	mov	sp, r7
 80075e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075ea:	bf00      	nop
 80075ec:	40023800 	.word	0x40023800
 80075f0:	00f42400 	.word	0x00f42400
 80075f4:	007a1200 	.word	0x007a1200

080075f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075f8:	b480      	push	{r7}
 80075fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075fc:	4b03      	ldr	r3, [pc, #12]	; (800760c <HAL_RCC_GetHCLKFreq+0x14>)
 80075fe:	681b      	ldr	r3, [r3, #0]
}
 8007600:	4618      	mov	r0, r3
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	2000013c 	.word	0x2000013c

08007610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007614:	f7ff fff0 	bl	80075f8 <HAL_RCC_GetHCLKFreq>
 8007618:	4602      	mov	r2, r0
 800761a:	4b05      	ldr	r3, [pc, #20]	; (8007630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	0a9b      	lsrs	r3, r3, #10
 8007620:	f003 0307 	and.w	r3, r3, #7
 8007624:	4903      	ldr	r1, [pc, #12]	; (8007634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007626:	5ccb      	ldrb	r3, [r1, r3]
 8007628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800762c:	4618      	mov	r0, r3
 800762e:	bd80      	pop	{r7, pc}
 8007630:	40023800 	.word	0x40023800
 8007634:	0800c284 	.word	0x0800c284

08007638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800763c:	f7ff ffdc 	bl	80075f8 <HAL_RCC_GetHCLKFreq>
 8007640:	4602      	mov	r2, r0
 8007642:	4b05      	ldr	r3, [pc, #20]	; (8007658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	0b5b      	lsrs	r3, r3, #13
 8007648:	f003 0307 	and.w	r3, r3, #7
 800764c:	4903      	ldr	r1, [pc, #12]	; (800765c <HAL_RCC_GetPCLK2Freq+0x24>)
 800764e:	5ccb      	ldrb	r3, [r1, r3]
 8007650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007654:	4618      	mov	r0, r3
 8007656:	bd80      	pop	{r7, pc}
 8007658:	40023800 	.word	0x40023800
 800765c:	0800c284 	.word	0x0800c284

08007660 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b088      	sub	sp, #32
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007668:	2300      	movs	r3, #0
 800766a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800766c:	2300      	movs	r3, #0
 800766e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007670:	2300      	movs	r3, #0
 8007672:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007674:	2300      	movs	r3, #0
 8007676:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007678:	2300      	movs	r3, #0
 800767a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0301 	and.w	r3, r3, #1
 8007684:	2b00      	cmp	r3, #0
 8007686:	d012      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007688:	4b69      	ldr	r3, [pc, #420]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	4a68      	ldr	r2, [pc, #416]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800768e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007692:	6093      	str	r3, [r2, #8]
 8007694:	4b66      	ldr	r3, [pc, #408]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007696:	689a      	ldr	r2, [r3, #8]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800769c:	4964      	ldr	r1, [pc, #400]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80076aa:	2301      	movs	r3, #1
 80076ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d017      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80076ba:	4b5d      	ldr	r3, [pc, #372]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c8:	4959      	ldr	r1, [pc, #356]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076d8:	d101      	bne.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80076da:	2301      	movs	r3, #1
 80076dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80076e6:	2301      	movs	r3, #1
 80076e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d017      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80076f6:	4b4e      	ldr	r3, [pc, #312]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007704:	494a      	ldr	r1, [pc, #296]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007706:	4313      	orrs	r3, r2
 8007708:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007710:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007714:	d101      	bne.n	800771a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007716:	2301      	movs	r3, #1
 8007718:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007722:	2301      	movs	r3, #1
 8007724:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d001      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007732:	2301      	movs	r3, #1
 8007734:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0320 	and.w	r3, r3, #32
 800773e:	2b00      	cmp	r3, #0
 8007740:	f000 808b 	beq.w	800785a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007744:	4b3a      	ldr	r3, [pc, #232]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007748:	4a39      	ldr	r2, [pc, #228]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800774a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800774e:	6413      	str	r3, [r2, #64]	; 0x40
 8007750:	4b37      	ldr	r3, [pc, #220]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007758:	60bb      	str	r3, [r7, #8]
 800775a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800775c:	4b35      	ldr	r3, [pc, #212]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a34      	ldr	r2, [pc, #208]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007766:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007768:	f7fe f828 	bl	80057bc <HAL_GetTick>
 800776c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800776e:	e008      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007770:	f7fe f824 	bl	80057bc <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	2b64      	cmp	r3, #100	; 0x64
 800777c:	d901      	bls.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e357      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007782:	4b2c      	ldr	r3, [pc, #176]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800778a:	2b00      	cmp	r3, #0
 800778c:	d0f0      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800778e:	4b28      	ldr	r3, [pc, #160]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007796:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d035      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d02e      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077ac:	4b20      	ldr	r3, [pc, #128]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80077b6:	4b1e      	ldr	r3, [pc, #120]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ba:	4a1d      	ldr	r2, [pc, #116]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077c0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80077c2:	4b1b      	ldr	r3, [pc, #108]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c6:	4a1a      	ldr	r2, [pc, #104]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80077ce:	4a18      	ldr	r2, [pc, #96]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80077d4:	4b16      	ldr	r3, [pc, #88]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d114      	bne.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077e0:	f7fd ffec 	bl	80057bc <HAL_GetTick>
 80077e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077e6:	e00a      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077e8:	f7fd ffe8 	bl	80057bc <HAL_GetTick>
 80077ec:	4602      	mov	r2, r0
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d901      	bls.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e319      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077fe:	4b0c      	ldr	r3, [pc, #48]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b00      	cmp	r3, #0
 8007808:	d0ee      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007816:	d111      	bne.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007818:	4b05      	ldr	r3, [pc, #20]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007824:	4b04      	ldr	r3, [pc, #16]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007826:	400b      	ands	r3, r1
 8007828:	4901      	ldr	r1, [pc, #4]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800782a:	4313      	orrs	r3, r2
 800782c:	608b      	str	r3, [r1, #8]
 800782e:	e00b      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007830:	40023800 	.word	0x40023800
 8007834:	40007000 	.word	0x40007000
 8007838:	0ffffcff 	.word	0x0ffffcff
 800783c:	4baa      	ldr	r3, [pc, #680]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	4aa9      	ldr	r2, [pc, #676]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007842:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007846:	6093      	str	r3, [r2, #8]
 8007848:	4ba7      	ldr	r3, [pc, #668]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800784a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007854:	49a4      	ldr	r1, [pc, #656]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007856:	4313      	orrs	r3, r2
 8007858:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0310 	and.w	r3, r3, #16
 8007862:	2b00      	cmp	r3, #0
 8007864:	d010      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007866:	4ba0      	ldr	r3, [pc, #640]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800786c:	4a9e      	ldr	r2, [pc, #632]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800786e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007872:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007876:	4b9c      	ldr	r3, [pc, #624]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007878:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007880:	4999      	ldr	r1, [pc, #612]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007882:	4313      	orrs	r3, r2
 8007884:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00a      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007894:	4b94      	ldr	r3, [pc, #592]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800789a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078a2:	4991      	ldr	r1, [pc, #580]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00a      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80078b6:	4b8c      	ldr	r3, [pc, #560]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078c4:	4988      	ldr	r1, [pc, #544]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80078d8:	4b83      	ldr	r3, [pc, #524]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078e6:	4980      	ldr	r1, [pc, #512]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80078fa:	4b7b      	ldr	r3, [pc, #492]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007900:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007908:	4977      	ldr	r1, [pc, #476]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800790a:	4313      	orrs	r3, r2
 800790c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00a      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800791c:	4b72      	ldr	r3, [pc, #456]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800791e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007922:	f023 0203 	bic.w	r2, r3, #3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800792a:	496f      	ldr	r1, [pc, #444]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800792c:	4313      	orrs	r3, r2
 800792e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800793e:	4b6a      	ldr	r3, [pc, #424]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007944:	f023 020c 	bic.w	r2, r3, #12
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800794c:	4966      	ldr	r1, [pc, #408]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800794e:	4313      	orrs	r3, r2
 8007950:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00a      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007960:	4b61      	ldr	r3, [pc, #388]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007966:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800796e:	495e      	ldr	r1, [pc, #376]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007970:	4313      	orrs	r3, r2
 8007972:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007982:	4b59      	ldr	r3, [pc, #356]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007988:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007990:	4955      	ldr	r1, [pc, #340]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007992:	4313      	orrs	r3, r2
 8007994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00a      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80079a4:	4b50      	ldr	r3, [pc, #320]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b2:	494d      	ldr	r1, [pc, #308]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00a      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80079c6:	4b48      	ldr	r3, [pc, #288]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d4:	4944      	ldr	r1, [pc, #272]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00a      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80079e8:	4b3f      	ldr	r3, [pc, #252]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f6:	493c      	ldr	r1, [pc, #240]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079f8:	4313      	orrs	r3, r2
 80079fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00a      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007a0a:	4b37      	ldr	r3, [pc, #220]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a18:	4933      	ldr	r1, [pc, #204]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00a      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007a2c:	4b2e      	ldr	r3, [pc, #184]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a32:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a3a:	492b      	ldr	r1, [pc, #172]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d011      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007a4e:	4b26      	ldr	r3, [pc, #152]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a54:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a5c:	4922      	ldr	r1, [pc, #136]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a6c:	d101      	bne.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 0308 	and.w	r3, r3, #8
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d001      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a8e:	4b16      	ldr	r3, [pc, #88]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a94:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a9c:	4912      	ldr	r1, [pc, #72]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00b      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007ab0:	4b0d      	ldr	r3, [pc, #52]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ab6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ac0:	4909      	ldr	r1, [pc, #36]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d006      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 80d9 	beq.w	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007adc:	4b02      	ldr	r3, [pc, #8]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a01      	ldr	r2, [pc, #4]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ae2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ae6:	e001      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007ae8:	40023800 	.word	0x40023800
 8007aec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aee:	f7fd fe65 	bl	80057bc <HAL_GetTick>
 8007af2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007af4:	e008      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007af6:	f7fd fe61 	bl	80057bc <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	2b64      	cmp	r3, #100	; 0x64
 8007b02:	d901      	bls.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e194      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b08:	4b6c      	ldr	r3, [pc, #432]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1f0      	bne.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d021      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d11d      	bne.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007b28:	4b64      	ldr	r3, [pc, #400]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b2e:	0c1b      	lsrs	r3, r3, #16
 8007b30:	f003 0303 	and.w	r3, r3, #3
 8007b34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007b36:	4b61      	ldr	r3, [pc, #388]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b3c:	0e1b      	lsrs	r3, r3, #24
 8007b3e:	f003 030f 	and.w	r3, r3, #15
 8007b42:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	019a      	lsls	r2, r3, #6
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	041b      	lsls	r3, r3, #16
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	061b      	lsls	r3, r3, #24
 8007b54:	431a      	orrs	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	071b      	lsls	r3, r3, #28
 8007b5c:	4957      	ldr	r1, [pc, #348]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d004      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b78:	d00a      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d02e      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b8e:	d129      	bne.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007b90:	4b4a      	ldr	r3, [pc, #296]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b96:	0c1b      	lsrs	r3, r3, #16
 8007b98:	f003 0303 	and.w	r3, r3, #3
 8007b9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007b9e:	4b47      	ldr	r3, [pc, #284]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ba4:	0f1b      	lsrs	r3, r3, #28
 8007ba6:	f003 0307 	and.w	r3, r3, #7
 8007baa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	019a      	lsls	r2, r3, #6
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	041b      	lsls	r3, r3, #16
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	061b      	lsls	r3, r3, #24
 8007bbe:	431a      	orrs	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	071b      	lsls	r3, r3, #28
 8007bc4:	493d      	ldr	r1, [pc, #244]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007bcc:	4b3b      	ldr	r3, [pc, #236]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bd2:	f023 021f 	bic.w	r2, r3, #31
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	4937      	ldr	r1, [pc, #220]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d01d      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007bf0:	4b32      	ldr	r3, [pc, #200]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bf6:	0e1b      	lsrs	r3, r3, #24
 8007bf8:	f003 030f 	and.w	r3, r3, #15
 8007bfc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007bfe:	4b2f      	ldr	r3, [pc, #188]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c04:	0f1b      	lsrs	r3, r3, #28
 8007c06:	f003 0307 	and.w	r3, r3, #7
 8007c0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	019a      	lsls	r2, r3, #6
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	041b      	lsls	r3, r3, #16
 8007c18:	431a      	orrs	r2, r3
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	061b      	lsls	r3, r3, #24
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	071b      	lsls	r3, r3, #28
 8007c24:	4925      	ldr	r1, [pc, #148]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d011      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	019a      	lsls	r2, r3, #6
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	041b      	lsls	r3, r3, #16
 8007c44:	431a      	orrs	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	061b      	lsls	r3, r3, #24
 8007c4c:	431a      	orrs	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	071b      	lsls	r3, r3, #28
 8007c54:	4919      	ldr	r1, [pc, #100]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007c5c:	4b17      	ldr	r3, [pc, #92]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a16      	ldr	r2, [pc, #88]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c68:	f7fd fda8 	bl	80057bc <HAL_GetTick>
 8007c6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c6e:	e008      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007c70:	f7fd fda4 	bl	80057bc <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	2b64      	cmp	r3, #100	; 0x64
 8007c7c:	d901      	bls.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e0d7      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c82:	4b0e      	ldr	r3, [pc, #56]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0f0      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	f040 80cd 	bne.w	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007c96:	4b09      	ldr	r3, [pc, #36]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a08      	ldr	r2, [pc, #32]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ca2:	f7fd fd8b 	bl	80057bc <HAL_GetTick>
 8007ca6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007ca8:	e00a      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007caa:	f7fd fd87 	bl	80057bc <HAL_GetTick>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	2b64      	cmp	r3, #100	; 0x64
 8007cb6:	d903      	bls.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e0ba      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007cbc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007cc0:	4b5e      	ldr	r3, [pc, #376]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ccc:	d0ed      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d003      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d009      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d02e      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d12a      	bne.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007cf6:	4b51      	ldr	r3, [pc, #324]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cfc:	0c1b      	lsrs	r3, r3, #16
 8007cfe:	f003 0303 	and.w	r3, r3, #3
 8007d02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007d04:	4b4d      	ldr	r3, [pc, #308]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0a:	0f1b      	lsrs	r3, r3, #28
 8007d0c:	f003 0307 	and.w	r3, r3, #7
 8007d10:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	019a      	lsls	r2, r3, #6
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	041b      	lsls	r3, r3, #16
 8007d1c:	431a      	orrs	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	061b      	lsls	r3, r3, #24
 8007d24:	431a      	orrs	r2, r3
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	071b      	lsls	r3, r3, #28
 8007d2a:	4944      	ldr	r1, [pc, #272]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007d32:	4b42      	ldr	r3, [pc, #264]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d38:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d40:	3b01      	subs	r3, #1
 8007d42:	021b      	lsls	r3, r3, #8
 8007d44:	493d      	ldr	r1, [pc, #244]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d022      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d60:	d11d      	bne.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007d62:	4b36      	ldr	r3, [pc, #216]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d68:	0e1b      	lsrs	r3, r3, #24
 8007d6a:	f003 030f 	and.w	r3, r3, #15
 8007d6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007d70:	4b32      	ldr	r3, [pc, #200]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d76:	0f1b      	lsrs	r3, r3, #28
 8007d78:	f003 0307 	and.w	r3, r3, #7
 8007d7c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	019a      	lsls	r2, r3, #6
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a1b      	ldr	r3, [r3, #32]
 8007d88:	041b      	lsls	r3, r3, #16
 8007d8a:	431a      	orrs	r2, r3
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	061b      	lsls	r3, r3, #24
 8007d90:	431a      	orrs	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	071b      	lsls	r3, r3, #28
 8007d96:	4929      	ldr	r1, [pc, #164]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0308 	and.w	r3, r3, #8
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d028      	beq.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007daa:	4b24      	ldr	r3, [pc, #144]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db0:	0e1b      	lsrs	r3, r3, #24
 8007db2:	f003 030f 	and.w	r3, r3, #15
 8007db6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007db8:	4b20      	ldr	r3, [pc, #128]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dbe:	0c1b      	lsrs	r3, r3, #16
 8007dc0:	f003 0303 	and.w	r3, r3, #3
 8007dc4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	019a      	lsls	r2, r3, #6
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	041b      	lsls	r3, r3, #16
 8007dd0:	431a      	orrs	r2, r3
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	061b      	lsls	r3, r3, #24
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	071b      	lsls	r3, r3, #28
 8007dde:	4917      	ldr	r1, [pc, #92]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007de0:	4313      	orrs	r3, r2
 8007de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007de6:	4b15      	ldr	r3, [pc, #84]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df4:	4911      	ldr	r1, [pc, #68]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007dfc:	4b0f      	ldr	r3, [pc, #60]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a0e      	ldr	r2, [pc, #56]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e08:	f7fd fcd8 	bl	80057bc <HAL_GetTick>
 8007e0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007e0e:	e008      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007e10:	f7fd fcd4 	bl	80057bc <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	2b64      	cmp	r3, #100	; 0x64
 8007e1c:	d901      	bls.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e007      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007e22:	4b06      	ldr	r3, [pc, #24]	; (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e2e:	d1ef      	bne.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3720      	adds	r7, #32
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	40023800 	.word	0x40023800

08007e40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e09d      	b.n	8007f8e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d108      	bne.n	8007e6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e62:	d009      	beq.n	8007e78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	61da      	str	r2, [r3, #28]
 8007e6a:	e005      	b.n	8007e78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d106      	bne.n	8007e98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f7fc feae 	bl	8004bf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007eae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007eb8:	d902      	bls.n	8007ec0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	60fb      	str	r3, [r7, #12]
 8007ebe:	e002      	b.n	8007ec6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ec4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007ece:	d007      	beq.n	8007ee0 <HAL_SPI_Init+0xa0>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ed8:	d002      	beq.n	8007ee0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007ef0:	431a      	orrs	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	f003 0302 	and.w	r3, r3, #2
 8007efa:	431a      	orrs	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	695b      	ldr	r3, [r3, #20]
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	431a      	orrs	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	699b      	ldr	r3, [r3, #24]
 8007f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f0e:	431a      	orrs	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	69db      	ldr	r3, [r3, #28]
 8007f14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f22:	ea42 0103 	orr.w	r1, r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	430a      	orrs	r2, r1
 8007f34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	0c1b      	lsrs	r3, r3, #16
 8007f3c:	f003 0204 	and.w	r2, r3, #4
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	f003 0310 	and.w	r3, r3, #16
 8007f48:	431a      	orrs	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f4e:	f003 0308 	and.w	r3, r3, #8
 8007f52:	431a      	orrs	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007f5c:	ea42 0103 	orr.w	r1, r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	69da      	ldr	r2, [r3, #28]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b088      	sub	sp, #32
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	60f8      	str	r0, [r7, #12]
 8007f9e:	60b9      	str	r1, [r7, #8]
 8007fa0:	603b      	str	r3, [r7, #0]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d101      	bne.n	8007fb8 <HAL_SPI_Transmit+0x22>
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	e158      	b.n	800826a <HAL_SPI_Transmit+0x2d4>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fc0:	f7fd fbfc 	bl	80057bc <HAL_GetTick>
 8007fc4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007fc6:	88fb      	ldrh	r3, [r7, #6]
 8007fc8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d002      	beq.n	8007fdc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007fd6:	2302      	movs	r3, #2
 8007fd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fda:	e13d      	b.n	8008258 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d002      	beq.n	8007fe8 <HAL_SPI_Transmit+0x52>
 8007fe2:	88fb      	ldrh	r3, [r7, #6]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d102      	bne.n	8007fee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fec:	e134      	b.n	8008258 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2203      	movs	r2, #3
 8007ff2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	88fa      	ldrh	r2, [r7, #6]
 8008006:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	88fa      	ldrh	r2, [r7, #6]
 800800c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008038:	d10f      	bne.n	800805a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008048:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008058:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008064:	2b40      	cmp	r3, #64	; 0x40
 8008066:	d007      	beq.n	8008078 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008076:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008080:	d94b      	bls.n	800811a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d002      	beq.n	8008090 <HAL_SPI_Transmit+0xfa>
 800808a:	8afb      	ldrh	r3, [r7, #22]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d13e      	bne.n	800810e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008094:	881a      	ldrh	r2, [r3, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a0:	1c9a      	adds	r2, r3, #2
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	3b01      	subs	r3, #1
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80080b4:	e02b      	b.n	800810e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f003 0302 	and.w	r3, r3, #2
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d112      	bne.n	80080ea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c8:	881a      	ldrh	r2, [r3, #0]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d4:	1c9a      	adds	r2, r3, #2
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080de:	b29b      	uxth	r3, r3
 80080e0:	3b01      	subs	r3, #1
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080e8:	e011      	b.n	800810e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080ea:	f7fd fb67 	bl	80057bc <HAL_GetTick>
 80080ee:	4602      	mov	r2, r0
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	683a      	ldr	r2, [r7, #0]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d803      	bhi.n	8008102 <HAL_SPI_Transmit+0x16c>
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008100:	d102      	bne.n	8008108 <HAL_SPI_Transmit+0x172>
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d102      	bne.n	800810e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008108:	2303      	movs	r3, #3
 800810a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800810c:	e0a4      	b.n	8008258 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008112:	b29b      	uxth	r3, r3
 8008114:	2b00      	cmp	r3, #0
 8008116:	d1ce      	bne.n	80080b6 <HAL_SPI_Transmit+0x120>
 8008118:	e07c      	b.n	8008214 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d002      	beq.n	8008128 <HAL_SPI_Transmit+0x192>
 8008122:	8afb      	ldrh	r3, [r7, #22]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d170      	bne.n	800820a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800812c:	b29b      	uxth	r3, r3
 800812e:	2b01      	cmp	r3, #1
 8008130:	d912      	bls.n	8008158 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008136:	881a      	ldrh	r2, [r3, #0]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008142:	1c9a      	adds	r2, r3, #2
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800814c:	b29b      	uxth	r3, r3
 800814e:	3b02      	subs	r3, #2
 8008150:	b29a      	uxth	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008156:	e058      	b.n	800820a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	330c      	adds	r3, #12
 8008162:	7812      	ldrb	r2, [r2, #0]
 8008164:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816a:	1c5a      	adds	r2, r3, #1
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008174:	b29b      	uxth	r3, r3
 8008176:	3b01      	subs	r3, #1
 8008178:	b29a      	uxth	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800817e:	e044      	b.n	800820a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	f003 0302 	and.w	r3, r3, #2
 800818a:	2b02      	cmp	r3, #2
 800818c:	d12b      	bne.n	80081e6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008192:	b29b      	uxth	r3, r3
 8008194:	2b01      	cmp	r3, #1
 8008196:	d912      	bls.n	80081be <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819c:	881a      	ldrh	r2, [r3, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a8:	1c9a      	adds	r2, r3, #2
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	3b02      	subs	r3, #2
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081bc:	e025      	b.n	800820a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	330c      	adds	r3, #12
 80081c8:	7812      	ldrb	r2, [r2, #0]
 80081ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d0:	1c5a      	adds	r2, r3, #1
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081da:	b29b      	uxth	r3, r3
 80081dc:	3b01      	subs	r3, #1
 80081de:	b29a      	uxth	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081e4:	e011      	b.n	800820a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081e6:	f7fd fae9 	bl	80057bc <HAL_GetTick>
 80081ea:	4602      	mov	r2, r0
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d803      	bhi.n	80081fe <HAL_SPI_Transmit+0x268>
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fc:	d102      	bne.n	8008204 <HAL_SPI_Transmit+0x26e>
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d102      	bne.n	800820a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008204:	2303      	movs	r3, #3
 8008206:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008208:	e026      	b.n	8008258 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800820e:	b29b      	uxth	r3, r3
 8008210:	2b00      	cmp	r3, #0
 8008212:	d1b5      	bne.n	8008180 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f000 fe1b 	bl	8008e54 <SPI_EndRxTxTransaction>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d002      	beq.n	800822a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2220      	movs	r2, #32
 8008228:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10a      	bne.n	8008248 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008232:	2300      	movs	r3, #0
 8008234:	613b      	str	r3, [r7, #16]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	613b      	str	r3, [r7, #16]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	613b      	str	r3, [r7, #16]
 8008246:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800824c:	2b00      	cmp	r3, #0
 800824e:	d002      	beq.n	8008256 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	77fb      	strb	r3, [r7, #31]
 8008254:	e000      	b.n	8008258 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008256:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008268:	7ffb      	ldrb	r3, [r7, #31]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3720      	adds	r7, #32
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b088      	sub	sp, #32
 8008276:	af02      	add	r7, sp, #8
 8008278:	60f8      	str	r0, [r7, #12]
 800827a:	60b9      	str	r1, [r7, #8]
 800827c:	603b      	str	r3, [r7, #0]
 800827e:	4613      	mov	r3, r2
 8008280:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800828e:	d112      	bne.n	80082b6 <HAL_SPI_Receive+0x44>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10e      	bne.n	80082b6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2204      	movs	r2, #4
 800829c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80082a0:	88fa      	ldrh	r2, [r7, #6]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	4613      	mov	r3, r2
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	68b9      	ldr	r1, [r7, #8]
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f000 f910 	bl	80084d2 <HAL_SPI_TransmitReceive>
 80082b2:	4603      	mov	r3, r0
 80082b4:	e109      	b.n	80084ca <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d101      	bne.n	80082c4 <HAL_SPI_Receive+0x52>
 80082c0:	2302      	movs	r3, #2
 80082c2:	e102      	b.n	80084ca <HAL_SPI_Receive+0x258>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082cc:	f7fd fa76 	bl	80057bc <HAL_GetTick>
 80082d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d002      	beq.n	80082e4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80082de:	2302      	movs	r3, #2
 80082e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80082e2:	e0e9      	b.n	80084b8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d002      	beq.n	80082f0 <HAL_SPI_Receive+0x7e>
 80082ea:	88fb      	ldrh	r3, [r7, #6]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d102      	bne.n	80082f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80082f4:	e0e0      	b.n	80084b8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2204      	movs	r2, #4
 80082fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2200      	movs	r2, #0
 8008302:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	88fa      	ldrh	r2, [r7, #6]
 800830e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	88fa      	ldrh	r2, [r7, #6]
 8008316:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008340:	d908      	bls.n	8008354 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008350:	605a      	str	r2, [r3, #4]
 8008352:	e007      	b.n	8008364 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008362:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800836c:	d10f      	bne.n	800838e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800837c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800838c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008398:	2b40      	cmp	r3, #64	; 0x40
 800839a:	d007      	beq.n	80083ac <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80083b4:	d867      	bhi.n	8008486 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80083b6:	e030      	b.n	800841a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d117      	bne.n	80083f6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f103 020c 	add.w	r2, r3, #12
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d2:	7812      	ldrb	r2, [r2, #0]
 80083d4:	b2d2      	uxtb	r2, r2
 80083d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083dc:	1c5a      	adds	r2, r3, #1
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	3b01      	subs	r3, #1
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80083f4:	e011      	b.n	800841a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083f6:	f7fd f9e1 	bl	80057bc <HAL_GetTick>
 80083fa:	4602      	mov	r2, r0
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	683a      	ldr	r2, [r7, #0]
 8008402:	429a      	cmp	r2, r3
 8008404:	d803      	bhi.n	800840e <HAL_SPI_Receive+0x19c>
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840c:	d102      	bne.n	8008414 <HAL_SPI_Receive+0x1a2>
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d102      	bne.n	800841a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8008414:	2303      	movs	r3, #3
 8008416:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008418:	e04e      	b.n	80084b8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008420:	b29b      	uxth	r3, r3
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1c8      	bne.n	80083b8 <HAL_SPI_Receive+0x146>
 8008426:	e034      	b.n	8008492 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	2b01      	cmp	r3, #1
 8008434:	d115      	bne.n	8008462 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68da      	ldr	r2, [r3, #12]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008440:	b292      	uxth	r2, r2
 8008442:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008448:	1c9a      	adds	r2, r3, #2
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008454:	b29b      	uxth	r3, r3
 8008456:	3b01      	subs	r3, #1
 8008458:	b29a      	uxth	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008460:	e011      	b.n	8008486 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008462:	f7fd f9ab 	bl	80057bc <HAL_GetTick>
 8008466:	4602      	mov	r2, r0
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	683a      	ldr	r2, [r7, #0]
 800846e:	429a      	cmp	r2, r3
 8008470:	d803      	bhi.n	800847a <HAL_SPI_Receive+0x208>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008478:	d102      	bne.n	8008480 <HAL_SPI_Receive+0x20e>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d102      	bne.n	8008486 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8008480:	2303      	movs	r3, #3
 8008482:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008484:	e018      	b.n	80084b8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800848c:	b29b      	uxth	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1ca      	bne.n	8008428 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 fc60 	bl	8008d5c <SPI_EndRxTransaction>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2220      	movs	r2, #32
 80084a6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d002      	beq.n	80084b6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	75fb      	strb	r3, [r7, #23]
 80084b4:	e000      	b.n	80084b8 <HAL_SPI_Receive+0x246>
  }

error :
 80084b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80084c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3718      	adds	r7, #24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b08a      	sub	sp, #40	; 0x28
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	60f8      	str	r0, [r7, #12]
 80084da:	60b9      	str	r1, [r7, #8]
 80084dc:	607a      	str	r2, [r7, #4]
 80084de:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80084e0:	2301      	movs	r3, #1
 80084e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80084e4:	2300      	movs	r3, #0
 80084e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d101      	bne.n	80084f8 <HAL_SPI_TransmitReceive+0x26>
 80084f4:	2302      	movs	r3, #2
 80084f6:	e1fb      	b.n	80088f0 <HAL_SPI_TransmitReceive+0x41e>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008500:	f7fd f95c 	bl	80057bc <HAL_GetTick>
 8008504:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800850c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008514:	887b      	ldrh	r3, [r7, #2]
 8008516:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008518:	887b      	ldrh	r3, [r7, #2]
 800851a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800851c:	7efb      	ldrb	r3, [r7, #27]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d00e      	beq.n	8008540 <HAL_SPI_TransmitReceive+0x6e>
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008528:	d106      	bne.n	8008538 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d102      	bne.n	8008538 <HAL_SPI_TransmitReceive+0x66>
 8008532:	7efb      	ldrb	r3, [r7, #27]
 8008534:	2b04      	cmp	r3, #4
 8008536:	d003      	beq.n	8008540 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008538:	2302      	movs	r3, #2
 800853a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800853e:	e1cd      	b.n	80088dc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d005      	beq.n	8008552 <HAL_SPI_TransmitReceive+0x80>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d002      	beq.n	8008552 <HAL_SPI_TransmitReceive+0x80>
 800854c:	887b      	ldrh	r3, [r7, #2]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d103      	bne.n	800855a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008558:	e1c0      	b.n	80088dc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b04      	cmp	r3, #4
 8008564:	d003      	beq.n	800856e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2205      	movs	r2, #5
 800856a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	887a      	ldrh	r2, [r7, #2]
 800857e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	887a      	ldrh	r2, [r7, #2]
 8008586:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	887a      	ldrh	r2, [r7, #2]
 8008594:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	887a      	ldrh	r2, [r7, #2]
 800859a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80085b0:	d802      	bhi.n	80085b8 <HAL_SPI_TransmitReceive+0xe6>
 80085b2:	8a3b      	ldrh	r3, [r7, #16]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d908      	bls.n	80085ca <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80085c6:	605a      	str	r2, [r3, #4]
 80085c8:	e007      	b.n	80085da <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	685a      	ldr	r2, [r3, #4]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80085d8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e4:	2b40      	cmp	r3, #64	; 0x40
 80085e6:	d007      	beq.n	80085f8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008600:	d97c      	bls.n	80086fc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d002      	beq.n	8008610 <HAL_SPI_TransmitReceive+0x13e>
 800860a:	8a7b      	ldrh	r3, [r7, #18]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d169      	bne.n	80086e4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008614:	881a      	ldrh	r2, [r3, #0]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008620:	1c9a      	adds	r2, r3, #2
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800862a:	b29b      	uxth	r3, r3
 800862c:	3b01      	subs	r3, #1
 800862e:	b29a      	uxth	r2, r3
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008634:	e056      	b.n	80086e4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	f003 0302 	and.w	r3, r3, #2
 8008640:	2b02      	cmp	r3, #2
 8008642:	d11b      	bne.n	800867c <HAL_SPI_TransmitReceive+0x1aa>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008648:	b29b      	uxth	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	d016      	beq.n	800867c <HAL_SPI_TransmitReceive+0x1aa>
 800864e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008650:	2b01      	cmp	r3, #1
 8008652:	d113      	bne.n	800867c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008658:	881a      	ldrh	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008664:	1c9a      	adds	r2, r3, #2
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800866e:	b29b      	uxth	r3, r3
 8008670:	3b01      	subs	r3, #1
 8008672:	b29a      	uxth	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008678:	2300      	movs	r3, #0
 800867a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	2b01      	cmp	r3, #1
 8008688:	d11c      	bne.n	80086c4 <HAL_SPI_TransmitReceive+0x1f2>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008690:	b29b      	uxth	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d016      	beq.n	80086c4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	68da      	ldr	r2, [r3, #12]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a0:	b292      	uxth	r2, r2
 80086a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a8:	1c9a      	adds	r2, r3, #2
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	3b01      	subs	r3, #1
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80086c0:	2301      	movs	r3, #1
 80086c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80086c4:	f7fd f87a 	bl	80057bc <HAL_GetTick>
 80086c8:	4602      	mov	r2, r0
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d807      	bhi.n	80086e4 <HAL_SPI_TransmitReceive+0x212>
 80086d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086da:	d003      	beq.n	80086e4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80086e2:	e0fb      	b.n	80088dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1a3      	bne.n	8008636 <HAL_SPI_TransmitReceive+0x164>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d19d      	bne.n	8008636 <HAL_SPI_TransmitReceive+0x164>
 80086fa:	e0df      	b.n	80088bc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d003      	beq.n	800870c <HAL_SPI_TransmitReceive+0x23a>
 8008704:	8a7b      	ldrh	r3, [r7, #18]
 8008706:	2b01      	cmp	r3, #1
 8008708:	f040 80cb 	bne.w	80088a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008710:	b29b      	uxth	r3, r3
 8008712:	2b01      	cmp	r3, #1
 8008714:	d912      	bls.n	800873c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871a:	881a      	ldrh	r2, [r3, #0]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008726:	1c9a      	adds	r2, r3, #2
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008730:	b29b      	uxth	r3, r3
 8008732:	3b02      	subs	r3, #2
 8008734:	b29a      	uxth	r2, r3
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	87da      	strh	r2, [r3, #62]	; 0x3e
 800873a:	e0b2      	b.n	80088a2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	330c      	adds	r3, #12
 8008746:	7812      	ldrb	r2, [r2, #0]
 8008748:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874e:	1c5a      	adds	r2, r3, #1
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008758:	b29b      	uxth	r3, r3
 800875a:	3b01      	subs	r3, #1
 800875c:	b29a      	uxth	r2, r3
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008762:	e09e      	b.n	80088a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f003 0302 	and.w	r3, r3, #2
 800876e:	2b02      	cmp	r3, #2
 8008770:	d134      	bne.n	80087dc <HAL_SPI_TransmitReceive+0x30a>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008776:	b29b      	uxth	r3, r3
 8008778:	2b00      	cmp	r3, #0
 800877a:	d02f      	beq.n	80087dc <HAL_SPI_TransmitReceive+0x30a>
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	2b01      	cmp	r3, #1
 8008780:	d12c      	bne.n	80087dc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008786:	b29b      	uxth	r3, r3
 8008788:	2b01      	cmp	r3, #1
 800878a:	d912      	bls.n	80087b2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008790:	881a      	ldrh	r2, [r3, #0]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879c:	1c9a      	adds	r2, r3, #2
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	3b02      	subs	r3, #2
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80087b0:	e012      	b.n	80087d8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	330c      	adds	r3, #12
 80087bc:	7812      	ldrb	r2, [r2, #0]
 80087be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c4:	1c5a      	adds	r2, r3, #1
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	3b01      	subs	r3, #1
 80087d2:	b29a      	uxth	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80087d8:	2300      	movs	r3, #0
 80087da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d148      	bne.n	800887c <HAL_SPI_TransmitReceive+0x3aa>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d042      	beq.n	800887c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d923      	bls.n	800884a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68da      	ldr	r2, [r3, #12]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880c:	b292      	uxth	r2, r2
 800880e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008814:	1c9a      	adds	r2, r3, #2
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008820:	b29b      	uxth	r3, r3
 8008822:	3b02      	subs	r3, #2
 8008824:	b29a      	uxth	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008832:	b29b      	uxth	r3, r3
 8008834:	2b01      	cmp	r3, #1
 8008836:	d81f      	bhi.n	8008878 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008846:	605a      	str	r2, [r3, #4]
 8008848:	e016      	b.n	8008878 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f103 020c 	add.w	r2, r3, #12
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008856:	7812      	ldrb	r2, [r2, #0]
 8008858:	b2d2      	uxtb	r2, r2
 800885a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008860:	1c5a      	adds	r2, r3, #1
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800886c:	b29b      	uxth	r3, r3
 800886e:	3b01      	subs	r3, #1
 8008870:	b29a      	uxth	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008878:	2301      	movs	r3, #1
 800887a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800887c:	f7fc ff9e 	bl	80057bc <HAL_GetTick>
 8008880:	4602      	mov	r2, r0
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008888:	429a      	cmp	r2, r3
 800888a:	d803      	bhi.n	8008894 <HAL_SPI_TransmitReceive+0x3c2>
 800888c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008892:	d102      	bne.n	800889a <HAL_SPI_TransmitReceive+0x3c8>
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	2b00      	cmp	r3, #0
 8008898:	d103      	bne.n	80088a2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80088a0:	e01c      	b.n	80088dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f47f af5b 	bne.w	8008764 <HAL_SPI_TransmitReceive+0x292>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f47f af54 	bne.w	8008764 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088bc:	69fa      	ldr	r2, [r7, #28]
 80088be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f000 fac7 	bl	8008e54 <SPI_EndRxTxTransaction>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d006      	beq.n	80088da <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2220      	movs	r2, #32
 80088d6:	661a      	str	r2, [r3, #96]	; 0x60
 80088d8:	e000      	b.n	80088dc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80088da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80088ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3728      	adds	r7, #40	; 0x28
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b088      	sub	sp, #32
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10e      	bne.n	8008938 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008920:	2b00      	cmp	r3, #0
 8008922:	d009      	beq.n	8008938 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800892a:	2b00      	cmp	r3, #0
 800892c:	d004      	beq.n	8008938 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	4798      	blx	r3
    return;
 8008936:	e0ce      	b.n	8008ad6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	f003 0302 	and.w	r3, r3, #2
 800893e:	2b00      	cmp	r3, #0
 8008940:	d009      	beq.n	8008956 <HAL_SPI_IRQHandler+0x5e>
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008948:	2b00      	cmp	r3, #0
 800894a:	d004      	beq.n	8008956 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	4798      	blx	r3
    return;
 8008954:	e0bf      	b.n	8008ad6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	f003 0320 	and.w	r3, r3, #32
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10a      	bne.n	8008976 <HAL_SPI_IRQHandler+0x7e>
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008966:	2b00      	cmp	r3, #0
 8008968:	d105      	bne.n	8008976 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 80b0 	beq.w	8008ad6 <HAL_SPI_IRQHandler+0x1de>
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	f003 0320 	and.w	r3, r3, #32
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 80aa 	beq.w	8008ad6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008988:	2b00      	cmp	r3, #0
 800898a:	d023      	beq.n	80089d4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008992:	b2db      	uxtb	r3, r3
 8008994:	2b03      	cmp	r3, #3
 8008996:	d011      	beq.n	80089bc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800899c:	f043 0204 	orr.w	r2, r3, #4
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089a4:	2300      	movs	r3, #0
 80089a6:	617b      	str	r3, [r7, #20]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	617b      	str	r3, [r7, #20]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	617b      	str	r3, [r7, #20]
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	e00b      	b.n	80089d4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089bc:	2300      	movs	r3, #0
 80089be:	613b      	str	r3, [r7, #16]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	613b      	str	r3, [r7, #16]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	613b      	str	r3, [r7, #16]
 80089d0:	693b      	ldr	r3, [r7, #16]
        return;
 80089d2:	e080      	b.n	8008ad6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	f003 0320 	and.w	r3, r3, #32
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d014      	beq.n	8008a08 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089e2:	f043 0201 	orr.w	r2, r3, #1
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80089ea:	2300      	movs	r3, #0
 80089ec:	60fb      	str	r3, [r7, #12]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	60fb      	str	r3, [r7, #12]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a04:	601a      	str	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00c      	beq.n	8008a2c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a16:	f043 0208 	orr.w	r2, r3, #8
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008a1e:	2300      	movs	r3, #0
 8008a20:	60bb      	str	r3, [r7, #8]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	60bb      	str	r3, [r7, #8]
 8008a2a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d04f      	beq.n	8008ad4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	685a      	ldr	r2, [r3, #4]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008a42:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	f003 0302 	and.w	r3, r3, #2
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d104      	bne.n	8008a60 <HAL_SPI_IRQHandler+0x168>
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	f003 0301 	and.w	r3, r3, #1
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d034      	beq.n	8008aca <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	685a      	ldr	r2, [r3, #4]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f022 0203 	bic.w	r2, r2, #3
 8008a6e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d011      	beq.n	8008a9c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a7c:	4a17      	ldr	r2, [pc, #92]	; (8008adc <HAL_SPI_IRQHandler+0x1e4>)
 8008a7e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7fc ffda 	bl	8005a3e <HAL_DMA_Abort_IT>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d005      	beq.n	8008a9c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d016      	beq.n	8008ad2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa8:	4a0c      	ldr	r2, [pc, #48]	; (8008adc <HAL_SPI_IRQHandler+0x1e4>)
 8008aaa:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fc ffc4 	bl	8005a3e <HAL_DMA_Abort_IT>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00a      	beq.n	8008ad2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ac0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8008ac8:	e003      	b.n	8008ad2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f808 	bl	8008ae0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008ad0:	e000      	b.n	8008ad4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8008ad2:	bf00      	nop
    return;
 8008ad4:	bf00      	nop
  }
}
 8008ad6:	3720      	adds	r7, #32
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	08008af5 	.word	0x08008af5

08008ae0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b00:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f7ff ffe5 	bl	8008ae0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008b16:	bf00      	nop
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
	...

08008b20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b088      	sub	sp, #32
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	603b      	str	r3, [r7, #0]
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008b30:	f7fc fe44 	bl	80057bc <HAL_GetTick>
 8008b34:	4602      	mov	r2, r0
 8008b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b38:	1a9b      	subs	r3, r3, r2
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008b40:	f7fc fe3c 	bl	80057bc <HAL_GetTick>
 8008b44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008b46:	4b39      	ldr	r3, [pc, #228]	; (8008c2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	015b      	lsls	r3, r3, #5
 8008b4c:	0d1b      	lsrs	r3, r3, #20
 8008b4e:	69fa      	ldr	r2, [r7, #28]
 8008b50:	fb02 f303 	mul.w	r3, r2, r3
 8008b54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b56:	e054      	b.n	8008c02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b5e:	d050      	beq.n	8008c02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008b60:	f7fc fe2c 	bl	80057bc <HAL_GetTick>
 8008b64:	4602      	mov	r2, r0
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	69fa      	ldr	r2, [r7, #28]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d902      	bls.n	8008b76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d13d      	bne.n	8008bf2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008b84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b8e:	d111      	bne.n	8008bb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b98:	d004      	beq.n	8008ba4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ba2:	d107      	bne.n	8008bb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bbc:	d10f      	bne.n	8008bde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bcc:	601a      	str	r2, [r3, #0]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008bdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e017      	b.n	8008c22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d101      	bne.n	8008bfc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	689a      	ldr	r2, [r3, #8]
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	bf0c      	ite	eq
 8008c12:	2301      	moveq	r3, #1
 8008c14:	2300      	movne	r3, #0
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	461a      	mov	r2, r3
 8008c1a:	79fb      	ldrb	r3, [r7, #7]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d19b      	bne.n	8008b58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3720      	adds	r7, #32
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	2000013c 	.word	0x2000013c

08008c30 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b08a      	sub	sp, #40	; 0x28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
 8008c3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008c42:	f7fc fdbb 	bl	80057bc <HAL_GetTick>
 8008c46:	4602      	mov	r2, r0
 8008c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4a:	1a9b      	subs	r3, r3, r2
 8008c4c:	683a      	ldr	r2, [r7, #0]
 8008c4e:	4413      	add	r3, r2
 8008c50:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008c52:	f7fc fdb3 	bl	80057bc <HAL_GetTick>
 8008c56:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	330c      	adds	r3, #12
 8008c5e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008c60:	4b3d      	ldr	r3, [pc, #244]	; (8008d58 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	4613      	mov	r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4413      	add	r3, r2
 8008c6a:	00da      	lsls	r2, r3, #3
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	0d1b      	lsrs	r3, r3, #20
 8008c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c72:	fb02 f303 	mul.w	r3, r2, r3
 8008c76:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008c78:	e060      	b.n	8008d3c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008c80:	d107      	bne.n	8008c92 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d104      	bne.n	8008c92 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008c90:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c98:	d050      	beq.n	8008d3c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008c9a:	f7fc fd8f 	bl	80057bc <HAL_GetTick>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	6a3b      	ldr	r3, [r7, #32]
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d902      	bls.n	8008cb0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d13d      	bne.n	8008d2c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685a      	ldr	r2, [r3, #4]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008cbe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008cc8:	d111      	bne.n	8008cee <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cd2:	d004      	beq.n	8008cde <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cdc:	d107      	bne.n	8008cee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cf6:	d10f      	bne.n	8008d18 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d06:	601a      	str	r2, [r3, #0]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	e010      	b.n	8008d4e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d101      	bne.n	8008d36 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008d32:	2300      	movs	r3, #0
 8008d34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	689a      	ldr	r2, [r3, #8]
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	4013      	ands	r3, r2
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d196      	bne.n	8008c7a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3728      	adds	r7, #40	; 0x28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	2000013c 	.word	0x2000013c

08008d5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b088      	sub	sp, #32
 8008d60:	af02      	add	r7, sp, #8
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d70:	d111      	bne.n	8008d96 <SPI_EndRxTransaction+0x3a>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d7a:	d004      	beq.n	8008d86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d84:	d107      	bne.n	8008d96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d94:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d9e:	d112      	bne.n	8008dc6 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	9300      	str	r3, [sp, #0]
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	2200      	movs	r2, #0
 8008da8:	2180      	movs	r1, #128	; 0x80
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f7ff feb8 	bl	8008b20 <SPI_WaitFlagStateUntilTimeout>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d021      	beq.n	8008dfa <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dba:	f043 0220 	orr.w	r2, r3, #32
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e03d      	b.n	8008e42 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008dc6:	4b21      	ldr	r3, [pc, #132]	; (8008e4c <SPI_EndRxTransaction+0xf0>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a21      	ldr	r2, [pc, #132]	; (8008e50 <SPI_EndRxTransaction+0xf4>)
 8008dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd0:	0d5b      	lsrs	r3, r3, #21
 8008dd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008dd6:	fb02 f303 	mul.w	r3, r2, r3
 8008dda:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00a      	beq.n	8008df8 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	3b01      	subs	r3, #1
 8008de6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008df2:	2b80      	cmp	r3, #128	; 0x80
 8008df4:	d0f2      	beq.n	8008ddc <SPI_EndRxTransaction+0x80>
 8008df6:	e000      	b.n	8008dfa <SPI_EndRxTransaction+0x9e>
        break;
 8008df8:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e02:	d11d      	bne.n	8008e40 <SPI_EndRxTransaction+0xe4>
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e0c:	d004      	beq.n	8008e18 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e16:	d113      	bne.n	8008e40 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	9300      	str	r3, [sp, #0]
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f7ff ff03 	bl	8008c30 <SPI_WaitFifoStateUntilTimeout>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d007      	beq.n	8008e40 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e34:	f043 0220 	orr.w	r2, r3, #32
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	e000      	b.n	8008e42 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3718      	adds	r7, #24
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	2000013c 	.word	0x2000013c
 8008e50:	165e9f81 	.word	0x165e9f81

08008e54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b088      	sub	sp, #32
 8008e58:	af02      	add	r7, sp, #8
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f7ff fedf 	bl	8008c30 <SPI_WaitFifoStateUntilTimeout>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d007      	beq.n	8008e88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e7c:	f043 0220 	orr.w	r2, r3, #32
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008e84:	2303      	movs	r3, #3
 8008e86:	e046      	b.n	8008f16 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008e88:	4b25      	ldr	r3, [pc, #148]	; (8008f20 <SPI_EndRxTxTransaction+0xcc>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a25      	ldr	r2, [pc, #148]	; (8008f24 <SPI_EndRxTxTransaction+0xd0>)
 8008e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e92:	0d5b      	lsrs	r3, r3, #21
 8008e94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008e98:	fb02 f303 	mul.w	r3, r2, r3
 8008e9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ea6:	d112      	bne.n	8008ece <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	2180      	movs	r1, #128	; 0x80
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f7ff fe34 	bl	8008b20 <SPI_WaitFlagStateUntilTimeout>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d016      	beq.n	8008eec <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ec2:	f043 0220 	orr.w	r2, r3, #32
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	e023      	b.n	8008f16 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00a      	beq.n	8008eea <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee4:	2b80      	cmp	r3, #128	; 0x80
 8008ee6:	d0f2      	beq.n	8008ece <SPI_EndRxTxTransaction+0x7a>
 8008ee8:	e000      	b.n	8008eec <SPI_EndRxTxTransaction+0x98>
        break;
 8008eea:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f7ff fe99 	bl	8008c30 <SPI_WaitFifoStateUntilTimeout>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d007      	beq.n	8008f14 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f08:	f043 0220 	orr.w	r2, r3, #32
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008f10:	2303      	movs	r3, #3
 8008f12:	e000      	b.n	8008f16 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3718      	adds	r7, #24
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	2000013c 	.word	0x2000013c
 8008f24:	165e9f81 	.word	0x165e9f81

08008f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d101      	bne.n	8008f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e049      	b.n	8008fce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d106      	bne.n	8008f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7fc f9cc 	bl	80052ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2202      	movs	r2, #2
 8008f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	3304      	adds	r3, #4
 8008f64:	4619      	mov	r1, r3
 8008f66:	4610      	mov	r0, r2
 8008f68:	f000 fdde 	bl	8009b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
	...

08008fd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d001      	beq.n	8008ff0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e054      	b.n	800909a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68da      	ldr	r2, [r3, #12]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f042 0201 	orr.w	r2, r2, #1
 8009006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a26      	ldr	r2, [pc, #152]	; (80090a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d022      	beq.n	8009058 <HAL_TIM_Base_Start_IT+0x80>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800901a:	d01d      	beq.n	8009058 <HAL_TIM_Base_Start_IT+0x80>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a22      	ldr	r2, [pc, #136]	; (80090ac <HAL_TIM_Base_Start_IT+0xd4>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d018      	beq.n	8009058 <HAL_TIM_Base_Start_IT+0x80>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a21      	ldr	r2, [pc, #132]	; (80090b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d013      	beq.n	8009058 <HAL_TIM_Base_Start_IT+0x80>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a1f      	ldr	r2, [pc, #124]	; (80090b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d00e      	beq.n	8009058 <HAL_TIM_Base_Start_IT+0x80>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a1e      	ldr	r2, [pc, #120]	; (80090b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d009      	beq.n	8009058 <HAL_TIM_Base_Start_IT+0x80>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a1c      	ldr	r2, [pc, #112]	; (80090bc <HAL_TIM_Base_Start_IT+0xe4>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d004      	beq.n	8009058 <HAL_TIM_Base_Start_IT+0x80>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a1b      	ldr	r2, [pc, #108]	; (80090c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d115      	bne.n	8009084 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	689a      	ldr	r2, [r3, #8]
 800905e:	4b19      	ldr	r3, [pc, #100]	; (80090c4 <HAL_TIM_Base_Start_IT+0xec>)
 8009060:	4013      	ands	r3, r2
 8009062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2b06      	cmp	r3, #6
 8009068:	d015      	beq.n	8009096 <HAL_TIM_Base_Start_IT+0xbe>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009070:	d011      	beq.n	8009096 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f042 0201 	orr.w	r2, r2, #1
 8009080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009082:	e008      	b.n	8009096 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f042 0201 	orr.w	r2, r2, #1
 8009092:	601a      	str	r2, [r3, #0]
 8009094:	e000      	b.n	8009098 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009096:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3714      	adds	r7, #20
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	40010000 	.word	0x40010000
 80090ac:	40000400 	.word	0x40000400
 80090b0:	40000800 	.word	0x40000800
 80090b4:	40000c00 	.word	0x40000c00
 80090b8:	40010400 	.word	0x40010400
 80090bc:	40014000 	.word	0x40014000
 80090c0:	40001800 	.word	0x40001800
 80090c4:	00010007 	.word	0x00010007

080090c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68da      	ldr	r2, [r3, #12]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f022 0201 	bic.w	r2, r2, #1
 80090de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	6a1a      	ldr	r2, [r3, #32]
 80090e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80090ea:	4013      	ands	r3, r2
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10f      	bne.n	8009110 <HAL_TIM_Base_Stop_IT+0x48>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6a1a      	ldr	r2, [r3, #32]
 80090f6:	f240 4344 	movw	r3, #1092	; 0x444
 80090fa:	4013      	ands	r3, r2
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d107      	bne.n	8009110 <HAL_TIM_Base_Stop_IT+0x48>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f022 0201 	bic.w	r2, r2, #1
 800910e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	370c      	adds	r7, #12
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b082      	sub	sp, #8
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d101      	bne.n	8009138 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	e049      	b.n	80091cc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800913e:	b2db      	uxtb	r3, r3
 8009140:	2b00      	cmp	r3, #0
 8009142:	d106      	bne.n	8009152 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f841 	bl	80091d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2202      	movs	r2, #2
 8009156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	3304      	adds	r3, #4
 8009162:	4619      	mov	r1, r3
 8009164:	4610      	mov	r0, r2
 8009166:	f000 fcdf 	bl	8009b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2201      	movs	r2, #1
 800916e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2201      	movs	r2, #1
 8009176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2201      	movs	r2, #1
 8009186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2201      	movs	r2, #1
 800918e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2201      	movs	r2, #1
 8009196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2201      	movs	r2, #1
 800919e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2201      	movs	r2, #1
 80091b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2201      	movs	r2, #1
 80091be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3708      	adds	r7, #8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80091dc:	bf00      	nop
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d109      	bne.n	800920c <HAL_TIM_PWM_Start+0x24>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	2b01      	cmp	r3, #1
 8009202:	bf14      	ite	ne
 8009204:	2301      	movne	r3, #1
 8009206:	2300      	moveq	r3, #0
 8009208:	b2db      	uxtb	r3, r3
 800920a:	e03c      	b.n	8009286 <HAL_TIM_PWM_Start+0x9e>
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	2b04      	cmp	r3, #4
 8009210:	d109      	bne.n	8009226 <HAL_TIM_PWM_Start+0x3e>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009218:	b2db      	uxtb	r3, r3
 800921a:	2b01      	cmp	r3, #1
 800921c:	bf14      	ite	ne
 800921e:	2301      	movne	r3, #1
 8009220:	2300      	moveq	r3, #0
 8009222:	b2db      	uxtb	r3, r3
 8009224:	e02f      	b.n	8009286 <HAL_TIM_PWM_Start+0x9e>
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	2b08      	cmp	r3, #8
 800922a:	d109      	bne.n	8009240 <HAL_TIM_PWM_Start+0x58>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b01      	cmp	r3, #1
 8009236:	bf14      	ite	ne
 8009238:	2301      	movne	r3, #1
 800923a:	2300      	moveq	r3, #0
 800923c:	b2db      	uxtb	r3, r3
 800923e:	e022      	b.n	8009286 <HAL_TIM_PWM_Start+0x9e>
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	2b0c      	cmp	r3, #12
 8009244:	d109      	bne.n	800925a <HAL_TIM_PWM_Start+0x72>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b01      	cmp	r3, #1
 8009250:	bf14      	ite	ne
 8009252:	2301      	movne	r3, #1
 8009254:	2300      	moveq	r3, #0
 8009256:	b2db      	uxtb	r3, r3
 8009258:	e015      	b.n	8009286 <HAL_TIM_PWM_Start+0x9e>
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	2b10      	cmp	r3, #16
 800925e:	d109      	bne.n	8009274 <HAL_TIM_PWM_Start+0x8c>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009266:	b2db      	uxtb	r3, r3
 8009268:	2b01      	cmp	r3, #1
 800926a:	bf14      	ite	ne
 800926c:	2301      	movne	r3, #1
 800926e:	2300      	moveq	r3, #0
 8009270:	b2db      	uxtb	r3, r3
 8009272:	e008      	b.n	8009286 <HAL_TIM_PWM_Start+0x9e>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b01      	cmp	r3, #1
 800927e:	bf14      	ite	ne
 8009280:	2301      	movne	r3, #1
 8009282:	2300      	moveq	r3, #0
 8009284:	b2db      	uxtb	r3, r3
 8009286:	2b00      	cmp	r3, #0
 8009288:	d001      	beq.n	800928e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e092      	b.n	80093b4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d104      	bne.n	800929e <HAL_TIM_PWM_Start+0xb6>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2202      	movs	r2, #2
 8009298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800929c:	e023      	b.n	80092e6 <HAL_TIM_PWM_Start+0xfe>
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	2b04      	cmp	r3, #4
 80092a2:	d104      	bne.n	80092ae <HAL_TIM_PWM_Start+0xc6>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2202      	movs	r2, #2
 80092a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092ac:	e01b      	b.n	80092e6 <HAL_TIM_PWM_Start+0xfe>
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	2b08      	cmp	r3, #8
 80092b2:	d104      	bne.n	80092be <HAL_TIM_PWM_Start+0xd6>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2202      	movs	r2, #2
 80092b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092bc:	e013      	b.n	80092e6 <HAL_TIM_PWM_Start+0xfe>
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	2b0c      	cmp	r3, #12
 80092c2:	d104      	bne.n	80092ce <HAL_TIM_PWM_Start+0xe6>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2202      	movs	r2, #2
 80092c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092cc:	e00b      	b.n	80092e6 <HAL_TIM_PWM_Start+0xfe>
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	2b10      	cmp	r3, #16
 80092d2:	d104      	bne.n	80092de <HAL_TIM_PWM_Start+0xf6>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2202      	movs	r2, #2
 80092d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092dc:	e003      	b.n	80092e6 <HAL_TIM_PWM_Start+0xfe>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2202      	movs	r2, #2
 80092e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2201      	movs	r2, #1
 80092ec:	6839      	ldr	r1, [r7, #0]
 80092ee:	4618      	mov	r0, r3
 80092f0:	f000 ffb2 	bl	800a258 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a30      	ldr	r2, [pc, #192]	; (80093bc <HAL_TIM_PWM_Start+0x1d4>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d004      	beq.n	8009308 <HAL_TIM_PWM_Start+0x120>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a2f      	ldr	r2, [pc, #188]	; (80093c0 <HAL_TIM_PWM_Start+0x1d8>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d101      	bne.n	800930c <HAL_TIM_PWM_Start+0x124>
 8009308:	2301      	movs	r3, #1
 800930a:	e000      	b.n	800930e <HAL_TIM_PWM_Start+0x126>
 800930c:	2300      	movs	r3, #0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d007      	beq.n	8009322 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009320:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a25      	ldr	r2, [pc, #148]	; (80093bc <HAL_TIM_PWM_Start+0x1d4>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d022      	beq.n	8009372 <HAL_TIM_PWM_Start+0x18a>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009334:	d01d      	beq.n	8009372 <HAL_TIM_PWM_Start+0x18a>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a22      	ldr	r2, [pc, #136]	; (80093c4 <HAL_TIM_PWM_Start+0x1dc>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d018      	beq.n	8009372 <HAL_TIM_PWM_Start+0x18a>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a20      	ldr	r2, [pc, #128]	; (80093c8 <HAL_TIM_PWM_Start+0x1e0>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d013      	beq.n	8009372 <HAL_TIM_PWM_Start+0x18a>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a1f      	ldr	r2, [pc, #124]	; (80093cc <HAL_TIM_PWM_Start+0x1e4>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d00e      	beq.n	8009372 <HAL_TIM_PWM_Start+0x18a>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a19      	ldr	r2, [pc, #100]	; (80093c0 <HAL_TIM_PWM_Start+0x1d8>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d009      	beq.n	8009372 <HAL_TIM_PWM_Start+0x18a>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a1b      	ldr	r2, [pc, #108]	; (80093d0 <HAL_TIM_PWM_Start+0x1e8>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d004      	beq.n	8009372 <HAL_TIM_PWM_Start+0x18a>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a19      	ldr	r2, [pc, #100]	; (80093d4 <HAL_TIM_PWM_Start+0x1ec>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d115      	bne.n	800939e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	689a      	ldr	r2, [r3, #8]
 8009378:	4b17      	ldr	r3, [pc, #92]	; (80093d8 <HAL_TIM_PWM_Start+0x1f0>)
 800937a:	4013      	ands	r3, r2
 800937c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b06      	cmp	r3, #6
 8009382:	d015      	beq.n	80093b0 <HAL_TIM_PWM_Start+0x1c8>
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800938a:	d011      	beq.n	80093b0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f042 0201 	orr.w	r2, r2, #1
 800939a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800939c:	e008      	b.n	80093b0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f042 0201 	orr.w	r2, r2, #1
 80093ac:	601a      	str	r2, [r3, #0]
 80093ae:	e000      	b.n	80093b2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	40010000 	.word	0x40010000
 80093c0:	40010400 	.word	0x40010400
 80093c4:	40000400 	.word	0x40000400
 80093c8:	40000800 	.word	0x40000800
 80093cc:	40000c00 	.word	0x40000c00
 80093d0:	40014000 	.word	0x40014000
 80093d4:	40001800 	.word	0x40001800
 80093d8:	00010007 	.word	0x00010007

080093dc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2200      	movs	r2, #0
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f000 ff32 	bl	800a258 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a36      	ldr	r2, [pc, #216]	; (80094d4 <HAL_TIM_PWM_Stop+0xf8>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d004      	beq.n	8009408 <HAL_TIM_PWM_Stop+0x2c>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a35      	ldr	r2, [pc, #212]	; (80094d8 <HAL_TIM_PWM_Stop+0xfc>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d101      	bne.n	800940c <HAL_TIM_PWM_Stop+0x30>
 8009408:	2301      	movs	r3, #1
 800940a:	e000      	b.n	800940e <HAL_TIM_PWM_Stop+0x32>
 800940c:	2300      	movs	r3, #0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d017      	beq.n	8009442 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	6a1a      	ldr	r2, [r3, #32]
 8009418:	f241 1311 	movw	r3, #4369	; 0x1111
 800941c:	4013      	ands	r3, r2
 800941e:	2b00      	cmp	r3, #0
 8009420:	d10f      	bne.n	8009442 <HAL_TIM_PWM_Stop+0x66>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	6a1a      	ldr	r2, [r3, #32]
 8009428:	f240 4344 	movw	r3, #1092	; 0x444
 800942c:	4013      	ands	r3, r2
 800942e:	2b00      	cmp	r3, #0
 8009430:	d107      	bne.n	8009442 <HAL_TIM_PWM_Stop+0x66>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009440:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	6a1a      	ldr	r2, [r3, #32]
 8009448:	f241 1311 	movw	r3, #4369	; 0x1111
 800944c:	4013      	ands	r3, r2
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10f      	bne.n	8009472 <HAL_TIM_PWM_Stop+0x96>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	6a1a      	ldr	r2, [r3, #32]
 8009458:	f240 4344 	movw	r3, #1092	; 0x444
 800945c:	4013      	ands	r3, r2
 800945e:	2b00      	cmp	r3, #0
 8009460:	d107      	bne.n	8009472 <HAL_TIM_PWM_Stop+0x96>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f022 0201 	bic.w	r2, r2, #1
 8009470:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d104      	bne.n	8009482 <HAL_TIM_PWM_Stop+0xa6>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009480:	e023      	b.n	80094ca <HAL_TIM_PWM_Stop+0xee>
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	2b04      	cmp	r3, #4
 8009486:	d104      	bne.n	8009492 <HAL_TIM_PWM_Stop+0xb6>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009490:	e01b      	b.n	80094ca <HAL_TIM_PWM_Stop+0xee>
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	2b08      	cmp	r3, #8
 8009496:	d104      	bne.n	80094a2 <HAL_TIM_PWM_Stop+0xc6>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094a0:	e013      	b.n	80094ca <HAL_TIM_PWM_Stop+0xee>
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2b0c      	cmp	r3, #12
 80094a6:	d104      	bne.n	80094b2 <HAL_TIM_PWM_Stop+0xd6>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80094b0:	e00b      	b.n	80094ca <HAL_TIM_PWM_Stop+0xee>
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	2b10      	cmp	r3, #16
 80094b6:	d104      	bne.n	80094c2 <HAL_TIM_PWM_Stop+0xe6>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094c0:	e003      	b.n	80094ca <HAL_TIM_PWM_Stop+0xee>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	40010000 	.word	0x40010000
 80094d8:	40010400 	.word	0x40010400

080094dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	f003 0302 	and.w	r3, r3, #2
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d122      	bne.n	8009538 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	f003 0302 	and.w	r3, r3, #2
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d11b      	bne.n	8009538 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f06f 0202 	mvn.w	r2, #2
 8009508:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2201      	movs	r2, #1
 800950e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	f003 0303 	and.w	r3, r3, #3
 800951a:	2b00      	cmp	r3, #0
 800951c:	d003      	beq.n	8009526 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 fae4 	bl	8009aec <HAL_TIM_IC_CaptureCallback>
 8009524:	e005      	b.n	8009532 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fad6 	bl	8009ad8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 fae7 	bl	8009b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	f003 0304 	and.w	r3, r3, #4
 8009542:	2b04      	cmp	r3, #4
 8009544:	d122      	bne.n	800958c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	f003 0304 	and.w	r3, r3, #4
 8009550:	2b04      	cmp	r3, #4
 8009552:	d11b      	bne.n	800958c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f06f 0204 	mvn.w	r2, #4
 800955c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2202      	movs	r2, #2
 8009562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800956e:	2b00      	cmp	r3, #0
 8009570:	d003      	beq.n	800957a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 faba 	bl	8009aec <HAL_TIM_IC_CaptureCallback>
 8009578:	e005      	b.n	8009586 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 faac 	bl	8009ad8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fabd 	bl	8009b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	f003 0308 	and.w	r3, r3, #8
 8009596:	2b08      	cmp	r3, #8
 8009598:	d122      	bne.n	80095e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	f003 0308 	and.w	r3, r3, #8
 80095a4:	2b08      	cmp	r3, #8
 80095a6:	d11b      	bne.n	80095e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f06f 0208 	mvn.w	r2, #8
 80095b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2204      	movs	r2, #4
 80095b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	69db      	ldr	r3, [r3, #28]
 80095be:	f003 0303 	and.w	r3, r3, #3
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d003      	beq.n	80095ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 fa90 	bl	8009aec <HAL_TIM_IC_CaptureCallback>
 80095cc:	e005      	b.n	80095da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fa82 	bl	8009ad8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fa93 	bl	8009b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	691b      	ldr	r3, [r3, #16]
 80095e6:	f003 0310 	and.w	r3, r3, #16
 80095ea:	2b10      	cmp	r3, #16
 80095ec:	d122      	bne.n	8009634 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	f003 0310 	and.w	r3, r3, #16
 80095f8:	2b10      	cmp	r3, #16
 80095fa:	d11b      	bne.n	8009634 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f06f 0210 	mvn.w	r2, #16
 8009604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2208      	movs	r2, #8
 800960a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	69db      	ldr	r3, [r3, #28]
 8009612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009616:	2b00      	cmp	r3, #0
 8009618:	d003      	beq.n	8009622 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 fa66 	bl	8009aec <HAL_TIM_IC_CaptureCallback>
 8009620:	e005      	b.n	800962e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fa58 	bl	8009ad8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 fa69 	bl	8009b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	f003 0301 	and.w	r3, r3, #1
 800963e:	2b01      	cmp	r3, #1
 8009640:	d10e      	bne.n	8009660 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	f003 0301 	and.w	r3, r3, #1
 800964c:	2b01      	cmp	r3, #1
 800964e:	d107      	bne.n	8009660 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f06f 0201 	mvn.w	r2, #1
 8009658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7f9 fce0 	bl	8003020 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800966a:	2b80      	cmp	r3, #128	; 0x80
 800966c:	d10e      	bne.n	800968c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009678:	2b80      	cmp	r3, #128	; 0x80
 800967a:	d107      	bne.n	800968c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 ff22 	bl	800a4d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800969a:	d10e      	bne.n	80096ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096a6:	2b80      	cmp	r3, #128	; 0x80
 80096a8:	d107      	bne.n	80096ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80096b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 ff15 	bl	800a4e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c4:	2b40      	cmp	r3, #64	; 0x40
 80096c6:	d10e      	bne.n	80096e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d2:	2b40      	cmp	r3, #64	; 0x40
 80096d4:	d107      	bne.n	80096e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80096de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fa17 	bl	8009b14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	f003 0320 	and.w	r3, r3, #32
 80096f0:	2b20      	cmp	r3, #32
 80096f2:	d10e      	bne.n	8009712 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	f003 0320 	and.w	r3, r3, #32
 80096fe:	2b20      	cmp	r3, #32
 8009700:	d107      	bne.n	8009712 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f06f 0220 	mvn.w	r2, #32
 800970a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fed5 	bl	800a4bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009712:	bf00      	nop
 8009714:	3708      	adds	r7, #8
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
	...

0800971c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b086      	sub	sp, #24
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009728:	2300      	movs	r3, #0
 800972a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009732:	2b01      	cmp	r3, #1
 8009734:	d101      	bne.n	800973a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009736:	2302      	movs	r3, #2
 8009738:	e0ff      	b.n	800993a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2201      	movs	r2, #1
 800973e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2b14      	cmp	r3, #20
 8009746:	f200 80f0 	bhi.w	800992a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800974a:	a201      	add	r2, pc, #4	; (adr r2, 8009750 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800974c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009750:	080097a5 	.word	0x080097a5
 8009754:	0800992b 	.word	0x0800992b
 8009758:	0800992b 	.word	0x0800992b
 800975c:	0800992b 	.word	0x0800992b
 8009760:	080097e5 	.word	0x080097e5
 8009764:	0800992b 	.word	0x0800992b
 8009768:	0800992b 	.word	0x0800992b
 800976c:	0800992b 	.word	0x0800992b
 8009770:	08009827 	.word	0x08009827
 8009774:	0800992b 	.word	0x0800992b
 8009778:	0800992b 	.word	0x0800992b
 800977c:	0800992b 	.word	0x0800992b
 8009780:	08009867 	.word	0x08009867
 8009784:	0800992b 	.word	0x0800992b
 8009788:	0800992b 	.word	0x0800992b
 800978c:	0800992b 	.word	0x0800992b
 8009790:	080098a9 	.word	0x080098a9
 8009794:	0800992b 	.word	0x0800992b
 8009798:	0800992b 	.word	0x0800992b
 800979c:	0800992b 	.word	0x0800992b
 80097a0:	080098e9 	.word	0x080098e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68b9      	ldr	r1, [r7, #8]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 fa5c 	bl	8009c68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	699a      	ldr	r2, [r3, #24]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f042 0208 	orr.w	r2, r2, #8
 80097be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	699a      	ldr	r2, [r3, #24]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f022 0204 	bic.w	r2, r2, #4
 80097ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	6999      	ldr	r1, [r3, #24]
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	691a      	ldr	r2, [r3, #16]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	430a      	orrs	r2, r1
 80097e0:	619a      	str	r2, [r3, #24]
      break;
 80097e2:	e0a5      	b.n	8009930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68b9      	ldr	r1, [r7, #8]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f000 faae 	bl	8009d4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	699a      	ldr	r2, [r3, #24]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	699a      	ldr	r2, [r3, #24]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800980e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	6999      	ldr	r1, [r3, #24]
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	021a      	lsls	r2, r3, #8
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	430a      	orrs	r2, r1
 8009822:	619a      	str	r2, [r3, #24]
      break;
 8009824:	e084      	b.n	8009930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68b9      	ldr	r1, [r7, #8]
 800982c:	4618      	mov	r0, r3
 800982e:	f000 fb05 	bl	8009e3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	69da      	ldr	r2, [r3, #28]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f042 0208 	orr.w	r2, r2, #8
 8009840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	69da      	ldr	r2, [r3, #28]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f022 0204 	bic.w	r2, r2, #4
 8009850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	69d9      	ldr	r1, [r3, #28]
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	691a      	ldr	r2, [r3, #16]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	430a      	orrs	r2, r1
 8009862:	61da      	str	r2, [r3, #28]
      break;
 8009864:	e064      	b.n	8009930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68b9      	ldr	r1, [r7, #8]
 800986c:	4618      	mov	r0, r3
 800986e:	f000 fb5b 	bl	8009f28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	69da      	ldr	r2, [r3, #28]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	69da      	ldr	r2, [r3, #28]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	69d9      	ldr	r1, [r3, #28]
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	021a      	lsls	r2, r3, #8
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	430a      	orrs	r2, r1
 80098a4:	61da      	str	r2, [r3, #28]
      break;
 80098a6:	e043      	b.n	8009930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68b9      	ldr	r1, [r7, #8]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f000 fb92 	bl	8009fd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f042 0208 	orr.w	r2, r2, #8
 80098c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f022 0204 	bic.w	r2, r2, #4
 80098d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	691a      	ldr	r2, [r3, #16]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	430a      	orrs	r2, r1
 80098e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80098e6:	e023      	b.n	8009930 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68b9      	ldr	r1, [r7, #8]
 80098ee:	4618      	mov	r0, r3
 80098f0:	f000 fbc4 	bl	800a07c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009902:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009912:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	021a      	lsls	r2, r3, #8
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	430a      	orrs	r2, r1
 8009926:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009928:	e002      	b.n	8009930 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	75fb      	strb	r3, [r7, #23]
      break;
 800992e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009938:	7dfb      	ldrb	r3, [r7, #23]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3718      	adds	r7, #24
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop

08009944 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009958:	2b01      	cmp	r3, #1
 800995a:	d101      	bne.n	8009960 <HAL_TIM_ConfigClockSource+0x1c>
 800995c:	2302      	movs	r3, #2
 800995e:	e0b4      	b.n	8009aca <HAL_TIM_ConfigClockSource+0x186>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2202      	movs	r2, #2
 800996c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009978:	68ba      	ldr	r2, [r7, #8]
 800997a:	4b56      	ldr	r3, [pc, #344]	; (8009ad4 <HAL_TIM_ConfigClockSource+0x190>)
 800997c:	4013      	ands	r3, r2
 800997e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009986:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009998:	d03e      	beq.n	8009a18 <HAL_TIM_ConfigClockSource+0xd4>
 800999a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800999e:	f200 8087 	bhi.w	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099a6:	f000 8086 	beq.w	8009ab6 <HAL_TIM_ConfigClockSource+0x172>
 80099aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099ae:	d87f      	bhi.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099b0:	2b70      	cmp	r3, #112	; 0x70
 80099b2:	d01a      	beq.n	80099ea <HAL_TIM_ConfigClockSource+0xa6>
 80099b4:	2b70      	cmp	r3, #112	; 0x70
 80099b6:	d87b      	bhi.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099b8:	2b60      	cmp	r3, #96	; 0x60
 80099ba:	d050      	beq.n	8009a5e <HAL_TIM_ConfigClockSource+0x11a>
 80099bc:	2b60      	cmp	r3, #96	; 0x60
 80099be:	d877      	bhi.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099c0:	2b50      	cmp	r3, #80	; 0x50
 80099c2:	d03c      	beq.n	8009a3e <HAL_TIM_ConfigClockSource+0xfa>
 80099c4:	2b50      	cmp	r3, #80	; 0x50
 80099c6:	d873      	bhi.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099c8:	2b40      	cmp	r3, #64	; 0x40
 80099ca:	d058      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0x13a>
 80099cc:	2b40      	cmp	r3, #64	; 0x40
 80099ce:	d86f      	bhi.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099d0:	2b30      	cmp	r3, #48	; 0x30
 80099d2:	d064      	beq.n	8009a9e <HAL_TIM_ConfigClockSource+0x15a>
 80099d4:	2b30      	cmp	r3, #48	; 0x30
 80099d6:	d86b      	bhi.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099d8:	2b20      	cmp	r3, #32
 80099da:	d060      	beq.n	8009a9e <HAL_TIM_ConfigClockSource+0x15a>
 80099dc:	2b20      	cmp	r3, #32
 80099de:	d867      	bhi.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d05c      	beq.n	8009a9e <HAL_TIM_ConfigClockSource+0x15a>
 80099e4:	2b10      	cmp	r3, #16
 80099e6:	d05a      	beq.n	8009a9e <HAL_TIM_ConfigClockSource+0x15a>
 80099e8:	e062      	b.n	8009ab0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80099fa:	f000 fc0d 	bl	800a218 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009a0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	609a      	str	r2, [r3, #8]
      break;
 8009a16:	e04f      	b.n	8009ab8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a28:	f000 fbf6 	bl	800a218 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	689a      	ldr	r2, [r3, #8]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a3a:	609a      	str	r2, [r3, #8]
      break;
 8009a3c:	e03c      	b.n	8009ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	f000 fb6a 	bl	800a124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2150      	movs	r1, #80	; 0x50
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 fbc3 	bl	800a1e2 <TIM_ITRx_SetConfig>
      break;
 8009a5c:	e02c      	b.n	8009ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	f000 fb89 	bl	800a182 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2160      	movs	r1, #96	; 0x60
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 fbb3 	bl	800a1e2 <TIM_ITRx_SetConfig>
      break;
 8009a7c:	e01c      	b.n	8009ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	f000 fb4a 	bl	800a124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2140      	movs	r1, #64	; 0x40
 8009a96:	4618      	mov	r0, r3
 8009a98:	f000 fba3 	bl	800a1e2 <TIM_ITRx_SetConfig>
      break;
 8009a9c:	e00c      	b.n	8009ab8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	f000 fb9a 	bl	800a1e2 <TIM_ITRx_SetConfig>
      break;
 8009aae:	e003      	b.n	8009ab8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ab4:	e000      	b.n	8009ab8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009ab6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	fffeff88 	.word	0xfffeff88

08009ad8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b1c:	bf00      	nop
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4a40      	ldr	r2, [pc, #256]	; (8009c3c <TIM_Base_SetConfig+0x114>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d013      	beq.n	8009b68 <TIM_Base_SetConfig+0x40>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b46:	d00f      	beq.n	8009b68 <TIM_Base_SetConfig+0x40>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a3d      	ldr	r2, [pc, #244]	; (8009c40 <TIM_Base_SetConfig+0x118>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d00b      	beq.n	8009b68 <TIM_Base_SetConfig+0x40>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a3c      	ldr	r2, [pc, #240]	; (8009c44 <TIM_Base_SetConfig+0x11c>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d007      	beq.n	8009b68 <TIM_Base_SetConfig+0x40>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a3b      	ldr	r2, [pc, #236]	; (8009c48 <TIM_Base_SetConfig+0x120>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d003      	beq.n	8009b68 <TIM_Base_SetConfig+0x40>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a3a      	ldr	r2, [pc, #232]	; (8009c4c <TIM_Base_SetConfig+0x124>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d108      	bne.n	8009b7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	4313      	orrs	r3, r2
 8009b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4a2f      	ldr	r2, [pc, #188]	; (8009c3c <TIM_Base_SetConfig+0x114>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d02b      	beq.n	8009bda <TIM_Base_SetConfig+0xb2>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b88:	d027      	beq.n	8009bda <TIM_Base_SetConfig+0xb2>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a2c      	ldr	r2, [pc, #176]	; (8009c40 <TIM_Base_SetConfig+0x118>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d023      	beq.n	8009bda <TIM_Base_SetConfig+0xb2>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4a2b      	ldr	r2, [pc, #172]	; (8009c44 <TIM_Base_SetConfig+0x11c>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d01f      	beq.n	8009bda <TIM_Base_SetConfig+0xb2>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4a2a      	ldr	r2, [pc, #168]	; (8009c48 <TIM_Base_SetConfig+0x120>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d01b      	beq.n	8009bda <TIM_Base_SetConfig+0xb2>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4a29      	ldr	r2, [pc, #164]	; (8009c4c <TIM_Base_SetConfig+0x124>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d017      	beq.n	8009bda <TIM_Base_SetConfig+0xb2>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a28      	ldr	r2, [pc, #160]	; (8009c50 <TIM_Base_SetConfig+0x128>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d013      	beq.n	8009bda <TIM_Base_SetConfig+0xb2>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a27      	ldr	r2, [pc, #156]	; (8009c54 <TIM_Base_SetConfig+0x12c>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d00f      	beq.n	8009bda <TIM_Base_SetConfig+0xb2>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a26      	ldr	r2, [pc, #152]	; (8009c58 <TIM_Base_SetConfig+0x130>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d00b      	beq.n	8009bda <TIM_Base_SetConfig+0xb2>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a25      	ldr	r2, [pc, #148]	; (8009c5c <TIM_Base_SetConfig+0x134>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d007      	beq.n	8009bda <TIM_Base_SetConfig+0xb2>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a24      	ldr	r2, [pc, #144]	; (8009c60 <TIM_Base_SetConfig+0x138>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d003      	beq.n	8009bda <TIM_Base_SetConfig+0xb2>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a23      	ldr	r2, [pc, #140]	; (8009c64 <TIM_Base_SetConfig+0x13c>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d108      	bne.n	8009bec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	695b      	ldr	r3, [r3, #20]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	689a      	ldr	r2, [r3, #8]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4a0a      	ldr	r2, [pc, #40]	; (8009c3c <TIM_Base_SetConfig+0x114>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d003      	beq.n	8009c20 <TIM_Base_SetConfig+0xf8>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a0c      	ldr	r2, [pc, #48]	; (8009c4c <TIM_Base_SetConfig+0x124>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d103      	bne.n	8009c28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	691a      	ldr	r2, [r3, #16]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	615a      	str	r2, [r3, #20]
}
 8009c2e:	bf00      	nop
 8009c30:	3714      	adds	r7, #20
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	40010000 	.word	0x40010000
 8009c40:	40000400 	.word	0x40000400
 8009c44:	40000800 	.word	0x40000800
 8009c48:	40000c00 	.word	0x40000c00
 8009c4c:	40010400 	.word	0x40010400
 8009c50:	40014000 	.word	0x40014000
 8009c54:	40014400 	.word	0x40014400
 8009c58:	40014800 	.word	0x40014800
 8009c5c:	40001800 	.word	0x40001800
 8009c60:	40001c00 	.word	0x40001c00
 8009c64:	40002000 	.word	0x40002000

08009c68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b087      	sub	sp, #28
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a1b      	ldr	r3, [r3, #32]
 8009c76:	f023 0201 	bic.w	r2, r3, #1
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a1b      	ldr	r3, [r3, #32]
 8009c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	699b      	ldr	r3, [r3, #24]
 8009c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	4b2b      	ldr	r3, [pc, #172]	; (8009d40 <TIM_OC1_SetConfig+0xd8>)
 8009c94:	4013      	ands	r3, r2
 8009c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f023 0303 	bic.w	r3, r3, #3
 8009c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	f023 0302 	bic.w	r3, r3, #2
 8009cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	697a      	ldr	r2, [r7, #20]
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4a21      	ldr	r2, [pc, #132]	; (8009d44 <TIM_OC1_SetConfig+0xdc>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d003      	beq.n	8009ccc <TIM_OC1_SetConfig+0x64>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	4a20      	ldr	r2, [pc, #128]	; (8009d48 <TIM_OC1_SetConfig+0xe0>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d10c      	bne.n	8009ce6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	f023 0308 	bic.w	r3, r3, #8
 8009cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	697a      	ldr	r2, [r7, #20]
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	f023 0304 	bic.w	r3, r3, #4
 8009ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a16      	ldr	r2, [pc, #88]	; (8009d44 <TIM_OC1_SetConfig+0xdc>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d003      	beq.n	8009cf6 <TIM_OC1_SetConfig+0x8e>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a15      	ldr	r2, [pc, #84]	; (8009d48 <TIM_OC1_SetConfig+0xe0>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d111      	bne.n	8009d1a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	695b      	ldr	r3, [r3, #20]
 8009d0a:	693a      	ldr	r2, [r7, #16]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	699b      	ldr	r3, [r3, #24]
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	693a      	ldr	r2, [r7, #16]
 8009d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	685a      	ldr	r2, [r3, #4]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	697a      	ldr	r2, [r7, #20]
 8009d32:	621a      	str	r2, [r3, #32]
}
 8009d34:	bf00      	nop
 8009d36:	371c      	adds	r7, #28
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr
 8009d40:	fffeff8f 	.word	0xfffeff8f
 8009d44:	40010000 	.word	0x40010000
 8009d48:	40010400 	.word	0x40010400

08009d4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b087      	sub	sp, #28
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a1b      	ldr	r3, [r3, #32]
 8009d5a:	f023 0210 	bic.w	r2, r3, #16
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a1b      	ldr	r3, [r3, #32]
 8009d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	4b2e      	ldr	r3, [pc, #184]	; (8009e30 <TIM_OC2_SetConfig+0xe4>)
 8009d78:	4013      	ands	r3, r2
 8009d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	021b      	lsls	r3, r3, #8
 8009d8a:	68fa      	ldr	r2, [r7, #12]
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	f023 0320 	bic.w	r3, r3, #32
 8009d96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	011b      	lsls	r3, r3, #4
 8009d9e:	697a      	ldr	r2, [r7, #20]
 8009da0:	4313      	orrs	r3, r2
 8009da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4a23      	ldr	r2, [pc, #140]	; (8009e34 <TIM_OC2_SetConfig+0xe8>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d003      	beq.n	8009db4 <TIM_OC2_SetConfig+0x68>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a22      	ldr	r2, [pc, #136]	; (8009e38 <TIM_OC2_SetConfig+0xec>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d10d      	bne.n	8009dd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009dba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	011b      	lsls	r3, r3, #4
 8009dc2:	697a      	ldr	r2, [r7, #20]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a18      	ldr	r2, [pc, #96]	; (8009e34 <TIM_OC2_SetConfig+0xe8>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d003      	beq.n	8009de0 <TIM_OC2_SetConfig+0x94>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a17      	ldr	r2, [pc, #92]	; (8009e38 <TIM_OC2_SetConfig+0xec>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d113      	bne.n	8009e08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009de6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009dee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	693a      	ldr	r2, [r7, #16]
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	699b      	ldr	r3, [r3, #24]
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	693a      	ldr	r2, [r7, #16]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	693a      	ldr	r2, [r7, #16]
 8009e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	68fa      	ldr	r2, [r7, #12]
 8009e12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	685a      	ldr	r2, [r3, #4]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	621a      	str	r2, [r3, #32]
}
 8009e22:	bf00      	nop
 8009e24:	371c      	adds	r7, #28
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr
 8009e2e:	bf00      	nop
 8009e30:	feff8fff 	.word	0xfeff8fff
 8009e34:	40010000 	.word	0x40010000
 8009e38:	40010400 	.word	0x40010400

08009e3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b087      	sub	sp, #28
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a1b      	ldr	r3, [r3, #32]
 8009e4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	69db      	ldr	r3, [r3, #28]
 8009e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	4b2d      	ldr	r3, [pc, #180]	; (8009f1c <TIM_OC3_SetConfig+0xe0>)
 8009e68:	4013      	ands	r3, r2
 8009e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f023 0303 	bic.w	r3, r3, #3
 8009e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	021b      	lsls	r3, r3, #8
 8009e8c:	697a      	ldr	r2, [r7, #20]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4a22      	ldr	r2, [pc, #136]	; (8009f20 <TIM_OC3_SetConfig+0xe4>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d003      	beq.n	8009ea2 <TIM_OC3_SetConfig+0x66>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4a21      	ldr	r2, [pc, #132]	; (8009f24 <TIM_OC3_SetConfig+0xe8>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d10d      	bne.n	8009ebe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ea8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	021b      	lsls	r3, r3, #8
 8009eb0:	697a      	ldr	r2, [r7, #20]
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4a17      	ldr	r2, [pc, #92]	; (8009f20 <TIM_OC3_SetConfig+0xe4>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d003      	beq.n	8009ece <TIM_OC3_SetConfig+0x92>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4a16      	ldr	r2, [pc, #88]	; (8009f24 <TIM_OC3_SetConfig+0xe8>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d113      	bne.n	8009ef6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	695b      	ldr	r3, [r3, #20]
 8009ee2:	011b      	lsls	r3, r3, #4
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	699b      	ldr	r3, [r3, #24]
 8009eee:	011b      	lsls	r3, r3, #4
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	693a      	ldr	r2, [r7, #16]
 8009efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	685a      	ldr	r2, [r3, #4]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	621a      	str	r2, [r3, #32]
}
 8009f10:	bf00      	nop
 8009f12:	371c      	adds	r7, #28
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr
 8009f1c:	fffeff8f 	.word	0xfffeff8f
 8009f20:	40010000 	.word	0x40010000
 8009f24:	40010400 	.word	0x40010400

08009f28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b087      	sub	sp, #28
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a1b      	ldr	r3, [r3, #32]
 8009f36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a1b      	ldr	r3, [r3, #32]
 8009f42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	69db      	ldr	r3, [r3, #28]
 8009f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	4b1e      	ldr	r3, [pc, #120]	; (8009fcc <TIM_OC4_SetConfig+0xa4>)
 8009f54:	4013      	ands	r3, r2
 8009f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	021b      	lsls	r3, r3, #8
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	031b      	lsls	r3, r3, #12
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a13      	ldr	r2, [pc, #76]	; (8009fd0 <TIM_OC4_SetConfig+0xa8>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d003      	beq.n	8009f90 <TIM_OC4_SetConfig+0x68>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a12      	ldr	r2, [pc, #72]	; (8009fd4 <TIM_OC4_SetConfig+0xac>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d109      	bne.n	8009fa4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	695b      	ldr	r3, [r3, #20]
 8009f9c:	019b      	lsls	r3, r3, #6
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	697a      	ldr	r2, [r7, #20]
 8009fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	685a      	ldr	r2, [r3, #4]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	693a      	ldr	r2, [r7, #16]
 8009fbc:	621a      	str	r2, [r3, #32]
}
 8009fbe:	bf00      	nop
 8009fc0:	371c      	adds	r7, #28
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	feff8fff 	.word	0xfeff8fff
 8009fd0:	40010000 	.word	0x40010000
 8009fd4:	40010400 	.word	0x40010400

08009fd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b087      	sub	sp, #28
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a1b      	ldr	r3, [r3, #32]
 8009fe6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a1b      	ldr	r3, [r3, #32]
 8009ff2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	4b1b      	ldr	r3, [pc, #108]	; (800a070 <TIM_OC5_SetConfig+0x98>)
 800a004:	4013      	ands	r3, r2
 800a006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	4313      	orrs	r3, r2
 800a010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a018:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	041b      	lsls	r3, r3, #16
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	4313      	orrs	r3, r2
 800a024:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a12      	ldr	r2, [pc, #72]	; (800a074 <TIM_OC5_SetConfig+0x9c>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d003      	beq.n	800a036 <TIM_OC5_SetConfig+0x5e>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a11      	ldr	r2, [pc, #68]	; (800a078 <TIM_OC5_SetConfig+0xa0>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d109      	bne.n	800a04a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a03c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	695b      	ldr	r3, [r3, #20]
 800a042:	021b      	lsls	r3, r3, #8
 800a044:	697a      	ldr	r2, [r7, #20]
 800a046:	4313      	orrs	r3, r2
 800a048:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	697a      	ldr	r2, [r7, #20]
 800a04e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	685a      	ldr	r2, [r3, #4]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	693a      	ldr	r2, [r7, #16]
 800a062:	621a      	str	r2, [r3, #32]
}
 800a064:	bf00      	nop
 800a066:	371c      	adds	r7, #28
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr
 800a070:	fffeff8f 	.word	0xfffeff8f
 800a074:	40010000 	.word	0x40010000
 800a078:	40010400 	.word	0x40010400

0800a07c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b087      	sub	sp, #28
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a1b      	ldr	r3, [r3, #32]
 800a096:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	4b1c      	ldr	r3, [pc, #112]	; (800a118 <TIM_OC6_SetConfig+0x9c>)
 800a0a8:	4013      	ands	r3, r2
 800a0aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	021b      	lsls	r3, r3, #8
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a0be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	051b      	lsls	r3, r3, #20
 800a0c6:	693a      	ldr	r2, [r7, #16]
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a13      	ldr	r2, [pc, #76]	; (800a11c <TIM_OC6_SetConfig+0xa0>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d003      	beq.n	800a0dc <TIM_OC6_SetConfig+0x60>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a12      	ldr	r2, [pc, #72]	; (800a120 <TIM_OC6_SetConfig+0xa4>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d109      	bne.n	800a0f0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a0e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	695b      	ldr	r3, [r3, #20]
 800a0e8:	029b      	lsls	r3, r3, #10
 800a0ea:	697a      	ldr	r2, [r7, #20]
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	685a      	ldr	r2, [r3, #4]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	693a      	ldr	r2, [r7, #16]
 800a108:	621a      	str	r2, [r3, #32]
}
 800a10a:	bf00      	nop
 800a10c:	371c      	adds	r7, #28
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	feff8fff 	.word	0xfeff8fff
 800a11c:	40010000 	.word	0x40010000
 800a120:	40010400 	.word	0x40010400

0800a124 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a124:	b480      	push	{r7}
 800a126:	b087      	sub	sp, #28
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6a1b      	ldr	r3, [r3, #32]
 800a134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6a1b      	ldr	r3, [r3, #32]
 800a13a:	f023 0201 	bic.w	r2, r3, #1
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a14e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	011b      	lsls	r3, r3, #4
 800a154:	693a      	ldr	r2, [r7, #16]
 800a156:	4313      	orrs	r3, r2
 800a158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	f023 030a 	bic.w	r3, r3, #10
 800a160:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	4313      	orrs	r3, r2
 800a168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	693a      	ldr	r2, [r7, #16]
 800a16e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	697a      	ldr	r2, [r7, #20]
 800a174:	621a      	str	r2, [r3, #32]
}
 800a176:	bf00      	nop
 800a178:	371c      	adds	r7, #28
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr

0800a182 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a182:	b480      	push	{r7}
 800a184:	b087      	sub	sp, #28
 800a186:	af00      	add	r7, sp, #0
 800a188:	60f8      	str	r0, [r7, #12]
 800a18a:	60b9      	str	r1, [r7, #8]
 800a18c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6a1b      	ldr	r3, [r3, #32]
 800a192:	f023 0210 	bic.w	r2, r3, #16
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	699b      	ldr	r3, [r3, #24]
 800a19e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6a1b      	ldr	r3, [r3, #32]
 800a1a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a1ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	031b      	lsls	r3, r3, #12
 800a1b2:	697a      	ldr	r2, [r7, #20]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a1be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	011b      	lsls	r3, r3, #4
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	697a      	ldr	r2, [r7, #20]
 800a1ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	621a      	str	r2, [r3, #32]
}
 800a1d6:	bf00      	nop
 800a1d8:	371c      	adds	r7, #28
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr

0800a1e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	b085      	sub	sp, #20
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
 800a1ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1fa:	683a      	ldr	r2, [r7, #0]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	f043 0307 	orr.w	r3, r3, #7
 800a204:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	609a      	str	r2, [r3, #8]
}
 800a20c:	bf00      	nop
 800a20e:	3714      	adds	r7, #20
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a218:	b480      	push	{r7}
 800a21a:	b087      	sub	sp, #28
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
 800a224:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a232:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	021a      	lsls	r2, r3, #8
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	431a      	orrs	r2, r3
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	4313      	orrs	r3, r2
 800a240:	697a      	ldr	r2, [r7, #20]
 800a242:	4313      	orrs	r3, r2
 800a244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	697a      	ldr	r2, [r7, #20]
 800a24a:	609a      	str	r2, [r3, #8]
}
 800a24c:	bf00      	nop
 800a24e:	371c      	adds	r7, #28
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a258:	b480      	push	{r7}
 800a25a:	b087      	sub	sp, #28
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	f003 031f 	and.w	r3, r3, #31
 800a26a:	2201      	movs	r2, #1
 800a26c:	fa02 f303 	lsl.w	r3, r2, r3
 800a270:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6a1a      	ldr	r2, [r3, #32]
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	43db      	mvns	r3, r3
 800a27a:	401a      	ands	r2, r3
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	6a1a      	ldr	r2, [r3, #32]
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	f003 031f 	and.w	r3, r3, #31
 800a28a:	6879      	ldr	r1, [r7, #4]
 800a28c:	fa01 f303 	lsl.w	r3, r1, r3
 800a290:	431a      	orrs	r2, r3
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	621a      	str	r2, [r3, #32]
}
 800a296:	bf00      	nop
 800a298:	371c      	adds	r7, #28
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
	...

0800a2a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d101      	bne.n	800a2bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	e06d      	b.n	800a398 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2202      	movs	r2, #2
 800a2c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a30      	ldr	r2, [pc, #192]	; (800a3a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d004      	beq.n	800a2f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a2f      	ldr	r2, [pc, #188]	; (800a3a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d108      	bne.n	800a302 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a2f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	4313      	orrs	r3, r2
 800a300:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a308:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	4313      	orrs	r3, r2
 800a312:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a20      	ldr	r2, [pc, #128]	; (800a3a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d022      	beq.n	800a36c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a32e:	d01d      	beq.n	800a36c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a1d      	ldr	r2, [pc, #116]	; (800a3ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d018      	beq.n	800a36c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a1c      	ldr	r2, [pc, #112]	; (800a3b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d013      	beq.n	800a36c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a1a      	ldr	r2, [pc, #104]	; (800a3b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d00e      	beq.n	800a36c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a15      	ldr	r2, [pc, #84]	; (800a3a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d009      	beq.n	800a36c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a16      	ldr	r2, [pc, #88]	; (800a3b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d004      	beq.n	800a36c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a15      	ldr	r2, [pc, #84]	; (800a3bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d10c      	bne.n	800a386 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a372:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68ba      	ldr	r2, [r7, #8]
 800a384:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2201      	movs	r2, #1
 800a38a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	40010000 	.word	0x40010000
 800a3a8:	40010400 	.word	0x40010400
 800a3ac:	40000400 	.word	0x40000400
 800a3b0:	40000800 	.word	0x40000800
 800a3b4:	40000c00 	.word	0x40000c00
 800a3b8:	40014000 	.word	0x40014000
 800a3bc:	40001800 	.word	0x40001800

0800a3c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d101      	bne.n	800a3dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a3d8:	2302      	movs	r3, #2
 800a3da:	e065      	b.n	800a4a8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4313      	orrs	r3, r2
 800a41a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	4313      	orrs	r3, r2
 800a428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	695b      	ldr	r3, [r3, #20]
 800a434:	4313      	orrs	r3, r2
 800a436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a442:	4313      	orrs	r3, r2
 800a444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	699b      	ldr	r3, [r3, #24]
 800a450:	041b      	lsls	r3, r3, #16
 800a452:	4313      	orrs	r3, r2
 800a454:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a16      	ldr	r2, [pc, #88]	; (800a4b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d004      	beq.n	800a46a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a14      	ldr	r2, [pc, #80]	; (800a4b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d115      	bne.n	800a496 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a474:	051b      	lsls	r3, r3, #20
 800a476:	4313      	orrs	r3, r2
 800a478:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	69db      	ldr	r3, [r3, #28]
 800a484:	4313      	orrs	r3, r2
 800a486:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	6a1b      	ldr	r3, [r3, #32]
 800a492:	4313      	orrs	r3, r2
 800a494:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a4a6:	2300      	movs	r3, #0
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3714      	adds	r7, #20
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr
 800a4b4:	40010000 	.word	0x40010000
 800a4b8:	40010400 	.word	0x40010400

0800a4bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4c4:	bf00      	nop
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4d8:	bf00      	nop
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a4ec:	bf00      	nop
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d101      	bne.n	800a50a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a506:	2301      	movs	r3, #1
 800a508:	e040      	b.n	800a58c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d106      	bne.n	800a520 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f7fb f874 	bl	8005608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2224      	movs	r2, #36	; 0x24
 800a524:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f022 0201 	bic.w	r2, r2, #1
 800a534:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f900 	bl	800a73c <UART_SetConfig>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d101      	bne.n	800a546 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	e022      	b.n	800a58c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d002      	beq.n	800a554 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 fb58 	bl	800ac04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	685a      	ldr	r2, [r3, #4]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	689a      	ldr	r2, [r3, #8]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a572:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f042 0201 	orr.w	r2, r2, #1
 800a582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 fbdf 	bl	800ad48 <UART_CheckIdleState>
 800a58a:	4603      	mov	r3, r0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b08a      	sub	sp, #40	; 0x28
 800a598:	af02      	add	r7, sp, #8
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	603b      	str	r3, [r7, #0]
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5a8:	2b20      	cmp	r3, #32
 800a5aa:	d171      	bne.n	800a690 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d002      	beq.n	800a5b8 <HAL_UART_Transmit+0x24>
 800a5b2:	88fb      	ldrh	r3, [r7, #6]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d101      	bne.n	800a5bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e06a      	b.n	800a692 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2221      	movs	r2, #33	; 0x21
 800a5c8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a5ca:	f7fb f8f7 	bl	80057bc <HAL_GetTick>
 800a5ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	88fa      	ldrh	r2, [r7, #6]
 800a5d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	88fa      	ldrh	r2, [r7, #6]
 800a5dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5e8:	d108      	bne.n	800a5fc <HAL_UART_Transmit+0x68>
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d104      	bne.n	800a5fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	61bb      	str	r3, [r7, #24]
 800a5fa:	e003      	b.n	800a604 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a600:	2300      	movs	r3, #0
 800a602:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a604:	e02c      	b.n	800a660 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	9300      	str	r3, [sp, #0]
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	2200      	movs	r2, #0
 800a60e:	2180      	movs	r1, #128	; 0x80
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f000 fbd0 	bl	800adb6 <UART_WaitOnFlagUntilTimeout>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d001      	beq.n	800a620 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800a61c:	2303      	movs	r3, #3
 800a61e:	e038      	b.n	800a692 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d10b      	bne.n	800a63e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	881b      	ldrh	r3, [r3, #0]
 800a62a:	461a      	mov	r2, r3
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a634:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	3302      	adds	r3, #2
 800a63a:	61bb      	str	r3, [r7, #24]
 800a63c:	e007      	b.n	800a64e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	781a      	ldrb	r2, [r3, #0]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	3301      	adds	r3, #1
 800a64c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a654:	b29b      	uxth	r3, r3
 800a656:	3b01      	subs	r3, #1
 800a658:	b29a      	uxth	r2, r3
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a666:	b29b      	uxth	r3, r3
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d1cc      	bne.n	800a606 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	9300      	str	r3, [sp, #0]
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	2200      	movs	r2, #0
 800a674:	2140      	movs	r1, #64	; 0x40
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	f000 fb9d 	bl	800adb6 <UART_WaitOnFlagUntilTimeout>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d001      	beq.n	800a686 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800a682:	2303      	movs	r3, #3
 800a684:	e005      	b.n	800a692 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2220      	movs	r2, #32
 800a68a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a68c:	2300      	movs	r3, #0
 800a68e:	e000      	b.n	800a692 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800a690:	2302      	movs	r3, #2
  }
}
 800a692:	4618      	mov	r0, r3
 800a694:	3720      	adds	r7, #32
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b08a      	sub	sp, #40	; 0x28
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	60f8      	str	r0, [r7, #12]
 800a6a2:	60b9      	str	r1, [r7, #8]
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6ae:	2b20      	cmp	r3, #32
 800a6b0:	d132      	bne.n	800a718 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d002      	beq.n	800a6be <HAL_UART_Receive_IT+0x24>
 800a6b8:	88fb      	ldrh	r3, [r7, #6]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d101      	bne.n	800a6c2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e02b      	b.n	800a71a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d018      	beq.n	800a708 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	e853 3f00 	ldrex	r3, [r3]
 800a6e2:	613b      	str	r3, [r7, #16]
   return(result);
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a6ea:	627b      	str	r3, [r7, #36]	; 0x24
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f4:	623b      	str	r3, [r7, #32]
 800a6f6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f8:	69f9      	ldr	r1, [r7, #28]
 800a6fa:	6a3a      	ldr	r2, [r7, #32]
 800a6fc:	e841 2300 	strex	r3, r2, [r1]
 800a700:	61bb      	str	r3, [r7, #24]
   return(result);
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d1e6      	bne.n	800a6d6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a708:	88fb      	ldrh	r3, [r7, #6]
 800a70a:	461a      	mov	r2, r3
 800a70c:	68b9      	ldr	r1, [r7, #8]
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f000 fc18 	bl	800af44 <UART_Start_Receive_IT>
 800a714:	4603      	mov	r3, r0
 800a716:	e000      	b.n	800a71a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800a718:	2302      	movs	r3, #2
  }
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3728      	adds	r7, #40	; 0x28
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a722:	b480      	push	{r7}
 800a724:	b083      	sub	sp, #12
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
 800a72a:	460b      	mov	r3, r1
 800a72c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a72e:	bf00      	nop
 800a730:	370c      	adds	r7, #12
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
	...

0800a73c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b088      	sub	sp, #32
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a744:	2300      	movs	r3, #0
 800a746:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	689a      	ldr	r2, [r3, #8]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	691b      	ldr	r3, [r3, #16]
 800a750:	431a      	orrs	r2, r3
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	695b      	ldr	r3, [r3, #20]
 800a756:	431a      	orrs	r2, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	69db      	ldr	r3, [r3, #28]
 800a75c:	4313      	orrs	r3, r2
 800a75e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	4ba6      	ldr	r3, [pc, #664]	; (800aa00 <UART_SetConfig+0x2c4>)
 800a768:	4013      	ands	r3, r2
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	6812      	ldr	r2, [r2, #0]
 800a76e:	6979      	ldr	r1, [r7, #20]
 800a770:	430b      	orrs	r3, r1
 800a772:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	68da      	ldr	r2, [r3, #12]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	430a      	orrs	r2, r1
 800a788:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	699b      	ldr	r3, [r3, #24]
 800a78e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a1b      	ldr	r3, [r3, #32]
 800a794:	697a      	ldr	r2, [r7, #20]
 800a796:	4313      	orrs	r3, r2
 800a798:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	697a      	ldr	r2, [r7, #20]
 800a7aa:	430a      	orrs	r2, r1
 800a7ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a94      	ldr	r2, [pc, #592]	; (800aa04 <UART_SetConfig+0x2c8>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d120      	bne.n	800a7fa <UART_SetConfig+0xbe>
 800a7b8:	4b93      	ldr	r3, [pc, #588]	; (800aa08 <UART_SetConfig+0x2cc>)
 800a7ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7be:	f003 0303 	and.w	r3, r3, #3
 800a7c2:	2b03      	cmp	r3, #3
 800a7c4:	d816      	bhi.n	800a7f4 <UART_SetConfig+0xb8>
 800a7c6:	a201      	add	r2, pc, #4	; (adr r2, 800a7cc <UART_SetConfig+0x90>)
 800a7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7cc:	0800a7dd 	.word	0x0800a7dd
 800a7d0:	0800a7e9 	.word	0x0800a7e9
 800a7d4:	0800a7e3 	.word	0x0800a7e3
 800a7d8:	0800a7ef 	.word	0x0800a7ef
 800a7dc:	2301      	movs	r3, #1
 800a7de:	77fb      	strb	r3, [r7, #31]
 800a7e0:	e150      	b.n	800aa84 <UART_SetConfig+0x348>
 800a7e2:	2302      	movs	r3, #2
 800a7e4:	77fb      	strb	r3, [r7, #31]
 800a7e6:	e14d      	b.n	800aa84 <UART_SetConfig+0x348>
 800a7e8:	2304      	movs	r3, #4
 800a7ea:	77fb      	strb	r3, [r7, #31]
 800a7ec:	e14a      	b.n	800aa84 <UART_SetConfig+0x348>
 800a7ee:	2308      	movs	r3, #8
 800a7f0:	77fb      	strb	r3, [r7, #31]
 800a7f2:	e147      	b.n	800aa84 <UART_SetConfig+0x348>
 800a7f4:	2310      	movs	r3, #16
 800a7f6:	77fb      	strb	r3, [r7, #31]
 800a7f8:	e144      	b.n	800aa84 <UART_SetConfig+0x348>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a83      	ldr	r2, [pc, #524]	; (800aa0c <UART_SetConfig+0x2d0>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d132      	bne.n	800a86a <UART_SetConfig+0x12e>
 800a804:	4b80      	ldr	r3, [pc, #512]	; (800aa08 <UART_SetConfig+0x2cc>)
 800a806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a80a:	f003 030c 	and.w	r3, r3, #12
 800a80e:	2b0c      	cmp	r3, #12
 800a810:	d828      	bhi.n	800a864 <UART_SetConfig+0x128>
 800a812:	a201      	add	r2, pc, #4	; (adr r2, 800a818 <UART_SetConfig+0xdc>)
 800a814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a818:	0800a84d 	.word	0x0800a84d
 800a81c:	0800a865 	.word	0x0800a865
 800a820:	0800a865 	.word	0x0800a865
 800a824:	0800a865 	.word	0x0800a865
 800a828:	0800a859 	.word	0x0800a859
 800a82c:	0800a865 	.word	0x0800a865
 800a830:	0800a865 	.word	0x0800a865
 800a834:	0800a865 	.word	0x0800a865
 800a838:	0800a853 	.word	0x0800a853
 800a83c:	0800a865 	.word	0x0800a865
 800a840:	0800a865 	.word	0x0800a865
 800a844:	0800a865 	.word	0x0800a865
 800a848:	0800a85f 	.word	0x0800a85f
 800a84c:	2300      	movs	r3, #0
 800a84e:	77fb      	strb	r3, [r7, #31]
 800a850:	e118      	b.n	800aa84 <UART_SetConfig+0x348>
 800a852:	2302      	movs	r3, #2
 800a854:	77fb      	strb	r3, [r7, #31]
 800a856:	e115      	b.n	800aa84 <UART_SetConfig+0x348>
 800a858:	2304      	movs	r3, #4
 800a85a:	77fb      	strb	r3, [r7, #31]
 800a85c:	e112      	b.n	800aa84 <UART_SetConfig+0x348>
 800a85e:	2308      	movs	r3, #8
 800a860:	77fb      	strb	r3, [r7, #31]
 800a862:	e10f      	b.n	800aa84 <UART_SetConfig+0x348>
 800a864:	2310      	movs	r3, #16
 800a866:	77fb      	strb	r3, [r7, #31]
 800a868:	e10c      	b.n	800aa84 <UART_SetConfig+0x348>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a68      	ldr	r2, [pc, #416]	; (800aa10 <UART_SetConfig+0x2d4>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d120      	bne.n	800a8b6 <UART_SetConfig+0x17a>
 800a874:	4b64      	ldr	r3, [pc, #400]	; (800aa08 <UART_SetConfig+0x2cc>)
 800a876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a87a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a87e:	2b30      	cmp	r3, #48	; 0x30
 800a880:	d013      	beq.n	800a8aa <UART_SetConfig+0x16e>
 800a882:	2b30      	cmp	r3, #48	; 0x30
 800a884:	d814      	bhi.n	800a8b0 <UART_SetConfig+0x174>
 800a886:	2b20      	cmp	r3, #32
 800a888:	d009      	beq.n	800a89e <UART_SetConfig+0x162>
 800a88a:	2b20      	cmp	r3, #32
 800a88c:	d810      	bhi.n	800a8b0 <UART_SetConfig+0x174>
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d002      	beq.n	800a898 <UART_SetConfig+0x15c>
 800a892:	2b10      	cmp	r3, #16
 800a894:	d006      	beq.n	800a8a4 <UART_SetConfig+0x168>
 800a896:	e00b      	b.n	800a8b0 <UART_SetConfig+0x174>
 800a898:	2300      	movs	r3, #0
 800a89a:	77fb      	strb	r3, [r7, #31]
 800a89c:	e0f2      	b.n	800aa84 <UART_SetConfig+0x348>
 800a89e:	2302      	movs	r3, #2
 800a8a0:	77fb      	strb	r3, [r7, #31]
 800a8a2:	e0ef      	b.n	800aa84 <UART_SetConfig+0x348>
 800a8a4:	2304      	movs	r3, #4
 800a8a6:	77fb      	strb	r3, [r7, #31]
 800a8a8:	e0ec      	b.n	800aa84 <UART_SetConfig+0x348>
 800a8aa:	2308      	movs	r3, #8
 800a8ac:	77fb      	strb	r3, [r7, #31]
 800a8ae:	e0e9      	b.n	800aa84 <UART_SetConfig+0x348>
 800a8b0:	2310      	movs	r3, #16
 800a8b2:	77fb      	strb	r3, [r7, #31]
 800a8b4:	e0e6      	b.n	800aa84 <UART_SetConfig+0x348>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a56      	ldr	r2, [pc, #344]	; (800aa14 <UART_SetConfig+0x2d8>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d120      	bne.n	800a902 <UART_SetConfig+0x1c6>
 800a8c0:	4b51      	ldr	r3, [pc, #324]	; (800aa08 <UART_SetConfig+0x2cc>)
 800a8c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a8ca:	2bc0      	cmp	r3, #192	; 0xc0
 800a8cc:	d013      	beq.n	800a8f6 <UART_SetConfig+0x1ba>
 800a8ce:	2bc0      	cmp	r3, #192	; 0xc0
 800a8d0:	d814      	bhi.n	800a8fc <UART_SetConfig+0x1c0>
 800a8d2:	2b80      	cmp	r3, #128	; 0x80
 800a8d4:	d009      	beq.n	800a8ea <UART_SetConfig+0x1ae>
 800a8d6:	2b80      	cmp	r3, #128	; 0x80
 800a8d8:	d810      	bhi.n	800a8fc <UART_SetConfig+0x1c0>
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d002      	beq.n	800a8e4 <UART_SetConfig+0x1a8>
 800a8de:	2b40      	cmp	r3, #64	; 0x40
 800a8e0:	d006      	beq.n	800a8f0 <UART_SetConfig+0x1b4>
 800a8e2:	e00b      	b.n	800a8fc <UART_SetConfig+0x1c0>
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	77fb      	strb	r3, [r7, #31]
 800a8e8:	e0cc      	b.n	800aa84 <UART_SetConfig+0x348>
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	77fb      	strb	r3, [r7, #31]
 800a8ee:	e0c9      	b.n	800aa84 <UART_SetConfig+0x348>
 800a8f0:	2304      	movs	r3, #4
 800a8f2:	77fb      	strb	r3, [r7, #31]
 800a8f4:	e0c6      	b.n	800aa84 <UART_SetConfig+0x348>
 800a8f6:	2308      	movs	r3, #8
 800a8f8:	77fb      	strb	r3, [r7, #31]
 800a8fa:	e0c3      	b.n	800aa84 <UART_SetConfig+0x348>
 800a8fc:	2310      	movs	r3, #16
 800a8fe:	77fb      	strb	r3, [r7, #31]
 800a900:	e0c0      	b.n	800aa84 <UART_SetConfig+0x348>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a44      	ldr	r2, [pc, #272]	; (800aa18 <UART_SetConfig+0x2dc>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d125      	bne.n	800a958 <UART_SetConfig+0x21c>
 800a90c:	4b3e      	ldr	r3, [pc, #248]	; (800aa08 <UART_SetConfig+0x2cc>)
 800a90e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a91a:	d017      	beq.n	800a94c <UART_SetConfig+0x210>
 800a91c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a920:	d817      	bhi.n	800a952 <UART_SetConfig+0x216>
 800a922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a926:	d00b      	beq.n	800a940 <UART_SetConfig+0x204>
 800a928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a92c:	d811      	bhi.n	800a952 <UART_SetConfig+0x216>
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d003      	beq.n	800a93a <UART_SetConfig+0x1fe>
 800a932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a936:	d006      	beq.n	800a946 <UART_SetConfig+0x20a>
 800a938:	e00b      	b.n	800a952 <UART_SetConfig+0x216>
 800a93a:	2300      	movs	r3, #0
 800a93c:	77fb      	strb	r3, [r7, #31]
 800a93e:	e0a1      	b.n	800aa84 <UART_SetConfig+0x348>
 800a940:	2302      	movs	r3, #2
 800a942:	77fb      	strb	r3, [r7, #31]
 800a944:	e09e      	b.n	800aa84 <UART_SetConfig+0x348>
 800a946:	2304      	movs	r3, #4
 800a948:	77fb      	strb	r3, [r7, #31]
 800a94a:	e09b      	b.n	800aa84 <UART_SetConfig+0x348>
 800a94c:	2308      	movs	r3, #8
 800a94e:	77fb      	strb	r3, [r7, #31]
 800a950:	e098      	b.n	800aa84 <UART_SetConfig+0x348>
 800a952:	2310      	movs	r3, #16
 800a954:	77fb      	strb	r3, [r7, #31]
 800a956:	e095      	b.n	800aa84 <UART_SetConfig+0x348>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a2f      	ldr	r2, [pc, #188]	; (800aa1c <UART_SetConfig+0x2e0>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d125      	bne.n	800a9ae <UART_SetConfig+0x272>
 800a962:	4b29      	ldr	r3, [pc, #164]	; (800aa08 <UART_SetConfig+0x2cc>)
 800a964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a968:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a96c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a970:	d017      	beq.n	800a9a2 <UART_SetConfig+0x266>
 800a972:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a976:	d817      	bhi.n	800a9a8 <UART_SetConfig+0x26c>
 800a978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a97c:	d00b      	beq.n	800a996 <UART_SetConfig+0x25a>
 800a97e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a982:	d811      	bhi.n	800a9a8 <UART_SetConfig+0x26c>
 800a984:	2b00      	cmp	r3, #0
 800a986:	d003      	beq.n	800a990 <UART_SetConfig+0x254>
 800a988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a98c:	d006      	beq.n	800a99c <UART_SetConfig+0x260>
 800a98e:	e00b      	b.n	800a9a8 <UART_SetConfig+0x26c>
 800a990:	2301      	movs	r3, #1
 800a992:	77fb      	strb	r3, [r7, #31]
 800a994:	e076      	b.n	800aa84 <UART_SetConfig+0x348>
 800a996:	2302      	movs	r3, #2
 800a998:	77fb      	strb	r3, [r7, #31]
 800a99a:	e073      	b.n	800aa84 <UART_SetConfig+0x348>
 800a99c:	2304      	movs	r3, #4
 800a99e:	77fb      	strb	r3, [r7, #31]
 800a9a0:	e070      	b.n	800aa84 <UART_SetConfig+0x348>
 800a9a2:	2308      	movs	r3, #8
 800a9a4:	77fb      	strb	r3, [r7, #31]
 800a9a6:	e06d      	b.n	800aa84 <UART_SetConfig+0x348>
 800a9a8:	2310      	movs	r3, #16
 800a9aa:	77fb      	strb	r3, [r7, #31]
 800a9ac:	e06a      	b.n	800aa84 <UART_SetConfig+0x348>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a1b      	ldr	r2, [pc, #108]	; (800aa20 <UART_SetConfig+0x2e4>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d138      	bne.n	800aa2a <UART_SetConfig+0x2ee>
 800a9b8:	4b13      	ldr	r3, [pc, #76]	; (800aa08 <UART_SetConfig+0x2cc>)
 800a9ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9be:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a9c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a9c6:	d017      	beq.n	800a9f8 <UART_SetConfig+0x2bc>
 800a9c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a9cc:	d82a      	bhi.n	800aa24 <UART_SetConfig+0x2e8>
 800a9ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9d2:	d00b      	beq.n	800a9ec <UART_SetConfig+0x2b0>
 800a9d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9d8:	d824      	bhi.n	800aa24 <UART_SetConfig+0x2e8>
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d003      	beq.n	800a9e6 <UART_SetConfig+0x2aa>
 800a9de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9e2:	d006      	beq.n	800a9f2 <UART_SetConfig+0x2b6>
 800a9e4:	e01e      	b.n	800aa24 <UART_SetConfig+0x2e8>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	77fb      	strb	r3, [r7, #31]
 800a9ea:	e04b      	b.n	800aa84 <UART_SetConfig+0x348>
 800a9ec:	2302      	movs	r3, #2
 800a9ee:	77fb      	strb	r3, [r7, #31]
 800a9f0:	e048      	b.n	800aa84 <UART_SetConfig+0x348>
 800a9f2:	2304      	movs	r3, #4
 800a9f4:	77fb      	strb	r3, [r7, #31]
 800a9f6:	e045      	b.n	800aa84 <UART_SetConfig+0x348>
 800a9f8:	2308      	movs	r3, #8
 800a9fa:	77fb      	strb	r3, [r7, #31]
 800a9fc:	e042      	b.n	800aa84 <UART_SetConfig+0x348>
 800a9fe:	bf00      	nop
 800aa00:	efff69f3 	.word	0xefff69f3
 800aa04:	40011000 	.word	0x40011000
 800aa08:	40023800 	.word	0x40023800
 800aa0c:	40004400 	.word	0x40004400
 800aa10:	40004800 	.word	0x40004800
 800aa14:	40004c00 	.word	0x40004c00
 800aa18:	40005000 	.word	0x40005000
 800aa1c:	40011400 	.word	0x40011400
 800aa20:	40007800 	.word	0x40007800
 800aa24:	2310      	movs	r3, #16
 800aa26:	77fb      	strb	r3, [r7, #31]
 800aa28:	e02c      	b.n	800aa84 <UART_SetConfig+0x348>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a72      	ldr	r2, [pc, #456]	; (800abf8 <UART_SetConfig+0x4bc>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d125      	bne.n	800aa80 <UART_SetConfig+0x344>
 800aa34:	4b71      	ldr	r3, [pc, #452]	; (800abfc <UART_SetConfig+0x4c0>)
 800aa36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aa3e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aa42:	d017      	beq.n	800aa74 <UART_SetConfig+0x338>
 800aa44:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aa48:	d817      	bhi.n	800aa7a <UART_SetConfig+0x33e>
 800aa4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa4e:	d00b      	beq.n	800aa68 <UART_SetConfig+0x32c>
 800aa50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa54:	d811      	bhi.n	800aa7a <UART_SetConfig+0x33e>
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <UART_SetConfig+0x326>
 800aa5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa5e:	d006      	beq.n	800aa6e <UART_SetConfig+0x332>
 800aa60:	e00b      	b.n	800aa7a <UART_SetConfig+0x33e>
 800aa62:	2300      	movs	r3, #0
 800aa64:	77fb      	strb	r3, [r7, #31]
 800aa66:	e00d      	b.n	800aa84 <UART_SetConfig+0x348>
 800aa68:	2302      	movs	r3, #2
 800aa6a:	77fb      	strb	r3, [r7, #31]
 800aa6c:	e00a      	b.n	800aa84 <UART_SetConfig+0x348>
 800aa6e:	2304      	movs	r3, #4
 800aa70:	77fb      	strb	r3, [r7, #31]
 800aa72:	e007      	b.n	800aa84 <UART_SetConfig+0x348>
 800aa74:	2308      	movs	r3, #8
 800aa76:	77fb      	strb	r3, [r7, #31]
 800aa78:	e004      	b.n	800aa84 <UART_SetConfig+0x348>
 800aa7a:	2310      	movs	r3, #16
 800aa7c:	77fb      	strb	r3, [r7, #31]
 800aa7e:	e001      	b.n	800aa84 <UART_SetConfig+0x348>
 800aa80:	2310      	movs	r3, #16
 800aa82:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	69db      	ldr	r3, [r3, #28]
 800aa88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa8c:	d15b      	bne.n	800ab46 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800aa8e:	7ffb      	ldrb	r3, [r7, #31]
 800aa90:	2b08      	cmp	r3, #8
 800aa92:	d828      	bhi.n	800aae6 <UART_SetConfig+0x3aa>
 800aa94:	a201      	add	r2, pc, #4	; (adr r2, 800aa9c <UART_SetConfig+0x360>)
 800aa96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa9a:	bf00      	nop
 800aa9c:	0800aac1 	.word	0x0800aac1
 800aaa0:	0800aac9 	.word	0x0800aac9
 800aaa4:	0800aad1 	.word	0x0800aad1
 800aaa8:	0800aae7 	.word	0x0800aae7
 800aaac:	0800aad7 	.word	0x0800aad7
 800aab0:	0800aae7 	.word	0x0800aae7
 800aab4:	0800aae7 	.word	0x0800aae7
 800aab8:	0800aae7 	.word	0x0800aae7
 800aabc:	0800aadf 	.word	0x0800aadf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aac0:	f7fc fda6 	bl	8007610 <HAL_RCC_GetPCLK1Freq>
 800aac4:	61b8      	str	r0, [r7, #24]
        break;
 800aac6:	e013      	b.n	800aaf0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aac8:	f7fc fdb6 	bl	8007638 <HAL_RCC_GetPCLK2Freq>
 800aacc:	61b8      	str	r0, [r7, #24]
        break;
 800aace:	e00f      	b.n	800aaf0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aad0:	4b4b      	ldr	r3, [pc, #300]	; (800ac00 <UART_SetConfig+0x4c4>)
 800aad2:	61bb      	str	r3, [r7, #24]
        break;
 800aad4:	e00c      	b.n	800aaf0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aad6:	f7fc fc89 	bl	80073ec <HAL_RCC_GetSysClockFreq>
 800aada:	61b8      	str	r0, [r7, #24]
        break;
 800aadc:	e008      	b.n	800aaf0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aae2:	61bb      	str	r3, [r7, #24]
        break;
 800aae4:	e004      	b.n	800aaf0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800aae6:	2300      	movs	r3, #0
 800aae8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800aaea:	2301      	movs	r3, #1
 800aaec:	77bb      	strb	r3, [r7, #30]
        break;
 800aaee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d074      	beq.n	800abe0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	005a      	lsls	r2, r3, #1
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	085b      	lsrs	r3, r3, #1
 800ab00:	441a      	add	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	2b0f      	cmp	r3, #15
 800ab10:	d916      	bls.n	800ab40 <UART_SetConfig+0x404>
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab18:	d212      	bcs.n	800ab40 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	f023 030f 	bic.w	r3, r3, #15
 800ab22:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	085b      	lsrs	r3, r3, #1
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	f003 0307 	and.w	r3, r3, #7
 800ab2e:	b29a      	uxth	r2, r3
 800ab30:	89fb      	ldrh	r3, [r7, #14]
 800ab32:	4313      	orrs	r3, r2
 800ab34:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	89fa      	ldrh	r2, [r7, #14]
 800ab3c:	60da      	str	r2, [r3, #12]
 800ab3e:	e04f      	b.n	800abe0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ab40:	2301      	movs	r3, #1
 800ab42:	77bb      	strb	r3, [r7, #30]
 800ab44:	e04c      	b.n	800abe0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab46:	7ffb      	ldrb	r3, [r7, #31]
 800ab48:	2b08      	cmp	r3, #8
 800ab4a:	d828      	bhi.n	800ab9e <UART_SetConfig+0x462>
 800ab4c:	a201      	add	r2, pc, #4	; (adr r2, 800ab54 <UART_SetConfig+0x418>)
 800ab4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab52:	bf00      	nop
 800ab54:	0800ab79 	.word	0x0800ab79
 800ab58:	0800ab81 	.word	0x0800ab81
 800ab5c:	0800ab89 	.word	0x0800ab89
 800ab60:	0800ab9f 	.word	0x0800ab9f
 800ab64:	0800ab8f 	.word	0x0800ab8f
 800ab68:	0800ab9f 	.word	0x0800ab9f
 800ab6c:	0800ab9f 	.word	0x0800ab9f
 800ab70:	0800ab9f 	.word	0x0800ab9f
 800ab74:	0800ab97 	.word	0x0800ab97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab78:	f7fc fd4a 	bl	8007610 <HAL_RCC_GetPCLK1Freq>
 800ab7c:	61b8      	str	r0, [r7, #24]
        break;
 800ab7e:	e013      	b.n	800aba8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab80:	f7fc fd5a 	bl	8007638 <HAL_RCC_GetPCLK2Freq>
 800ab84:	61b8      	str	r0, [r7, #24]
        break;
 800ab86:	e00f      	b.n	800aba8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab88:	4b1d      	ldr	r3, [pc, #116]	; (800ac00 <UART_SetConfig+0x4c4>)
 800ab8a:	61bb      	str	r3, [r7, #24]
        break;
 800ab8c:	e00c      	b.n	800aba8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab8e:	f7fc fc2d 	bl	80073ec <HAL_RCC_GetSysClockFreq>
 800ab92:	61b8      	str	r0, [r7, #24]
        break;
 800ab94:	e008      	b.n	800aba8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab9a:	61bb      	str	r3, [r7, #24]
        break;
 800ab9c:	e004      	b.n	800aba8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	77bb      	strb	r3, [r7, #30]
        break;
 800aba6:	bf00      	nop
    }

    if (pclk != 0U)
 800aba8:	69bb      	ldr	r3, [r7, #24]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d018      	beq.n	800abe0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	085a      	lsrs	r2, r3, #1
 800abb4:	69bb      	ldr	r3, [r7, #24]
 800abb6:	441a      	add	r2, r3
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800abc0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	2b0f      	cmp	r3, #15
 800abc6:	d909      	bls.n	800abdc <UART_SetConfig+0x4a0>
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abce:	d205      	bcs.n	800abdc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	60da      	str	r2, [r3, #12]
 800abda:	e001      	b.n	800abe0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800abdc:	2301      	movs	r3, #1
 800abde:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800abec:	7fbb      	ldrb	r3, [r7, #30]
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3720      	adds	r7, #32
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	40007c00 	.word	0x40007c00
 800abfc:	40023800 	.word	0x40023800
 800ac00:	00f42400 	.word	0x00f42400

0800ac04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac10:	f003 0301 	and.w	r3, r3, #1
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d00a      	beq.n	800ac2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	430a      	orrs	r2, r1
 800ac2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac32:	f003 0302 	and.w	r3, r3, #2
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00a      	beq.n	800ac50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	430a      	orrs	r2, r1
 800ac4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac54:	f003 0304 	and.w	r3, r3, #4
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00a      	beq.n	800ac72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	430a      	orrs	r2, r1
 800ac70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac76:	f003 0308 	and.w	r3, r3, #8
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d00a      	beq.n	800ac94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	430a      	orrs	r2, r1
 800ac92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac98:	f003 0310 	and.w	r3, r3, #16
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00a      	beq.n	800acb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	430a      	orrs	r2, r1
 800acb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acba:	f003 0320 	and.w	r3, r3, #32
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d00a      	beq.n	800acd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	430a      	orrs	r2, r1
 800acd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d01a      	beq.n	800ad1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	430a      	orrs	r2, r1
 800acf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad02:	d10a      	bne.n	800ad1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	430a      	orrs	r2, r1
 800ad18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00a      	beq.n	800ad3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	430a      	orrs	r2, r1
 800ad3a:	605a      	str	r2, [r3, #4]
  }
}
 800ad3c:	bf00      	nop
 800ad3e:	370c      	adds	r7, #12
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b086      	sub	sp, #24
 800ad4c:	af02      	add	r7, sp, #8
 800ad4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad58:	f7fa fd30 	bl	80057bc <HAL_GetTick>
 800ad5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f003 0308 	and.w	r3, r3, #8
 800ad68:	2b08      	cmp	r3, #8
 800ad6a:	d10e      	bne.n	800ad8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 f81b 	bl	800adb6 <UART_WaitOnFlagUntilTimeout>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d001      	beq.n	800ad8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad86:	2303      	movs	r3, #3
 800ad88:	e011      	b.n	800adae <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2220      	movs	r2, #32
 800ad8e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2220      	movs	r2, #32
 800ad94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b09c      	sub	sp, #112	; 0x70
 800adba:	af00      	add	r7, sp, #0
 800adbc:	60f8      	str	r0, [r7, #12]
 800adbe:	60b9      	str	r1, [r7, #8]
 800adc0:	603b      	str	r3, [r7, #0]
 800adc2:	4613      	mov	r3, r2
 800adc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adc6:	e0a7      	b.n	800af18 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adce:	f000 80a3 	beq.w	800af18 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800add2:	f7fa fcf3 	bl	80057bc <HAL_GetTick>
 800add6:	4602      	mov	r2, r0
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	1ad3      	subs	r3, r2, r3
 800addc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800adde:	429a      	cmp	r2, r3
 800ade0:	d302      	bcc.n	800ade8 <UART_WaitOnFlagUntilTimeout+0x32>
 800ade2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d13f      	bne.n	800ae68 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adf0:	e853 3f00 	ldrex	r3, [r3]
 800adf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800adf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adf8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800adfc:	667b      	str	r3, [r7, #100]	; 0x64
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	461a      	mov	r2, r3
 800ae04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae06:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae08:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ae0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ae0e:	e841 2300 	strex	r3, r2, [r1]
 800ae12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ae14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d1e6      	bne.n	800ade8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	3308      	adds	r3, #8
 800ae20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae24:	e853 3f00 	ldrex	r3, [r3]
 800ae28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2c:	f023 0301 	bic.w	r3, r3, #1
 800ae30:	663b      	str	r3, [r7, #96]	; 0x60
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	3308      	adds	r3, #8
 800ae38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae3a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ae3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ae40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae42:	e841 2300 	strex	r3, r2, [r1]
 800ae46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ae48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1e5      	bne.n	800ae1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2220      	movs	r2, #32
 800ae52:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2220      	movs	r2, #32
 800ae58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800ae64:	2303      	movs	r3, #3
 800ae66:	e068      	b.n	800af3a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f003 0304 	and.w	r3, r3, #4
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d050      	beq.n	800af18 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	69db      	ldr	r3, [r3, #28]
 800ae7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae84:	d148      	bne.n	800af18 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae8e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae98:	e853 3f00 	ldrex	r3, [r3]
 800ae9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aea4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	461a      	mov	r2, r3
 800aeac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aeae:	637b      	str	r3, [r7, #52]	; 0x34
 800aeb0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aeb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aeb6:	e841 2300 	strex	r3, r2, [r1]
 800aeba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d1e6      	bne.n	800ae90 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	3308      	adds	r3, #8
 800aec8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	e853 3f00 	ldrex	r3, [r3]
 800aed0:	613b      	str	r3, [r7, #16]
   return(result);
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	f023 0301 	bic.w	r3, r3, #1
 800aed8:	66bb      	str	r3, [r7, #104]	; 0x68
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	3308      	adds	r3, #8
 800aee0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aee2:	623a      	str	r2, [r7, #32]
 800aee4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee6:	69f9      	ldr	r1, [r7, #28]
 800aee8:	6a3a      	ldr	r2, [r7, #32]
 800aeea:	e841 2300 	strex	r3, r2, [r1]
 800aeee:	61bb      	str	r3, [r7, #24]
   return(result);
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1e5      	bne.n	800aec2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2220      	movs	r2, #32
 800aefa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2220      	movs	r2, #32
 800af00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2220      	movs	r2, #32
 800af08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800af14:	2303      	movs	r3, #3
 800af16:	e010      	b.n	800af3a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	69da      	ldr	r2, [r3, #28]
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	4013      	ands	r3, r2
 800af22:	68ba      	ldr	r2, [r7, #8]
 800af24:	429a      	cmp	r2, r3
 800af26:	bf0c      	ite	eq
 800af28:	2301      	moveq	r3, #1
 800af2a:	2300      	movne	r3, #0
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	461a      	mov	r2, r3
 800af30:	79fb      	ldrb	r3, [r7, #7]
 800af32:	429a      	cmp	r2, r3
 800af34:	f43f af48 	beq.w	800adc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3770      	adds	r7, #112	; 0x70
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
	...

0800af44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af44:	b480      	push	{r7}
 800af46:	b097      	sub	sp, #92	; 0x5c
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	4613      	mov	r3, r2
 800af50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	68ba      	ldr	r2, [r7, #8]
 800af56:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	88fa      	ldrh	r2, [r7, #6]
 800af5c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	88fa      	ldrh	r2, [r7, #6]
 800af64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2200      	movs	r2, #0
 800af6c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af76:	d10e      	bne.n	800af96 <UART_Start_Receive_IT+0x52>
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	691b      	ldr	r3, [r3, #16]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d105      	bne.n	800af8c <UART_Start_Receive_IT+0x48>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f240 12ff 	movw	r2, #511	; 0x1ff
 800af86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800af8a:	e02d      	b.n	800afe8 <UART_Start_Receive_IT+0xa4>
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	22ff      	movs	r2, #255	; 0xff
 800af90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800af94:	e028      	b.n	800afe8 <UART_Start_Receive_IT+0xa4>
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d10d      	bne.n	800afba <UART_Start_Receive_IT+0x76>
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d104      	bne.n	800afb0 <UART_Start_Receive_IT+0x6c>
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	22ff      	movs	r2, #255	; 0xff
 800afaa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800afae:	e01b      	b.n	800afe8 <UART_Start_Receive_IT+0xa4>
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	227f      	movs	r2, #127	; 0x7f
 800afb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800afb8:	e016      	b.n	800afe8 <UART_Start_Receive_IT+0xa4>
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afc2:	d10d      	bne.n	800afe0 <UART_Start_Receive_IT+0x9c>
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	691b      	ldr	r3, [r3, #16]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d104      	bne.n	800afd6 <UART_Start_Receive_IT+0x92>
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	227f      	movs	r2, #127	; 0x7f
 800afd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800afd4:	e008      	b.n	800afe8 <UART_Start_Receive_IT+0xa4>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	223f      	movs	r2, #63	; 0x3f
 800afda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800afde:	e003      	b.n	800afe8 <UART_Start_Receive_IT+0xa4>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2200      	movs	r2, #0
 800afec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2222      	movs	r2, #34	; 0x22
 800aff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	3308      	adds	r3, #8
 800affe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b002:	e853 3f00 	ldrex	r3, [r3]
 800b006:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00a:	f043 0301 	orr.w	r3, r3, #1
 800b00e:	657b      	str	r3, [r7, #84]	; 0x54
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	3308      	adds	r3, #8
 800b016:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b018:	64ba      	str	r2, [r7, #72]	; 0x48
 800b01a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b01c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b01e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b020:	e841 2300 	strex	r3, r2, [r1]
 800b024:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d1e5      	bne.n	800aff8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b034:	d107      	bne.n	800b046 <UART_Start_Receive_IT+0x102>
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	691b      	ldr	r3, [r3, #16]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d103      	bne.n	800b046 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	4a21      	ldr	r2, [pc, #132]	; (800b0c8 <UART_Start_Receive_IT+0x184>)
 800b042:	669a      	str	r2, [r3, #104]	; 0x68
 800b044:	e002      	b.n	800b04c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	4a20      	ldr	r2, [pc, #128]	; (800b0cc <UART_Start_Receive_IT+0x188>)
 800b04a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d019      	beq.n	800b088 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05c:	e853 3f00 	ldrex	r3, [r3]
 800b060:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b064:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b068:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	461a      	mov	r2, r3
 800b070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b072:	637b      	str	r3, [r7, #52]	; 0x34
 800b074:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b076:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b07a:	e841 2300 	strex	r3, r2, [r1]
 800b07e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b082:	2b00      	cmp	r3, #0
 800b084:	d1e6      	bne.n	800b054 <UART_Start_Receive_IT+0x110>
 800b086:	e018      	b.n	800b0ba <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	e853 3f00 	ldrex	r3, [r3]
 800b094:	613b      	str	r3, [r7, #16]
   return(result);
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	f043 0320 	orr.w	r3, r3, #32
 800b09c:	653b      	str	r3, [r7, #80]	; 0x50
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0a6:	623b      	str	r3, [r7, #32]
 800b0a8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0aa:	69f9      	ldr	r1, [r7, #28]
 800b0ac:	6a3a      	ldr	r2, [r7, #32]
 800b0ae:	e841 2300 	strex	r3, r2, [r1]
 800b0b2:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d1e6      	bne.n	800b088 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	375c      	adds	r7, #92	; 0x5c
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr
 800b0c8:	0800b237 	.word	0x0800b237
 800b0cc:	0800b0d1 	.word	0x0800b0d1

0800b0d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b096      	sub	sp, #88	; 0x58
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b0de:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0e8:	2b22      	cmp	r3, #34	; 0x22
 800b0ea:	f040 8098 	bne.w	800b21e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b0f8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800b0fc:	b2d9      	uxtb	r1, r3
 800b0fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b102:	b2da      	uxtb	r2, r3
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b108:	400a      	ands	r2, r1
 800b10a:	b2d2      	uxtb	r2, r2
 800b10c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b112:	1c5a      	adds	r2, r3, #1
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b11e:	b29b      	uxth	r3, r3
 800b120:	3b01      	subs	r3, #1
 800b122:	b29a      	uxth	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b130:	b29b      	uxth	r3, r3
 800b132:	2b00      	cmp	r3, #0
 800b134:	d17b      	bne.n	800b22e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13e:	e853 3f00 	ldrex	r3, [r3]
 800b142:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b146:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b14a:	653b      	str	r3, [r7, #80]	; 0x50
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	461a      	mov	r2, r3
 800b152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b154:	647b      	str	r3, [r7, #68]	; 0x44
 800b156:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b158:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b15a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b15c:	e841 2300 	strex	r3, r2, [r1]
 800b160:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b164:	2b00      	cmp	r3, #0
 800b166:	d1e6      	bne.n	800b136 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	3308      	adds	r3, #8
 800b16e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b172:	e853 3f00 	ldrex	r3, [r3]
 800b176:	623b      	str	r3, [r7, #32]
   return(result);
 800b178:	6a3b      	ldr	r3, [r7, #32]
 800b17a:	f023 0301 	bic.w	r3, r3, #1
 800b17e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	3308      	adds	r3, #8
 800b186:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b188:	633a      	str	r2, [r7, #48]	; 0x30
 800b18a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b18e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b190:	e841 2300 	strex	r3, r2, [r1]
 800b194:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d1e5      	bne.n	800b168 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2220      	movs	r2, #32
 800b1a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d12e      	bne.n	800b216 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	e853 3f00 	ldrex	r3, [r3]
 800b1ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f023 0310 	bic.w	r3, r3, #16
 800b1d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	461a      	mov	r2, r3
 800b1da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1dc:	61fb      	str	r3, [r7, #28]
 800b1de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e0:	69b9      	ldr	r1, [r7, #24]
 800b1e2:	69fa      	ldr	r2, [r7, #28]
 800b1e4:	e841 2300 	strex	r3, r2, [r1]
 800b1e8:	617b      	str	r3, [r7, #20]
   return(result);
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d1e6      	bne.n	800b1be <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	69db      	ldr	r3, [r3, #28]
 800b1f6:	f003 0310 	and.w	r3, r3, #16
 800b1fa:	2b10      	cmp	r3, #16
 800b1fc:	d103      	bne.n	800b206 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	2210      	movs	r2, #16
 800b204:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b20c:	4619      	mov	r1, r3
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f7ff fa87 	bl	800a722 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b214:	e00b      	b.n	800b22e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f7f7 fed8 	bl	8002fcc <HAL_UART_RxCpltCallback>
}
 800b21c:	e007      	b.n	800b22e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	699a      	ldr	r2, [r3, #24]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f042 0208 	orr.w	r2, r2, #8
 800b22c:	619a      	str	r2, [r3, #24]
}
 800b22e:	bf00      	nop
 800b230:	3758      	adds	r7, #88	; 0x58
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}

0800b236 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b236:	b580      	push	{r7, lr}
 800b238:	b096      	sub	sp, #88	; 0x58
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b244:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b24e:	2b22      	cmp	r3, #34	; 0x22
 800b250:	f040 8098 	bne.w	800b384 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b262:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800b264:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b268:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b26c:	4013      	ands	r3, r2
 800b26e:	b29a      	uxth	r2, r3
 800b270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b272:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b278:	1c9a      	adds	r2, r3, #2
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b284:	b29b      	uxth	r3, r3
 800b286:	3b01      	subs	r3, #1
 800b288:	b29a      	uxth	r2, r3
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b296:	b29b      	uxth	r3, r3
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d17b      	bne.n	800b394 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2a4:	e853 3f00 	ldrex	r3, [r3]
 800b2a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b2b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2ba:	643b      	str	r3, [r7, #64]	; 0x40
 800b2bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b2c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b2c2:	e841 2300 	strex	r3, r2, [r1]
 800b2c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1e6      	bne.n	800b29c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	3308      	adds	r3, #8
 800b2d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d6:	6a3b      	ldr	r3, [r7, #32]
 800b2d8:	e853 3f00 	ldrex	r3, [r3]
 800b2dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	f023 0301 	bic.w	r3, r3, #1
 800b2e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	3308      	adds	r3, #8
 800b2ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b2f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2f6:	e841 2300 	strex	r3, r2, [r1]
 800b2fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d1e5      	bne.n	800b2ce <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2220      	movs	r2, #32
 800b306:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d12e      	bne.n	800b37c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	e853 3f00 	ldrex	r3, [r3]
 800b330:	60bb      	str	r3, [r7, #8]
   return(result);
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	f023 0310 	bic.w	r3, r3, #16
 800b338:	647b      	str	r3, [r7, #68]	; 0x44
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	461a      	mov	r2, r3
 800b340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b342:	61bb      	str	r3, [r7, #24]
 800b344:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b346:	6979      	ldr	r1, [r7, #20]
 800b348:	69ba      	ldr	r2, [r7, #24]
 800b34a:	e841 2300 	strex	r3, r2, [r1]
 800b34e:	613b      	str	r3, [r7, #16]
   return(result);
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d1e6      	bne.n	800b324 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	69db      	ldr	r3, [r3, #28]
 800b35c:	f003 0310 	and.w	r3, r3, #16
 800b360:	2b10      	cmp	r3, #16
 800b362:	d103      	bne.n	800b36c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2210      	movs	r2, #16
 800b36a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b372:	4619      	mov	r1, r3
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f7ff f9d4 	bl	800a722 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b37a:	e00b      	b.n	800b394 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f7f7 fe25 	bl	8002fcc <HAL_UART_RxCpltCallback>
}
 800b382:	e007      	b.n	800b394 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	699a      	ldr	r2, [r3, #24]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f042 0208 	orr.w	r2, r2, #8
 800b392:	619a      	str	r2, [r3, #24]
}
 800b394:	bf00      	nop
 800b396:	3758      	adds	r7, #88	; 0x58
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <atoi>:
 800b39c:	220a      	movs	r2, #10
 800b39e:	2100      	movs	r1, #0
 800b3a0:	f000 b882 	b.w	800b4a8 <strtol>

0800b3a4 <_strtol_l.constprop.0>:
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3aa:	d001      	beq.n	800b3b0 <_strtol_l.constprop.0+0xc>
 800b3ac:	2b24      	cmp	r3, #36	; 0x24
 800b3ae:	d906      	bls.n	800b3be <_strtol_l.constprop.0+0x1a>
 800b3b0:	f000 f8c0 	bl	800b534 <__errno>
 800b3b4:	2316      	movs	r3, #22
 800b3b6:	6003      	str	r3, [r0, #0]
 800b3b8:	2000      	movs	r0, #0
 800b3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3be:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b4a4 <_strtol_l.constprop.0+0x100>
 800b3c2:	460d      	mov	r5, r1
 800b3c4:	462e      	mov	r6, r5
 800b3c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b3ca:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b3ce:	f017 0708 	ands.w	r7, r7, #8
 800b3d2:	d1f7      	bne.n	800b3c4 <_strtol_l.constprop.0+0x20>
 800b3d4:	2c2d      	cmp	r4, #45	; 0x2d
 800b3d6:	d132      	bne.n	800b43e <_strtol_l.constprop.0+0x9a>
 800b3d8:	782c      	ldrb	r4, [r5, #0]
 800b3da:	2701      	movs	r7, #1
 800b3dc:	1cb5      	adds	r5, r6, #2
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d05b      	beq.n	800b49a <_strtol_l.constprop.0+0xf6>
 800b3e2:	2b10      	cmp	r3, #16
 800b3e4:	d109      	bne.n	800b3fa <_strtol_l.constprop.0+0x56>
 800b3e6:	2c30      	cmp	r4, #48	; 0x30
 800b3e8:	d107      	bne.n	800b3fa <_strtol_l.constprop.0+0x56>
 800b3ea:	782c      	ldrb	r4, [r5, #0]
 800b3ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b3f0:	2c58      	cmp	r4, #88	; 0x58
 800b3f2:	d14d      	bne.n	800b490 <_strtol_l.constprop.0+0xec>
 800b3f4:	786c      	ldrb	r4, [r5, #1]
 800b3f6:	2310      	movs	r3, #16
 800b3f8:	3502      	adds	r5, #2
 800b3fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b3fe:	f108 38ff 	add.w	r8, r8, #4294967295
 800b402:	f04f 0e00 	mov.w	lr, #0
 800b406:	fbb8 f9f3 	udiv	r9, r8, r3
 800b40a:	4676      	mov	r6, lr
 800b40c:	fb03 8a19 	mls	sl, r3, r9, r8
 800b410:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b414:	f1bc 0f09 	cmp.w	ip, #9
 800b418:	d816      	bhi.n	800b448 <_strtol_l.constprop.0+0xa4>
 800b41a:	4664      	mov	r4, ip
 800b41c:	42a3      	cmp	r3, r4
 800b41e:	dd24      	ble.n	800b46a <_strtol_l.constprop.0+0xc6>
 800b420:	f1be 3fff 	cmp.w	lr, #4294967295
 800b424:	d008      	beq.n	800b438 <_strtol_l.constprop.0+0x94>
 800b426:	45b1      	cmp	r9, r6
 800b428:	d31c      	bcc.n	800b464 <_strtol_l.constprop.0+0xc0>
 800b42a:	d101      	bne.n	800b430 <_strtol_l.constprop.0+0x8c>
 800b42c:	45a2      	cmp	sl, r4
 800b42e:	db19      	blt.n	800b464 <_strtol_l.constprop.0+0xc0>
 800b430:	fb06 4603 	mla	r6, r6, r3, r4
 800b434:	f04f 0e01 	mov.w	lr, #1
 800b438:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b43c:	e7e8      	b.n	800b410 <_strtol_l.constprop.0+0x6c>
 800b43e:	2c2b      	cmp	r4, #43	; 0x2b
 800b440:	bf04      	itt	eq
 800b442:	782c      	ldrbeq	r4, [r5, #0]
 800b444:	1cb5      	addeq	r5, r6, #2
 800b446:	e7ca      	b.n	800b3de <_strtol_l.constprop.0+0x3a>
 800b448:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b44c:	f1bc 0f19 	cmp.w	ip, #25
 800b450:	d801      	bhi.n	800b456 <_strtol_l.constprop.0+0xb2>
 800b452:	3c37      	subs	r4, #55	; 0x37
 800b454:	e7e2      	b.n	800b41c <_strtol_l.constprop.0+0x78>
 800b456:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b45a:	f1bc 0f19 	cmp.w	ip, #25
 800b45e:	d804      	bhi.n	800b46a <_strtol_l.constprop.0+0xc6>
 800b460:	3c57      	subs	r4, #87	; 0x57
 800b462:	e7db      	b.n	800b41c <_strtol_l.constprop.0+0x78>
 800b464:	f04f 3eff 	mov.w	lr, #4294967295
 800b468:	e7e6      	b.n	800b438 <_strtol_l.constprop.0+0x94>
 800b46a:	f1be 3fff 	cmp.w	lr, #4294967295
 800b46e:	d105      	bne.n	800b47c <_strtol_l.constprop.0+0xd8>
 800b470:	2322      	movs	r3, #34	; 0x22
 800b472:	6003      	str	r3, [r0, #0]
 800b474:	4646      	mov	r6, r8
 800b476:	b942      	cbnz	r2, 800b48a <_strtol_l.constprop.0+0xe6>
 800b478:	4630      	mov	r0, r6
 800b47a:	e79e      	b.n	800b3ba <_strtol_l.constprop.0+0x16>
 800b47c:	b107      	cbz	r7, 800b480 <_strtol_l.constprop.0+0xdc>
 800b47e:	4276      	negs	r6, r6
 800b480:	2a00      	cmp	r2, #0
 800b482:	d0f9      	beq.n	800b478 <_strtol_l.constprop.0+0xd4>
 800b484:	f1be 0f00 	cmp.w	lr, #0
 800b488:	d000      	beq.n	800b48c <_strtol_l.constprop.0+0xe8>
 800b48a:	1e69      	subs	r1, r5, #1
 800b48c:	6011      	str	r1, [r2, #0]
 800b48e:	e7f3      	b.n	800b478 <_strtol_l.constprop.0+0xd4>
 800b490:	2430      	movs	r4, #48	; 0x30
 800b492:	2b00      	cmp	r3, #0
 800b494:	d1b1      	bne.n	800b3fa <_strtol_l.constprop.0+0x56>
 800b496:	2308      	movs	r3, #8
 800b498:	e7af      	b.n	800b3fa <_strtol_l.constprop.0+0x56>
 800b49a:	2c30      	cmp	r4, #48	; 0x30
 800b49c:	d0a5      	beq.n	800b3ea <_strtol_l.constprop.0+0x46>
 800b49e:	230a      	movs	r3, #10
 800b4a0:	e7ab      	b.n	800b3fa <_strtol_l.constprop.0+0x56>
 800b4a2:	bf00      	nop
 800b4a4:	0800c28d 	.word	0x0800c28d

0800b4a8 <strtol>:
 800b4a8:	4613      	mov	r3, r2
 800b4aa:	460a      	mov	r2, r1
 800b4ac:	4601      	mov	r1, r0
 800b4ae:	4802      	ldr	r0, [pc, #8]	; (800b4b8 <strtol+0x10>)
 800b4b0:	6800      	ldr	r0, [r0, #0]
 800b4b2:	f7ff bf77 	b.w	800b3a4 <_strtol_l.constprop.0>
 800b4b6:	bf00      	nop
 800b4b8:	20000194 	.word	0x20000194

0800b4bc <sniprintf>:
 800b4bc:	b40c      	push	{r2, r3}
 800b4be:	b530      	push	{r4, r5, lr}
 800b4c0:	4b17      	ldr	r3, [pc, #92]	; (800b520 <sniprintf+0x64>)
 800b4c2:	1e0c      	subs	r4, r1, #0
 800b4c4:	681d      	ldr	r5, [r3, #0]
 800b4c6:	b09d      	sub	sp, #116	; 0x74
 800b4c8:	da08      	bge.n	800b4dc <sniprintf+0x20>
 800b4ca:	238b      	movs	r3, #139	; 0x8b
 800b4cc:	602b      	str	r3, [r5, #0]
 800b4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d2:	b01d      	add	sp, #116	; 0x74
 800b4d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4d8:	b002      	add	sp, #8
 800b4da:	4770      	bx	lr
 800b4dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b4e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b4e4:	bf14      	ite	ne
 800b4e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b4ea:	4623      	moveq	r3, r4
 800b4ec:	9304      	str	r3, [sp, #16]
 800b4ee:	9307      	str	r3, [sp, #28]
 800b4f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4f4:	9002      	str	r0, [sp, #8]
 800b4f6:	9006      	str	r0, [sp, #24]
 800b4f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b4fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b4fe:	ab21      	add	r3, sp, #132	; 0x84
 800b500:	a902      	add	r1, sp, #8
 800b502:	4628      	mov	r0, r5
 800b504:	9301      	str	r3, [sp, #4]
 800b506:	f000 f993 	bl	800b830 <_svfiprintf_r>
 800b50a:	1c43      	adds	r3, r0, #1
 800b50c:	bfbc      	itt	lt
 800b50e:	238b      	movlt	r3, #139	; 0x8b
 800b510:	602b      	strlt	r3, [r5, #0]
 800b512:	2c00      	cmp	r4, #0
 800b514:	d0dd      	beq.n	800b4d2 <sniprintf+0x16>
 800b516:	9b02      	ldr	r3, [sp, #8]
 800b518:	2200      	movs	r2, #0
 800b51a:	701a      	strb	r2, [r3, #0]
 800b51c:	e7d9      	b.n	800b4d2 <sniprintf+0x16>
 800b51e:	bf00      	nop
 800b520:	20000194 	.word	0x20000194

0800b524 <memset>:
 800b524:	4402      	add	r2, r0
 800b526:	4603      	mov	r3, r0
 800b528:	4293      	cmp	r3, r2
 800b52a:	d100      	bne.n	800b52e <memset+0xa>
 800b52c:	4770      	bx	lr
 800b52e:	f803 1b01 	strb.w	r1, [r3], #1
 800b532:	e7f9      	b.n	800b528 <memset+0x4>

0800b534 <__errno>:
 800b534:	4b01      	ldr	r3, [pc, #4]	; (800b53c <__errno+0x8>)
 800b536:	6818      	ldr	r0, [r3, #0]
 800b538:	4770      	bx	lr
 800b53a:	bf00      	nop
 800b53c:	20000194 	.word	0x20000194

0800b540 <__libc_init_array>:
 800b540:	b570      	push	{r4, r5, r6, lr}
 800b542:	4d0d      	ldr	r5, [pc, #52]	; (800b578 <__libc_init_array+0x38>)
 800b544:	4c0d      	ldr	r4, [pc, #52]	; (800b57c <__libc_init_array+0x3c>)
 800b546:	1b64      	subs	r4, r4, r5
 800b548:	10a4      	asrs	r4, r4, #2
 800b54a:	2600      	movs	r6, #0
 800b54c:	42a6      	cmp	r6, r4
 800b54e:	d109      	bne.n	800b564 <__libc_init_array+0x24>
 800b550:	4d0b      	ldr	r5, [pc, #44]	; (800b580 <__libc_init_array+0x40>)
 800b552:	4c0c      	ldr	r4, [pc, #48]	; (800b584 <__libc_init_array+0x44>)
 800b554:	f000 fd34 	bl	800bfc0 <_init>
 800b558:	1b64      	subs	r4, r4, r5
 800b55a:	10a4      	asrs	r4, r4, #2
 800b55c:	2600      	movs	r6, #0
 800b55e:	42a6      	cmp	r6, r4
 800b560:	d105      	bne.n	800b56e <__libc_init_array+0x2e>
 800b562:	bd70      	pop	{r4, r5, r6, pc}
 800b564:	f855 3b04 	ldr.w	r3, [r5], #4
 800b568:	4798      	blx	r3
 800b56a:	3601      	adds	r6, #1
 800b56c:	e7ee      	b.n	800b54c <__libc_init_array+0xc>
 800b56e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b572:	4798      	blx	r3
 800b574:	3601      	adds	r6, #1
 800b576:	e7f2      	b.n	800b55e <__libc_init_array+0x1e>
 800b578:	0800c3c8 	.word	0x0800c3c8
 800b57c:	0800c3c8 	.word	0x0800c3c8
 800b580:	0800c3c8 	.word	0x0800c3c8
 800b584:	0800c3cc 	.word	0x0800c3cc

0800b588 <__retarget_lock_acquire_recursive>:
 800b588:	4770      	bx	lr

0800b58a <__retarget_lock_release_recursive>:
 800b58a:	4770      	bx	lr

0800b58c <_free_r>:
 800b58c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b58e:	2900      	cmp	r1, #0
 800b590:	d044      	beq.n	800b61c <_free_r+0x90>
 800b592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b596:	9001      	str	r0, [sp, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	f1a1 0404 	sub.w	r4, r1, #4
 800b59e:	bfb8      	it	lt
 800b5a0:	18e4      	addlt	r4, r4, r3
 800b5a2:	f000 f8df 	bl	800b764 <__malloc_lock>
 800b5a6:	4a1e      	ldr	r2, [pc, #120]	; (800b620 <_free_r+0x94>)
 800b5a8:	9801      	ldr	r0, [sp, #4]
 800b5aa:	6813      	ldr	r3, [r2, #0]
 800b5ac:	b933      	cbnz	r3, 800b5bc <_free_r+0x30>
 800b5ae:	6063      	str	r3, [r4, #4]
 800b5b0:	6014      	str	r4, [r2, #0]
 800b5b2:	b003      	add	sp, #12
 800b5b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5b8:	f000 b8da 	b.w	800b770 <__malloc_unlock>
 800b5bc:	42a3      	cmp	r3, r4
 800b5be:	d908      	bls.n	800b5d2 <_free_r+0x46>
 800b5c0:	6825      	ldr	r5, [r4, #0]
 800b5c2:	1961      	adds	r1, r4, r5
 800b5c4:	428b      	cmp	r3, r1
 800b5c6:	bf01      	itttt	eq
 800b5c8:	6819      	ldreq	r1, [r3, #0]
 800b5ca:	685b      	ldreq	r3, [r3, #4]
 800b5cc:	1949      	addeq	r1, r1, r5
 800b5ce:	6021      	streq	r1, [r4, #0]
 800b5d0:	e7ed      	b.n	800b5ae <_free_r+0x22>
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	b10b      	cbz	r3, 800b5dc <_free_r+0x50>
 800b5d8:	42a3      	cmp	r3, r4
 800b5da:	d9fa      	bls.n	800b5d2 <_free_r+0x46>
 800b5dc:	6811      	ldr	r1, [r2, #0]
 800b5de:	1855      	adds	r5, r2, r1
 800b5e0:	42a5      	cmp	r5, r4
 800b5e2:	d10b      	bne.n	800b5fc <_free_r+0x70>
 800b5e4:	6824      	ldr	r4, [r4, #0]
 800b5e6:	4421      	add	r1, r4
 800b5e8:	1854      	adds	r4, r2, r1
 800b5ea:	42a3      	cmp	r3, r4
 800b5ec:	6011      	str	r1, [r2, #0]
 800b5ee:	d1e0      	bne.n	800b5b2 <_free_r+0x26>
 800b5f0:	681c      	ldr	r4, [r3, #0]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	6053      	str	r3, [r2, #4]
 800b5f6:	440c      	add	r4, r1
 800b5f8:	6014      	str	r4, [r2, #0]
 800b5fa:	e7da      	b.n	800b5b2 <_free_r+0x26>
 800b5fc:	d902      	bls.n	800b604 <_free_r+0x78>
 800b5fe:	230c      	movs	r3, #12
 800b600:	6003      	str	r3, [r0, #0]
 800b602:	e7d6      	b.n	800b5b2 <_free_r+0x26>
 800b604:	6825      	ldr	r5, [r4, #0]
 800b606:	1961      	adds	r1, r4, r5
 800b608:	428b      	cmp	r3, r1
 800b60a:	bf04      	itt	eq
 800b60c:	6819      	ldreq	r1, [r3, #0]
 800b60e:	685b      	ldreq	r3, [r3, #4]
 800b610:	6063      	str	r3, [r4, #4]
 800b612:	bf04      	itt	eq
 800b614:	1949      	addeq	r1, r1, r5
 800b616:	6021      	streq	r1, [r4, #0]
 800b618:	6054      	str	r4, [r2, #4]
 800b61a:	e7ca      	b.n	800b5b2 <_free_r+0x26>
 800b61c:	b003      	add	sp, #12
 800b61e:	bd30      	pop	{r4, r5, pc}
 800b620:	200006bc 	.word	0x200006bc

0800b624 <sbrk_aligned>:
 800b624:	b570      	push	{r4, r5, r6, lr}
 800b626:	4e0e      	ldr	r6, [pc, #56]	; (800b660 <sbrk_aligned+0x3c>)
 800b628:	460c      	mov	r4, r1
 800b62a:	6831      	ldr	r1, [r6, #0]
 800b62c:	4605      	mov	r5, r0
 800b62e:	b911      	cbnz	r1, 800b636 <sbrk_aligned+0x12>
 800b630:	f000 fba6 	bl	800bd80 <_sbrk_r>
 800b634:	6030      	str	r0, [r6, #0]
 800b636:	4621      	mov	r1, r4
 800b638:	4628      	mov	r0, r5
 800b63a:	f000 fba1 	bl	800bd80 <_sbrk_r>
 800b63e:	1c43      	adds	r3, r0, #1
 800b640:	d00a      	beq.n	800b658 <sbrk_aligned+0x34>
 800b642:	1cc4      	adds	r4, r0, #3
 800b644:	f024 0403 	bic.w	r4, r4, #3
 800b648:	42a0      	cmp	r0, r4
 800b64a:	d007      	beq.n	800b65c <sbrk_aligned+0x38>
 800b64c:	1a21      	subs	r1, r4, r0
 800b64e:	4628      	mov	r0, r5
 800b650:	f000 fb96 	bl	800bd80 <_sbrk_r>
 800b654:	3001      	adds	r0, #1
 800b656:	d101      	bne.n	800b65c <sbrk_aligned+0x38>
 800b658:	f04f 34ff 	mov.w	r4, #4294967295
 800b65c:	4620      	mov	r0, r4
 800b65e:	bd70      	pop	{r4, r5, r6, pc}
 800b660:	200006c0 	.word	0x200006c0

0800b664 <_malloc_r>:
 800b664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b668:	1ccd      	adds	r5, r1, #3
 800b66a:	f025 0503 	bic.w	r5, r5, #3
 800b66e:	3508      	adds	r5, #8
 800b670:	2d0c      	cmp	r5, #12
 800b672:	bf38      	it	cc
 800b674:	250c      	movcc	r5, #12
 800b676:	2d00      	cmp	r5, #0
 800b678:	4607      	mov	r7, r0
 800b67a:	db01      	blt.n	800b680 <_malloc_r+0x1c>
 800b67c:	42a9      	cmp	r1, r5
 800b67e:	d905      	bls.n	800b68c <_malloc_r+0x28>
 800b680:	230c      	movs	r3, #12
 800b682:	603b      	str	r3, [r7, #0]
 800b684:	2600      	movs	r6, #0
 800b686:	4630      	mov	r0, r6
 800b688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b68c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b760 <_malloc_r+0xfc>
 800b690:	f000 f868 	bl	800b764 <__malloc_lock>
 800b694:	f8d8 3000 	ldr.w	r3, [r8]
 800b698:	461c      	mov	r4, r3
 800b69a:	bb5c      	cbnz	r4, 800b6f4 <_malloc_r+0x90>
 800b69c:	4629      	mov	r1, r5
 800b69e:	4638      	mov	r0, r7
 800b6a0:	f7ff ffc0 	bl	800b624 <sbrk_aligned>
 800b6a4:	1c43      	adds	r3, r0, #1
 800b6a6:	4604      	mov	r4, r0
 800b6a8:	d155      	bne.n	800b756 <_malloc_r+0xf2>
 800b6aa:	f8d8 4000 	ldr.w	r4, [r8]
 800b6ae:	4626      	mov	r6, r4
 800b6b0:	2e00      	cmp	r6, #0
 800b6b2:	d145      	bne.n	800b740 <_malloc_r+0xdc>
 800b6b4:	2c00      	cmp	r4, #0
 800b6b6:	d048      	beq.n	800b74a <_malloc_r+0xe6>
 800b6b8:	6823      	ldr	r3, [r4, #0]
 800b6ba:	4631      	mov	r1, r6
 800b6bc:	4638      	mov	r0, r7
 800b6be:	eb04 0903 	add.w	r9, r4, r3
 800b6c2:	f000 fb5d 	bl	800bd80 <_sbrk_r>
 800b6c6:	4581      	cmp	r9, r0
 800b6c8:	d13f      	bne.n	800b74a <_malloc_r+0xe6>
 800b6ca:	6821      	ldr	r1, [r4, #0]
 800b6cc:	1a6d      	subs	r5, r5, r1
 800b6ce:	4629      	mov	r1, r5
 800b6d0:	4638      	mov	r0, r7
 800b6d2:	f7ff ffa7 	bl	800b624 <sbrk_aligned>
 800b6d6:	3001      	adds	r0, #1
 800b6d8:	d037      	beq.n	800b74a <_malloc_r+0xe6>
 800b6da:	6823      	ldr	r3, [r4, #0]
 800b6dc:	442b      	add	r3, r5
 800b6de:	6023      	str	r3, [r4, #0]
 800b6e0:	f8d8 3000 	ldr.w	r3, [r8]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d038      	beq.n	800b75a <_malloc_r+0xf6>
 800b6e8:	685a      	ldr	r2, [r3, #4]
 800b6ea:	42a2      	cmp	r2, r4
 800b6ec:	d12b      	bne.n	800b746 <_malloc_r+0xe2>
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	605a      	str	r2, [r3, #4]
 800b6f2:	e00f      	b.n	800b714 <_malloc_r+0xb0>
 800b6f4:	6822      	ldr	r2, [r4, #0]
 800b6f6:	1b52      	subs	r2, r2, r5
 800b6f8:	d41f      	bmi.n	800b73a <_malloc_r+0xd6>
 800b6fa:	2a0b      	cmp	r2, #11
 800b6fc:	d917      	bls.n	800b72e <_malloc_r+0xca>
 800b6fe:	1961      	adds	r1, r4, r5
 800b700:	42a3      	cmp	r3, r4
 800b702:	6025      	str	r5, [r4, #0]
 800b704:	bf18      	it	ne
 800b706:	6059      	strne	r1, [r3, #4]
 800b708:	6863      	ldr	r3, [r4, #4]
 800b70a:	bf08      	it	eq
 800b70c:	f8c8 1000 	streq.w	r1, [r8]
 800b710:	5162      	str	r2, [r4, r5]
 800b712:	604b      	str	r3, [r1, #4]
 800b714:	4638      	mov	r0, r7
 800b716:	f104 060b 	add.w	r6, r4, #11
 800b71a:	f000 f829 	bl	800b770 <__malloc_unlock>
 800b71e:	f026 0607 	bic.w	r6, r6, #7
 800b722:	1d23      	adds	r3, r4, #4
 800b724:	1af2      	subs	r2, r6, r3
 800b726:	d0ae      	beq.n	800b686 <_malloc_r+0x22>
 800b728:	1b9b      	subs	r3, r3, r6
 800b72a:	50a3      	str	r3, [r4, r2]
 800b72c:	e7ab      	b.n	800b686 <_malloc_r+0x22>
 800b72e:	42a3      	cmp	r3, r4
 800b730:	6862      	ldr	r2, [r4, #4]
 800b732:	d1dd      	bne.n	800b6f0 <_malloc_r+0x8c>
 800b734:	f8c8 2000 	str.w	r2, [r8]
 800b738:	e7ec      	b.n	800b714 <_malloc_r+0xb0>
 800b73a:	4623      	mov	r3, r4
 800b73c:	6864      	ldr	r4, [r4, #4]
 800b73e:	e7ac      	b.n	800b69a <_malloc_r+0x36>
 800b740:	4634      	mov	r4, r6
 800b742:	6876      	ldr	r6, [r6, #4]
 800b744:	e7b4      	b.n	800b6b0 <_malloc_r+0x4c>
 800b746:	4613      	mov	r3, r2
 800b748:	e7cc      	b.n	800b6e4 <_malloc_r+0x80>
 800b74a:	230c      	movs	r3, #12
 800b74c:	603b      	str	r3, [r7, #0]
 800b74e:	4638      	mov	r0, r7
 800b750:	f000 f80e 	bl	800b770 <__malloc_unlock>
 800b754:	e797      	b.n	800b686 <_malloc_r+0x22>
 800b756:	6025      	str	r5, [r4, #0]
 800b758:	e7dc      	b.n	800b714 <_malloc_r+0xb0>
 800b75a:	605b      	str	r3, [r3, #4]
 800b75c:	deff      	udf	#255	; 0xff
 800b75e:	bf00      	nop
 800b760:	200006bc 	.word	0x200006bc

0800b764 <__malloc_lock>:
 800b764:	4801      	ldr	r0, [pc, #4]	; (800b76c <__malloc_lock+0x8>)
 800b766:	f7ff bf0f 	b.w	800b588 <__retarget_lock_acquire_recursive>
 800b76a:	bf00      	nop
 800b76c:	200006b8 	.word	0x200006b8

0800b770 <__malloc_unlock>:
 800b770:	4801      	ldr	r0, [pc, #4]	; (800b778 <__malloc_unlock+0x8>)
 800b772:	f7ff bf0a 	b.w	800b58a <__retarget_lock_release_recursive>
 800b776:	bf00      	nop
 800b778:	200006b8 	.word	0x200006b8

0800b77c <__ssputs_r>:
 800b77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b780:	688e      	ldr	r6, [r1, #8]
 800b782:	461f      	mov	r7, r3
 800b784:	42be      	cmp	r6, r7
 800b786:	680b      	ldr	r3, [r1, #0]
 800b788:	4682      	mov	sl, r0
 800b78a:	460c      	mov	r4, r1
 800b78c:	4690      	mov	r8, r2
 800b78e:	d82c      	bhi.n	800b7ea <__ssputs_r+0x6e>
 800b790:	898a      	ldrh	r2, [r1, #12]
 800b792:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b796:	d026      	beq.n	800b7e6 <__ssputs_r+0x6a>
 800b798:	6965      	ldr	r5, [r4, #20]
 800b79a:	6909      	ldr	r1, [r1, #16]
 800b79c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7a0:	eba3 0901 	sub.w	r9, r3, r1
 800b7a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7a8:	1c7b      	adds	r3, r7, #1
 800b7aa:	444b      	add	r3, r9
 800b7ac:	106d      	asrs	r5, r5, #1
 800b7ae:	429d      	cmp	r5, r3
 800b7b0:	bf38      	it	cc
 800b7b2:	461d      	movcc	r5, r3
 800b7b4:	0553      	lsls	r3, r2, #21
 800b7b6:	d527      	bpl.n	800b808 <__ssputs_r+0x8c>
 800b7b8:	4629      	mov	r1, r5
 800b7ba:	f7ff ff53 	bl	800b664 <_malloc_r>
 800b7be:	4606      	mov	r6, r0
 800b7c0:	b360      	cbz	r0, 800b81c <__ssputs_r+0xa0>
 800b7c2:	6921      	ldr	r1, [r4, #16]
 800b7c4:	464a      	mov	r2, r9
 800b7c6:	f000 faeb 	bl	800bda0 <memcpy>
 800b7ca:	89a3      	ldrh	r3, [r4, #12]
 800b7cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b7d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7d4:	81a3      	strh	r3, [r4, #12]
 800b7d6:	6126      	str	r6, [r4, #16]
 800b7d8:	6165      	str	r5, [r4, #20]
 800b7da:	444e      	add	r6, r9
 800b7dc:	eba5 0509 	sub.w	r5, r5, r9
 800b7e0:	6026      	str	r6, [r4, #0]
 800b7e2:	60a5      	str	r5, [r4, #8]
 800b7e4:	463e      	mov	r6, r7
 800b7e6:	42be      	cmp	r6, r7
 800b7e8:	d900      	bls.n	800b7ec <__ssputs_r+0x70>
 800b7ea:	463e      	mov	r6, r7
 800b7ec:	6820      	ldr	r0, [r4, #0]
 800b7ee:	4632      	mov	r2, r6
 800b7f0:	4641      	mov	r1, r8
 800b7f2:	f000 faab 	bl	800bd4c <memmove>
 800b7f6:	68a3      	ldr	r3, [r4, #8]
 800b7f8:	1b9b      	subs	r3, r3, r6
 800b7fa:	60a3      	str	r3, [r4, #8]
 800b7fc:	6823      	ldr	r3, [r4, #0]
 800b7fe:	4433      	add	r3, r6
 800b800:	6023      	str	r3, [r4, #0]
 800b802:	2000      	movs	r0, #0
 800b804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b808:	462a      	mov	r2, r5
 800b80a:	f000 fad7 	bl	800bdbc <_realloc_r>
 800b80e:	4606      	mov	r6, r0
 800b810:	2800      	cmp	r0, #0
 800b812:	d1e0      	bne.n	800b7d6 <__ssputs_r+0x5a>
 800b814:	6921      	ldr	r1, [r4, #16]
 800b816:	4650      	mov	r0, sl
 800b818:	f7ff feb8 	bl	800b58c <_free_r>
 800b81c:	230c      	movs	r3, #12
 800b81e:	f8ca 3000 	str.w	r3, [sl]
 800b822:	89a3      	ldrh	r3, [r4, #12]
 800b824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b828:	81a3      	strh	r3, [r4, #12]
 800b82a:	f04f 30ff 	mov.w	r0, #4294967295
 800b82e:	e7e9      	b.n	800b804 <__ssputs_r+0x88>

0800b830 <_svfiprintf_r>:
 800b830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b834:	4698      	mov	r8, r3
 800b836:	898b      	ldrh	r3, [r1, #12]
 800b838:	061b      	lsls	r3, r3, #24
 800b83a:	b09d      	sub	sp, #116	; 0x74
 800b83c:	4607      	mov	r7, r0
 800b83e:	460d      	mov	r5, r1
 800b840:	4614      	mov	r4, r2
 800b842:	d50e      	bpl.n	800b862 <_svfiprintf_r+0x32>
 800b844:	690b      	ldr	r3, [r1, #16]
 800b846:	b963      	cbnz	r3, 800b862 <_svfiprintf_r+0x32>
 800b848:	2140      	movs	r1, #64	; 0x40
 800b84a:	f7ff ff0b 	bl	800b664 <_malloc_r>
 800b84e:	6028      	str	r0, [r5, #0]
 800b850:	6128      	str	r0, [r5, #16]
 800b852:	b920      	cbnz	r0, 800b85e <_svfiprintf_r+0x2e>
 800b854:	230c      	movs	r3, #12
 800b856:	603b      	str	r3, [r7, #0]
 800b858:	f04f 30ff 	mov.w	r0, #4294967295
 800b85c:	e0d0      	b.n	800ba00 <_svfiprintf_r+0x1d0>
 800b85e:	2340      	movs	r3, #64	; 0x40
 800b860:	616b      	str	r3, [r5, #20]
 800b862:	2300      	movs	r3, #0
 800b864:	9309      	str	r3, [sp, #36]	; 0x24
 800b866:	2320      	movs	r3, #32
 800b868:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b86c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b870:	2330      	movs	r3, #48	; 0x30
 800b872:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ba18 <_svfiprintf_r+0x1e8>
 800b876:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b87a:	f04f 0901 	mov.w	r9, #1
 800b87e:	4623      	mov	r3, r4
 800b880:	469a      	mov	sl, r3
 800b882:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b886:	b10a      	cbz	r2, 800b88c <_svfiprintf_r+0x5c>
 800b888:	2a25      	cmp	r2, #37	; 0x25
 800b88a:	d1f9      	bne.n	800b880 <_svfiprintf_r+0x50>
 800b88c:	ebba 0b04 	subs.w	fp, sl, r4
 800b890:	d00b      	beq.n	800b8aa <_svfiprintf_r+0x7a>
 800b892:	465b      	mov	r3, fp
 800b894:	4622      	mov	r2, r4
 800b896:	4629      	mov	r1, r5
 800b898:	4638      	mov	r0, r7
 800b89a:	f7ff ff6f 	bl	800b77c <__ssputs_r>
 800b89e:	3001      	adds	r0, #1
 800b8a0:	f000 80a9 	beq.w	800b9f6 <_svfiprintf_r+0x1c6>
 800b8a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8a6:	445a      	add	r2, fp
 800b8a8:	9209      	str	r2, [sp, #36]	; 0x24
 800b8aa:	f89a 3000 	ldrb.w	r3, [sl]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	f000 80a1 	beq.w	800b9f6 <_svfiprintf_r+0x1c6>
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8be:	f10a 0a01 	add.w	sl, sl, #1
 800b8c2:	9304      	str	r3, [sp, #16]
 800b8c4:	9307      	str	r3, [sp, #28]
 800b8c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8ca:	931a      	str	r3, [sp, #104]	; 0x68
 800b8cc:	4654      	mov	r4, sl
 800b8ce:	2205      	movs	r2, #5
 800b8d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8d4:	4850      	ldr	r0, [pc, #320]	; (800ba18 <_svfiprintf_r+0x1e8>)
 800b8d6:	f7f4 fcb3 	bl	8000240 <memchr>
 800b8da:	9a04      	ldr	r2, [sp, #16]
 800b8dc:	b9d8      	cbnz	r0, 800b916 <_svfiprintf_r+0xe6>
 800b8de:	06d0      	lsls	r0, r2, #27
 800b8e0:	bf44      	itt	mi
 800b8e2:	2320      	movmi	r3, #32
 800b8e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8e8:	0711      	lsls	r1, r2, #28
 800b8ea:	bf44      	itt	mi
 800b8ec:	232b      	movmi	r3, #43	; 0x2b
 800b8ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b8f6:	2b2a      	cmp	r3, #42	; 0x2a
 800b8f8:	d015      	beq.n	800b926 <_svfiprintf_r+0xf6>
 800b8fa:	9a07      	ldr	r2, [sp, #28]
 800b8fc:	4654      	mov	r4, sl
 800b8fe:	2000      	movs	r0, #0
 800b900:	f04f 0c0a 	mov.w	ip, #10
 800b904:	4621      	mov	r1, r4
 800b906:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b90a:	3b30      	subs	r3, #48	; 0x30
 800b90c:	2b09      	cmp	r3, #9
 800b90e:	d94d      	bls.n	800b9ac <_svfiprintf_r+0x17c>
 800b910:	b1b0      	cbz	r0, 800b940 <_svfiprintf_r+0x110>
 800b912:	9207      	str	r2, [sp, #28]
 800b914:	e014      	b.n	800b940 <_svfiprintf_r+0x110>
 800b916:	eba0 0308 	sub.w	r3, r0, r8
 800b91a:	fa09 f303 	lsl.w	r3, r9, r3
 800b91e:	4313      	orrs	r3, r2
 800b920:	9304      	str	r3, [sp, #16]
 800b922:	46a2      	mov	sl, r4
 800b924:	e7d2      	b.n	800b8cc <_svfiprintf_r+0x9c>
 800b926:	9b03      	ldr	r3, [sp, #12]
 800b928:	1d19      	adds	r1, r3, #4
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	9103      	str	r1, [sp, #12]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	bfbb      	ittet	lt
 800b932:	425b      	neglt	r3, r3
 800b934:	f042 0202 	orrlt.w	r2, r2, #2
 800b938:	9307      	strge	r3, [sp, #28]
 800b93a:	9307      	strlt	r3, [sp, #28]
 800b93c:	bfb8      	it	lt
 800b93e:	9204      	strlt	r2, [sp, #16]
 800b940:	7823      	ldrb	r3, [r4, #0]
 800b942:	2b2e      	cmp	r3, #46	; 0x2e
 800b944:	d10c      	bne.n	800b960 <_svfiprintf_r+0x130>
 800b946:	7863      	ldrb	r3, [r4, #1]
 800b948:	2b2a      	cmp	r3, #42	; 0x2a
 800b94a:	d134      	bne.n	800b9b6 <_svfiprintf_r+0x186>
 800b94c:	9b03      	ldr	r3, [sp, #12]
 800b94e:	1d1a      	adds	r2, r3, #4
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	9203      	str	r2, [sp, #12]
 800b954:	2b00      	cmp	r3, #0
 800b956:	bfb8      	it	lt
 800b958:	f04f 33ff 	movlt.w	r3, #4294967295
 800b95c:	3402      	adds	r4, #2
 800b95e:	9305      	str	r3, [sp, #20]
 800b960:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ba28 <_svfiprintf_r+0x1f8>
 800b964:	7821      	ldrb	r1, [r4, #0]
 800b966:	2203      	movs	r2, #3
 800b968:	4650      	mov	r0, sl
 800b96a:	f7f4 fc69 	bl	8000240 <memchr>
 800b96e:	b138      	cbz	r0, 800b980 <_svfiprintf_r+0x150>
 800b970:	9b04      	ldr	r3, [sp, #16]
 800b972:	eba0 000a 	sub.w	r0, r0, sl
 800b976:	2240      	movs	r2, #64	; 0x40
 800b978:	4082      	lsls	r2, r0
 800b97a:	4313      	orrs	r3, r2
 800b97c:	3401      	adds	r4, #1
 800b97e:	9304      	str	r3, [sp, #16]
 800b980:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b984:	4825      	ldr	r0, [pc, #148]	; (800ba1c <_svfiprintf_r+0x1ec>)
 800b986:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b98a:	2206      	movs	r2, #6
 800b98c:	f7f4 fc58 	bl	8000240 <memchr>
 800b990:	2800      	cmp	r0, #0
 800b992:	d038      	beq.n	800ba06 <_svfiprintf_r+0x1d6>
 800b994:	4b22      	ldr	r3, [pc, #136]	; (800ba20 <_svfiprintf_r+0x1f0>)
 800b996:	bb1b      	cbnz	r3, 800b9e0 <_svfiprintf_r+0x1b0>
 800b998:	9b03      	ldr	r3, [sp, #12]
 800b99a:	3307      	adds	r3, #7
 800b99c:	f023 0307 	bic.w	r3, r3, #7
 800b9a0:	3308      	adds	r3, #8
 800b9a2:	9303      	str	r3, [sp, #12]
 800b9a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9a6:	4433      	add	r3, r6
 800b9a8:	9309      	str	r3, [sp, #36]	; 0x24
 800b9aa:	e768      	b.n	800b87e <_svfiprintf_r+0x4e>
 800b9ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9b0:	460c      	mov	r4, r1
 800b9b2:	2001      	movs	r0, #1
 800b9b4:	e7a6      	b.n	800b904 <_svfiprintf_r+0xd4>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	3401      	adds	r4, #1
 800b9ba:	9305      	str	r3, [sp, #20]
 800b9bc:	4619      	mov	r1, r3
 800b9be:	f04f 0c0a 	mov.w	ip, #10
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9c8:	3a30      	subs	r2, #48	; 0x30
 800b9ca:	2a09      	cmp	r2, #9
 800b9cc:	d903      	bls.n	800b9d6 <_svfiprintf_r+0x1a6>
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d0c6      	beq.n	800b960 <_svfiprintf_r+0x130>
 800b9d2:	9105      	str	r1, [sp, #20]
 800b9d4:	e7c4      	b.n	800b960 <_svfiprintf_r+0x130>
 800b9d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9da:	4604      	mov	r4, r0
 800b9dc:	2301      	movs	r3, #1
 800b9de:	e7f0      	b.n	800b9c2 <_svfiprintf_r+0x192>
 800b9e0:	ab03      	add	r3, sp, #12
 800b9e2:	9300      	str	r3, [sp, #0]
 800b9e4:	462a      	mov	r2, r5
 800b9e6:	4b0f      	ldr	r3, [pc, #60]	; (800ba24 <_svfiprintf_r+0x1f4>)
 800b9e8:	a904      	add	r1, sp, #16
 800b9ea:	4638      	mov	r0, r7
 800b9ec:	f3af 8000 	nop.w
 800b9f0:	1c42      	adds	r2, r0, #1
 800b9f2:	4606      	mov	r6, r0
 800b9f4:	d1d6      	bne.n	800b9a4 <_svfiprintf_r+0x174>
 800b9f6:	89ab      	ldrh	r3, [r5, #12]
 800b9f8:	065b      	lsls	r3, r3, #25
 800b9fa:	f53f af2d 	bmi.w	800b858 <_svfiprintf_r+0x28>
 800b9fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba00:	b01d      	add	sp, #116	; 0x74
 800ba02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba06:	ab03      	add	r3, sp, #12
 800ba08:	9300      	str	r3, [sp, #0]
 800ba0a:	462a      	mov	r2, r5
 800ba0c:	4b05      	ldr	r3, [pc, #20]	; (800ba24 <_svfiprintf_r+0x1f4>)
 800ba0e:	a904      	add	r1, sp, #16
 800ba10:	4638      	mov	r0, r7
 800ba12:	f000 f879 	bl	800bb08 <_printf_i>
 800ba16:	e7eb      	b.n	800b9f0 <_svfiprintf_r+0x1c0>
 800ba18:	0800c38d 	.word	0x0800c38d
 800ba1c:	0800c397 	.word	0x0800c397
 800ba20:	00000000 	.word	0x00000000
 800ba24:	0800b77d 	.word	0x0800b77d
 800ba28:	0800c393 	.word	0x0800c393

0800ba2c <_printf_common>:
 800ba2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba30:	4616      	mov	r6, r2
 800ba32:	4699      	mov	r9, r3
 800ba34:	688a      	ldr	r2, [r1, #8]
 800ba36:	690b      	ldr	r3, [r1, #16]
 800ba38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	bfb8      	it	lt
 800ba40:	4613      	movlt	r3, r2
 800ba42:	6033      	str	r3, [r6, #0]
 800ba44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba48:	4607      	mov	r7, r0
 800ba4a:	460c      	mov	r4, r1
 800ba4c:	b10a      	cbz	r2, 800ba52 <_printf_common+0x26>
 800ba4e:	3301      	adds	r3, #1
 800ba50:	6033      	str	r3, [r6, #0]
 800ba52:	6823      	ldr	r3, [r4, #0]
 800ba54:	0699      	lsls	r1, r3, #26
 800ba56:	bf42      	ittt	mi
 800ba58:	6833      	ldrmi	r3, [r6, #0]
 800ba5a:	3302      	addmi	r3, #2
 800ba5c:	6033      	strmi	r3, [r6, #0]
 800ba5e:	6825      	ldr	r5, [r4, #0]
 800ba60:	f015 0506 	ands.w	r5, r5, #6
 800ba64:	d106      	bne.n	800ba74 <_printf_common+0x48>
 800ba66:	f104 0a19 	add.w	sl, r4, #25
 800ba6a:	68e3      	ldr	r3, [r4, #12]
 800ba6c:	6832      	ldr	r2, [r6, #0]
 800ba6e:	1a9b      	subs	r3, r3, r2
 800ba70:	42ab      	cmp	r3, r5
 800ba72:	dc26      	bgt.n	800bac2 <_printf_common+0x96>
 800ba74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba78:	1e13      	subs	r3, r2, #0
 800ba7a:	6822      	ldr	r2, [r4, #0]
 800ba7c:	bf18      	it	ne
 800ba7e:	2301      	movne	r3, #1
 800ba80:	0692      	lsls	r2, r2, #26
 800ba82:	d42b      	bmi.n	800badc <_printf_common+0xb0>
 800ba84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba88:	4649      	mov	r1, r9
 800ba8a:	4638      	mov	r0, r7
 800ba8c:	47c0      	blx	r8
 800ba8e:	3001      	adds	r0, #1
 800ba90:	d01e      	beq.n	800bad0 <_printf_common+0xa4>
 800ba92:	6823      	ldr	r3, [r4, #0]
 800ba94:	6922      	ldr	r2, [r4, #16]
 800ba96:	f003 0306 	and.w	r3, r3, #6
 800ba9a:	2b04      	cmp	r3, #4
 800ba9c:	bf02      	ittt	eq
 800ba9e:	68e5      	ldreq	r5, [r4, #12]
 800baa0:	6833      	ldreq	r3, [r6, #0]
 800baa2:	1aed      	subeq	r5, r5, r3
 800baa4:	68a3      	ldr	r3, [r4, #8]
 800baa6:	bf0c      	ite	eq
 800baa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800baac:	2500      	movne	r5, #0
 800baae:	4293      	cmp	r3, r2
 800bab0:	bfc4      	itt	gt
 800bab2:	1a9b      	subgt	r3, r3, r2
 800bab4:	18ed      	addgt	r5, r5, r3
 800bab6:	2600      	movs	r6, #0
 800bab8:	341a      	adds	r4, #26
 800baba:	42b5      	cmp	r5, r6
 800babc:	d11a      	bne.n	800baf4 <_printf_common+0xc8>
 800babe:	2000      	movs	r0, #0
 800bac0:	e008      	b.n	800bad4 <_printf_common+0xa8>
 800bac2:	2301      	movs	r3, #1
 800bac4:	4652      	mov	r2, sl
 800bac6:	4649      	mov	r1, r9
 800bac8:	4638      	mov	r0, r7
 800baca:	47c0      	blx	r8
 800bacc:	3001      	adds	r0, #1
 800bace:	d103      	bne.n	800bad8 <_printf_common+0xac>
 800bad0:	f04f 30ff 	mov.w	r0, #4294967295
 800bad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bad8:	3501      	adds	r5, #1
 800bada:	e7c6      	b.n	800ba6a <_printf_common+0x3e>
 800badc:	18e1      	adds	r1, r4, r3
 800bade:	1c5a      	adds	r2, r3, #1
 800bae0:	2030      	movs	r0, #48	; 0x30
 800bae2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bae6:	4422      	add	r2, r4
 800bae8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800baec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800baf0:	3302      	adds	r3, #2
 800baf2:	e7c7      	b.n	800ba84 <_printf_common+0x58>
 800baf4:	2301      	movs	r3, #1
 800baf6:	4622      	mov	r2, r4
 800baf8:	4649      	mov	r1, r9
 800bafa:	4638      	mov	r0, r7
 800bafc:	47c0      	blx	r8
 800bafe:	3001      	adds	r0, #1
 800bb00:	d0e6      	beq.n	800bad0 <_printf_common+0xa4>
 800bb02:	3601      	adds	r6, #1
 800bb04:	e7d9      	b.n	800baba <_printf_common+0x8e>
	...

0800bb08 <_printf_i>:
 800bb08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb0c:	7e0f      	ldrb	r7, [r1, #24]
 800bb0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb10:	2f78      	cmp	r7, #120	; 0x78
 800bb12:	4691      	mov	r9, r2
 800bb14:	4680      	mov	r8, r0
 800bb16:	460c      	mov	r4, r1
 800bb18:	469a      	mov	sl, r3
 800bb1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb1e:	d807      	bhi.n	800bb30 <_printf_i+0x28>
 800bb20:	2f62      	cmp	r7, #98	; 0x62
 800bb22:	d80a      	bhi.n	800bb3a <_printf_i+0x32>
 800bb24:	2f00      	cmp	r7, #0
 800bb26:	f000 80d4 	beq.w	800bcd2 <_printf_i+0x1ca>
 800bb2a:	2f58      	cmp	r7, #88	; 0x58
 800bb2c:	f000 80c0 	beq.w	800bcb0 <_printf_i+0x1a8>
 800bb30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb38:	e03a      	b.n	800bbb0 <_printf_i+0xa8>
 800bb3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb3e:	2b15      	cmp	r3, #21
 800bb40:	d8f6      	bhi.n	800bb30 <_printf_i+0x28>
 800bb42:	a101      	add	r1, pc, #4	; (adr r1, 800bb48 <_printf_i+0x40>)
 800bb44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb48:	0800bba1 	.word	0x0800bba1
 800bb4c:	0800bbb5 	.word	0x0800bbb5
 800bb50:	0800bb31 	.word	0x0800bb31
 800bb54:	0800bb31 	.word	0x0800bb31
 800bb58:	0800bb31 	.word	0x0800bb31
 800bb5c:	0800bb31 	.word	0x0800bb31
 800bb60:	0800bbb5 	.word	0x0800bbb5
 800bb64:	0800bb31 	.word	0x0800bb31
 800bb68:	0800bb31 	.word	0x0800bb31
 800bb6c:	0800bb31 	.word	0x0800bb31
 800bb70:	0800bb31 	.word	0x0800bb31
 800bb74:	0800bcb9 	.word	0x0800bcb9
 800bb78:	0800bbe1 	.word	0x0800bbe1
 800bb7c:	0800bc73 	.word	0x0800bc73
 800bb80:	0800bb31 	.word	0x0800bb31
 800bb84:	0800bb31 	.word	0x0800bb31
 800bb88:	0800bcdb 	.word	0x0800bcdb
 800bb8c:	0800bb31 	.word	0x0800bb31
 800bb90:	0800bbe1 	.word	0x0800bbe1
 800bb94:	0800bb31 	.word	0x0800bb31
 800bb98:	0800bb31 	.word	0x0800bb31
 800bb9c:	0800bc7b 	.word	0x0800bc7b
 800bba0:	682b      	ldr	r3, [r5, #0]
 800bba2:	1d1a      	adds	r2, r3, #4
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	602a      	str	r2, [r5, #0]
 800bba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	e09f      	b.n	800bcf4 <_printf_i+0x1ec>
 800bbb4:	6820      	ldr	r0, [r4, #0]
 800bbb6:	682b      	ldr	r3, [r5, #0]
 800bbb8:	0607      	lsls	r7, r0, #24
 800bbba:	f103 0104 	add.w	r1, r3, #4
 800bbbe:	6029      	str	r1, [r5, #0]
 800bbc0:	d501      	bpl.n	800bbc6 <_printf_i+0xbe>
 800bbc2:	681e      	ldr	r6, [r3, #0]
 800bbc4:	e003      	b.n	800bbce <_printf_i+0xc6>
 800bbc6:	0646      	lsls	r6, r0, #25
 800bbc8:	d5fb      	bpl.n	800bbc2 <_printf_i+0xba>
 800bbca:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bbce:	2e00      	cmp	r6, #0
 800bbd0:	da03      	bge.n	800bbda <_printf_i+0xd2>
 800bbd2:	232d      	movs	r3, #45	; 0x2d
 800bbd4:	4276      	negs	r6, r6
 800bbd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbda:	485a      	ldr	r0, [pc, #360]	; (800bd44 <_printf_i+0x23c>)
 800bbdc:	230a      	movs	r3, #10
 800bbde:	e012      	b.n	800bc06 <_printf_i+0xfe>
 800bbe0:	682b      	ldr	r3, [r5, #0]
 800bbe2:	6820      	ldr	r0, [r4, #0]
 800bbe4:	1d19      	adds	r1, r3, #4
 800bbe6:	6029      	str	r1, [r5, #0]
 800bbe8:	0605      	lsls	r5, r0, #24
 800bbea:	d501      	bpl.n	800bbf0 <_printf_i+0xe8>
 800bbec:	681e      	ldr	r6, [r3, #0]
 800bbee:	e002      	b.n	800bbf6 <_printf_i+0xee>
 800bbf0:	0641      	lsls	r1, r0, #25
 800bbf2:	d5fb      	bpl.n	800bbec <_printf_i+0xe4>
 800bbf4:	881e      	ldrh	r6, [r3, #0]
 800bbf6:	4853      	ldr	r0, [pc, #332]	; (800bd44 <_printf_i+0x23c>)
 800bbf8:	2f6f      	cmp	r7, #111	; 0x6f
 800bbfa:	bf0c      	ite	eq
 800bbfc:	2308      	moveq	r3, #8
 800bbfe:	230a      	movne	r3, #10
 800bc00:	2100      	movs	r1, #0
 800bc02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc06:	6865      	ldr	r5, [r4, #4]
 800bc08:	60a5      	str	r5, [r4, #8]
 800bc0a:	2d00      	cmp	r5, #0
 800bc0c:	bfa2      	ittt	ge
 800bc0e:	6821      	ldrge	r1, [r4, #0]
 800bc10:	f021 0104 	bicge.w	r1, r1, #4
 800bc14:	6021      	strge	r1, [r4, #0]
 800bc16:	b90e      	cbnz	r6, 800bc1c <_printf_i+0x114>
 800bc18:	2d00      	cmp	r5, #0
 800bc1a:	d04b      	beq.n	800bcb4 <_printf_i+0x1ac>
 800bc1c:	4615      	mov	r5, r2
 800bc1e:	fbb6 f1f3 	udiv	r1, r6, r3
 800bc22:	fb03 6711 	mls	r7, r3, r1, r6
 800bc26:	5dc7      	ldrb	r7, [r0, r7]
 800bc28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc2c:	4637      	mov	r7, r6
 800bc2e:	42bb      	cmp	r3, r7
 800bc30:	460e      	mov	r6, r1
 800bc32:	d9f4      	bls.n	800bc1e <_printf_i+0x116>
 800bc34:	2b08      	cmp	r3, #8
 800bc36:	d10b      	bne.n	800bc50 <_printf_i+0x148>
 800bc38:	6823      	ldr	r3, [r4, #0]
 800bc3a:	07de      	lsls	r6, r3, #31
 800bc3c:	d508      	bpl.n	800bc50 <_printf_i+0x148>
 800bc3e:	6923      	ldr	r3, [r4, #16]
 800bc40:	6861      	ldr	r1, [r4, #4]
 800bc42:	4299      	cmp	r1, r3
 800bc44:	bfde      	ittt	le
 800bc46:	2330      	movle	r3, #48	; 0x30
 800bc48:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bc50:	1b52      	subs	r2, r2, r5
 800bc52:	6122      	str	r2, [r4, #16]
 800bc54:	f8cd a000 	str.w	sl, [sp]
 800bc58:	464b      	mov	r3, r9
 800bc5a:	aa03      	add	r2, sp, #12
 800bc5c:	4621      	mov	r1, r4
 800bc5e:	4640      	mov	r0, r8
 800bc60:	f7ff fee4 	bl	800ba2c <_printf_common>
 800bc64:	3001      	adds	r0, #1
 800bc66:	d14a      	bne.n	800bcfe <_printf_i+0x1f6>
 800bc68:	f04f 30ff 	mov.w	r0, #4294967295
 800bc6c:	b004      	add	sp, #16
 800bc6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc72:	6823      	ldr	r3, [r4, #0]
 800bc74:	f043 0320 	orr.w	r3, r3, #32
 800bc78:	6023      	str	r3, [r4, #0]
 800bc7a:	4833      	ldr	r0, [pc, #204]	; (800bd48 <_printf_i+0x240>)
 800bc7c:	2778      	movs	r7, #120	; 0x78
 800bc7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bc82:	6823      	ldr	r3, [r4, #0]
 800bc84:	6829      	ldr	r1, [r5, #0]
 800bc86:	061f      	lsls	r7, r3, #24
 800bc88:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc8c:	d402      	bmi.n	800bc94 <_printf_i+0x18c>
 800bc8e:	065f      	lsls	r7, r3, #25
 800bc90:	bf48      	it	mi
 800bc92:	b2b6      	uxthmi	r6, r6
 800bc94:	07df      	lsls	r7, r3, #31
 800bc96:	bf48      	it	mi
 800bc98:	f043 0320 	orrmi.w	r3, r3, #32
 800bc9c:	6029      	str	r1, [r5, #0]
 800bc9e:	bf48      	it	mi
 800bca0:	6023      	strmi	r3, [r4, #0]
 800bca2:	b91e      	cbnz	r6, 800bcac <_printf_i+0x1a4>
 800bca4:	6823      	ldr	r3, [r4, #0]
 800bca6:	f023 0320 	bic.w	r3, r3, #32
 800bcaa:	6023      	str	r3, [r4, #0]
 800bcac:	2310      	movs	r3, #16
 800bcae:	e7a7      	b.n	800bc00 <_printf_i+0xf8>
 800bcb0:	4824      	ldr	r0, [pc, #144]	; (800bd44 <_printf_i+0x23c>)
 800bcb2:	e7e4      	b.n	800bc7e <_printf_i+0x176>
 800bcb4:	4615      	mov	r5, r2
 800bcb6:	e7bd      	b.n	800bc34 <_printf_i+0x12c>
 800bcb8:	682b      	ldr	r3, [r5, #0]
 800bcba:	6826      	ldr	r6, [r4, #0]
 800bcbc:	6961      	ldr	r1, [r4, #20]
 800bcbe:	1d18      	adds	r0, r3, #4
 800bcc0:	6028      	str	r0, [r5, #0]
 800bcc2:	0635      	lsls	r5, r6, #24
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	d501      	bpl.n	800bccc <_printf_i+0x1c4>
 800bcc8:	6019      	str	r1, [r3, #0]
 800bcca:	e002      	b.n	800bcd2 <_printf_i+0x1ca>
 800bccc:	0670      	lsls	r0, r6, #25
 800bcce:	d5fb      	bpl.n	800bcc8 <_printf_i+0x1c0>
 800bcd0:	8019      	strh	r1, [r3, #0]
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	6123      	str	r3, [r4, #16]
 800bcd6:	4615      	mov	r5, r2
 800bcd8:	e7bc      	b.n	800bc54 <_printf_i+0x14c>
 800bcda:	682b      	ldr	r3, [r5, #0]
 800bcdc:	1d1a      	adds	r2, r3, #4
 800bcde:	602a      	str	r2, [r5, #0]
 800bce0:	681d      	ldr	r5, [r3, #0]
 800bce2:	6862      	ldr	r2, [r4, #4]
 800bce4:	2100      	movs	r1, #0
 800bce6:	4628      	mov	r0, r5
 800bce8:	f7f4 faaa 	bl	8000240 <memchr>
 800bcec:	b108      	cbz	r0, 800bcf2 <_printf_i+0x1ea>
 800bcee:	1b40      	subs	r0, r0, r5
 800bcf0:	6060      	str	r0, [r4, #4]
 800bcf2:	6863      	ldr	r3, [r4, #4]
 800bcf4:	6123      	str	r3, [r4, #16]
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcfc:	e7aa      	b.n	800bc54 <_printf_i+0x14c>
 800bcfe:	6923      	ldr	r3, [r4, #16]
 800bd00:	462a      	mov	r2, r5
 800bd02:	4649      	mov	r1, r9
 800bd04:	4640      	mov	r0, r8
 800bd06:	47d0      	blx	sl
 800bd08:	3001      	adds	r0, #1
 800bd0a:	d0ad      	beq.n	800bc68 <_printf_i+0x160>
 800bd0c:	6823      	ldr	r3, [r4, #0]
 800bd0e:	079b      	lsls	r3, r3, #30
 800bd10:	d413      	bmi.n	800bd3a <_printf_i+0x232>
 800bd12:	68e0      	ldr	r0, [r4, #12]
 800bd14:	9b03      	ldr	r3, [sp, #12]
 800bd16:	4298      	cmp	r0, r3
 800bd18:	bfb8      	it	lt
 800bd1a:	4618      	movlt	r0, r3
 800bd1c:	e7a6      	b.n	800bc6c <_printf_i+0x164>
 800bd1e:	2301      	movs	r3, #1
 800bd20:	4632      	mov	r2, r6
 800bd22:	4649      	mov	r1, r9
 800bd24:	4640      	mov	r0, r8
 800bd26:	47d0      	blx	sl
 800bd28:	3001      	adds	r0, #1
 800bd2a:	d09d      	beq.n	800bc68 <_printf_i+0x160>
 800bd2c:	3501      	adds	r5, #1
 800bd2e:	68e3      	ldr	r3, [r4, #12]
 800bd30:	9903      	ldr	r1, [sp, #12]
 800bd32:	1a5b      	subs	r3, r3, r1
 800bd34:	42ab      	cmp	r3, r5
 800bd36:	dcf2      	bgt.n	800bd1e <_printf_i+0x216>
 800bd38:	e7eb      	b.n	800bd12 <_printf_i+0x20a>
 800bd3a:	2500      	movs	r5, #0
 800bd3c:	f104 0619 	add.w	r6, r4, #25
 800bd40:	e7f5      	b.n	800bd2e <_printf_i+0x226>
 800bd42:	bf00      	nop
 800bd44:	0800c39e 	.word	0x0800c39e
 800bd48:	0800c3af 	.word	0x0800c3af

0800bd4c <memmove>:
 800bd4c:	4288      	cmp	r0, r1
 800bd4e:	b510      	push	{r4, lr}
 800bd50:	eb01 0402 	add.w	r4, r1, r2
 800bd54:	d902      	bls.n	800bd5c <memmove+0x10>
 800bd56:	4284      	cmp	r4, r0
 800bd58:	4623      	mov	r3, r4
 800bd5a:	d807      	bhi.n	800bd6c <memmove+0x20>
 800bd5c:	1e43      	subs	r3, r0, #1
 800bd5e:	42a1      	cmp	r1, r4
 800bd60:	d008      	beq.n	800bd74 <memmove+0x28>
 800bd62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd6a:	e7f8      	b.n	800bd5e <memmove+0x12>
 800bd6c:	4402      	add	r2, r0
 800bd6e:	4601      	mov	r1, r0
 800bd70:	428a      	cmp	r2, r1
 800bd72:	d100      	bne.n	800bd76 <memmove+0x2a>
 800bd74:	bd10      	pop	{r4, pc}
 800bd76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd7e:	e7f7      	b.n	800bd70 <memmove+0x24>

0800bd80 <_sbrk_r>:
 800bd80:	b538      	push	{r3, r4, r5, lr}
 800bd82:	4d06      	ldr	r5, [pc, #24]	; (800bd9c <_sbrk_r+0x1c>)
 800bd84:	2300      	movs	r3, #0
 800bd86:	4604      	mov	r4, r0
 800bd88:	4608      	mov	r0, r1
 800bd8a:	602b      	str	r3, [r5, #0]
 800bd8c:	f7f9 f806 	bl	8004d9c <_sbrk>
 800bd90:	1c43      	adds	r3, r0, #1
 800bd92:	d102      	bne.n	800bd9a <_sbrk_r+0x1a>
 800bd94:	682b      	ldr	r3, [r5, #0]
 800bd96:	b103      	cbz	r3, 800bd9a <_sbrk_r+0x1a>
 800bd98:	6023      	str	r3, [r4, #0]
 800bd9a:	bd38      	pop	{r3, r4, r5, pc}
 800bd9c:	200006b4 	.word	0x200006b4

0800bda0 <memcpy>:
 800bda0:	440a      	add	r2, r1
 800bda2:	4291      	cmp	r1, r2
 800bda4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bda8:	d100      	bne.n	800bdac <memcpy+0xc>
 800bdaa:	4770      	bx	lr
 800bdac:	b510      	push	{r4, lr}
 800bdae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdb6:	4291      	cmp	r1, r2
 800bdb8:	d1f9      	bne.n	800bdae <memcpy+0xe>
 800bdba:	bd10      	pop	{r4, pc}

0800bdbc <_realloc_r>:
 800bdbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc0:	4680      	mov	r8, r0
 800bdc2:	4614      	mov	r4, r2
 800bdc4:	460e      	mov	r6, r1
 800bdc6:	b921      	cbnz	r1, 800bdd2 <_realloc_r+0x16>
 800bdc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdcc:	4611      	mov	r1, r2
 800bdce:	f7ff bc49 	b.w	800b664 <_malloc_r>
 800bdd2:	b92a      	cbnz	r2, 800bde0 <_realloc_r+0x24>
 800bdd4:	f7ff fbda 	bl	800b58c <_free_r>
 800bdd8:	4625      	mov	r5, r4
 800bdda:	4628      	mov	r0, r5
 800bddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bde0:	f000 f81b 	bl	800be1a <_malloc_usable_size_r>
 800bde4:	4284      	cmp	r4, r0
 800bde6:	4607      	mov	r7, r0
 800bde8:	d802      	bhi.n	800bdf0 <_realloc_r+0x34>
 800bdea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bdee:	d812      	bhi.n	800be16 <_realloc_r+0x5a>
 800bdf0:	4621      	mov	r1, r4
 800bdf2:	4640      	mov	r0, r8
 800bdf4:	f7ff fc36 	bl	800b664 <_malloc_r>
 800bdf8:	4605      	mov	r5, r0
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	d0ed      	beq.n	800bdda <_realloc_r+0x1e>
 800bdfe:	42bc      	cmp	r4, r7
 800be00:	4622      	mov	r2, r4
 800be02:	4631      	mov	r1, r6
 800be04:	bf28      	it	cs
 800be06:	463a      	movcs	r2, r7
 800be08:	f7ff ffca 	bl	800bda0 <memcpy>
 800be0c:	4631      	mov	r1, r6
 800be0e:	4640      	mov	r0, r8
 800be10:	f7ff fbbc 	bl	800b58c <_free_r>
 800be14:	e7e1      	b.n	800bdda <_realloc_r+0x1e>
 800be16:	4635      	mov	r5, r6
 800be18:	e7df      	b.n	800bdda <_realloc_r+0x1e>

0800be1a <_malloc_usable_size_r>:
 800be1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be1e:	1f18      	subs	r0, r3, #4
 800be20:	2b00      	cmp	r3, #0
 800be22:	bfbc      	itt	lt
 800be24:	580b      	ldrlt	r3, [r1, r0]
 800be26:	18c0      	addlt	r0, r0, r3
 800be28:	4770      	bx	lr
 800be2a:	0000      	movs	r0, r0
 800be2c:	0000      	movs	r0, r0
	...

0800be30 <floor>:
 800be30:	ec51 0b10 	vmov	r0, r1, d0
 800be34:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800be38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be3c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800be40:	2e13      	cmp	r6, #19
 800be42:	ee10 5a10 	vmov	r5, s0
 800be46:	ee10 8a10 	vmov	r8, s0
 800be4a:	460c      	mov	r4, r1
 800be4c:	dc31      	bgt.n	800beb2 <floor+0x82>
 800be4e:	2e00      	cmp	r6, #0
 800be50:	da14      	bge.n	800be7c <floor+0x4c>
 800be52:	a333      	add	r3, pc, #204	; (adr r3, 800bf20 <floor+0xf0>)
 800be54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be58:	f7f4 fa48 	bl	80002ec <__adddf3>
 800be5c:	2200      	movs	r2, #0
 800be5e:	2300      	movs	r3, #0
 800be60:	f7f4 fe8a 	bl	8000b78 <__aeabi_dcmpgt>
 800be64:	b138      	cbz	r0, 800be76 <floor+0x46>
 800be66:	2c00      	cmp	r4, #0
 800be68:	da53      	bge.n	800bf12 <floor+0xe2>
 800be6a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800be6e:	4325      	orrs	r5, r4
 800be70:	d052      	beq.n	800bf18 <floor+0xe8>
 800be72:	4c2d      	ldr	r4, [pc, #180]	; (800bf28 <floor+0xf8>)
 800be74:	2500      	movs	r5, #0
 800be76:	4621      	mov	r1, r4
 800be78:	4628      	mov	r0, r5
 800be7a:	e024      	b.n	800bec6 <floor+0x96>
 800be7c:	4f2b      	ldr	r7, [pc, #172]	; (800bf2c <floor+0xfc>)
 800be7e:	4137      	asrs	r7, r6
 800be80:	ea01 0307 	and.w	r3, r1, r7
 800be84:	4303      	orrs	r3, r0
 800be86:	d01e      	beq.n	800bec6 <floor+0x96>
 800be88:	a325      	add	r3, pc, #148	; (adr r3, 800bf20 <floor+0xf0>)
 800be8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8e:	f7f4 fa2d 	bl	80002ec <__adddf3>
 800be92:	2200      	movs	r2, #0
 800be94:	2300      	movs	r3, #0
 800be96:	f7f4 fe6f 	bl	8000b78 <__aeabi_dcmpgt>
 800be9a:	2800      	cmp	r0, #0
 800be9c:	d0eb      	beq.n	800be76 <floor+0x46>
 800be9e:	2c00      	cmp	r4, #0
 800bea0:	bfbe      	ittt	lt
 800bea2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bea6:	4133      	asrlt	r3, r6
 800bea8:	18e4      	addlt	r4, r4, r3
 800beaa:	ea24 0407 	bic.w	r4, r4, r7
 800beae:	2500      	movs	r5, #0
 800beb0:	e7e1      	b.n	800be76 <floor+0x46>
 800beb2:	2e33      	cmp	r6, #51	; 0x33
 800beb4:	dd0b      	ble.n	800bece <floor+0x9e>
 800beb6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800beba:	d104      	bne.n	800bec6 <floor+0x96>
 800bebc:	ee10 2a10 	vmov	r2, s0
 800bec0:	460b      	mov	r3, r1
 800bec2:	f7f4 fa13 	bl	80002ec <__adddf3>
 800bec6:	ec41 0b10 	vmov	d0, r0, r1
 800beca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bece:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800bed2:	f04f 37ff 	mov.w	r7, #4294967295
 800bed6:	40df      	lsrs	r7, r3
 800bed8:	4238      	tst	r0, r7
 800beda:	d0f4      	beq.n	800bec6 <floor+0x96>
 800bedc:	a310      	add	r3, pc, #64	; (adr r3, 800bf20 <floor+0xf0>)
 800bede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee2:	f7f4 fa03 	bl	80002ec <__adddf3>
 800bee6:	2200      	movs	r2, #0
 800bee8:	2300      	movs	r3, #0
 800beea:	f7f4 fe45 	bl	8000b78 <__aeabi_dcmpgt>
 800beee:	2800      	cmp	r0, #0
 800bef0:	d0c1      	beq.n	800be76 <floor+0x46>
 800bef2:	2c00      	cmp	r4, #0
 800bef4:	da0a      	bge.n	800bf0c <floor+0xdc>
 800bef6:	2e14      	cmp	r6, #20
 800bef8:	d101      	bne.n	800befe <floor+0xce>
 800befa:	3401      	adds	r4, #1
 800befc:	e006      	b.n	800bf0c <floor+0xdc>
 800befe:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bf02:	2301      	movs	r3, #1
 800bf04:	40b3      	lsls	r3, r6
 800bf06:	441d      	add	r5, r3
 800bf08:	45a8      	cmp	r8, r5
 800bf0a:	d8f6      	bhi.n	800befa <floor+0xca>
 800bf0c:	ea25 0507 	bic.w	r5, r5, r7
 800bf10:	e7b1      	b.n	800be76 <floor+0x46>
 800bf12:	2500      	movs	r5, #0
 800bf14:	462c      	mov	r4, r5
 800bf16:	e7ae      	b.n	800be76 <floor+0x46>
 800bf18:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bf1c:	e7ab      	b.n	800be76 <floor+0x46>
 800bf1e:	bf00      	nop
 800bf20:	8800759c 	.word	0x8800759c
 800bf24:	7e37e43c 	.word	0x7e37e43c
 800bf28:	bff00000 	.word	0xbff00000
 800bf2c:	000fffff 	.word	0x000fffff

0800bf30 <round>:
 800bf30:	ec53 2b10 	vmov	r2, r3, d0
 800bf34:	b570      	push	{r4, r5, r6, lr}
 800bf36:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800bf3a:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800bf3e:	2813      	cmp	r0, #19
 800bf40:	ee10 5a10 	vmov	r5, s0
 800bf44:	4619      	mov	r1, r3
 800bf46:	dc18      	bgt.n	800bf7a <round+0x4a>
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	da09      	bge.n	800bf60 <round+0x30>
 800bf4c:	3001      	adds	r0, #1
 800bf4e:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800bf52:	d103      	bne.n	800bf5c <round+0x2c>
 800bf54:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800bf58:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	e02a      	b.n	800bfb6 <round+0x86>
 800bf60:	4c16      	ldr	r4, [pc, #88]	; (800bfbc <round+0x8c>)
 800bf62:	4104      	asrs	r4, r0
 800bf64:	ea03 0604 	and.w	r6, r3, r4
 800bf68:	4316      	orrs	r6, r2
 800bf6a:	d011      	beq.n	800bf90 <round+0x60>
 800bf6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bf70:	4103      	asrs	r3, r0
 800bf72:	440b      	add	r3, r1
 800bf74:	ea23 0104 	bic.w	r1, r3, r4
 800bf78:	e7f0      	b.n	800bf5c <round+0x2c>
 800bf7a:	2833      	cmp	r0, #51	; 0x33
 800bf7c:	dd0b      	ble.n	800bf96 <round+0x66>
 800bf7e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800bf82:	d105      	bne.n	800bf90 <round+0x60>
 800bf84:	ee10 0a10 	vmov	r0, s0
 800bf88:	f7f4 f9b0 	bl	80002ec <__adddf3>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	460b      	mov	r3, r1
 800bf90:	ec43 2b10 	vmov	d0, r2, r3
 800bf94:	bd70      	pop	{r4, r5, r6, pc}
 800bf96:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800bf9a:	f04f 34ff 	mov.w	r4, #4294967295
 800bf9e:	40f4      	lsrs	r4, r6
 800bfa0:	4214      	tst	r4, r2
 800bfa2:	d0f5      	beq.n	800bf90 <round+0x60>
 800bfa4:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	4083      	lsls	r3, r0
 800bfac:	195b      	adds	r3, r3, r5
 800bfae:	bf28      	it	cs
 800bfb0:	3101      	addcs	r1, #1
 800bfb2:	ea23 0304 	bic.w	r3, r3, r4
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	460b      	mov	r3, r1
 800bfba:	e7e9      	b.n	800bf90 <round+0x60>
 800bfbc:	000fffff 	.word	0x000fffff

0800bfc0 <_init>:
 800bfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc2:	bf00      	nop
 800bfc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfc6:	bc08      	pop	{r3}
 800bfc8:	469e      	mov	lr, r3
 800bfca:	4770      	bx	lr

0800bfcc <_fini>:
 800bfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfce:	bf00      	nop
 800bfd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfd2:	bc08      	pop	{r3}
 800bfd4:	469e      	mov	lr, r3
 800bfd6:	4770      	bx	lr
