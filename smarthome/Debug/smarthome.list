
smarthome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099c0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08009b90  08009b90  0000ab90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e88  08009e88  0000b164  2**0
                  CONTENTS
  4 .ARM          00000008  08009e88  08009e88  0000ae88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e90  08009e90  0000b164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e90  08009e90  0000ae90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e94  08009e94  0000ae94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08009e98  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  20000168  08009ffc  0000b168  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  08009ffc  0000b5f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e45  00000000  00000000  0000b194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003835  00000000  00000000  00023fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  00027810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001053  00000000  00000000  00028cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004d60  00000000  00000000  00029d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ccd8  00000000  00000000  0002ea8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f69a4  00000000  00000000  0004b763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142107  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e48  00000000  00000000  0014214c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00147f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000168 	.word	0x20000168
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009b78 	.word	0x08009b78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000016c 	.word	0x2000016c
 800020c:	08009b78 	.word	0x08009b78

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b96a 	b.w	8000f48 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	460c      	mov	r4, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14e      	bne.n	8000d36 <__udivmoddi4+0xaa>
 8000c98:	4694      	mov	ip, r2
 8000c9a:	458c      	cmp	ip, r1
 8000c9c:	4686      	mov	lr, r0
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	d962      	bls.n	8000d6a <__udivmoddi4+0xde>
 8000ca4:	b14a      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	4091      	lsls	r1, r2
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb4:	4319      	orrs	r1, r3
 8000cb6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f f68c 	uxth.w	r6, ip
 8000cc2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cca:	fb07 1114 	mls	r1, r7, r4, r1
 8000cce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd2:	fb04 f106 	mul.w	r1, r4, r6
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	d90a      	bls.n	8000cf0 <__udivmoddi4+0x64>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ce2:	f080 8112 	bcs.w	8000f0a <__udivmoddi4+0x27e>
 8000ce6:	4299      	cmp	r1, r3
 8000ce8:	f240 810f 	bls.w	8000f0a <__udivmoddi4+0x27e>
 8000cec:	3c02      	subs	r4, #2
 8000cee:	4463      	add	r3, ip
 8000cf0:	1a59      	subs	r1, r3, r1
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d02:	fb00 f606 	mul.w	r6, r0, r6
 8000d06:	429e      	cmp	r6, r3
 8000d08:	d90a      	bls.n	8000d20 <__udivmoddi4+0x94>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d12:	f080 80fc 	bcs.w	8000f0e <__udivmoddi4+0x282>
 8000d16:	429e      	cmp	r6, r3
 8000d18:	f240 80f9 	bls.w	8000f0e <__udivmoddi4+0x282>
 8000d1c:	4463      	add	r3, ip
 8000d1e:	3802      	subs	r0, #2
 8000d20:	1b9b      	subs	r3, r3, r6
 8000d22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d26:	2100      	movs	r1, #0
 8000d28:	b11d      	cbz	r5, 8000d32 <__udivmoddi4+0xa6>
 8000d2a:	40d3      	lsrs	r3, r2
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d905      	bls.n	8000d46 <__udivmoddi4+0xba>
 8000d3a:	b10d      	cbz	r5, 8000d40 <__udivmoddi4+0xb4>
 8000d3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d40:	2100      	movs	r1, #0
 8000d42:	4608      	mov	r0, r1
 8000d44:	e7f5      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000d46:	fab3 f183 	clz	r1, r3
 8000d4a:	2900      	cmp	r1, #0
 8000d4c:	d146      	bne.n	8000ddc <__udivmoddi4+0x150>
 8000d4e:	42a3      	cmp	r3, r4
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xcc>
 8000d52:	4290      	cmp	r0, r2
 8000d54:	f0c0 80f0 	bcc.w	8000f38 <__udivmoddi4+0x2ac>
 8000d58:	1a86      	subs	r6, r0, r2
 8000d5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	2d00      	cmp	r5, #0
 8000d62:	d0e6      	beq.n	8000d32 <__udivmoddi4+0xa6>
 8000d64:	e9c5 6300 	strd	r6, r3, [r5]
 8000d68:	e7e3      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000d6a:	2a00      	cmp	r2, #0
 8000d6c:	f040 8090 	bne.w	8000e90 <__udivmoddi4+0x204>
 8000d70:	eba1 040c 	sub.w	r4, r1, ip
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	fa1f f78c 	uxth.w	r7, ip
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d86:	fb08 4416 	mls	r4, r8, r6, r4
 8000d8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8e:	fb07 f006 	mul.w	r0, r7, r6
 8000d92:	4298      	cmp	r0, r3
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x11c>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x11a>
 8000da0:	4298      	cmp	r0, r3
 8000da2:	f200 80cd 	bhi.w	8000f40 <__udivmoddi4+0x2b4>
 8000da6:	4626      	mov	r6, r4
 8000da8:	1a1c      	subs	r4, r3, r0
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000db2:	fb08 4410 	mls	r4, r8, r0, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb00 f707 	mul.w	r7, r0, r7
 8000dbe:	429f      	cmp	r7, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x148>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x146>
 8000dcc:	429f      	cmp	r7, r3
 8000dce:	f200 80b0 	bhi.w	8000f32 <__udivmoddi4+0x2a6>
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	1bdb      	subs	r3, r3, r7
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0x9c>
 8000ddc:	f1c1 0620 	rsb	r6, r1, #32
 8000de0:	408b      	lsls	r3, r1
 8000de2:	fa22 f706 	lsr.w	r7, r2, r6
 8000de6:	431f      	orrs	r7, r3
 8000de8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dec:	fa04 f301 	lsl.w	r3, r4, r1
 8000df0:	ea43 030c 	orr.w	r3, r3, ip
 8000df4:	40f4      	lsrs	r4, r6
 8000df6:	fa00 f801 	lsl.w	r8, r0, r1
 8000dfa:	0c38      	lsrs	r0, r7, #16
 8000dfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e00:	fbb4 fef0 	udiv	lr, r4, r0
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	fb00 441e 	mls	r4, r0, lr, r4
 8000e0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e10:	fb0e f90c 	mul.w	r9, lr, ip
 8000e14:	45a1      	cmp	r9, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	d90a      	bls.n	8000e32 <__udivmoddi4+0x1a6>
 8000e1c:	193c      	adds	r4, r7, r4
 8000e1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e22:	f080 8084 	bcs.w	8000f2e <__udivmoddi4+0x2a2>
 8000e26:	45a1      	cmp	r9, r4
 8000e28:	f240 8081 	bls.w	8000f2e <__udivmoddi4+0x2a2>
 8000e2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e30:	443c      	add	r4, r7
 8000e32:	eba4 0409 	sub.w	r4, r4, r9
 8000e36:	fa1f f983 	uxth.w	r9, r3
 8000e3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e4a:	45a4      	cmp	ip, r4
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x1d2>
 8000e4e:	193c      	adds	r4, r7, r4
 8000e50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e54:	d267      	bcs.n	8000f26 <__udivmoddi4+0x29a>
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d965      	bls.n	8000f26 <__udivmoddi4+0x29a>
 8000e5a:	3b02      	subs	r3, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e62:	fba0 9302 	umull	r9, r3, r0, r2
 8000e66:	eba4 040c 	sub.w	r4, r4, ip
 8000e6a:	429c      	cmp	r4, r3
 8000e6c:	46ce      	mov	lr, r9
 8000e6e:	469c      	mov	ip, r3
 8000e70:	d351      	bcc.n	8000f16 <__udivmoddi4+0x28a>
 8000e72:	d04e      	beq.n	8000f12 <__udivmoddi4+0x286>
 8000e74:	b155      	cbz	r5, 8000e8c <__udivmoddi4+0x200>
 8000e76:	ebb8 030e 	subs.w	r3, r8, lr
 8000e7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e82:	40cb      	lsrs	r3, r1
 8000e84:	431e      	orrs	r6, r3
 8000e86:	40cc      	lsrs	r4, r1
 8000e88:	e9c5 6400 	strd	r6, r4, [r5]
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	e750      	b.n	8000d32 <__udivmoddi4+0xa6>
 8000e90:	f1c2 0320 	rsb	r3, r2, #32
 8000e94:	fa20 f103 	lsr.w	r1, r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ea0:	4094      	lsls	r4, r2
 8000ea2:	430c      	orrs	r4, r1
 8000ea4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eac:	fa1f f78c 	uxth.w	r7, ip
 8000eb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb8:	0c23      	lsrs	r3, r4, #16
 8000eba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ebe:	fb00 f107 	mul.w	r1, r0, r7
 8000ec2:	4299      	cmp	r1, r3
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x24c>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ece:	d22c      	bcs.n	8000f2a <__udivmoddi4+0x29e>
 8000ed0:	4299      	cmp	r1, r3
 8000ed2:	d92a      	bls.n	8000f2a <__udivmoddi4+0x29e>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1a5b      	subs	r3, r3, r1
 8000eda:	b2a4      	uxth	r4, r4
 8000edc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ee0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee8:	fb01 f307 	mul.w	r3, r1, r7
 8000eec:	42a3      	cmp	r3, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x276>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef8:	d213      	bcs.n	8000f22 <__udivmoddi4+0x296>
 8000efa:	42a3      	cmp	r3, r4
 8000efc:	d911      	bls.n	8000f22 <__udivmoddi4+0x296>
 8000efe:	3902      	subs	r1, #2
 8000f00:	4464      	add	r4, ip
 8000f02:	1ae4      	subs	r4, r4, r3
 8000f04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f08:	e739      	b.n	8000d7e <__udivmoddi4+0xf2>
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	e6f0      	b.n	8000cf0 <__udivmoddi4+0x64>
 8000f0e:	4608      	mov	r0, r1
 8000f10:	e706      	b.n	8000d20 <__udivmoddi4+0x94>
 8000f12:	45c8      	cmp	r8, r9
 8000f14:	d2ae      	bcs.n	8000e74 <__udivmoddi4+0x1e8>
 8000f16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1e:	3801      	subs	r0, #1
 8000f20:	e7a8      	b.n	8000e74 <__udivmoddi4+0x1e8>
 8000f22:	4631      	mov	r1, r6
 8000f24:	e7ed      	b.n	8000f02 <__udivmoddi4+0x276>
 8000f26:	4603      	mov	r3, r0
 8000f28:	e799      	b.n	8000e5e <__udivmoddi4+0x1d2>
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	e7d4      	b.n	8000ed8 <__udivmoddi4+0x24c>
 8000f2e:	46d6      	mov	lr, sl
 8000f30:	e77f      	b.n	8000e32 <__udivmoddi4+0x1a6>
 8000f32:	4463      	add	r3, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	e74d      	b.n	8000dd4 <__udivmoddi4+0x148>
 8000f38:	4606      	mov	r6, r0
 8000f3a:	4623      	mov	r3, r4
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e70f      	b.n	8000d60 <__udivmoddi4+0xd4>
 8000f40:	3e02      	subs	r6, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	e730      	b.n	8000da8 <__udivmoddi4+0x11c>
 8000f46:	bf00      	nop

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 fa47 	bl	80013e8 <null_ptr_check>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8000f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d117      	bne.n	8000f96 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	20d0      	movs	r0, #208	@ 0xd0
 8000f6e:	f000 f818 	bl	8000fa2 <bmp2_get_regs>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10b      	bne.n	8000f96 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b58      	cmp	r3, #88	@ 0x58
 8000f84:	d105      	bne.n	8000f92 <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 fa79 	bl	800147e <get_calib_param>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	73fb      	strb	r3, [r7, #15]
 8000f90:	e001      	b.n	8000f96 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8000f92:	23fc      	movs	r3, #252	@ 0xfc
 8000f94:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000fa2:	b590      	push	{r4, r7, lr}
 8000fa4:	b087      	sub	sp, #28
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
 8000fac:	603b      	str	r3, [r7, #0]
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000fb2:	6838      	ldr	r0, [r7, #0]
 8000fb4:	f000 fa18 	bl	80013e8 <null_ptr_check>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8000fbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d11e      	bne.n	8001002 <bmp2_get_regs+0x60>
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d01b      	beq.n	8001002 <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	785b      	ldrb	r3, [r3, #1]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d103      	bne.n	8000fda <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fd8:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	68dc      	ldr	r4, [r3, #12]
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	7bf8      	ldrb	r0, [r7, #15]
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	68b9      	ldr	r1, [r7, #8]
 8000fe8:	47a0      	blx	r4
 8000fea:	4603      	mov	r3, r0
 8000fec:	461a      	mov	r2, r3
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d004      	beq.n	8001006 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 8000ffc:	23fe      	movs	r3, #254	@ 0xfe
 8000ffe:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001000:	e001      	b.n	8001006 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001002:	23ff      	movs	r3, #255	@ 0xff
 8001004:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001006:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800100a:	4618      	mov	r0, r3
 800100c:	371c      	adds	r7, #28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd90      	pop	{r4, r7, pc}

08001012 <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8001012:	b590      	push	{r4, r7, lr}
 8001014:	b08b      	sub	sp, #44	@ 0x2c
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b04      	cmp	r3, #4
 8001024:	d901      	bls.n	800102a <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8001026:	2304      	movs	r3, #4
 8001028:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 800102a:	6838      	ldr	r0, [r7, #0]
 800102c:	f000 f9dc 	bl	80013e8 <null_ptr_check>
 8001030:	4603      	mov	r3, r0
 8001032:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001036:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800103a:	2b00      	cmp	r3, #0
 800103c:	d150      	bne.n	80010e0 <bmp2_set_regs+0xce>
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d04d      	beq.n	80010e0 <bmp2_set_regs+0xce>
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d04a      	beq.n	80010e0 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d043      	beq.n	80010d8 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	785b      	ldrb	r3, [r3, #1]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d114      	bne.n	8001088 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800105e:	2300      	movs	r3, #0
 8001060:	77fb      	strb	r3, [r7, #31]
 8001062:	e00d      	b.n	8001080 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 8001064:	7ffb      	ldrb	r3, [r7, #31]
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	4413      	add	r3, r2
 800106a:	781a      	ldrb	r2, [r3, #0]
 800106c:	7ffb      	ldrb	r3, [r7, #31]
 800106e:	68f9      	ldr	r1, [r7, #12]
 8001070:	440b      	add	r3, r1
 8001072:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800107a:	7ffb      	ldrb	r3, [r7, #31]
 800107c:	3301      	adds	r3, #1
 800107e:	77fb      	strb	r3, [r7, #31]
 8001080:	7ffb      	ldrb	r3, [r7, #31]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	d8ed      	bhi.n	8001064 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d90b      	bls.n	80010a6 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 800108e:	f107 0114 	add.w	r1, r7, #20
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f000 f9c6 	bl	8001428 <interleave_data>
                temp_len = ((len * 2) - 1);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	3b01      	subs	r3, #1
 80010a2:	623b      	str	r3, [r7, #32]
 80010a4:	e001      	b.n	80010aa <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	691c      	ldr	r4, [r3, #16]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	7818      	ldrb	r0, [r3, #0]
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f107 0114 	add.w	r1, r7, #20
 80010ba:	6a3a      	ldr	r2, [r7, #32]
 80010bc:	47a0      	blx	r4
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00b      	beq.n	80010e8 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 80010d0:	23fe      	movs	r3, #254	@ 0xfe
 80010d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 80010d6:	e007      	b.n	80010e8 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 80010d8:	23fd      	movs	r3, #253	@ 0xfd
 80010da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 80010de:	e003      	b.n	80010e8 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80010e0:	23ff      	movs	r3, #255	@ 0xff
 80010e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80010e6:	e000      	b.n	80010ea <bmp2_set_regs+0xd8>
        if (len > 0)
 80010e8:	bf00      	nop
    }

    return rslt;
 80010ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	372c      	adds	r7, #44	@ 0x2c
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd90      	pop	{r4, r7, pc}

080010f6 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b084      	sub	sp, #16
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 80010fe:	23e0      	movs	r3, #224	@ 0xe0
 8001100:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 8001102:	23b6      	movs	r3, #182	@ 0xb6
 8001104:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001106:	f107 010d 	add.w	r1, r7, #13
 800110a:	f107 000e 	add.w	r0, r7, #14
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2201      	movs	r2, #1
 8001112:	f7ff ff7e 	bl	8001012 <bmp2_set_regs>
 8001116:	4603      	mov	r3, r0
 8001118:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b084      	sub	sp, #16
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001130:	2300      	movs	r3, #0
 8001132:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d02d      	beq.n	8001196 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 800113a:	f107 010c 	add.w	r1, r7, #12
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	2202      	movs	r2, #2
 8001142:	20f4      	movs	r0, #244	@ 0xf4
 8001144:	f7ff ff2d 	bl	8000fa2 <bmp2_get_regs>
 8001148:	4603      	mov	r3, r0
 800114a:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 800114c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d122      	bne.n	800119a <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8001154:	7b3b      	ldrb	r3, [r7, #12]
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	b2da      	uxtb	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 800115e:	7b3b      	ldrb	r3, [r7, #12]
 8001160:	109b      	asrs	r3, r3, #2
 8001162:	b2db      	uxtb	r3, r3
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	b2da      	uxtb	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 800116e:	7b7b      	ldrb	r3, [r7, #13]
 8001170:	095b      	lsrs	r3, r3, #5
 8001172:	b2da      	uxtb	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 8001178:	7b7b      	ldrb	r3, [r7, #13]
 800117a:	109b      	asrs	r3, r3, #2
 800117c:	b2db      	uxtb	r3, r3
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	b2da      	uxtb	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 8001188:	7b7b      	ldrb	r3, [r7, #13]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	b2da      	uxtb	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	715a      	strb	r2, [r3, #5]
 8001194:	e001      	b.n	800119a <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001196:	23ff      	movs	r3, #255	@ 0xff
 8001198:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	2000      	movs	r0, #0
 80011b6:	f000 f9fd 	bl	80015b4 <conf_sensor>
 80011ba:	4603      	mov	r3, r0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d01b      	beq.n	800120c <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 80011d4:	f107 010e 	add.w	r1, r7, #14
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	2201      	movs	r2, #1
 80011dc:	20f3      	movs	r0, #243	@ 0xf3
 80011de:	f7ff fee0 	bl	8000fa2 <bmp2_get_regs>
 80011e2:	4603      	mov	r3, r0
 80011e4:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d110      	bne.n	8001210 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 80011ee:	7bbb      	ldrb	r3, [r7, #14]
 80011f0:	10db      	asrs	r3, r3, #3
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 80011fe:	7bbb      	ldrb	r3, [r7, #14]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	b2da      	uxtb	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	705a      	strb	r2, [r3, #1]
 800120a:	e001      	b.n	8001210 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800120c:	23ff      	movs	r3, #255	@ 0xff
 800120e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001210:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
 8001228:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	68b9      	ldr	r1, [r7, #8]
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f9bf 	bl	80015b4 <conf_sensor>
 8001236:	4603      	mov	r3, r0
 8001238:	75fb      	strb	r3, [r7, #23]

    return rslt;
 800123a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	2300      	movs	r3, #0
 8001256:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d024      	beq.n	80012b2 <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8001268:	f107 0110 	add.w	r1, r7, #16
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	2206      	movs	r2, #6
 8001270:	20f7      	movs	r0, #247	@ 0xf7
 8001272:	f7ff fe96 	bl	8000fa2 <bmp2_get_regs>
 8001276:	4603      	mov	r3, r0
 8001278:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 800127a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d119      	bne.n	80012b6 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 8001282:	f107 0208 	add.w	r2, r7, #8
 8001286:	f107 0310 	add.w	r3, r7, #16
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f000 fab9 	bl	8001804 <parse_sensor_data>
 8001292:	4603      	mov	r3, r0
 8001294:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001296:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10b      	bne.n	80012b6 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 800129e:	f107 0308 	add.w	r3, r7, #8
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f80b 	bl	80012c2 <bmp2_compensate_data>
 80012ac:	4603      	mov	r3, r0
 80012ae:	75fb      	strb	r3, [r7, #23]
 80012b0:	e001      	b.n	80012b6 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012b2:	23ff      	movs	r3, #255	@ 0xff
 80012b4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f88a 	bl	80013e8 <null_ptr_check>
 80012d4:	4603      	mov	r3, r0
 80012d6:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 80012d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d129      	bne.n	8001334 <bmp2_compensate_data+0x72>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d026      	beq.n	8001334 <bmp2_compensate_data+0x72>
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d023      	beq.n	8001334 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	f04f 0300 	mov.w	r3, #0
 80012f6:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 80012fa:	68b9      	ldr	r1, [r7, #8]
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	3308      	adds	r3, #8
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	68f9      	ldr	r1, [r7, #12]
 8001310:	4618      	mov	r0, r3
 8001312:	f000 fabb 	bl	800188c <compensate_temperature>
 8001316:	4603      	mov	r3, r0
 8001318:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 800131a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10a      	bne.n	8001338 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	68f9      	ldr	r1, [r7, #12]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fba5 	bl	8001a78 <compensate_pressure>
 800132e:	4603      	mov	r3, r0
 8001330:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 8001332:	e001      	b.n	8001338 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001334:	23ff      	movs	r3, #255	@ 0xff
 8001336:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001338:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001344:	b5b0      	push	{r4, r5, r7, lr}
 8001346:	b092      	sub	sp, #72	@ 0x48
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 8001350:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <bmp2_compute_meas_time+0x9c>)
 8001352:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001356:	461d      	mov	r5, r3
 8001358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135c:	682b      	ldr	r3, [r5, #0]
 800135e:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 8001360:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <bmp2_compute_meas_time+0xa0>)
 8001362:	f107 0410 	add.w	r4, r7, #16
 8001366:	461d      	mov	r5, r3
 8001368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800136a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800136c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001370:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f837 	bl	80013e8 <null_ptr_check>
 800137a:	4603      	mov	r3, r0
 800137c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 8001380:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8001384:	2b00      	cmp	r3, #0
 8001386:	d122      	bne.n	80013ce <bmp2_compute_meas_time+0x8a>
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d01f      	beq.n	80013ce <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7e1b      	ldrb	r3, [r3, #24]
 8001392:	2b03      	cmp	r3, #3
 8001394:	d111      	bne.n	80013ba <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	78db      	ldrb	r3, [r3, #3]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	3348      	adds	r3, #72	@ 0x48
 800139e:	443b      	add	r3, r7
 80013a0:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	789b      	ldrb	r3, [r3, #2]
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	3348      	adds	r3, #72	@ 0x48
 80013ac:	443b      	add	r3, r7
 80013ae:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80013b2:	441a      	add	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013b8:	e00c      	b.n	80013d4 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	78db      	ldrb	r3, [r3, #3]
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	3348      	adds	r3, #72	@ 0x48
 80013c2:	443b      	add	r3, r7
 80013c4:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013cc:	e002      	b.n	80013d4 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80013ce:	23ff      	movs	r3, #255	@ 0xff
 80013d0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 80013d4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3748      	adds	r7, #72	@ 0x48
 80013dc:	46bd      	mov	sp, r7
 80013de:	bdb0      	pop	{r4, r5, r7, pc}
 80013e0:	08009b90 	.word	0x08009b90
 80013e4:	08009ba4 	.word	0x08009ba4

080013e8 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00b      	beq.n	800140e <null_ptr_check+0x26>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d007      	beq.n	800140e <null_ptr_check+0x26>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <null_ptr_check+0x26>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d102      	bne.n	8001414 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 800140e:	23ff      	movs	r3, #255	@ 0xff
 8001410:	73fb      	strb	r3, [r7, #15]
 8001412:	e001      	b.n	8001418 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001418:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001436:	2301      	movs	r3, #1
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	e015      	b.n	8001468 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	441a      	add	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	3b01      	subs	r3, #1
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	440b      	add	r3, r1
 800144c:	7812      	ldrb	r2, [r2, #0]
 800144e:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	441a      	add	r2, r3
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	68b9      	ldr	r1, [r7, #8]
 800145c:	440b      	add	r3, r1
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	3301      	adds	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	429a      	cmp	r2, r3
 800146e:	d3e5      	bcc.n	800143c <interleave_data+0x14>
    }
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	371c      	adds	r7, #28
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b08a      	sub	sp, #40	@ 0x28
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	f107 0310 	add.w	r3, r7, #16
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]
 800149a:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 800149c:	f107 010c 	add.w	r1, r7, #12
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2219      	movs	r2, #25
 80014a4:	2088      	movs	r0, #136	@ 0x88
 80014a6:	f7ff fd7c 	bl	8000fa2 <bmp2_get_regs>
 80014aa:	4603      	mov	r3, r0
 80014ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMP2_OK)
 80014b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d177      	bne.n	80015a8 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 80014b8:	7b7b      	ldrb	r3, [r7, #13]
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	b21a      	sxth	r2, r3
 80014be:	7b3b      	ldrb	r3, [r7, #12]
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	4313      	orrs	r3, r2
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	b21a      	sxth	r2, r3
 80014d2:	7bbb      	ldrb	r3, [r7, #14]
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	4313      	orrs	r3, r2
 80014d8:	b21a      	sxth	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 80014de:	7c7b      	ldrb	r3, [r7, #17]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b21a      	sxth	r2, r3
 80014e4:	7c3b      	ldrb	r3, [r7, #16]
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b21a      	sxth	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 80014f0:	7cfb      	ldrb	r3, [r7, #19]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	7cbb      	ldrb	r3, [r7, #18]
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	b29a      	uxth	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	845a      	strh	r2, [r3, #34]	@ 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 8001504:	7d7b      	ldrb	r3, [r7, #21]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	b21a      	sxth	r2, r3
 800150a:	7d3b      	ldrb	r3, [r7, #20]
 800150c:	b21b      	sxth	r3, r3
 800150e:	4313      	orrs	r3, r2
 8001510:	b21a      	sxth	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8001516:	7dfb      	ldrb	r3, [r7, #23]
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	b21a      	sxth	r2, r3
 800151c:	7dbb      	ldrb	r3, [r7, #22]
 800151e:	b21b      	sxth	r3, r3
 8001520:	4313      	orrs	r3, r2
 8001522:	b21a      	sxth	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001528:	7e7b      	ldrb	r3, [r7, #25]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	b21a      	sxth	r2, r3
 800152e:	7e3b      	ldrb	r3, [r7, #24]
 8001530:	b21b      	sxth	r3, r3
 8001532:	4313      	orrs	r3, r2
 8001534:	b21a      	sxth	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	851a      	strh	r2, [r3, #40]	@ 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 800153a:	7efb      	ldrb	r3, [r7, #27]
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	b21a      	sxth	r2, r3
 8001540:	7ebb      	ldrb	r3, [r7, #26]
 8001542:	b21b      	sxth	r3, r3
 8001544:	4313      	orrs	r3, r2
 8001546:	b21a      	sxth	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 800154c:	7f7b      	ldrb	r3, [r7, #29]
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	b21a      	sxth	r2, r3
 8001552:	7f3b      	ldrb	r3, [r7, #28]
 8001554:	b21b      	sxth	r3, r3
 8001556:	4313      	orrs	r3, r2
 8001558:	b21a      	sxth	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 800155e:	7ffb      	ldrb	r3, [r7, #31]
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	b21a      	sxth	r2, r3
 8001564:	7fbb      	ldrb	r3, [r7, #30]
 8001566:	b21b      	sxth	r3, r3
 8001568:	4313      	orrs	r3, r2
 800156a:	b21a      	sxth	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	85da      	strh	r2, [r3, #46]	@ 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8001570:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	b21a      	sxth	r2, r3
 8001578:	f897 3020 	ldrb.w	r3, [r7, #32]
 800157c:	b21b      	sxth	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	b21a      	sxth	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 8001586:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	b21a      	sxth	r2, r3
 800158e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001592:	b21b      	sxth	r3, r3
 8001594:	4313      	orrs	r3, r2
 8001596:	b21a      	sxth	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 800159c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80015a0:	b25a      	sxtb	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    return rslt;
 80015a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3728      	adds	r7, #40	@ 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80015c2:	2300      	movs	r3, #0
 80015c4:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 80015c6:	f24f 53f4 	movw	r3, #62964	@ 0xf5f4
 80015ca:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d074      	beq.n	80016bc <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80015d2:	f107 0114 	add.w	r1, r7, #20
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2202      	movs	r2, #2
 80015da:	20f4      	movs	r0, #244	@ 0xf4
 80015dc:	f7ff fce1 	bl	8000fa2 <bmp2_get_regs>
 80015e0:	4603      	mov	r3, r0
 80015e2:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80015e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d169      	bne.n	80016c0 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff fd82 	bl	80010f6 <bmp2_soft_reset>
 80015f2:	4603      	mov	r3, r0
 80015f4:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80015f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d160      	bne.n	80016c0 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	68b9      	ldr	r1, [r7, #8]
 8001604:	4618      	mov	r0, r3
 8001606:	f000 f861 	bl	80016cc <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 800160a:	7d7b      	ldrb	r3, [r7, #21]
 800160c:	b25b      	sxtb	r3, r3
 800160e:	f003 031f 	and.w	r3, r3, #31
 8001612:	b25a      	sxtb	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	789b      	ldrb	r3, [r3, #2]
 8001618:	015b      	lsls	r3, r3, #5
 800161a:	b25b      	sxtb	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b25b      	sxtb	r3, r3
 8001620:	b2db      	uxtb	r3, r3
 8001622:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001624:	7d7b      	ldrb	r3, [r7, #21]
 8001626:	b25b      	sxtb	r3, r3
 8001628:	f023 031c 	bic.w	r3, r3, #28
 800162c:	b25a      	sxtb	r2, r3
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	791b      	ldrb	r3, [r3, #4]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	b25b      	sxtb	r3, r3
 8001636:	f003 031c 	and.w	r3, r3, #28
 800163a:	b25b      	sxtb	r3, r3
 800163c:	4313      	orrs	r3, r2
 800163e:	b25b      	sxtb	r3, r3
 8001640:	b2db      	uxtb	r3, r3
 8001642:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001644:	7d7b      	ldrb	r3, [r7, #21]
 8001646:	b25b      	sxtb	r3, r3
 8001648:	f023 0301 	bic.w	r3, r3, #1
 800164c:	b25a      	sxtb	r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	795b      	ldrb	r3, [r3, #5]
 8001652:	b25b      	sxtb	r3, r3
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	b25b      	sxtb	r3, r3
 800165a:	4313      	orrs	r3, r2
 800165c:	b25b      	sxtb	r3, r3
 800165e:	b2db      	uxtb	r3, r3
 8001660:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 8001662:	f107 0114 	add.w	r1, r7, #20
 8001666:	f107 0010 	add.w	r0, r7, #16
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2202      	movs	r2, #2
 800166e:	f7ff fcd0 	bl	8001012 <bmp2_set_regs>
 8001672:	4603      	mov	r3, r0
 8001674:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 8001676:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d120      	bne.n	80016c0 <conf_sensor+0x10c>
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d01d      	beq.n	80016c0 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7bfa      	ldrb	r2, [r7, #15]
 8001688:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 800168a:	7d3b      	ldrb	r3, [r7, #20]
 800168c:	b25b      	sxtb	r3, r3
 800168e:	f023 0303 	bic.w	r3, r3, #3
 8001692:	b25a      	sxtb	r2, r3
 8001694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	b25b      	sxtb	r3, r3
 800169e:	4313      	orrs	r3, r2
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 80016a6:	f107 0114 	add.w	r1, r7, #20
 80016aa:	f107 0010 	add.w	r0, r7, #16
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f7ff fcae 	bl	8001012 <bmp2_set_regs>
 80016b6:	4603      	mov	r3, r0
 80016b8:	75fb      	strb	r3, [r7, #23]
 80016ba:	e001      	b.n	80016c0 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80016bc:	23ff      	movs	r3, #255	@ 0xff
 80016be:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80016c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	78db      	ldrb	r3, [r3, #3]
 80016da:	2b04      	cmp	r3, #4
 80016dc:	f200 808b 	bhi.w	80017f6 <set_os_mode+0x12a>
 80016e0:	a201      	add	r2, pc, #4	@ (adr r2, 80016e8 <set_os_mode+0x1c>)
 80016e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e6:	bf00      	nop
 80016e8:	080016fd 	.word	0x080016fd
 80016ec:	0800172f 	.word	0x0800172f
 80016f0:	08001761 	.word	0x08001761
 80016f4:	08001793 	.word	0x08001793
 80016f8:	080017c5 	.word	0x080017c5
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b25b      	sxtb	r3, r3
 8001702:	f003 031f 	and.w	r3, r3, #31
 8001706:	b25b      	sxtb	r3, r3
 8001708:	f043 0320 	orr.w	r3, r3, #32
 800170c:	b25b      	sxtb	r3, r3
 800170e:	b2da      	uxtb	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b25b      	sxtb	r3, r3
 800171a:	f023 031c 	bic.w	r3, r3, #28
 800171e:	b25b      	sxtb	r3, r3
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	b25b      	sxtb	r3, r3
 8001726:	b2da      	uxtb	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	701a      	strb	r2, [r3, #0]
            break;
 800172c:	e064      	b.n	80017f8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b25b      	sxtb	r3, r3
 8001734:	f003 031f 	and.w	r3, r3, #31
 8001738:	b25b      	sxtb	r3, r3
 800173a:	f043 0320 	orr.w	r3, r3, #32
 800173e:	b25b      	sxtb	r3, r3
 8001740:	b2da      	uxtb	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	b25b      	sxtb	r3, r3
 800174c:	f023 031c 	bic.w	r3, r3, #28
 8001750:	b25b      	sxtb	r3, r3
 8001752:	f043 0308 	orr.w	r3, r3, #8
 8001756:	b25b      	sxtb	r3, r3
 8001758:	b2da      	uxtb	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	701a      	strb	r2, [r3, #0]
            break;
 800175e:	e04b      	b.n	80017f8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b25b      	sxtb	r3, r3
 8001766:	f003 031f 	and.w	r3, r3, #31
 800176a:	b25b      	sxtb	r3, r3
 800176c:	f043 0320 	orr.w	r3, r3, #32
 8001770:	b25b      	sxtb	r3, r3
 8001772:	b2da      	uxtb	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b25b      	sxtb	r3, r3
 800177e:	f023 031c 	bic.w	r3, r3, #28
 8001782:	b25b      	sxtb	r3, r3
 8001784:	f043 030c 	orr.w	r3, r3, #12
 8001788:	b25b      	sxtb	r3, r3
 800178a:	b2da      	uxtb	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	701a      	strb	r2, [r3, #0]
            break;
 8001790:	e032      	b.n	80017f8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b25b      	sxtb	r3, r3
 8001798:	f003 031f 	and.w	r3, r3, #31
 800179c:	b25b      	sxtb	r3, r3
 800179e:	f043 0320 	orr.w	r3, r3, #32
 80017a2:	b25b      	sxtb	r3, r3
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b25b      	sxtb	r3, r3
 80017b0:	f023 031c 	bic.w	r3, r3, #28
 80017b4:	b25b      	sxtb	r3, r3
 80017b6:	f043 0310 	orr.w	r3, r3, #16
 80017ba:	b25b      	sxtb	r3, r3
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	701a      	strb	r2, [r3, #0]
            break;
 80017c2:	e019      	b.n	80017f8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	f003 031f 	and.w	r3, r3, #31
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	b25b      	sxtb	r3, r3
 80017e2:	f023 031c 	bic.w	r3, r3, #28
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	f043 0314 	orr.w	r3, r3, #20
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	701a      	strb	r2, [r3, #0]
            break;
 80017f4:	e000      	b.n	80017f8 <set_os_mode+0x12c>
        default:
            break;
 80017f6:	bf00      	nop
    }
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	031b      	lsls	r3, r3, #12
 8001814:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3301      	adds	r3, #1
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3302      	adds	r3, #2
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	091b      	lsrs	r3, r3, #4
 8001828:	b2db      	uxtb	r3, r3
 800182a:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	431a      	orrs	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	431a      	orrs	r2, r3
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3303      	adds	r3, #3
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	031b      	lsls	r3, r3, #12
 8001842:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3304      	adds	r3, #4
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3305      	adds	r3, #5
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	091b      	lsrs	r3, r3, #4
 8001856:	b2db      	uxtb	r3, r3
 8001858:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	431a      	orrs	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4313      	orrs	r3, r2
 8001864:	461a      	mov	r2, r3
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	4619      	mov	r1, r3
 8001874:	4610      	mov	r0, r2
 8001876:	f000 fae3 	bl	8001e40 <st_check_boundaries>
 800187a:	4603      	mov	r3, r0
 800187c:	72fb      	strb	r3, [r7, #11]

    return rslt;
 800187e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 800188c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001890:	b08c      	sub	sp, #48	@ 0x30
 8001892:	af00      	add	r7, sp, #0
 8001894:	60f8      	str	r0, [r7, #12]
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fe5d 	bl	8000564 <__aeabi_i2d>
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	4b6c      	ldr	r3, [pc, #432]	@ (8001a60 <compensate_temperature+0x1d4>)
 80018b0:	f7fe ffec 	bl	800088c <__aeabi_ddiv>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4614      	mov	r4, r2
 80018ba:	461d      	mov	r5, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	8b9b      	ldrh	r3, [r3, #28]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fe3f 	bl	8000544 <__aeabi_ui2d>
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	4b66      	ldr	r3, [pc, #408]	@ (8001a64 <compensate_temperature+0x1d8>)
 80018cc:	f7fe ffde 	bl	800088c <__aeabi_ddiv>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4620      	mov	r0, r4
 80018d6:	4629      	mov	r1, r5
 80018d8:	f7fe fcf6 	bl	80002c8 <__aeabi_dsub>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4614      	mov	r4, r2
 80018e2:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe3a 	bl	8000564 <__aeabi_i2d>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80018f4:	4620      	mov	r0, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7fe fe9e 	bl	8000638 <__aeabi_dmul>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fe2b 	bl	8000564 <__aeabi_i2d>
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001916:	f7fe ffb9 	bl	800088c <__aeabi_ddiv>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4614      	mov	r4, r2
 8001920:	461d      	mov	r5, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	8b9b      	ldrh	r3, [r3, #28]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fe0c 	bl	8000544 <__aeabi_ui2d>
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	4b4d      	ldr	r3, [pc, #308]	@ (8001a68 <compensate_temperature+0x1dc>)
 8001932:	f7fe ffab 	bl	800088c <__aeabi_ddiv>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4620      	mov	r0, r4
 800193c:	4629      	mov	r1, r5
 800193e:	f7fe fcc3 	bl	80002c8 <__aeabi_dsub>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4614      	mov	r4, r2
 8001948:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fe08 	bl	8000564 <__aeabi_i2d>
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800195c:	f7fe ff96 	bl	800088c <__aeabi_ddiv>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4690      	mov	r8, r2
 8001966:	4699      	mov	r9, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	8b9b      	ldrh	r3, [r3, #28]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fde9 	bl	8000544 <__aeabi_ui2d>
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	4b3c      	ldr	r3, [pc, #240]	@ (8001a68 <compensate_temperature+0x1dc>)
 8001978:	f7fe ff88 	bl	800088c <__aeabi_ddiv>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4640      	mov	r0, r8
 8001982:	4649      	mov	r1, r9
 8001984:	f7fe fca0 	bl	80002c8 <__aeabi_dsub>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 800198c:	4620      	mov	r0, r4
 800198e:	4629      	mov	r1, r5
 8001990:	f7fe fe52 	bl	8000638 <__aeabi_dmul>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4614      	mov	r4, r2
 800199a:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fdde 	bl	8000564 <__aeabi_i2d>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
    var2 =
 80019ac:	4620      	mov	r0, r4
 80019ae:	4629      	mov	r1, r5
 80019b0:	f7fe fe42 	bl	8000638 <__aeabi_dmul>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 80019bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019c4:	f7fe fc82 	bl	80002cc <__adddf3>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4610      	mov	r0, r2
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff f8cc 	bl	8000b6c <__aeabi_d2iz>
 80019d4:	4602      	mov	r2, r0
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	639a      	str	r2, [r3, #56]	@ 0x38
    temperature = (var1 + var2) / 5120.0;
 80019da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019e2:	f7fe fc73 	bl	80002cc <__adddf3>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a6c <compensate_temperature+0x1e0>)
 80019f4:	f7fe ff4a 	bl	800088c <__aeabi_ddiv>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <compensate_temperature+0x1e4>)
 8001a06:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a0a:	f7ff f887 	bl	8000b1c <__aeabi_dcmplt>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d007      	beq.n	8001a24 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <compensate_temperature+0x1e4>)
 8001a1a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <compensate_temperature+0x1e8>)
 8001a2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a2e:	f7ff f893 	bl	8000b58 <__aeabi_dcmpgt>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d007      	beq.n	8001a48 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a74 <compensate_temperature+0x1e8>)
 8001a3e:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    (*comp_temperature) = temperature;
 8001a48:	68f9      	ldr	r1, [r7, #12]
 8001a4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a4e:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001a52:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3730      	adds	r7, #48	@ 0x30
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a60:	40d00000 	.word	0x40d00000
 8001a64:	40900000 	.word	0x40900000
 8001a68:	40c00000 	.word	0x40c00000
 8001a6c:	40b40000 	.word	0x40b40000
 8001a70:	c0440000 	.word	0xc0440000
 8001a74:	40554000 	.word	0x40554000

08001a78 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001a78:	b5b0      	push	{r4, r5, r7, lr}
 8001a7a:	b08c      	sub	sp, #48	@ 0x30
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fd62 	bl	8000564 <__aeabi_i2d>
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001aa8:	f7fe fef0 	bl	800088c <__aeabi_ddiv>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4bcb      	ldr	r3, [pc, #812]	@ (8001de8 <compensate_pressure+0x370>)
 8001aba:	f7fe fc05 	bl	80002c8 <__aeabi_dsub>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001ac6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ace:	f7fe fdb3 	bl	8000638 <__aeabi_dmul>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4614      	mov	r4, r2
 8001ad8:	461d      	mov	r5, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fd3f 	bl	8000564 <__aeabi_i2d>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4620      	mov	r0, r4
 8001aec:	4629      	mov	r1, r5
 8001aee:	f7fe fda3 	bl	8000638 <__aeabi_dmul>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	4bbb      	ldr	r3, [pc, #748]	@ (8001dec <compensate_pressure+0x374>)
 8001b00:	f7fe fec4 	bl	800088c <__aeabi_ddiv>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fd26 	bl	8000564 <__aeabi_i2d>
 8001b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b1c:	f7fe fd8c 	bl	8000638 <__aeabi_dmul>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	f7fe fbce 	bl	80002cc <__adddf3>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b38:	f7fe fbc8 	bl	80002cc <__adddf3>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	4ba9      	ldr	r3, [pc, #676]	@ (8001df0 <compensate_pressure+0x378>)
 8001b4a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b4e:	f7fe fe9d 	bl	800088c <__aeabi_ddiv>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4614      	mov	r4, r2
 8001b58:	461d      	mov	r5, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fcff 	bl	8000564 <__aeabi_i2d>
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	4ba2      	ldr	r3, [pc, #648]	@ (8001df4 <compensate_pressure+0x37c>)
 8001b6c:	f7fe fd64 	bl	8000638 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4620      	mov	r0, r4
 8001b76:	4629      	mov	r1, r5
 8001b78:	f7fe fba8 	bl	80002cc <__adddf3>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fcea 	bl	8000564 <__aeabi_i2d>
 8001b90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b94:	f7fe fd50 	bl	8000638 <__aeabi_dmul>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ba4:	f7fe fd48 	bl	8000638 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	4b90      	ldr	r3, [pc, #576]	@ (8001df8 <compensate_pressure+0x380>)
 8001bb6:	f7fe fe69 	bl	800088c <__aeabi_ddiv>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4614      	mov	r4, r2
 8001bc0:	461d      	mov	r5, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fccb 	bl	8000564 <__aeabi_i2d>
 8001bce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bd2:	f7fe fd31 	bl	8000638 <__aeabi_dmul>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4620      	mov	r0, r4
 8001bdc:	4629      	mov	r1, r5
 8001bde:	f7fe fb75 	bl	80002cc <__adddf3>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4610      	mov	r0, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	4b82      	ldr	r3, [pc, #520]	@ (8001df8 <compensate_pressure+0x380>)
 8001bf0:	f7fe fe4c 	bl	800088c <__aeabi_ddiv>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	4b7a      	ldr	r3, [pc, #488]	@ (8001dec <compensate_pressure+0x374>)
 8001c02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c06:	f7fe fe41 	bl	800088c <__aeabi_ddiv>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	4b79      	ldr	r3, [pc, #484]	@ (8001dfc <compensate_pressure+0x384>)
 8001c18:	f7fe fb58 	bl	80002cc <__adddf3>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4614      	mov	r4, r2
 8001c22:	461d      	mov	r5, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fc8b 	bl	8000544 <__aeabi_ui2d>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4620      	mov	r0, r4
 8001c34:	4629      	mov	r1, r5
 8001c36:	f7fe fcff 	bl	8000638 <__aeabi_dmul>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c4e:	f7fe ff65 	bl	8000b1c <__aeabi_dcmplt>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10b      	bne.n	8001c70 <compensate_pressure+0x1f8>
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c64:	f7fe ff78 	bl	8000b58 <__aeabi_dcmpgt>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 80de 	beq.w	8001e2c <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fc65 	bl	8000544 <__aeabi_ui2d>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	f04f 0000 	mov.w	r0, #0
 8001c82:	495f      	ldr	r1, [pc, #380]	@ (8001e00 <compensate_pressure+0x388>)
 8001c84:	f7fe fb20 	bl	80002c8 <__aeabi_dsub>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	4b5b      	ldr	r3, [pc, #364]	@ (8001e04 <compensate_pressure+0x38c>)
 8001c96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c9a:	f7fe fdf7 	bl	800088c <__aeabi_ddiv>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ca6:	f7fe fb0f 	bl	80002c8 <__aeabi_dsub>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	a347      	add	r3, pc, #284	@ (adr r3, 8001dd0 <compensate_pressure+0x358>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe fcbe 	bl	8000638 <__aeabi_dmul>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cc8:	f7fe fde0 	bl	800088c <__aeabi_ddiv>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fc42 	bl	8000564 <__aeabi_i2d>
 8001ce0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ce4:	f7fe fca8 	bl	8000638 <__aeabi_dmul>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cf4:	f7fe fca0 	bl	8000638 <__aeabi_dmul>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	4b40      	ldr	r3, [pc, #256]	@ (8001e08 <compensate_pressure+0x390>)
 8001d06:	f7fe fdc1 	bl	800088c <__aeabi_ddiv>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fc23 	bl	8000564 <__aeabi_i2d>
 8001d1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d22:	f7fe fc89 	bl	8000638 <__aeabi_dmul>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	4b2e      	ldr	r3, [pc, #184]	@ (8001dec <compensate_pressure+0x374>)
 8001d34:	f7fe fdaa 	bl	800088c <__aeabi_ddiv>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001d40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d48:	f7fe fac0 	bl	80002cc <__adddf3>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4614      	mov	r4, r2
 8001d52:	461d      	mov	r5, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fc02 	bl	8000564 <__aeabi_i2d>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4620      	mov	r0, r4
 8001d66:	4629      	mov	r1, r5
 8001d68:	f7fe fab0 	bl	80002cc <__adddf3>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	4b24      	ldr	r3, [pc, #144]	@ (8001e0c <compensate_pressure+0x394>)
 8001d7a:	f7fe fd87 	bl	800088c <__aeabi_ddiv>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d86:	f7fe faa1 	bl	80002cc <__adddf3>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001d92:	a311      	add	r3, pc, #68	@ (adr r3, 8001dd8 <compensate_pressure+0x360>)
 8001d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d98:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d9c:	f7fe febe 	bl	8000b1c <__aeabi_dcmplt>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d007      	beq.n	8001db6 <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001da6:	a30c      	add	r3, pc, #48	@ (adr r3, 8001dd8 <compensate_pressure+0x360>)
 8001da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dac:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001db0:	2303      	movs	r3, #3
 8001db2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001db6:	a30a      	add	r3, pc, #40	@ (adr r3, 8001de0 <compensate_pressure+0x368>)
 8001db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dc0:	f7fe feca 	bl	8000b58 <__aeabi_dcmpgt>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	e022      	b.n	8001e10 <compensate_pressure+0x398>
 8001dca:	bf00      	nop
 8001dcc:	f3af 8000 	nop.w
 8001dd0:	00000000 	.word	0x00000000
 8001dd4:	40b86a00 	.word	0x40b86a00
 8001dd8:	00000000 	.word	0x00000000
 8001ddc:	40dd4c00 	.word	0x40dd4c00
 8001de0:	00000000 	.word	0x00000000
 8001de4:	40fadb00 	.word	0x40fadb00
 8001de8:	40ef4000 	.word	0x40ef4000
 8001dec:	40e00000 	.word	0x40e00000
 8001df0:	40100000 	.word	0x40100000
 8001df4:	40f00000 	.word	0x40f00000
 8001df8:	41200000 	.word	0x41200000
 8001dfc:	3ff00000 	.word	0x3ff00000
 8001e00:	41300000 	.word	0x41300000
 8001e04:	40b00000 	.word	0x40b00000
 8001e08:	41e00000 	.word	0x41e00000
 8001e0c:	40300000 	.word	0x40300000
 8001e10:	d007      	beq.n	8001e22 <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001e12:	a309      	add	r3, pc, #36	@ (adr r3, 8001e38 <compensate_pressure+0x3c0>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001e1c:	2304      	movs	r3, #4
 8001e1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        (*comp_pressure) = pressure;
 8001e22:	68f9      	ldr	r1, [r7, #12]
 8001e24:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e28:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001e2c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3730      	adds	r7, #48	@ 0x30
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bdb0      	pop	{r4, r5, r7, pc}
 8001e38:	00000000 	.word	0x00000000
 8001e3c:	40fadb00 	.word	0x40fadb00

08001e40 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	db03      	blt.n	8001e5c <st_check_boundaries+0x1c>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec8 <st_check_boundaries+0x88>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	dd09      	ble.n	8001e70 <st_check_boundaries+0x30>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	db06      	blt.n	8001e70 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a18      	ldr	r2, [pc, #96]	@ (8001ec8 <st_check_boundaries+0x88>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	dc02      	bgt.n	8001e70 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001e6a:	23fa      	movs	r3, #250	@ 0xfa
 8001e6c:	73fb      	strb	r3, [r7, #15]
 8001e6e:	e023      	b.n	8001eb8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	db03      	blt.n	8001e7e <st_check_boundaries+0x3e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a13      	ldr	r2, [pc, #76]	@ (8001ec8 <st_check_boundaries+0x88>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	dd09      	ble.n	8001e92 <st_check_boundaries+0x52>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	db06      	blt.n	8001e92 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	4a10      	ldr	r2, [pc, #64]	@ (8001ec8 <st_check_boundaries+0x88>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	dc02      	bgt.n	8001e92 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001e8c:	23fb      	movs	r3, #251	@ 0xfb
 8001e8e:	73fb      	strb	r3, [r7, #15]
 8001e90:	e012      	b.n	8001eb8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	db03      	blt.n	8001ea0 <st_check_boundaries+0x60>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4a0b      	ldr	r2, [pc, #44]	@ (8001ec8 <st_check_boundaries+0x88>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	dd09      	ble.n	8001eb4 <st_check_boundaries+0x74>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	db03      	blt.n	8001eae <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a07      	ldr	r2, [pc, #28]	@ (8001ec8 <st_check_boundaries+0x88>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	dd02      	ble.n	8001eb4 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001eae:	23f9      	movs	r3, #249	@ 0xf9
 8001eb0:	73fb      	strb	r3, [r7, #15]
 8001eb2:	e001      	b.n	8001eb8 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	000ffff0 	.word	0x000ffff0

08001ecc <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff f839 	bl	8000f4c <bmp2_init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001ede:	f107 0308 	add.w	r3, r7, #8
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff f91e 	bl	8001126 <bmp2_get_config>
 8001eea:	4603      	mov	r3, r0
 8001eec:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001efa:	f107 0308 	add.w	r3, r7, #8
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff f950 	bl	80011a6 <bmp2_set_config>
 8001f06:	4603      	mov	r3, r0
 8001f08:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001f0a:	f107 0308 	add.w	r3, r7, #8
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	4619      	mov	r1, r3
 8001f12:	2003      	movs	r0, #3
 8001f14:	f7ff f982 	bl	800121c <bmp2_set_power_mode>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001f1c:	f107 0108 	add.w	r1, r7, #8
 8001f20:	f107 0310 	add.w	r3, r7, #16
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fa0c 	bl	8001344 <bmp2_compute_meas_time>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001f30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	4603      	mov	r3, r0
 8001f4a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001f50:	2300      	movs	r3, #0
 8001f52:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	6858      	ldr	r0, [r3, #4]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	891b      	ldrh	r3, [r3, #8]
 8001f60:	2200      	movs	r2, #0
 8001f62:	4619      	mov	r1, r3
 8001f64:	f002 fe52 	bl	8004c0c <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	f107 010f 	add.w	r1, r7, #15
 8001f70:	2305      	movs	r3, #5
 8001f72:	2201      	movs	r2, #1
 8001f74:	f004 f93f 	bl	80061f6 <HAL_SPI_Transmit>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	2305      	movs	r3, #5
 8001f86:	68b9      	ldr	r1, [r7, #8]
 8001f88:	f004 faa3 	bl	80064d2 <HAL_SPI_Receive>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	7dbb      	ldrb	r3, [r7, #22]
 8001f92:	4413      	add	r3, r2
 8001f94:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	6858      	ldr	r0, [r3, #4]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	891b      	ldrh	r3, [r3, #8]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f002 fe33 	bl	8004c0c <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8001fa6:	7dbb      	ldrb	r3, [r7, #22]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <bmp2_spi_read+0x74>
    iError = -1;
 8001fac:	23ff      	movs	r3, #255	@ 0xff
 8001fae:	75fb      	strb	r3, [r7, #23]

  return iError;
 8001fb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	4603      	mov	r3, r0
 8001fca:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	6858      	ldr	r0, [r3, #4]
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	891b      	ldrh	r3, [r3, #8]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f002 fe12 	bl	8004c0c <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	f107 010f 	add.w	r1, r7, #15
 8001ff0:	2305      	movs	r3, #5
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f004 f8ff 	bl	80061f6 <HAL_SPI_Transmit>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	6818      	ldr	r0, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	b29a      	uxth	r2, r3
 8002004:	2305      	movs	r3, #5
 8002006:	68b9      	ldr	r1, [r7, #8]
 8002008:	f004 f8f5 	bl	80061f6 <HAL_SPI_Transmit>
 800200c:	4603      	mov	r3, r0
 800200e:	461a      	mov	r2, r3
 8002010:	7dbb      	ldrb	r3, [r7, #22]
 8002012:	4413      	add	r3, r2
 8002014:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	6858      	ldr	r0, [r3, #4]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	891b      	ldrh	r3, [r3, #8]
 800201e:	2201      	movs	r2, #1
 8002020:	4619      	mov	r1, r3
 8002022:	f002 fdf3 	bl	8004c0c <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002026:	7dbb      	ldrb	r3, [r7, #22]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <bmp2_spi_write+0x74>
    iError = -1;
 800202c:	23ff      	movs	r3, #255	@ 0xff
 800202e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002030:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a05      	ldr	r2, [pc, #20]	@ (8002060 <bmp2_delay_us+0x24>)
 800204a:	fba2 2303 	umull	r2, r3, r2, r3
 800204e:	099b      	lsrs	r3, r3, #6
 8002050:	4618      	mov	r0, r3
 8002052:	f002 fabf 	bl	80045d4 <HAL_Delay>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	10624dd3 	.word	0x10624dd3

08002064 <BMP2_ReadData>:
 *  @retval 0 -> Success.
 *  @retval <0 -> Failure.
 *
 */
int8_t BMP2_ReadData(struct bmp2_dev *dev, double* press, double* temp)
{
 8002064:	b590      	push	{r4, r7, lr}
 8002066:	b08b      	sub	sp, #44	@ 0x2c
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 8002070:	23ff      	movs	r3, #255	@ 0xff
 8002072:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  struct bmp2_status status;
  struct bmp2_data comp_data;
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	899b      	ldrh	r3, [r3, #12]
 800207c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 8002080:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002084:	68f9      	ldr	r1, [r7, #12]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff f89c 	bl	80011c4 <bmp2_get_status>
 800208c:	4603      	mov	r3, r0
 800208e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 8002092:	f107 0310 	add.w	r3, r7, #16
 8002096:	68f9      	ldr	r1, [r7, #12]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff f8d4 	bl	8001246 <bmp2_get_sensor_data>
 800209e:	4603      	mov	r3, r0
 80020a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    *temp = comp_data.temperature;
 80020a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	e9c1 2300 	strd	r2, r3, [r1]
    *press = comp_data.pressure / 100.0;
 80020ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002128 <BMP2_ReadData+0xc4>)
 80020b8:	f7fe fbe8 	bl	800088c <__aeabi_ddiv>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	e9c1 2300 	strd	r2, r3, [r1]
    try--;
 80020c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 80020d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <BMP2_ReadData+0x80>
 80020dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	dccd      	bgt.n	8002080 <BMP2_ReadData+0x1c>

  /* Save reading result in sensor handler */
  BMP2_GET_PRESS(dev) = *press;
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ea:	68f9      	ldr	r1, [r7, #12]
 80020ec:	684c      	ldr	r4, [r1, #4]
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	f7fe fd63 	bl	8000bbc <__aeabi_d2f>
 80020f6:	4603      	mov	r3, r0
 80020f8:	6163      	str	r3, [r4, #20]
  BMP2_GET_TEMP(dev) = *temp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002100:	68f9      	ldr	r1, [r7, #12]
 8002102:	684c      	ldr	r4, [r1, #4]
 8002104:	4610      	mov	r0, r2
 8002106:	4619      	mov	r1, r3
 8002108:	f7fe fd58 	bl	8000bbc <__aeabi_d2f>
 800210c:	4603      	mov	r3, r0
 800210e:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002118:	729a      	strb	r2, [r3, #10]

  return rslt;
 800211a:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
}
 800211e:	4618      	mov	r0, r3
 8002120:	372c      	adds	r7, #44	@ 0x2c
 8002122:	46bd      	mov	sp, r7
 8002124:	bd90      	pop	{r4, r7, pc}
 8002126:	bf00      	nop
 8002128:	40590000 	.word	0x40590000

0800212c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08c      	sub	sp, #48	@ 0x30
 8002130:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002132:	f107 031c 	add.w	r3, r7, #28
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
 8002140:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002142:	4baa      	ldr	r3, [pc, #680]	@ (80023ec <MX_GPIO_Init+0x2c0>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	4aa9      	ldr	r2, [pc, #676]	@ (80023ec <MX_GPIO_Init+0x2c0>)
 8002148:	f043 0310 	orr.w	r3, r3, #16
 800214c:	6313      	str	r3, [r2, #48]	@ 0x30
 800214e:	4ba7      	ldr	r3, [pc, #668]	@ (80023ec <MX_GPIO_Init+0x2c0>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	61bb      	str	r3, [r7, #24]
 8002158:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800215a:	4ba4      	ldr	r3, [pc, #656]	@ (80023ec <MX_GPIO_Init+0x2c0>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	4aa3      	ldr	r2, [pc, #652]	@ (80023ec <MX_GPIO_Init+0x2c0>)
 8002160:	f043 0304 	orr.w	r3, r3, #4
 8002164:	6313      	str	r3, [r2, #48]	@ 0x30
 8002166:	4ba1      	ldr	r3, [pc, #644]	@ (80023ec <MX_GPIO_Init+0x2c0>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002172:	4b9e      	ldr	r3, [pc, #632]	@ (80023ec <MX_GPIO_Init+0x2c0>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	4a9d      	ldr	r2, [pc, #628]	@ (80023ec <MX_GPIO_Init+0x2c0>)
 8002178:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800217c:	6313      	str	r3, [r2, #48]	@ 0x30
 800217e:	4b9b      	ldr	r3, [pc, #620]	@ (80023ec <MX_GPIO_Init+0x2c0>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800218a:	4b98      	ldr	r3, [pc, #608]	@ (80023ec <MX_GPIO_Init+0x2c0>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	4a97      	ldr	r2, [pc, #604]	@ (80023ec <MX_GPIO_Init+0x2c0>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6313      	str	r3, [r2, #48]	@ 0x30
 8002196:	4b95      	ldr	r3, [pc, #596]	@ (80023ec <MX_GPIO_Init+0x2c0>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a2:	4b92      	ldr	r3, [pc, #584]	@ (80023ec <MX_GPIO_Init+0x2c0>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	4a91      	ldr	r2, [pc, #580]	@ (80023ec <MX_GPIO_Init+0x2c0>)
 80021a8:	f043 0302 	orr.w	r3, r3, #2
 80021ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ae:	4b8f      	ldr	r3, [pc, #572]	@ (80023ec <MX_GPIO_Init+0x2c0>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ba:	4b8c      	ldr	r3, [pc, #560]	@ (80023ec <MX_GPIO_Init+0x2c0>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	4a8b      	ldr	r2, [pc, #556]	@ (80023ec <MX_GPIO_Init+0x2c0>)
 80021c0:	f043 0308 	orr.w	r3, r3, #8
 80021c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c6:	4b89      	ldr	r3, [pc, #548]	@ (80023ec <MX_GPIO_Init+0x2c0>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021d2:	4b86      	ldr	r3, [pc, #536]	@ (80023ec <MX_GPIO_Init+0x2c0>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	4a85      	ldr	r2, [pc, #532]	@ (80023ec <MX_GPIO_Init+0x2c0>)
 80021d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021de:	4b83      	ldr	r3, [pc, #524]	@ (80023ec <MX_GPIO_Init+0x2c0>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021e6:	603b      	str	r3, [r7, #0]
 80021e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP2_CSB_Pin|Alarm_LED_Pin, GPIO_PIN_RESET);
 80021ea:	2200      	movs	r2, #0
 80021ec:	f248 0110 	movw	r1, #32784	@ 0x8010
 80021f0:	487f      	ldr	r0, [pc, #508]	@ (80023f0 <MX_GPIO_Init+0x2c4>)
 80021f2:	f002 fd0b 	bl	8004c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2140      	movs	r1, #64	@ 0x40
 80021fa:	487e      	ldr	r0, [pc, #504]	@ (80023f4 <MX_GPIO_Init+0x2c8>)
 80021fc:	f002 fd06 	bl	8004c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002200:	2200      	movs	r2, #0
 8002202:	2180      	movs	r1, #128	@ 0x80
 8002204:	487c      	ldr	r0, [pc, #496]	@ (80023f8 <MX_GPIO_Init+0x2cc>)
 8002206:	f002 fd01 	bl	8004c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BMP2_CSB_Pin|Alarm_LED_Pin;
 800220a:	f248 0310 	movw	r3, #32784	@ 0x8010
 800220e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002210:	2301      	movs	r3, #1
 8002212:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	4619      	mov	r1, r3
 8002222:	4873      	ldr	r0, [pc, #460]	@ (80023f0 <MX_GPIO_Init+0x2c4>)
 8002224:	f002 fb2e 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002228:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800222c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800222e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002232:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002238:	f107 031c 	add.w	r3, r7, #28
 800223c:	4619      	mov	r1, r3
 800223e:	486f      	ldr	r0, [pc, #444]	@ (80023fc <MX_GPIO_Init+0x2d0>)
 8002240:	f002 fb20 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002244:	2332      	movs	r3, #50	@ 0x32
 8002246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002248:	2302      	movs	r3, #2
 800224a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002250:	2303      	movs	r3, #3
 8002252:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002254:	230b      	movs	r3, #11
 8002256:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002258:	f107 031c 	add.w	r3, r7, #28
 800225c:	4619      	mov	r1, r3
 800225e:	4867      	ldr	r0, [pc, #412]	@ (80023fc <MX_GPIO_Init+0x2d0>)
 8002260:	f002 fb10 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002264:	2386      	movs	r3, #134	@ 0x86
 8002266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002270:	2303      	movs	r3, #3
 8002272:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002274:	230b      	movs	r3, #11
 8002276:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002278:	f107 031c 	add.w	r3, r7, #28
 800227c:	4619      	mov	r1, r3
 800227e:	4860      	ldr	r0, [pc, #384]	@ (8002400 <MX_GPIO_Init+0x2d4>)
 8002280:	f002 fb00 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002284:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228a:	2302      	movs	r3, #2
 800228c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002292:	2303      	movs	r3, #3
 8002294:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002296:	2308      	movs	r3, #8
 8002298:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800229a:	f107 031c 	add.w	r3, r7, #28
 800229e:	4619      	mov	r1, r3
 80022a0:	4853      	ldr	r0, [pc, #332]	@ (80023f0 <MX_GPIO_Init+0x2c4>)
 80022a2:	f002 faef 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80022a6:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80022aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022b8:	2301      	movs	r3, #1
 80022ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022bc:	f107 031c 	add.w	r3, r7, #28
 80022c0:	4619      	mov	r1, r3
 80022c2:	484b      	ldr	r0, [pc, #300]	@ (80023f0 <MX_GPIO_Init+0x2c4>)
 80022c4:	f002 fade 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PIR_Livingroom_Pin|PIR_Garage_Pin|PIR_Kitchen_Pin;
 80022c8:	f44f 43a8 	mov.w	r3, #21504	@ 0x5400
 80022cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022d6:	f107 031c 	add.w	r3, r7, #28
 80022da:	4619      	mov	r1, r3
 80022dc:	4844      	ldr	r0, [pc, #272]	@ (80023f0 <MX_GPIO_Init+0x2c4>)
 80022de:	f002 fad1 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80022e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f0:	2303      	movs	r3, #3
 80022f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022f4:	230b      	movs	r3, #11
 80022f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80022f8:	f107 031c 	add.w	r3, r7, #28
 80022fc:	4619      	mov	r1, r3
 80022fe:	483e      	ldr	r0, [pc, #248]	@ (80023f8 <MX_GPIO_Init+0x2cc>)
 8002300:	f002 fac0 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002304:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800230e:	2301      	movs	r3, #1
 8002310:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002312:	2303      	movs	r3, #3
 8002314:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002316:	2307      	movs	r3, #7
 8002318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800231a:	f107 031c 	add.w	r3, r7, #28
 800231e:	4619      	mov	r1, r3
 8002320:	4838      	ldr	r0, [pc, #224]	@ (8002404 <MX_GPIO_Init+0x2d8>)
 8002322:	f002 faaf 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002326:	2340      	movs	r3, #64	@ 0x40
 8002328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232a:	2301      	movs	r3, #1
 800232c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002332:	2300      	movs	r3, #0
 8002334:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002336:	f107 031c 	add.w	r3, r7, #28
 800233a:	4619      	mov	r1, r3
 800233c:	482d      	ldr	r0, [pc, #180]	@ (80023f4 <MX_GPIO_Init+0x2c8>)
 800233e:	f002 faa1 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002342:	2380      	movs	r3, #128	@ 0x80
 8002344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002346:	2300      	movs	r3, #0
 8002348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800234e:	f107 031c 	add.w	r3, r7, #28
 8002352:	4619      	mov	r1, r3
 8002354:	4827      	ldr	r0, [pc, #156]	@ (80023f4 <MX_GPIO_Init+0x2c8>)
 8002356:	f002 fa95 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800235a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800235e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002360:	2302      	movs	r3, #2
 8002362:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002368:	2303      	movs	r3, #3
 800236a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800236c:	230a      	movs	r3, #10
 800236e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002370:	f107 031c 	add.w	r3, r7, #28
 8002374:	4619      	mov	r1, r3
 8002376:	4822      	ldr	r0, [pc, #136]	@ (8002400 <MX_GPIO_Init+0x2d4>)
 8002378:	f002 fa84 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800237c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800238a:	f107 031c 	add.w	r3, r7, #28
 800238e:	4619      	mov	r1, r3
 8002390:	481b      	ldr	r0, [pc, #108]	@ (8002400 <MX_GPIO_Init+0x2d4>)
 8002392:	f002 fa77 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002396:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800239a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239c:	2302      	movs	r3, #2
 800239e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a4:	2303      	movs	r3, #3
 80023a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023a8:	230b      	movs	r3, #11
 80023aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023ac:	f107 031c 	add.w	r3, r7, #28
 80023b0:	4619      	mov	r1, r3
 80023b2:	4810      	ldr	r0, [pc, #64]	@ (80023f4 <MX_GPIO_Init+0x2c8>)
 80023b4:	f002 fa66 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80023b8:	2380      	movs	r3, #128	@ 0x80
 80023ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023bc:	2301      	movs	r3, #1
 80023be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80023c8:	f107 031c 	add.w	r3, r7, #28
 80023cc:	4619      	mov	r1, r3
 80023ce:	480a      	ldr	r0, [pc, #40]	@ (80023f8 <MX_GPIO_Init+0x2cc>)
 80023d0:	f002 fa58 	bl	8004884 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2100      	movs	r1, #0
 80023d8:	2028      	movs	r0, #40	@ 0x28
 80023da:	f002 f9fa 	bl	80047d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023de:	2028      	movs	r0, #40	@ 0x28
 80023e0:	f002 fa13 	bl	800480a <HAL_NVIC_EnableIRQ>

}
 80023e4:	bf00      	nop
 80023e6:	3730      	adds	r7, #48	@ 0x30
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40021800 	.word	0x40021800
 80023f8:	40020400 	.word	0x40020400
 80023fc:	40020800 	.word	0x40020800
 8002400:	40020000 	.word	0x40020000
 8002404:	40020c00 	.word	0x40020c00

08002408 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800240c:	4b1b      	ldr	r3, [pc, #108]	@ (800247c <MX_I2C1_Init+0x74>)
 800240e:	4a1c      	ldr	r2, [pc, #112]	@ (8002480 <MX_I2C1_Init+0x78>)
 8002410:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8002412:	4b1a      	ldr	r3, [pc, #104]	@ (800247c <MX_I2C1_Init+0x74>)
 8002414:	4a1b      	ldr	r2, [pc, #108]	@ (8002484 <MX_I2C1_Init+0x7c>)
 8002416:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002418:	4b18      	ldr	r3, [pc, #96]	@ (800247c <MX_I2C1_Init+0x74>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800241e:	4b17      	ldr	r3, [pc, #92]	@ (800247c <MX_I2C1_Init+0x74>)
 8002420:	2201      	movs	r2, #1
 8002422:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002424:	4b15      	ldr	r3, [pc, #84]	@ (800247c <MX_I2C1_Init+0x74>)
 8002426:	2200      	movs	r2, #0
 8002428:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800242a:	4b14      	ldr	r3, [pc, #80]	@ (800247c <MX_I2C1_Init+0x74>)
 800242c:	2200      	movs	r2, #0
 800242e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002430:	4b12      	ldr	r3, [pc, #72]	@ (800247c <MX_I2C1_Init+0x74>)
 8002432:	2200      	movs	r2, #0
 8002434:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002436:	4b11      	ldr	r3, [pc, #68]	@ (800247c <MX_I2C1_Init+0x74>)
 8002438:	2200      	movs	r2, #0
 800243a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800243c:	4b0f      	ldr	r3, [pc, #60]	@ (800247c <MX_I2C1_Init+0x74>)
 800243e:	2200      	movs	r2, #0
 8002440:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002442:	480e      	ldr	r0, [pc, #56]	@ (800247c <MX_I2C1_Init+0x74>)
 8002444:	f002 fc3a 	bl	8004cbc <HAL_I2C_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800244e:	f001 fb29 	bl	8003aa4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002452:	2100      	movs	r1, #0
 8002454:	4809      	ldr	r0, [pc, #36]	@ (800247c <MX_I2C1_Init+0x74>)
 8002456:	f002 fcc1 	bl	8004ddc <HAL_I2CEx_ConfigAnalogFilter>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002460:	f001 fb20 	bl	8003aa4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002464:	2100      	movs	r1, #0
 8002466:	4805      	ldr	r0, [pc, #20]	@ (800247c <MX_I2C1_Init+0x74>)
 8002468:	f002 fd03 	bl	8004e72 <HAL_I2CEx_ConfigDigitalFilter>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002472:	f001 fb17 	bl	8003aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000184 	.word	0x20000184
 8002480:	40005400 	.word	0x40005400
 8002484:	00808cd2 	.word	0x00808cd2

08002488 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b0aa      	sub	sp, #168	@ 0xa8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024a0:	f107 0310 	add.w	r3, r7, #16
 80024a4:	2284      	movs	r2, #132	@ 0x84
 80024a6:	2100      	movs	r1, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f006 fe69 	bl	8009180 <memset>
  if(i2cHandle->Instance==I2C1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a22      	ldr	r2, [pc, #136]	@ (800253c <HAL_I2C_MspInit+0xb4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d13c      	bne.n	8002532 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80024b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80024be:	2300      	movs	r3, #0
 80024c0:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024c2:	f107 0310 	add.w	r3, r7, #16
 80024c6:	4618      	mov	r0, r3
 80024c8:	f003 f9fa 	bl	80058c0 <HAL_RCCEx_PeriphCLKConfig>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80024d2:	f001 fae7 	bl	8003aa4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002540 <HAL_I2C_MspInit+0xb8>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	4a19      	ldr	r2, [pc, #100]	@ (8002540 <HAL_I2C_MspInit+0xb8>)
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e2:	4b17      	ldr	r3, [pc, #92]	@ (8002540 <HAL_I2C_MspInit+0xb8>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80024ee:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80024f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024f6:	2312      	movs	r3, #18
 80024f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002502:	2303      	movs	r3, #3
 8002504:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002508:	2304      	movs	r3, #4
 800250a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002512:	4619      	mov	r1, r3
 8002514:	480b      	ldr	r0, [pc, #44]	@ (8002544 <HAL_I2C_MspInit+0xbc>)
 8002516:	f002 f9b5 	bl	8004884 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800251a:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <HAL_I2C_MspInit+0xb8>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	4a08      	ldr	r2, [pc, #32]	@ (8002540 <HAL_I2C_MspInit+0xb8>)
 8002520:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002524:	6413      	str	r3, [r2, #64]	@ 0x40
 8002526:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <HAL_I2C_MspInit+0xb8>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002532:	bf00      	nop
 8002534:	37a8      	adds	r7, #168	@ 0xa8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40005400 	.word	0x40005400
 8002540:	40023800 	.word	0x40023800
 8002544:	40020400 	.word	0x40020400

08002548 <keypad_config>:

const char Rows[4]={R1, R2, R3, R4};
const char Cols[4]={C1, C2, C3, C4};

void keypad_config(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08a      	sub	sp, #40	@ 0x28
 800254c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  if (KEYPAD_4x4_GPIO == GPIOA) __HAL_RCC_GPIOA_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOB) __HAL_RCC_GPIOB_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOC) __HAL_RCC_GPIOC_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOD) __HAL_RCC_GPIOD_CLK_ENABLE(); else
 800254e:	4b16      	ldr	r3, [pc, #88]	@ (80025a8 <keypad_config+0x60>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	4a15      	ldr	r2, [pc, #84]	@ (80025a8 <keypad_config+0x60>)
 8002554:	f043 0308 	orr.w	r3, r3, #8
 8002558:	6313      	str	r3, [r2, #48]	@ 0x30
 800255a:	4b13      	ldr	r3, [pc, #76]	@ (80025a8 <keypad_config+0x60>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
  if (KEYPAD_4x4_GPIO == GPIOE) __HAL_RCC_GPIOE_CLK_ENABLE();


  GPIO_InitStruct.Pin = R1 | R2 | R3 | R4;
 8002566:	230f      	movs	r3, #15
 8002568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800256a:	2301      	movs	r3, #1
 800256c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002572:	2300      	movs	r3, #0
 8002574:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEYPAD_4x4_GPIO, &GPIO_InitStruct);
 8002576:	f107 0314 	add.w	r3, r7, #20
 800257a:	4619      	mov	r1, r3
 800257c:	480b      	ldr	r0, [pc, #44]	@ (80025ac <keypad_config+0x64>)
 800257e:	f002 f981 	bl	8004884 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = C1 | C2 | C3 | C4;
 8002582:	23f0      	movs	r3, #240	@ 0xf0
 8002584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800258a:	2302      	movs	r3, #2
 800258c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258e:	2300      	movs	r3, #0
 8002590:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEYPAD_4x4_GPIO, &GPIO_InitStruct);
 8002592:	f107 0314 	add.w	r3, r7, #20
 8002596:	4619      	mov	r1, r3
 8002598:	4804      	ldr	r0, [pc, #16]	@ (80025ac <keypad_config+0x64>)
 800259a:	f002 f973 	bl	8004884 <HAL_GPIO_Init>

}
 800259e:	bf00      	nop
 80025a0:	3728      	adds	r7, #40	@ 0x28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40020c00 	.word	0x40020c00

080025b0 <keypad_readkey>:

char keypad_readkey(void)
{ //returns ASCII code of a pressed key
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
  unsigned char r, c;
  char pressedKey=0x00;
 80025b6:	2300      	movs	r3, #0
 80025b8:	717b      	strb	r3, [r7, #5]

  r=0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	71fb      	strb	r3, [r7, #7]
  while (r<4) {
 80025be:	e02d      	b.n	800261c <keypad_readkey+0x6c>
    HAL_GPIO_WritePin(KEYPAD_4x4_GPIO, Rows[r], GPIO_PIN_SET);        //activate row
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	4a1a      	ldr	r2, [pc, #104]	@ (800262c <keypad_readkey+0x7c>)
 80025c4:	5cd3      	ldrb	r3, [r2, r3]
 80025c6:	2201      	movs	r2, #1
 80025c8:	4619      	mov	r1, r3
 80025ca:	4819      	ldr	r0, [pc, #100]	@ (8002630 <keypad_readkey+0x80>)
 80025cc:	f002 fb1e 	bl	8004c0c <HAL_GPIO_WritePin>
    c=0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	71bb      	strb	r3, [r7, #6]
    while (c<4) {
 80025d4:	e014      	b.n	8002600 <keypad_readkey+0x50>
      if (HAL_GPIO_ReadPin(KEYPAD_4x4_GPIO, Cols[c])==GPIO_PIN_SET){  //check columns
 80025d6:	79bb      	ldrb	r3, [r7, #6]
 80025d8:	4a16      	ldr	r2, [pc, #88]	@ (8002634 <keypad_readkey+0x84>)
 80025da:	5cd3      	ldrb	r3, [r2, r3]
 80025dc:	4619      	mov	r1, r3
 80025de:	4814      	ldr	r0, [pc, #80]	@ (8002630 <keypad_readkey+0x80>)
 80025e0:	f002 fafc 	bl	8004bdc <HAL_GPIO_ReadPin>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d107      	bne.n	80025fa <keypad_readkey+0x4a>
        pressedKey=KeyMap[r][c];                                   //if column active - find key value
 80025ea:	79fa      	ldrb	r2, [r7, #7]
 80025ec:	79bb      	ldrb	r3, [r7, #6]
 80025ee:	4912      	ldr	r1, [pc, #72]	@ (8002638 <keypad_readkey+0x88>)
 80025f0:	0092      	lsls	r2, r2, #2
 80025f2:	440a      	add	r2, r1
 80025f4:	4413      	add	r3, r2
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	717b      	strb	r3, [r7, #5]
      }
      c++;
 80025fa:	79bb      	ldrb	r3, [r7, #6]
 80025fc:	3301      	adds	r3, #1
 80025fe:	71bb      	strb	r3, [r7, #6]
    while (c<4) {
 8002600:	79bb      	ldrb	r3, [r7, #6]
 8002602:	2b03      	cmp	r3, #3
 8002604:	d9e7      	bls.n	80025d6 <keypad_readkey+0x26>
    }
    HAL_GPIO_WritePin(KEYPAD_4x4_GPIO, Rows[r], GPIO_PIN_RESET);      //deactivate row
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	4a08      	ldr	r2, [pc, #32]	@ (800262c <keypad_readkey+0x7c>)
 800260a:	5cd3      	ldrb	r3, [r2, r3]
 800260c:	2200      	movs	r2, #0
 800260e:	4619      	mov	r1, r3
 8002610:	4807      	ldr	r0, [pc, #28]	@ (8002630 <keypad_readkey+0x80>)
 8002612:	f002 fafb 	bl	8004c0c <HAL_GPIO_WritePin>
    r++;
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	3301      	adds	r3, #1
 800261a:	71fb      	strb	r3, [r7, #7]
  while (r<4) {
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	2b03      	cmp	r3, #3
 8002620:	d9ce      	bls.n	80025c0 <keypad_readkey+0x10>
  }
  return pressedKey;                                               //return ASCII key value
 8002622:	797b      	ldrb	r3, [r7, #5]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	08009d34 	.word	0x08009d34
 8002630:	40020c00 	.word	0x40020c00
 8002634:	08009d38 	.word	0x08009d38
 8002638:	08009d24 	.word	0x08009d24

0800263c <LCD_WriteNibble>:

GPIO_InitTypeDef GPIO_InitStruct;

//-----------------------------------------------------------------------------
void LCD_WriteNibble(char nibbleToWrite)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_SET);
 8002646:	2201      	movs	r2, #1
 8002648:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800264c:	4818      	ldr	r0, [pc, #96]	@ (80026b0 <LCD_WriteNibble+0x74>)
 800264e:	f002 fadd 	bl	8004c0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D4, (GPIO_PinState)(nibbleToWrite & 0x01));
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	2108      	movs	r1, #8
 800265e:	4814      	ldr	r0, [pc, #80]	@ (80026b0 <LCD_WriteNibble+0x74>)
 8002660:	f002 fad4 	bl	8004c0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D5, (GPIO_PinState)(nibbleToWrite & 0x02));
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	b2db      	uxtb	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	2104      	movs	r1, #4
 8002670:	480f      	ldr	r0, [pc, #60]	@ (80026b0 <LCD_WriteNibble+0x74>)
 8002672:	f002 facb 	bl	8004c0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D6, (GPIO_PinState)(nibbleToWrite & 0x04));
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	2140      	movs	r1, #64	@ 0x40
 8002682:	480b      	ldr	r0, [pc, #44]	@ (80026b0 <LCD_WriteNibble+0x74>)
 8002684:	f002 fac2 	bl	8004c0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D7, (GPIO_PinState)(nibbleToWrite & 0x08));
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	b2db      	uxtb	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	2101      	movs	r1, #1
 8002694:	4806      	ldr	r0, [pc, #24]	@ (80026b0 <LCD_WriteNibble+0x74>)
 8002696:	f002 fab9 	bl	8004c0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_RESET);
 800269a:	2200      	movs	r2, #0
 800269c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80026a0:	4803      	ldr	r0, [pc, #12]	@ (80026b0 <LCD_WriteNibble+0x74>)
 80026a2:	f002 fab3 	bl	8004c0c <HAL_GPIO_WritePin>
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40020800 	.word	0x40020800

080026b4 <LCD_ReadNibble>:


//-----------------------------------------------------------------------------
unsigned char LCD_ReadNibble(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
  unsigned char tmp = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_SET);
 80026be:	2201      	movs	r2, #1
 80026c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80026c4:	481e      	ldr	r0, [pc, #120]	@ (8002740 <LCD_ReadNibble+0x8c>)
 80026c6:	f002 faa1 	bl	8004c0c <HAL_GPIO_WritePin>
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D4) << 0);
 80026ca:	2108      	movs	r1, #8
 80026cc:	481c      	ldr	r0, [pc, #112]	@ (8002740 <LCD_ReadNibble+0x8c>)
 80026ce:	f002 fa85 	bl	8004bdc <HAL_GPIO_ReadPin>
 80026d2:	4603      	mov	r3, r0
 80026d4:	b25a      	sxtb	r2, r3
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	4313      	orrs	r3, r2
 80026dc:	b25b      	sxtb	r3, r3
 80026de:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D5) << 1);
 80026e0:	2104      	movs	r1, #4
 80026e2:	4817      	ldr	r0, [pc, #92]	@ (8002740 <LCD_ReadNibble+0x8c>)
 80026e4:	f002 fa7a 	bl	8004bdc <HAL_GPIO_ReadPin>
 80026e8:	4603      	mov	r3, r0
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	b25a      	sxtb	r2, r3
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	b25b      	sxtb	r3, r3
 80026f6:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D6) << 2);
 80026f8:	2140      	movs	r1, #64	@ 0x40
 80026fa:	4811      	ldr	r0, [pc, #68]	@ (8002740 <LCD_ReadNibble+0x8c>)
 80026fc:	f002 fa6e 	bl	8004bdc <HAL_GPIO_ReadPin>
 8002700:	4603      	mov	r3, r0
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	b25a      	sxtb	r2, r3
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	4313      	orrs	r3, r2
 800270c:	b25b      	sxtb	r3, r3
 800270e:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D7) << 3);
 8002710:	2101      	movs	r1, #1
 8002712:	480b      	ldr	r0, [pc, #44]	@ (8002740 <LCD_ReadNibble+0x8c>)
 8002714:	f002 fa62 	bl	8004bdc <HAL_GPIO_ReadPin>
 8002718:	4603      	mov	r3, r0
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	b25a      	sxtb	r2, r3
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	4313      	orrs	r3, r2
 8002724:	b25b      	sxtb	r3, r3
 8002726:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_RESET);
 8002728:	2200      	movs	r2, #0
 800272a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800272e:	4804      	ldr	r0, [pc, #16]	@ (8002740 <LCD_ReadNibble+0x8c>)
 8002730:	f002 fa6c 	bl	8004c0c <HAL_GPIO_WritePin>
  return tmp;
 8002734:	79fb      	ldrb	r3, [r7, #7]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40020800 	.word	0x40020800

08002744 <LCD_ReadStatus>:


//-----------------------------------------------------------------------------
unsigned char LCD_ReadStatus(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
  unsigned char status = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	71fb      	strb	r3, [r7, #7]
  
  GPIO_InitStruct.Pin =  LCD_D4 | LCD_D5 | LCD_D6 | LCD_D7;
 800274e:	4b21      	ldr	r3, [pc, #132]	@ (80027d4 <LCD_ReadStatus+0x90>)
 8002750:	224d      	movs	r2, #77	@ 0x4d
 8002752:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002754:	4b1f      	ldr	r3, [pc, #124]	@ (80027d4 <LCD_ReadStatus+0x90>)
 8002756:	2200      	movs	r2, #0
 8002758:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800275a:	4b1e      	ldr	r3, [pc, #120]	@ (80027d4 <LCD_ReadStatus+0x90>)
 800275c:	2201      	movs	r2, #1
 800275e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002760:	4b1c      	ldr	r3, [pc, #112]	@ (80027d4 <LCD_ReadStatus+0x90>)
 8002762:	2201      	movs	r2, #1
 8002764:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002766:	491b      	ldr	r1, [pc, #108]	@ (80027d4 <LCD_ReadStatus+0x90>)
 8002768:	481b      	ldr	r0, [pc, #108]	@ (80027d8 <LCD_ReadStatus+0x94>)
 800276a:	f002 f88b 	bl	8004884 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW, GPIO_PIN_SET);
 800276e:	2201      	movs	r2, #1
 8002770:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002774:	4818      	ldr	r0, [pc, #96]	@ (80027d8 <LCD_ReadStatus+0x94>)
 8002776:	f002 fa49 	bl	8004c0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RS, GPIO_PIN_RESET);
 800277a:	2200      	movs	r2, #0
 800277c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002780:	4815      	ldr	r0, [pc, #84]	@ (80027d8 <LCD_ReadStatus+0x94>)
 8002782:	f002 fa43 	bl	8004c0c <HAL_GPIO_WritePin>
  
  status |= (LCD_ReadNibble() << 4);
 8002786:	f7ff ff95 	bl	80026b4 <LCD_ReadNibble>
 800278a:	4603      	mov	r3, r0
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	b25a      	sxtb	r2, r3
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	4313      	orrs	r3, r2
 8002796:	b25b      	sxtb	r3, r3
 8002798:	71fb      	strb	r3, [r7, #7]
  status |= LCD_ReadNibble();
 800279a:	f7ff ff8b 	bl	80026b4 <LCD_ReadNibble>
 800279e:	4603      	mov	r3, r0
 80027a0:	461a      	mov	r2, r3
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	71fb      	strb	r3, [r7, #7]
  

  GPIO_InitStruct.Pin = LCD_D4|LCD_D5|LCD_D6|LCD_D7;
 80027a8:	4b0a      	ldr	r3, [pc, #40]	@ (80027d4 <LCD_ReadStatus+0x90>)
 80027aa:	224d      	movs	r2, #77	@ 0x4d
 80027ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ae:	4b09      	ldr	r3, [pc, #36]	@ (80027d4 <LCD_ReadStatus+0x90>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	4b07      	ldr	r3, [pc, #28]	@ (80027d4 <LCD_ReadStatus+0x90>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80027ba:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <LCD_ReadStatus+0x90>)
 80027bc:	2201      	movs	r2, #1
 80027be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c0:	4904      	ldr	r1, [pc, #16]	@ (80027d4 <LCD_ReadStatus+0x90>)
 80027c2:	4805      	ldr	r0, [pc, #20]	@ (80027d8 <LCD_ReadStatus+0x94>)
 80027c4:	f002 f85e 	bl	8004884 <HAL_GPIO_Init>

  return status;
 80027c8:	79fb      	ldrb	r3, [r7, #7]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	200001d8 	.word	0x200001d8
 80027d8:	40020800 	.word	0x40020800

080027dc <LCD_WriteData>:


//-----------------------------------------------------------------------------
void LCD_WriteData(char dataToWrite)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW, GPIO_PIN_RESET);
 80027e6:	2200      	movs	r2, #0
 80027e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80027ec:	4810      	ldr	r0, [pc, #64]	@ (8002830 <LCD_WriteData+0x54>)
 80027ee:	f002 fa0d 	bl	8004c0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RS, GPIO_PIN_SET);
 80027f2:	2201      	movs	r2, #1
 80027f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80027f8:	480d      	ldr	r0, [pc, #52]	@ (8002830 <LCD_WriteData+0x54>)
 80027fa:	f002 fa07 	bl	8004c0c <HAL_GPIO_WritePin>
  
  LCD_WriteNibble(dataToWrite >> 4);
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	b2db      	uxtb	r3, r3
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff19 	bl	800263c <LCD_WriteNibble>
  LCD_WriteNibble(dataToWrite & 0x0F);
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	f003 030f 	and.w	r3, r3, #15
 8002810:	b2db      	uxtb	r3, r3
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff12 	bl	800263c <LCD_WriteNibble>
  
  while(LCD_ReadStatus() & 0x80);
 8002818:	bf00      	nop
 800281a:	f7ff ff93 	bl	8002744 <LCD_ReadStatus>
 800281e:	4603      	mov	r3, r0
 8002820:	b25b      	sxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	dbf9      	blt.n	800281a <LCD_WriteData+0x3e>
}
 8002826:	bf00      	nop
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40020800 	.word	0x40020800

08002834 <LCD_WriteCommand>:


//-----------------------------------------------------------------------------
void LCD_WriteCommand(char commandToWrite)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW | LCD_RS, GPIO_PIN_RESET);
 800283e:	2200      	movs	r2, #0
 8002840:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002844:	480d      	ldr	r0, [pc, #52]	@ (800287c <LCD_WriteCommand+0x48>)
 8002846:	f002 f9e1 	bl	8004c0c <HAL_GPIO_WritePin>
  LCD_WriteNibble(commandToWrite >> 4);
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	b2db      	uxtb	r3, r3
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fef3 	bl	800263c <LCD_WriteNibble>
  LCD_WriteNibble(commandToWrite & 0x0F);
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	b2db      	uxtb	r3, r3
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff feec 	bl	800263c <LCD_WriteNibble>
  
  while(LCD_ReadStatus() & 0x80);
 8002864:	bf00      	nop
 8002866:	f7ff ff6d 	bl	8002744 <LCD_ReadStatus>
 800286a:	4603      	mov	r3, r0
 800286c:	b25b      	sxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	dbf9      	blt.n	8002866 <LCD_WriteCommand+0x32>
}
 8002872:	bf00      	nop
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40020800 	.word	0x40020800

08002880 <LCD_WriteText>:


//-----------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  while(*text)
 8002888:	e006      	b.n	8002898 <LCD_WriteText+0x18>
    LCD_WriteData(*text++);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff ffa2 	bl	80027dc <LCD_WriteData>
  while(*text)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f4      	bne.n	800288a <LCD_WriteText+0xa>
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <LCD_GoTo>:


//-----------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	4603      	mov	r3, r0
 80028b2:	460a      	mov	r2, r1
 80028b4:	71fb      	strb	r3, [r7, #7]
 80028b6:	4613      	mov	r3, r2
 80028b8:	71bb      	strb	r3, [r7, #6]
  LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 80028ba:	79bb      	ldrb	r3, [r7, #6]
 80028bc:	019b      	lsls	r3, r3, #6
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	4413      	add	r3, r2
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	b25b      	sxtb	r3, r3
 80028c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80028cc:	b25b      	sxtb	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ffaf 	bl	8002834 <LCD_WriteCommand>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <LCD_WriteTextXY>:


//-----------------------------------------------------------------------------
void LCD_WriteTextXY(char * text, unsigned char x, unsigned char y)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	70fb      	strb	r3, [r7, #3]
 80028ea:	4613      	mov	r3, r2
 80028ec:	70bb      	strb	r3, [r7, #2]
  LCD_GoTo(x,y);
 80028ee:	78ba      	ldrb	r2, [r7, #2]
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ffd8 	bl	80028aa <LCD_GoTo>
  while(*text)
 80028fa:	e006      	b.n	800290a <LCD_WriteTextXY+0x2c>
    LCD_WriteData(*text++);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff69 	bl	80027dc <LCD_WriteData>
  while(*text)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f4      	bne.n	80028fc <LCD_WriteTextXY+0x1e>
}
 8002912:	bf00      	nop
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <LCD_Initialize>:
}


//-----------------------------------------------------------------------------
void LCD_Initialize(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
  volatile unsigned char i = 0;
 8002922:	2300      	movs	r3, #0
 8002924:	77fb      	strb	r3, [r7, #31]
  volatile unsigned int delayCnt = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	61bb      	str	r3, [r7, #24]
  
  if (LCD_GPIO == GPIOA) __HAL_RCC_GPIOA_CLK_ENABLE(); else
  if (LCD_GPIO == GPIOB) __HAL_RCC_GPIOB_CLK_ENABLE(); else
  if (LCD_GPIO == GPIOC) __HAL_RCC_GPIOC_CLK_ENABLE(); else
 800292a:	4b34      	ldr	r3, [pc, #208]	@ (80029fc <LCD_Initialize+0xe0>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	4a33      	ldr	r2, [pc, #204]	@ (80029fc <LCD_Initialize+0xe0>)
 8002930:	f043 0304 	orr.w	r3, r3, #4
 8002934:	6313      	str	r3, [r2, #48]	@ 0x30
 8002936:	4b31      	ldr	r3, [pc, #196]	@ (80029fc <LCD_Initialize+0xe0>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
  if (LCD_GPIO == GPIOD) __HAL_RCC_GPIOD_CLK_ENABLE(); else
  if (LCD_GPIO == GPIOE) __HAL_RCC_GPIOE_CLK_ENABLE();


  GPIO_InitStruct.Pin = LCD_D4|LCD_D5|LCD_D6|LCD_D7|LCD_RS|LCD_RW|LCD_EN;
 8002942:	4b2f      	ldr	r3, [pc, #188]	@ (8002a00 <LCD_Initialize+0xe4>)
 8002944:	f641 424d 	movw	r2, #7245	@ 0x1c4d
 8002948:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294a:	4b2d      	ldr	r3, [pc, #180]	@ (8002a00 <LCD_Initialize+0xe4>)
 800294c:	2201      	movs	r2, #1
 800294e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	4b2b      	ldr	r3, [pc, #172]	@ (8002a00 <LCD_Initialize+0xe4>)
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002956:	4b2a      	ldr	r3, [pc, #168]	@ (8002a00 <LCD_Initialize+0xe4>)
 8002958:	2201      	movs	r2, #1
 800295a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_GPIO, &GPIO_InitStruct);
 800295c:	4928      	ldr	r1, [pc, #160]	@ (8002a00 <LCD_Initialize+0xe4>)
 800295e:	4829      	ldr	r0, [pc, #164]	@ (8002a04 <LCD_Initialize+0xe8>)
 8002960:	f001 ff90 	bl	8004884 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RS | LCD_EN | LCD_RW, GPIO_PIN_RESET);
 8002964:	2200      	movs	r2, #0
 8002966:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 800296a:	4826      	ldr	r0, [pc, #152]	@ (8002a04 <LCD_Initialize+0xe8>)
 800296c:	f002 f94e 	bl	8004c0c <HAL_GPIO_WritePin>
  

  for(delayCnt = 0; delayCnt < 300000; delayCnt++);
 8002970:	2300      	movs	r3, #0
 8002972:	61bb      	str	r3, [r7, #24]
 8002974:	e002      	b.n	800297c <LCD_Initialize+0x60>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	3301      	adds	r3, #1
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	4a22      	ldr	r2, [pc, #136]	@ (8002a08 <LCD_Initialize+0xec>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d9f8      	bls.n	8002976 <LCD_Initialize+0x5a>

  for(i = 0; i < 3; i++) {
 8002984:	2300      	movs	r3, #0
 8002986:	77fb      	strb	r3, [r7, #31]
 8002988:	e012      	b.n	80029b0 <LCD_Initialize+0x94>
    LCD_WriteNibble(0x03);            
 800298a:	2003      	movs	r0, #3
 800298c:	f7ff fe56 	bl	800263c <LCD_WriteNibble>
    for(delayCnt = 0; delayCnt < 30000; delayCnt++);
 8002990:	2300      	movs	r3, #0
 8002992:	61bb      	str	r3, [r7, #24]
 8002994:	e002      	b.n	800299c <LCD_Initialize+0x80>
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	3301      	adds	r3, #1
 800299a:	61bb      	str	r3, [r7, #24]
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	f247 522f 	movw	r2, #29999	@ 0x752f
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d9f7      	bls.n	8002996 <LCD_Initialize+0x7a>
  for(i = 0; i < 3; i++) {
 80029a6:	7ffb      	ldrb	r3, [r7, #31]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	3301      	adds	r3, #1
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	77fb      	strb	r3, [r7, #31]
 80029b0:	7ffb      	ldrb	r3, [r7, #31]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d9e8      	bls.n	800298a <LCD_Initialize+0x6e>
  }
  
  LCD_WriteNibble(0x02);             
 80029b8:	2002      	movs	r0, #2
 80029ba:	f7ff fe3f 	bl	800263c <LCD_WriteNibble>
  
  for(delayCnt = 0; delayCnt < 6000; delayCnt++);
 80029be:	2300      	movs	r3, #0
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	e002      	b.n	80029ca <LCD_Initialize+0xae>
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	3301      	adds	r3, #1
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f241 726f 	movw	r2, #5999	@ 0x176f
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d9f7      	bls.n	80029c4 <LCD_Initialize+0xa8>
     
  LCD_WriteCommand(HD44780_FUNCTION_SET | 
 80029d4:	2028      	movs	r0, #40	@ 0x28
 80029d6:	f7ff ff2d 	bl	8002834 <LCD_WriteCommand>
                   HD44780_FONT5x7 | 
                   HD44780_TWO_LINE | 
                   HD44780_4_BIT);
  
  LCD_WriteCommand(HD44780_DISPLAY_ONOFF | 
 80029da:	2008      	movs	r0, #8
 80029dc:	f7ff ff2a 	bl	8002834 <LCD_WriteCommand>
                   HD44780_DISPLAY_OFF); 
  
  LCD_WriteCommand(HD44780_CLEAR); 
 80029e0:	2001      	movs	r0, #1
 80029e2:	f7ff ff27 	bl	8002834 <LCD_WriteCommand>
  
  LCD_WriteCommand(HD44780_ENTRY_MODE | 
 80029e6:	2006      	movs	r0, #6
 80029e8:	f7ff ff24 	bl	8002834 <LCD_WriteCommand>
                   HD44780_EM_SHIFT_CURSOR | 
                   HD44780_EM_INCREMENT);
  
  LCD_WriteCommand(HD44780_DISPLAY_ONOFF | 
 80029ec:	200c      	movs	r0, #12
 80029ee:	f7ff ff21 	bl	8002834 <LCD_WriteCommand>
                   HD44780_DISPLAY_ON |
                   HD44780_CURSOR_OFF | 
                   HD44780_CURSOR_NOBLINK);
}
 80029f2:	bf00      	nop
 80029f4:	3720      	adds	r7, #32
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40023800 	.word	0x40023800
 8002a00:	200001d8 	.word	0x200001d8
 8002a04:	40020800 	.word	0x40020800
 8002a08:	000493df 	.word	0x000493df

08002a0c <move_menu>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void move_menu(char *a[])
  {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	symbol[0] = keypad_readkey();
 8002a14:	f7ff fdcc 	bl	80025b0 <keypad_readkey>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4b29      	ldr	r3, [pc, #164]	@ (8002ac4 <move_menu+0xb8>)
 8002a1e:	701a      	strb	r2, [r3, #0]
	  if (symbol[0] == 'B' && (position<max_pos)) {
 8002a20:	4b28      	ldr	r3, [pc, #160]	@ (8002ac4 <move_menu+0xb8>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b42      	cmp	r3, #66	@ 0x42
 8002a26:	d10e      	bne.n	8002a46 <move_menu+0x3a>
 8002a28:	4b27      	ldr	r3, [pc, #156]	@ (8002ac8 <move_menu+0xbc>)
 8002a2a:	781a      	ldrb	r2, [r3, #0]
 8002a2c:	4b27      	ldr	r3, [pc, #156]	@ (8002acc <move_menu+0xc0>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d208      	bcs.n	8002a46 <move_menu+0x3a>
	  	   	  position++;
 8002a34:	4b24      	ldr	r3, [pc, #144]	@ (8002ac8 <move_menu+0xbc>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	4b22      	ldr	r3, [pc, #136]	@ (8002ac8 <move_menu+0xbc>)
 8002a3e:	701a      	strb	r2, [r3, #0]
	  	   	  refreshLCD=true;
 8002a40:	4b23      	ldr	r3, [pc, #140]	@ (8002ad0 <move_menu+0xc4>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]
	  	   	}

	  	   	if (symbol[0] == 'A' && (position>1)) {
 8002a46:	4b1f      	ldr	r3, [pc, #124]	@ (8002ac4 <move_menu+0xb8>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b41      	cmp	r3, #65	@ 0x41
 8002a4c:	d10c      	bne.n	8002a68 <move_menu+0x5c>
 8002a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac8 <move_menu+0xbc>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d908      	bls.n	8002a68 <move_menu+0x5c>
	  	   	  position--;
 8002a56:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac8 <move_menu+0xbc>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac8 <move_menu+0xbc>)
 8002a60:	701a      	strb	r2, [r3, #0]
	  	   	  refreshLCD=true;
 8002a62:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad0 <move_menu+0xc4>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
	  	   	}
	  	  if (refreshLCD){                           //Odswiezanie LCD tylko przy zmiane zawartosci - usuwa problem "migotania" LCD
 8002a68:	4b19      	ldr	r3, [pc, #100]	@ (8002ad0 <move_menu+0xc4>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d024      	beq.n	8002aba <move_menu+0xae>
	   	  LCD_WriteCommand(HD44780_CLEAR);
 8002a70:	2001      	movs	r0, #1
 8002a72:	f7ff fedf 	bl	8002834 <LCD_WriteCommand>
	   	  LCD_WriteText("->");
 8002a76:	4817      	ldr	r0, [pc, #92]	@ (8002ad4 <move_menu+0xc8>)
 8002a78:	f7ff ff02 	bl	8002880 <LCD_WriteText>
	   	  LCD_WriteText(a[position-1]);
 8002a7c:	4b12      	ldr	r3, [pc, #72]	@ (8002ac8 <move_menu+0xbc>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fef5 	bl	8002880 <LCD_WriteText>
	   	  if (position<4){
 8002a96:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac8 <move_menu+0xbc>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d80a      	bhi.n	8002ab4 <move_menu+0xa8>
	   		LCD_WriteTextXY(a[position-1+1],2,1);
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac8 <move_menu+0xbc>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	2102      	movs	r1, #2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ff15 	bl	80028de <LCD_WriteTextXY>
	   	  }
	   	  refreshLCD=false;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <move_menu+0xc4>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
	   	}
  }
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	200001ec 	.word	0x200001ec
 8002ac8:	20000054 	.word	0x20000054
 8002acc:	20000055 	.word	0x20000055
 8002ad0:	2000029b 	.word	0x2000029b
 8002ad4:	08009c68 	.word	0x08009c68

08002ad8 <roundToTwoDecimals>:

double roundToTwoDecimals(double value) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	ed87 0b00 	vstr	d0, [r7]
	return floor(value * 100.0 + 0.5) / 100.0;
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	4b15      	ldr	r3, [pc, #84]	@ (8002b3c <roundToTwoDecimals+0x64>)
 8002ae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002aec:	f7fd fda4 	bl	8000638 <__aeabi_dmul>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	4b10      	ldr	r3, [pc, #64]	@ (8002b40 <roundToTwoDecimals+0x68>)
 8002afe:	f7fd fbe5 	bl	80002cc <__adddf3>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	ec43 2b17 	vmov	d7, r2, r3
 8002b0a:	eeb0 0a47 	vmov.f32	s0, s14
 8002b0e:	eef0 0a67 	vmov.f32	s1, s15
 8002b12:	f006 ffb5 	bl	8009a80 <floor>
 8002b16:	ec51 0b10 	vmov	r0, r1, d0
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	4b07      	ldr	r3, [pc, #28]	@ (8002b3c <roundToTwoDecimals+0x64>)
 8002b20:	f7fd feb4 	bl	800088c <__aeabi_ddiv>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	ec43 2b17 	vmov	d7, r2, r3
}
 8002b2c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b30:	eef0 0a67 	vmov.f32	s1, s15
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40590000 	.word	0x40590000
 8002b40:	3fe00000 	.word	0x3fe00000

08002b44 <sendBluetoothData>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void sendBluetoothData(const char* data){
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	snprintf(buffer, sizeof(buffer), "%s\n", data);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8002b80 <sendBluetoothData+0x3c>)
 8002b50:	2164      	movs	r1, #100	@ 0x64
 8002b52:	480c      	ldr	r0, [pc, #48]	@ (8002b84 <sendBluetoothData+0x40>)
 8002b54:	f006 fae0 	bl	8009118 <sniprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002b58:	480a      	ldr	r0, [pc, #40]	@ (8002b84 <sendBluetoothData+0x40>)
 8002b5a:	f7fd fb59 	bl	8000210 <strlen>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295
 8002b66:	4907      	ldr	r1, [pc, #28]	@ (8002b84 <sendBluetoothData+0x40>)
 8002b68:	4807      	ldr	r0, [pc, #28]	@ (8002b88 <sendBluetoothData+0x44>)
 8002b6a:	f005 fdc5 	bl	80086f8 <HAL_UART_Transmit>
	HAL_Delay(500);
 8002b6e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b72:	f001 fd2f 	bl	80045d4 <HAL_Delay>
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	08009c6c 	.word	0x08009c6c
 8002b84:	2000022c 	.word	0x2000022c
 8002b88:	2000041c 	.word	0x2000041c

08002b8c <HAL_TIM_PeriodElapsedCallback>:
        HAL_UART_Receive_IT(huart, &rxBuffer[rxIndex], 1);
    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  if(htim == &htim2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a1a      	ldr	r2, [pc, #104]	@ (8002c00 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d12d      	bne.n	8002bf8 <HAL_TIM_PeriodElapsedCallback+0x6c>
  {
	  if((PIR_Garage == true || PIR_Kitchen == true || PIR_Livingroom == true) && alarm == true)
 8002b9c:	4b19      	ldr	r3, [pc, #100]	@ (8002c04 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d107      	bne.n	8002bb4 <HAL_TIM_PeriodElapsedCallback+0x28>
 8002ba4:	4b18      	ldr	r3, [pc, #96]	@ (8002c08 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d103      	bne.n	8002bb4 <HAL_TIM_PeriodElapsedCallback+0x28>
 8002bac:	4b17      	ldr	r3, [pc, #92]	@ (8002c0c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d009      	beq.n	8002bc8 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8002bb4:	4b16      	ldr	r3, [pc, #88]	@ (8002c10 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_TIM_PeriodElapsedCallback+0x3c>
	  {
		  PIR_detected = true, alarmLED = true;
 8002bbc:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	701a      	strb	r2, [r3, #0]
 8002bc2:	4b15      	ldr	r3, [pc, #84]	@ (8002c18 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	701a      	strb	r2, [r3, #0]
	  }

	  if(alarmLED == true && PIR_detected == true)
 8002bc8:	4b13      	ldr	r3, [pc, #76]	@ (8002c18 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00d      	beq.n	8002bec <HAL_TIM_PeriodElapsedCallback+0x60>
 8002bd0:	4b10      	ldr	r3, [pc, #64]	@ (8002c14 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d009      	beq.n	8002bec <HAL_TIM_PeriodElapsedCallback+0x60>
	  {
		  HAL_GPIO_TogglePin(Alarm_LED_GPIO_Port, Alarm_LED_Pin);
 8002bd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002bdc:	480f      	ldr	r0, [pc, #60]	@ (8002c1c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002bde:	f002 f82e 	bl	8004c3e <HAL_GPIO_TogglePin>
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002be2:	2108      	movs	r1, #8
 8002be4:	4806      	ldr	r0, [pc, #24]	@ (8002c00 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002be6:	f004 fc2f 	bl	8007448 <HAL_TIM_PWM_Start>
	  else
	  {
		  HAL_GPIO_WritePin(Alarm_LED_GPIO_Port, Alarm_LED_Pin, GPIO_PIN_RESET);
	  };
  }
}
 8002bea:	e005      	b.n	8002bf8 <HAL_TIM_PeriodElapsedCallback+0x6c>
		  HAL_GPIO_WritePin(Alarm_LED_GPIO_Port, Alarm_LED_Pin, GPIO_PIN_RESET);
 8002bec:	2200      	movs	r2, #0
 8002bee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002bf2:	480a      	ldr	r0, [pc, #40]	@ (8002c1c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002bf4:	f002 f80a 	bl	8004c0c <HAL_GPIO_WritePin>
}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	20000338 	.word	0x20000338
 8002c04:	2000029e 	.word	0x2000029e
 8002c08:	200002a0 	.word	0x200002a0
 8002c0c:	2000029f 	.word	0x2000029f
 8002c10:	2000029c 	.word	0x2000029c
 8002c14:	200002a1 	.word	0x200002a1
 8002c18:	2000029d 	.word	0x2000029d
 8002c1c:	40021000 	.word	0x40021000

08002c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c20:	b5b0      	push	{r4, r5, r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c26:	f001 fc78 	bl	800451a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c2a:	f000 fed3 	bl	80039d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c2e:	f7ff fa7d 	bl	800212c <MX_GPIO_Init>
  MX_TIM2_Init();
 8002c32:	f001 f893 	bl	8003d5c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002c36:	f001 f915 	bl	8003e64 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002c3a:	f001 f997 	bl	8003f6c <MX_TIM4_Init>
  MX_SPI4_Init();
 8002c3e:	f000 ff37 	bl	8003ab0 <MX_SPI4_Init>
  MX_I2C1_Init();
 8002c42:	f7ff fbe1 	bl	8002408 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8002c46:	f001 fbaf 	bl	80043a8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  //LOAD CONFIG
  //alarm_config();
  keypad_config();
 8002c4a:	f7ff fc7d 	bl	8002548 <keypad_config>
  LCD_Initialize();
 8002c4e:	f7ff fe65 	bl	800291c <LCD_Initialize>
 //TIMERS AND INTERRUPTS
  HAL_TIM_Base_Start_IT(&htim2);
 8002c52:	48ac      	ldr	r0, [pc, #688]	@ (8002f04 <main+0x2e4>)
 8002c54:	f004 faf0 	bl	8007238 <HAL_TIM_Base_Start_IT>
  BMP2_Init(&bmp2dev);
 8002c58:	48ab      	ldr	r0, [pc, #684]	@ (8002f08 <main+0x2e8>)
 8002c5a:	f7ff f937 	bl	8001ecc <BMP2_Init>
  //START SCREEN
  LCD_WriteCommand(HD44780_CLEAR);
 8002c5e:	2001      	movs	r0, #1
 8002c60:	f7ff fde8 	bl	8002834 <LCD_WriteCommand>
  LCD_WriteText("Welcome to");
 8002c64:	48a9      	ldr	r0, [pc, #676]	@ (8002f0c <main+0x2ec>)
 8002c66:	f7ff fe0b 	bl	8002880 <LCD_WriteText>
  LCD_WriteTextXY("Smarthome system",0,1);
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	48a8      	ldr	r0, [pc, #672]	@ (8002f10 <main+0x2f0>)
 8002c70:	f7ff fe35 	bl	80028de <LCD_WriteTextXY>
  HAL_Delay(3000);
 8002c74:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002c78:	f001 fcac 	bl	80045d4 <HAL_Delay>
  refreshLCD = true;
 8002c7c:	4ba5      	ldr	r3, [pc, #660]	@ (8002f14 <main+0x2f4>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(PIR_Garage_GPIO_Port, PIR_Garage_Pin) == GPIO_PIN_SET){PIR_Garage = true;}
 8002c82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c86:	48a4      	ldr	r0, [pc, #656]	@ (8002f18 <main+0x2f8>)
 8002c88:	f001 ffa8 	bl	8004bdc <HAL_GPIO_ReadPin>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d103      	bne.n	8002c9a <main+0x7a>
 8002c92:	4ba2      	ldr	r3, [pc, #648]	@ (8002f1c <main+0x2fc>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
 8002c98:	e002      	b.n	8002ca0 <main+0x80>
	  	  else {PIR_Garage = false;};
 8002c9a:	4ba0      	ldr	r3, [pc, #640]	@ (8002f1c <main+0x2fc>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(PIR_Kitchen_GPIO_Port, PIR_Kitchen_Pin) == GPIO_PIN_SET){PIR_Kitchen = true;}
 8002ca0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002ca4:	489c      	ldr	r0, [pc, #624]	@ (8002f18 <main+0x2f8>)
 8002ca6:	f001 ff99 	bl	8004bdc <HAL_GPIO_ReadPin>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d103      	bne.n	8002cb8 <main+0x98>
 8002cb0:	4b9b      	ldr	r3, [pc, #620]	@ (8002f20 <main+0x300>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	701a      	strb	r2, [r3, #0]
 8002cb6:	e002      	b.n	8002cbe <main+0x9e>
	  	  else {PIR_Kitchen = false;};
 8002cb8:	4b99      	ldr	r3, [pc, #612]	@ (8002f20 <main+0x300>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(PIR_Livingroom_GPIO_Port, PIR_Livingroom_Pin) == GPIO_PIN_SET){PIR_Livingroom = true;}
 8002cbe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002cc2:	4895      	ldr	r0, [pc, #596]	@ (8002f18 <main+0x2f8>)
 8002cc4:	f001 ff8a 	bl	8004bdc <HAL_GPIO_ReadPin>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d103      	bne.n	8002cd6 <main+0xb6>
 8002cce:	4b95      	ldr	r3, [pc, #596]	@ (8002f24 <main+0x304>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	701a      	strb	r2, [r3, #0]
 8002cd4:	e002      	b.n	8002cdc <main+0xbc>
	  	  else{PIR_Livingroom = false;};
 8002cd6:	4b93      	ldr	r3, [pc, #588]	@ (8002f24 <main+0x304>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]
	  move_menu(act_menu);
 8002cdc:	4b92      	ldr	r3, [pc, #584]	@ (8002f28 <main+0x308>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fe93 	bl	8002a0c <move_menu>
 	if (symbol[0] == '*' && act_menu == mainmenu){
 8002ce6:	4b91      	ldr	r3, [pc, #580]	@ (8002f2c <main+0x30c>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b2a      	cmp	r3, #42	@ 0x2a
 8002cec:	f040 80af 	bne.w	8002e4e <main+0x22e>
 8002cf0:	4b8d      	ldr	r3, [pc, #564]	@ (8002f28 <main+0x308>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a8e      	ldr	r2, [pc, #568]	@ (8002f30 <main+0x310>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	f040 80a9 	bne.w	8002e4e <main+0x22e>
 		refreshLCD = true;
 8002cfc:	4b85      	ldr	r3, [pc, #532]	@ (8002f14 <main+0x2f4>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	701a      	strb	r2, [r3, #0]
 		switch (position){
 8002d02:	4b8c      	ldr	r3, [pc, #560]	@ (8002f34 <main+0x314>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	f200 8094 	bhi.w	8002e36 <main+0x216>
 8002d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d14 <main+0xf4>)
 8002d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d14:	08002d25 	.word	0x08002d25
 8002d18:	08002d39 	.word	0x08002d39
 8002d1c:	08002d4d 	.word	0x08002d4d
 8002d20:	08002d61 	.word	0x08002d61
			case 1: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8002d24:	4b80      	ldr	r3, [pc, #512]	@ (8002f28 <main+0x308>)
 8002d26:	4a84      	ldr	r2, [pc, #528]	@ (8002f38 <main+0x318>)
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	4b82      	ldr	r3, [pc, #520]	@ (8002f34 <main+0x314>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	701a      	strb	r2, [r3, #0]
 8002d30:	4b82      	ldr	r3, [pc, #520]	@ (8002f3c <main+0x31c>)
 8002d32:	2202      	movs	r2, #2
 8002d34:	701a      	strb	r2, [r3, #0]
 8002d36:	e088      	b.n	8002e4a <main+0x22a>
			case 2: act_menu = menuLivingroom, position = 1, max_pos = 2; break;
 8002d38:	4b7b      	ldr	r3, [pc, #492]	@ (8002f28 <main+0x308>)
 8002d3a:	4a81      	ldr	r2, [pc, #516]	@ (8002f40 <main+0x320>)
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	4b7d      	ldr	r3, [pc, #500]	@ (8002f34 <main+0x314>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	701a      	strb	r2, [r3, #0]
 8002d44:	4b7d      	ldr	r3, [pc, #500]	@ (8002f3c <main+0x31c>)
 8002d46:	2202      	movs	r2, #2
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	e07e      	b.n	8002e4a <main+0x22a>
			case 3: act_menu = menuGarage, position = 1, max_pos = 1; break;
 8002d4c:	4b76      	ldr	r3, [pc, #472]	@ (8002f28 <main+0x308>)
 8002d4e:	4a7d      	ldr	r2, [pc, #500]	@ (8002f44 <main+0x324>)
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	4b78      	ldr	r3, [pc, #480]	@ (8002f34 <main+0x314>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]
 8002d58:	4b78      	ldr	r3, [pc, #480]	@ (8002f3c <main+0x31c>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	701a      	strb	r2, [r3, #0]
 8002d5e:	e074      	b.n	8002e4a <main+0x22a>
			case 4:
					i = 0;
 8002d60:	4b79      	ldr	r3, [pc, #484]	@ (8002f48 <main+0x328>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
					HAL_Delay(200);
 8002d66:	20c8      	movs	r0, #200	@ 0xc8
 8002d68:	f001 fc34 	bl	80045d4 <HAL_Delay>
					memset(buff, 0, sizeof(buff));
 8002d6c:	2205      	movs	r2, #5
 8002d6e:	2100      	movs	r1, #0
 8002d70:	4876      	ldr	r0, [pc, #472]	@ (8002f4c <main+0x32c>)
 8002d72:	f006 fa05 	bl	8009180 <memset>
					LCD_WriteCommand(HD44780_CLEAR);
 8002d76:	2001      	movs	r0, #1
 8002d78:	f7ff fd5c 	bl	8002834 <LCD_WriteCommand>
					LCD_WriteText("Write PIN");
 8002d7c:	4874      	ldr	r0, [pc, #464]	@ (8002f50 <main+0x330>)
 8002d7e:	f7ff fd7f 	bl	8002880 <LCD_WriteText>
					while(1) {
						refreshLCD = true;
 8002d82:	4b64      	ldr	r3, [pc, #400]	@ (8002f14 <main+0x2f4>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	701a      	strb	r2, [r3, #0]
						symbol[0] = keypad_readkey();
 8002d88:	f7ff fc12 	bl	80025b0 <keypad_readkey>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	461a      	mov	r2, r3
 8002d90:	4b66      	ldr	r3, [pc, #408]	@ (8002f2c <main+0x30c>)
 8002d92:	701a      	strb	r2, [r3, #0]
						if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 8002d94:	4b65      	ldr	r3, [pc, #404]	@ (8002f2c <main+0x30c>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b2f      	cmp	r3, #47	@ 0x2f
 8002d9a:	d922      	bls.n	8002de2 <main+0x1c2>
 8002d9c:	4b63      	ldr	r3, [pc, #396]	@ (8002f2c <main+0x30c>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b39      	cmp	r3, #57	@ 0x39
 8002da2:	d81e      	bhi.n	8002de2 <main+0x1c2>
 8002da4:	4b68      	ldr	r3, [pc, #416]	@ (8002f48 <main+0x328>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d81a      	bhi.n	8002de2 <main+0x1c2>
							buff[i] = symbol[0];
 8002dac:	4b66      	ldr	r3, [pc, #408]	@ (8002f48 <main+0x328>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a5e      	ldr	r2, [pc, #376]	@ (8002f2c <main+0x30c>)
 8002db2:	7811      	ldrb	r1, [r2, #0]
 8002db4:	4a65      	ldr	r2, [pc, #404]	@ (8002f4c <main+0x32c>)
 8002db6:	54d1      	strb	r1, [r2, r3]
							i++;
 8002db8:	4b63      	ldr	r3, [pc, #396]	@ (8002f48 <main+0x328>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	4a62      	ldr	r2, [pc, #392]	@ (8002f48 <main+0x328>)
 8002dc0:	6013      	str	r3, [r2, #0]
							buff[i] = '\0';
 8002dc2:	4b61      	ldr	r3, [pc, #388]	@ (8002f48 <main+0x328>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a61      	ldr	r2, [pc, #388]	@ (8002f4c <main+0x32c>)
 8002dc8:	2100      	movs	r1, #0
 8002dca:	54d1      	strb	r1, [r2, r3]
							LCD_WriteCommand(HD44780_CLEAR);
 8002dcc:	2001      	movs	r0, #1
 8002dce:	f7ff fd31 	bl	8002834 <LCD_WriteCommand>
							LCD_WriteText("PIN: ");
 8002dd2:	4860      	ldr	r0, [pc, #384]	@ (8002f54 <main+0x334>)
 8002dd4:	f7ff fd54 	bl	8002880 <LCD_WriteText>
							LCD_WriteTextXY(buff, 0, 1);
 8002dd8:	2201      	movs	r2, #1
 8002dda:	2100      	movs	r1, #0
 8002ddc:	485b      	ldr	r0, [pc, #364]	@ (8002f4c <main+0x32c>)
 8002dde:	f7ff fd7e 	bl	80028de <LCD_WriteTextXY>
						}
						HAL_Delay(300);
 8002de2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002de6:	f001 fbf5 	bl	80045d4 <HAL_Delay>
						symbol[0] = keypad_readkey();
 8002dea:	f7ff fbe1 	bl	80025b0 <keypad_readkey>
 8002dee:	4603      	mov	r3, r0
 8002df0:	461a      	mov	r2, r3
 8002df2:	4b4e      	ldr	r3, [pc, #312]	@ (8002f2c <main+0x30c>)
 8002df4:	701a      	strb	r2, [r3, #0]
						if(symbol[0] == '*') {
 8002df6:	4b4d      	ldr	r3, [pc, #308]	@ (8002f2c <main+0x30c>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8002dfc:	d115      	bne.n	8002e2a <main+0x20a>
							pinKey = atoi(buff);
 8002dfe:	4853      	ldr	r0, [pc, #332]	@ (8002f4c <main+0x32c>)
 8002e00:	f006 f901 	bl	8009006 <atoi>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4a54      	ldr	r2, [pc, #336]	@ (8002f58 <main+0x338>)
 8002e08:	6013      	str	r3, [r2, #0]
							if(pinKey == 1234) {
 8002e0a:	4b53      	ldr	r3, [pc, #332]	@ (8002f58 <main+0x338>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d10d      	bne.n	8002e32 <main+0x212>
								act_menu = menuAlarm, position = 1, max_pos = 2; break;
 8002e16:	4b44      	ldr	r3, [pc, #272]	@ (8002f28 <main+0x308>)
 8002e18:	4a50      	ldr	r2, [pc, #320]	@ (8002f5c <main+0x33c>)
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	4b45      	ldr	r3, [pc, #276]	@ (8002f34 <main+0x314>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	701a      	strb	r2, [r3, #0]
 8002e22:	4b46      	ldr	r3, [pc, #280]	@ (8002f3c <main+0x31c>)
 8002e24:	2202      	movs	r2, #2
 8002e26:	701a      	strb	r2, [r3, #0]
 8002e28:	e004      	b.n	8002e34 <main+0x214>
							}
							break;
						}
						HAL_Delay(100);
 8002e2a:	2064      	movs	r0, #100	@ 0x64
 8002e2c:	f001 fbd2 	bl	80045d4 <HAL_Delay>
						refreshLCD = true;
 8002e30:	e7a7      	b.n	8002d82 <main+0x162>
							break;
 8002e32:	bf00      	nop
					}
					break;
 8002e34:	e009      	b.n	8002e4a <main+0x22a>
			default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8002e36:	4b3c      	ldr	r3, [pc, #240]	@ (8002f28 <main+0x308>)
 8002e38:	4a3f      	ldr	r2, [pc, #252]	@ (8002f38 <main+0x318>)
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	4b3d      	ldr	r3, [pc, #244]	@ (8002f34 <main+0x314>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	701a      	strb	r2, [r3, #0]
 8002e42:	4b3e      	ldr	r3, [pc, #248]	@ (8002f3c <main+0x31c>)
 8002e44:	2202      	movs	r2, #2
 8002e46:	701a      	strb	r2, [r3, #0]
 8002e48:	bf00      	nop
 		switch (position){
 8002e4a:	f000 bd5c 	b.w	8003906 <main+0xce6>
 		}
 	}
 	else if(symbol[0] == '*' && act_menu == menuAlarm){
 8002e4e:	4b37      	ldr	r3, [pc, #220]	@ (8002f2c <main+0x30c>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e54:	f040 809c 	bne.w	8002f90 <main+0x370>
 8002e58:	4b33      	ldr	r3, [pc, #204]	@ (8002f28 <main+0x308>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a3f      	ldr	r2, [pc, #252]	@ (8002f5c <main+0x33c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	f040 8096 	bne.w	8002f90 <main+0x370>
 		refreshLCD = true;
 8002e64:	4b2b      	ldr	r3, [pc, #172]	@ (8002f14 <main+0x2f4>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	701a      	strb	r2, [r3, #0]
 		switch (position){
 8002e6a:	4b32      	ldr	r3, [pc, #200]	@ (8002f34 <main+0x314>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d002      	beq.n	8002e78 <main+0x258>
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d021      	beq.n	8002eba <main+0x29a>
 8002e76:	e07f      	b.n	8002f78 <main+0x358>
			case 1: alarm = true;
 8002e78:	4b39      	ldr	r3, [pc, #228]	@ (8002f60 <main+0x340>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
				PIR_detected = false;
 8002e7e:	4b39      	ldr	r3, [pc, #228]	@ (8002f64 <main+0x344>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]
				alarmLED = false;
 8002e84:	4b38      	ldr	r3, [pc, #224]	@ (8002f68 <main+0x348>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	701a      	strb	r2, [r3, #0]
				LCD_WriteCommand(HD44780_CLEAR);
 8002e8a:	2001      	movs	r0, #1
 8002e8c:	f7ff fcd2 	bl	8002834 <LCD_WriteCommand>
				LCD_WriteText("Alarm");
 8002e90:	4836      	ldr	r0, [pc, #216]	@ (8002f6c <main+0x34c>)
 8002e92:	f7ff fcf5 	bl	8002880 <LCD_WriteText>
				LCD_WriteTextXY("turned on",0,1);
 8002e96:	2201      	movs	r2, #1
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4835      	ldr	r0, [pc, #212]	@ (8002f70 <main+0x350>)
 8002e9c:	f7ff fd1f 	bl	80028de <LCD_WriteTextXY>
				HAL_TIM_Base_Start_IT(&htim2);
 8002ea0:	4818      	ldr	r0, [pc, #96]	@ (8002f04 <main+0x2e4>)
 8002ea2:	f004 f9c9 	bl	8007238 <HAL_TIM_Base_Start_IT>
				act_menu = mainmenu, position = 1, max_pos = 4;
 8002ea6:	4b20      	ldr	r3, [pc, #128]	@ (8002f28 <main+0x308>)
 8002ea8:	4a21      	ldr	r2, [pc, #132]	@ (8002f30 <main+0x310>)
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	4b21      	ldr	r3, [pc, #132]	@ (8002f34 <main+0x314>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	701a      	strb	r2, [r3, #0]
 8002eb2:	4b22      	ldr	r3, [pc, #136]	@ (8002f3c <main+0x31c>)
 8002eb4:	2204      	movs	r2, #4
 8002eb6:	701a      	strb	r2, [r3, #0]
				break;
 8002eb8:	e068      	b.n	8002f8c <main+0x36c>

 	 		case 2: alarm = false;
 8002eba:	4b29      	ldr	r3, [pc, #164]	@ (8002f60 <main+0x340>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	701a      	strb	r2, [r3, #0]
				PIR_detected = false;
 8002ec0:	4b28      	ldr	r3, [pc, #160]	@ (8002f64 <main+0x344>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	701a      	strb	r2, [r3, #0]
				alarmLED = false;
 8002ec6:	4b28      	ldr	r3, [pc, #160]	@ (8002f68 <main+0x348>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
				LCD_WriteCommand(HD44780_CLEAR);
 8002ecc:	2001      	movs	r0, #1
 8002ece:	f7ff fcb1 	bl	8002834 <LCD_WriteCommand>
				LCD_WriteText("Alarm");
 8002ed2:	4826      	ldr	r0, [pc, #152]	@ (8002f6c <main+0x34c>)
 8002ed4:	f7ff fcd4 	bl	8002880 <LCD_WriteText>
				LCD_WriteTextXY("turned off",0,1);
 8002ed8:	2201      	movs	r2, #1
 8002eda:	2100      	movs	r1, #0
 8002edc:	4825      	ldr	r0, [pc, #148]	@ (8002f74 <main+0x354>)
 8002ede:	f7ff fcfe 	bl	80028de <LCD_WriteTextXY>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002ee2:	2108      	movs	r1, #8
 8002ee4:	4807      	ldr	r0, [pc, #28]	@ (8002f04 <main+0x2e4>)
 8002ee6:	f004 fba9 	bl	800763c <HAL_TIM_PWM_Stop>
				HAL_TIM_Base_Stop_IT(&htim2);
 8002eea:	4806      	ldr	r0, [pc, #24]	@ (8002f04 <main+0x2e4>)
 8002eec:	f004 fa1c 	bl	8007328 <HAL_TIM_Base_Stop_IT>
				act_menu = mainmenu, position = 1, max_pos = 4;
 8002ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8002f28 <main+0x308>)
 8002ef2:	4a0f      	ldr	r2, [pc, #60]	@ (8002f30 <main+0x310>)
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8002f34 <main+0x314>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	701a      	strb	r2, [r3, #0]
 8002efc:	4b0f      	ldr	r3, [pc, #60]	@ (8002f3c <main+0x31c>)
 8002efe:	2204      	movs	r2, #4
 8002f00:	701a      	strb	r2, [r3, #0]
				break;
 8002f02:	e043      	b.n	8002f8c <main+0x36c>
 8002f04:	20000338 	.word	0x20000338
 8002f08:	20000018 	.word	0x20000018
 8002f0c:	08009c70 	.word	0x08009c70
 8002f10:	08009c7c 	.word	0x08009c7c
 8002f14:	2000029b 	.word	0x2000029b
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	2000029e 	.word	0x2000029e
 8002f20:	200002a0 	.word	0x200002a0
 8002f24:	2000029f 	.word	0x2000029f
 8002f28:	200000f8 	.word	0x200000f8
 8002f2c:	200001ec 	.word	0x200001ec
 8002f30:	20000058 	.word	0x20000058
 8002f34:	20000054 	.word	0x20000054
 8002f38:	20000068 	.word	0x20000068
 8002f3c:	20000055 	.word	0x20000055
 8002f40:	20000098 	.word	0x20000098
 8002f44:	200000c8 	.word	0x200000c8
 8002f48:	200002a4 	.word	0x200002a4
 8002f4c:	200001f0 	.word	0x200001f0
 8002f50:	08009c90 	.word	0x08009c90
 8002f54:	08009c9c 	.word	0x08009c9c
 8002f58:	200002ac 	.word	0x200002ac
 8002f5c:	200000e8 	.word	0x200000e8
 8002f60:	2000029c 	.word	0x2000029c
 8002f64:	200002a1 	.word	0x200002a1
 8002f68:	2000029d 	.word	0x2000029d
 8002f6c:	08009ca4 	.word	0x08009ca4
 8002f70:	08009cac 	.word	0x08009cac
 8002f74:	08009cb8 	.word	0x08009cb8

 	 		default: act_menu = menuAlarm, position = 1, max_pos = 2; break;
 8002f78:	4b90      	ldr	r3, [pc, #576]	@ (80031bc <main+0x59c>)
 8002f7a:	4a91      	ldr	r2, [pc, #580]	@ (80031c0 <main+0x5a0>)
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	4b91      	ldr	r3, [pc, #580]	@ (80031c4 <main+0x5a4>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	701a      	strb	r2, [r3, #0]
 8002f84:	4b90      	ldr	r3, [pc, #576]	@ (80031c8 <main+0x5a8>)
 8002f86:	2202      	movs	r2, #2
 8002f88:	701a      	strb	r2, [r3, #0]
 8002f8a:	bf00      	nop
 		switch (position){
 8002f8c:	f000 bcbb 	b.w	8003906 <main+0xce6>
 		}
 	}
	else if(symbol[0] == '*' && act_menu == menuKitchen){
 8002f90:	4b8e      	ldr	r3, [pc, #568]	@ (80031cc <main+0x5ac>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f96:	d12e      	bne.n	8002ff6 <main+0x3d6>
 8002f98:	4b88      	ldr	r3, [pc, #544]	@ (80031bc <main+0x59c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a8c      	ldr	r2, [pc, #560]	@ (80031d0 <main+0x5b0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d129      	bne.n	8002ff6 <main+0x3d6>
		refreshLCD = true;
 8002fa2:	4b8c      	ldr	r3, [pc, #560]	@ (80031d4 <main+0x5b4>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	701a      	strb	r2, [r3, #0]
		switch (position){
 8002fa8:	4b86      	ldr	r3, [pc, #536]	@ (80031c4 <main+0x5a4>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d002      	beq.n	8002fb6 <main+0x396>
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d00a      	beq.n	8002fca <main+0x3aa>
 8002fb4:	e013      	b.n	8002fde <main+0x3be>
			case 1: act_menu = menuKitchenTemperature, position = 1, max_pos = 2; break;
 8002fb6:	4b81      	ldr	r3, [pc, #516]	@ (80031bc <main+0x59c>)
 8002fb8:	4a87      	ldr	r2, [pc, #540]	@ (80031d8 <main+0x5b8>)
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	4b81      	ldr	r3, [pc, #516]	@ (80031c4 <main+0x5a4>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	701a      	strb	r2, [r3, #0]
 8002fc2:	4b81      	ldr	r3, [pc, #516]	@ (80031c8 <main+0x5a8>)
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	701a      	strb	r2, [r3, #0]
 8002fc8:	e013      	b.n	8002ff2 <main+0x3d2>
			case 2: act_menu = menuKitchenLighting, position = 1, max_pos = 3; break;
 8002fca:	4b7c      	ldr	r3, [pc, #496]	@ (80031bc <main+0x59c>)
 8002fcc:	4a83      	ldr	r2, [pc, #524]	@ (80031dc <main+0x5bc>)
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	4b7c      	ldr	r3, [pc, #496]	@ (80031c4 <main+0x5a4>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	701a      	strb	r2, [r3, #0]
 8002fd6:	4b7c      	ldr	r3, [pc, #496]	@ (80031c8 <main+0x5a8>)
 8002fd8:	2203      	movs	r2, #3
 8002fda:	701a      	strb	r2, [r3, #0]
 8002fdc:	e009      	b.n	8002ff2 <main+0x3d2>
			default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8002fde:	4b77      	ldr	r3, [pc, #476]	@ (80031bc <main+0x59c>)
 8002fe0:	4a7b      	ldr	r2, [pc, #492]	@ (80031d0 <main+0x5b0>)
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	4b77      	ldr	r3, [pc, #476]	@ (80031c4 <main+0x5a4>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	4b77      	ldr	r3, [pc, #476]	@ (80031c8 <main+0x5a8>)
 8002fec:	2202      	movs	r2, #2
 8002fee:	701a      	strb	r2, [r3, #0]
 8002ff0:	bf00      	nop
		switch (position){
 8002ff2:	f000 bc88 	b.w	8003906 <main+0xce6>
		}
	}
	else if(symbol[0] == '*' && act_menu == menuKitchenLighting){
 8002ff6:	4b75      	ldr	r3, [pc, #468]	@ (80031cc <main+0x5ac>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ffc:	f040 80bb 	bne.w	8003176 <main+0x556>
 8003000:	4b6e      	ldr	r3, [pc, #440]	@ (80031bc <main+0x59c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a75      	ldr	r2, [pc, #468]	@ (80031dc <main+0x5bc>)
 8003006:	4293      	cmp	r3, r2
 8003008:	f040 80b5 	bne.w	8003176 <main+0x556>
 		 	 		refreshLCD = true;
 800300c:	4b71      	ldr	r3, [pc, #452]	@ (80031d4 <main+0x5b4>)
 800300e:	2201      	movs	r2, #1
 8003010:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 8003012:	4b6c      	ldr	r3, [pc, #432]	@ (80031c4 <main+0x5a4>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b03      	cmp	r3, #3
 8003018:	d02c      	beq.n	8003074 <main+0x454>
 800301a:	2b03      	cmp	r3, #3
 800301c:	f300 80a0 	bgt.w	8003160 <main+0x540>
 8003020:	2b01      	cmp	r3, #1
 8003022:	d002      	beq.n	800302a <main+0x40a>
 8003024:	2b02      	cmp	r3, #2
 8003026:	d015      	beq.n	8003054 <main+0x434>
 8003028:	e09a      	b.n	8003160 <main+0x540>
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 800302a:	2001      	movs	r0, #1
 800302c:	f7ff fc02 	bl	8002834 <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 8003030:	486b      	ldr	r0, [pc, #428]	@ (80031e0 <main+0x5c0>)
 8003032:	f7ff fc25 	bl	8002880 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 8003036:	2201      	movs	r2, #1
 8003038:	2100      	movs	r1, #0
 800303a:	486a      	ldr	r0, [pc, #424]	@ (80031e4 <main+0x5c4>)
 800303c:	f7ff fc4f 	bl	80028de <LCD_WriteTextXY>
 		 	 				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, brightnessKitchen);
 8003040:	4b69      	ldr	r3, [pc, #420]	@ (80031e8 <main+0x5c8>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4b69      	ldr	r3, [pc, #420]	@ (80031ec <main+0x5cc>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	63da      	str	r2, [r3, #60]	@ 0x3c
 		 	 				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800304a:	2108      	movs	r1, #8
 800304c:	4867      	ldr	r0, [pc, #412]	@ (80031ec <main+0x5cc>)
 800304e:	f004 f9fb 	bl	8007448 <HAL_TIM_PWM_Start>
 		 	 				break;
 8003052:	e08f      	b.n	8003174 <main+0x554>

 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 8003054:	2001      	movs	r0, #1
 8003056:	f7ff fbed 	bl	8002834 <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 800305a:	4861      	ldr	r0, [pc, #388]	@ (80031e0 <main+0x5c0>)
 800305c:	f7ff fc10 	bl	8002880 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 8003060:	2201      	movs	r2, #1
 8003062:	2100      	movs	r1, #0
 8003064:	4862      	ldr	r0, [pc, #392]	@ (80031f0 <main+0x5d0>)
 8003066:	f7ff fc3a 	bl	80028de <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 800306a:	2108      	movs	r1, #8
 800306c:	485f      	ldr	r0, [pc, #380]	@ (80031ec <main+0x5cc>)
 800306e:	f004 fae5 	bl	800763c <HAL_TIM_PWM_Stop>
 				 	 		break;
 8003072:	e07f      	b.n	8003174 <main+0x554>

 		 	 		case 3:
							i = 0;
 8003074:	4b5f      	ldr	r3, [pc, #380]	@ (80031f4 <main+0x5d4>)
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
							HAL_Delay(200);
 800307a:	20c8      	movs	r0, #200	@ 0xc8
 800307c:	f001 faaa 	bl	80045d4 <HAL_Delay>
							memset(buff, 0, sizeof(buff));
 8003080:	2205      	movs	r2, #5
 8003082:	2100      	movs	r1, #0
 8003084:	485c      	ldr	r0, [pc, #368]	@ (80031f8 <main+0x5d8>)
 8003086:	f006 f87b 	bl	8009180 <memset>
							LCD_WriteCommand(HD44780_CLEAR);
 800308a:	2001      	movs	r0, #1
 800308c:	f7ff fbd2 	bl	8002834 <LCD_WriteCommand>
							LCD_WriteText("Write Bright");
 8003090:	485a      	ldr	r0, [pc, #360]	@ (80031fc <main+0x5dc>)
 8003092:	f7ff fbf5 	bl	8002880 <LCD_WriteText>
							while(1) {
								refreshLCD = true;
 8003096:	4b4f      	ldr	r3, [pc, #316]	@ (80031d4 <main+0x5b4>)
 8003098:	2201      	movs	r2, #1
 800309a:	701a      	strb	r2, [r3, #0]
								symbol[0] = keypad_readkey();
 800309c:	f7ff fa88 	bl	80025b0 <keypad_readkey>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461a      	mov	r2, r3
 80030a4:	4b49      	ldr	r3, [pc, #292]	@ (80031cc <main+0x5ac>)
 80030a6:	701a      	strb	r2, [r3, #0]
								if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 80030a8:	4b48      	ldr	r3, [pc, #288]	@ (80031cc <main+0x5ac>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80030ae:	d922      	bls.n	80030f6 <main+0x4d6>
 80030b0:	4b46      	ldr	r3, [pc, #280]	@ (80031cc <main+0x5ac>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b39      	cmp	r3, #57	@ 0x39
 80030b6:	d81e      	bhi.n	80030f6 <main+0x4d6>
 80030b8:	4b4e      	ldr	r3, [pc, #312]	@ (80031f4 <main+0x5d4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d81a      	bhi.n	80030f6 <main+0x4d6>
									buff[i] = symbol[0];
 80030c0:	4b4c      	ldr	r3, [pc, #304]	@ (80031f4 <main+0x5d4>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a41      	ldr	r2, [pc, #260]	@ (80031cc <main+0x5ac>)
 80030c6:	7811      	ldrb	r1, [r2, #0]
 80030c8:	4a4b      	ldr	r2, [pc, #300]	@ (80031f8 <main+0x5d8>)
 80030ca:	54d1      	strb	r1, [r2, r3]
									i++;
 80030cc:	4b49      	ldr	r3, [pc, #292]	@ (80031f4 <main+0x5d4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	3301      	adds	r3, #1
 80030d2:	4a48      	ldr	r2, [pc, #288]	@ (80031f4 <main+0x5d4>)
 80030d4:	6013      	str	r3, [r2, #0]
									buff[i] = '\0';
 80030d6:	4b47      	ldr	r3, [pc, #284]	@ (80031f4 <main+0x5d4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a47      	ldr	r2, [pc, #284]	@ (80031f8 <main+0x5d8>)
 80030dc:	2100      	movs	r1, #0
 80030de:	54d1      	strb	r1, [r2, r3]
									LCD_WriteCommand(HD44780_CLEAR);
 80030e0:	2001      	movs	r0, #1
 80030e2:	f7ff fba7 	bl	8002834 <LCD_WriteCommand>
									LCD_WriteText("Brightness: ");
 80030e6:	4846      	ldr	r0, [pc, #280]	@ (8003200 <main+0x5e0>)
 80030e8:	f7ff fbca 	bl	8002880 <LCD_WriteText>
									LCD_WriteTextXY(buff, 0, 1);
 80030ec:	2201      	movs	r2, #1
 80030ee:	2100      	movs	r1, #0
 80030f0:	4841      	ldr	r0, [pc, #260]	@ (80031f8 <main+0x5d8>)
 80030f2:	f7ff fbf4 	bl	80028de <LCD_WriteTextXY>
								}
								HAL_Delay(200);
 80030f6:	20c8      	movs	r0, #200	@ 0xc8
 80030f8:	f001 fa6c 	bl	80045d4 <HAL_Delay>
								symbol[0] = keypad_readkey();
 80030fc:	f7ff fa58 	bl	80025b0 <keypad_readkey>
 8003100:	4603      	mov	r3, r0
 8003102:	461a      	mov	r2, r3
 8003104:	4b31      	ldr	r3, [pc, #196]	@ (80031cc <main+0x5ac>)
 8003106:	701a      	strb	r2, [r3, #0]
								if(symbol[0] == '*') {
 8003108:	4b30      	ldr	r3, [pc, #192]	@ (80031cc <main+0x5ac>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b2a      	cmp	r3, #42	@ 0x2a
 800310e:	d123      	bne.n	8003158 <main+0x538>
									brightnessKitchen = atoi(buff)*10;
 8003110:	4839      	ldr	r0, [pc, #228]	@ (80031f8 <main+0x5d8>)
 8003112:	f005 ff78 	bl	8009006 <atoi>
 8003116:	4602      	mov	r2, r0
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	461a      	mov	r2, r3
 8003122:	4b31      	ldr	r3, [pc, #196]	@ (80031e8 <main+0x5c8>)
 8003124:	601a      	str	r2, [r3, #0]
									if(brightnessKitchen >= 1000) {
 8003126:	4b30      	ldr	r3, [pc, #192]	@ (80031e8 <main+0x5c8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800312e:	db03      	blt.n	8003138 <main+0x518>
										brightnessKitchen = 999;
 8003130:	4b2d      	ldr	r3, [pc, #180]	@ (80031e8 <main+0x5c8>)
 8003132:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003136:	601a      	str	r2, [r3, #0]
									}
								   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, brightnessKitchen);
 8003138:	4b2b      	ldr	r3, [pc, #172]	@ (80031e8 <main+0x5c8>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4b2b      	ldr	r3, [pc, #172]	@ (80031ec <main+0x5cc>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	63da      	str	r2, [r3, #60]	@ 0x3c
									act_menu = menuKitchenLighting;
 8003142:	4b1e      	ldr	r3, [pc, #120]	@ (80031bc <main+0x59c>)
 8003144:	4a25      	ldr	r2, [pc, #148]	@ (80031dc <main+0x5bc>)
 8003146:	601a      	str	r2, [r3, #0]
									position = 1;
 8003148:	4b1e      	ldr	r3, [pc, #120]	@ (80031c4 <main+0x5a4>)
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
									max_pos = 3;
 800314e:	4b1e      	ldr	r3, [pc, #120]	@ (80031c8 <main+0x5a8>)
 8003150:	2203      	movs	r2, #3
 8003152:	701a      	strb	r2, [r3, #0]
									break;
 8003154:	bf00      	nop
								}
								HAL_Delay(100);
							}
							break;
 8003156:	e00d      	b.n	8003174 <main+0x554>
								HAL_Delay(100);
 8003158:	2064      	movs	r0, #100	@ 0x64
 800315a:	f001 fa3b 	bl	80045d4 <HAL_Delay>
								refreshLCD = true;
 800315e:	e79a      	b.n	8003096 <main+0x476>
 		 	 		default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8003160:	4b16      	ldr	r3, [pc, #88]	@ (80031bc <main+0x59c>)
 8003162:	4a1b      	ldr	r2, [pc, #108]	@ (80031d0 <main+0x5b0>)
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	4b17      	ldr	r3, [pc, #92]	@ (80031c4 <main+0x5a4>)
 8003168:	2201      	movs	r2, #1
 800316a:	701a      	strb	r2, [r3, #0]
 800316c:	4b16      	ldr	r3, [pc, #88]	@ (80031c8 <main+0x5a8>)
 800316e:	2202      	movs	r2, #2
 8003170:	701a      	strb	r2, [r3, #0]
 8003172:	bf00      	nop
 		 	 	  switch (position){
 8003174:	e3c7      	b.n	8003906 <main+0xce6>
 		 	 	  	  }
	}
	else if(symbol[0] == '*' && act_menu == menuKitchenTemperature){
 8003176:	4b15      	ldr	r3, [pc, #84]	@ (80031cc <main+0x5ac>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b2a      	cmp	r3, #42	@ 0x2a
 800317c:	f040 8149 	bne.w	8003412 <main+0x7f2>
 8003180:	4b0e      	ldr	r3, [pc, #56]	@ (80031bc <main+0x59c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a14      	ldr	r2, [pc, #80]	@ (80031d8 <main+0x5b8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	f040 8143 	bne.w	8003412 <main+0x7f2>
		refreshLCD = true;
 800318c:	4b11      	ldr	r3, [pc, #68]	@ (80031d4 <main+0x5b4>)
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]
		temp = 0.0f;
 8003192:	491c      	ldr	r1, [pc, #112]	@ (8003204 <main+0x5e4>)
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	e9c1 2300 	strd	r2, r3, [r1]
		switch (position){
 80031a0:	4b08      	ldr	r3, [pc, #32]	@ (80031c4 <main+0x5a4>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	f000 80b8 	beq.w	800331a <main+0x6fa>
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	f300 8126 	bgt.w	80033fc <main+0x7dc>
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d029      	beq.n	8003208 <main+0x5e8>
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	f000 809c 	beq.w	80032f2 <main+0x6d2>
 80031ba:	e11f      	b.n	80033fc <main+0x7dc>
 80031bc:	200000f8 	.word	0x200000f8
 80031c0:	200000e8 	.word	0x200000e8
 80031c4:	20000054 	.word	0x20000054
 80031c8:	20000055 	.word	0x20000055
 80031cc:	200001ec 	.word	0x200001ec
 80031d0:	20000068 	.word	0x20000068
 80031d4:	2000029b 	.word	0x2000029b
 80031d8:	20000088 	.word	0x20000088
 80031dc:	20000078 	.word	0x20000078
 80031e0:	08009cc4 	.word	0x08009cc4
 80031e4:	08009cac 	.word	0x08009cac
 80031e8:	20000100 	.word	0x20000100
 80031ec:	20000384 	.word	0x20000384
 80031f0:	08009cb8 	.word	0x08009cb8
 80031f4:	200002a4 	.word	0x200002a4
 80031f8:	200001f0 	.word	0x200001f0
 80031fc:	08009ccc 	.word	0x08009ccc
 8003200:	08009cdc 	.word	0x08009cdc
 8003204:	200002b8 	.word	0x200002b8
			case 1:
					while(1) {
						HAL_Delay(500);
 8003208:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800320c:	f001 f9e2 	bl	80045d4 <HAL_Delay>
						BMP2_ReadData(&bmp2dev, &press, &temp);
 8003210:	4aa6      	ldr	r2, [pc, #664]	@ (80034ac <main+0x88c>)
 8003212:	49a7      	ldr	r1, [pc, #668]	@ (80034b0 <main+0x890>)
 8003214:	48a7      	ldr	r0, [pc, #668]	@ (80034b4 <main+0x894>)
 8003216:	f7fe ff25 	bl	8002064 <BMP2_ReadData>
						roundedValue = roundToTwoDecimals(temp);
 800321a:	4ba4      	ldr	r3, [pc, #656]	@ (80034ac <main+0x88c>)
 800321c:	ed93 7b00 	vldr	d7, [r3]
 8003220:	eeb0 0a47 	vmov.f32	s0, s14
 8003224:	eef0 0a67 	vmov.f32	s1, s15
 8003228:	f7ff fc56 	bl	8002ad8 <roundToTwoDecimals>
 800322c:	eeb0 7a40 	vmov.f32	s14, s0
 8003230:	eef0 7a60 	vmov.f32	s15, s1
 8003234:	4ba0      	ldr	r3, [pc, #640]	@ (80034b8 <main+0x898>)
 8003236:	ed83 7b00 	vstr	d7, [r3]
						intPart = (int)roundedValue;
 800323a:	4b9f      	ldr	r3, [pc, #636]	@ (80034b8 <main+0x898>)
 800323c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	f7fd fc92 	bl	8000b6c <__aeabi_d2iz>
 8003248:	4603      	mov	r3, r0
 800324a:	4a9c      	ldr	r2, [pc, #624]	@ (80034bc <main+0x89c>)
 800324c:	6013      	str	r3, [r2, #0]
						fracPart = (int)((roundedValue - intPart) * 100);
 800324e:	4b9a      	ldr	r3, [pc, #616]	@ (80034b8 <main+0x898>)
 8003250:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003254:	4b99      	ldr	r3, [pc, #612]	@ (80034bc <main+0x89c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd f983 	bl	8000564 <__aeabi_i2d>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	4620      	mov	r0, r4
 8003264:	4629      	mov	r1, r5
 8003266:	f7fd f82f 	bl	80002c8 <__aeabi_dsub>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4610      	mov	r0, r2
 8003270:	4619      	mov	r1, r3
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	4b92      	ldr	r3, [pc, #584]	@ (80034c0 <main+0x8a0>)
 8003278:	f7fd f9de 	bl	8000638 <__aeabi_dmul>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4610      	mov	r0, r2
 8003282:	4619      	mov	r1, r3
 8003284:	f7fd fc72 	bl	8000b6c <__aeabi_d2iz>
 8003288:	4603      	mov	r3, r0
 800328a:	4a8e      	ldr	r2, [pc, #568]	@ (80034c4 <main+0x8a4>)
 800328c:	6013      	str	r3, [r2, #0]
						snprintf(result, sizeof(result), "Temp: %d.%04d", intPart, abs(fracPart));
 800328e:	4b8b      	ldr	r3, [pc, #556]	@ (80034bc <main+0x89c>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	4b8c      	ldr	r3, [pc, #560]	@ (80034c4 <main+0x8a4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	bfb8      	it	lt
 800329a:	425b      	neglt	r3, r3
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	4613      	mov	r3, r2
 80032a0:	4a89      	ldr	r2, [pc, #548]	@ (80034c8 <main+0x8a8>)
 80032a2:	2132      	movs	r1, #50	@ 0x32
 80032a4:	4889      	ldr	r0, [pc, #548]	@ (80034cc <main+0x8ac>)
 80032a6:	f005 ff37 	bl	8009118 <sniprintf>
						__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 990);
 80032aa:	4b89      	ldr	r3, [pc, #548]	@ (80034d0 <main+0x8b0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f240 32de 	movw	r2, #990	@ 0x3de
 80032b2:	63da      	str	r2, [r3, #60]	@ 0x3c
						HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80032b4:	2108      	movs	r1, #8
 80032b6:	4886      	ldr	r0, [pc, #536]	@ (80034d0 <main+0x8b0>)
 80032b8:	f004 f8c6 	bl	8007448 <HAL_TIM_PWM_Start>
						LCD_WriteCommand(HD44780_CLEAR);
 80032bc:	2001      	movs	r0, #1
 80032be:	f7ff fab9 	bl	8002834 <LCD_WriteCommand>
						LCD_WriteText(result);
 80032c2:	4882      	ldr	r0, [pc, #520]	@ (80034cc <main+0x8ac>)
 80032c4:	f7ff fadc 	bl	8002880 <LCD_WriteText>
						if(symbol[0] == '*') {
 80032c8:	4b82      	ldr	r3, [pc, #520]	@ (80034d4 <main+0x8b4>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80032ce:	d10a      	bne.n	80032e6 <main+0x6c6>
							act_menu = menuKitchenTemperature;
 80032d0:	4b81      	ldr	r3, [pc, #516]	@ (80034d8 <main+0x8b8>)
 80032d2:	4a82      	ldr	r2, [pc, #520]	@ (80034dc <main+0x8bc>)
 80032d4:	601a      	str	r2, [r3, #0]
							position = 1;
 80032d6:	4b82      	ldr	r3, [pc, #520]	@ (80034e0 <main+0x8c0>)
 80032d8:	2201      	movs	r2, #1
 80032da:	701a      	strb	r2, [r3, #0]
							max_pos = 3;
 80032dc:	4b81      	ldr	r3, [pc, #516]	@ (80034e4 <main+0x8c4>)
 80032de:	2203      	movs	r2, #3
 80032e0:	701a      	strb	r2, [r3, #0]
							break;
 80032e2:	bf00      	nop
						}
						i++;
					}
					break;
 80032e4:	e094      	b.n	8003410 <main+0x7f0>
						i++;
 80032e6:	4b80      	ldr	r3, [pc, #512]	@ (80034e8 <main+0x8c8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	3301      	adds	r3, #1
 80032ec:	4a7e      	ldr	r2, [pc, #504]	@ (80034e8 <main+0x8c8>)
 80032ee:	6013      	str	r3, [r2, #0]
					while(1) {
 80032f0:	e78a      	b.n	8003208 <main+0x5e8>

			case 2: LCD_WriteCommand(HD44780_CLEAR);
 80032f2:	2001      	movs	r0, #1
 80032f4:	f7ff fa9e 	bl	8002834 <LCD_WriteCommand>
					LCD_WriteText("grzanie off");
 80032f8:	487c      	ldr	r0, [pc, #496]	@ (80034ec <main+0x8cc>)
 80032fa:	f7ff fac1 	bl	8002880 <LCD_WriteText>
					LCD_WriteTextXY("",0,1);
 80032fe:	2201      	movs	r2, #1
 8003300:	2100      	movs	r1, #0
 8003302:	487b      	ldr	r0, [pc, #492]	@ (80034f0 <main+0x8d0>)
 8003304:	f7ff faeb 	bl	80028de <LCD_WriteTextXY>
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8003308:	4b71      	ldr	r3, [pc, #452]	@ (80034d0 <main+0x8b0>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2200      	movs	r2, #0
 800330e:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8003310:	2108      	movs	r1, #8
 8003312:	486f      	ldr	r0, [pc, #444]	@ (80034d0 <main+0x8b0>)
 8003314:	f004 f992 	bl	800763c <HAL_TIM_PWM_Stop>
					break;
 8003318:	e07a      	b.n	8003410 <main+0x7f0>
			case 3:
					i = 0;
 800331a:	4b73      	ldr	r3, [pc, #460]	@ (80034e8 <main+0x8c8>)
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
					HAL_Delay(200);
 8003320:	20c8      	movs	r0, #200	@ 0xc8
 8003322:	f001 f957 	bl	80045d4 <HAL_Delay>
					memset(buff, 0, sizeof(buff));
 8003326:	2205      	movs	r2, #5
 8003328:	2100      	movs	r1, #0
 800332a:	4872      	ldr	r0, [pc, #456]	@ (80034f4 <main+0x8d4>)
 800332c:	f005 ff28 	bl	8009180 <memset>
					LCD_WriteCommand(HD44780_CLEAR);
 8003330:	2001      	movs	r0, #1
 8003332:	f7ff fa7f 	bl	8002834 <LCD_WriteCommand>
					LCD_WriteText("Write Temp");
 8003336:	4870      	ldr	r0, [pc, #448]	@ (80034f8 <main+0x8d8>)
 8003338:	f7ff faa2 	bl	8002880 <LCD_WriteText>
					while(1) {
						refreshLCD = true;
 800333c:	4b6f      	ldr	r3, [pc, #444]	@ (80034fc <main+0x8dc>)
 800333e:	2201      	movs	r2, #1
 8003340:	701a      	strb	r2, [r3, #0]
						symbol[0] = keypad_readkey();
 8003342:	f7ff f935 	bl	80025b0 <keypad_readkey>
 8003346:	4603      	mov	r3, r0
 8003348:	461a      	mov	r2, r3
 800334a:	4b62      	ldr	r3, [pc, #392]	@ (80034d4 <main+0x8b4>)
 800334c:	701a      	strb	r2, [r3, #0]
						if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 800334e:	4b61      	ldr	r3, [pc, #388]	@ (80034d4 <main+0x8b4>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b2f      	cmp	r3, #47	@ 0x2f
 8003354:	d922      	bls.n	800339c <main+0x77c>
 8003356:	4b5f      	ldr	r3, [pc, #380]	@ (80034d4 <main+0x8b4>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b39      	cmp	r3, #57	@ 0x39
 800335c:	d81e      	bhi.n	800339c <main+0x77c>
 800335e:	4b62      	ldr	r3, [pc, #392]	@ (80034e8 <main+0x8c8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b03      	cmp	r3, #3
 8003364:	d81a      	bhi.n	800339c <main+0x77c>
							buff[i] = symbol[0];
 8003366:	4b60      	ldr	r3, [pc, #384]	@ (80034e8 <main+0x8c8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a5a      	ldr	r2, [pc, #360]	@ (80034d4 <main+0x8b4>)
 800336c:	7811      	ldrb	r1, [r2, #0]
 800336e:	4a61      	ldr	r2, [pc, #388]	@ (80034f4 <main+0x8d4>)
 8003370:	54d1      	strb	r1, [r2, r3]
							i++;
 8003372:	4b5d      	ldr	r3, [pc, #372]	@ (80034e8 <main+0x8c8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3301      	adds	r3, #1
 8003378:	4a5b      	ldr	r2, [pc, #364]	@ (80034e8 <main+0x8c8>)
 800337a:	6013      	str	r3, [r2, #0]
							buff[i] = '\0';
 800337c:	4b5a      	ldr	r3, [pc, #360]	@ (80034e8 <main+0x8c8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a5c      	ldr	r2, [pc, #368]	@ (80034f4 <main+0x8d4>)
 8003382:	2100      	movs	r1, #0
 8003384:	54d1      	strb	r1, [r2, r3]
							LCD_WriteCommand(HD44780_CLEAR);
 8003386:	2001      	movs	r0, #1
 8003388:	f7ff fa54 	bl	8002834 <LCD_WriteCommand>
							LCD_WriteText("Temp: ");
 800338c:	485c      	ldr	r0, [pc, #368]	@ (8003500 <main+0x8e0>)
 800338e:	f7ff fa77 	bl	8002880 <LCD_WriteText>
							LCD_WriteTextXY(buff, 0, 1);
 8003392:	2201      	movs	r2, #1
 8003394:	2100      	movs	r1, #0
 8003396:	4857      	ldr	r0, [pc, #348]	@ (80034f4 <main+0x8d4>)
 8003398:	f7ff faa1 	bl	80028de <LCD_WriteTextXY>
						}
						HAL_Delay(200);
 800339c:	20c8      	movs	r0, #200	@ 0xc8
 800339e:	f001 f919 	bl	80045d4 <HAL_Delay>
						symbol[0] = keypad_readkey();
 80033a2:	f7ff f905 	bl	80025b0 <keypad_readkey>
 80033a6:	4603      	mov	r3, r0
 80033a8:	461a      	mov	r2, r3
 80033aa:	4b4a      	ldr	r3, [pc, #296]	@ (80034d4 <main+0x8b4>)
 80033ac:	701a      	strb	r2, [r3, #0]
						if(symbol[0] == '*') {
 80033ae:	4b49      	ldr	r3, [pc, #292]	@ (80034d4 <main+0x8b4>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80033b4:	d11e      	bne.n	80033f4 <main+0x7d4>
							tempKitchen = atoi(buff)*10;
 80033b6:	484f      	ldr	r0, [pc, #316]	@ (80034f4 <main+0x8d4>)
 80033b8:	f005 fe25 	bl	8009006 <atoi>
 80033bc:	4602      	mov	r2, r0
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	461a      	mov	r2, r3
 80033c8:	4b4e      	ldr	r3, [pc, #312]	@ (8003504 <main+0x8e4>)
 80033ca:	601a      	str	r2, [r3, #0]
							if(tempKitchen >= 1000) {
 80033cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003504 <main+0x8e4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033d4:	db03      	blt.n	80033de <main+0x7be>
								tempKitchen = 999;
 80033d6:	4b4b      	ldr	r3, [pc, #300]	@ (8003504 <main+0x8e4>)
 80033d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80033dc:	601a      	str	r2, [r3, #0]
							}
							act_menu = menuKitchenLighting;
 80033de:	4b3e      	ldr	r3, [pc, #248]	@ (80034d8 <main+0x8b8>)
 80033e0:	4a49      	ldr	r2, [pc, #292]	@ (8003508 <main+0x8e8>)
 80033e2:	601a      	str	r2, [r3, #0]
							position = 1;
 80033e4:	4b3e      	ldr	r3, [pc, #248]	@ (80034e0 <main+0x8c0>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	701a      	strb	r2, [r3, #0]
							max_pos = 3;
 80033ea:	4b3e      	ldr	r3, [pc, #248]	@ (80034e4 <main+0x8c4>)
 80033ec:	2203      	movs	r2, #3
 80033ee:	701a      	strb	r2, [r3, #0]
							break;
 80033f0:	bf00      	nop
						}
						HAL_Delay(100);
					}
					break;
 80033f2:	e00d      	b.n	8003410 <main+0x7f0>
						HAL_Delay(100);
 80033f4:	2064      	movs	r0, #100	@ 0x64
 80033f6:	f001 f8ed 	bl	80045d4 <HAL_Delay>
						refreshLCD = true;
 80033fa:	e79f      	b.n	800333c <main+0x71c>
			default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 80033fc:	4b36      	ldr	r3, [pc, #216]	@ (80034d8 <main+0x8b8>)
 80033fe:	4a43      	ldr	r2, [pc, #268]	@ (800350c <main+0x8ec>)
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	4b37      	ldr	r3, [pc, #220]	@ (80034e0 <main+0x8c0>)
 8003404:	2201      	movs	r2, #1
 8003406:	701a      	strb	r2, [r3, #0]
 8003408:	4b36      	ldr	r3, [pc, #216]	@ (80034e4 <main+0x8c4>)
 800340a:	2202      	movs	r2, #2
 800340c:	701a      	strb	r2, [r3, #0]
 800340e:	bf00      	nop
		switch (position){
 8003410:	e279      	b.n	8003906 <main+0xce6>
		}
	}
	else if(symbol[0] == '*' && act_menu == menuLivingroom){
 8003412:	4b30      	ldr	r3, [pc, #192]	@ (80034d4 <main+0x8b4>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b2a      	cmp	r3, #42	@ 0x2a
 8003418:	d12d      	bne.n	8003476 <main+0x856>
 800341a:	4b2f      	ldr	r3, [pc, #188]	@ (80034d8 <main+0x8b8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a3c      	ldr	r2, [pc, #240]	@ (8003510 <main+0x8f0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d128      	bne.n	8003476 <main+0x856>
					refreshLCD = true;
 8003424:	4b35      	ldr	r3, [pc, #212]	@ (80034fc <main+0x8dc>)
 8003426:	2201      	movs	r2, #1
 8003428:	701a      	strb	r2, [r3, #0]
				  switch (position){
 800342a:	4b2d      	ldr	r3, [pc, #180]	@ (80034e0 <main+0x8c0>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d002      	beq.n	8003438 <main+0x818>
 8003432:	2b02      	cmp	r3, #2
 8003434:	d00a      	beq.n	800344c <main+0x82c>
 8003436:	e013      	b.n	8003460 <main+0x840>
						case 1: act_menu = menuLivingroomTemperature, position = 1, max_pos = 2; break;
 8003438:	4b27      	ldr	r3, [pc, #156]	@ (80034d8 <main+0x8b8>)
 800343a:	4a36      	ldr	r2, [pc, #216]	@ (8003514 <main+0x8f4>)
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	4b28      	ldr	r3, [pc, #160]	@ (80034e0 <main+0x8c0>)
 8003440:	2201      	movs	r2, #1
 8003442:	701a      	strb	r2, [r3, #0]
 8003444:	4b27      	ldr	r3, [pc, #156]	@ (80034e4 <main+0x8c4>)
 8003446:	2202      	movs	r2, #2
 8003448:	701a      	strb	r2, [r3, #0]
 800344a:	e013      	b.n	8003474 <main+0x854>
						case 2: act_menu = menuLivingroomLighting, position = 1, max_pos = 3; break;
 800344c:	4b22      	ldr	r3, [pc, #136]	@ (80034d8 <main+0x8b8>)
 800344e:	4a32      	ldr	r2, [pc, #200]	@ (8003518 <main+0x8f8>)
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	4b23      	ldr	r3, [pc, #140]	@ (80034e0 <main+0x8c0>)
 8003454:	2201      	movs	r2, #1
 8003456:	701a      	strb	r2, [r3, #0]
 8003458:	4b22      	ldr	r3, [pc, #136]	@ (80034e4 <main+0x8c4>)
 800345a:	2203      	movs	r2, #3
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	e009      	b.n	8003474 <main+0x854>
					default: act_menu = menuLivingroom, position = 1, max_pos = 2; break;
 8003460:	4b1d      	ldr	r3, [pc, #116]	@ (80034d8 <main+0x8b8>)
 8003462:	4a2b      	ldr	r2, [pc, #172]	@ (8003510 <main+0x8f0>)
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	4b1e      	ldr	r3, [pc, #120]	@ (80034e0 <main+0x8c0>)
 8003468:	2201      	movs	r2, #1
 800346a:	701a      	strb	r2, [r3, #0]
 800346c:	4b1d      	ldr	r3, [pc, #116]	@ (80034e4 <main+0x8c4>)
 800346e:	2202      	movs	r2, #2
 8003470:	701a      	strb	r2, [r3, #0]
 8003472:	bf00      	nop
				  switch (position){
 8003474:	e247      	b.n	8003906 <main+0xce6>
					  }
	}
	else if(symbol[0] == '*' && act_menu == menuLivingroomLighting){
 8003476:	4b17      	ldr	r3, [pc, #92]	@ (80034d4 <main+0x8b4>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b2a      	cmp	r3, #42	@ 0x2a
 800347c:	f040 80f7 	bne.w	800366e <main+0xa4e>
 8003480:	4b15      	ldr	r3, [pc, #84]	@ (80034d8 <main+0x8b8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a24      	ldr	r2, [pc, #144]	@ (8003518 <main+0x8f8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	f040 80f1 	bne.w	800366e <main+0xa4e>
 		 	 		refreshLCD = true;
 800348c:	4b1b      	ldr	r3, [pc, #108]	@ (80034fc <main+0x8dc>)
 800348e:	2201      	movs	r2, #1
 8003490:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 8003492:	4b13      	ldr	r3, [pc, #76]	@ (80034e0 <main+0x8c0>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b03      	cmp	r3, #3
 8003498:	d065      	beq.n	8003566 <main+0x946>
 800349a:	2b03      	cmp	r3, #3
 800349c:	f300 80dc 	bgt.w	8003658 <main+0xa38>
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d03b      	beq.n	800351c <main+0x8fc>
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d04e      	beq.n	8003546 <main+0x926>
 80034a8:	e0d6      	b.n	8003658 <main+0xa38>
 80034aa:	bf00      	nop
 80034ac:	200002b8 	.word	0x200002b8
 80034b0:	200002c0 	.word	0x200002c0
 80034b4:	20000018 	.word	0x20000018
 80034b8:	200002c8 	.word	0x200002c8
 80034bc:	200002b0 	.word	0x200002b0
 80034c0:	40590000 	.word	0x40590000
 80034c4:	200002b4 	.word	0x200002b4
 80034c8:	08009cec 	.word	0x08009cec
 80034cc:	200001f8 	.word	0x200001f8
 80034d0:	200003d0 	.word	0x200003d0
 80034d4:	200001ec 	.word	0x200001ec
 80034d8:	200000f8 	.word	0x200000f8
 80034dc:	20000088 	.word	0x20000088
 80034e0:	20000054 	.word	0x20000054
 80034e4:	20000055 	.word	0x20000055
 80034e8:	200002a4 	.word	0x200002a4
 80034ec:	08009cfc 	.word	0x08009cfc
 80034f0:	08009c10 	.word	0x08009c10
 80034f4:	200001f0 	.word	0x200001f0
 80034f8:	08009d08 	.word	0x08009d08
 80034fc:	2000029b 	.word	0x2000029b
 8003500:	08009d14 	.word	0x08009d14
 8003504:	200002a8 	.word	0x200002a8
 8003508:	20000078 	.word	0x20000078
 800350c:	20000068 	.word	0x20000068
 8003510:	20000098 	.word	0x20000098
 8003514:	200000b8 	.word	0x200000b8
 8003518:	200000a8 	.word	0x200000a8
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 800351c:	2001      	movs	r0, #1
 800351e:	f7ff f989 	bl	8002834 <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 8003522:	48a0      	ldr	r0, [pc, #640]	@ (80037a4 <main+0xb84>)
 8003524:	f7ff f9ac 	bl	8002880 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 8003528:	2201      	movs	r2, #1
 800352a:	2100      	movs	r1, #0
 800352c:	489e      	ldr	r0, [pc, #632]	@ (80037a8 <main+0xb88>)
 800352e:	f7ff f9d6 	bl	80028de <LCD_WriteTextXY>
 		 	 				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 8003532:	4b9e      	ldr	r3, [pc, #632]	@ (80037ac <main+0xb8c>)
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4b9e      	ldr	r3, [pc, #632]	@ (80037b0 <main+0xb90>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	635a      	str	r2, [r3, #52]	@ 0x34
							HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800353c:	2100      	movs	r1, #0
 800353e:	489c      	ldr	r0, [pc, #624]	@ (80037b0 <main+0xb90>)
 8003540:	f003 ff82 	bl	8007448 <HAL_TIM_PWM_Start>
 		 	 				break;
 8003544:	e092      	b.n	800366c <main+0xa4c>

 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 8003546:	2001      	movs	r0, #1
 8003548:	f7ff f974 	bl	8002834 <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 800354c:	4895      	ldr	r0, [pc, #596]	@ (80037a4 <main+0xb84>)
 800354e:	f7ff f997 	bl	8002880 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 8003552:	2201      	movs	r2, #1
 8003554:	2100      	movs	r1, #0
 8003556:	4897      	ldr	r0, [pc, #604]	@ (80037b4 <main+0xb94>)
 8003558:	f7ff f9c1 	bl	80028de <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim4 , TIM_CHANNEL_1);
 800355c:	2100      	movs	r1, #0
 800355e:	4894      	ldr	r0, [pc, #592]	@ (80037b0 <main+0xb90>)
 8003560:	f004 f86c 	bl	800763c <HAL_TIM_PWM_Stop>
 				 	 		break;
 8003564:	e082      	b.n	800366c <main+0xa4c>
 		 	 		case 3:
							i = 0;
 8003566:	4b94      	ldr	r3, [pc, #592]	@ (80037b8 <main+0xb98>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
							refreshLCD = true;
 800356c:	4b93      	ldr	r3, [pc, #588]	@ (80037bc <main+0xb9c>)
 800356e:	2201      	movs	r2, #1
 8003570:	701a      	strb	r2, [r3, #0]
							HAL_Delay(200);
 8003572:	20c8      	movs	r0, #200	@ 0xc8
 8003574:	f001 f82e 	bl	80045d4 <HAL_Delay>
							memset(buff, 0, sizeof(buff));
 8003578:	2205      	movs	r2, #5
 800357a:	2100      	movs	r1, #0
 800357c:	4890      	ldr	r0, [pc, #576]	@ (80037c0 <main+0xba0>)
 800357e:	f005 fdff 	bl	8009180 <memset>
							LCD_WriteCommand(HD44780_CLEAR);
 8003582:	2001      	movs	r0, #1
 8003584:	f7ff f956 	bl	8002834 <LCD_WriteCommand>
							LCD_WriteText("Write Bright");
 8003588:	488e      	ldr	r0, [pc, #568]	@ (80037c4 <main+0xba4>)
 800358a:	f7ff f979 	bl	8002880 <LCD_WriteText>
							while(1) {
								refreshLCD = true;
 800358e:	4b8b      	ldr	r3, [pc, #556]	@ (80037bc <main+0xb9c>)
 8003590:	2201      	movs	r2, #1
 8003592:	701a      	strb	r2, [r3, #0]
								symbol[0] = keypad_readkey();
 8003594:	f7ff f80c 	bl	80025b0 <keypad_readkey>
 8003598:	4603      	mov	r3, r0
 800359a:	461a      	mov	r2, r3
 800359c:	4b8a      	ldr	r3, [pc, #552]	@ (80037c8 <main+0xba8>)
 800359e:	701a      	strb	r2, [r3, #0]
								if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 80035a0:	4b89      	ldr	r3, [pc, #548]	@ (80037c8 <main+0xba8>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80035a6:	d922      	bls.n	80035ee <main+0x9ce>
 80035a8:	4b87      	ldr	r3, [pc, #540]	@ (80037c8 <main+0xba8>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b39      	cmp	r3, #57	@ 0x39
 80035ae:	d81e      	bhi.n	80035ee <main+0x9ce>
 80035b0:	4b81      	ldr	r3, [pc, #516]	@ (80037b8 <main+0xb98>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d81a      	bhi.n	80035ee <main+0x9ce>
									buff[i] = symbol[0];
 80035b8:	4b7f      	ldr	r3, [pc, #508]	@ (80037b8 <main+0xb98>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a82      	ldr	r2, [pc, #520]	@ (80037c8 <main+0xba8>)
 80035be:	7811      	ldrb	r1, [r2, #0]
 80035c0:	4a7f      	ldr	r2, [pc, #508]	@ (80037c0 <main+0xba0>)
 80035c2:	54d1      	strb	r1, [r2, r3]
									i++;
 80035c4:	4b7c      	ldr	r3, [pc, #496]	@ (80037b8 <main+0xb98>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3301      	adds	r3, #1
 80035ca:	4a7b      	ldr	r2, [pc, #492]	@ (80037b8 <main+0xb98>)
 80035cc:	6013      	str	r3, [r2, #0]
									buff[i] = '\0';
 80035ce:	4b7a      	ldr	r3, [pc, #488]	@ (80037b8 <main+0xb98>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a7b      	ldr	r2, [pc, #492]	@ (80037c0 <main+0xba0>)
 80035d4:	2100      	movs	r1, #0
 80035d6:	54d1      	strb	r1, [r2, r3]
									LCD_WriteCommand(HD44780_CLEAR);
 80035d8:	2001      	movs	r0, #1
 80035da:	f7ff f92b 	bl	8002834 <LCD_WriteCommand>
									LCD_WriteText("Brightness: ");
 80035de:	487b      	ldr	r0, [pc, #492]	@ (80037cc <main+0xbac>)
 80035e0:	f7ff f94e 	bl	8002880 <LCD_WriteText>
									LCD_WriteTextXY(buff, 0, 1);
 80035e4:	2201      	movs	r2, #1
 80035e6:	2100      	movs	r1, #0
 80035e8:	4875      	ldr	r0, [pc, #468]	@ (80037c0 <main+0xba0>)
 80035ea:	f7ff f978 	bl	80028de <LCD_WriteTextXY>
								}
								HAL_Delay(200);
 80035ee:	20c8      	movs	r0, #200	@ 0xc8
 80035f0:	f000 fff0 	bl	80045d4 <HAL_Delay>
								symbol[0] = keypad_readkey();
 80035f4:	f7fe ffdc 	bl	80025b0 <keypad_readkey>
 80035f8:	4603      	mov	r3, r0
 80035fa:	461a      	mov	r2, r3
 80035fc:	4b72      	ldr	r3, [pc, #456]	@ (80037c8 <main+0xba8>)
 80035fe:	701a      	strb	r2, [r3, #0]
								if(symbol[0] == '*') {
 8003600:	4b71      	ldr	r3, [pc, #452]	@ (80037c8 <main+0xba8>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b2a      	cmp	r3, #42	@ 0x2a
 8003606:	d123      	bne.n	8003650 <main+0xa30>
									brightnessLivingroom = atoi(buff)*10;
 8003608:	486d      	ldr	r0, [pc, #436]	@ (80037c0 <main+0xba0>)
 800360a:	f005 fcfc 	bl	8009006 <atoi>
 800360e:	4602      	mov	r2, r0
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	461a      	mov	r2, r3
 800361a:	4b64      	ldr	r3, [pc, #400]	@ (80037ac <main+0xb8c>)
 800361c:	601a      	str	r2, [r3, #0]
									if(brightnessLivingroom >= 1000) {
 800361e:	4b63      	ldr	r3, [pc, #396]	@ (80037ac <main+0xb8c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003626:	db03      	blt.n	8003630 <main+0xa10>
										brightnessLivingroom = 999;
 8003628:	4b60      	ldr	r3, [pc, #384]	@ (80037ac <main+0xb8c>)
 800362a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800362e:	601a      	str	r2, [r3, #0]
									}
								   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 8003630:	4b5e      	ldr	r3, [pc, #376]	@ (80037ac <main+0xb8c>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	4b5e      	ldr	r3, [pc, #376]	@ (80037b0 <main+0xb90>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	635a      	str	r2, [r3, #52]	@ 0x34
									act_menu = menuLivingroomLighting;
 800363a:	4b65      	ldr	r3, [pc, #404]	@ (80037d0 <main+0xbb0>)
 800363c:	4a65      	ldr	r2, [pc, #404]	@ (80037d4 <main+0xbb4>)
 800363e:	601a      	str	r2, [r3, #0]
									position = 1;
 8003640:	4b65      	ldr	r3, [pc, #404]	@ (80037d8 <main+0xbb8>)
 8003642:	2201      	movs	r2, #1
 8003644:	701a      	strb	r2, [r3, #0]
									max_pos = 3;
 8003646:	4b65      	ldr	r3, [pc, #404]	@ (80037dc <main+0xbbc>)
 8003648:	2203      	movs	r2, #3
 800364a:	701a      	strb	r2, [r3, #0]
									break;
 800364c:	bf00      	nop
								}
								HAL_Delay(100);
							}
							break;
 800364e:	e00d      	b.n	800366c <main+0xa4c>
								HAL_Delay(100);
 8003650:	2064      	movs	r0, #100	@ 0x64
 8003652:	f000 ffbf 	bl	80045d4 <HAL_Delay>
								refreshLCD = true;
 8003656:	e79a      	b.n	800358e <main+0x96e>
 		 	 		default: act_menu = menuLivingroom, position = 1, max_pos = 2; break;
 8003658:	4b5d      	ldr	r3, [pc, #372]	@ (80037d0 <main+0xbb0>)
 800365a:	4a61      	ldr	r2, [pc, #388]	@ (80037e0 <main+0xbc0>)
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	4b5e      	ldr	r3, [pc, #376]	@ (80037d8 <main+0xbb8>)
 8003660:	2201      	movs	r2, #1
 8003662:	701a      	strb	r2, [r3, #0]
 8003664:	4b5d      	ldr	r3, [pc, #372]	@ (80037dc <main+0xbbc>)
 8003666:	2202      	movs	r2, #2
 8003668:	701a      	strb	r2, [r3, #0]
 800366a:	bf00      	nop
 		 	 	  switch (position){
 800366c:	e14b      	b.n	8003906 <main+0xce6>
 		 	 	  	  }
 		 	 	}
 			else if(symbol[0] == '*' && act_menu == menuLivingroomTemperature){
 800366e:	4b56      	ldr	r3, [pc, #344]	@ (80037c8 <main+0xba8>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b2a      	cmp	r3, #42	@ 0x2a
 8003674:	d131      	bne.n	80036da <main+0xaba>
 8003676:	4b56      	ldr	r3, [pc, #344]	@ (80037d0 <main+0xbb0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a5a      	ldr	r2, [pc, #360]	@ (80037e4 <main+0xbc4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d12c      	bne.n	80036da <main+0xaba>
 			 		 	 		refreshLCD = true;
 8003680:	4b4e      	ldr	r3, [pc, #312]	@ (80037bc <main+0xb9c>)
 8003682:	2201      	movs	r2, #1
 8003684:	701a      	strb	r2, [r3, #0]
 			 		 	 	  switch (position){
 8003686:	4b54      	ldr	r3, [pc, #336]	@ (80037d8 <main+0xbb8>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d002      	beq.n	8003694 <main+0xa74>
 800368e:	2b02      	cmp	r3, #2
 8003690:	d00c      	beq.n	80036ac <main+0xa8c>
 8003692:	e017      	b.n	80036c4 <main+0xaa4>
 			 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 8003694:	2001      	movs	r0, #1
 8003696:	f7ff f8cd 	bl	8002834 <LCD_WriteCommand>
 			 		 	 				LCD_WriteText("");
 800369a:	4853      	ldr	r0, [pc, #332]	@ (80037e8 <main+0xbc8>)
 800369c:	f7ff f8f0 	bl	8002880 <LCD_WriteText>
 			 		 	 				LCD_WriteTextXY("",0,1);
 80036a0:	2201      	movs	r2, #1
 80036a2:	2100      	movs	r1, #0
 80036a4:	4850      	ldr	r0, [pc, #320]	@ (80037e8 <main+0xbc8>)
 80036a6:	f7ff f91a 	bl	80028de <LCD_WriteTextXY>
 			 		 	 				break;
 80036aa:	e015      	b.n	80036d8 <main+0xab8>
 			 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 80036ac:	2001      	movs	r0, #1
 80036ae:	f7ff f8c1 	bl	8002834 <LCD_WriteCommand>
 			 				 	 		LCD_WriteText("");
 80036b2:	484d      	ldr	r0, [pc, #308]	@ (80037e8 <main+0xbc8>)
 80036b4:	f7ff f8e4 	bl	8002880 <LCD_WriteText>
 			 				 	 		LCD_WriteTextXY("",0,1);; break;
 80036b8:	2201      	movs	r2, #1
 80036ba:	2100      	movs	r1, #0
 80036bc:	484a      	ldr	r0, [pc, #296]	@ (80037e8 <main+0xbc8>)
 80036be:	f7ff f90e 	bl	80028de <LCD_WriteTextXY>
 80036c2:	e009      	b.n	80036d8 <main+0xab8>
 			 		 	 		default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 80036c4:	4b42      	ldr	r3, [pc, #264]	@ (80037d0 <main+0xbb0>)
 80036c6:	4a49      	ldr	r2, [pc, #292]	@ (80037ec <main+0xbcc>)
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	4b43      	ldr	r3, [pc, #268]	@ (80037d8 <main+0xbb8>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
 80036d0:	4b42      	ldr	r3, [pc, #264]	@ (80037dc <main+0xbbc>)
 80036d2:	2202      	movs	r2, #2
 80036d4:	701a      	strb	r2, [r3, #0]
 80036d6:	bf00      	nop
 			 		 	 	  switch (position){
 80036d8:	e115      	b.n	8003906 <main+0xce6>
 			 		 	 	  	  }
 			 		 	 	}
 			else if(symbol[0] == '*' && act_menu == menuGarage){
 80036da:	4b3b      	ldr	r3, [pc, #236]	@ (80037c8 <main+0xba8>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b2a      	cmp	r3, #42	@ 0x2a
 80036e0:	d120      	bne.n	8003724 <main+0xb04>
 80036e2:	4b3b      	ldr	r3, [pc, #236]	@ (80037d0 <main+0xbb0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a42      	ldr	r2, [pc, #264]	@ (80037f0 <main+0xbd0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d11b      	bne.n	8003724 <main+0xb04>
 		 		 	 		refreshLCD = true;
 80036ec:	4b33      	ldr	r3, [pc, #204]	@ (80037bc <main+0xb9c>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	701a      	strb	r2, [r3, #0]
 		 		 	 	  switch (position){
 80036f2:	4b39      	ldr	r3, [pc, #228]	@ (80037d8 <main+0xbb8>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d109      	bne.n	800370e <main+0xaee>
 		 		 	 	  	  	case 1: act_menu = menuGarageLighting, position = 1, max_pos = 3; break;
 80036fa:	4b35      	ldr	r3, [pc, #212]	@ (80037d0 <main+0xbb0>)
 80036fc:	4a3d      	ldr	r2, [pc, #244]	@ (80037f4 <main+0xbd4>)
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	4b35      	ldr	r3, [pc, #212]	@ (80037d8 <main+0xbb8>)
 8003702:	2201      	movs	r2, #1
 8003704:	701a      	strb	r2, [r3, #0]
 8003706:	4b35      	ldr	r3, [pc, #212]	@ (80037dc <main+0xbbc>)
 8003708:	2203      	movs	r2, #3
 800370a:	701a      	strb	r2, [r3, #0]
 800370c:	e009      	b.n	8003722 <main+0xb02>
 		 		 	 		default: act_menu = menuGarage, position = 1, max_pos = 1; break;
 800370e:	4b30      	ldr	r3, [pc, #192]	@ (80037d0 <main+0xbb0>)
 8003710:	4a37      	ldr	r2, [pc, #220]	@ (80037f0 <main+0xbd0>)
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	4b30      	ldr	r3, [pc, #192]	@ (80037d8 <main+0xbb8>)
 8003716:	2201      	movs	r2, #1
 8003718:	701a      	strb	r2, [r3, #0]
 800371a:	4b30      	ldr	r3, [pc, #192]	@ (80037dc <main+0xbbc>)
 800371c:	2201      	movs	r2, #1
 800371e:	701a      	strb	r2, [r3, #0]
 8003720:	bf00      	nop
 		 		 	 	  switch (position){
 8003722:	e0f0      	b.n	8003906 <main+0xce6>
 		 		 	 	  	  }
 		 		 	 	}
 			else if(symbol[0] == '*' && act_menu == menuGarageLighting){
 8003724:	4b28      	ldr	r3, [pc, #160]	@ (80037c8 <main+0xba8>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b2a      	cmp	r3, #42	@ 0x2a
 800372a:	f040 80ec 	bne.w	8003906 <main+0xce6>
 800372e:	4b28      	ldr	r3, [pc, #160]	@ (80037d0 <main+0xbb0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a30      	ldr	r2, [pc, #192]	@ (80037f4 <main+0xbd4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	f040 80e6 	bne.w	8003906 <main+0xce6>
 		 	 		refreshLCD = true;
 800373a:	4b20      	ldr	r3, [pc, #128]	@ (80037bc <main+0xb9c>)
 800373c:	2201      	movs	r2, #1
 800373e:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 8003740:	4b25      	ldr	r3, [pc, #148]	@ (80037d8 <main+0xbb8>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b03      	cmp	r3, #3
 8003746:	d05b      	beq.n	8003800 <main+0xbe0>
 8003748:	2b03      	cmp	r3, #3
 800374a:	f300 80d2 	bgt.w	80038f2 <main+0xcd2>
 800374e:	2b01      	cmp	r3, #1
 8003750:	d002      	beq.n	8003758 <main+0xb38>
 8003752:	2b02      	cmp	r3, #2
 8003754:	d015      	beq.n	8003782 <main+0xb62>
 8003756:	e0cc      	b.n	80038f2 <main+0xcd2>
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 8003758:	2001      	movs	r0, #1
 800375a:	f7ff f86b 	bl	8002834 <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 800375e:	4811      	ldr	r0, [pc, #68]	@ (80037a4 <main+0xb84>)
 8003760:	f7ff f88e 	bl	8002880 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 8003764:	2201      	movs	r2, #1
 8003766:	2100      	movs	r1, #0
 8003768:	480f      	ldr	r0, [pc, #60]	@ (80037a8 <main+0xb88>)
 800376a:	f7ff f8b8 	bl	80028de <LCD_WriteTextXY>
 		 	 				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 800376e:	4b22      	ldr	r3, [pc, #136]	@ (80037f8 <main+0xbd8>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	4b22      	ldr	r3, [pc, #136]	@ (80037fc <main+0xbdc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	635a      	str	r2, [r3, #52]	@ 0x34
 		 	 				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003778:	2100      	movs	r1, #0
 800377a:	4820      	ldr	r0, [pc, #128]	@ (80037fc <main+0xbdc>)
 800377c:	f003 fe64 	bl	8007448 <HAL_TIM_PWM_Start>
 		 	 				break;
 8003780:	e0c1      	b.n	8003906 <main+0xce6>

 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 8003782:	2001      	movs	r0, #1
 8003784:	f7ff f856 	bl	8002834 <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 8003788:	4806      	ldr	r0, [pc, #24]	@ (80037a4 <main+0xb84>)
 800378a:	f7ff f879 	bl	8002880 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 800378e:	2201      	movs	r2, #1
 8003790:	2100      	movs	r1, #0
 8003792:	4808      	ldr	r0, [pc, #32]	@ (80037b4 <main+0xb94>)
 8003794:	f7ff f8a3 	bl	80028de <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8003798:	2100      	movs	r1, #0
 800379a:	4818      	ldr	r0, [pc, #96]	@ (80037fc <main+0xbdc>)
 800379c:	f003 ff4e 	bl	800763c <HAL_TIM_PWM_Stop>
 				 	 		break;
 80037a0:	e0b1      	b.n	8003906 <main+0xce6>
 80037a2:	bf00      	nop
 80037a4:	08009cc4 	.word	0x08009cc4
 80037a8:	08009cac 	.word	0x08009cac
 80037ac:	200000fc 	.word	0x200000fc
 80037b0:	200003d0 	.word	0x200003d0
 80037b4:	08009cb8 	.word	0x08009cb8
 80037b8:	200002a4 	.word	0x200002a4
 80037bc:	2000029b 	.word	0x2000029b
 80037c0:	200001f0 	.word	0x200001f0
 80037c4:	08009ccc 	.word	0x08009ccc
 80037c8:	200001ec 	.word	0x200001ec
 80037cc:	08009cdc 	.word	0x08009cdc
 80037d0:	200000f8 	.word	0x200000f8
 80037d4:	200000a8 	.word	0x200000a8
 80037d8:	20000054 	.word	0x20000054
 80037dc:	20000055 	.word	0x20000055
 80037e0:	20000098 	.word	0x20000098
 80037e4:	200000b8 	.word	0x200000b8
 80037e8:	08009c10 	.word	0x08009c10
 80037ec:	20000068 	.word	0x20000068
 80037f0:	200000c8 	.word	0x200000c8
 80037f4:	200000d8 	.word	0x200000d8
 80037f8:	20000104 	.word	0x20000104
 80037fc:	20000338 	.word	0x20000338

 		 	 		case 3:
							i = 0;
 8003800:	4b61      	ldr	r3, [pc, #388]	@ (8003988 <main+0xd68>)
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
							refreshLCD = true;
 8003806:	4b61      	ldr	r3, [pc, #388]	@ (800398c <main+0xd6c>)
 8003808:	2201      	movs	r2, #1
 800380a:	701a      	strb	r2, [r3, #0]
							HAL_Delay(200);
 800380c:	20c8      	movs	r0, #200	@ 0xc8
 800380e:	f000 fee1 	bl	80045d4 <HAL_Delay>
							memset(buff, 0, sizeof(buff));
 8003812:	2205      	movs	r2, #5
 8003814:	2100      	movs	r1, #0
 8003816:	485e      	ldr	r0, [pc, #376]	@ (8003990 <main+0xd70>)
 8003818:	f005 fcb2 	bl	8009180 <memset>
							LCD_WriteCommand(HD44780_CLEAR);
 800381c:	2001      	movs	r0, #1
 800381e:	f7ff f809 	bl	8002834 <LCD_WriteCommand>
							LCD_WriteText("Write Bright");
 8003822:	485c      	ldr	r0, [pc, #368]	@ (8003994 <main+0xd74>)
 8003824:	f7ff f82c 	bl	8002880 <LCD_WriteText>
							while(1) {
								refreshLCD = true;
 8003828:	4b58      	ldr	r3, [pc, #352]	@ (800398c <main+0xd6c>)
 800382a:	2201      	movs	r2, #1
 800382c:	701a      	strb	r2, [r3, #0]
								symbol[0] = keypad_readkey();
 800382e:	f7fe febf 	bl	80025b0 <keypad_readkey>
 8003832:	4603      	mov	r3, r0
 8003834:	461a      	mov	r2, r3
 8003836:	4b58      	ldr	r3, [pc, #352]	@ (8003998 <main+0xd78>)
 8003838:	701a      	strb	r2, [r3, #0]
								if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 800383a:	4b57      	ldr	r3, [pc, #348]	@ (8003998 <main+0xd78>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b2f      	cmp	r3, #47	@ 0x2f
 8003840:	d922      	bls.n	8003888 <main+0xc68>
 8003842:	4b55      	ldr	r3, [pc, #340]	@ (8003998 <main+0xd78>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b39      	cmp	r3, #57	@ 0x39
 8003848:	d81e      	bhi.n	8003888 <main+0xc68>
 800384a:	4b4f      	ldr	r3, [pc, #316]	@ (8003988 <main+0xd68>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b03      	cmp	r3, #3
 8003850:	d81a      	bhi.n	8003888 <main+0xc68>
									buff[i] = symbol[0];
 8003852:	4b4d      	ldr	r3, [pc, #308]	@ (8003988 <main+0xd68>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a50      	ldr	r2, [pc, #320]	@ (8003998 <main+0xd78>)
 8003858:	7811      	ldrb	r1, [r2, #0]
 800385a:	4a4d      	ldr	r2, [pc, #308]	@ (8003990 <main+0xd70>)
 800385c:	54d1      	strb	r1, [r2, r3]
									i++;
 800385e:	4b4a      	ldr	r3, [pc, #296]	@ (8003988 <main+0xd68>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3301      	adds	r3, #1
 8003864:	4a48      	ldr	r2, [pc, #288]	@ (8003988 <main+0xd68>)
 8003866:	6013      	str	r3, [r2, #0]
									buff[i] = '\0';
 8003868:	4b47      	ldr	r3, [pc, #284]	@ (8003988 <main+0xd68>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a48      	ldr	r2, [pc, #288]	@ (8003990 <main+0xd70>)
 800386e:	2100      	movs	r1, #0
 8003870:	54d1      	strb	r1, [r2, r3]
									LCD_WriteCommand(HD44780_CLEAR);
 8003872:	2001      	movs	r0, #1
 8003874:	f7fe ffde 	bl	8002834 <LCD_WriteCommand>
									LCD_WriteText("Brightness: ");
 8003878:	4848      	ldr	r0, [pc, #288]	@ (800399c <main+0xd7c>)
 800387a:	f7ff f801 	bl	8002880 <LCD_WriteText>
									LCD_WriteTextXY(buff, 0, 1);
 800387e:	2201      	movs	r2, #1
 8003880:	2100      	movs	r1, #0
 8003882:	4843      	ldr	r0, [pc, #268]	@ (8003990 <main+0xd70>)
 8003884:	f7ff f82b 	bl	80028de <LCD_WriteTextXY>
								}
								HAL_Delay(200);
 8003888:	20c8      	movs	r0, #200	@ 0xc8
 800388a:	f000 fea3 	bl	80045d4 <HAL_Delay>
								symbol[0] = keypad_readkey();
 800388e:	f7fe fe8f 	bl	80025b0 <keypad_readkey>
 8003892:	4603      	mov	r3, r0
 8003894:	461a      	mov	r2, r3
 8003896:	4b40      	ldr	r3, [pc, #256]	@ (8003998 <main+0xd78>)
 8003898:	701a      	strb	r2, [r3, #0]
								if(symbol[0] == '*') {
 800389a:	4b3f      	ldr	r3, [pc, #252]	@ (8003998 <main+0xd78>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b2a      	cmp	r3, #42	@ 0x2a
 80038a0:	d123      	bne.n	80038ea <main+0xcca>
									brightnessGarage = atoi(buff)*10;
 80038a2:	483b      	ldr	r0, [pc, #236]	@ (8003990 <main+0xd70>)
 80038a4:	f005 fbaf 	bl	8009006 <atoi>
 80038a8:	4602      	mov	r2, r0
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	461a      	mov	r2, r3
 80038b4:	4b3a      	ldr	r3, [pc, #232]	@ (80039a0 <main+0xd80>)
 80038b6:	601a      	str	r2, [r3, #0]
									if(brightnessGarage >= 1000) {
 80038b8:	4b39      	ldr	r3, [pc, #228]	@ (80039a0 <main+0xd80>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038c0:	db03      	blt.n	80038ca <main+0xcaa>
										brightnessGarage = 999;
 80038c2:	4b37      	ldr	r3, [pc, #220]	@ (80039a0 <main+0xd80>)
 80038c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80038c8:	601a      	str	r2, [r3, #0]
									}
								   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 80038ca:	4b35      	ldr	r3, [pc, #212]	@ (80039a0 <main+0xd80>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	4b35      	ldr	r3, [pc, #212]	@ (80039a4 <main+0xd84>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	635a      	str	r2, [r3, #52]	@ 0x34
									act_menu = menuGarageLighting;
 80038d4:	4b34      	ldr	r3, [pc, #208]	@ (80039a8 <main+0xd88>)
 80038d6:	4a35      	ldr	r2, [pc, #212]	@ (80039ac <main+0xd8c>)
 80038d8:	601a      	str	r2, [r3, #0]
									position = 1;
 80038da:	4b35      	ldr	r3, [pc, #212]	@ (80039b0 <main+0xd90>)
 80038dc:	2201      	movs	r2, #1
 80038de:	701a      	strb	r2, [r3, #0]
									max_pos = 3;
 80038e0:	4b34      	ldr	r3, [pc, #208]	@ (80039b4 <main+0xd94>)
 80038e2:	2203      	movs	r2, #3
 80038e4:	701a      	strb	r2, [r3, #0]
									break;
 80038e6:	bf00      	nop
								}
								HAL_Delay(100);
							}
							break;
 80038e8:	e00d      	b.n	8003906 <main+0xce6>
								HAL_Delay(100);
 80038ea:	2064      	movs	r0, #100	@ 0x64
 80038ec:	f000 fe72 	bl	80045d4 <HAL_Delay>
								refreshLCD = true;
 80038f0:	e79a      	b.n	8003828 <main+0xc08>
 		 	 		default: act_menu = menuGarage, position = 1, max_pos = 2; break;
 80038f2:	4b2d      	ldr	r3, [pc, #180]	@ (80039a8 <main+0xd88>)
 80038f4:	4a30      	ldr	r2, [pc, #192]	@ (80039b8 <main+0xd98>)
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	4b2d      	ldr	r3, [pc, #180]	@ (80039b0 <main+0xd90>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	701a      	strb	r2, [r3, #0]
 80038fe:	4b2d      	ldr	r3, [pc, #180]	@ (80039b4 <main+0xd94>)
 8003900:	2202      	movs	r2, #2
 8003902:	701a      	strb	r2, [r3, #0]
 8003904:	bf00      	nop
 		 	 	  	  }
 		 	 	}

 	if (symbol[0] == '#')
 8003906:	4b24      	ldr	r3, [pc, #144]	@ (8003998 <main+0xd78>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b23      	cmp	r3, #35	@ 0x23
 800390c:	d10b      	bne.n	8003926 <main+0xd06>
 	{
 		refreshLCD = true;
 800390e:	4b1f      	ldr	r3, [pc, #124]	@ (800398c <main+0xd6c>)
 8003910:	2201      	movs	r2, #1
 8003912:	701a      	strb	r2, [r3, #0]
 		act_menu = mainmenu;
 8003914:	4b24      	ldr	r3, [pc, #144]	@ (80039a8 <main+0xd88>)
 8003916:	4a29      	ldr	r2, [pc, #164]	@ (80039bc <main+0xd9c>)
 8003918:	601a      	str	r2, [r3, #0]
 		position = 1;
 800391a:	4b25      	ldr	r3, [pc, #148]	@ (80039b0 <main+0xd90>)
 800391c:	2201      	movs	r2, #1
 800391e:	701a      	strb	r2, [r3, #0]
 		max_pos = 4;
 8003920:	4b24      	ldr	r3, [pc, #144]	@ (80039b4 <main+0xd94>)
 8003922:	2204      	movs	r2, #4
 8003924:	701a      	strb	r2, [r3, #0]
 	}

 	HAL_Delay(500);
 8003926:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800392a:	f000 fe53 	bl	80045d4 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
 	//BLUETOOTH
 	sendBluetoothData("70");
 800392e:	4824      	ldr	r0, [pc, #144]	@ (80039c0 <main+0xda0>)
 8003930:	f7ff f908 	bl	8002b44 <sendBluetoothData>
 	sendBluetoothData("23");
 8003934:	4823      	ldr	r0, [pc, #140]	@ (80039c4 <main+0xda4>)
 8003936:	f7ff f905 	bl	8002b44 <sendBluetoothData>

 		  if (rxBuffer[0] == 51 && rxBuffer[1] == 51) {  // ASCII '33'
 800393a:	4b23      	ldr	r3, [pc, #140]	@ (80039c8 <main+0xda8>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b33      	cmp	r3, #51	@ 0x33
 8003940:	d111      	bne.n	8003966 <main+0xd46>
 8003942:	4b21      	ldr	r3, [pc, #132]	@ (80039c8 <main+0xda8>)
 8003944:	785b      	ldrb	r3, [r3, #1]
 8003946:	2b33      	cmp	r3, #51	@ 0x33
 8003948:	d10d      	bne.n	8003966 <main+0xd46>
 		            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800394a:	2180      	movs	r1, #128	@ 0x80
 800394c:	481f      	ldr	r0, [pc, #124]	@ (80039cc <main+0xdac>)
 800394e:	f001 f976 	bl	8004c3e <HAL_GPIO_TogglePin>
 		            rxBuffer[0] = 0;
 8003952:	4b1d      	ldr	r3, [pc, #116]	@ (80039c8 <main+0xda8>)
 8003954:	2200      	movs	r2, #0
 8003956:	701a      	strb	r2, [r3, #0]
 		            rxBuffer[1] = 0;
 8003958:	4b1b      	ldr	r3, [pc, #108]	@ (80039c8 <main+0xda8>)
 800395a:	2200      	movs	r2, #0
 800395c:	705a      	strb	r2, [r3, #1]
 		            rxIndex = 0;
 800395e:	4b1c      	ldr	r3, [pc, #112]	@ (80039d0 <main+0xdb0>)
 8003960:	2200      	movs	r2, #0
 8003962:	701a      	strb	r2, [r3, #0]
 8003964:	e00e      	b.n	8003984 <main+0xd64>
 		        }
 		        else if (rxBuffer[0] == 102) {  // ASCII 'f'
 8003966:	4b18      	ldr	r3, [pc, #96]	@ (80039c8 <main+0xda8>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b66      	cmp	r3, #102	@ 0x66
 800396c:	f47f a989 	bne.w	8002c82 <main+0x62>
 		            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003970:	2180      	movs	r1, #128	@ 0x80
 8003972:	4816      	ldr	r0, [pc, #88]	@ (80039cc <main+0xdac>)
 8003974:	f001 f963 	bl	8004c3e <HAL_GPIO_TogglePin>
 		            rxBuffer[0] = 0;
 8003978:	4b13      	ldr	r3, [pc, #76]	@ (80039c8 <main+0xda8>)
 800397a:	2200      	movs	r2, #0
 800397c:	701a      	strb	r2, [r3, #0]
 		            rxIndex = 0;
 800397e:	4b14      	ldr	r3, [pc, #80]	@ (80039d0 <main+0xdb0>)
 8003980:	2200      	movs	r2, #0
 8003982:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(PIR_Garage_GPIO_Port, PIR_Garage_Pin) == GPIO_PIN_SET){PIR_Garage = true;}
 8003984:	f7ff b97d 	b.w	8002c82 <main+0x62>
 8003988:	200002a4 	.word	0x200002a4
 800398c:	2000029b 	.word	0x2000029b
 8003990:	200001f0 	.word	0x200001f0
 8003994:	08009ccc 	.word	0x08009ccc
 8003998:	200001ec 	.word	0x200001ec
 800399c:	08009cdc 	.word	0x08009cdc
 80039a0:	20000104 	.word	0x20000104
 80039a4:	20000338 	.word	0x20000338
 80039a8:	200000f8 	.word	0x200000f8
 80039ac:	200000d8 	.word	0x200000d8
 80039b0:	20000054 	.word	0x20000054
 80039b4:	20000055 	.word	0x20000055
 80039b8:	200000c8 	.word	0x200000c8
 80039bc:	20000058 	.word	0x20000058
 80039c0:	08009d1c 	.word	0x08009d1c
 80039c4:	08009d20 	.word	0x08009d20
 80039c8:	20000290 	.word	0x20000290
 80039cc:	40020400 	.word	0x40020400
 80039d0:	2000029a 	.word	0x2000029a

080039d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b094      	sub	sp, #80	@ 0x50
 80039d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039da:	f107 0320 	add.w	r3, r7, #32
 80039de:	2230      	movs	r2, #48	@ 0x30
 80039e0:	2100      	movs	r1, #0
 80039e2:	4618      	mov	r0, r3
 80039e4:	f005 fbcc 	bl	8009180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039e8:	f107 030c 	add.w	r3, r7, #12
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	605a      	str	r2, [r3, #4]
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	60da      	str	r2, [r3, #12]
 80039f6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80039f8:	f001 fa88 	bl	8004f0c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039fc:	4b27      	ldr	r3, [pc, #156]	@ (8003a9c <SystemClock_Config+0xc8>)
 80039fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a00:	4a26      	ldr	r2, [pc, #152]	@ (8003a9c <SystemClock_Config+0xc8>)
 8003a02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a06:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a08:	4b24      	ldr	r3, [pc, #144]	@ (8003a9c <SystemClock_Config+0xc8>)
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003a14:	4b22      	ldr	r3, [pc, #136]	@ (8003aa0 <SystemClock_Config+0xcc>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003a1c:	4a20      	ldr	r2, [pc, #128]	@ (8003aa0 <SystemClock_Config+0xcc>)
 8003a1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa0 <SystemClock_Config+0xcc>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003a2c:	607b      	str	r3, [r7, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a30:	2302      	movs	r3, #2
 8003a32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a34:	2301      	movs	r3, #1
 8003a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a38:	2310      	movs	r3, #16
 8003a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a40:	2300      	movs	r3, #0
 8003a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003a44:	2308      	movs	r3, #8
 8003a46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003a48:	2348      	movs	r3, #72	@ 0x48
 8003a4a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003a50:	2303      	movs	r3, #3
 8003a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a54:	f107 0320 	add.w	r3, r7, #32
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f001 fa67 	bl	8004f2c <HAL_RCC_OscConfig>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003a64:	f000 f81e 	bl	8003aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a68:	230f      	movs	r3, #15
 8003a6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003a7e:	f107 030c 	add.w	r3, r7, #12
 8003a82:	2102      	movs	r1, #2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f001 fcf5 	bl	8005474 <HAL_RCC_ClockConfig>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003a90:	f000 f808 	bl	8003aa4 <Error_Handler>
  }
}
 8003a94:	bf00      	nop
 8003a96:	3750      	adds	r7, #80	@ 0x50
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40007000 	.word	0x40007000

08003aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003aa8:	b672      	cpsid	i
}
 8003aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003aac:	bf00      	nop
 8003aae:	e7fd      	b.n	8003aac <Error_Handler+0x8>

08003ab0 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8003ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b24 <MX_SPI4_Init+0x74>)
 8003ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8003b28 <MX_SPI4_Init+0x78>)
 8003ab8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003aba:	4b1a      	ldr	r3, [pc, #104]	@ (8003b24 <MX_SPI4_Init+0x74>)
 8003abc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ac0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003ac2:	4b18      	ldr	r3, [pc, #96]	@ (8003b24 <MX_SPI4_Init+0x74>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ac8:	4b16      	ldr	r3, [pc, #88]	@ (8003b24 <MX_SPI4_Init+0x74>)
 8003aca:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003ace:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003ad0:	4b14      	ldr	r3, [pc, #80]	@ (8003b24 <MX_SPI4_Init+0x74>)
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003ad6:	4b13      	ldr	r3, [pc, #76]	@ (8003b24 <MX_SPI4_Init+0x74>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003adc:	4b11      	ldr	r3, [pc, #68]	@ (8003b24 <MX_SPI4_Init+0x74>)
 8003ade:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ae2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8003b24 <MX_SPI4_Init+0x74>)
 8003ae6:	2210      	movs	r2, #16
 8003ae8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003aea:	4b0e      	ldr	r3, [pc, #56]	@ (8003b24 <MX_SPI4_Init+0x74>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003af0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b24 <MX_SPI4_Init+0x74>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003af6:	4b0b      	ldr	r3, [pc, #44]	@ (8003b24 <MX_SPI4_Init+0x74>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8003afc:	4b09      	ldr	r3, [pc, #36]	@ (8003b24 <MX_SPI4_Init+0x74>)
 8003afe:	2207      	movs	r2, #7
 8003b00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003b02:	4b08      	ldr	r3, [pc, #32]	@ (8003b24 <MX_SPI4_Init+0x74>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003b08:	4b06      	ldr	r3, [pc, #24]	@ (8003b24 <MX_SPI4_Init+0x74>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003b0e:	4805      	ldr	r0, [pc, #20]	@ (8003b24 <MX_SPI4_Init+0x74>)
 8003b10:	f002 fac6 	bl	80060a0 <HAL_SPI_Init>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8003b1a:	f7ff ffc3 	bl	8003aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003b1e:	bf00      	nop
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	200002d0 	.word	0x200002d0
 8003b28:	40013400 	.word	0x40013400

08003b2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08a      	sub	sp, #40	@ 0x28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	609a      	str	r2, [r3, #8]
 8003b40:	60da      	str	r2, [r3, #12]
 8003b42:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1b      	ldr	r2, [pc, #108]	@ (8003bb8 <HAL_SPI_MspInit+0x8c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d12f      	bne.n	8003bae <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bbc <HAL_SPI_MspInit+0x90>)
 8003b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b52:	4a1a      	ldr	r2, [pc, #104]	@ (8003bbc <HAL_SPI_MspInit+0x90>)
 8003b54:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b5a:	4b18      	ldr	r3, [pc, #96]	@ (8003bbc <HAL_SPI_MspInit+0x90>)
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b66:	4b15      	ldr	r3, [pc, #84]	@ (8003bbc <HAL_SPI_MspInit+0x90>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6a:	4a14      	ldr	r2, [pc, #80]	@ (8003bbc <HAL_SPI_MspInit+0x90>)
 8003b6c:	f043 0310 	orr.w	r3, r3, #16
 8003b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b72:	4b12      	ldr	r3, [pc, #72]	@ (8003bbc <HAL_SPI_MspInit+0x90>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b76:	f003 0310 	and.w	r3, r3, #16
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8003b7e:	2364      	movs	r3, #100	@ 0x64
 8003b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b82:	2302      	movs	r3, #2
 8003b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003b8e:	2305      	movs	r3, #5
 8003b90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b92:	f107 0314 	add.w	r3, r7, #20
 8003b96:	4619      	mov	r1, r3
 8003b98:	4809      	ldr	r0, [pc, #36]	@ (8003bc0 <HAL_SPI_MspInit+0x94>)
 8003b9a:	f000 fe73 	bl	8004884 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	2054      	movs	r0, #84	@ 0x54
 8003ba4:	f000 fe15 	bl	80047d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8003ba8:	2054      	movs	r0, #84	@ 0x54
 8003baa:	f000 fe2e 	bl	800480a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8003bae:	bf00      	nop
 8003bb0:	3728      	adds	r7, #40	@ 0x28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40013400 	.word	0x40013400
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	40021000 	.word	0x40021000

08003bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003bca:	4b0f      	ldr	r3, [pc, #60]	@ (8003c08 <HAL_MspInit+0x44>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	4a0e      	ldr	r2, [pc, #56]	@ (8003c08 <HAL_MspInit+0x44>)
 8003bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8003c08 <HAL_MspInit+0x44>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003be2:	4b09      	ldr	r3, [pc, #36]	@ (8003c08 <HAL_MspInit+0x44>)
 8003be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be6:	4a08      	ldr	r2, [pc, #32]	@ (8003c08 <HAL_MspInit+0x44>)
 8003be8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bee:	4b06      	ldr	r3, [pc, #24]	@ (8003c08 <HAL_MspInit+0x44>)
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40023800 	.word	0x40023800

08003c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c10:	bf00      	nop
 8003c12:	e7fd      	b.n	8003c10 <NMI_Handler+0x4>

08003c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c18:	bf00      	nop
 8003c1a:	e7fd      	b.n	8003c18 <HardFault_Handler+0x4>

08003c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c20:	bf00      	nop
 8003c22:	e7fd      	b.n	8003c20 <MemManage_Handler+0x4>

08003c24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c28:	bf00      	nop
 8003c2a:	e7fd      	b.n	8003c28 <BusFault_Handler+0x4>

08003c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c30:	bf00      	nop
 8003c32:	e7fd      	b.n	8003c30 <UsageFault_Handler+0x4>

08003c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c42:	b480      	push	{r7}
 8003c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c46:	bf00      	nop
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c54:	bf00      	nop
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c62:	f000 fc97 	bl	8004594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c70:	4802      	ldr	r0, [pc, #8]	@ (8003c7c <TIM2_IRQHandler+0x10>)
 8003c72:	f003 fd63 	bl	800773c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003c76:	bf00      	nop
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000338 	.word	0x20000338

08003c80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c84:	4802      	ldr	r0, [pc, #8]	@ (8003c90 <TIM3_IRQHandler+0x10>)
 8003c86:	f003 fd59 	bl	800773c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c8a:	bf00      	nop
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000384 	.word	0x20000384

08003c94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003c98:	4802      	ldr	r0, [pc, #8]	@ (8003ca4 <TIM4_IRQHandler+0x10>)
 8003c9a:	f003 fd4f 	bl	800773c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003c9e:	bf00      	nop
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	200003d0 	.word	0x200003d0

08003ca8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8003cac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003cb0:	f000 ffe0 	bl	8004c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003cb4:	bf00      	nop
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8003cbc:	4802      	ldr	r0, [pc, #8]	@ (8003cc8 <SPI4_IRQHandler+0x10>)
 8003cbe:	f002 ff4b 	bl	8006b58 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8003cc2:	bf00      	nop
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	200002d0 	.word	0x200002d0

08003ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cd4:	4a14      	ldr	r2, [pc, #80]	@ (8003d28 <_sbrk+0x5c>)
 8003cd6:	4b15      	ldr	r3, [pc, #84]	@ (8003d2c <_sbrk+0x60>)
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ce0:	4b13      	ldr	r3, [pc, #76]	@ (8003d30 <_sbrk+0x64>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d102      	bne.n	8003cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ce8:	4b11      	ldr	r3, [pc, #68]	@ (8003d30 <_sbrk+0x64>)
 8003cea:	4a12      	ldr	r2, [pc, #72]	@ (8003d34 <_sbrk+0x68>)
 8003cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cee:	4b10      	ldr	r3, [pc, #64]	@ (8003d30 <_sbrk+0x64>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d207      	bcs.n	8003d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cfc:	f005 fa48 	bl	8009190 <__errno>
 8003d00:	4603      	mov	r3, r0
 8003d02:	220c      	movs	r2, #12
 8003d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d06:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0a:	e009      	b.n	8003d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d0c:	4b08      	ldr	r3, [pc, #32]	@ (8003d30 <_sbrk+0x64>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d12:	4b07      	ldr	r3, [pc, #28]	@ (8003d30 <_sbrk+0x64>)
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4413      	add	r3, r2
 8003d1a:	4a05      	ldr	r2, [pc, #20]	@ (8003d30 <_sbrk+0x64>)
 8003d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20050000 	.word	0x20050000
 8003d2c:	00000400 	.word	0x00000400
 8003d30:	20000334 	.word	0x20000334
 8003d34:	200005f0 	.word	0x200005f0

08003d38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d3c:	4b06      	ldr	r3, [pc, #24]	@ (8003d58 <SystemInit+0x20>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d42:	4a05      	ldr	r2, [pc, #20]	@ (8003d58 <SystemInit+0x20>)
 8003d44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d4c:	bf00      	nop
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	e000ed00 	.word	0xe000ed00

08003d5c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08e      	sub	sp, #56	@ 0x38
 8003d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	605a      	str	r2, [r3, #4]
 8003d6c:	609a      	str	r2, [r3, #8]
 8003d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d70:	f107 031c 	add.w	r3, r7, #28
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	605a      	str	r2, [r3, #4]
 8003d7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d7c:	463b      	mov	r3, r7
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	605a      	str	r2, [r3, #4]
 8003d84:	609a      	str	r2, [r3, #8]
 8003d86:	60da      	str	r2, [r3, #12]
 8003d88:	611a      	str	r2, [r3, #16]
 8003d8a:	615a      	str	r2, [r3, #20]
 8003d8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d8e:	4b34      	ldr	r3, [pc, #208]	@ (8003e60 <MX_TIM2_Init+0x104>)
 8003d90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003d94:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8003d96:	4b32      	ldr	r3, [pc, #200]	@ (8003e60 <MX_TIM2_Init+0x104>)
 8003d98:	2247      	movs	r2, #71	@ 0x47
 8003d9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d9c:	4b30      	ldr	r3, [pc, #192]	@ (8003e60 <MX_TIM2_Init+0x104>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003da2:	4b2f      	ldr	r3, [pc, #188]	@ (8003e60 <MX_TIM2_Init+0x104>)
 8003da4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003da8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003daa:	4b2d      	ldr	r3, [pc, #180]	@ (8003e60 <MX_TIM2_Init+0x104>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003db0:	4b2b      	ldr	r3, [pc, #172]	@ (8003e60 <MX_TIM2_Init+0x104>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003db6:	482a      	ldr	r0, [pc, #168]	@ (8003e60 <MX_TIM2_Init+0x104>)
 8003db8:	f003 f9e6 	bl	8007188 <HAL_TIM_Base_Init>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003dc2:	f7ff fe6f 	bl	8003aa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003dcc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4823      	ldr	r0, [pc, #140]	@ (8003e60 <MX_TIM2_Init+0x104>)
 8003dd4:	f003 fee6 	bl	8007ba4 <HAL_TIM_ConfigClockSource>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003dde:	f7ff fe61 	bl	8003aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003de2:	481f      	ldr	r0, [pc, #124]	@ (8003e60 <MX_TIM2_Init+0x104>)
 8003de4:	f003 facf 	bl	8007386 <HAL_TIM_PWM_Init>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003dee:	f7ff fe59 	bl	8003aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003df6:	2300      	movs	r3, #0
 8003df8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003dfa:	f107 031c 	add.w	r3, r7, #28
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4817      	ldr	r0, [pc, #92]	@ (8003e60 <MX_TIM2_Init+0x104>)
 8003e02:	f004 fb7f 	bl	8008504 <HAL_TIMEx_MasterConfigSynchronization>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003e0c:	f7ff fe4a 	bl	8003aa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e10:	2360      	movs	r3, #96	@ 0x60
 8003e12:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8003e14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e22:	463b      	mov	r3, r7
 8003e24:	2200      	movs	r2, #0
 8003e26:	4619      	mov	r1, r3
 8003e28:	480d      	ldr	r0, [pc, #52]	@ (8003e60 <MX_TIM2_Init+0x104>)
 8003e2a:	f003 fda7 	bl	800797c <HAL_TIM_PWM_ConfigChannel>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003e34:	f7ff fe36 	bl	8003aa4 <Error_Handler>
  }
  sConfigOC.Pulse = 10;
 8003e38:	230a      	movs	r3, #10
 8003e3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e3c:	463b      	mov	r3, r7
 8003e3e:	2208      	movs	r2, #8
 8003e40:	4619      	mov	r1, r3
 8003e42:	4807      	ldr	r0, [pc, #28]	@ (8003e60 <MX_TIM2_Init+0x104>)
 8003e44:	f003 fd9a 	bl	800797c <HAL_TIM_PWM_ConfigChannel>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8003e4e:	f7ff fe29 	bl	8003aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003e52:	4803      	ldr	r0, [pc, #12]	@ (8003e60 <MX_TIM2_Init+0x104>)
 8003e54:	f000 f9ec 	bl	8004230 <HAL_TIM_MspPostInit>

}
 8003e58:	bf00      	nop
 8003e5a:	3738      	adds	r7, #56	@ 0x38
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20000338 	.word	0x20000338

08003e64 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08e      	sub	sp, #56	@ 0x38
 8003e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	605a      	str	r2, [r3, #4]
 8003e74:	609a      	str	r2, [r3, #8]
 8003e76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e78:	f107 031c 	add.w	r3, r7, #28
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	605a      	str	r2, [r3, #4]
 8003e82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e84:	463b      	mov	r3, r7
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	605a      	str	r2, [r3, #4]
 8003e8c:	609a      	str	r2, [r3, #8]
 8003e8e:	60da      	str	r2, [r3, #12]
 8003e90:	611a      	str	r2, [r3, #16]
 8003e92:	615a      	str	r2, [r3, #20]
 8003e94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e96:	4b33      	ldr	r3, [pc, #204]	@ (8003f64 <MX_TIM3_Init+0x100>)
 8003e98:	4a33      	ldr	r2, [pc, #204]	@ (8003f68 <MX_TIM3_Init+0x104>)
 8003e9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8003e9c:	4b31      	ldr	r3, [pc, #196]	@ (8003f64 <MX_TIM3_Init+0x100>)
 8003e9e:	2247      	movs	r2, #71	@ 0x47
 8003ea0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ea2:	4b30      	ldr	r3, [pc, #192]	@ (8003f64 <MX_TIM3_Init+0x100>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8003ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8003f64 <MX_TIM3_Init+0x100>)
 8003eaa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003eae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eb0:	4b2c      	ldr	r3, [pc, #176]	@ (8003f64 <MX_TIM3_Init+0x100>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003eb6:	4b2b      	ldr	r3, [pc, #172]	@ (8003f64 <MX_TIM3_Init+0x100>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003ebc:	4829      	ldr	r0, [pc, #164]	@ (8003f64 <MX_TIM3_Init+0x100>)
 8003ebe:	f003 f963 	bl	8007188 <HAL_TIM_Base_Init>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003ec8:	f7ff fdec 	bl	8003aa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ecc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003ed2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4822      	ldr	r0, [pc, #136]	@ (8003f64 <MX_TIM3_Init+0x100>)
 8003eda:	f003 fe63 	bl	8007ba4 <HAL_TIM_ConfigClockSource>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003ee4:	f7ff fdde 	bl	8003aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003ee8:	481e      	ldr	r0, [pc, #120]	@ (8003f64 <MX_TIM3_Init+0x100>)
 8003eea:	f003 fa4c 	bl	8007386 <HAL_TIM_PWM_Init>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003ef4:	f7ff fdd6 	bl	8003aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003efc:	2300      	movs	r3, #0
 8003efe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f00:	f107 031c 	add.w	r3, r7, #28
 8003f04:	4619      	mov	r1, r3
 8003f06:	4817      	ldr	r0, [pc, #92]	@ (8003f64 <MX_TIM3_Init+0x100>)
 8003f08:	f004 fafc 	bl	8008504 <HAL_TIMEx_MasterConfigSynchronization>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003f12:	f7ff fdc7 	bl	8003aa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f16:	2360      	movs	r3, #96	@ 0x60
 8003f18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8003f1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f1e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f20:	2300      	movs	r3, #0
 8003f22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f24:	2300      	movs	r3, #0
 8003f26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f28:	463b      	mov	r3, r7
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	480d      	ldr	r0, [pc, #52]	@ (8003f64 <MX_TIM3_Init+0x100>)
 8003f30:	f003 fd24 	bl	800797c <HAL_TIM_PWM_ConfigChannel>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8003f3a:	f7ff fdb3 	bl	8003aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f3e:	463b      	mov	r3, r7
 8003f40:	2208      	movs	r2, #8
 8003f42:	4619      	mov	r1, r3
 8003f44:	4807      	ldr	r0, [pc, #28]	@ (8003f64 <MX_TIM3_Init+0x100>)
 8003f46:	f003 fd19 	bl	800797c <HAL_TIM_PWM_ConfigChannel>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8003f50:	f7ff fda8 	bl	8003aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003f54:	4803      	ldr	r0, [pc, #12]	@ (8003f64 <MX_TIM3_Init+0x100>)
 8003f56:	f000 f96b 	bl	8004230 <HAL_TIM_MspPostInit>

}
 8003f5a:	bf00      	nop
 8003f5c:	3738      	adds	r7, #56	@ 0x38
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20000384 	.word	0x20000384
 8003f68:	40000400 	.word	0x40000400

08003f6c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08e      	sub	sp, #56	@ 0x38
 8003f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	605a      	str	r2, [r3, #4]
 8003f7c:	609a      	str	r2, [r3, #8]
 8003f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f80:	f107 031c 	add.w	r3, r7, #28
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f8c:	463b      	mov	r3, r7
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	605a      	str	r2, [r3, #4]
 8003f94:	609a      	str	r2, [r3, #8]
 8003f96:	60da      	str	r2, [r3, #12]
 8003f98:	611a      	str	r2, [r3, #16]
 8003f9a:	615a      	str	r2, [r3, #20]
 8003f9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003f9e:	4b34      	ldr	r3, [pc, #208]	@ (8004070 <MX_TIM4_Init+0x104>)
 8003fa0:	4a34      	ldr	r2, [pc, #208]	@ (8004074 <MX_TIM4_Init+0x108>)
 8003fa2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8003fa4:	4b32      	ldr	r3, [pc, #200]	@ (8004070 <MX_TIM4_Init+0x104>)
 8003fa6:	2247      	movs	r2, #71	@ 0x47
 8003fa8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003faa:	4b31      	ldr	r3, [pc, #196]	@ (8004070 <MX_TIM4_Init+0x104>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8003fb0:	4b2f      	ldr	r3, [pc, #188]	@ (8004070 <MX_TIM4_Init+0x104>)
 8003fb2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003fb6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fb8:	4b2d      	ldr	r3, [pc, #180]	@ (8004070 <MX_TIM4_Init+0x104>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fbe:	4b2c      	ldr	r3, [pc, #176]	@ (8004070 <MX_TIM4_Init+0x104>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003fc4:	482a      	ldr	r0, [pc, #168]	@ (8004070 <MX_TIM4_Init+0x104>)
 8003fc6:	f003 f8df 	bl	8007188 <HAL_TIM_Base_Init>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003fd0:	f7ff fd68 	bl	8003aa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003fda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4823      	ldr	r0, [pc, #140]	@ (8004070 <MX_TIM4_Init+0x104>)
 8003fe2:	f003 fddf 	bl	8007ba4 <HAL_TIM_ConfigClockSource>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003fec:	f7ff fd5a 	bl	8003aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003ff0:	481f      	ldr	r0, [pc, #124]	@ (8004070 <MX_TIM4_Init+0x104>)
 8003ff2:	f003 f9c8 	bl	8007386 <HAL_TIM_PWM_Init>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003ffc:	f7ff fd52 	bl	8003aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004000:	2300      	movs	r3, #0
 8004002:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004004:	2300      	movs	r3, #0
 8004006:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004008:	f107 031c 	add.w	r3, r7, #28
 800400c:	4619      	mov	r1, r3
 800400e:	4818      	ldr	r0, [pc, #96]	@ (8004070 <MX_TIM4_Init+0x104>)
 8004010:	f004 fa78 	bl	8008504 <HAL_TIMEx_MasterConfigSynchronization>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800401a:	f7ff fd43 	bl	8003aa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800401e:	2360      	movs	r3, #96	@ 0x60
 8004020:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8004022:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004026:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004028:	2300      	movs	r3, #0
 800402a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800402c:	2300      	movs	r3, #0
 800402e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004030:	463b      	mov	r3, r7
 8004032:	2200      	movs	r2, #0
 8004034:	4619      	mov	r1, r3
 8004036:	480e      	ldr	r0, [pc, #56]	@ (8004070 <MX_TIM4_Init+0x104>)
 8004038:	f003 fca0 	bl	800797c <HAL_TIM_PWM_ConfigChannel>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8004042:	f7ff fd2f 	bl	8003aa4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8004046:	2300      	movs	r3, #0
 8004048:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800404a:	463b      	mov	r3, r7
 800404c:	2208      	movs	r2, #8
 800404e:	4619      	mov	r1, r3
 8004050:	4807      	ldr	r0, [pc, #28]	@ (8004070 <MX_TIM4_Init+0x104>)
 8004052:	f003 fc93 	bl	800797c <HAL_TIM_PWM_ConfigChannel>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 800405c:	f7ff fd22 	bl	8003aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004060:	4803      	ldr	r0, [pc, #12]	@ (8004070 <MX_TIM4_Init+0x104>)
 8004062:	f000 f8e5 	bl	8004230 <HAL_TIM_MspPostInit>

}
 8004066:	bf00      	nop
 8004068:	3738      	adds	r7, #56	@ 0x38
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	200003d0 	.word	0x200003d0
 8004074:	40000800 	.word	0x40000800

08004078 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08e      	sub	sp, #56	@ 0x38
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004080:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	609a      	str	r2, [r3, #8]
 800408c:	60da      	str	r2, [r3, #12]
 800408e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004098:	d130      	bne.n	80040fc <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800409a:	4b5e      	ldr	r3, [pc, #376]	@ (8004214 <HAL_TIM_Base_MspInit+0x19c>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409e:	4a5d      	ldr	r2, [pc, #372]	@ (8004214 <HAL_TIM_Base_MspInit+0x19c>)
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040a6:	4b5b      	ldr	r3, [pc, #364]	@ (8004214 <HAL_TIM_Base_MspInit+0x19c>)
 80040a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	623b      	str	r3, [r7, #32]
 80040b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040b2:	4b58      	ldr	r3, [pc, #352]	@ (8004214 <HAL_TIM_Base_MspInit+0x19c>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b6:	4a57      	ldr	r2, [pc, #348]	@ (8004214 <HAL_TIM_Base_MspInit+0x19c>)
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80040be:	4b55      	ldr	r3, [pc, #340]	@ (8004214 <HAL_TIM_Base_MspInit+0x19c>)
 80040c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	61fb      	str	r3, [r7, #28]
 80040c8:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80040ca:	2308      	movs	r3, #8
 80040cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ce:	2302      	movs	r3, #2
 80040d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d2:	2300      	movs	r3, #0
 80040d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d6:	2300      	movs	r3, #0
 80040d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80040da:	2301      	movs	r3, #1
 80040dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040e2:	4619      	mov	r1, r3
 80040e4:	484c      	ldr	r0, [pc, #304]	@ (8004218 <HAL_TIM_Base_MspInit+0x1a0>)
 80040e6:	f000 fbcd 	bl	8004884 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80040ea:	2200      	movs	r2, #0
 80040ec:	2100      	movs	r1, #0
 80040ee:	201c      	movs	r0, #28
 80040f0:	f000 fb6f 	bl	80047d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80040f4:	201c      	movs	r0, #28
 80040f6:	f000 fb88 	bl	800480a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80040fa:	e087      	b.n	800420c <HAL_TIM_Base_MspInit+0x194>
  else if(tim_baseHandle->Instance==TIM3)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a46      	ldr	r2, [pc, #280]	@ (800421c <HAL_TIM_Base_MspInit+0x1a4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d14c      	bne.n	80041a0 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004106:	4b43      	ldr	r3, [pc, #268]	@ (8004214 <HAL_TIM_Base_MspInit+0x19c>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410a:	4a42      	ldr	r2, [pc, #264]	@ (8004214 <HAL_TIM_Base_MspInit+0x19c>)
 800410c:	f043 0302 	orr.w	r3, r3, #2
 8004110:	6413      	str	r3, [r2, #64]	@ 0x40
 8004112:	4b40      	ldr	r3, [pc, #256]	@ (8004214 <HAL_TIM_Base_MspInit+0x19c>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	61bb      	str	r3, [r7, #24]
 800411c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800411e:	4b3d      	ldr	r3, [pc, #244]	@ (8004214 <HAL_TIM_Base_MspInit+0x19c>)
 8004120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004122:	4a3c      	ldr	r2, [pc, #240]	@ (8004214 <HAL_TIM_Base_MspInit+0x19c>)
 8004124:	f043 0302 	orr.w	r3, r3, #2
 8004128:	6313      	str	r3, [r2, #48]	@ 0x30
 800412a:	4b3a      	ldr	r3, [pc, #232]	@ (8004214 <HAL_TIM_Base_MspInit+0x19c>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004136:	4b37      	ldr	r3, [pc, #220]	@ (8004214 <HAL_TIM_Base_MspInit+0x19c>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413a:	4a36      	ldr	r2, [pc, #216]	@ (8004214 <HAL_TIM_Base_MspInit+0x19c>)
 800413c:	f043 0304 	orr.w	r3, r3, #4
 8004140:	6313      	str	r3, [r2, #48]	@ 0x30
 8004142:	4b34      	ldr	r3, [pc, #208]	@ (8004214 <HAL_TIM_Base_MspInit+0x19c>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800414e:	2302      	movs	r3, #2
 8004150:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004152:	2302      	movs	r3, #2
 8004154:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004156:	2300      	movs	r3, #0
 8004158:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800415a:	2300      	movs	r3, #0
 800415c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800415e:	2302      	movs	r3, #2
 8004160:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004166:	4619      	mov	r1, r3
 8004168:	482d      	ldr	r0, [pc, #180]	@ (8004220 <HAL_TIM_Base_MspInit+0x1a8>)
 800416a:	f000 fb8b 	bl	8004884 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800416e:	2380      	movs	r3, #128	@ 0x80
 8004170:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004172:	2302      	movs	r3, #2
 8004174:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004176:	2300      	movs	r3, #0
 8004178:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800417a:	2300      	movs	r3, #0
 800417c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800417e:	2302      	movs	r3, #2
 8004180:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004182:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004186:	4619      	mov	r1, r3
 8004188:	4826      	ldr	r0, [pc, #152]	@ (8004224 <HAL_TIM_Base_MspInit+0x1ac>)
 800418a:	f000 fb7b 	bl	8004884 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800418e:	2200      	movs	r2, #0
 8004190:	2100      	movs	r1, #0
 8004192:	201d      	movs	r0, #29
 8004194:	f000 fb1d 	bl	80047d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004198:	201d      	movs	r0, #29
 800419a:	f000 fb36 	bl	800480a <HAL_NVIC_EnableIRQ>
}
 800419e:	e035      	b.n	800420c <HAL_TIM_Base_MspInit+0x194>
  else if(tim_baseHandle->Instance==TIM4)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a20      	ldr	r2, [pc, #128]	@ (8004228 <HAL_TIM_Base_MspInit+0x1b0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d130      	bne.n	800420c <HAL_TIM_Base_MspInit+0x194>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004214 <HAL_TIM_Base_MspInit+0x19c>)
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ae:	4a19      	ldr	r2, [pc, #100]	@ (8004214 <HAL_TIM_Base_MspInit+0x19c>)
 80041b0:	f043 0304 	orr.w	r3, r3, #4
 80041b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80041b6:	4b17      	ldr	r3, [pc, #92]	@ (8004214 <HAL_TIM_Base_MspInit+0x19c>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041c2:	4b14      	ldr	r3, [pc, #80]	@ (8004214 <HAL_TIM_Base_MspInit+0x19c>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c6:	4a13      	ldr	r2, [pc, #76]	@ (8004214 <HAL_TIM_Base_MspInit+0x19c>)
 80041c8:	f043 0308 	orr.w	r3, r3, #8
 80041cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80041ce:	4b11      	ldr	r3, [pc, #68]	@ (8004214 <HAL_TIM_Base_MspInit+0x19c>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	60bb      	str	r3, [r7, #8]
 80041d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80041da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80041de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e0:	2302      	movs	r3, #2
 80041e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e8:	2300      	movs	r3, #0
 80041ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80041ec:	2302      	movs	r3, #2
 80041ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041f4:	4619      	mov	r1, r3
 80041f6:	480d      	ldr	r0, [pc, #52]	@ (800422c <HAL_TIM_Base_MspInit+0x1b4>)
 80041f8:	f000 fb44 	bl	8004884 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80041fc:	2200      	movs	r2, #0
 80041fe:	2100      	movs	r1, #0
 8004200:	201e      	movs	r0, #30
 8004202:	f000 fae6 	bl	80047d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004206:	201e      	movs	r0, #30
 8004208:	f000 faff 	bl	800480a <HAL_NVIC_EnableIRQ>
}
 800420c:	bf00      	nop
 800420e:	3738      	adds	r7, #56	@ 0x38
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40023800 	.word	0x40023800
 8004218:	40020000 	.word	0x40020000
 800421c:	40000400 	.word	0x40000400
 8004220:	40020400 	.word	0x40020400
 8004224:	40020800 	.word	0x40020800
 8004228:	40000800 	.word	0x40000800
 800422c:	40020c00 	.word	0x40020c00

08004230 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08c      	sub	sp, #48	@ 0x30
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004238:	f107 031c 	add.w	r3, r7, #28
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	609a      	str	r2, [r3, #8]
 8004244:	60da      	str	r2, [r3, #12]
 8004246:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004250:	d139      	bne.n	80042c6 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004252:	4b4f      	ldr	r3, [pc, #316]	@ (8004390 <HAL_TIM_MspPostInit+0x160>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004256:	4a4e      	ldr	r2, [pc, #312]	@ (8004390 <HAL_TIM_MspPostInit+0x160>)
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	6313      	str	r3, [r2, #48]	@ 0x30
 800425e:	4b4c      	ldr	r3, [pc, #304]	@ (8004390 <HAL_TIM_MspPostInit+0x160>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	61bb      	str	r3, [r7, #24]
 8004268:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800426a:	4b49      	ldr	r3, [pc, #292]	@ (8004390 <HAL_TIM_MspPostInit+0x160>)
 800426c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426e:	4a48      	ldr	r2, [pc, #288]	@ (8004390 <HAL_TIM_MspPostInit+0x160>)
 8004270:	f043 0302 	orr.w	r3, r3, #2
 8004274:	6313      	str	r3, [r2, #48]	@ 0x30
 8004276:	4b46      	ldr	r3, [pc, #280]	@ (8004390 <HAL_TIM_MspPostInit+0x160>)
 8004278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004282:	2301      	movs	r3, #1
 8004284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004286:	2302      	movs	r3, #2
 8004288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428a:	2300      	movs	r3, #0
 800428c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800428e:	2300      	movs	r3, #0
 8004290:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004292:	2301      	movs	r3, #1
 8004294:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004296:	f107 031c 	add.w	r3, r7, #28
 800429a:	4619      	mov	r1, r3
 800429c:	483d      	ldr	r0, [pc, #244]	@ (8004394 <HAL_TIM_MspPostInit+0x164>)
 800429e:	f000 faf1 	bl	8004884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80042a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a8:	2302      	movs	r3, #2
 80042aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b0:	2300      	movs	r3, #0
 80042b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80042b4:	2301      	movs	r3, #1
 80042b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042b8:	f107 031c 	add.w	r3, r7, #28
 80042bc:	4619      	mov	r1, r3
 80042be:	4836      	ldr	r0, [pc, #216]	@ (8004398 <HAL_TIM_MspPostInit+0x168>)
 80042c0:	f000 fae0 	bl	8004884 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80042c4:	e05f      	b.n	8004386 <HAL_TIM_MspPostInit+0x156>
  else if(timHandle->Instance==TIM3)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a34      	ldr	r2, [pc, #208]	@ (800439c <HAL_TIM_MspPostInit+0x16c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d138      	bne.n	8004342 <HAL_TIM_MspPostInit+0x112>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042d0:	4b2f      	ldr	r3, [pc, #188]	@ (8004390 <HAL_TIM_MspPostInit+0x160>)
 80042d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d4:	4a2e      	ldr	r2, [pc, #184]	@ (8004390 <HAL_TIM_MspPostInit+0x160>)
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	6313      	str	r3, [r2, #48]	@ 0x30
 80042dc:	4b2c      	ldr	r3, [pc, #176]	@ (8004390 <HAL_TIM_MspPostInit+0x160>)
 80042de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042e8:	4b29      	ldr	r3, [pc, #164]	@ (8004390 <HAL_TIM_MspPostInit+0x160>)
 80042ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ec:	4a28      	ldr	r2, [pc, #160]	@ (8004390 <HAL_TIM_MspPostInit+0x160>)
 80042ee:	f043 0302 	orr.w	r3, r3, #2
 80042f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80042f4:	4b26      	ldr	r3, [pc, #152]	@ (8004390 <HAL_TIM_MspPostInit+0x160>)
 80042f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004300:	2340      	movs	r3, #64	@ 0x40
 8004302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004304:	2302      	movs	r3, #2
 8004306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004308:	2300      	movs	r3, #0
 800430a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800430c:	2300      	movs	r3, #0
 800430e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004310:	2302      	movs	r3, #2
 8004312:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004314:	f107 031c 	add.w	r3, r7, #28
 8004318:	4619      	mov	r1, r3
 800431a:	481e      	ldr	r0, [pc, #120]	@ (8004394 <HAL_TIM_MspPostInit+0x164>)
 800431c:	f000 fab2 	bl	8004884 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004320:	2301      	movs	r3, #1
 8004322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004324:	2302      	movs	r3, #2
 8004326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004328:	2300      	movs	r3, #0
 800432a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800432c:	2300      	movs	r3, #0
 800432e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004330:	2302      	movs	r3, #2
 8004332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004334:	f107 031c 	add.w	r3, r7, #28
 8004338:	4619      	mov	r1, r3
 800433a:	4817      	ldr	r0, [pc, #92]	@ (8004398 <HAL_TIM_MspPostInit+0x168>)
 800433c:	f000 faa2 	bl	8004884 <HAL_GPIO_Init>
}
 8004340:	e021      	b.n	8004386 <HAL_TIM_MspPostInit+0x156>
  else if(timHandle->Instance==TIM4)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a16      	ldr	r2, [pc, #88]	@ (80043a0 <HAL_TIM_MspPostInit+0x170>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d11c      	bne.n	8004386 <HAL_TIM_MspPostInit+0x156>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800434c:	4b10      	ldr	r3, [pc, #64]	@ (8004390 <HAL_TIM_MspPostInit+0x160>)
 800434e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004350:	4a0f      	ldr	r2, [pc, #60]	@ (8004390 <HAL_TIM_MspPostInit+0x160>)
 8004352:	f043 0308 	orr.w	r3, r3, #8
 8004356:	6313      	str	r3, [r2, #48]	@ 0x30
 8004358:	4b0d      	ldr	r3, [pc, #52]	@ (8004390 <HAL_TIM_MspPostInit+0x160>)
 800435a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8004364:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8004368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436a:	2302      	movs	r3, #2
 800436c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436e:	2300      	movs	r3, #0
 8004370:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004372:	2300      	movs	r3, #0
 8004374:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004376:	2302      	movs	r3, #2
 8004378:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800437a:	f107 031c 	add.w	r3, r7, #28
 800437e:	4619      	mov	r1, r3
 8004380:	4808      	ldr	r0, [pc, #32]	@ (80043a4 <HAL_TIM_MspPostInit+0x174>)
 8004382:	f000 fa7f 	bl	8004884 <HAL_GPIO_Init>
}
 8004386:	bf00      	nop
 8004388:	3730      	adds	r7, #48	@ 0x30
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40023800 	.word	0x40023800
 8004394:	40020000 	.word	0x40020000
 8004398:	40020400 	.word	0x40020400
 800439c:	40000400 	.word	0x40000400
 80043a0:	40000800 	.word	0x40000800
 80043a4:	40020c00 	.word	0x40020c00

080043a8 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80043ac:	4b14      	ldr	r3, [pc, #80]	@ (8004400 <MX_USART6_UART_Init+0x58>)
 80043ae:	4a15      	ldr	r2, [pc, #84]	@ (8004404 <MX_USART6_UART_Init+0x5c>)
 80043b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80043b2:	4b13      	ldr	r3, [pc, #76]	@ (8004400 <MX_USART6_UART_Init+0x58>)
 80043b4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80043b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80043ba:	4b11      	ldr	r3, [pc, #68]	@ (8004400 <MX_USART6_UART_Init+0x58>)
 80043bc:	2200      	movs	r2, #0
 80043be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80043c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004400 <MX_USART6_UART_Init+0x58>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80043c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004400 <MX_USART6_UART_Init+0x58>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80043cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004400 <MX_USART6_UART_Init+0x58>)
 80043ce:	220c      	movs	r2, #12
 80043d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004400 <MX_USART6_UART_Init+0x58>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80043d8:	4b09      	ldr	r3, [pc, #36]	@ (8004400 <MX_USART6_UART_Init+0x58>)
 80043da:	2200      	movs	r2, #0
 80043dc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043de:	4b08      	ldr	r3, [pc, #32]	@ (8004400 <MX_USART6_UART_Init+0x58>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043e4:	4b06      	ldr	r3, [pc, #24]	@ (8004400 <MX_USART6_UART_Init+0x58>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80043ea:	4805      	ldr	r0, [pc, #20]	@ (8004400 <MX_USART6_UART_Init+0x58>)
 80043ec:	f004 f936 	bl	800865c <HAL_UART_Init>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80043f6:	f7ff fb55 	bl	8003aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80043fa:	bf00      	nop
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	2000041c 	.word	0x2000041c
 8004404:	40011400 	.word	0x40011400

08004408 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b0aa      	sub	sp, #168	@ 0xa8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004410:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	605a      	str	r2, [r3, #4]
 800441a:	609a      	str	r2, [r3, #8]
 800441c:	60da      	str	r2, [r3, #12]
 800441e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004420:	f107 0310 	add.w	r3, r7, #16
 8004424:	2284      	movs	r2, #132	@ 0x84
 8004426:	2100      	movs	r1, #0
 8004428:	4618      	mov	r0, r3
 800442a:	f004 fea9 	bl	8009180 <memset>
  if(uartHandle->Instance==USART6)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a22      	ldr	r2, [pc, #136]	@ (80044bc <HAL_UART_MspInit+0xb4>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d13c      	bne.n	80044b2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004438:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800443c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800443e:	2300      	movs	r3, #0
 8004440:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004442:	f107 0310 	add.w	r3, r7, #16
 8004446:	4618      	mov	r0, r3
 8004448:	f001 fa3a 	bl	80058c0 <HAL_RCCEx_PeriphCLKConfig>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004452:	f7ff fb27 	bl	8003aa4 <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8004456:	4b1a      	ldr	r3, [pc, #104]	@ (80044c0 <HAL_UART_MspInit+0xb8>)
 8004458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445a:	4a19      	ldr	r2, [pc, #100]	@ (80044c0 <HAL_UART_MspInit+0xb8>)
 800445c:	f043 0320 	orr.w	r3, r3, #32
 8004460:	6453      	str	r3, [r2, #68]	@ 0x44
 8004462:	4b17      	ldr	r3, [pc, #92]	@ (80044c0 <HAL_UART_MspInit+0xb8>)
 8004464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004466:	f003 0320 	and.w	r3, r3, #32
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800446e:	4b14      	ldr	r3, [pc, #80]	@ (80044c0 <HAL_UART_MspInit+0xb8>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004472:	4a13      	ldr	r2, [pc, #76]	@ (80044c0 <HAL_UART_MspInit+0xb8>)
 8004474:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004478:	6313      	str	r3, [r2, #48]	@ 0x30
 800447a:	4b11      	ldr	r3, [pc, #68]	@ (80044c0 <HAL_UART_MspInit+0xb8>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004482:	60bb      	str	r3, [r7, #8]
 8004484:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8004486:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 800448a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800448e:	2302      	movs	r3, #2
 8004490:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004494:	2300      	movs	r3, #0
 8004496:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800449a:	2303      	movs	r3, #3
 800449c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80044a0:	2308      	movs	r3, #8
 80044a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80044a6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80044aa:	4619      	mov	r1, r3
 80044ac:	4805      	ldr	r0, [pc, #20]	@ (80044c4 <HAL_UART_MspInit+0xbc>)
 80044ae:	f000 f9e9 	bl	8004884 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80044b2:	bf00      	nop
 80044b4:	37a8      	adds	r7, #168	@ 0xa8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40011400 	.word	0x40011400
 80044c0:	40023800 	.word	0x40023800
 80044c4:	40021800 	.word	0x40021800

080044c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80044c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004500 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044cc:	480d      	ldr	r0, [pc, #52]	@ (8004504 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80044ce:	490e      	ldr	r1, [pc, #56]	@ (8004508 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80044d0:	4a0e      	ldr	r2, [pc, #56]	@ (800450c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044d4:	e002      	b.n	80044dc <LoopCopyDataInit>

080044d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044da:	3304      	adds	r3, #4

080044dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044e0:	d3f9      	bcc.n	80044d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044e2:	4a0b      	ldr	r2, [pc, #44]	@ (8004510 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80044e4:	4c0b      	ldr	r4, [pc, #44]	@ (8004514 <LoopFillZerobss+0x26>)
  movs r3, #0
 80044e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044e8:	e001      	b.n	80044ee <LoopFillZerobss>

080044ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044ec:	3204      	adds	r2, #4

080044ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044f0:	d3fb      	bcc.n	80044ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80044f2:	f7ff fc21 	bl	8003d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044f6:	f004 fe51 	bl	800919c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044fa:	f7fe fb91 	bl	8002c20 <main>
  bx  lr    
 80044fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004500:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004508:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 800450c:	08009e98 	.word	0x08009e98
  ldr r2, =_sbss
 8004510:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8004514:	200005f0 	.word	0x200005f0

08004518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004518:	e7fe      	b.n	8004518 <ADC_IRQHandler>

0800451a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800451e:	2003      	movs	r0, #3
 8004520:	f000 f94c 	bl	80047bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004524:	2000      	movs	r0, #0
 8004526:	f000 f805 	bl	8004534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800452a:	f7ff fb4b 	bl	8003bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800453c:	4b12      	ldr	r3, [pc, #72]	@ (8004588 <HAL_InitTick+0x54>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	4b12      	ldr	r3, [pc, #72]	@ (800458c <HAL_InitTick+0x58>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	4619      	mov	r1, r3
 8004546:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800454a:	fbb3 f3f1 	udiv	r3, r3, r1
 800454e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004552:	4618      	mov	r0, r3
 8004554:	f000 f967 	bl	8004826 <HAL_SYSTICK_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e00e      	b.n	8004580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b0f      	cmp	r3, #15
 8004566:	d80a      	bhi.n	800457e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004568:	2200      	movs	r2, #0
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	f04f 30ff 	mov.w	r0, #4294967295
 8004570:	f000 f92f 	bl	80047d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004574:	4a06      	ldr	r2, [pc, #24]	@ (8004590 <HAL_InitTick+0x5c>)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	e000      	b.n	8004580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
}
 8004580:	4618      	mov	r0, r3
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	20000108 	.word	0x20000108
 800458c:	20000110 	.word	0x20000110
 8004590:	2000010c 	.word	0x2000010c

08004594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004598:	4b06      	ldr	r3, [pc, #24]	@ (80045b4 <HAL_IncTick+0x20>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	461a      	mov	r2, r3
 800459e:	4b06      	ldr	r3, [pc, #24]	@ (80045b8 <HAL_IncTick+0x24>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4413      	add	r3, r2
 80045a4:	4a04      	ldr	r2, [pc, #16]	@ (80045b8 <HAL_IncTick+0x24>)
 80045a6:	6013      	str	r3, [r2, #0]
}
 80045a8:	bf00      	nop
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	20000110 	.word	0x20000110
 80045b8:	200004a4 	.word	0x200004a4

080045bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  return uwTick;
 80045c0:	4b03      	ldr	r3, [pc, #12]	@ (80045d0 <HAL_GetTick+0x14>)
 80045c2:	681b      	ldr	r3, [r3, #0]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	200004a4 	.word	0x200004a4

080045d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045dc:	f7ff ffee 	bl	80045bc <HAL_GetTick>
 80045e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ec:	d005      	beq.n	80045fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004618 <HAL_Delay+0x44>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045fa:	bf00      	nop
 80045fc:	f7ff ffde 	bl	80045bc <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	429a      	cmp	r2, r3
 800460a:	d8f7      	bhi.n	80045fc <HAL_Delay+0x28>
  {
  }
}
 800460c:	bf00      	nop
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20000110 	.word	0x20000110

0800461c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800462c:	4b0b      	ldr	r3, [pc, #44]	@ (800465c <__NVIC_SetPriorityGrouping+0x40>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004638:	4013      	ands	r3, r2
 800463a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004644:	4b06      	ldr	r3, [pc, #24]	@ (8004660 <__NVIC_SetPriorityGrouping+0x44>)
 8004646:	4313      	orrs	r3, r2
 8004648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800464a:	4a04      	ldr	r2, [pc, #16]	@ (800465c <__NVIC_SetPriorityGrouping+0x40>)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	60d3      	str	r3, [r2, #12]
}
 8004650:	bf00      	nop
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	e000ed00 	.word	0xe000ed00
 8004660:	05fa0000 	.word	0x05fa0000

08004664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004668:	4b04      	ldr	r3, [pc, #16]	@ (800467c <__NVIC_GetPriorityGrouping+0x18>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	0a1b      	lsrs	r3, r3, #8
 800466e:	f003 0307 	and.w	r3, r3, #7
}
 8004672:	4618      	mov	r0, r3
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	e000ed00 	.word	0xe000ed00

08004680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800468a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468e:	2b00      	cmp	r3, #0
 8004690:	db0b      	blt.n	80046aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	f003 021f 	and.w	r2, r3, #31
 8004698:	4907      	ldr	r1, [pc, #28]	@ (80046b8 <__NVIC_EnableIRQ+0x38>)
 800469a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	2001      	movs	r0, #1
 80046a2:	fa00 f202 	lsl.w	r2, r0, r2
 80046a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	e000e100 	.word	0xe000e100

080046bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	6039      	str	r1, [r7, #0]
 80046c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	db0a      	blt.n	80046e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	490c      	ldr	r1, [pc, #48]	@ (8004708 <__NVIC_SetPriority+0x4c>)
 80046d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046da:	0112      	lsls	r2, r2, #4
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	440b      	add	r3, r1
 80046e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046e4:	e00a      	b.n	80046fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	4908      	ldr	r1, [pc, #32]	@ (800470c <__NVIC_SetPriority+0x50>)
 80046ec:	79fb      	ldrb	r3, [r7, #7]
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	3b04      	subs	r3, #4
 80046f4:	0112      	lsls	r2, r2, #4
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	440b      	add	r3, r1
 80046fa:	761a      	strb	r2, [r3, #24]
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	e000e100 	.word	0xe000e100
 800470c:	e000ed00 	.word	0xe000ed00

08004710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004710:	b480      	push	{r7}
 8004712:	b089      	sub	sp, #36	@ 0x24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	f1c3 0307 	rsb	r3, r3, #7
 800472a:	2b04      	cmp	r3, #4
 800472c:	bf28      	it	cs
 800472e:	2304      	movcs	r3, #4
 8004730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	3304      	adds	r3, #4
 8004736:	2b06      	cmp	r3, #6
 8004738:	d902      	bls.n	8004740 <NVIC_EncodePriority+0x30>
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	3b03      	subs	r3, #3
 800473e:	e000      	b.n	8004742 <NVIC_EncodePriority+0x32>
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004744:	f04f 32ff 	mov.w	r2, #4294967295
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43da      	mvns	r2, r3
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	401a      	ands	r2, r3
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004758:	f04f 31ff 	mov.w	r1, #4294967295
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	fa01 f303 	lsl.w	r3, r1, r3
 8004762:	43d9      	mvns	r1, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004768:	4313      	orrs	r3, r2
         );
}
 800476a:	4618      	mov	r0, r3
 800476c:	3724      	adds	r7, #36	@ 0x24
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
	...

08004778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3b01      	subs	r3, #1
 8004784:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004788:	d301      	bcc.n	800478e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800478a:	2301      	movs	r3, #1
 800478c:	e00f      	b.n	80047ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800478e:	4a0a      	ldr	r2, [pc, #40]	@ (80047b8 <SysTick_Config+0x40>)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3b01      	subs	r3, #1
 8004794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004796:	210f      	movs	r1, #15
 8004798:	f04f 30ff 	mov.w	r0, #4294967295
 800479c:	f7ff ff8e 	bl	80046bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047a0:	4b05      	ldr	r3, [pc, #20]	@ (80047b8 <SysTick_Config+0x40>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047a6:	4b04      	ldr	r3, [pc, #16]	@ (80047b8 <SysTick_Config+0x40>)
 80047a8:	2207      	movs	r2, #7
 80047aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	e000e010 	.word	0xe000e010

080047bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7ff ff29 	bl	800461c <__NVIC_SetPriorityGrouping>
}
 80047ca:	bf00      	nop
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b086      	sub	sp, #24
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	4603      	mov	r3, r0
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	607a      	str	r2, [r7, #4]
 80047de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80047e0:	2300      	movs	r3, #0
 80047e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047e4:	f7ff ff3e 	bl	8004664 <__NVIC_GetPriorityGrouping>
 80047e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	6978      	ldr	r0, [r7, #20]
 80047f0:	f7ff ff8e 	bl	8004710 <NVIC_EncodePriority>
 80047f4:	4602      	mov	r2, r0
 80047f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047fa:	4611      	mov	r1, r2
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff ff5d 	bl	80046bc <__NVIC_SetPriority>
}
 8004802:	bf00      	nop
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b082      	sub	sp, #8
 800480e:	af00      	add	r7, sp, #0
 8004810:	4603      	mov	r3, r0
 8004812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff ff31 	bl	8004680 <__NVIC_EnableIRQ>
}
 800481e:	bf00      	nop
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b082      	sub	sp, #8
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7ff ffa2 	bl	8004778 <SysTick_Config>
 8004834:	4603      	mov	r3, r0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d004      	beq.n	800485c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2280      	movs	r2, #128	@ 0x80
 8004856:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e00c      	b.n	8004876 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2205      	movs	r2, #5
 8004860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0201 	bic.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
	...

08004884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004884:	b480      	push	{r7}
 8004886:	b089      	sub	sp, #36	@ 0x24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800488e:	2300      	movs	r3, #0
 8004890:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004892:	2300      	movs	r3, #0
 8004894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004896:	2300      	movs	r3, #0
 8004898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800489a:	2300      	movs	r3, #0
 800489c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800489e:	2300      	movs	r3, #0
 80048a0:	61fb      	str	r3, [r7, #28]
 80048a2:	e175      	b.n	8004b90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80048a4:	2201      	movs	r2, #1
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4013      	ands	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	429a      	cmp	r2, r3
 80048be:	f040 8164 	bne.w	8004b8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d005      	beq.n	80048da <HAL_GPIO_Init+0x56>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d130      	bne.n	800493c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	2203      	movs	r2, #3
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	43db      	mvns	r3, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4013      	ands	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4313      	orrs	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004910:	2201      	movs	r2, #1
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	43db      	mvns	r3, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	4013      	ands	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	091b      	lsrs	r3, r3, #4
 8004926:	f003 0201 	and.w	r2, r3, #1
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	4313      	orrs	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f003 0303 	and.w	r3, r3, #3
 8004944:	2b03      	cmp	r3, #3
 8004946:	d017      	beq.n	8004978 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	2203      	movs	r2, #3
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	43db      	mvns	r3, r3
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	4013      	ands	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4313      	orrs	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d123      	bne.n	80049cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	08da      	lsrs	r2, r3, #3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3208      	adds	r2, #8
 800498c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	220f      	movs	r2, #15
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	43db      	mvns	r3, r3
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	4013      	ands	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	08da      	lsrs	r2, r3, #3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3208      	adds	r2, #8
 80049c6:	69b9      	ldr	r1, [r7, #24]
 80049c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	2203      	movs	r2, #3
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	43db      	mvns	r3, r3
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	4013      	ands	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 0203 	and.w	r2, r3, #3
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	fa02 f303 	lsl.w	r3, r2, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 80be 	beq.w	8004b8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a0e:	4b66      	ldr	r3, [pc, #408]	@ (8004ba8 <HAL_GPIO_Init+0x324>)
 8004a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a12:	4a65      	ldr	r2, [pc, #404]	@ (8004ba8 <HAL_GPIO_Init+0x324>)
 8004a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a1a:	4b63      	ldr	r3, [pc, #396]	@ (8004ba8 <HAL_GPIO_Init+0x324>)
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004a26:	4a61      	ldr	r2, [pc, #388]	@ (8004bac <HAL_GPIO_Init+0x328>)
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	089b      	lsrs	r3, r3, #2
 8004a2c:	3302      	adds	r3, #2
 8004a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	220f      	movs	r2, #15
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	43db      	mvns	r3, r3
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	4013      	ands	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a58      	ldr	r2, [pc, #352]	@ (8004bb0 <HAL_GPIO_Init+0x32c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d037      	beq.n	8004ac2 <HAL_GPIO_Init+0x23e>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a57      	ldr	r2, [pc, #348]	@ (8004bb4 <HAL_GPIO_Init+0x330>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d031      	beq.n	8004abe <HAL_GPIO_Init+0x23a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a56      	ldr	r2, [pc, #344]	@ (8004bb8 <HAL_GPIO_Init+0x334>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d02b      	beq.n	8004aba <HAL_GPIO_Init+0x236>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a55      	ldr	r2, [pc, #340]	@ (8004bbc <HAL_GPIO_Init+0x338>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d025      	beq.n	8004ab6 <HAL_GPIO_Init+0x232>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a54      	ldr	r2, [pc, #336]	@ (8004bc0 <HAL_GPIO_Init+0x33c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d01f      	beq.n	8004ab2 <HAL_GPIO_Init+0x22e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a53      	ldr	r2, [pc, #332]	@ (8004bc4 <HAL_GPIO_Init+0x340>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d019      	beq.n	8004aae <HAL_GPIO_Init+0x22a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a52      	ldr	r2, [pc, #328]	@ (8004bc8 <HAL_GPIO_Init+0x344>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d013      	beq.n	8004aaa <HAL_GPIO_Init+0x226>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a51      	ldr	r2, [pc, #324]	@ (8004bcc <HAL_GPIO_Init+0x348>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d00d      	beq.n	8004aa6 <HAL_GPIO_Init+0x222>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a50      	ldr	r2, [pc, #320]	@ (8004bd0 <HAL_GPIO_Init+0x34c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d007      	beq.n	8004aa2 <HAL_GPIO_Init+0x21e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a4f      	ldr	r2, [pc, #316]	@ (8004bd4 <HAL_GPIO_Init+0x350>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d101      	bne.n	8004a9e <HAL_GPIO_Init+0x21a>
 8004a9a:	2309      	movs	r3, #9
 8004a9c:	e012      	b.n	8004ac4 <HAL_GPIO_Init+0x240>
 8004a9e:	230a      	movs	r3, #10
 8004aa0:	e010      	b.n	8004ac4 <HAL_GPIO_Init+0x240>
 8004aa2:	2308      	movs	r3, #8
 8004aa4:	e00e      	b.n	8004ac4 <HAL_GPIO_Init+0x240>
 8004aa6:	2307      	movs	r3, #7
 8004aa8:	e00c      	b.n	8004ac4 <HAL_GPIO_Init+0x240>
 8004aaa:	2306      	movs	r3, #6
 8004aac:	e00a      	b.n	8004ac4 <HAL_GPIO_Init+0x240>
 8004aae:	2305      	movs	r3, #5
 8004ab0:	e008      	b.n	8004ac4 <HAL_GPIO_Init+0x240>
 8004ab2:	2304      	movs	r3, #4
 8004ab4:	e006      	b.n	8004ac4 <HAL_GPIO_Init+0x240>
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e004      	b.n	8004ac4 <HAL_GPIO_Init+0x240>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e002      	b.n	8004ac4 <HAL_GPIO_Init+0x240>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e000      	b.n	8004ac4 <HAL_GPIO_Init+0x240>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	69fa      	ldr	r2, [r7, #28]
 8004ac6:	f002 0203 	and.w	r2, r2, #3
 8004aca:	0092      	lsls	r2, r2, #2
 8004acc:	4093      	lsls	r3, r2
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004ad4:	4935      	ldr	r1, [pc, #212]	@ (8004bac <HAL_GPIO_Init+0x328>)
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	089b      	lsrs	r3, r3, #2
 8004ada:	3302      	adds	r3, #2
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8004bd8 <HAL_GPIO_Init+0x354>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	43db      	mvns	r3, r3
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	4013      	ands	r3, r2
 8004af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b06:	4a34      	ldr	r2, [pc, #208]	@ (8004bd8 <HAL_GPIO_Init+0x354>)
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b0c:	4b32      	ldr	r3, [pc, #200]	@ (8004bd8 <HAL_GPIO_Init+0x354>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	43db      	mvns	r3, r3
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b30:	4a29      	ldr	r2, [pc, #164]	@ (8004bd8 <HAL_GPIO_Init+0x354>)
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b36:	4b28      	ldr	r3, [pc, #160]	@ (8004bd8 <HAL_GPIO_Init+0x354>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	43db      	mvns	r3, r3
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	4013      	ands	r3, r2
 8004b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b5a:	4a1f      	ldr	r2, [pc, #124]	@ (8004bd8 <HAL_GPIO_Init+0x354>)
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b60:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd8 <HAL_GPIO_Init+0x354>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b84:	4a14      	ldr	r2, [pc, #80]	@ (8004bd8 <HAL_GPIO_Init+0x354>)
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	61fb      	str	r3, [r7, #28]
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	2b0f      	cmp	r3, #15
 8004b94:	f67f ae86 	bls.w	80048a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004b98:	bf00      	nop
 8004b9a:	bf00      	nop
 8004b9c:	3724      	adds	r7, #36	@ 0x24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	40013800 	.word	0x40013800
 8004bb0:	40020000 	.word	0x40020000
 8004bb4:	40020400 	.word	0x40020400
 8004bb8:	40020800 	.word	0x40020800
 8004bbc:	40020c00 	.word	0x40020c00
 8004bc0:	40021000 	.word	0x40021000
 8004bc4:	40021400 	.word	0x40021400
 8004bc8:	40021800 	.word	0x40021800
 8004bcc:	40021c00 	.word	0x40021c00
 8004bd0:	40022000 	.word	0x40022000
 8004bd4:	40022400 	.word	0x40022400
 8004bd8:	40013c00 	.word	0x40013c00

08004bdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	887b      	ldrh	r3, [r7, #2]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	73fb      	strb	r3, [r7, #15]
 8004bf8:	e001      	b.n	8004bfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	807b      	strh	r3, [r7, #2]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c1c:	787b      	ldrb	r3, [r7, #1]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c22:	887a      	ldrh	r2, [r7, #2]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004c28:	e003      	b.n	8004c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004c2a:	887b      	ldrh	r3, [r7, #2]
 8004c2c:	041a      	lsls	r2, r3, #16
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	619a      	str	r2, [r3, #24]
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b085      	sub	sp, #20
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	460b      	mov	r3, r1
 8004c48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c50:	887a      	ldrh	r2, [r7, #2]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4013      	ands	r3, r2
 8004c56:	041a      	lsls	r2, r3, #16
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	43d9      	mvns	r1, r3
 8004c5c:	887b      	ldrh	r3, [r7, #2]
 8004c5e:	400b      	ands	r3, r1
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	619a      	str	r2, [r3, #24]
}
 8004c66:	bf00      	nop
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
	...

08004c74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c7e:	4b08      	ldr	r3, [pc, #32]	@ (8004ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c80:	695a      	ldr	r2, [r3, #20]
 8004c82:	88fb      	ldrh	r3, [r7, #6]
 8004c84:	4013      	ands	r3, r2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d006      	beq.n	8004c98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c8a:	4a05      	ldr	r2, [pc, #20]	@ (8004ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c8c:	88fb      	ldrh	r3, [r7, #6]
 8004c8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c90:	88fb      	ldrh	r3, [r7, #6]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 f806 	bl	8004ca4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c98:	bf00      	nop
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	40013c00 	.word	0x40013c00

08004ca4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	4603      	mov	r3, r0
 8004cac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
	...

08004cbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e07f      	b.n	8004dce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fd fbd0 	bl	8002488 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2224      	movs	r2, #36	@ 0x24
 8004cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0201 	bic.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004d0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d107      	bne.n	8004d36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d32:	609a      	str	r2, [r3, #8]
 8004d34:	e006      	b.n	8004d44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004d42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d104      	bne.n	8004d56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6859      	ldr	r1, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	4b1d      	ldr	r3, [pc, #116]	@ (8004dd8 <HAL_I2C_Init+0x11c>)
 8004d62:	430b      	orrs	r3, r1
 8004d64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691a      	ldr	r2, [r3, #16]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	69d9      	ldr	r1, [r3, #28]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a1a      	ldr	r2, [r3, #32]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	02008000 	.word	0x02008000

08004ddc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b20      	cmp	r3, #32
 8004df0:	d138      	bne.n	8004e64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d101      	bne.n	8004e00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	e032      	b.n	8004e66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2224      	movs	r2, #36	@ 0x24
 8004e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0201 	bic.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6819      	ldr	r1, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 0201 	orr.w	r2, r2, #1
 8004e4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	e000      	b.n	8004e66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e64:	2302      	movs	r3, #2
  }
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b085      	sub	sp, #20
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
 8004e7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d139      	bne.n	8004efc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d101      	bne.n	8004e96 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e92:	2302      	movs	r3, #2
 8004e94:	e033      	b.n	8004efe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2224      	movs	r2, #36	@ 0x24
 8004ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0201 	bic.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004ec4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	021b      	lsls	r3, r3, #8
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0201 	orr.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	e000      	b.n	8004efe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004efc:	2302      	movs	r3, #2
  }
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
	...

08004f0c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f10:	4b05      	ldr	r3, [pc, #20]	@ (8004f28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a04      	ldr	r2, [pc, #16]	@ (8004f28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f1a:	6013      	str	r3, [r2, #0]
}
 8004f1c:	bf00      	nop
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40007000 	.word	0x40007000

08004f2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004f34:	2300      	movs	r3, #0
 8004f36:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e291      	b.n	8005466 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 8087 	beq.w	800505e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f50:	4b96      	ldr	r3, [pc, #600]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f003 030c 	and.w	r3, r3, #12
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d00c      	beq.n	8004f76 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f5c:	4b93      	ldr	r3, [pc, #588]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 030c 	and.w	r3, r3, #12
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d112      	bne.n	8004f8e <HAL_RCC_OscConfig+0x62>
 8004f68:	4b90      	ldr	r3, [pc, #576]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f74:	d10b      	bne.n	8004f8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f76:	4b8d      	ldr	r3, [pc, #564]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d06c      	beq.n	800505c <HAL_RCC_OscConfig+0x130>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d168      	bne.n	800505c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e26b      	b.n	8005466 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f96:	d106      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x7a>
 8004f98:	4b84      	ldr	r3, [pc, #528]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a83      	ldr	r2, [pc, #524]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8004f9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	e02e      	b.n	8005004 <HAL_RCC_OscConfig+0xd8>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10c      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x9c>
 8004fae:	4b7f      	ldr	r3, [pc, #508]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a7e      	ldr	r2, [pc, #504]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8004fb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	4b7c      	ldr	r3, [pc, #496]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a7b      	ldr	r2, [pc, #492]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8004fc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	e01d      	b.n	8005004 <HAL_RCC_OscConfig+0xd8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fd0:	d10c      	bne.n	8004fec <HAL_RCC_OscConfig+0xc0>
 8004fd2:	4b76      	ldr	r3, [pc, #472]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a75      	ldr	r2, [pc, #468]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8004fd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	4b73      	ldr	r3, [pc, #460]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a72      	ldr	r2, [pc, #456]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8004fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	e00b      	b.n	8005004 <HAL_RCC_OscConfig+0xd8>
 8004fec:	4b6f      	ldr	r3, [pc, #444]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a6e      	ldr	r2, [pc, #440]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8004ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	4b6c      	ldr	r3, [pc, #432]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a6b      	ldr	r2, [pc, #428]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8004ffe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d013      	beq.n	8005034 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500c:	f7ff fad6 	bl	80045bc <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005014:	f7ff fad2 	bl	80045bc <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b64      	cmp	r3, #100	@ 0x64
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e21f      	b.n	8005466 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005026:	4b61      	ldr	r3, [pc, #388]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0f0      	beq.n	8005014 <HAL_RCC_OscConfig+0xe8>
 8005032:	e014      	b.n	800505e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7ff fac2 	bl	80045bc <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800503c:	f7ff fabe 	bl	80045bc <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b64      	cmp	r3, #100	@ 0x64
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e20b      	b.n	8005466 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800504e:	4b57      	ldr	r3, [pc, #348]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1f0      	bne.n	800503c <HAL_RCC_OscConfig+0x110>
 800505a:	e000      	b.n	800505e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800505c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d069      	beq.n	800513e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800506a:	4b50      	ldr	r3, [pc, #320]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 030c 	and.w	r3, r3, #12
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00b      	beq.n	800508e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005076:	4b4d      	ldr	r3, [pc, #308]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 030c 	and.w	r3, r3, #12
 800507e:	2b08      	cmp	r3, #8
 8005080:	d11c      	bne.n	80050bc <HAL_RCC_OscConfig+0x190>
 8005082:	4b4a      	ldr	r3, [pc, #296]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d116      	bne.n	80050bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800508e:	4b47      	ldr	r3, [pc, #284]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d005      	beq.n	80050a6 <HAL_RCC_OscConfig+0x17a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d001      	beq.n	80050a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e1df      	b.n	8005466 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a6:	4b41      	ldr	r3, [pc, #260]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	493d      	ldr	r1, [pc, #244]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ba:	e040      	b.n	800513e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d023      	beq.n	800510c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050c4:	4b39      	ldr	r3, [pc, #228]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a38      	ldr	r2, [pc, #224]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 80050ca:	f043 0301 	orr.w	r3, r3, #1
 80050ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d0:	f7ff fa74 	bl	80045bc <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050d8:	f7ff fa70 	bl	80045bc <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e1bd      	b.n	8005466 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ea:	4b30      	ldr	r3, [pc, #192]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0f0      	beq.n	80050d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f6:	4b2d      	ldr	r3, [pc, #180]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	4929      	ldr	r1, [pc, #164]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8005106:	4313      	orrs	r3, r2
 8005108:	600b      	str	r3, [r1, #0]
 800510a:	e018      	b.n	800513e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800510c:	4b27      	ldr	r3, [pc, #156]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a26      	ldr	r2, [pc, #152]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8005112:	f023 0301 	bic.w	r3, r3, #1
 8005116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005118:	f7ff fa50 	bl	80045bc <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005120:	f7ff fa4c 	bl	80045bc <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e199      	b.n	8005466 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005132:	4b1e      	ldr	r3, [pc, #120]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d038      	beq.n	80051bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d019      	beq.n	8005186 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005152:	4b16      	ldr	r3, [pc, #88]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8005154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005156:	4a15      	ldr	r2, [pc, #84]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8005158:	f043 0301 	orr.w	r3, r3, #1
 800515c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515e:	f7ff fa2d 	bl	80045bc <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005164:	e008      	b.n	8005178 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005166:	f7ff fa29 	bl	80045bc <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e176      	b.n	8005466 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005178:	4b0c      	ldr	r3, [pc, #48]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 800517a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0f0      	beq.n	8005166 <HAL_RCC_OscConfig+0x23a>
 8005184:	e01a      	b.n	80051bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005186:	4b09      	ldr	r3, [pc, #36]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 8005188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800518a:	4a08      	ldr	r2, [pc, #32]	@ (80051ac <HAL_RCC_OscConfig+0x280>)
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005192:	f7ff fa13 	bl	80045bc <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005198:	e00a      	b.n	80051b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800519a:	f7ff fa0f 	bl	80045bc <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d903      	bls.n	80051b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e15c      	b.n	8005466 <HAL_RCC_OscConfig+0x53a>
 80051ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b0:	4b91      	ldr	r3, [pc, #580]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 80051b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1ee      	bne.n	800519a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 80a4 	beq.w	8005312 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ca:	4b8b      	ldr	r3, [pc, #556]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 80051cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10d      	bne.n	80051f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80051d6:	4b88      	ldr	r3, [pc, #544]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 80051d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051da:	4a87      	ldr	r2, [pc, #540]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 80051dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80051e2:	4b85      	ldr	r3, [pc, #532]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 80051e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051ea:	60bb      	str	r3, [r7, #8]
 80051ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ee:	2301      	movs	r3, #1
 80051f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051f2:	4b82      	ldr	r3, [pc, #520]	@ (80053fc <HAL_RCC_OscConfig+0x4d0>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d118      	bne.n	8005230 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80051fe:	4b7f      	ldr	r3, [pc, #508]	@ (80053fc <HAL_RCC_OscConfig+0x4d0>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a7e      	ldr	r2, [pc, #504]	@ (80053fc <HAL_RCC_OscConfig+0x4d0>)
 8005204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800520a:	f7ff f9d7 	bl	80045bc <HAL_GetTick>
 800520e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005210:	e008      	b.n	8005224 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005212:	f7ff f9d3 	bl	80045bc <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b64      	cmp	r3, #100	@ 0x64
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e120      	b.n	8005466 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005224:	4b75      	ldr	r3, [pc, #468]	@ (80053fc <HAL_RCC_OscConfig+0x4d0>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0f0      	beq.n	8005212 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d106      	bne.n	8005246 <HAL_RCC_OscConfig+0x31a>
 8005238:	4b6f      	ldr	r3, [pc, #444]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 800523a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800523c:	4a6e      	ldr	r2, [pc, #440]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	6713      	str	r3, [r2, #112]	@ 0x70
 8005244:	e02d      	b.n	80052a2 <HAL_RCC_OscConfig+0x376>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10c      	bne.n	8005268 <HAL_RCC_OscConfig+0x33c>
 800524e:	4b6a      	ldr	r3, [pc, #424]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 8005250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005252:	4a69      	ldr	r2, [pc, #420]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 8005254:	f023 0301 	bic.w	r3, r3, #1
 8005258:	6713      	str	r3, [r2, #112]	@ 0x70
 800525a:	4b67      	ldr	r3, [pc, #412]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 800525c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800525e:	4a66      	ldr	r2, [pc, #408]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 8005260:	f023 0304 	bic.w	r3, r3, #4
 8005264:	6713      	str	r3, [r2, #112]	@ 0x70
 8005266:	e01c      	b.n	80052a2 <HAL_RCC_OscConfig+0x376>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b05      	cmp	r3, #5
 800526e:	d10c      	bne.n	800528a <HAL_RCC_OscConfig+0x35e>
 8005270:	4b61      	ldr	r3, [pc, #388]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 8005272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005274:	4a60      	ldr	r2, [pc, #384]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 8005276:	f043 0304 	orr.w	r3, r3, #4
 800527a:	6713      	str	r3, [r2, #112]	@ 0x70
 800527c:	4b5e      	ldr	r3, [pc, #376]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 800527e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005280:	4a5d      	ldr	r2, [pc, #372]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	6713      	str	r3, [r2, #112]	@ 0x70
 8005288:	e00b      	b.n	80052a2 <HAL_RCC_OscConfig+0x376>
 800528a:	4b5b      	ldr	r3, [pc, #364]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 800528c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800528e:	4a5a      	ldr	r2, [pc, #360]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 8005290:	f023 0301 	bic.w	r3, r3, #1
 8005294:	6713      	str	r3, [r2, #112]	@ 0x70
 8005296:	4b58      	ldr	r3, [pc, #352]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529a:	4a57      	ldr	r2, [pc, #348]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 800529c:	f023 0304 	bic.w	r3, r3, #4
 80052a0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d015      	beq.n	80052d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052aa:	f7ff f987 	bl	80045bc <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b0:	e00a      	b.n	80052c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b2:	f7ff f983 	bl	80045bc <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e0ce      	b.n	8005466 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c8:	4b4b      	ldr	r3, [pc, #300]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 80052ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d0ee      	beq.n	80052b2 <HAL_RCC_OscConfig+0x386>
 80052d4:	e014      	b.n	8005300 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d6:	f7ff f971 	bl	80045bc <HAL_GetTick>
 80052da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052dc:	e00a      	b.n	80052f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052de:	f7ff f96d 	bl	80045bc <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e0b8      	b.n	8005466 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052f4:	4b40      	ldr	r3, [pc, #256]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 80052f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1ee      	bne.n	80052de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005300:	7dfb      	ldrb	r3, [r7, #23]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d105      	bne.n	8005312 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005306:	4b3c      	ldr	r3, [pc, #240]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 8005308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530a:	4a3b      	ldr	r2, [pc, #236]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 800530c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005310:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	2b00      	cmp	r3, #0
 8005318:	f000 80a4 	beq.w	8005464 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800531c:	4b36      	ldr	r3, [pc, #216]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f003 030c 	and.w	r3, r3, #12
 8005324:	2b08      	cmp	r3, #8
 8005326:	d06b      	beq.n	8005400 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	2b02      	cmp	r3, #2
 800532e:	d149      	bne.n	80053c4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005330:	4b31      	ldr	r3, [pc, #196]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a30      	ldr	r2, [pc, #192]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 8005336:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800533a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533c:	f7ff f93e 	bl	80045bc <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005344:	f7ff f93a 	bl	80045bc <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e087      	b.n	8005466 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005356:	4b28      	ldr	r3, [pc, #160]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f0      	bne.n	8005344 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69da      	ldr	r2, [r3, #28]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005370:	019b      	lsls	r3, r3, #6
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005378:	085b      	lsrs	r3, r3, #1
 800537a:	3b01      	subs	r3, #1
 800537c:	041b      	lsls	r3, r3, #16
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005384:	061b      	lsls	r3, r3, #24
 8005386:	4313      	orrs	r3, r2
 8005388:	4a1b      	ldr	r2, [pc, #108]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 800538a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800538e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005390:	4b19      	ldr	r3, [pc, #100]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a18      	ldr	r2, [pc, #96]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 8005396:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800539a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539c:	f7ff f90e 	bl	80045bc <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a4:	f7ff f90a 	bl	80045bc <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e057      	b.n	8005466 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053b6:	4b10      	ldr	r3, [pc, #64]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0f0      	beq.n	80053a4 <HAL_RCC_OscConfig+0x478>
 80053c2:	e04f      	b.n	8005464 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c4:	4b0c      	ldr	r3, [pc, #48]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a0b      	ldr	r2, [pc, #44]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 80053ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d0:	f7ff f8f4 	bl	80045bc <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d8:	f7ff f8f0 	bl	80045bc <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e03d      	b.n	8005466 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ea:	4b03      	ldr	r3, [pc, #12]	@ (80053f8 <HAL_RCC_OscConfig+0x4cc>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x4ac>
 80053f6:	e035      	b.n	8005464 <HAL_RCC_OscConfig+0x538>
 80053f8:	40023800 	.word	0x40023800
 80053fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005400:	4b1b      	ldr	r3, [pc, #108]	@ (8005470 <HAL_RCC_OscConfig+0x544>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d028      	beq.n	8005460 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005418:	429a      	cmp	r2, r3
 800541a:	d121      	bne.n	8005460 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005426:	429a      	cmp	r2, r3
 8005428:	d11a      	bne.n	8005460 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005430:	4013      	ands	r3, r2
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005436:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005438:	4293      	cmp	r3, r2
 800543a:	d111      	bne.n	8005460 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005446:	085b      	lsrs	r3, r3, #1
 8005448:	3b01      	subs	r3, #1
 800544a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800544c:	429a      	cmp	r2, r3
 800544e:	d107      	bne.n	8005460 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800545c:	429a      	cmp	r2, r3
 800545e:	d001      	beq.n	8005464 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e000      	b.n	8005466 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	40023800 	.word	0x40023800

08005474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800547e:	2300      	movs	r3, #0
 8005480:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0d0      	b.n	800562e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800548c:	4b6a      	ldr	r3, [pc, #424]	@ (8005638 <HAL_RCC_ClockConfig+0x1c4>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 030f 	and.w	r3, r3, #15
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d910      	bls.n	80054bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800549a:	4b67      	ldr	r3, [pc, #412]	@ (8005638 <HAL_RCC_ClockConfig+0x1c4>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f023 020f 	bic.w	r2, r3, #15
 80054a2:	4965      	ldr	r1, [pc, #404]	@ (8005638 <HAL_RCC_ClockConfig+0x1c4>)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054aa:	4b63      	ldr	r3, [pc, #396]	@ (8005638 <HAL_RCC_ClockConfig+0x1c4>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d001      	beq.n	80054bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e0b8      	b.n	800562e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d020      	beq.n	800550a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054d4:	4b59      	ldr	r3, [pc, #356]	@ (800563c <HAL_RCC_ClockConfig+0x1c8>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	4a58      	ldr	r2, [pc, #352]	@ (800563c <HAL_RCC_ClockConfig+0x1c8>)
 80054da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80054de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0308 	and.w	r3, r3, #8
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d005      	beq.n	80054f8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054ec:	4b53      	ldr	r3, [pc, #332]	@ (800563c <HAL_RCC_ClockConfig+0x1c8>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	4a52      	ldr	r2, [pc, #328]	@ (800563c <HAL_RCC_ClockConfig+0x1c8>)
 80054f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80054f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054f8:	4b50      	ldr	r3, [pc, #320]	@ (800563c <HAL_RCC_ClockConfig+0x1c8>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	494d      	ldr	r1, [pc, #308]	@ (800563c <HAL_RCC_ClockConfig+0x1c8>)
 8005506:	4313      	orrs	r3, r2
 8005508:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d040      	beq.n	8005598 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d107      	bne.n	800552e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800551e:	4b47      	ldr	r3, [pc, #284]	@ (800563c <HAL_RCC_ClockConfig+0x1c8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d115      	bne.n	8005556 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e07f      	b.n	800562e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	2b02      	cmp	r3, #2
 8005534:	d107      	bne.n	8005546 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005536:	4b41      	ldr	r3, [pc, #260]	@ (800563c <HAL_RCC_ClockConfig+0x1c8>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d109      	bne.n	8005556 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e073      	b.n	800562e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005546:	4b3d      	ldr	r3, [pc, #244]	@ (800563c <HAL_RCC_ClockConfig+0x1c8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e06b      	b.n	800562e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005556:	4b39      	ldr	r3, [pc, #228]	@ (800563c <HAL_RCC_ClockConfig+0x1c8>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f023 0203 	bic.w	r2, r3, #3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	4936      	ldr	r1, [pc, #216]	@ (800563c <HAL_RCC_ClockConfig+0x1c8>)
 8005564:	4313      	orrs	r3, r2
 8005566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005568:	f7ff f828 	bl	80045bc <HAL_GetTick>
 800556c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800556e:	e00a      	b.n	8005586 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005570:	f7ff f824 	bl	80045bc <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800557e:	4293      	cmp	r3, r2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e053      	b.n	800562e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005586:	4b2d      	ldr	r3, [pc, #180]	@ (800563c <HAL_RCC_ClockConfig+0x1c8>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 020c 	and.w	r2, r3, #12
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	429a      	cmp	r2, r3
 8005596:	d1eb      	bne.n	8005570 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005598:	4b27      	ldr	r3, [pc, #156]	@ (8005638 <HAL_RCC_ClockConfig+0x1c4>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d210      	bcs.n	80055c8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055a6:	4b24      	ldr	r3, [pc, #144]	@ (8005638 <HAL_RCC_ClockConfig+0x1c4>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f023 020f 	bic.w	r2, r3, #15
 80055ae:	4922      	ldr	r1, [pc, #136]	@ (8005638 <HAL_RCC_ClockConfig+0x1c4>)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055b6:	4b20      	ldr	r3, [pc, #128]	@ (8005638 <HAL_RCC_ClockConfig+0x1c4>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 030f 	and.w	r3, r3, #15
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d001      	beq.n	80055c8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e032      	b.n	800562e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d008      	beq.n	80055e6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055d4:	4b19      	ldr	r3, [pc, #100]	@ (800563c <HAL_RCC_ClockConfig+0x1c8>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	4916      	ldr	r1, [pc, #88]	@ (800563c <HAL_RCC_ClockConfig+0x1c8>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0308 	and.w	r3, r3, #8
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d009      	beq.n	8005606 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055f2:	4b12      	ldr	r3, [pc, #72]	@ (800563c <HAL_RCC_ClockConfig+0x1c8>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	490e      	ldr	r1, [pc, #56]	@ (800563c <HAL_RCC_ClockConfig+0x1c8>)
 8005602:	4313      	orrs	r3, r2
 8005604:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005606:	f000 f821 	bl	800564c <HAL_RCC_GetSysClockFreq>
 800560a:	4602      	mov	r2, r0
 800560c:	4b0b      	ldr	r3, [pc, #44]	@ (800563c <HAL_RCC_ClockConfig+0x1c8>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	091b      	lsrs	r3, r3, #4
 8005612:	f003 030f 	and.w	r3, r3, #15
 8005616:	490a      	ldr	r1, [pc, #40]	@ (8005640 <HAL_RCC_ClockConfig+0x1cc>)
 8005618:	5ccb      	ldrb	r3, [r1, r3]
 800561a:	fa22 f303 	lsr.w	r3, r2, r3
 800561e:	4a09      	ldr	r2, [pc, #36]	@ (8005644 <HAL_RCC_ClockConfig+0x1d0>)
 8005620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005622:	4b09      	ldr	r3, [pc, #36]	@ (8005648 <HAL_RCC_ClockConfig+0x1d4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4618      	mov	r0, r3
 8005628:	f7fe ff84 	bl	8004534 <HAL_InitTick>

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	40023c00 	.word	0x40023c00
 800563c:	40023800 	.word	0x40023800
 8005640:	08009d3c 	.word	0x08009d3c
 8005644:	20000108 	.word	0x20000108
 8005648:	2000010c 	.word	0x2000010c

0800564c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800564c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005650:	b094      	sub	sp, #80	@ 0x50
 8005652:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005654:	2300      	movs	r3, #0
 8005656:	647b      	str	r3, [r7, #68]	@ 0x44
 8005658:	2300      	movs	r3, #0
 800565a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800565c:	2300      	movs	r3, #0
 800565e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8005660:	2300      	movs	r3, #0
 8005662:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005664:	4b79      	ldr	r3, [pc, #484]	@ (800584c <HAL_RCC_GetSysClockFreq+0x200>)
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f003 030c 	and.w	r3, r3, #12
 800566c:	2b08      	cmp	r3, #8
 800566e:	d00d      	beq.n	800568c <HAL_RCC_GetSysClockFreq+0x40>
 8005670:	2b08      	cmp	r3, #8
 8005672:	f200 80e1 	bhi.w	8005838 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <HAL_RCC_GetSysClockFreq+0x34>
 800567a:	2b04      	cmp	r3, #4
 800567c:	d003      	beq.n	8005686 <HAL_RCC_GetSysClockFreq+0x3a>
 800567e:	e0db      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005680:	4b73      	ldr	r3, [pc, #460]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x204>)
 8005682:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005684:	e0db      	b.n	800583e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005686:	4b73      	ldr	r3, [pc, #460]	@ (8005854 <HAL_RCC_GetSysClockFreq+0x208>)
 8005688:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800568a:	e0d8      	b.n	800583e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800568c:	4b6f      	ldr	r3, [pc, #444]	@ (800584c <HAL_RCC_GetSysClockFreq+0x200>)
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005694:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005696:	4b6d      	ldr	r3, [pc, #436]	@ (800584c <HAL_RCC_GetSysClockFreq+0x200>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d063      	beq.n	800576a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056a2:	4b6a      	ldr	r3, [pc, #424]	@ (800584c <HAL_RCC_GetSysClockFreq+0x200>)
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	099b      	lsrs	r3, r3, #6
 80056a8:	2200      	movs	r2, #0
 80056aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80056ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80056b6:	2300      	movs	r3, #0
 80056b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80056ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80056be:	4622      	mov	r2, r4
 80056c0:	462b      	mov	r3, r5
 80056c2:	f04f 0000 	mov.w	r0, #0
 80056c6:	f04f 0100 	mov.w	r1, #0
 80056ca:	0159      	lsls	r1, r3, #5
 80056cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056d0:	0150      	lsls	r0, r2, #5
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4621      	mov	r1, r4
 80056d8:	1a51      	subs	r1, r2, r1
 80056da:	6139      	str	r1, [r7, #16]
 80056dc:	4629      	mov	r1, r5
 80056de:	eb63 0301 	sbc.w	r3, r3, r1
 80056e2:	617b      	str	r3, [r7, #20]
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056f0:	4659      	mov	r1, fp
 80056f2:	018b      	lsls	r3, r1, #6
 80056f4:	4651      	mov	r1, sl
 80056f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056fa:	4651      	mov	r1, sl
 80056fc:	018a      	lsls	r2, r1, #6
 80056fe:	4651      	mov	r1, sl
 8005700:	ebb2 0801 	subs.w	r8, r2, r1
 8005704:	4659      	mov	r1, fp
 8005706:	eb63 0901 	sbc.w	r9, r3, r1
 800570a:	f04f 0200 	mov.w	r2, #0
 800570e:	f04f 0300 	mov.w	r3, #0
 8005712:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005716:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800571a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800571e:	4690      	mov	r8, r2
 8005720:	4699      	mov	r9, r3
 8005722:	4623      	mov	r3, r4
 8005724:	eb18 0303 	adds.w	r3, r8, r3
 8005728:	60bb      	str	r3, [r7, #8]
 800572a:	462b      	mov	r3, r5
 800572c:	eb49 0303 	adc.w	r3, r9, r3
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	f04f 0200 	mov.w	r2, #0
 8005736:	f04f 0300 	mov.w	r3, #0
 800573a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800573e:	4629      	mov	r1, r5
 8005740:	024b      	lsls	r3, r1, #9
 8005742:	4621      	mov	r1, r4
 8005744:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005748:	4621      	mov	r1, r4
 800574a:	024a      	lsls	r2, r1, #9
 800574c:	4610      	mov	r0, r2
 800574e:	4619      	mov	r1, r3
 8005750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005752:	2200      	movs	r2, #0
 8005754:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005756:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005758:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800575c:	f7fb fa7e 	bl	8000c5c <__aeabi_uldivmod>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4613      	mov	r3, r2
 8005766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005768:	e058      	b.n	800581c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800576a:	4b38      	ldr	r3, [pc, #224]	@ (800584c <HAL_RCC_GetSysClockFreq+0x200>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	099b      	lsrs	r3, r3, #6
 8005770:	2200      	movs	r2, #0
 8005772:	4618      	mov	r0, r3
 8005774:	4611      	mov	r1, r2
 8005776:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800577a:	623b      	str	r3, [r7, #32]
 800577c:	2300      	movs	r3, #0
 800577e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005780:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005784:	4642      	mov	r2, r8
 8005786:	464b      	mov	r3, r9
 8005788:	f04f 0000 	mov.w	r0, #0
 800578c:	f04f 0100 	mov.w	r1, #0
 8005790:	0159      	lsls	r1, r3, #5
 8005792:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005796:	0150      	lsls	r0, r2, #5
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	4641      	mov	r1, r8
 800579e:	ebb2 0a01 	subs.w	sl, r2, r1
 80057a2:	4649      	mov	r1, r9
 80057a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80057a8:	f04f 0200 	mov.w	r2, #0
 80057ac:	f04f 0300 	mov.w	r3, #0
 80057b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057bc:	ebb2 040a 	subs.w	r4, r2, sl
 80057c0:	eb63 050b 	sbc.w	r5, r3, fp
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	00eb      	lsls	r3, r5, #3
 80057ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057d2:	00e2      	lsls	r2, r4, #3
 80057d4:	4614      	mov	r4, r2
 80057d6:	461d      	mov	r5, r3
 80057d8:	4643      	mov	r3, r8
 80057da:	18e3      	adds	r3, r4, r3
 80057dc:	603b      	str	r3, [r7, #0]
 80057de:	464b      	mov	r3, r9
 80057e0:	eb45 0303 	adc.w	r3, r5, r3
 80057e4:	607b      	str	r3, [r7, #4]
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057f2:	4629      	mov	r1, r5
 80057f4:	028b      	lsls	r3, r1, #10
 80057f6:	4621      	mov	r1, r4
 80057f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057fc:	4621      	mov	r1, r4
 80057fe:	028a      	lsls	r2, r1, #10
 8005800:	4610      	mov	r0, r2
 8005802:	4619      	mov	r1, r3
 8005804:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005806:	2200      	movs	r2, #0
 8005808:	61bb      	str	r3, [r7, #24]
 800580a:	61fa      	str	r2, [r7, #28]
 800580c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005810:	f7fb fa24 	bl	8000c5c <__aeabi_uldivmod>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	4613      	mov	r3, r2
 800581a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800581c:	4b0b      	ldr	r3, [pc, #44]	@ (800584c <HAL_RCC_GetSysClockFreq+0x200>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	0c1b      	lsrs	r3, r3, #16
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	3301      	adds	r3, #1
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800582c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800582e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005830:	fbb2 f3f3 	udiv	r3, r2, r3
 8005834:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005836:	e002      	b.n	800583e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005838:	4b05      	ldr	r3, [pc, #20]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x204>)
 800583a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800583c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800583e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005840:	4618      	mov	r0, r3
 8005842:	3750      	adds	r7, #80	@ 0x50
 8005844:	46bd      	mov	sp, r7
 8005846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800584a:	bf00      	nop
 800584c:	40023800 	.word	0x40023800
 8005850:	00f42400 	.word	0x00f42400
 8005854:	007a1200 	.word	0x007a1200

08005858 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800585c:	4b03      	ldr	r3, [pc, #12]	@ (800586c <HAL_RCC_GetHCLKFreq+0x14>)
 800585e:	681b      	ldr	r3, [r3, #0]
}
 8005860:	4618      	mov	r0, r3
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	20000108 	.word	0x20000108

08005870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005874:	f7ff fff0 	bl	8005858 <HAL_RCC_GetHCLKFreq>
 8005878:	4602      	mov	r2, r0
 800587a:	4b05      	ldr	r3, [pc, #20]	@ (8005890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	0a9b      	lsrs	r3, r3, #10
 8005880:	f003 0307 	and.w	r3, r3, #7
 8005884:	4903      	ldr	r1, [pc, #12]	@ (8005894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005886:	5ccb      	ldrb	r3, [r1, r3]
 8005888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800588c:	4618      	mov	r0, r3
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40023800 	.word	0x40023800
 8005894:	08009d4c 	.word	0x08009d4c

08005898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800589c:	f7ff ffdc 	bl	8005858 <HAL_RCC_GetHCLKFreq>
 80058a0:	4602      	mov	r2, r0
 80058a2:	4b05      	ldr	r3, [pc, #20]	@ (80058b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	0b5b      	lsrs	r3, r3, #13
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	4903      	ldr	r1, [pc, #12]	@ (80058bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80058ae:	5ccb      	ldrb	r3, [r1, r3]
 80058b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40023800 	.word	0x40023800
 80058bc:	08009d4c 	.word	0x08009d4c

080058c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80058c8:	2300      	movs	r3, #0
 80058ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80058cc:	2300      	movs	r3, #0
 80058ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80058d4:	2300      	movs	r3, #0
 80058d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80058d8:	2300      	movs	r3, #0
 80058da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d012      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80058e8:	4b69      	ldr	r3, [pc, #420]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	4a68      	ldr	r2, [pc, #416]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80058f2:	6093      	str	r3, [r2, #8]
 80058f4:	4b66      	ldr	r3, [pc, #408]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058fc:	4964      	ldr	r1, [pc, #400]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800590a:	2301      	movs	r3, #1
 800590c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d017      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800591a:	4b5d      	ldr	r3, [pc, #372]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800591c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005920:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005928:	4959      	ldr	r1, [pc, #356]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800592a:	4313      	orrs	r3, r2
 800592c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005934:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005938:	d101      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800593a:	2301      	movs	r3, #1
 800593c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005946:	2301      	movs	r3, #1
 8005948:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d017      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005956:	4b4e      	ldr	r3, [pc, #312]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005958:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800595c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005964:	494a      	ldr	r1, [pc, #296]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005966:	4313      	orrs	r3, r2
 8005968:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005970:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005974:	d101      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005976:	2301      	movs	r3, #1
 8005978:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005982:	2301      	movs	r3, #1
 8005984:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005992:	2301      	movs	r3, #1
 8005994:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0320 	and.w	r3, r3, #32
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 808b 	beq.w	8005aba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80059a4:	4b3a      	ldr	r3, [pc, #232]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a8:	4a39      	ldr	r2, [pc, #228]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80059b0:	4b37      	ldr	r3, [pc, #220]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059b8:	60bb      	str	r3, [r7, #8]
 80059ba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80059bc:	4b35      	ldr	r3, [pc, #212]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a34      	ldr	r2, [pc, #208]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059c8:	f7fe fdf8 	bl	80045bc <HAL_GetTick>
 80059cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80059ce:	e008      	b.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059d0:	f7fe fdf4 	bl	80045bc <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b64      	cmp	r3, #100	@ 0x64
 80059dc:	d901      	bls.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e357      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80059e2:	4b2c      	ldr	r3, [pc, #176]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0f0      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059ee:	4b28      	ldr	r3, [pc, #160]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d035      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d02e      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a0c:	4b20      	ldr	r3, [pc, #128]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a14:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a16:	4b1e      	ldr	r3, [pc, #120]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a20:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a22:	4b1b      	ldr	r3, [pc, #108]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a26:	4a1a      	ldr	r2, [pc, #104]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a2c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005a2e:	4a18      	ldr	r2, [pc, #96]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a34:	4b16      	ldr	r3, [pc, #88]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d114      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a40:	f7fe fdbc 	bl	80045bc <HAL_GetTick>
 8005a44:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a46:	e00a      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a48:	f7fe fdb8 	bl	80045bc <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e319      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0ee      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a76:	d111      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005a78:	4b05      	ldr	r3, [pc, #20]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005a84:	4b04      	ldr	r3, [pc, #16]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a86:	400b      	ands	r3, r1
 8005a88:	4901      	ldr	r1, [pc, #4]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	608b      	str	r3, [r1, #8]
 8005a8e:	e00b      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005a90:	40023800 	.word	0x40023800
 8005a94:	40007000 	.word	0x40007000
 8005a98:	0ffffcff 	.word	0x0ffffcff
 8005a9c:	4baa      	ldr	r3, [pc, #680]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	4aa9      	ldr	r2, [pc, #676]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aa2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005aa6:	6093      	str	r3, [r2, #8]
 8005aa8:	4ba7      	ldr	r3, [pc, #668]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aaa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ab4:	49a4      	ldr	r1, [pc, #656]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0310 	and.w	r3, r3, #16
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d010      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ac6:	4ba0      	ldr	r3, [pc, #640]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005acc:	4a9e      	ldr	r2, [pc, #632]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ace:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ad2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005ad6:	4b9c      	ldr	r3, [pc, #624]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ad8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae0:	4999      	ldr	r1, [pc, #612]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00a      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005af4:	4b94      	ldr	r3, [pc, #592]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005afa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b02:	4991      	ldr	r1, [pc, #580]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00a      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b16:	4b8c      	ldr	r3, [pc, #560]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b1c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b24:	4988      	ldr	r1, [pc, #544]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00a      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b38:	4b83      	ldr	r3, [pc, #524]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b46:	4980      	ldr	r1, [pc, #512]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b5a:	4b7b      	ldr	r3, [pc, #492]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b60:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b68:	4977      	ldr	r1, [pc, #476]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00a      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b7c:	4b72      	ldr	r3, [pc, #456]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b82:	f023 0203 	bic.w	r2, r3, #3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b8a:	496f      	ldr	r1, [pc, #444]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00a      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b9e:	4b6a      	ldr	r3, [pc, #424]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba4:	f023 020c 	bic.w	r2, r3, #12
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bac:	4966      	ldr	r1, [pc, #408]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00a      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005bc0:	4b61      	ldr	r3, [pc, #388]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bc6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bce:	495e      	ldr	r1, [pc, #376]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00a      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005be2:	4b59      	ldr	r3, [pc, #356]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bf0:	4955      	ldr	r1, [pc, #340]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00a      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c04:	4b50      	ldr	r3, [pc, #320]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c0a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c12:	494d      	ldr	r1, [pc, #308]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005c26:	4b48      	ldr	r3, [pc, #288]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c2c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c34:	4944      	ldr	r1, [pc, #272]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00a      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005c48:	4b3f      	ldr	r3, [pc, #252]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c4e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c56:	493c      	ldr	r1, [pc, #240]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005c6a:	4b37      	ldr	r3, [pc, #220]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c70:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c78:	4933      	ldr	r1, [pc, #204]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c92:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c9a:	492b      	ldr	r1, [pc, #172]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d011      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005cae:	4b26      	ldr	r3, [pc, #152]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cb4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cbc:	4922      	ldr	r1, [pc, #136]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ccc:	d101      	bne.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0308 	and.w	r3, r3, #8
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cee:	4b16      	ldr	r3, [pc, #88]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cfc:	4912      	ldr	r1, [pc, #72]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00b      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005d10:	4b0d      	ldr	r3, [pc, #52]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d16:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d20:	4909      	ldr	r1, [pc, #36]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d006      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 80d9 	beq.w	8005eee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d3c:	4b02      	ldr	r3, [pc, #8]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a01      	ldr	r2, [pc, #4]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d46:	e001      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005d48:	40023800 	.word	0x40023800
 8005d4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d4e:	f7fe fc35 	bl	80045bc <HAL_GetTick>
 8005d52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d54:	e008      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d56:	f7fe fc31 	bl	80045bc <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	2b64      	cmp	r3, #100	@ 0x64
 8005d62:	d901      	bls.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e194      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d68:	4b6c      	ldr	r3, [pc, #432]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1f0      	bne.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d021      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d11d      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d88:	4b64      	ldr	r3, [pc, #400]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d8e:	0c1b      	lsrs	r3, r3, #16
 8005d90:	f003 0303 	and.w	r3, r3, #3
 8005d94:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d96:	4b61      	ldr	r3, [pc, #388]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d9c:	0e1b      	lsrs	r3, r3, #24
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	019a      	lsls	r2, r3, #6
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	041b      	lsls	r3, r3, #16
 8005dae:	431a      	orrs	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	061b      	lsls	r3, r3, #24
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	071b      	lsls	r3, r3, #28
 8005dbc:	4957      	ldr	r1, [pc, #348]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d004      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dd8:	d00a      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d02e      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dee:	d129      	bne.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005df0:	4b4a      	ldr	r3, [pc, #296]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005df6:	0c1b      	lsrs	r3, r3, #16
 8005df8:	f003 0303 	and.w	r3, r3, #3
 8005dfc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005dfe:	4b47      	ldr	r3, [pc, #284]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e04:	0f1b      	lsrs	r3, r3, #28
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	019a      	lsls	r2, r3, #6
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	041b      	lsls	r3, r3, #16
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	061b      	lsls	r3, r3, #24
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	071b      	lsls	r3, r3, #28
 8005e24:	493d      	ldr	r1, [pc, #244]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005e2c:	4b3b      	ldr	r3, [pc, #236]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e32:	f023 021f 	bic.w	r2, r3, #31
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	4937      	ldr	r1, [pc, #220]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01d      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005e50:	4b32      	ldr	r3, [pc, #200]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e56:	0e1b      	lsrs	r3, r3, #24
 8005e58:	f003 030f 	and.w	r3, r3, #15
 8005e5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e64:	0f1b      	lsrs	r3, r3, #28
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	019a      	lsls	r2, r3, #6
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	041b      	lsls	r3, r3, #16
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	061b      	lsls	r3, r3, #24
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	071b      	lsls	r3, r3, #28
 8005e84:	4925      	ldr	r1, [pc, #148]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d011      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	019a      	lsls	r2, r3, #6
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	041b      	lsls	r3, r3, #16
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	061b      	lsls	r3, r3, #24
 8005eac:	431a      	orrs	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	071b      	lsls	r3, r3, #28
 8005eb4:	4919      	ldr	r1, [pc, #100]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ebc:	4b17      	ldr	r3, [pc, #92]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a16      	ldr	r2, [pc, #88]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ec2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ec6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ec8:	f7fe fb78 	bl	80045bc <HAL_GetTick>
 8005ecc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ed0:	f7fe fb74 	bl	80045bc <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b64      	cmp	r3, #100	@ 0x64
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e0d7      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0f0      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	f040 80cd 	bne.w	8006090 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005ef6:	4b09      	ldr	r3, [pc, #36]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a08      	ldr	r2, [pc, #32]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005efc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f02:	f7fe fb5b 	bl	80045bc <HAL_GetTick>
 8005f06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f08:	e00a      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f0a:	f7fe fb57 	bl	80045bc <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	2b64      	cmp	r3, #100	@ 0x64
 8005f16:	d903      	bls.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e0ba      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005f1c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f20:	4b5e      	ldr	r3, [pc, #376]	@ (800609c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f2c:	d0ed      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d009      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d02e      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d12a      	bne.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f56:	4b51      	ldr	r3, [pc, #324]	@ (800609c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f5c:	0c1b      	lsrs	r3, r3, #16
 8005f5e:	f003 0303 	and.w	r3, r3, #3
 8005f62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f64:	4b4d      	ldr	r3, [pc, #308]	@ (800609c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f6a:	0f1b      	lsrs	r3, r3, #28
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	019a      	lsls	r2, r3, #6
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	041b      	lsls	r3, r3, #16
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	061b      	lsls	r3, r3, #24
 8005f84:	431a      	orrs	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	071b      	lsls	r3, r3, #28
 8005f8a:	4944      	ldr	r1, [pc, #272]	@ (800609c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f92:	4b42      	ldr	r3, [pc, #264]	@ (800609c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f98:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	021b      	lsls	r3, r3, #8
 8005fa4:	493d      	ldr	r1, [pc, #244]	@ (800609c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d022      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fc0:	d11d      	bne.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005fc2:	4b36      	ldr	r3, [pc, #216]	@ (800609c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc8:	0e1b      	lsrs	r3, r3, #24
 8005fca:	f003 030f 	and.w	r3, r3, #15
 8005fce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005fd0:	4b32      	ldr	r3, [pc, #200]	@ (800609c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd6:	0f1b      	lsrs	r3, r3, #28
 8005fd8:	f003 0307 	and.w	r3, r3, #7
 8005fdc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	019a      	lsls	r2, r3, #6
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	041b      	lsls	r3, r3, #16
 8005fea:	431a      	orrs	r2, r3
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	061b      	lsls	r3, r3, #24
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	071b      	lsls	r3, r3, #28
 8005ff6:	4929      	ldr	r1, [pc, #164]	@ (800609c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0308 	and.w	r3, r3, #8
 8006006:	2b00      	cmp	r3, #0
 8006008:	d028      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800600a:	4b24      	ldr	r3, [pc, #144]	@ (800609c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800600c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006010:	0e1b      	lsrs	r3, r3, #24
 8006012:	f003 030f 	and.w	r3, r3, #15
 8006016:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006018:	4b20      	ldr	r3, [pc, #128]	@ (800609c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800601a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800601e:	0c1b      	lsrs	r3, r3, #16
 8006020:	f003 0303 	and.w	r3, r3, #3
 8006024:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	019a      	lsls	r2, r3, #6
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	041b      	lsls	r3, r3, #16
 8006030:	431a      	orrs	r2, r3
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	061b      	lsls	r3, r3, #24
 8006036:	431a      	orrs	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	071b      	lsls	r3, r3, #28
 800603e:	4917      	ldr	r1, [pc, #92]	@ (800609c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006040:	4313      	orrs	r3, r2
 8006042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006046:	4b15      	ldr	r3, [pc, #84]	@ (800609c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006048:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800604c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006054:	4911      	ldr	r1, [pc, #68]	@ (800609c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006056:	4313      	orrs	r3, r2
 8006058:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800605c:	4b0f      	ldr	r3, [pc, #60]	@ (800609c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a0e      	ldr	r2, [pc, #56]	@ (800609c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006062:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006066:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006068:	f7fe faa8 	bl	80045bc <HAL_GetTick>
 800606c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800606e:	e008      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006070:	f7fe faa4 	bl	80045bc <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	2b64      	cmp	r3, #100	@ 0x64
 800607c:	d901      	bls.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e007      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006082:	4b06      	ldr	r3, [pc, #24]	@ (800609c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800608a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800608e:	d1ef      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3720      	adds	r7, #32
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	40023800 	.word	0x40023800

080060a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e09d      	b.n	80061ee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d108      	bne.n	80060cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060c2:	d009      	beq.n	80060d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	61da      	str	r2, [r3, #28]
 80060ca:	e005      	b.n	80060d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d106      	bne.n	80060f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7fd fd1a 	bl	8003b2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2202      	movs	r2, #2
 80060fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800610e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006118:	d902      	bls.n	8006120 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800611a:	2300      	movs	r3, #0
 800611c:	60fb      	str	r3, [r7, #12]
 800611e:	e002      	b.n	8006126 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006120:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006124:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800612e:	d007      	beq.n	8006140 <HAL_SPI_Init+0xa0>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006138:	d002      	beq.n	8006140 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006150:	431a      	orrs	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	431a      	orrs	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	431a      	orrs	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800616e:	431a      	orrs	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	69db      	ldr	r3, [r3, #28]
 8006174:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006178:	431a      	orrs	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006182:	ea42 0103 	orr.w	r1, r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800618a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	0c1b      	lsrs	r3, r3, #16
 800619c:	f003 0204 	and.w	r2, r3, #4
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a4:	f003 0310 	and.w	r3, r3, #16
 80061a8:	431a      	orrs	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ae:	f003 0308 	and.w	r3, r3, #8
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80061bc:	ea42 0103 	orr.w	r1, r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69da      	ldr	r2, [r3, #28]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80061dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b088      	sub	sp, #32
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	60f8      	str	r0, [r7, #12]
 80061fe:	60b9      	str	r1, [r7, #8]
 8006200:	603b      	str	r3, [r7, #0]
 8006202:	4613      	mov	r3, r2
 8006204:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_SPI_Transmit+0x22>
 8006214:	2302      	movs	r3, #2
 8006216:	e158      	b.n	80064ca <HAL_SPI_Transmit+0x2d4>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006220:	f7fe f9cc 	bl	80045bc <HAL_GetTick>
 8006224:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006226:	88fb      	ldrh	r3, [r7, #6]
 8006228:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b01      	cmp	r3, #1
 8006234:	d002      	beq.n	800623c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006236:	2302      	movs	r3, #2
 8006238:	77fb      	strb	r3, [r7, #31]
    goto error;
 800623a:	e13d      	b.n	80064b8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <HAL_SPI_Transmit+0x52>
 8006242:	88fb      	ldrh	r3, [r7, #6]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d102      	bne.n	800624e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800624c:	e134      	b.n	80064b8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2203      	movs	r2, #3
 8006252:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	88fa      	ldrh	r2, [r7, #6]
 8006266:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	88fa      	ldrh	r2, [r7, #6]
 800626c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006298:	d10f      	bne.n	80062ba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c4:	2b40      	cmp	r3, #64	@ 0x40
 80062c6:	d007      	beq.n	80062d8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062e0:	d94b      	bls.n	800637a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d002      	beq.n	80062f0 <HAL_SPI_Transmit+0xfa>
 80062ea:	8afb      	ldrh	r3, [r7, #22]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d13e      	bne.n	800636e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f4:	881a      	ldrh	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006300:	1c9a      	adds	r2, r3, #2
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800630a:	b29b      	uxth	r3, r3
 800630c:	3b01      	subs	r3, #1
 800630e:	b29a      	uxth	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006314:	e02b      	b.n	800636e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b02      	cmp	r3, #2
 8006322:	d112      	bne.n	800634a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006328:	881a      	ldrh	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006334:	1c9a      	adds	r2, r3, #2
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800633e:	b29b      	uxth	r3, r3
 8006340:	3b01      	subs	r3, #1
 8006342:	b29a      	uxth	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006348:	e011      	b.n	800636e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800634a:	f7fe f937 	bl	80045bc <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	429a      	cmp	r2, r3
 8006358:	d803      	bhi.n	8006362 <HAL_SPI_Transmit+0x16c>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006360:	d102      	bne.n	8006368 <HAL_SPI_Transmit+0x172>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d102      	bne.n	800636e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800636c:	e0a4      	b.n	80064b8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006372:	b29b      	uxth	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1ce      	bne.n	8006316 <HAL_SPI_Transmit+0x120>
 8006378:	e07c      	b.n	8006474 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <HAL_SPI_Transmit+0x192>
 8006382:	8afb      	ldrh	r3, [r7, #22]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d170      	bne.n	800646a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800638c:	b29b      	uxth	r3, r3
 800638e:	2b01      	cmp	r3, #1
 8006390:	d912      	bls.n	80063b8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006396:	881a      	ldrh	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a2:	1c9a      	adds	r2, r3, #2
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3b02      	subs	r3, #2
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063b6:	e058      	b.n	800646a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	330c      	adds	r3, #12
 80063c2:	7812      	ldrb	r2, [r2, #0]
 80063c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	3b01      	subs	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80063de:	e044      	b.n	800646a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d12b      	bne.n	8006446 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d912      	bls.n	800641e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063fc:	881a      	ldrh	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006408:	1c9a      	adds	r2, r3, #2
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006412:	b29b      	uxth	r3, r3
 8006414:	3b02      	subs	r3, #2
 8006416:	b29a      	uxth	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800641c:	e025      	b.n	800646a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	330c      	adds	r3, #12
 8006428:	7812      	ldrb	r2, [r2, #0]
 800642a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006430:	1c5a      	adds	r2, r3, #1
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800643a:	b29b      	uxth	r3, r3
 800643c:	3b01      	subs	r3, #1
 800643e:	b29a      	uxth	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006444:	e011      	b.n	800646a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006446:	f7fe f8b9 	bl	80045bc <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d803      	bhi.n	800645e <HAL_SPI_Transmit+0x268>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645c:	d102      	bne.n	8006464 <HAL_SPI_Transmit+0x26e>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d102      	bne.n	800646a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006468:	e026      	b.n	80064b8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800646e:	b29b      	uxth	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1b5      	bne.n	80063e0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f000 fe1b 	bl	80070b4 <SPI_EndRxTxTransaction>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2220      	movs	r2, #32
 8006488:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10a      	bne.n	80064a8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006492:	2300      	movs	r3, #0
 8006494:	613b      	str	r3, [r7, #16]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	613b      	str	r3, [r7, #16]
 80064a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	77fb      	strb	r3, [r7, #31]
 80064b4:	e000      	b.n	80064b8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80064b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80064c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3720      	adds	r7, #32
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b088      	sub	sp, #32
 80064d6:	af02      	add	r7, sp, #8
 80064d8:	60f8      	str	r0, [r7, #12]
 80064da:	60b9      	str	r1, [r7, #8]
 80064dc:	603b      	str	r3, [r7, #0]
 80064de:	4613      	mov	r3, r2
 80064e0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064ee:	d112      	bne.n	8006516 <HAL_SPI_Receive+0x44>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10e      	bne.n	8006516 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2204      	movs	r2, #4
 80064fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006500:	88fa      	ldrh	r2, [r7, #6]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	4613      	mov	r3, r2
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 f910 	bl	8006732 <HAL_SPI_TransmitReceive>
 8006512:	4603      	mov	r3, r0
 8006514:	e109      	b.n	800672a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800651c:	2b01      	cmp	r3, #1
 800651e:	d101      	bne.n	8006524 <HAL_SPI_Receive+0x52>
 8006520:	2302      	movs	r3, #2
 8006522:	e102      	b.n	800672a <HAL_SPI_Receive+0x258>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800652c:	f7fe f846 	bl	80045bc <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b01      	cmp	r3, #1
 800653c:	d002      	beq.n	8006544 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800653e:	2302      	movs	r3, #2
 8006540:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006542:	e0e9      	b.n	8006718 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <HAL_SPI_Receive+0x7e>
 800654a:	88fb      	ldrh	r3, [r7, #6]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d102      	bne.n	8006556 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006554:	e0e0      	b.n	8006718 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2204      	movs	r2, #4
 800655a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	88fa      	ldrh	r2, [r7, #6]
 800656e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	88fa      	ldrh	r2, [r7, #6]
 8006576:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80065a0:	d908      	bls.n	80065b4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80065b0:	605a      	str	r2, [r3, #4]
 80065b2:	e007      	b.n	80065c4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80065c2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065cc:	d10f      	bne.n	80065ee <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80065ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f8:	2b40      	cmp	r3, #64	@ 0x40
 80065fa:	d007      	beq.n	800660c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800660a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006614:	d867      	bhi.n	80066e6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006616:	e030      	b.n	800667a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b01      	cmp	r3, #1
 8006624:	d117      	bne.n	8006656 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f103 020c 	add.w	r2, r3, #12
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006632:	7812      	ldrb	r2, [r2, #0]
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006648:	b29b      	uxth	r3, r3
 800664a:	3b01      	subs	r3, #1
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006654:	e011      	b.n	800667a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006656:	f7fd ffb1 	bl	80045bc <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	429a      	cmp	r2, r3
 8006664:	d803      	bhi.n	800666e <HAL_SPI_Receive+0x19c>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666c:	d102      	bne.n	8006674 <HAL_SPI_Receive+0x1a2>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d102      	bne.n	800667a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006678:	e04e      	b.n	8006718 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1c8      	bne.n	8006618 <HAL_SPI_Receive+0x146>
 8006686:	e034      	b.n	80066f2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b01      	cmp	r3, #1
 8006694:	d115      	bne.n	80066c2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a0:	b292      	uxth	r2, r2
 80066a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a8:	1c9a      	adds	r2, r3, #2
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	3b01      	subs	r3, #1
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80066c0:	e011      	b.n	80066e6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066c2:	f7fd ff7b 	bl	80045bc <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d803      	bhi.n	80066da <HAL_SPI_Receive+0x208>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d8:	d102      	bne.n	80066e0 <HAL_SPI_Receive+0x20e>
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d102      	bne.n	80066e6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80066e4:	e018      	b.n	8006718 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1ca      	bne.n	8006688 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	6839      	ldr	r1, [r7, #0]
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 fc60 	bl	8006fbc <SPI_EndRxTransaction>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d002      	beq.n	8006708 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2220      	movs	r2, #32
 8006706:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800670c:	2b00      	cmp	r3, #0
 800670e:	d002      	beq.n	8006716 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	75fb      	strb	r3, [r7, #23]
 8006714:	e000      	b.n	8006718 <HAL_SPI_Receive+0x246>
  }

error :
 8006716:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006728:	7dfb      	ldrb	r3, [r7, #23]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b08a      	sub	sp, #40	@ 0x28
 8006736:	af00      	add	r7, sp, #0
 8006738:	60f8      	str	r0, [r7, #12]
 800673a:	60b9      	str	r1, [r7, #8]
 800673c:	607a      	str	r2, [r7, #4]
 800673e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006740:	2301      	movs	r3, #1
 8006742:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006750:	2b01      	cmp	r3, #1
 8006752:	d101      	bne.n	8006758 <HAL_SPI_TransmitReceive+0x26>
 8006754:	2302      	movs	r3, #2
 8006756:	e1fb      	b.n	8006b50 <HAL_SPI_TransmitReceive+0x41e>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006760:	f7fd ff2c 	bl	80045bc <HAL_GetTick>
 8006764:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800676c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006774:	887b      	ldrh	r3, [r7, #2]
 8006776:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006778:	887b      	ldrh	r3, [r7, #2]
 800677a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800677c:	7efb      	ldrb	r3, [r7, #27]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d00e      	beq.n	80067a0 <HAL_SPI_TransmitReceive+0x6e>
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006788:	d106      	bne.n	8006798 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d102      	bne.n	8006798 <HAL_SPI_TransmitReceive+0x66>
 8006792:	7efb      	ldrb	r3, [r7, #27]
 8006794:	2b04      	cmp	r3, #4
 8006796:	d003      	beq.n	80067a0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006798:	2302      	movs	r3, #2
 800679a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800679e:	e1cd      	b.n	8006b3c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d005      	beq.n	80067b2 <HAL_SPI_TransmitReceive+0x80>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <HAL_SPI_TransmitReceive+0x80>
 80067ac:	887b      	ldrh	r3, [r7, #2]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d103      	bne.n	80067ba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80067b8:	e1c0      	b.n	8006b3c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d003      	beq.n	80067ce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2205      	movs	r2, #5
 80067ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	887a      	ldrh	r2, [r7, #2]
 80067de:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	887a      	ldrh	r2, [r7, #2]
 80067e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	887a      	ldrh	r2, [r7, #2]
 80067f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	887a      	ldrh	r2, [r7, #2]
 80067fa:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006810:	d802      	bhi.n	8006818 <HAL_SPI_TransmitReceive+0xe6>
 8006812:	8a3b      	ldrh	r3, [r7, #16]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d908      	bls.n	800682a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006826:	605a      	str	r2, [r3, #4]
 8006828:	e007      	b.n	800683a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006838:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006844:	2b40      	cmp	r3, #64	@ 0x40
 8006846:	d007      	beq.n	8006858 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006856:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006860:	d97c      	bls.n	800695c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <HAL_SPI_TransmitReceive+0x13e>
 800686a:	8a7b      	ldrh	r3, [r7, #18]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d169      	bne.n	8006944 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006874:	881a      	ldrh	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006880:	1c9a      	adds	r2, r3, #2
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800688a:	b29b      	uxth	r3, r3
 800688c:	3b01      	subs	r3, #1
 800688e:	b29a      	uxth	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006894:	e056      	b.n	8006944 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d11b      	bne.n	80068dc <HAL_SPI_TransmitReceive+0x1aa>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d016      	beq.n	80068dc <HAL_SPI_TransmitReceive+0x1aa>
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d113      	bne.n	80068dc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b8:	881a      	ldrh	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c4:	1c9a      	adds	r2, r3, #2
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d11c      	bne.n	8006924 <HAL_SPI_TransmitReceive+0x1f2>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d016      	beq.n	8006924 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006900:	b292      	uxth	r2, r2
 8006902:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006908:	1c9a      	adds	r2, r3, #2
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006914:	b29b      	uxth	r3, r3
 8006916:	3b01      	subs	r3, #1
 8006918:	b29a      	uxth	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006920:	2301      	movs	r3, #1
 8006922:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006924:	f7fd fe4a 	bl	80045bc <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006930:	429a      	cmp	r2, r3
 8006932:	d807      	bhi.n	8006944 <HAL_SPI_TransmitReceive+0x212>
 8006934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693a:	d003      	beq.n	8006944 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8006942:	e0fb      	b.n	8006b3c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006948:	b29b      	uxth	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1a3      	bne.n	8006896 <HAL_SPI_TransmitReceive+0x164>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006954:	b29b      	uxth	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d19d      	bne.n	8006896 <HAL_SPI_TransmitReceive+0x164>
 800695a:	e0df      	b.n	8006b1c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d003      	beq.n	800696c <HAL_SPI_TransmitReceive+0x23a>
 8006964:	8a7b      	ldrh	r3, [r7, #18]
 8006966:	2b01      	cmp	r3, #1
 8006968:	f040 80cb 	bne.w	8006b02 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006970:	b29b      	uxth	r3, r3
 8006972:	2b01      	cmp	r3, #1
 8006974:	d912      	bls.n	800699c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800697a:	881a      	ldrh	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006986:	1c9a      	adds	r2, r3, #2
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006990:	b29b      	uxth	r3, r3
 8006992:	3b02      	subs	r3, #2
 8006994:	b29a      	uxth	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800699a:	e0b2      	b.n	8006b02 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	330c      	adds	r3, #12
 80069a6:	7812      	ldrb	r2, [r2, #0]
 80069a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ae:	1c5a      	adds	r2, r3, #1
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	3b01      	subs	r3, #1
 80069bc:	b29a      	uxth	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069c2:	e09e      	b.n	8006b02 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d134      	bne.n	8006a3c <HAL_SPI_TransmitReceive+0x30a>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d02f      	beq.n	8006a3c <HAL_SPI_TransmitReceive+0x30a>
 80069dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d12c      	bne.n	8006a3c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d912      	bls.n	8006a12 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f0:	881a      	ldrh	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069fc:	1c9a      	adds	r2, r3, #2
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	3b02      	subs	r3, #2
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a10:	e012      	b.n	8006a38 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	330c      	adds	r3, #12
 8006a1c:	7812      	ldrb	r2, [r2, #0]
 8006a1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d148      	bne.n	8006adc <HAL_SPI_TransmitReceive+0x3aa>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d042      	beq.n	8006adc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d923      	bls.n	8006aaa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68da      	ldr	r2, [r3, #12]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6c:	b292      	uxth	r2, r2
 8006a6e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a74:	1c9a      	adds	r2, r3, #2
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	3b02      	subs	r3, #2
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d81f      	bhi.n	8006ad8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006aa6:	605a      	str	r2, [r3, #4]
 8006aa8:	e016      	b.n	8006ad8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f103 020c 	add.w	r2, r3, #12
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab6:	7812      	ldrb	r2, [r2, #0]
 8006ab8:	b2d2      	uxtb	r2, r2
 8006aba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006adc:	f7fd fd6e 	bl	80045bc <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d803      	bhi.n	8006af4 <HAL_SPI_TransmitReceive+0x3c2>
 8006aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af2:	d102      	bne.n	8006afa <HAL_SPI_TransmitReceive+0x3c8>
 8006af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d103      	bne.n	8006b02 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8006b00:	e01c      	b.n	8006b3c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f47f af5b 	bne.w	80069c4 <HAL_SPI_TransmitReceive+0x292>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f47f af54 	bne.w	80069c4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b1c:	69fa      	ldr	r2, [r7, #28]
 8006b1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f000 fac7 	bl	80070b4 <SPI_EndRxTxTransaction>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d006      	beq.n	8006b3a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2220      	movs	r2, #32
 8006b36:	661a      	str	r2, [r3, #96]	@ 0x60
 8006b38:	e000      	b.n	8006b3c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006b3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006b4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3728      	adds	r7, #40	@ 0x28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10e      	bne.n	8006b98 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d009      	beq.n	8006b98 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d004      	beq.n	8006b98 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	4798      	blx	r3
    return;
 8006b96:	e0ce      	b.n	8006d36 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d009      	beq.n	8006bb6 <HAL_SPI_IRQHandler+0x5e>
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d004      	beq.n	8006bb6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	4798      	blx	r3
    return;
 8006bb4:	e0bf      	b.n	8006d36 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	f003 0320 	and.w	r3, r3, #32
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10a      	bne.n	8006bd6 <HAL_SPI_IRQHandler+0x7e>
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d105      	bne.n	8006bd6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 80b0 	beq.w	8006d36 <HAL_SPI_IRQHandler+0x1de>
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	f003 0320 	and.w	r3, r3, #32
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 80aa 	beq.w	8006d36 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d023      	beq.n	8006c34 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b03      	cmp	r3, #3
 8006bf6:	d011      	beq.n	8006c1c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bfc:	f043 0204 	orr.w	r2, r3, #4
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c04:	2300      	movs	r3, #0
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	617b      	str	r3, [r7, #20]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	e00b      	b.n	8006c34 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	613b      	str	r3, [r7, #16]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	613b      	str	r3, [r7, #16]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	613b      	str	r3, [r7, #16]
 8006c30:	693b      	ldr	r3, [r7, #16]
        return;
 8006c32:	e080      	b.n	8006d36 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	f003 0320 	and.w	r3, r3, #32
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d014      	beq.n	8006c68 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c42:	f043 0201 	orr.w	r2, r3, #1
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60fb      	str	r3, [r7, #12]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	60fb      	str	r3, [r7, #12]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00c      	beq.n	8006c8c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c76:	f043 0208 	orr.w	r2, r3, #8
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c7e:	2300      	movs	r3, #0
 8006c80:	60bb      	str	r3, [r7, #8]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	60bb      	str	r3, [r7, #8]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d04f      	beq.n	8006d34 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006ca2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	f003 0302 	and.w	r3, r3, #2
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d104      	bne.n	8006cc0 <HAL_SPI_IRQHandler+0x168>
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d034      	beq.n	8006d2a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f022 0203 	bic.w	r2, r2, #3
 8006cce:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d011      	beq.n	8006cfc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cdc:	4a17      	ldr	r2, [pc, #92]	@ (8006d3c <HAL_SPI_IRQHandler+0x1e4>)
 8006cde:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7fd fdaa 	bl	800483e <HAL_DMA_Abort_IT>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d005      	beq.n	8006cfc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cf4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d016      	beq.n	8006d32 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d08:	4a0c      	ldr	r2, [pc, #48]	@ (8006d3c <HAL_SPI_IRQHandler+0x1e4>)
 8006d0a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fd fd94 	bl	800483e <HAL_DMA_Abort_IT>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00a      	beq.n	8006d32 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d20:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006d28:	e003      	b.n	8006d32 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f808 	bl	8006d40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006d30:	e000      	b.n	8006d34 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006d32:	bf00      	nop
    return;
 8006d34:	bf00      	nop
  }
}
 8006d36:	3720      	adds	r7, #32
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	08006d55 	.word	0x08006d55

08006d40 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d60:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f7ff ffe5 	bl	8006d40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d76:	bf00      	nop
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
	...

08006d80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b088      	sub	sp, #32
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	603b      	str	r3, [r7, #0]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d90:	f7fd fc14 	bl	80045bc <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d98:	1a9b      	subs	r3, r3, r2
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006da0:	f7fd fc0c 	bl	80045bc <HAL_GetTick>
 8006da4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006da6:	4b39      	ldr	r3, [pc, #228]	@ (8006e8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	015b      	lsls	r3, r3, #5
 8006dac:	0d1b      	lsrs	r3, r3, #20
 8006dae:	69fa      	ldr	r2, [r7, #28]
 8006db0:	fb02 f303 	mul.w	r3, r2, r3
 8006db4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006db6:	e054      	b.n	8006e62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dbe:	d050      	beq.n	8006e62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006dc0:	f7fd fbfc 	bl	80045bc <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	69fa      	ldr	r2, [r7, #28]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d902      	bls.n	8006dd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d13d      	bne.n	8006e52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006de4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dee:	d111      	bne.n	8006e14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006df8:	d004      	beq.n	8006e04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e02:	d107      	bne.n	8006e14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e1c:	d10f      	bne.n	8006e3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e017      	b.n	8006e82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d101      	bne.n	8006e5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689a      	ldr	r2, [r3, #8]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	bf0c      	ite	eq
 8006e72:	2301      	moveq	r3, #1
 8006e74:	2300      	movne	r3, #0
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	461a      	mov	r2, r3
 8006e7a:	79fb      	ldrb	r3, [r7, #7]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d19b      	bne.n	8006db8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3720      	adds	r7, #32
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20000108 	.word	0x20000108

08006e90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08a      	sub	sp, #40	@ 0x28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
 8006e9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006ea2:	f7fd fb8b 	bl	80045bc <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eaa:	1a9b      	subs	r3, r3, r2
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	4413      	add	r3, r2
 8006eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006eb2:	f7fd fb83 	bl	80045bc <HAL_GetTick>
 8006eb6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	330c      	adds	r3, #12
 8006ebe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006ec0:	4b3d      	ldr	r3, [pc, #244]	@ (8006fb8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	00da      	lsls	r2, r3, #3
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	0d1b      	lsrs	r3, r3, #20
 8006ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ed2:	fb02 f303 	mul.w	r3, r2, r3
 8006ed6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006ed8:	e060      	b.n	8006f9c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006ee0:	d107      	bne.n	8006ef2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d104      	bne.n	8006ef2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006ef0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef8:	d050      	beq.n	8006f9c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006efa:	f7fd fb5f 	bl	80045bc <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d902      	bls.n	8006f10 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d13d      	bne.n	8006f8c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f1e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f28:	d111      	bne.n	8006f4e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f32:	d004      	beq.n	8006f3e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f3c:	d107      	bne.n	8006f4e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f4c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f56:	d10f      	bne.n	8006f78 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e010      	b.n	8006fae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689a      	ldr	r2, [r3, #8]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d196      	bne.n	8006eda <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3728      	adds	r7, #40	@ 0x28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	20000108 	.word	0x20000108

08006fbc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b088      	sub	sp, #32
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fd0:	d111      	bne.n	8006ff6 <SPI_EndRxTransaction+0x3a>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fda:	d004      	beq.n	8006fe6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fe4:	d107      	bne.n	8006ff6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ff4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ffe:	d112      	bne.n	8007026 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2200      	movs	r2, #0
 8007008:	2180      	movs	r1, #128	@ 0x80
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f7ff feb8 	bl	8006d80 <SPI_WaitFlagStateUntilTimeout>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d021      	beq.n	800705a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800701a:	f043 0220 	orr.w	r2, r3, #32
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e03d      	b.n	80070a2 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007026:	4b21      	ldr	r3, [pc, #132]	@ (80070ac <SPI_EndRxTransaction+0xf0>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a21      	ldr	r2, [pc, #132]	@ (80070b0 <SPI_EndRxTransaction+0xf4>)
 800702c:	fba2 2303 	umull	r2, r3, r2, r3
 8007030:	0d5b      	lsrs	r3, r3, #21
 8007032:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007036:	fb02 f303 	mul.w	r3, r2, r3
 800703a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	3b01      	subs	r3, #1
 8007046:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007052:	2b80      	cmp	r3, #128	@ 0x80
 8007054:	d0f2      	beq.n	800703c <SPI_EndRxTransaction+0x80>
 8007056:	e000      	b.n	800705a <SPI_EndRxTransaction+0x9e>
        break;
 8007058:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007062:	d11d      	bne.n	80070a0 <SPI_EndRxTransaction+0xe4>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800706c:	d004      	beq.n	8007078 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007076:	d113      	bne.n	80070a0 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2200      	movs	r2, #0
 8007080:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f7ff ff03 	bl	8006e90 <SPI_WaitFifoStateUntilTimeout>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d007      	beq.n	80070a0 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007094:	f043 0220 	orr.w	r2, r3, #32
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e000      	b.n	80070a2 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3718      	adds	r7, #24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	20000108 	.word	0x20000108
 80070b0:	165e9f81 	.word	0x165e9f81

080070b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b088      	sub	sp, #32
 80070b8:	af02      	add	r7, sp, #8
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f7ff fedf 	bl	8006e90 <SPI_WaitFifoStateUntilTimeout>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d007      	beq.n	80070e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070dc:	f043 0220 	orr.w	r2, r3, #32
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e046      	b.n	8007176 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80070e8:	4b25      	ldr	r3, [pc, #148]	@ (8007180 <SPI_EndRxTxTransaction+0xcc>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a25      	ldr	r2, [pc, #148]	@ (8007184 <SPI_EndRxTxTransaction+0xd0>)
 80070ee:	fba2 2303 	umull	r2, r3, r2, r3
 80070f2:	0d5b      	lsrs	r3, r3, #21
 80070f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80070f8:	fb02 f303 	mul.w	r3, r2, r3
 80070fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007106:	d112      	bne.n	800712e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2200      	movs	r2, #0
 8007110:	2180      	movs	r1, #128	@ 0x80
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f7ff fe34 	bl	8006d80 <SPI_WaitFlagStateUntilTimeout>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d016      	beq.n	800714c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007122:	f043 0220 	orr.w	r2, r3, #32
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e023      	b.n	8007176 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00a      	beq.n	800714a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	3b01      	subs	r3, #1
 8007138:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007144:	2b80      	cmp	r3, #128	@ 0x80
 8007146:	d0f2      	beq.n	800712e <SPI_EndRxTxTransaction+0x7a>
 8007148:	e000      	b.n	800714c <SPI_EndRxTxTransaction+0x98>
        break;
 800714a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2200      	movs	r2, #0
 8007154:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f7ff fe99 	bl	8006e90 <SPI_WaitFifoStateUntilTimeout>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d007      	beq.n	8007174 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007168:	f043 0220 	orr.w	r2, r3, #32
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e000      	b.n	8007176 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	20000108 	.word	0x20000108
 8007184:	165e9f81 	.word	0x165e9f81

08007188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e049      	b.n	800722e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d106      	bne.n	80071b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7fc ff62 	bl	8004078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3304      	adds	r3, #4
 80071c4:	4619      	mov	r1, r3
 80071c6:	4610      	mov	r0, r2
 80071c8:	f000 fdde 	bl	8007d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
	...

08007238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b01      	cmp	r3, #1
 800724a:	d001      	beq.n	8007250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e054      	b.n	80072fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2202      	movs	r2, #2
 8007254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68da      	ldr	r2, [r3, #12]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f042 0201 	orr.w	r2, r2, #1
 8007266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a26      	ldr	r2, [pc, #152]	@ (8007308 <HAL_TIM_Base_Start_IT+0xd0>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d022      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x80>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800727a:	d01d      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x80>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a22      	ldr	r2, [pc, #136]	@ (800730c <HAL_TIM_Base_Start_IT+0xd4>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d018      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x80>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a21      	ldr	r2, [pc, #132]	@ (8007310 <HAL_TIM_Base_Start_IT+0xd8>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d013      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x80>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a1f      	ldr	r2, [pc, #124]	@ (8007314 <HAL_TIM_Base_Start_IT+0xdc>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d00e      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x80>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a1e      	ldr	r2, [pc, #120]	@ (8007318 <HAL_TIM_Base_Start_IT+0xe0>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d009      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x80>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a1c      	ldr	r2, [pc, #112]	@ (800731c <HAL_TIM_Base_Start_IT+0xe4>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d004      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x80>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a1b      	ldr	r2, [pc, #108]	@ (8007320 <HAL_TIM_Base_Start_IT+0xe8>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d115      	bne.n	80072e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689a      	ldr	r2, [r3, #8]
 80072be:	4b19      	ldr	r3, [pc, #100]	@ (8007324 <HAL_TIM_Base_Start_IT+0xec>)
 80072c0:	4013      	ands	r3, r2
 80072c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2b06      	cmp	r3, #6
 80072c8:	d015      	beq.n	80072f6 <HAL_TIM_Base_Start_IT+0xbe>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072d0:	d011      	beq.n	80072f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f042 0201 	orr.w	r2, r2, #1
 80072e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072e2:	e008      	b.n	80072f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f042 0201 	orr.w	r2, r2, #1
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	e000      	b.n	80072f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	40010000 	.word	0x40010000
 800730c:	40000400 	.word	0x40000400
 8007310:	40000800 	.word	0x40000800
 8007314:	40000c00 	.word	0x40000c00
 8007318:	40010400 	.word	0x40010400
 800731c:	40014000 	.word	0x40014000
 8007320:	40001800 	.word	0x40001800
 8007324:	00010007 	.word	0x00010007

08007328 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68da      	ldr	r2, [r3, #12]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 0201 	bic.w	r2, r2, #1
 800733e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6a1a      	ldr	r2, [r3, #32]
 8007346:	f241 1311 	movw	r3, #4369	@ 0x1111
 800734a:	4013      	ands	r3, r2
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10f      	bne.n	8007370 <HAL_TIM_Base_Stop_IT+0x48>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6a1a      	ldr	r2, [r3, #32]
 8007356:	f240 4344 	movw	r3, #1092	@ 0x444
 800735a:	4013      	ands	r3, r2
 800735c:	2b00      	cmp	r3, #0
 800735e:	d107      	bne.n	8007370 <HAL_TIM_Base_Stop_IT+0x48>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f022 0201 	bic.w	r2, r2, #1
 800736e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b082      	sub	sp, #8
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e049      	b.n	800742c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d106      	bne.n	80073b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f841 	bl	8007434 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2202      	movs	r2, #2
 80073b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3304      	adds	r3, #4
 80073c2:	4619      	mov	r1, r3
 80073c4:	4610      	mov	r0, r2
 80073c6:	f000 fcdf 	bl	8007d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d109      	bne.n	800746c <HAL_TIM_PWM_Start+0x24>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b01      	cmp	r3, #1
 8007462:	bf14      	ite	ne
 8007464:	2301      	movne	r3, #1
 8007466:	2300      	moveq	r3, #0
 8007468:	b2db      	uxtb	r3, r3
 800746a:	e03c      	b.n	80074e6 <HAL_TIM_PWM_Start+0x9e>
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	2b04      	cmp	r3, #4
 8007470:	d109      	bne.n	8007486 <HAL_TIM_PWM_Start+0x3e>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b01      	cmp	r3, #1
 800747c:	bf14      	ite	ne
 800747e:	2301      	movne	r3, #1
 8007480:	2300      	moveq	r3, #0
 8007482:	b2db      	uxtb	r3, r3
 8007484:	e02f      	b.n	80074e6 <HAL_TIM_PWM_Start+0x9e>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b08      	cmp	r3, #8
 800748a:	d109      	bne.n	80074a0 <HAL_TIM_PWM_Start+0x58>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b01      	cmp	r3, #1
 8007496:	bf14      	ite	ne
 8007498:	2301      	movne	r3, #1
 800749a:	2300      	moveq	r3, #0
 800749c:	b2db      	uxtb	r3, r3
 800749e:	e022      	b.n	80074e6 <HAL_TIM_PWM_Start+0x9e>
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2b0c      	cmp	r3, #12
 80074a4:	d109      	bne.n	80074ba <HAL_TIM_PWM_Start+0x72>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	bf14      	ite	ne
 80074b2:	2301      	movne	r3, #1
 80074b4:	2300      	moveq	r3, #0
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	e015      	b.n	80074e6 <HAL_TIM_PWM_Start+0x9e>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2b10      	cmp	r3, #16
 80074be:	d109      	bne.n	80074d4 <HAL_TIM_PWM_Start+0x8c>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	bf14      	ite	ne
 80074cc:	2301      	movne	r3, #1
 80074ce:	2300      	moveq	r3, #0
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	e008      	b.n	80074e6 <HAL_TIM_PWM_Start+0x9e>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b01      	cmp	r3, #1
 80074de:	bf14      	ite	ne
 80074e0:	2301      	movne	r3, #1
 80074e2:	2300      	moveq	r3, #0
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e092      	b.n	8007614 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d104      	bne.n	80074fe <HAL_TIM_PWM_Start+0xb6>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074fc:	e023      	b.n	8007546 <HAL_TIM_PWM_Start+0xfe>
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b04      	cmp	r3, #4
 8007502:	d104      	bne.n	800750e <HAL_TIM_PWM_Start+0xc6>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2202      	movs	r2, #2
 8007508:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800750c:	e01b      	b.n	8007546 <HAL_TIM_PWM_Start+0xfe>
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2b08      	cmp	r3, #8
 8007512:	d104      	bne.n	800751e <HAL_TIM_PWM_Start+0xd6>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2202      	movs	r2, #2
 8007518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800751c:	e013      	b.n	8007546 <HAL_TIM_PWM_Start+0xfe>
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b0c      	cmp	r3, #12
 8007522:	d104      	bne.n	800752e <HAL_TIM_PWM_Start+0xe6>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2202      	movs	r2, #2
 8007528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800752c:	e00b      	b.n	8007546 <HAL_TIM_PWM_Start+0xfe>
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2b10      	cmp	r3, #16
 8007532:	d104      	bne.n	800753e <HAL_TIM_PWM_Start+0xf6>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800753c:	e003      	b.n	8007546 <HAL_TIM_PWM_Start+0xfe>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2202      	movs	r2, #2
 8007542:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2201      	movs	r2, #1
 800754c:	6839      	ldr	r1, [r7, #0]
 800754e:	4618      	mov	r0, r3
 8007550:	f000 ffb2 	bl	80084b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a30      	ldr	r2, [pc, #192]	@ (800761c <HAL_TIM_PWM_Start+0x1d4>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d004      	beq.n	8007568 <HAL_TIM_PWM_Start+0x120>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a2f      	ldr	r2, [pc, #188]	@ (8007620 <HAL_TIM_PWM_Start+0x1d8>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d101      	bne.n	800756c <HAL_TIM_PWM_Start+0x124>
 8007568:	2301      	movs	r3, #1
 800756a:	e000      	b.n	800756e <HAL_TIM_PWM_Start+0x126>
 800756c:	2300      	movs	r3, #0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d007      	beq.n	8007582 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007580:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a25      	ldr	r2, [pc, #148]	@ (800761c <HAL_TIM_PWM_Start+0x1d4>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d022      	beq.n	80075d2 <HAL_TIM_PWM_Start+0x18a>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007594:	d01d      	beq.n	80075d2 <HAL_TIM_PWM_Start+0x18a>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a22      	ldr	r2, [pc, #136]	@ (8007624 <HAL_TIM_PWM_Start+0x1dc>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d018      	beq.n	80075d2 <HAL_TIM_PWM_Start+0x18a>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a20      	ldr	r2, [pc, #128]	@ (8007628 <HAL_TIM_PWM_Start+0x1e0>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d013      	beq.n	80075d2 <HAL_TIM_PWM_Start+0x18a>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a1f      	ldr	r2, [pc, #124]	@ (800762c <HAL_TIM_PWM_Start+0x1e4>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d00e      	beq.n	80075d2 <HAL_TIM_PWM_Start+0x18a>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a19      	ldr	r2, [pc, #100]	@ (8007620 <HAL_TIM_PWM_Start+0x1d8>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d009      	beq.n	80075d2 <HAL_TIM_PWM_Start+0x18a>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a1b      	ldr	r2, [pc, #108]	@ (8007630 <HAL_TIM_PWM_Start+0x1e8>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d004      	beq.n	80075d2 <HAL_TIM_PWM_Start+0x18a>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a19      	ldr	r2, [pc, #100]	@ (8007634 <HAL_TIM_PWM_Start+0x1ec>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d115      	bne.n	80075fe <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	4b17      	ldr	r3, [pc, #92]	@ (8007638 <HAL_TIM_PWM_Start+0x1f0>)
 80075da:	4013      	ands	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2b06      	cmp	r3, #6
 80075e2:	d015      	beq.n	8007610 <HAL_TIM_PWM_Start+0x1c8>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075ea:	d011      	beq.n	8007610 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f042 0201 	orr.w	r2, r2, #1
 80075fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075fc:	e008      	b.n	8007610 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f042 0201 	orr.w	r2, r2, #1
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	e000      	b.n	8007612 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007610:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	40010000 	.word	0x40010000
 8007620:	40010400 	.word	0x40010400
 8007624:	40000400 	.word	0x40000400
 8007628:	40000800 	.word	0x40000800
 800762c:	40000c00 	.word	0x40000c00
 8007630:	40014000 	.word	0x40014000
 8007634:	40001800 	.word	0x40001800
 8007638:	00010007 	.word	0x00010007

0800763c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2200      	movs	r2, #0
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	4618      	mov	r0, r3
 8007650:	f000 ff32 	bl	80084b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a36      	ldr	r2, [pc, #216]	@ (8007734 <HAL_TIM_PWM_Stop+0xf8>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d004      	beq.n	8007668 <HAL_TIM_PWM_Stop+0x2c>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a35      	ldr	r2, [pc, #212]	@ (8007738 <HAL_TIM_PWM_Stop+0xfc>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d101      	bne.n	800766c <HAL_TIM_PWM_Stop+0x30>
 8007668:	2301      	movs	r3, #1
 800766a:	e000      	b.n	800766e <HAL_TIM_PWM_Stop+0x32>
 800766c:	2300      	movs	r3, #0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d017      	beq.n	80076a2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	6a1a      	ldr	r2, [r3, #32]
 8007678:	f241 1311 	movw	r3, #4369	@ 0x1111
 800767c:	4013      	ands	r3, r2
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10f      	bne.n	80076a2 <HAL_TIM_PWM_Stop+0x66>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6a1a      	ldr	r2, [r3, #32]
 8007688:	f240 4344 	movw	r3, #1092	@ 0x444
 800768c:	4013      	ands	r3, r2
 800768e:	2b00      	cmp	r3, #0
 8007690:	d107      	bne.n	80076a2 <HAL_TIM_PWM_Stop+0x66>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80076a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	6a1a      	ldr	r2, [r3, #32]
 80076a8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80076ac:	4013      	ands	r3, r2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10f      	bne.n	80076d2 <HAL_TIM_PWM_Stop+0x96>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6a1a      	ldr	r2, [r3, #32]
 80076b8:	f240 4344 	movw	r3, #1092	@ 0x444
 80076bc:	4013      	ands	r3, r2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d107      	bne.n	80076d2 <HAL_TIM_PWM_Stop+0x96>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 0201 	bic.w	r2, r2, #1
 80076d0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d104      	bne.n	80076e2 <HAL_TIM_PWM_Stop+0xa6>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076e0:	e023      	b.n	800772a <HAL_TIM_PWM_Stop+0xee>
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b04      	cmp	r3, #4
 80076e6:	d104      	bne.n	80076f2 <HAL_TIM_PWM_Stop+0xb6>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076f0:	e01b      	b.n	800772a <HAL_TIM_PWM_Stop+0xee>
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b08      	cmp	r3, #8
 80076f6:	d104      	bne.n	8007702 <HAL_TIM_PWM_Stop+0xc6>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007700:	e013      	b.n	800772a <HAL_TIM_PWM_Stop+0xee>
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2b0c      	cmp	r3, #12
 8007706:	d104      	bne.n	8007712 <HAL_TIM_PWM_Stop+0xd6>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007710:	e00b      	b.n	800772a <HAL_TIM_PWM_Stop+0xee>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	2b10      	cmp	r3, #16
 8007716:	d104      	bne.n	8007722 <HAL_TIM_PWM_Stop+0xe6>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007720:	e003      	b.n	800772a <HAL_TIM_PWM_Stop+0xee>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	40010000 	.word	0x40010000
 8007738:	40010400 	.word	0x40010400

0800773c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	f003 0302 	and.w	r3, r3, #2
 800774e:	2b02      	cmp	r3, #2
 8007750:	d122      	bne.n	8007798 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b02      	cmp	r3, #2
 800775e:	d11b      	bne.n	8007798 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f06f 0202 	mvn.w	r2, #2
 8007768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	f003 0303 	and.w	r3, r3, #3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d003      	beq.n	8007786 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fae4 	bl	8007d4c <HAL_TIM_IC_CaptureCallback>
 8007784:	e005      	b.n	8007792 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fad6 	bl	8007d38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fae7 	bl	8007d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	f003 0304 	and.w	r3, r3, #4
 80077a2:	2b04      	cmp	r3, #4
 80077a4:	d122      	bne.n	80077ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	f003 0304 	and.w	r3, r3, #4
 80077b0:	2b04      	cmp	r3, #4
 80077b2:	d11b      	bne.n	80077ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f06f 0204 	mvn.w	r2, #4
 80077bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2202      	movs	r2, #2
 80077c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d003      	beq.n	80077da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 faba 	bl	8007d4c <HAL_TIM_IC_CaptureCallback>
 80077d8:	e005      	b.n	80077e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 faac 	bl	8007d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fabd 	bl	8007d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	f003 0308 	and.w	r3, r3, #8
 80077f6:	2b08      	cmp	r3, #8
 80077f8:	d122      	bne.n	8007840 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f003 0308 	and.w	r3, r3, #8
 8007804:	2b08      	cmp	r3, #8
 8007806:	d11b      	bne.n	8007840 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f06f 0208 	mvn.w	r2, #8
 8007810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2204      	movs	r2, #4
 8007816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	f003 0303 	and.w	r3, r3, #3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d003      	beq.n	800782e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fa90 	bl	8007d4c <HAL_TIM_IC_CaptureCallback>
 800782c:	e005      	b.n	800783a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fa82 	bl	8007d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fa93 	bl	8007d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	f003 0310 	and.w	r3, r3, #16
 800784a:	2b10      	cmp	r3, #16
 800784c:	d122      	bne.n	8007894 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	f003 0310 	and.w	r3, r3, #16
 8007858:	2b10      	cmp	r3, #16
 800785a:	d11b      	bne.n	8007894 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f06f 0210 	mvn.w	r2, #16
 8007864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2208      	movs	r2, #8
 800786a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fa66 	bl	8007d4c <HAL_TIM_IC_CaptureCallback>
 8007880:	e005      	b.n	800788e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fa58 	bl	8007d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fa69 	bl	8007d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	f003 0301 	and.w	r3, r3, #1
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d10e      	bne.n	80078c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d107      	bne.n	80078c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f06f 0201 	mvn.w	r2, #1
 80078b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7fb f966 	bl	8002b8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ca:	2b80      	cmp	r3, #128	@ 0x80
 80078cc:	d10e      	bne.n	80078ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078d8:	2b80      	cmp	r3, #128	@ 0x80
 80078da:	d107      	bne.n	80078ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80078e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fea4 	bl	8008634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078fa:	d10e      	bne.n	800791a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007906:	2b80      	cmp	r3, #128	@ 0x80
 8007908:	d107      	bne.n	800791a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fe97 	bl	8008648 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007924:	2b40      	cmp	r3, #64	@ 0x40
 8007926:	d10e      	bne.n	8007946 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007932:	2b40      	cmp	r3, #64	@ 0x40
 8007934:	d107      	bne.n	8007946 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800793e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fa17 	bl	8007d74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	f003 0320 	and.w	r3, r3, #32
 8007950:	2b20      	cmp	r3, #32
 8007952:	d10e      	bne.n	8007972 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	f003 0320 	and.w	r3, r3, #32
 800795e:	2b20      	cmp	r3, #32
 8007960:	d107      	bne.n	8007972 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f06f 0220 	mvn.w	r2, #32
 800796a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fe57 	bl	8008620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007972:	bf00      	nop
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
	...

0800797c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007988:	2300      	movs	r3, #0
 800798a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007992:	2b01      	cmp	r3, #1
 8007994:	d101      	bne.n	800799a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007996:	2302      	movs	r3, #2
 8007998:	e0ff      	b.n	8007b9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2b14      	cmp	r3, #20
 80079a6:	f200 80f0 	bhi.w	8007b8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80079aa:	a201      	add	r2, pc, #4	@ (adr r2, 80079b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b0:	08007a05 	.word	0x08007a05
 80079b4:	08007b8b 	.word	0x08007b8b
 80079b8:	08007b8b 	.word	0x08007b8b
 80079bc:	08007b8b 	.word	0x08007b8b
 80079c0:	08007a45 	.word	0x08007a45
 80079c4:	08007b8b 	.word	0x08007b8b
 80079c8:	08007b8b 	.word	0x08007b8b
 80079cc:	08007b8b 	.word	0x08007b8b
 80079d0:	08007a87 	.word	0x08007a87
 80079d4:	08007b8b 	.word	0x08007b8b
 80079d8:	08007b8b 	.word	0x08007b8b
 80079dc:	08007b8b 	.word	0x08007b8b
 80079e0:	08007ac7 	.word	0x08007ac7
 80079e4:	08007b8b 	.word	0x08007b8b
 80079e8:	08007b8b 	.word	0x08007b8b
 80079ec:	08007b8b 	.word	0x08007b8b
 80079f0:	08007b09 	.word	0x08007b09
 80079f4:	08007b8b 	.word	0x08007b8b
 80079f8:	08007b8b 	.word	0x08007b8b
 80079fc:	08007b8b 	.word	0x08007b8b
 8007a00:	08007b49 	.word	0x08007b49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68b9      	ldr	r1, [r7, #8]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 fa5c 	bl	8007ec8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699a      	ldr	r2, [r3, #24]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f042 0208 	orr.w	r2, r2, #8
 8007a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	699a      	ldr	r2, [r3, #24]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f022 0204 	bic.w	r2, r2, #4
 8007a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6999      	ldr	r1, [r3, #24]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	691a      	ldr	r2, [r3, #16]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	619a      	str	r2, [r3, #24]
      break;
 8007a42:	e0a5      	b.n	8007b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68b9      	ldr	r1, [r7, #8]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 faae 	bl	8007fac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699a      	ldr	r2, [r3, #24]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	699a      	ldr	r2, [r3, #24]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6999      	ldr	r1, [r3, #24]
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	021a      	lsls	r2, r3, #8
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	430a      	orrs	r2, r1
 8007a82:	619a      	str	r2, [r3, #24]
      break;
 8007a84:	e084      	b.n	8007b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68b9      	ldr	r1, [r7, #8]
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f000 fb05 	bl	800809c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	69da      	ldr	r2, [r3, #28]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f042 0208 	orr.w	r2, r2, #8
 8007aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	69da      	ldr	r2, [r3, #28]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f022 0204 	bic.w	r2, r2, #4
 8007ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	69d9      	ldr	r1, [r3, #28]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	691a      	ldr	r2, [r3, #16]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	61da      	str	r2, [r3, #28]
      break;
 8007ac4:	e064      	b.n	8007b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68b9      	ldr	r1, [r7, #8]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 fb5b 	bl	8008188 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	69da      	ldr	r2, [r3, #28]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69da      	ldr	r2, [r3, #28]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	69d9      	ldr	r1, [r3, #28]
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	021a      	lsls	r2, r3, #8
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	61da      	str	r2, [r3, #28]
      break;
 8007b06:	e043      	b.n	8007b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68b9      	ldr	r1, [r7, #8]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 fb92 	bl	8008238 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f042 0208 	orr.w	r2, r2, #8
 8007b22:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0204 	bic.w	r2, r2, #4
 8007b32:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	691a      	ldr	r2, [r3, #16]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007b46:	e023      	b.n	8007b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68b9      	ldr	r1, [r7, #8]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 fbc4 	bl	80082dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b62:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b72:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	021a      	lsls	r2, r3, #8
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	430a      	orrs	r2, r1
 8007b86:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007b88:	e002      	b.n	8007b90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3718      	adds	r7, #24
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop

08007ba4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d101      	bne.n	8007bc0 <HAL_TIM_ConfigClockSource+0x1c>
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	e0b4      	b.n	8007d2a <HAL_TIM_ConfigClockSource+0x186>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	4b56      	ldr	r3, [pc, #344]	@ (8007d34 <HAL_TIM_ConfigClockSource+0x190>)
 8007bdc:	4013      	ands	r3, r2
 8007bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007be6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bf8:	d03e      	beq.n	8007c78 <HAL_TIM_ConfigClockSource+0xd4>
 8007bfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bfe:	f200 8087 	bhi.w	8007d10 <HAL_TIM_ConfigClockSource+0x16c>
 8007c02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c06:	f000 8086 	beq.w	8007d16 <HAL_TIM_ConfigClockSource+0x172>
 8007c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c0e:	d87f      	bhi.n	8007d10 <HAL_TIM_ConfigClockSource+0x16c>
 8007c10:	2b70      	cmp	r3, #112	@ 0x70
 8007c12:	d01a      	beq.n	8007c4a <HAL_TIM_ConfigClockSource+0xa6>
 8007c14:	2b70      	cmp	r3, #112	@ 0x70
 8007c16:	d87b      	bhi.n	8007d10 <HAL_TIM_ConfigClockSource+0x16c>
 8007c18:	2b60      	cmp	r3, #96	@ 0x60
 8007c1a:	d050      	beq.n	8007cbe <HAL_TIM_ConfigClockSource+0x11a>
 8007c1c:	2b60      	cmp	r3, #96	@ 0x60
 8007c1e:	d877      	bhi.n	8007d10 <HAL_TIM_ConfigClockSource+0x16c>
 8007c20:	2b50      	cmp	r3, #80	@ 0x50
 8007c22:	d03c      	beq.n	8007c9e <HAL_TIM_ConfigClockSource+0xfa>
 8007c24:	2b50      	cmp	r3, #80	@ 0x50
 8007c26:	d873      	bhi.n	8007d10 <HAL_TIM_ConfigClockSource+0x16c>
 8007c28:	2b40      	cmp	r3, #64	@ 0x40
 8007c2a:	d058      	beq.n	8007cde <HAL_TIM_ConfigClockSource+0x13a>
 8007c2c:	2b40      	cmp	r3, #64	@ 0x40
 8007c2e:	d86f      	bhi.n	8007d10 <HAL_TIM_ConfigClockSource+0x16c>
 8007c30:	2b30      	cmp	r3, #48	@ 0x30
 8007c32:	d064      	beq.n	8007cfe <HAL_TIM_ConfigClockSource+0x15a>
 8007c34:	2b30      	cmp	r3, #48	@ 0x30
 8007c36:	d86b      	bhi.n	8007d10 <HAL_TIM_ConfigClockSource+0x16c>
 8007c38:	2b20      	cmp	r3, #32
 8007c3a:	d060      	beq.n	8007cfe <HAL_TIM_ConfigClockSource+0x15a>
 8007c3c:	2b20      	cmp	r3, #32
 8007c3e:	d867      	bhi.n	8007d10 <HAL_TIM_ConfigClockSource+0x16c>
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d05c      	beq.n	8007cfe <HAL_TIM_ConfigClockSource+0x15a>
 8007c44:	2b10      	cmp	r3, #16
 8007c46:	d05a      	beq.n	8007cfe <HAL_TIM_ConfigClockSource+0x15a>
 8007c48:	e062      	b.n	8007d10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c5a:	f000 fc0d 	bl	8008478 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	609a      	str	r2, [r3, #8]
      break;
 8007c76:	e04f      	b.n	8007d18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c88:	f000 fbf6 	bl	8008478 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689a      	ldr	r2, [r3, #8]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c9a:	609a      	str	r2, [r3, #8]
      break;
 8007c9c:	e03c      	b.n	8007d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007caa:	461a      	mov	r2, r3
 8007cac:	f000 fb6a 	bl	8008384 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2150      	movs	r1, #80	@ 0x50
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f000 fbc3 	bl	8008442 <TIM_ITRx_SetConfig>
      break;
 8007cbc:	e02c      	b.n	8007d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cca:	461a      	mov	r2, r3
 8007ccc:	f000 fb89 	bl	80083e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2160      	movs	r1, #96	@ 0x60
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 fbb3 	bl	8008442 <TIM_ITRx_SetConfig>
      break;
 8007cdc:	e01c      	b.n	8007d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cea:	461a      	mov	r2, r3
 8007cec:	f000 fb4a 	bl	8008384 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2140      	movs	r1, #64	@ 0x40
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 fba3 	bl	8008442 <TIM_ITRx_SetConfig>
      break;
 8007cfc:	e00c      	b.n	8007d18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4619      	mov	r1, r3
 8007d08:	4610      	mov	r0, r2
 8007d0a:	f000 fb9a 	bl	8008442 <TIM_ITRx_SetConfig>
      break;
 8007d0e:	e003      	b.n	8007d18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	73fb      	strb	r3, [r7, #15]
      break;
 8007d14:	e000      	b.n	8007d18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007d16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	fffeff88 	.word	0xfffeff88

08007d38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d40:	bf00      	nop
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d68:	bf00      	nop
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a40      	ldr	r2, [pc, #256]	@ (8007e9c <TIM_Base_SetConfig+0x114>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d013      	beq.n	8007dc8 <TIM_Base_SetConfig+0x40>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007da6:	d00f      	beq.n	8007dc8 <TIM_Base_SetConfig+0x40>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a3d      	ldr	r2, [pc, #244]	@ (8007ea0 <TIM_Base_SetConfig+0x118>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d00b      	beq.n	8007dc8 <TIM_Base_SetConfig+0x40>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a3c      	ldr	r2, [pc, #240]	@ (8007ea4 <TIM_Base_SetConfig+0x11c>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d007      	beq.n	8007dc8 <TIM_Base_SetConfig+0x40>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a3b      	ldr	r2, [pc, #236]	@ (8007ea8 <TIM_Base_SetConfig+0x120>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d003      	beq.n	8007dc8 <TIM_Base_SetConfig+0x40>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a3a      	ldr	r2, [pc, #232]	@ (8007eac <TIM_Base_SetConfig+0x124>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d108      	bne.n	8007dda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a2f      	ldr	r2, [pc, #188]	@ (8007e9c <TIM_Base_SetConfig+0x114>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d02b      	beq.n	8007e3a <TIM_Base_SetConfig+0xb2>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007de8:	d027      	beq.n	8007e3a <TIM_Base_SetConfig+0xb2>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a2c      	ldr	r2, [pc, #176]	@ (8007ea0 <TIM_Base_SetConfig+0x118>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d023      	beq.n	8007e3a <TIM_Base_SetConfig+0xb2>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a2b      	ldr	r2, [pc, #172]	@ (8007ea4 <TIM_Base_SetConfig+0x11c>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d01f      	beq.n	8007e3a <TIM_Base_SetConfig+0xb2>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a2a      	ldr	r2, [pc, #168]	@ (8007ea8 <TIM_Base_SetConfig+0x120>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d01b      	beq.n	8007e3a <TIM_Base_SetConfig+0xb2>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a29      	ldr	r2, [pc, #164]	@ (8007eac <TIM_Base_SetConfig+0x124>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d017      	beq.n	8007e3a <TIM_Base_SetConfig+0xb2>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a28      	ldr	r2, [pc, #160]	@ (8007eb0 <TIM_Base_SetConfig+0x128>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d013      	beq.n	8007e3a <TIM_Base_SetConfig+0xb2>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a27      	ldr	r2, [pc, #156]	@ (8007eb4 <TIM_Base_SetConfig+0x12c>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d00f      	beq.n	8007e3a <TIM_Base_SetConfig+0xb2>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a26      	ldr	r2, [pc, #152]	@ (8007eb8 <TIM_Base_SetConfig+0x130>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d00b      	beq.n	8007e3a <TIM_Base_SetConfig+0xb2>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a25      	ldr	r2, [pc, #148]	@ (8007ebc <TIM_Base_SetConfig+0x134>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d007      	beq.n	8007e3a <TIM_Base_SetConfig+0xb2>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a24      	ldr	r2, [pc, #144]	@ (8007ec0 <TIM_Base_SetConfig+0x138>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d003      	beq.n	8007e3a <TIM_Base_SetConfig+0xb2>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a23      	ldr	r2, [pc, #140]	@ (8007ec4 <TIM_Base_SetConfig+0x13c>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d108      	bne.n	8007e4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	689a      	ldr	r2, [r3, #8]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a0a      	ldr	r2, [pc, #40]	@ (8007e9c <TIM_Base_SetConfig+0x114>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d003      	beq.n	8007e80 <TIM_Base_SetConfig+0xf8>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8007eac <TIM_Base_SetConfig+0x124>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d103      	bne.n	8007e88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	691a      	ldr	r2, [r3, #16]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	615a      	str	r2, [r3, #20]
}
 8007e8e:	bf00      	nop
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	40010000 	.word	0x40010000
 8007ea0:	40000400 	.word	0x40000400
 8007ea4:	40000800 	.word	0x40000800
 8007ea8:	40000c00 	.word	0x40000c00
 8007eac:	40010400 	.word	0x40010400
 8007eb0:	40014000 	.word	0x40014000
 8007eb4:	40014400 	.word	0x40014400
 8007eb8:	40014800 	.word	0x40014800
 8007ebc:	40001800 	.word	0x40001800
 8007ec0:	40001c00 	.word	0x40001c00
 8007ec4:	40002000 	.word	0x40002000

08007ec8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	f023 0201 	bic.w	r2, r3, #1
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8007fa0 <TIM_OC1_SetConfig+0xd8>)
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f023 0303 	bic.w	r3, r3, #3
 8007efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	f023 0302 	bic.w	r3, r3, #2
 8007f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	697a      	ldr	r2, [r7, #20]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a21      	ldr	r2, [pc, #132]	@ (8007fa4 <TIM_OC1_SetConfig+0xdc>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d003      	beq.n	8007f2c <TIM_OC1_SetConfig+0x64>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a20      	ldr	r2, [pc, #128]	@ (8007fa8 <TIM_OC1_SetConfig+0xe0>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d10c      	bne.n	8007f46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	f023 0308 	bic.w	r3, r3, #8
 8007f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	f023 0304 	bic.w	r3, r3, #4
 8007f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a16      	ldr	r2, [pc, #88]	@ (8007fa4 <TIM_OC1_SetConfig+0xdc>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d003      	beq.n	8007f56 <TIM_OC1_SetConfig+0x8e>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a15      	ldr	r2, [pc, #84]	@ (8007fa8 <TIM_OC1_SetConfig+0xe0>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d111      	bne.n	8007f7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	685a      	ldr	r2, [r3, #4]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	621a      	str	r2, [r3, #32]
}
 8007f94:	bf00      	nop
 8007f96:	371c      	adds	r7, #28
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	fffeff8f 	.word	0xfffeff8f
 8007fa4:	40010000 	.word	0x40010000
 8007fa8:	40010400 	.word	0x40010400

08007fac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b087      	sub	sp, #28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	f023 0210 	bic.w	r2, r3, #16
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	4b2e      	ldr	r3, [pc, #184]	@ (8008090 <TIM_OC2_SetConfig+0xe4>)
 8007fd8:	4013      	ands	r3, r2
 8007fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	021b      	lsls	r3, r3, #8
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	f023 0320 	bic.w	r3, r3, #32
 8007ff6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	011b      	lsls	r3, r3, #4
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	4313      	orrs	r3, r2
 8008002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a23      	ldr	r2, [pc, #140]	@ (8008094 <TIM_OC2_SetConfig+0xe8>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d003      	beq.n	8008014 <TIM_OC2_SetConfig+0x68>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a22      	ldr	r2, [pc, #136]	@ (8008098 <TIM_OC2_SetConfig+0xec>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d10d      	bne.n	8008030 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800801a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	011b      	lsls	r3, r3, #4
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	4313      	orrs	r3, r2
 8008026:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800802e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a18      	ldr	r2, [pc, #96]	@ (8008094 <TIM_OC2_SetConfig+0xe8>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d003      	beq.n	8008040 <TIM_OC2_SetConfig+0x94>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a17      	ldr	r2, [pc, #92]	@ (8008098 <TIM_OC2_SetConfig+0xec>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d113      	bne.n	8008068 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008046:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800804e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	4313      	orrs	r3, r2
 800805a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	4313      	orrs	r3, r2
 8008066:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	621a      	str	r2, [r3, #32]
}
 8008082:	bf00      	nop
 8008084:	371c      	adds	r7, #28
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	feff8fff 	.word	0xfeff8fff
 8008094:	40010000 	.word	0x40010000
 8008098:	40010400 	.word	0x40010400

0800809c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800809c:	b480      	push	{r7}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	4b2d      	ldr	r3, [pc, #180]	@ (800817c <TIM_OC3_SetConfig+0xe0>)
 80080c8:	4013      	ands	r3, r2
 80080ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f023 0303 	bic.w	r3, r3, #3
 80080d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	4313      	orrs	r3, r2
 80080dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80080e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	021b      	lsls	r3, r3, #8
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a22      	ldr	r2, [pc, #136]	@ (8008180 <TIM_OC3_SetConfig+0xe4>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d003      	beq.n	8008102 <TIM_OC3_SetConfig+0x66>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a21      	ldr	r2, [pc, #132]	@ (8008184 <TIM_OC3_SetConfig+0xe8>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d10d      	bne.n	800811e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008108:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	021b      	lsls	r3, r3, #8
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	4313      	orrs	r3, r2
 8008114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800811c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a17      	ldr	r2, [pc, #92]	@ (8008180 <TIM_OC3_SetConfig+0xe4>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d003      	beq.n	800812e <TIM_OC3_SetConfig+0x92>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a16      	ldr	r2, [pc, #88]	@ (8008184 <TIM_OC3_SetConfig+0xe8>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d113      	bne.n	8008156 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800813c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	011b      	lsls	r3, r3, #4
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	4313      	orrs	r3, r2
 8008148:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	699b      	ldr	r3, [r3, #24]
 800814e:	011b      	lsls	r3, r3, #4
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	4313      	orrs	r3, r2
 8008154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	685a      	ldr	r2, [r3, #4]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	621a      	str	r2, [r3, #32]
}
 8008170:	bf00      	nop
 8008172:	371c      	adds	r7, #28
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr
 800817c:	fffeff8f 	.word	0xfffeff8f
 8008180:	40010000 	.word	0x40010000
 8008184:	40010400 	.word	0x40010400

08008188 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008188:	b480      	push	{r7}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a1b      	ldr	r3, [r3, #32]
 8008196:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	69db      	ldr	r3, [r3, #28]
 80081ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	4b1e      	ldr	r3, [pc, #120]	@ (800822c <TIM_OC4_SetConfig+0xa4>)
 80081b4:	4013      	ands	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	021b      	lsls	r3, r3, #8
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	031b      	lsls	r3, r3, #12
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	4313      	orrs	r3, r2
 80081de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a13      	ldr	r2, [pc, #76]	@ (8008230 <TIM_OC4_SetConfig+0xa8>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d003      	beq.n	80081f0 <TIM_OC4_SetConfig+0x68>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a12      	ldr	r2, [pc, #72]	@ (8008234 <TIM_OC4_SetConfig+0xac>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d109      	bne.n	8008204 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80081f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	695b      	ldr	r3, [r3, #20]
 80081fc:	019b      	lsls	r3, r3, #6
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	4313      	orrs	r3, r2
 8008202:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	685a      	ldr	r2, [r3, #4]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	693a      	ldr	r2, [r7, #16]
 800821c:	621a      	str	r2, [r3, #32]
}
 800821e:	bf00      	nop
 8008220:	371c      	adds	r7, #28
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	feff8fff 	.word	0xfeff8fff
 8008230:	40010000 	.word	0x40010000
 8008234:	40010400 	.word	0x40010400

08008238 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008238:	b480      	push	{r7}
 800823a:	b087      	sub	sp, #28
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800825e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	4b1b      	ldr	r3, [pc, #108]	@ (80082d0 <TIM_OC5_SetConfig+0x98>)
 8008264:	4013      	ands	r3, r2
 8008266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	4313      	orrs	r3, r2
 8008270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008278:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	041b      	lsls	r3, r3, #16
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	4313      	orrs	r3, r2
 8008284:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a12      	ldr	r2, [pc, #72]	@ (80082d4 <TIM_OC5_SetConfig+0x9c>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d003      	beq.n	8008296 <TIM_OC5_SetConfig+0x5e>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a11      	ldr	r2, [pc, #68]	@ (80082d8 <TIM_OC5_SetConfig+0xa0>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d109      	bne.n	80082aa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800829c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	021b      	lsls	r3, r3, #8
 80082a4:	697a      	ldr	r2, [r7, #20]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	685a      	ldr	r2, [r3, #4]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	621a      	str	r2, [r3, #32]
}
 80082c4:	bf00      	nop
 80082c6:	371c      	adds	r7, #28
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	fffeff8f 	.word	0xfffeff8f
 80082d4:	40010000 	.word	0x40010000
 80082d8:	40010400 	.word	0x40010400

080082dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80082dc:	b480      	push	{r7}
 80082de:	b087      	sub	sp, #28
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	4b1c      	ldr	r3, [pc, #112]	@ (8008378 <TIM_OC6_SetConfig+0x9c>)
 8008308:	4013      	ands	r3, r2
 800830a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	021b      	lsls	r3, r3, #8
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	4313      	orrs	r3, r2
 8008316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800831e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	051b      	lsls	r3, r3, #20
 8008326:	693a      	ldr	r2, [r7, #16]
 8008328:	4313      	orrs	r3, r2
 800832a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a13      	ldr	r2, [pc, #76]	@ (800837c <TIM_OC6_SetConfig+0xa0>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d003      	beq.n	800833c <TIM_OC6_SetConfig+0x60>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a12      	ldr	r2, [pc, #72]	@ (8008380 <TIM_OC6_SetConfig+0xa4>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d109      	bne.n	8008350 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008342:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	029b      	lsls	r3, r3, #10
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	4313      	orrs	r3, r2
 800834e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	697a      	ldr	r2, [r7, #20]
 8008354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	693a      	ldr	r2, [r7, #16]
 8008368:	621a      	str	r2, [r3, #32]
}
 800836a:	bf00      	nop
 800836c:	371c      	adds	r7, #28
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	feff8fff 	.word	0xfeff8fff
 800837c:	40010000 	.word	0x40010000
 8008380:	40010400 	.word	0x40010400

08008384 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008384:	b480      	push	{r7}
 8008386:	b087      	sub	sp, #28
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6a1b      	ldr	r3, [r3, #32]
 8008394:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	f023 0201 	bic.w	r2, r3, #1
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80083ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	011b      	lsls	r3, r3, #4
 80083b4:	693a      	ldr	r2, [r7, #16]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	f023 030a 	bic.w	r3, r3, #10
 80083c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083c2:	697a      	ldr	r2, [r7, #20]
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	621a      	str	r2, [r3, #32]
}
 80083d6:	bf00      	nop
 80083d8:	371c      	adds	r7, #28
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b087      	sub	sp, #28
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	60f8      	str	r0, [r7, #12]
 80083ea:	60b9      	str	r1, [r7, #8]
 80083ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	f023 0210 	bic.w	r2, r3, #16
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6a1b      	ldr	r3, [r3, #32]
 8008404:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800840c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	031b      	lsls	r3, r3, #12
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	4313      	orrs	r3, r2
 8008416:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800841e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	011b      	lsls	r3, r3, #4
 8008424:	693a      	ldr	r2, [r7, #16]
 8008426:	4313      	orrs	r3, r2
 8008428:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	693a      	ldr	r2, [r7, #16]
 8008434:	621a      	str	r2, [r3, #32]
}
 8008436:	bf00      	nop
 8008438:	371c      	adds	r7, #28
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008442:	b480      	push	{r7}
 8008444:	b085      	sub	sp, #20
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008458:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4313      	orrs	r3, r2
 8008460:	f043 0307 	orr.w	r3, r3, #7
 8008464:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	609a      	str	r2, [r3, #8]
}
 800846c:	bf00      	nop
 800846e:	3714      	adds	r7, #20
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008478:	b480      	push	{r7}
 800847a:	b087      	sub	sp, #28
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
 8008484:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008492:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	021a      	lsls	r2, r3, #8
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	431a      	orrs	r2, r3
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	4313      	orrs	r3, r2
 80084a0:	697a      	ldr	r2, [r7, #20]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	697a      	ldr	r2, [r7, #20]
 80084aa:	609a      	str	r2, [r3, #8]
}
 80084ac:	bf00      	nop
 80084ae:	371c      	adds	r7, #28
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	f003 031f 	and.w	r3, r3, #31
 80084ca:	2201      	movs	r2, #1
 80084cc:	fa02 f303 	lsl.w	r3, r2, r3
 80084d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6a1a      	ldr	r2, [r3, #32]
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	43db      	mvns	r3, r3
 80084da:	401a      	ands	r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6a1a      	ldr	r2, [r3, #32]
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	f003 031f 	and.w	r3, r3, #31
 80084ea:	6879      	ldr	r1, [r7, #4]
 80084ec:	fa01 f303 	lsl.w	r3, r1, r3
 80084f0:	431a      	orrs	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	621a      	str	r2, [r3, #32]
}
 80084f6:	bf00      	nop
 80084f8:	371c      	adds	r7, #28
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
	...

08008504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008514:	2b01      	cmp	r3, #1
 8008516:	d101      	bne.n	800851c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008518:	2302      	movs	r3, #2
 800851a:	e06d      	b.n	80085f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2202      	movs	r2, #2
 8008528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a30      	ldr	r2, [pc, #192]	@ (8008604 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d004      	beq.n	8008550 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a2f      	ldr	r2, [pc, #188]	@ (8008608 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d108      	bne.n	8008562 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008556:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	4313      	orrs	r3, r2
 8008560:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008568:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	4313      	orrs	r3, r2
 8008572:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a20      	ldr	r2, [pc, #128]	@ (8008604 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d022      	beq.n	80085cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800858e:	d01d      	beq.n	80085cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a1d      	ldr	r2, [pc, #116]	@ (800860c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d018      	beq.n	80085cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a1c      	ldr	r2, [pc, #112]	@ (8008610 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d013      	beq.n	80085cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a1a      	ldr	r2, [pc, #104]	@ (8008614 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d00e      	beq.n	80085cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a15      	ldr	r2, [pc, #84]	@ (8008608 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d009      	beq.n	80085cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a16      	ldr	r2, [pc, #88]	@ (8008618 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d004      	beq.n	80085cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a15      	ldr	r2, [pc, #84]	@ (800861c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d10c      	bne.n	80085e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	4313      	orrs	r3, r2
 80085dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr
 8008604:	40010000 	.word	0x40010000
 8008608:	40010400 	.word	0x40010400
 800860c:	40000400 	.word	0x40000400
 8008610:	40000800 	.word	0x40000800
 8008614:	40000c00 	.word	0x40000c00
 8008618:	40014000 	.word	0x40014000
 800861c:	40001800 	.word	0x40001800

08008620 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008650:	bf00      	nop
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e040      	b.n	80086f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008672:	2b00      	cmp	r3, #0
 8008674:	d106      	bne.n	8008684 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7fb fec2 	bl	8004408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2224      	movs	r2, #36	@ 0x24
 8008688:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f022 0201 	bic.w	r2, r2, #1
 8008698:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f8b0 	bl	8008800 <UART_SetConfig>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d101      	bne.n	80086aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e022      	b.n	80086f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d002      	beq.n	80086b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fb08 	bl	8008cc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	685a      	ldr	r2, [r3, #4]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80086c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	689a      	ldr	r2, [r3, #8]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80086d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f042 0201 	orr.w	r2, r2, #1
 80086e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fb8f 	bl	8008e0c <UART_CheckIdleState>
 80086ee:	4603      	mov	r3, r0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b08a      	sub	sp, #40	@ 0x28
 80086fc:	af02      	add	r7, sp, #8
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	603b      	str	r3, [r7, #0]
 8008704:	4613      	mov	r3, r2
 8008706:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800870c:	2b20      	cmp	r3, #32
 800870e:	d171      	bne.n	80087f4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d002      	beq.n	800871c <HAL_UART_Transmit+0x24>
 8008716:	88fb      	ldrh	r3, [r7, #6]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d101      	bne.n	8008720 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e06a      	b.n	80087f6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2221      	movs	r2, #33	@ 0x21
 800872c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800872e:	f7fb ff45 	bl	80045bc <HAL_GetTick>
 8008732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	88fa      	ldrh	r2, [r7, #6]
 8008738:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	88fa      	ldrh	r2, [r7, #6]
 8008740:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800874c:	d108      	bne.n	8008760 <HAL_UART_Transmit+0x68>
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d104      	bne.n	8008760 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008756:	2300      	movs	r3, #0
 8008758:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	61bb      	str	r3, [r7, #24]
 800875e:	e003      	b.n	8008768 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008764:	2300      	movs	r3, #0
 8008766:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008768:	e02c      	b.n	80087c4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2200      	movs	r2, #0
 8008772:	2180      	movs	r1, #128	@ 0x80
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 fb80 	bl	8008e7a <UART_WaitOnFlagUntilTimeout>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008780:	2303      	movs	r3, #3
 8008782:	e038      	b.n	80087f6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10b      	bne.n	80087a2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	881b      	ldrh	r3, [r3, #0]
 800878e:	461a      	mov	r2, r3
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008798:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	3302      	adds	r3, #2
 800879e:	61bb      	str	r3, [r7, #24]
 80087a0:	e007      	b.n	80087b2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	781a      	ldrb	r2, [r3, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	3301      	adds	r3, #1
 80087b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	3b01      	subs	r3, #1
 80087bc:	b29a      	uxth	r2, r3
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1cc      	bne.n	800876a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2200      	movs	r2, #0
 80087d8:	2140      	movs	r1, #64	@ 0x40
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f000 fb4d 	bl	8008e7a <UART_WaitOnFlagUntilTimeout>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e005      	b.n	80087f6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2220      	movs	r2, #32
 80087ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	e000      	b.n	80087f6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80087f4:	2302      	movs	r3, #2
  }
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3720      	adds	r7, #32
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
	...

08008800 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b088      	sub	sp, #32
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	689a      	ldr	r2, [r3, #8]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	431a      	orrs	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	431a      	orrs	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	69db      	ldr	r3, [r3, #28]
 8008820:	4313      	orrs	r3, r2
 8008822:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	4ba6      	ldr	r3, [pc, #664]	@ (8008ac4 <UART_SetConfig+0x2c4>)
 800882c:	4013      	ands	r3, r2
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	6812      	ldr	r2, [r2, #0]
 8008832:	6979      	ldr	r1, [r7, #20]
 8008834:	430b      	orrs	r3, r1
 8008836:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	68da      	ldr	r2, [r3, #12]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	430a      	orrs	r2, r1
 800884c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a1b      	ldr	r3, [r3, #32]
 8008858:	697a      	ldr	r2, [r7, #20]
 800885a:	4313      	orrs	r3, r2
 800885c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	697a      	ldr	r2, [r7, #20]
 800886e:	430a      	orrs	r2, r1
 8008870:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a94      	ldr	r2, [pc, #592]	@ (8008ac8 <UART_SetConfig+0x2c8>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d120      	bne.n	80088be <UART_SetConfig+0xbe>
 800887c:	4b93      	ldr	r3, [pc, #588]	@ (8008acc <UART_SetConfig+0x2cc>)
 800887e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008882:	f003 0303 	and.w	r3, r3, #3
 8008886:	2b03      	cmp	r3, #3
 8008888:	d816      	bhi.n	80088b8 <UART_SetConfig+0xb8>
 800888a:	a201      	add	r2, pc, #4	@ (adr r2, 8008890 <UART_SetConfig+0x90>)
 800888c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008890:	080088a1 	.word	0x080088a1
 8008894:	080088ad 	.word	0x080088ad
 8008898:	080088a7 	.word	0x080088a7
 800889c:	080088b3 	.word	0x080088b3
 80088a0:	2301      	movs	r3, #1
 80088a2:	77fb      	strb	r3, [r7, #31]
 80088a4:	e150      	b.n	8008b48 <UART_SetConfig+0x348>
 80088a6:	2302      	movs	r3, #2
 80088a8:	77fb      	strb	r3, [r7, #31]
 80088aa:	e14d      	b.n	8008b48 <UART_SetConfig+0x348>
 80088ac:	2304      	movs	r3, #4
 80088ae:	77fb      	strb	r3, [r7, #31]
 80088b0:	e14a      	b.n	8008b48 <UART_SetConfig+0x348>
 80088b2:	2308      	movs	r3, #8
 80088b4:	77fb      	strb	r3, [r7, #31]
 80088b6:	e147      	b.n	8008b48 <UART_SetConfig+0x348>
 80088b8:	2310      	movs	r3, #16
 80088ba:	77fb      	strb	r3, [r7, #31]
 80088bc:	e144      	b.n	8008b48 <UART_SetConfig+0x348>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a83      	ldr	r2, [pc, #524]	@ (8008ad0 <UART_SetConfig+0x2d0>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d132      	bne.n	800892e <UART_SetConfig+0x12e>
 80088c8:	4b80      	ldr	r3, [pc, #512]	@ (8008acc <UART_SetConfig+0x2cc>)
 80088ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088ce:	f003 030c 	and.w	r3, r3, #12
 80088d2:	2b0c      	cmp	r3, #12
 80088d4:	d828      	bhi.n	8008928 <UART_SetConfig+0x128>
 80088d6:	a201      	add	r2, pc, #4	@ (adr r2, 80088dc <UART_SetConfig+0xdc>)
 80088d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088dc:	08008911 	.word	0x08008911
 80088e0:	08008929 	.word	0x08008929
 80088e4:	08008929 	.word	0x08008929
 80088e8:	08008929 	.word	0x08008929
 80088ec:	0800891d 	.word	0x0800891d
 80088f0:	08008929 	.word	0x08008929
 80088f4:	08008929 	.word	0x08008929
 80088f8:	08008929 	.word	0x08008929
 80088fc:	08008917 	.word	0x08008917
 8008900:	08008929 	.word	0x08008929
 8008904:	08008929 	.word	0x08008929
 8008908:	08008929 	.word	0x08008929
 800890c:	08008923 	.word	0x08008923
 8008910:	2300      	movs	r3, #0
 8008912:	77fb      	strb	r3, [r7, #31]
 8008914:	e118      	b.n	8008b48 <UART_SetConfig+0x348>
 8008916:	2302      	movs	r3, #2
 8008918:	77fb      	strb	r3, [r7, #31]
 800891a:	e115      	b.n	8008b48 <UART_SetConfig+0x348>
 800891c:	2304      	movs	r3, #4
 800891e:	77fb      	strb	r3, [r7, #31]
 8008920:	e112      	b.n	8008b48 <UART_SetConfig+0x348>
 8008922:	2308      	movs	r3, #8
 8008924:	77fb      	strb	r3, [r7, #31]
 8008926:	e10f      	b.n	8008b48 <UART_SetConfig+0x348>
 8008928:	2310      	movs	r3, #16
 800892a:	77fb      	strb	r3, [r7, #31]
 800892c:	e10c      	b.n	8008b48 <UART_SetConfig+0x348>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a68      	ldr	r2, [pc, #416]	@ (8008ad4 <UART_SetConfig+0x2d4>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d120      	bne.n	800897a <UART_SetConfig+0x17a>
 8008938:	4b64      	ldr	r3, [pc, #400]	@ (8008acc <UART_SetConfig+0x2cc>)
 800893a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800893e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008942:	2b30      	cmp	r3, #48	@ 0x30
 8008944:	d013      	beq.n	800896e <UART_SetConfig+0x16e>
 8008946:	2b30      	cmp	r3, #48	@ 0x30
 8008948:	d814      	bhi.n	8008974 <UART_SetConfig+0x174>
 800894a:	2b20      	cmp	r3, #32
 800894c:	d009      	beq.n	8008962 <UART_SetConfig+0x162>
 800894e:	2b20      	cmp	r3, #32
 8008950:	d810      	bhi.n	8008974 <UART_SetConfig+0x174>
 8008952:	2b00      	cmp	r3, #0
 8008954:	d002      	beq.n	800895c <UART_SetConfig+0x15c>
 8008956:	2b10      	cmp	r3, #16
 8008958:	d006      	beq.n	8008968 <UART_SetConfig+0x168>
 800895a:	e00b      	b.n	8008974 <UART_SetConfig+0x174>
 800895c:	2300      	movs	r3, #0
 800895e:	77fb      	strb	r3, [r7, #31]
 8008960:	e0f2      	b.n	8008b48 <UART_SetConfig+0x348>
 8008962:	2302      	movs	r3, #2
 8008964:	77fb      	strb	r3, [r7, #31]
 8008966:	e0ef      	b.n	8008b48 <UART_SetConfig+0x348>
 8008968:	2304      	movs	r3, #4
 800896a:	77fb      	strb	r3, [r7, #31]
 800896c:	e0ec      	b.n	8008b48 <UART_SetConfig+0x348>
 800896e:	2308      	movs	r3, #8
 8008970:	77fb      	strb	r3, [r7, #31]
 8008972:	e0e9      	b.n	8008b48 <UART_SetConfig+0x348>
 8008974:	2310      	movs	r3, #16
 8008976:	77fb      	strb	r3, [r7, #31]
 8008978:	e0e6      	b.n	8008b48 <UART_SetConfig+0x348>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a56      	ldr	r2, [pc, #344]	@ (8008ad8 <UART_SetConfig+0x2d8>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d120      	bne.n	80089c6 <UART_SetConfig+0x1c6>
 8008984:	4b51      	ldr	r3, [pc, #324]	@ (8008acc <UART_SetConfig+0x2cc>)
 8008986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800898a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800898e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008990:	d013      	beq.n	80089ba <UART_SetConfig+0x1ba>
 8008992:	2bc0      	cmp	r3, #192	@ 0xc0
 8008994:	d814      	bhi.n	80089c0 <UART_SetConfig+0x1c0>
 8008996:	2b80      	cmp	r3, #128	@ 0x80
 8008998:	d009      	beq.n	80089ae <UART_SetConfig+0x1ae>
 800899a:	2b80      	cmp	r3, #128	@ 0x80
 800899c:	d810      	bhi.n	80089c0 <UART_SetConfig+0x1c0>
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d002      	beq.n	80089a8 <UART_SetConfig+0x1a8>
 80089a2:	2b40      	cmp	r3, #64	@ 0x40
 80089a4:	d006      	beq.n	80089b4 <UART_SetConfig+0x1b4>
 80089a6:	e00b      	b.n	80089c0 <UART_SetConfig+0x1c0>
 80089a8:	2300      	movs	r3, #0
 80089aa:	77fb      	strb	r3, [r7, #31]
 80089ac:	e0cc      	b.n	8008b48 <UART_SetConfig+0x348>
 80089ae:	2302      	movs	r3, #2
 80089b0:	77fb      	strb	r3, [r7, #31]
 80089b2:	e0c9      	b.n	8008b48 <UART_SetConfig+0x348>
 80089b4:	2304      	movs	r3, #4
 80089b6:	77fb      	strb	r3, [r7, #31]
 80089b8:	e0c6      	b.n	8008b48 <UART_SetConfig+0x348>
 80089ba:	2308      	movs	r3, #8
 80089bc:	77fb      	strb	r3, [r7, #31]
 80089be:	e0c3      	b.n	8008b48 <UART_SetConfig+0x348>
 80089c0:	2310      	movs	r3, #16
 80089c2:	77fb      	strb	r3, [r7, #31]
 80089c4:	e0c0      	b.n	8008b48 <UART_SetConfig+0x348>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a44      	ldr	r2, [pc, #272]	@ (8008adc <UART_SetConfig+0x2dc>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d125      	bne.n	8008a1c <UART_SetConfig+0x21c>
 80089d0:	4b3e      	ldr	r3, [pc, #248]	@ (8008acc <UART_SetConfig+0x2cc>)
 80089d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089de:	d017      	beq.n	8008a10 <UART_SetConfig+0x210>
 80089e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089e4:	d817      	bhi.n	8008a16 <UART_SetConfig+0x216>
 80089e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089ea:	d00b      	beq.n	8008a04 <UART_SetConfig+0x204>
 80089ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089f0:	d811      	bhi.n	8008a16 <UART_SetConfig+0x216>
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d003      	beq.n	80089fe <UART_SetConfig+0x1fe>
 80089f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089fa:	d006      	beq.n	8008a0a <UART_SetConfig+0x20a>
 80089fc:	e00b      	b.n	8008a16 <UART_SetConfig+0x216>
 80089fe:	2300      	movs	r3, #0
 8008a00:	77fb      	strb	r3, [r7, #31]
 8008a02:	e0a1      	b.n	8008b48 <UART_SetConfig+0x348>
 8008a04:	2302      	movs	r3, #2
 8008a06:	77fb      	strb	r3, [r7, #31]
 8008a08:	e09e      	b.n	8008b48 <UART_SetConfig+0x348>
 8008a0a:	2304      	movs	r3, #4
 8008a0c:	77fb      	strb	r3, [r7, #31]
 8008a0e:	e09b      	b.n	8008b48 <UART_SetConfig+0x348>
 8008a10:	2308      	movs	r3, #8
 8008a12:	77fb      	strb	r3, [r7, #31]
 8008a14:	e098      	b.n	8008b48 <UART_SetConfig+0x348>
 8008a16:	2310      	movs	r3, #16
 8008a18:	77fb      	strb	r3, [r7, #31]
 8008a1a:	e095      	b.n	8008b48 <UART_SetConfig+0x348>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a2f      	ldr	r2, [pc, #188]	@ (8008ae0 <UART_SetConfig+0x2e0>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d125      	bne.n	8008a72 <UART_SetConfig+0x272>
 8008a26:	4b29      	ldr	r3, [pc, #164]	@ (8008acc <UART_SetConfig+0x2cc>)
 8008a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008a30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a34:	d017      	beq.n	8008a66 <UART_SetConfig+0x266>
 8008a36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a3a:	d817      	bhi.n	8008a6c <UART_SetConfig+0x26c>
 8008a3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a40:	d00b      	beq.n	8008a5a <UART_SetConfig+0x25a>
 8008a42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a46:	d811      	bhi.n	8008a6c <UART_SetConfig+0x26c>
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d003      	beq.n	8008a54 <UART_SetConfig+0x254>
 8008a4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a50:	d006      	beq.n	8008a60 <UART_SetConfig+0x260>
 8008a52:	e00b      	b.n	8008a6c <UART_SetConfig+0x26c>
 8008a54:	2301      	movs	r3, #1
 8008a56:	77fb      	strb	r3, [r7, #31]
 8008a58:	e076      	b.n	8008b48 <UART_SetConfig+0x348>
 8008a5a:	2302      	movs	r3, #2
 8008a5c:	77fb      	strb	r3, [r7, #31]
 8008a5e:	e073      	b.n	8008b48 <UART_SetConfig+0x348>
 8008a60:	2304      	movs	r3, #4
 8008a62:	77fb      	strb	r3, [r7, #31]
 8008a64:	e070      	b.n	8008b48 <UART_SetConfig+0x348>
 8008a66:	2308      	movs	r3, #8
 8008a68:	77fb      	strb	r3, [r7, #31]
 8008a6a:	e06d      	b.n	8008b48 <UART_SetConfig+0x348>
 8008a6c:	2310      	movs	r3, #16
 8008a6e:	77fb      	strb	r3, [r7, #31]
 8008a70:	e06a      	b.n	8008b48 <UART_SetConfig+0x348>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a1b      	ldr	r2, [pc, #108]	@ (8008ae4 <UART_SetConfig+0x2e4>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d138      	bne.n	8008aee <UART_SetConfig+0x2ee>
 8008a7c:	4b13      	ldr	r3, [pc, #76]	@ (8008acc <UART_SetConfig+0x2cc>)
 8008a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a82:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008a86:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a8a:	d017      	beq.n	8008abc <UART_SetConfig+0x2bc>
 8008a8c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a90:	d82a      	bhi.n	8008ae8 <UART_SetConfig+0x2e8>
 8008a92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a96:	d00b      	beq.n	8008ab0 <UART_SetConfig+0x2b0>
 8008a98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a9c:	d824      	bhi.n	8008ae8 <UART_SetConfig+0x2e8>
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d003      	beq.n	8008aaa <UART_SetConfig+0x2aa>
 8008aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008aa6:	d006      	beq.n	8008ab6 <UART_SetConfig+0x2b6>
 8008aa8:	e01e      	b.n	8008ae8 <UART_SetConfig+0x2e8>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	77fb      	strb	r3, [r7, #31]
 8008aae:	e04b      	b.n	8008b48 <UART_SetConfig+0x348>
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	77fb      	strb	r3, [r7, #31]
 8008ab4:	e048      	b.n	8008b48 <UART_SetConfig+0x348>
 8008ab6:	2304      	movs	r3, #4
 8008ab8:	77fb      	strb	r3, [r7, #31]
 8008aba:	e045      	b.n	8008b48 <UART_SetConfig+0x348>
 8008abc:	2308      	movs	r3, #8
 8008abe:	77fb      	strb	r3, [r7, #31]
 8008ac0:	e042      	b.n	8008b48 <UART_SetConfig+0x348>
 8008ac2:	bf00      	nop
 8008ac4:	efff69f3 	.word	0xefff69f3
 8008ac8:	40011000 	.word	0x40011000
 8008acc:	40023800 	.word	0x40023800
 8008ad0:	40004400 	.word	0x40004400
 8008ad4:	40004800 	.word	0x40004800
 8008ad8:	40004c00 	.word	0x40004c00
 8008adc:	40005000 	.word	0x40005000
 8008ae0:	40011400 	.word	0x40011400
 8008ae4:	40007800 	.word	0x40007800
 8008ae8:	2310      	movs	r3, #16
 8008aea:	77fb      	strb	r3, [r7, #31]
 8008aec:	e02c      	b.n	8008b48 <UART_SetConfig+0x348>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a72      	ldr	r2, [pc, #456]	@ (8008cbc <UART_SetConfig+0x4bc>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d125      	bne.n	8008b44 <UART_SetConfig+0x344>
 8008af8:	4b71      	ldr	r3, [pc, #452]	@ (8008cc0 <UART_SetConfig+0x4c0>)
 8008afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008afe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008b02:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008b06:	d017      	beq.n	8008b38 <UART_SetConfig+0x338>
 8008b08:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008b0c:	d817      	bhi.n	8008b3e <UART_SetConfig+0x33e>
 8008b0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b12:	d00b      	beq.n	8008b2c <UART_SetConfig+0x32c>
 8008b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b18:	d811      	bhi.n	8008b3e <UART_SetConfig+0x33e>
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <UART_SetConfig+0x326>
 8008b1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b22:	d006      	beq.n	8008b32 <UART_SetConfig+0x332>
 8008b24:	e00b      	b.n	8008b3e <UART_SetConfig+0x33e>
 8008b26:	2300      	movs	r3, #0
 8008b28:	77fb      	strb	r3, [r7, #31]
 8008b2a:	e00d      	b.n	8008b48 <UART_SetConfig+0x348>
 8008b2c:	2302      	movs	r3, #2
 8008b2e:	77fb      	strb	r3, [r7, #31]
 8008b30:	e00a      	b.n	8008b48 <UART_SetConfig+0x348>
 8008b32:	2304      	movs	r3, #4
 8008b34:	77fb      	strb	r3, [r7, #31]
 8008b36:	e007      	b.n	8008b48 <UART_SetConfig+0x348>
 8008b38:	2308      	movs	r3, #8
 8008b3a:	77fb      	strb	r3, [r7, #31]
 8008b3c:	e004      	b.n	8008b48 <UART_SetConfig+0x348>
 8008b3e:	2310      	movs	r3, #16
 8008b40:	77fb      	strb	r3, [r7, #31]
 8008b42:	e001      	b.n	8008b48 <UART_SetConfig+0x348>
 8008b44:	2310      	movs	r3, #16
 8008b46:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	69db      	ldr	r3, [r3, #28]
 8008b4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b50:	d15b      	bne.n	8008c0a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008b52:	7ffb      	ldrb	r3, [r7, #31]
 8008b54:	2b08      	cmp	r3, #8
 8008b56:	d828      	bhi.n	8008baa <UART_SetConfig+0x3aa>
 8008b58:	a201      	add	r2, pc, #4	@ (adr r2, 8008b60 <UART_SetConfig+0x360>)
 8008b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5e:	bf00      	nop
 8008b60:	08008b85 	.word	0x08008b85
 8008b64:	08008b8d 	.word	0x08008b8d
 8008b68:	08008b95 	.word	0x08008b95
 8008b6c:	08008bab 	.word	0x08008bab
 8008b70:	08008b9b 	.word	0x08008b9b
 8008b74:	08008bab 	.word	0x08008bab
 8008b78:	08008bab 	.word	0x08008bab
 8008b7c:	08008bab 	.word	0x08008bab
 8008b80:	08008ba3 	.word	0x08008ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b84:	f7fc fe74 	bl	8005870 <HAL_RCC_GetPCLK1Freq>
 8008b88:	61b8      	str	r0, [r7, #24]
        break;
 8008b8a:	e013      	b.n	8008bb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b8c:	f7fc fe84 	bl	8005898 <HAL_RCC_GetPCLK2Freq>
 8008b90:	61b8      	str	r0, [r7, #24]
        break;
 8008b92:	e00f      	b.n	8008bb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b94:	4b4b      	ldr	r3, [pc, #300]	@ (8008cc4 <UART_SetConfig+0x4c4>)
 8008b96:	61bb      	str	r3, [r7, #24]
        break;
 8008b98:	e00c      	b.n	8008bb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b9a:	f7fc fd57 	bl	800564c <HAL_RCC_GetSysClockFreq>
 8008b9e:	61b8      	str	r0, [r7, #24]
        break;
 8008ba0:	e008      	b.n	8008bb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ba6:	61bb      	str	r3, [r7, #24]
        break;
 8008ba8:	e004      	b.n	8008bb4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008baa:	2300      	movs	r3, #0
 8008bac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	77bb      	strb	r3, [r7, #30]
        break;
 8008bb2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d074      	beq.n	8008ca4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	005a      	lsls	r2, r3, #1
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	085b      	lsrs	r3, r3, #1
 8008bc4:	441a      	add	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	2b0f      	cmp	r3, #15
 8008bd4:	d916      	bls.n	8008c04 <UART_SetConfig+0x404>
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bdc:	d212      	bcs.n	8008c04 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	f023 030f 	bic.w	r3, r3, #15
 8008be6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	085b      	lsrs	r3, r3, #1
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	f003 0307 	and.w	r3, r3, #7
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	89fb      	ldrh	r3, [r7, #14]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	89fa      	ldrh	r2, [r7, #14]
 8008c00:	60da      	str	r2, [r3, #12]
 8008c02:	e04f      	b.n	8008ca4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	77bb      	strb	r3, [r7, #30]
 8008c08:	e04c      	b.n	8008ca4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c0a:	7ffb      	ldrb	r3, [r7, #31]
 8008c0c:	2b08      	cmp	r3, #8
 8008c0e:	d828      	bhi.n	8008c62 <UART_SetConfig+0x462>
 8008c10:	a201      	add	r2, pc, #4	@ (adr r2, 8008c18 <UART_SetConfig+0x418>)
 8008c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c16:	bf00      	nop
 8008c18:	08008c3d 	.word	0x08008c3d
 8008c1c:	08008c45 	.word	0x08008c45
 8008c20:	08008c4d 	.word	0x08008c4d
 8008c24:	08008c63 	.word	0x08008c63
 8008c28:	08008c53 	.word	0x08008c53
 8008c2c:	08008c63 	.word	0x08008c63
 8008c30:	08008c63 	.word	0x08008c63
 8008c34:	08008c63 	.word	0x08008c63
 8008c38:	08008c5b 	.word	0x08008c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c3c:	f7fc fe18 	bl	8005870 <HAL_RCC_GetPCLK1Freq>
 8008c40:	61b8      	str	r0, [r7, #24]
        break;
 8008c42:	e013      	b.n	8008c6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c44:	f7fc fe28 	bl	8005898 <HAL_RCC_GetPCLK2Freq>
 8008c48:	61b8      	str	r0, [r7, #24]
        break;
 8008c4a:	e00f      	b.n	8008c6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8008cc4 <UART_SetConfig+0x4c4>)
 8008c4e:	61bb      	str	r3, [r7, #24]
        break;
 8008c50:	e00c      	b.n	8008c6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c52:	f7fc fcfb 	bl	800564c <HAL_RCC_GetSysClockFreq>
 8008c56:	61b8      	str	r0, [r7, #24]
        break;
 8008c58:	e008      	b.n	8008c6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c5e:	61bb      	str	r3, [r7, #24]
        break;
 8008c60:	e004      	b.n	8008c6c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008c62:	2300      	movs	r3, #0
 8008c64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	77bb      	strb	r3, [r7, #30]
        break;
 8008c6a:	bf00      	nop
    }

    if (pclk != 0U)
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d018      	beq.n	8008ca4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	085a      	lsrs	r2, r3, #1
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	441a      	add	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	2b0f      	cmp	r3, #15
 8008c8a:	d909      	bls.n	8008ca0 <UART_SetConfig+0x4a0>
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c92:	d205      	bcs.n	8008ca0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	60da      	str	r2, [r3, #12]
 8008c9e:	e001      	b.n	8008ca4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008cb0:	7fbb      	ldrb	r3, [r7, #30]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3720      	adds	r7, #32
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	40007c00 	.word	0x40007c00
 8008cc0:	40023800 	.word	0x40023800
 8008cc4:	00f42400 	.word	0x00f42400

08008cc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cd4:	f003 0301 	and.w	r3, r3, #1
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00a      	beq.n	8008cf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf6:	f003 0302 	and.w	r3, r3, #2
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00a      	beq.n	8008d14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	430a      	orrs	r2, r1
 8008d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d18:	f003 0304 	and.w	r3, r3, #4
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00a      	beq.n	8008d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	430a      	orrs	r2, r1
 8008d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d3a:	f003 0308 	and.w	r3, r3, #8
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00a      	beq.n	8008d58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	430a      	orrs	r2, r1
 8008d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d5c:	f003 0310 	and.w	r3, r3, #16
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00a      	beq.n	8008d7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	430a      	orrs	r2, r1
 8008d78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d7e:	f003 0320 	and.w	r3, r3, #32
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00a      	beq.n	8008d9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	430a      	orrs	r2, r1
 8008d9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d01a      	beq.n	8008dde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dc6:	d10a      	bne.n	8008dde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	430a      	orrs	r2, r1
 8008ddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00a      	beq.n	8008e00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	430a      	orrs	r2, r1
 8008dfe:	605a      	str	r2, [r3, #4]
  }
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b086      	sub	sp, #24
 8008e10:	af02      	add	r7, sp, #8
 8008e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e1c:	f7fb fbce 	bl	80045bc <HAL_GetTick>
 8008e20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f003 0308 	and.w	r3, r3, #8
 8008e2c:	2b08      	cmp	r3, #8
 8008e2e:	d10e      	bne.n	8008e4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f81b 	bl	8008e7a <UART_WaitOnFlagUntilTimeout>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d001      	beq.n	8008e4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e011      	b.n	8008e72 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2220      	movs	r2, #32
 8008e52:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2220      	movs	r2, #32
 8008e58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b09c      	sub	sp, #112	@ 0x70
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	60f8      	str	r0, [r7, #12]
 8008e82:	60b9      	str	r1, [r7, #8]
 8008e84:	603b      	str	r3, [r7, #0]
 8008e86:	4613      	mov	r3, r2
 8008e88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e8a:	e0a7      	b.n	8008fdc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e92:	f000 80a3 	beq.w	8008fdc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e96:	f7fb fb91 	bl	80045bc <HAL_GetTick>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	1ad3      	subs	r3, r2, r3
 8008ea0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d302      	bcc.n	8008eac <UART_WaitOnFlagUntilTimeout+0x32>
 8008ea6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d13f      	bne.n	8008f2c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008eb4:	e853 3f00 	ldrex	r3, [r3]
 8008eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008eba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ebc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008ec0:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008eca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ecc:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ece:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008ed0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008ed2:	e841 2300 	strex	r3, r2, [r1]
 8008ed6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1e6      	bne.n	8008eac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	3308      	adds	r3, #8
 8008ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ee8:	e853 3f00 	ldrex	r3, [r3]
 8008eec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef0:	f023 0301 	bic.w	r3, r3, #1
 8008ef4:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	3308      	adds	r3, #8
 8008efc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008efe:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008f00:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f02:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008f04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f06:	e841 2300 	strex	r3, r2, [r1]
 8008f0a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008f0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1e5      	bne.n	8008ede <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2220      	movs	r2, #32
 8008f16:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2220      	movs	r2, #32
 8008f1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	e068      	b.n	8008ffe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 0304 	and.w	r3, r3, #4
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d050      	beq.n	8008fdc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	69db      	ldr	r3, [r3, #28]
 8008f40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f48:	d148      	bne.n	8008fdc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008f52:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f5c:	e853 3f00 	ldrex	r3, [r3]
 8008f60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f64:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008f68:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f74:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f7a:	e841 2300 	strex	r3, r2, [r1]
 8008f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1e6      	bne.n	8008f54 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	3308      	adds	r3, #8
 8008f8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	e853 3f00 	ldrex	r3, [r3]
 8008f94:	613b      	str	r3, [r7, #16]
   return(result);
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	f023 0301 	bic.w	r3, r3, #1
 8008f9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	3308      	adds	r3, #8
 8008fa4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008fa6:	623a      	str	r2, [r7, #32]
 8008fa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008faa:	69f9      	ldr	r1, [r7, #28]
 8008fac:	6a3a      	ldr	r2, [r7, #32]
 8008fae:	e841 2300 	strex	r3, r2, [r1]
 8008fb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1e5      	bne.n	8008f86 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2220      	movs	r2, #32
 8008fbe:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2220      	movs	r2, #32
 8008fc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2220      	movs	r2, #32
 8008fcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e010      	b.n	8008ffe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	69da      	ldr	r2, [r3, #28]
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	68ba      	ldr	r2, [r7, #8]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	bf0c      	ite	eq
 8008fec:	2301      	moveq	r3, #1
 8008fee:	2300      	movne	r3, #0
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	79fb      	ldrb	r3, [r7, #7]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	f43f af48 	beq.w	8008e8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3770      	adds	r7, #112	@ 0x70
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <atoi>:
 8009006:	220a      	movs	r2, #10
 8009008:	2100      	movs	r1, #0
 800900a:	f000 b87b 	b.w	8009104 <strtol>
	...

08009010 <_strtol_l.constprop.0>:
 8009010:	2b24      	cmp	r3, #36	@ 0x24
 8009012:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009016:	4686      	mov	lr, r0
 8009018:	4690      	mov	r8, r2
 800901a:	d801      	bhi.n	8009020 <_strtol_l.constprop.0+0x10>
 800901c:	2b01      	cmp	r3, #1
 800901e:	d106      	bne.n	800902e <_strtol_l.constprop.0+0x1e>
 8009020:	f000 f8b6 	bl	8009190 <__errno>
 8009024:	2316      	movs	r3, #22
 8009026:	6003      	str	r3, [r0, #0]
 8009028:	2000      	movs	r0, #0
 800902a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800902e:	4834      	ldr	r0, [pc, #208]	@ (8009100 <_strtol_l.constprop.0+0xf0>)
 8009030:	460d      	mov	r5, r1
 8009032:	462a      	mov	r2, r5
 8009034:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009038:	5d06      	ldrb	r6, [r0, r4]
 800903a:	f016 0608 	ands.w	r6, r6, #8
 800903e:	d1f8      	bne.n	8009032 <_strtol_l.constprop.0+0x22>
 8009040:	2c2d      	cmp	r4, #45	@ 0x2d
 8009042:	d12d      	bne.n	80090a0 <_strtol_l.constprop.0+0x90>
 8009044:	782c      	ldrb	r4, [r5, #0]
 8009046:	2601      	movs	r6, #1
 8009048:	1c95      	adds	r5, r2, #2
 800904a:	f033 0210 	bics.w	r2, r3, #16
 800904e:	d109      	bne.n	8009064 <_strtol_l.constprop.0+0x54>
 8009050:	2c30      	cmp	r4, #48	@ 0x30
 8009052:	d12a      	bne.n	80090aa <_strtol_l.constprop.0+0x9a>
 8009054:	782a      	ldrb	r2, [r5, #0]
 8009056:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800905a:	2a58      	cmp	r2, #88	@ 0x58
 800905c:	d125      	bne.n	80090aa <_strtol_l.constprop.0+0x9a>
 800905e:	786c      	ldrb	r4, [r5, #1]
 8009060:	2310      	movs	r3, #16
 8009062:	3502      	adds	r5, #2
 8009064:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009068:	f10c 3cff 	add.w	ip, ip, #4294967295
 800906c:	2200      	movs	r2, #0
 800906e:	fbbc f9f3 	udiv	r9, ip, r3
 8009072:	4610      	mov	r0, r2
 8009074:	fb03 ca19 	mls	sl, r3, r9, ip
 8009078:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800907c:	2f09      	cmp	r7, #9
 800907e:	d81b      	bhi.n	80090b8 <_strtol_l.constprop.0+0xa8>
 8009080:	463c      	mov	r4, r7
 8009082:	42a3      	cmp	r3, r4
 8009084:	dd27      	ble.n	80090d6 <_strtol_l.constprop.0+0xc6>
 8009086:	1c57      	adds	r7, r2, #1
 8009088:	d007      	beq.n	800909a <_strtol_l.constprop.0+0x8a>
 800908a:	4581      	cmp	r9, r0
 800908c:	d320      	bcc.n	80090d0 <_strtol_l.constprop.0+0xc0>
 800908e:	d101      	bne.n	8009094 <_strtol_l.constprop.0+0x84>
 8009090:	45a2      	cmp	sl, r4
 8009092:	db1d      	blt.n	80090d0 <_strtol_l.constprop.0+0xc0>
 8009094:	fb00 4003 	mla	r0, r0, r3, r4
 8009098:	2201      	movs	r2, #1
 800909a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800909e:	e7eb      	b.n	8009078 <_strtol_l.constprop.0+0x68>
 80090a0:	2c2b      	cmp	r4, #43	@ 0x2b
 80090a2:	bf04      	itt	eq
 80090a4:	782c      	ldrbeq	r4, [r5, #0]
 80090a6:	1c95      	addeq	r5, r2, #2
 80090a8:	e7cf      	b.n	800904a <_strtol_l.constprop.0+0x3a>
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1da      	bne.n	8009064 <_strtol_l.constprop.0+0x54>
 80090ae:	2c30      	cmp	r4, #48	@ 0x30
 80090b0:	bf0c      	ite	eq
 80090b2:	2308      	moveq	r3, #8
 80090b4:	230a      	movne	r3, #10
 80090b6:	e7d5      	b.n	8009064 <_strtol_l.constprop.0+0x54>
 80090b8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80090bc:	2f19      	cmp	r7, #25
 80090be:	d801      	bhi.n	80090c4 <_strtol_l.constprop.0+0xb4>
 80090c0:	3c37      	subs	r4, #55	@ 0x37
 80090c2:	e7de      	b.n	8009082 <_strtol_l.constprop.0+0x72>
 80090c4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80090c8:	2f19      	cmp	r7, #25
 80090ca:	d804      	bhi.n	80090d6 <_strtol_l.constprop.0+0xc6>
 80090cc:	3c57      	subs	r4, #87	@ 0x57
 80090ce:	e7d8      	b.n	8009082 <_strtol_l.constprop.0+0x72>
 80090d0:	f04f 32ff 	mov.w	r2, #4294967295
 80090d4:	e7e1      	b.n	800909a <_strtol_l.constprop.0+0x8a>
 80090d6:	1c53      	adds	r3, r2, #1
 80090d8:	d108      	bne.n	80090ec <_strtol_l.constprop.0+0xdc>
 80090da:	2322      	movs	r3, #34	@ 0x22
 80090dc:	f8ce 3000 	str.w	r3, [lr]
 80090e0:	4660      	mov	r0, ip
 80090e2:	f1b8 0f00 	cmp.w	r8, #0
 80090e6:	d0a0      	beq.n	800902a <_strtol_l.constprop.0+0x1a>
 80090e8:	1e69      	subs	r1, r5, #1
 80090ea:	e006      	b.n	80090fa <_strtol_l.constprop.0+0xea>
 80090ec:	b106      	cbz	r6, 80090f0 <_strtol_l.constprop.0+0xe0>
 80090ee:	4240      	negs	r0, r0
 80090f0:	f1b8 0f00 	cmp.w	r8, #0
 80090f4:	d099      	beq.n	800902a <_strtol_l.constprop.0+0x1a>
 80090f6:	2a00      	cmp	r2, #0
 80090f8:	d1f6      	bne.n	80090e8 <_strtol_l.constprop.0+0xd8>
 80090fa:	f8c8 1000 	str.w	r1, [r8]
 80090fe:	e794      	b.n	800902a <_strtol_l.constprop.0+0x1a>
 8009100:	08009d55 	.word	0x08009d55

08009104 <strtol>:
 8009104:	4613      	mov	r3, r2
 8009106:	460a      	mov	r2, r1
 8009108:	4601      	mov	r1, r0
 800910a:	4802      	ldr	r0, [pc, #8]	@ (8009114 <strtol+0x10>)
 800910c:	6800      	ldr	r0, [r0, #0]
 800910e:	f7ff bf7f 	b.w	8009010 <_strtol_l.constprop.0>
 8009112:	bf00      	nop
 8009114:	20000114 	.word	0x20000114

08009118 <sniprintf>:
 8009118:	b40c      	push	{r2, r3}
 800911a:	b530      	push	{r4, r5, lr}
 800911c:	4b17      	ldr	r3, [pc, #92]	@ (800917c <sniprintf+0x64>)
 800911e:	1e0c      	subs	r4, r1, #0
 8009120:	681d      	ldr	r5, [r3, #0]
 8009122:	b09d      	sub	sp, #116	@ 0x74
 8009124:	da08      	bge.n	8009138 <sniprintf+0x20>
 8009126:	238b      	movs	r3, #139	@ 0x8b
 8009128:	602b      	str	r3, [r5, #0]
 800912a:	f04f 30ff 	mov.w	r0, #4294967295
 800912e:	b01d      	add	sp, #116	@ 0x74
 8009130:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009134:	b002      	add	sp, #8
 8009136:	4770      	bx	lr
 8009138:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800913c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009140:	bf14      	ite	ne
 8009142:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009146:	4623      	moveq	r3, r4
 8009148:	9304      	str	r3, [sp, #16]
 800914a:	9307      	str	r3, [sp, #28]
 800914c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009150:	9002      	str	r0, [sp, #8]
 8009152:	9006      	str	r0, [sp, #24]
 8009154:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009158:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800915a:	ab21      	add	r3, sp, #132	@ 0x84
 800915c:	a902      	add	r1, sp, #8
 800915e:	4628      	mov	r0, r5
 8009160:	9301      	str	r3, [sp, #4]
 8009162:	f000 f995 	bl	8009490 <_svfiprintf_r>
 8009166:	1c43      	adds	r3, r0, #1
 8009168:	bfbc      	itt	lt
 800916a:	238b      	movlt	r3, #139	@ 0x8b
 800916c:	602b      	strlt	r3, [r5, #0]
 800916e:	2c00      	cmp	r4, #0
 8009170:	d0dd      	beq.n	800912e <sniprintf+0x16>
 8009172:	9b02      	ldr	r3, [sp, #8]
 8009174:	2200      	movs	r2, #0
 8009176:	701a      	strb	r2, [r3, #0]
 8009178:	e7d9      	b.n	800912e <sniprintf+0x16>
 800917a:	bf00      	nop
 800917c:	20000114 	.word	0x20000114

08009180 <memset>:
 8009180:	4402      	add	r2, r0
 8009182:	4603      	mov	r3, r0
 8009184:	4293      	cmp	r3, r2
 8009186:	d100      	bne.n	800918a <memset+0xa>
 8009188:	4770      	bx	lr
 800918a:	f803 1b01 	strb.w	r1, [r3], #1
 800918e:	e7f9      	b.n	8009184 <memset+0x4>

08009190 <__errno>:
 8009190:	4b01      	ldr	r3, [pc, #4]	@ (8009198 <__errno+0x8>)
 8009192:	6818      	ldr	r0, [r3, #0]
 8009194:	4770      	bx	lr
 8009196:	bf00      	nop
 8009198:	20000114 	.word	0x20000114

0800919c <__libc_init_array>:
 800919c:	b570      	push	{r4, r5, r6, lr}
 800919e:	4d0d      	ldr	r5, [pc, #52]	@ (80091d4 <__libc_init_array+0x38>)
 80091a0:	4c0d      	ldr	r4, [pc, #52]	@ (80091d8 <__libc_init_array+0x3c>)
 80091a2:	1b64      	subs	r4, r4, r5
 80091a4:	10a4      	asrs	r4, r4, #2
 80091a6:	2600      	movs	r6, #0
 80091a8:	42a6      	cmp	r6, r4
 80091aa:	d109      	bne.n	80091c0 <__libc_init_array+0x24>
 80091ac:	4d0b      	ldr	r5, [pc, #44]	@ (80091dc <__libc_init_array+0x40>)
 80091ae:	4c0c      	ldr	r4, [pc, #48]	@ (80091e0 <__libc_init_array+0x44>)
 80091b0:	f000 fce2 	bl	8009b78 <_init>
 80091b4:	1b64      	subs	r4, r4, r5
 80091b6:	10a4      	asrs	r4, r4, #2
 80091b8:	2600      	movs	r6, #0
 80091ba:	42a6      	cmp	r6, r4
 80091bc:	d105      	bne.n	80091ca <__libc_init_array+0x2e>
 80091be:	bd70      	pop	{r4, r5, r6, pc}
 80091c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80091c4:	4798      	blx	r3
 80091c6:	3601      	adds	r6, #1
 80091c8:	e7ee      	b.n	80091a8 <__libc_init_array+0xc>
 80091ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ce:	4798      	blx	r3
 80091d0:	3601      	adds	r6, #1
 80091d2:	e7f2      	b.n	80091ba <__libc_init_array+0x1e>
 80091d4:	08009e90 	.word	0x08009e90
 80091d8:	08009e90 	.word	0x08009e90
 80091dc:	08009e90 	.word	0x08009e90
 80091e0:	08009e94 	.word	0x08009e94

080091e4 <__retarget_lock_acquire_recursive>:
 80091e4:	4770      	bx	lr

080091e6 <__retarget_lock_release_recursive>:
 80091e6:	4770      	bx	lr

080091e8 <_free_r>:
 80091e8:	b538      	push	{r3, r4, r5, lr}
 80091ea:	4605      	mov	r5, r0
 80091ec:	2900      	cmp	r1, #0
 80091ee:	d041      	beq.n	8009274 <_free_r+0x8c>
 80091f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091f4:	1f0c      	subs	r4, r1, #4
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	bfb8      	it	lt
 80091fa:	18e4      	addlt	r4, r4, r3
 80091fc:	f000 f8e0 	bl	80093c0 <__malloc_lock>
 8009200:	4a1d      	ldr	r2, [pc, #116]	@ (8009278 <_free_r+0x90>)
 8009202:	6813      	ldr	r3, [r2, #0]
 8009204:	b933      	cbnz	r3, 8009214 <_free_r+0x2c>
 8009206:	6063      	str	r3, [r4, #4]
 8009208:	6014      	str	r4, [r2, #0]
 800920a:	4628      	mov	r0, r5
 800920c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009210:	f000 b8dc 	b.w	80093cc <__malloc_unlock>
 8009214:	42a3      	cmp	r3, r4
 8009216:	d908      	bls.n	800922a <_free_r+0x42>
 8009218:	6820      	ldr	r0, [r4, #0]
 800921a:	1821      	adds	r1, r4, r0
 800921c:	428b      	cmp	r3, r1
 800921e:	bf01      	itttt	eq
 8009220:	6819      	ldreq	r1, [r3, #0]
 8009222:	685b      	ldreq	r3, [r3, #4]
 8009224:	1809      	addeq	r1, r1, r0
 8009226:	6021      	streq	r1, [r4, #0]
 8009228:	e7ed      	b.n	8009206 <_free_r+0x1e>
 800922a:	461a      	mov	r2, r3
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	b10b      	cbz	r3, 8009234 <_free_r+0x4c>
 8009230:	42a3      	cmp	r3, r4
 8009232:	d9fa      	bls.n	800922a <_free_r+0x42>
 8009234:	6811      	ldr	r1, [r2, #0]
 8009236:	1850      	adds	r0, r2, r1
 8009238:	42a0      	cmp	r0, r4
 800923a:	d10b      	bne.n	8009254 <_free_r+0x6c>
 800923c:	6820      	ldr	r0, [r4, #0]
 800923e:	4401      	add	r1, r0
 8009240:	1850      	adds	r0, r2, r1
 8009242:	4283      	cmp	r3, r0
 8009244:	6011      	str	r1, [r2, #0]
 8009246:	d1e0      	bne.n	800920a <_free_r+0x22>
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	6053      	str	r3, [r2, #4]
 800924e:	4408      	add	r0, r1
 8009250:	6010      	str	r0, [r2, #0]
 8009252:	e7da      	b.n	800920a <_free_r+0x22>
 8009254:	d902      	bls.n	800925c <_free_r+0x74>
 8009256:	230c      	movs	r3, #12
 8009258:	602b      	str	r3, [r5, #0]
 800925a:	e7d6      	b.n	800920a <_free_r+0x22>
 800925c:	6820      	ldr	r0, [r4, #0]
 800925e:	1821      	adds	r1, r4, r0
 8009260:	428b      	cmp	r3, r1
 8009262:	bf04      	itt	eq
 8009264:	6819      	ldreq	r1, [r3, #0]
 8009266:	685b      	ldreq	r3, [r3, #4]
 8009268:	6063      	str	r3, [r4, #4]
 800926a:	bf04      	itt	eq
 800926c:	1809      	addeq	r1, r1, r0
 800926e:	6021      	streq	r1, [r4, #0]
 8009270:	6054      	str	r4, [r2, #4]
 8009272:	e7ca      	b.n	800920a <_free_r+0x22>
 8009274:	bd38      	pop	{r3, r4, r5, pc}
 8009276:	bf00      	nop
 8009278:	200005ec 	.word	0x200005ec

0800927c <sbrk_aligned>:
 800927c:	b570      	push	{r4, r5, r6, lr}
 800927e:	4e0f      	ldr	r6, [pc, #60]	@ (80092bc <sbrk_aligned+0x40>)
 8009280:	460c      	mov	r4, r1
 8009282:	6831      	ldr	r1, [r6, #0]
 8009284:	4605      	mov	r5, r0
 8009286:	b911      	cbnz	r1, 800928e <sbrk_aligned+0x12>
 8009288:	f000 fba6 	bl	80099d8 <_sbrk_r>
 800928c:	6030      	str	r0, [r6, #0]
 800928e:	4621      	mov	r1, r4
 8009290:	4628      	mov	r0, r5
 8009292:	f000 fba1 	bl	80099d8 <_sbrk_r>
 8009296:	1c43      	adds	r3, r0, #1
 8009298:	d103      	bne.n	80092a2 <sbrk_aligned+0x26>
 800929a:	f04f 34ff 	mov.w	r4, #4294967295
 800929e:	4620      	mov	r0, r4
 80092a0:	bd70      	pop	{r4, r5, r6, pc}
 80092a2:	1cc4      	adds	r4, r0, #3
 80092a4:	f024 0403 	bic.w	r4, r4, #3
 80092a8:	42a0      	cmp	r0, r4
 80092aa:	d0f8      	beq.n	800929e <sbrk_aligned+0x22>
 80092ac:	1a21      	subs	r1, r4, r0
 80092ae:	4628      	mov	r0, r5
 80092b0:	f000 fb92 	bl	80099d8 <_sbrk_r>
 80092b4:	3001      	adds	r0, #1
 80092b6:	d1f2      	bne.n	800929e <sbrk_aligned+0x22>
 80092b8:	e7ef      	b.n	800929a <sbrk_aligned+0x1e>
 80092ba:	bf00      	nop
 80092bc:	200005e8 	.word	0x200005e8

080092c0 <_malloc_r>:
 80092c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092c4:	1ccd      	adds	r5, r1, #3
 80092c6:	f025 0503 	bic.w	r5, r5, #3
 80092ca:	3508      	adds	r5, #8
 80092cc:	2d0c      	cmp	r5, #12
 80092ce:	bf38      	it	cc
 80092d0:	250c      	movcc	r5, #12
 80092d2:	2d00      	cmp	r5, #0
 80092d4:	4606      	mov	r6, r0
 80092d6:	db01      	blt.n	80092dc <_malloc_r+0x1c>
 80092d8:	42a9      	cmp	r1, r5
 80092da:	d904      	bls.n	80092e6 <_malloc_r+0x26>
 80092dc:	230c      	movs	r3, #12
 80092de:	6033      	str	r3, [r6, #0]
 80092e0:	2000      	movs	r0, #0
 80092e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80093bc <_malloc_r+0xfc>
 80092ea:	f000 f869 	bl	80093c0 <__malloc_lock>
 80092ee:	f8d8 3000 	ldr.w	r3, [r8]
 80092f2:	461c      	mov	r4, r3
 80092f4:	bb44      	cbnz	r4, 8009348 <_malloc_r+0x88>
 80092f6:	4629      	mov	r1, r5
 80092f8:	4630      	mov	r0, r6
 80092fa:	f7ff ffbf 	bl	800927c <sbrk_aligned>
 80092fe:	1c43      	adds	r3, r0, #1
 8009300:	4604      	mov	r4, r0
 8009302:	d158      	bne.n	80093b6 <_malloc_r+0xf6>
 8009304:	f8d8 4000 	ldr.w	r4, [r8]
 8009308:	4627      	mov	r7, r4
 800930a:	2f00      	cmp	r7, #0
 800930c:	d143      	bne.n	8009396 <_malloc_r+0xd6>
 800930e:	2c00      	cmp	r4, #0
 8009310:	d04b      	beq.n	80093aa <_malloc_r+0xea>
 8009312:	6823      	ldr	r3, [r4, #0]
 8009314:	4639      	mov	r1, r7
 8009316:	4630      	mov	r0, r6
 8009318:	eb04 0903 	add.w	r9, r4, r3
 800931c:	f000 fb5c 	bl	80099d8 <_sbrk_r>
 8009320:	4581      	cmp	r9, r0
 8009322:	d142      	bne.n	80093aa <_malloc_r+0xea>
 8009324:	6821      	ldr	r1, [r4, #0]
 8009326:	1a6d      	subs	r5, r5, r1
 8009328:	4629      	mov	r1, r5
 800932a:	4630      	mov	r0, r6
 800932c:	f7ff ffa6 	bl	800927c <sbrk_aligned>
 8009330:	3001      	adds	r0, #1
 8009332:	d03a      	beq.n	80093aa <_malloc_r+0xea>
 8009334:	6823      	ldr	r3, [r4, #0]
 8009336:	442b      	add	r3, r5
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	f8d8 3000 	ldr.w	r3, [r8]
 800933e:	685a      	ldr	r2, [r3, #4]
 8009340:	bb62      	cbnz	r2, 800939c <_malloc_r+0xdc>
 8009342:	f8c8 7000 	str.w	r7, [r8]
 8009346:	e00f      	b.n	8009368 <_malloc_r+0xa8>
 8009348:	6822      	ldr	r2, [r4, #0]
 800934a:	1b52      	subs	r2, r2, r5
 800934c:	d420      	bmi.n	8009390 <_malloc_r+0xd0>
 800934e:	2a0b      	cmp	r2, #11
 8009350:	d917      	bls.n	8009382 <_malloc_r+0xc2>
 8009352:	1961      	adds	r1, r4, r5
 8009354:	42a3      	cmp	r3, r4
 8009356:	6025      	str	r5, [r4, #0]
 8009358:	bf18      	it	ne
 800935a:	6059      	strne	r1, [r3, #4]
 800935c:	6863      	ldr	r3, [r4, #4]
 800935e:	bf08      	it	eq
 8009360:	f8c8 1000 	streq.w	r1, [r8]
 8009364:	5162      	str	r2, [r4, r5]
 8009366:	604b      	str	r3, [r1, #4]
 8009368:	4630      	mov	r0, r6
 800936a:	f000 f82f 	bl	80093cc <__malloc_unlock>
 800936e:	f104 000b 	add.w	r0, r4, #11
 8009372:	1d23      	adds	r3, r4, #4
 8009374:	f020 0007 	bic.w	r0, r0, #7
 8009378:	1ac2      	subs	r2, r0, r3
 800937a:	bf1c      	itt	ne
 800937c:	1a1b      	subne	r3, r3, r0
 800937e:	50a3      	strne	r3, [r4, r2]
 8009380:	e7af      	b.n	80092e2 <_malloc_r+0x22>
 8009382:	6862      	ldr	r2, [r4, #4]
 8009384:	42a3      	cmp	r3, r4
 8009386:	bf0c      	ite	eq
 8009388:	f8c8 2000 	streq.w	r2, [r8]
 800938c:	605a      	strne	r2, [r3, #4]
 800938e:	e7eb      	b.n	8009368 <_malloc_r+0xa8>
 8009390:	4623      	mov	r3, r4
 8009392:	6864      	ldr	r4, [r4, #4]
 8009394:	e7ae      	b.n	80092f4 <_malloc_r+0x34>
 8009396:	463c      	mov	r4, r7
 8009398:	687f      	ldr	r7, [r7, #4]
 800939a:	e7b6      	b.n	800930a <_malloc_r+0x4a>
 800939c:	461a      	mov	r2, r3
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	42a3      	cmp	r3, r4
 80093a2:	d1fb      	bne.n	800939c <_malloc_r+0xdc>
 80093a4:	2300      	movs	r3, #0
 80093a6:	6053      	str	r3, [r2, #4]
 80093a8:	e7de      	b.n	8009368 <_malloc_r+0xa8>
 80093aa:	230c      	movs	r3, #12
 80093ac:	6033      	str	r3, [r6, #0]
 80093ae:	4630      	mov	r0, r6
 80093b0:	f000 f80c 	bl	80093cc <__malloc_unlock>
 80093b4:	e794      	b.n	80092e0 <_malloc_r+0x20>
 80093b6:	6005      	str	r5, [r0, #0]
 80093b8:	e7d6      	b.n	8009368 <_malloc_r+0xa8>
 80093ba:	bf00      	nop
 80093bc:	200005ec 	.word	0x200005ec

080093c0 <__malloc_lock>:
 80093c0:	4801      	ldr	r0, [pc, #4]	@ (80093c8 <__malloc_lock+0x8>)
 80093c2:	f7ff bf0f 	b.w	80091e4 <__retarget_lock_acquire_recursive>
 80093c6:	bf00      	nop
 80093c8:	200005e4 	.word	0x200005e4

080093cc <__malloc_unlock>:
 80093cc:	4801      	ldr	r0, [pc, #4]	@ (80093d4 <__malloc_unlock+0x8>)
 80093ce:	f7ff bf0a 	b.w	80091e6 <__retarget_lock_release_recursive>
 80093d2:	bf00      	nop
 80093d4:	200005e4 	.word	0x200005e4

080093d8 <__ssputs_r>:
 80093d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093dc:	688e      	ldr	r6, [r1, #8]
 80093de:	461f      	mov	r7, r3
 80093e0:	42be      	cmp	r6, r7
 80093e2:	680b      	ldr	r3, [r1, #0]
 80093e4:	4682      	mov	sl, r0
 80093e6:	460c      	mov	r4, r1
 80093e8:	4690      	mov	r8, r2
 80093ea:	d82d      	bhi.n	8009448 <__ssputs_r+0x70>
 80093ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80093f4:	d026      	beq.n	8009444 <__ssputs_r+0x6c>
 80093f6:	6965      	ldr	r5, [r4, #20]
 80093f8:	6909      	ldr	r1, [r1, #16]
 80093fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093fe:	eba3 0901 	sub.w	r9, r3, r1
 8009402:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009406:	1c7b      	adds	r3, r7, #1
 8009408:	444b      	add	r3, r9
 800940a:	106d      	asrs	r5, r5, #1
 800940c:	429d      	cmp	r5, r3
 800940e:	bf38      	it	cc
 8009410:	461d      	movcc	r5, r3
 8009412:	0553      	lsls	r3, r2, #21
 8009414:	d527      	bpl.n	8009466 <__ssputs_r+0x8e>
 8009416:	4629      	mov	r1, r5
 8009418:	f7ff ff52 	bl	80092c0 <_malloc_r>
 800941c:	4606      	mov	r6, r0
 800941e:	b360      	cbz	r0, 800947a <__ssputs_r+0xa2>
 8009420:	6921      	ldr	r1, [r4, #16]
 8009422:	464a      	mov	r2, r9
 8009424:	f000 fae8 	bl	80099f8 <memcpy>
 8009428:	89a3      	ldrh	r3, [r4, #12]
 800942a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800942e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009432:	81a3      	strh	r3, [r4, #12]
 8009434:	6126      	str	r6, [r4, #16]
 8009436:	6165      	str	r5, [r4, #20]
 8009438:	444e      	add	r6, r9
 800943a:	eba5 0509 	sub.w	r5, r5, r9
 800943e:	6026      	str	r6, [r4, #0]
 8009440:	60a5      	str	r5, [r4, #8]
 8009442:	463e      	mov	r6, r7
 8009444:	42be      	cmp	r6, r7
 8009446:	d900      	bls.n	800944a <__ssputs_r+0x72>
 8009448:	463e      	mov	r6, r7
 800944a:	6820      	ldr	r0, [r4, #0]
 800944c:	4632      	mov	r2, r6
 800944e:	4641      	mov	r1, r8
 8009450:	f000 faa8 	bl	80099a4 <memmove>
 8009454:	68a3      	ldr	r3, [r4, #8]
 8009456:	1b9b      	subs	r3, r3, r6
 8009458:	60a3      	str	r3, [r4, #8]
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	4433      	add	r3, r6
 800945e:	6023      	str	r3, [r4, #0]
 8009460:	2000      	movs	r0, #0
 8009462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009466:	462a      	mov	r2, r5
 8009468:	f000 fad4 	bl	8009a14 <_realloc_r>
 800946c:	4606      	mov	r6, r0
 800946e:	2800      	cmp	r0, #0
 8009470:	d1e0      	bne.n	8009434 <__ssputs_r+0x5c>
 8009472:	6921      	ldr	r1, [r4, #16]
 8009474:	4650      	mov	r0, sl
 8009476:	f7ff feb7 	bl	80091e8 <_free_r>
 800947a:	230c      	movs	r3, #12
 800947c:	f8ca 3000 	str.w	r3, [sl]
 8009480:	89a3      	ldrh	r3, [r4, #12]
 8009482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009486:	81a3      	strh	r3, [r4, #12]
 8009488:	f04f 30ff 	mov.w	r0, #4294967295
 800948c:	e7e9      	b.n	8009462 <__ssputs_r+0x8a>
	...

08009490 <_svfiprintf_r>:
 8009490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009494:	4698      	mov	r8, r3
 8009496:	898b      	ldrh	r3, [r1, #12]
 8009498:	061b      	lsls	r3, r3, #24
 800949a:	b09d      	sub	sp, #116	@ 0x74
 800949c:	4607      	mov	r7, r0
 800949e:	460d      	mov	r5, r1
 80094a0:	4614      	mov	r4, r2
 80094a2:	d510      	bpl.n	80094c6 <_svfiprintf_r+0x36>
 80094a4:	690b      	ldr	r3, [r1, #16]
 80094a6:	b973      	cbnz	r3, 80094c6 <_svfiprintf_r+0x36>
 80094a8:	2140      	movs	r1, #64	@ 0x40
 80094aa:	f7ff ff09 	bl	80092c0 <_malloc_r>
 80094ae:	6028      	str	r0, [r5, #0]
 80094b0:	6128      	str	r0, [r5, #16]
 80094b2:	b930      	cbnz	r0, 80094c2 <_svfiprintf_r+0x32>
 80094b4:	230c      	movs	r3, #12
 80094b6:	603b      	str	r3, [r7, #0]
 80094b8:	f04f 30ff 	mov.w	r0, #4294967295
 80094bc:	b01d      	add	sp, #116	@ 0x74
 80094be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c2:	2340      	movs	r3, #64	@ 0x40
 80094c4:	616b      	str	r3, [r5, #20]
 80094c6:	2300      	movs	r3, #0
 80094c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80094ca:	2320      	movs	r3, #32
 80094cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80094d4:	2330      	movs	r3, #48	@ 0x30
 80094d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009674 <_svfiprintf_r+0x1e4>
 80094da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80094de:	f04f 0901 	mov.w	r9, #1
 80094e2:	4623      	mov	r3, r4
 80094e4:	469a      	mov	sl, r3
 80094e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094ea:	b10a      	cbz	r2, 80094f0 <_svfiprintf_r+0x60>
 80094ec:	2a25      	cmp	r2, #37	@ 0x25
 80094ee:	d1f9      	bne.n	80094e4 <_svfiprintf_r+0x54>
 80094f0:	ebba 0b04 	subs.w	fp, sl, r4
 80094f4:	d00b      	beq.n	800950e <_svfiprintf_r+0x7e>
 80094f6:	465b      	mov	r3, fp
 80094f8:	4622      	mov	r2, r4
 80094fa:	4629      	mov	r1, r5
 80094fc:	4638      	mov	r0, r7
 80094fe:	f7ff ff6b 	bl	80093d8 <__ssputs_r>
 8009502:	3001      	adds	r0, #1
 8009504:	f000 80a7 	beq.w	8009656 <_svfiprintf_r+0x1c6>
 8009508:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800950a:	445a      	add	r2, fp
 800950c:	9209      	str	r2, [sp, #36]	@ 0x24
 800950e:	f89a 3000 	ldrb.w	r3, [sl]
 8009512:	2b00      	cmp	r3, #0
 8009514:	f000 809f 	beq.w	8009656 <_svfiprintf_r+0x1c6>
 8009518:	2300      	movs	r3, #0
 800951a:	f04f 32ff 	mov.w	r2, #4294967295
 800951e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009522:	f10a 0a01 	add.w	sl, sl, #1
 8009526:	9304      	str	r3, [sp, #16]
 8009528:	9307      	str	r3, [sp, #28]
 800952a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800952e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009530:	4654      	mov	r4, sl
 8009532:	2205      	movs	r2, #5
 8009534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009538:	484e      	ldr	r0, [pc, #312]	@ (8009674 <_svfiprintf_r+0x1e4>)
 800953a:	f7f6 fe71 	bl	8000220 <memchr>
 800953e:	9a04      	ldr	r2, [sp, #16]
 8009540:	b9d8      	cbnz	r0, 800957a <_svfiprintf_r+0xea>
 8009542:	06d0      	lsls	r0, r2, #27
 8009544:	bf44      	itt	mi
 8009546:	2320      	movmi	r3, #32
 8009548:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800954c:	0711      	lsls	r1, r2, #28
 800954e:	bf44      	itt	mi
 8009550:	232b      	movmi	r3, #43	@ 0x2b
 8009552:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009556:	f89a 3000 	ldrb.w	r3, [sl]
 800955a:	2b2a      	cmp	r3, #42	@ 0x2a
 800955c:	d015      	beq.n	800958a <_svfiprintf_r+0xfa>
 800955e:	9a07      	ldr	r2, [sp, #28]
 8009560:	4654      	mov	r4, sl
 8009562:	2000      	movs	r0, #0
 8009564:	f04f 0c0a 	mov.w	ip, #10
 8009568:	4621      	mov	r1, r4
 800956a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800956e:	3b30      	subs	r3, #48	@ 0x30
 8009570:	2b09      	cmp	r3, #9
 8009572:	d94b      	bls.n	800960c <_svfiprintf_r+0x17c>
 8009574:	b1b0      	cbz	r0, 80095a4 <_svfiprintf_r+0x114>
 8009576:	9207      	str	r2, [sp, #28]
 8009578:	e014      	b.n	80095a4 <_svfiprintf_r+0x114>
 800957a:	eba0 0308 	sub.w	r3, r0, r8
 800957e:	fa09 f303 	lsl.w	r3, r9, r3
 8009582:	4313      	orrs	r3, r2
 8009584:	9304      	str	r3, [sp, #16]
 8009586:	46a2      	mov	sl, r4
 8009588:	e7d2      	b.n	8009530 <_svfiprintf_r+0xa0>
 800958a:	9b03      	ldr	r3, [sp, #12]
 800958c:	1d19      	adds	r1, r3, #4
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	9103      	str	r1, [sp, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	bfbb      	ittet	lt
 8009596:	425b      	neglt	r3, r3
 8009598:	f042 0202 	orrlt.w	r2, r2, #2
 800959c:	9307      	strge	r3, [sp, #28]
 800959e:	9307      	strlt	r3, [sp, #28]
 80095a0:	bfb8      	it	lt
 80095a2:	9204      	strlt	r2, [sp, #16]
 80095a4:	7823      	ldrb	r3, [r4, #0]
 80095a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80095a8:	d10a      	bne.n	80095c0 <_svfiprintf_r+0x130>
 80095aa:	7863      	ldrb	r3, [r4, #1]
 80095ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80095ae:	d132      	bne.n	8009616 <_svfiprintf_r+0x186>
 80095b0:	9b03      	ldr	r3, [sp, #12]
 80095b2:	1d1a      	adds	r2, r3, #4
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	9203      	str	r2, [sp, #12]
 80095b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80095bc:	3402      	adds	r4, #2
 80095be:	9305      	str	r3, [sp, #20]
 80095c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009684 <_svfiprintf_r+0x1f4>
 80095c4:	7821      	ldrb	r1, [r4, #0]
 80095c6:	2203      	movs	r2, #3
 80095c8:	4650      	mov	r0, sl
 80095ca:	f7f6 fe29 	bl	8000220 <memchr>
 80095ce:	b138      	cbz	r0, 80095e0 <_svfiprintf_r+0x150>
 80095d0:	9b04      	ldr	r3, [sp, #16]
 80095d2:	eba0 000a 	sub.w	r0, r0, sl
 80095d6:	2240      	movs	r2, #64	@ 0x40
 80095d8:	4082      	lsls	r2, r0
 80095da:	4313      	orrs	r3, r2
 80095dc:	3401      	adds	r4, #1
 80095de:	9304      	str	r3, [sp, #16]
 80095e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e4:	4824      	ldr	r0, [pc, #144]	@ (8009678 <_svfiprintf_r+0x1e8>)
 80095e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095ea:	2206      	movs	r2, #6
 80095ec:	f7f6 fe18 	bl	8000220 <memchr>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d036      	beq.n	8009662 <_svfiprintf_r+0x1d2>
 80095f4:	4b21      	ldr	r3, [pc, #132]	@ (800967c <_svfiprintf_r+0x1ec>)
 80095f6:	bb1b      	cbnz	r3, 8009640 <_svfiprintf_r+0x1b0>
 80095f8:	9b03      	ldr	r3, [sp, #12]
 80095fa:	3307      	adds	r3, #7
 80095fc:	f023 0307 	bic.w	r3, r3, #7
 8009600:	3308      	adds	r3, #8
 8009602:	9303      	str	r3, [sp, #12]
 8009604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009606:	4433      	add	r3, r6
 8009608:	9309      	str	r3, [sp, #36]	@ 0x24
 800960a:	e76a      	b.n	80094e2 <_svfiprintf_r+0x52>
 800960c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009610:	460c      	mov	r4, r1
 8009612:	2001      	movs	r0, #1
 8009614:	e7a8      	b.n	8009568 <_svfiprintf_r+0xd8>
 8009616:	2300      	movs	r3, #0
 8009618:	3401      	adds	r4, #1
 800961a:	9305      	str	r3, [sp, #20]
 800961c:	4619      	mov	r1, r3
 800961e:	f04f 0c0a 	mov.w	ip, #10
 8009622:	4620      	mov	r0, r4
 8009624:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009628:	3a30      	subs	r2, #48	@ 0x30
 800962a:	2a09      	cmp	r2, #9
 800962c:	d903      	bls.n	8009636 <_svfiprintf_r+0x1a6>
 800962e:	2b00      	cmp	r3, #0
 8009630:	d0c6      	beq.n	80095c0 <_svfiprintf_r+0x130>
 8009632:	9105      	str	r1, [sp, #20]
 8009634:	e7c4      	b.n	80095c0 <_svfiprintf_r+0x130>
 8009636:	fb0c 2101 	mla	r1, ip, r1, r2
 800963a:	4604      	mov	r4, r0
 800963c:	2301      	movs	r3, #1
 800963e:	e7f0      	b.n	8009622 <_svfiprintf_r+0x192>
 8009640:	ab03      	add	r3, sp, #12
 8009642:	9300      	str	r3, [sp, #0]
 8009644:	462a      	mov	r2, r5
 8009646:	4b0e      	ldr	r3, [pc, #56]	@ (8009680 <_svfiprintf_r+0x1f0>)
 8009648:	a904      	add	r1, sp, #16
 800964a:	4638      	mov	r0, r7
 800964c:	f3af 8000 	nop.w
 8009650:	1c42      	adds	r2, r0, #1
 8009652:	4606      	mov	r6, r0
 8009654:	d1d6      	bne.n	8009604 <_svfiprintf_r+0x174>
 8009656:	89ab      	ldrh	r3, [r5, #12]
 8009658:	065b      	lsls	r3, r3, #25
 800965a:	f53f af2d 	bmi.w	80094b8 <_svfiprintf_r+0x28>
 800965e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009660:	e72c      	b.n	80094bc <_svfiprintf_r+0x2c>
 8009662:	ab03      	add	r3, sp, #12
 8009664:	9300      	str	r3, [sp, #0]
 8009666:	462a      	mov	r2, r5
 8009668:	4b05      	ldr	r3, [pc, #20]	@ (8009680 <_svfiprintf_r+0x1f0>)
 800966a:	a904      	add	r1, sp, #16
 800966c:	4638      	mov	r0, r7
 800966e:	f000 f879 	bl	8009764 <_printf_i>
 8009672:	e7ed      	b.n	8009650 <_svfiprintf_r+0x1c0>
 8009674:	08009e55 	.word	0x08009e55
 8009678:	08009e5f 	.word	0x08009e5f
 800967c:	00000000 	.word	0x00000000
 8009680:	080093d9 	.word	0x080093d9
 8009684:	08009e5b 	.word	0x08009e5b

08009688 <_printf_common>:
 8009688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800968c:	4616      	mov	r6, r2
 800968e:	4698      	mov	r8, r3
 8009690:	688a      	ldr	r2, [r1, #8]
 8009692:	690b      	ldr	r3, [r1, #16]
 8009694:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009698:	4293      	cmp	r3, r2
 800969a:	bfb8      	it	lt
 800969c:	4613      	movlt	r3, r2
 800969e:	6033      	str	r3, [r6, #0]
 80096a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80096a4:	4607      	mov	r7, r0
 80096a6:	460c      	mov	r4, r1
 80096a8:	b10a      	cbz	r2, 80096ae <_printf_common+0x26>
 80096aa:	3301      	adds	r3, #1
 80096ac:	6033      	str	r3, [r6, #0]
 80096ae:	6823      	ldr	r3, [r4, #0]
 80096b0:	0699      	lsls	r1, r3, #26
 80096b2:	bf42      	ittt	mi
 80096b4:	6833      	ldrmi	r3, [r6, #0]
 80096b6:	3302      	addmi	r3, #2
 80096b8:	6033      	strmi	r3, [r6, #0]
 80096ba:	6825      	ldr	r5, [r4, #0]
 80096bc:	f015 0506 	ands.w	r5, r5, #6
 80096c0:	d106      	bne.n	80096d0 <_printf_common+0x48>
 80096c2:	f104 0a19 	add.w	sl, r4, #25
 80096c6:	68e3      	ldr	r3, [r4, #12]
 80096c8:	6832      	ldr	r2, [r6, #0]
 80096ca:	1a9b      	subs	r3, r3, r2
 80096cc:	42ab      	cmp	r3, r5
 80096ce:	dc26      	bgt.n	800971e <_printf_common+0x96>
 80096d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80096d4:	6822      	ldr	r2, [r4, #0]
 80096d6:	3b00      	subs	r3, #0
 80096d8:	bf18      	it	ne
 80096da:	2301      	movne	r3, #1
 80096dc:	0692      	lsls	r2, r2, #26
 80096de:	d42b      	bmi.n	8009738 <_printf_common+0xb0>
 80096e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80096e4:	4641      	mov	r1, r8
 80096e6:	4638      	mov	r0, r7
 80096e8:	47c8      	blx	r9
 80096ea:	3001      	adds	r0, #1
 80096ec:	d01e      	beq.n	800972c <_printf_common+0xa4>
 80096ee:	6823      	ldr	r3, [r4, #0]
 80096f0:	6922      	ldr	r2, [r4, #16]
 80096f2:	f003 0306 	and.w	r3, r3, #6
 80096f6:	2b04      	cmp	r3, #4
 80096f8:	bf02      	ittt	eq
 80096fa:	68e5      	ldreq	r5, [r4, #12]
 80096fc:	6833      	ldreq	r3, [r6, #0]
 80096fe:	1aed      	subeq	r5, r5, r3
 8009700:	68a3      	ldr	r3, [r4, #8]
 8009702:	bf0c      	ite	eq
 8009704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009708:	2500      	movne	r5, #0
 800970a:	4293      	cmp	r3, r2
 800970c:	bfc4      	itt	gt
 800970e:	1a9b      	subgt	r3, r3, r2
 8009710:	18ed      	addgt	r5, r5, r3
 8009712:	2600      	movs	r6, #0
 8009714:	341a      	adds	r4, #26
 8009716:	42b5      	cmp	r5, r6
 8009718:	d11a      	bne.n	8009750 <_printf_common+0xc8>
 800971a:	2000      	movs	r0, #0
 800971c:	e008      	b.n	8009730 <_printf_common+0xa8>
 800971e:	2301      	movs	r3, #1
 8009720:	4652      	mov	r2, sl
 8009722:	4641      	mov	r1, r8
 8009724:	4638      	mov	r0, r7
 8009726:	47c8      	blx	r9
 8009728:	3001      	adds	r0, #1
 800972a:	d103      	bne.n	8009734 <_printf_common+0xac>
 800972c:	f04f 30ff 	mov.w	r0, #4294967295
 8009730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009734:	3501      	adds	r5, #1
 8009736:	e7c6      	b.n	80096c6 <_printf_common+0x3e>
 8009738:	18e1      	adds	r1, r4, r3
 800973a:	1c5a      	adds	r2, r3, #1
 800973c:	2030      	movs	r0, #48	@ 0x30
 800973e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009742:	4422      	add	r2, r4
 8009744:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009748:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800974c:	3302      	adds	r3, #2
 800974e:	e7c7      	b.n	80096e0 <_printf_common+0x58>
 8009750:	2301      	movs	r3, #1
 8009752:	4622      	mov	r2, r4
 8009754:	4641      	mov	r1, r8
 8009756:	4638      	mov	r0, r7
 8009758:	47c8      	blx	r9
 800975a:	3001      	adds	r0, #1
 800975c:	d0e6      	beq.n	800972c <_printf_common+0xa4>
 800975e:	3601      	adds	r6, #1
 8009760:	e7d9      	b.n	8009716 <_printf_common+0x8e>
	...

08009764 <_printf_i>:
 8009764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009768:	7e0f      	ldrb	r7, [r1, #24]
 800976a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800976c:	2f78      	cmp	r7, #120	@ 0x78
 800976e:	4691      	mov	r9, r2
 8009770:	4680      	mov	r8, r0
 8009772:	460c      	mov	r4, r1
 8009774:	469a      	mov	sl, r3
 8009776:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800977a:	d807      	bhi.n	800978c <_printf_i+0x28>
 800977c:	2f62      	cmp	r7, #98	@ 0x62
 800977e:	d80a      	bhi.n	8009796 <_printf_i+0x32>
 8009780:	2f00      	cmp	r7, #0
 8009782:	f000 80d2 	beq.w	800992a <_printf_i+0x1c6>
 8009786:	2f58      	cmp	r7, #88	@ 0x58
 8009788:	f000 80b9 	beq.w	80098fe <_printf_i+0x19a>
 800978c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009790:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009794:	e03a      	b.n	800980c <_printf_i+0xa8>
 8009796:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800979a:	2b15      	cmp	r3, #21
 800979c:	d8f6      	bhi.n	800978c <_printf_i+0x28>
 800979e:	a101      	add	r1, pc, #4	@ (adr r1, 80097a4 <_printf_i+0x40>)
 80097a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097a4:	080097fd 	.word	0x080097fd
 80097a8:	08009811 	.word	0x08009811
 80097ac:	0800978d 	.word	0x0800978d
 80097b0:	0800978d 	.word	0x0800978d
 80097b4:	0800978d 	.word	0x0800978d
 80097b8:	0800978d 	.word	0x0800978d
 80097bc:	08009811 	.word	0x08009811
 80097c0:	0800978d 	.word	0x0800978d
 80097c4:	0800978d 	.word	0x0800978d
 80097c8:	0800978d 	.word	0x0800978d
 80097cc:	0800978d 	.word	0x0800978d
 80097d0:	08009911 	.word	0x08009911
 80097d4:	0800983b 	.word	0x0800983b
 80097d8:	080098cb 	.word	0x080098cb
 80097dc:	0800978d 	.word	0x0800978d
 80097e0:	0800978d 	.word	0x0800978d
 80097e4:	08009933 	.word	0x08009933
 80097e8:	0800978d 	.word	0x0800978d
 80097ec:	0800983b 	.word	0x0800983b
 80097f0:	0800978d 	.word	0x0800978d
 80097f4:	0800978d 	.word	0x0800978d
 80097f8:	080098d3 	.word	0x080098d3
 80097fc:	6833      	ldr	r3, [r6, #0]
 80097fe:	1d1a      	adds	r2, r3, #4
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	6032      	str	r2, [r6, #0]
 8009804:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009808:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800980c:	2301      	movs	r3, #1
 800980e:	e09d      	b.n	800994c <_printf_i+0x1e8>
 8009810:	6833      	ldr	r3, [r6, #0]
 8009812:	6820      	ldr	r0, [r4, #0]
 8009814:	1d19      	adds	r1, r3, #4
 8009816:	6031      	str	r1, [r6, #0]
 8009818:	0606      	lsls	r6, r0, #24
 800981a:	d501      	bpl.n	8009820 <_printf_i+0xbc>
 800981c:	681d      	ldr	r5, [r3, #0]
 800981e:	e003      	b.n	8009828 <_printf_i+0xc4>
 8009820:	0645      	lsls	r5, r0, #25
 8009822:	d5fb      	bpl.n	800981c <_printf_i+0xb8>
 8009824:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009828:	2d00      	cmp	r5, #0
 800982a:	da03      	bge.n	8009834 <_printf_i+0xd0>
 800982c:	232d      	movs	r3, #45	@ 0x2d
 800982e:	426d      	negs	r5, r5
 8009830:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009834:	4859      	ldr	r0, [pc, #356]	@ (800999c <_printf_i+0x238>)
 8009836:	230a      	movs	r3, #10
 8009838:	e011      	b.n	800985e <_printf_i+0xfa>
 800983a:	6821      	ldr	r1, [r4, #0]
 800983c:	6833      	ldr	r3, [r6, #0]
 800983e:	0608      	lsls	r0, r1, #24
 8009840:	f853 5b04 	ldr.w	r5, [r3], #4
 8009844:	d402      	bmi.n	800984c <_printf_i+0xe8>
 8009846:	0649      	lsls	r1, r1, #25
 8009848:	bf48      	it	mi
 800984a:	b2ad      	uxthmi	r5, r5
 800984c:	2f6f      	cmp	r7, #111	@ 0x6f
 800984e:	4853      	ldr	r0, [pc, #332]	@ (800999c <_printf_i+0x238>)
 8009850:	6033      	str	r3, [r6, #0]
 8009852:	bf14      	ite	ne
 8009854:	230a      	movne	r3, #10
 8009856:	2308      	moveq	r3, #8
 8009858:	2100      	movs	r1, #0
 800985a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800985e:	6866      	ldr	r6, [r4, #4]
 8009860:	60a6      	str	r6, [r4, #8]
 8009862:	2e00      	cmp	r6, #0
 8009864:	bfa2      	ittt	ge
 8009866:	6821      	ldrge	r1, [r4, #0]
 8009868:	f021 0104 	bicge.w	r1, r1, #4
 800986c:	6021      	strge	r1, [r4, #0]
 800986e:	b90d      	cbnz	r5, 8009874 <_printf_i+0x110>
 8009870:	2e00      	cmp	r6, #0
 8009872:	d04b      	beq.n	800990c <_printf_i+0x1a8>
 8009874:	4616      	mov	r6, r2
 8009876:	fbb5 f1f3 	udiv	r1, r5, r3
 800987a:	fb03 5711 	mls	r7, r3, r1, r5
 800987e:	5dc7      	ldrb	r7, [r0, r7]
 8009880:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009884:	462f      	mov	r7, r5
 8009886:	42bb      	cmp	r3, r7
 8009888:	460d      	mov	r5, r1
 800988a:	d9f4      	bls.n	8009876 <_printf_i+0x112>
 800988c:	2b08      	cmp	r3, #8
 800988e:	d10b      	bne.n	80098a8 <_printf_i+0x144>
 8009890:	6823      	ldr	r3, [r4, #0]
 8009892:	07df      	lsls	r7, r3, #31
 8009894:	d508      	bpl.n	80098a8 <_printf_i+0x144>
 8009896:	6923      	ldr	r3, [r4, #16]
 8009898:	6861      	ldr	r1, [r4, #4]
 800989a:	4299      	cmp	r1, r3
 800989c:	bfde      	ittt	le
 800989e:	2330      	movle	r3, #48	@ 0x30
 80098a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80098a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80098a8:	1b92      	subs	r2, r2, r6
 80098aa:	6122      	str	r2, [r4, #16]
 80098ac:	f8cd a000 	str.w	sl, [sp]
 80098b0:	464b      	mov	r3, r9
 80098b2:	aa03      	add	r2, sp, #12
 80098b4:	4621      	mov	r1, r4
 80098b6:	4640      	mov	r0, r8
 80098b8:	f7ff fee6 	bl	8009688 <_printf_common>
 80098bc:	3001      	adds	r0, #1
 80098be:	d14a      	bne.n	8009956 <_printf_i+0x1f2>
 80098c0:	f04f 30ff 	mov.w	r0, #4294967295
 80098c4:	b004      	add	sp, #16
 80098c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	f043 0320 	orr.w	r3, r3, #32
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	4833      	ldr	r0, [pc, #204]	@ (80099a0 <_printf_i+0x23c>)
 80098d4:	2778      	movs	r7, #120	@ 0x78
 80098d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80098da:	6823      	ldr	r3, [r4, #0]
 80098dc:	6831      	ldr	r1, [r6, #0]
 80098de:	061f      	lsls	r7, r3, #24
 80098e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80098e4:	d402      	bmi.n	80098ec <_printf_i+0x188>
 80098e6:	065f      	lsls	r7, r3, #25
 80098e8:	bf48      	it	mi
 80098ea:	b2ad      	uxthmi	r5, r5
 80098ec:	6031      	str	r1, [r6, #0]
 80098ee:	07d9      	lsls	r1, r3, #31
 80098f0:	bf44      	itt	mi
 80098f2:	f043 0320 	orrmi.w	r3, r3, #32
 80098f6:	6023      	strmi	r3, [r4, #0]
 80098f8:	b11d      	cbz	r5, 8009902 <_printf_i+0x19e>
 80098fa:	2310      	movs	r3, #16
 80098fc:	e7ac      	b.n	8009858 <_printf_i+0xf4>
 80098fe:	4827      	ldr	r0, [pc, #156]	@ (800999c <_printf_i+0x238>)
 8009900:	e7e9      	b.n	80098d6 <_printf_i+0x172>
 8009902:	6823      	ldr	r3, [r4, #0]
 8009904:	f023 0320 	bic.w	r3, r3, #32
 8009908:	6023      	str	r3, [r4, #0]
 800990a:	e7f6      	b.n	80098fa <_printf_i+0x196>
 800990c:	4616      	mov	r6, r2
 800990e:	e7bd      	b.n	800988c <_printf_i+0x128>
 8009910:	6833      	ldr	r3, [r6, #0]
 8009912:	6825      	ldr	r5, [r4, #0]
 8009914:	6961      	ldr	r1, [r4, #20]
 8009916:	1d18      	adds	r0, r3, #4
 8009918:	6030      	str	r0, [r6, #0]
 800991a:	062e      	lsls	r6, r5, #24
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	d501      	bpl.n	8009924 <_printf_i+0x1c0>
 8009920:	6019      	str	r1, [r3, #0]
 8009922:	e002      	b.n	800992a <_printf_i+0x1c6>
 8009924:	0668      	lsls	r0, r5, #25
 8009926:	d5fb      	bpl.n	8009920 <_printf_i+0x1bc>
 8009928:	8019      	strh	r1, [r3, #0]
 800992a:	2300      	movs	r3, #0
 800992c:	6123      	str	r3, [r4, #16]
 800992e:	4616      	mov	r6, r2
 8009930:	e7bc      	b.n	80098ac <_printf_i+0x148>
 8009932:	6833      	ldr	r3, [r6, #0]
 8009934:	1d1a      	adds	r2, r3, #4
 8009936:	6032      	str	r2, [r6, #0]
 8009938:	681e      	ldr	r6, [r3, #0]
 800993a:	6862      	ldr	r2, [r4, #4]
 800993c:	2100      	movs	r1, #0
 800993e:	4630      	mov	r0, r6
 8009940:	f7f6 fc6e 	bl	8000220 <memchr>
 8009944:	b108      	cbz	r0, 800994a <_printf_i+0x1e6>
 8009946:	1b80      	subs	r0, r0, r6
 8009948:	6060      	str	r0, [r4, #4]
 800994a:	6863      	ldr	r3, [r4, #4]
 800994c:	6123      	str	r3, [r4, #16]
 800994e:	2300      	movs	r3, #0
 8009950:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009954:	e7aa      	b.n	80098ac <_printf_i+0x148>
 8009956:	6923      	ldr	r3, [r4, #16]
 8009958:	4632      	mov	r2, r6
 800995a:	4649      	mov	r1, r9
 800995c:	4640      	mov	r0, r8
 800995e:	47d0      	blx	sl
 8009960:	3001      	adds	r0, #1
 8009962:	d0ad      	beq.n	80098c0 <_printf_i+0x15c>
 8009964:	6823      	ldr	r3, [r4, #0]
 8009966:	079b      	lsls	r3, r3, #30
 8009968:	d413      	bmi.n	8009992 <_printf_i+0x22e>
 800996a:	68e0      	ldr	r0, [r4, #12]
 800996c:	9b03      	ldr	r3, [sp, #12]
 800996e:	4298      	cmp	r0, r3
 8009970:	bfb8      	it	lt
 8009972:	4618      	movlt	r0, r3
 8009974:	e7a6      	b.n	80098c4 <_printf_i+0x160>
 8009976:	2301      	movs	r3, #1
 8009978:	4632      	mov	r2, r6
 800997a:	4649      	mov	r1, r9
 800997c:	4640      	mov	r0, r8
 800997e:	47d0      	blx	sl
 8009980:	3001      	adds	r0, #1
 8009982:	d09d      	beq.n	80098c0 <_printf_i+0x15c>
 8009984:	3501      	adds	r5, #1
 8009986:	68e3      	ldr	r3, [r4, #12]
 8009988:	9903      	ldr	r1, [sp, #12]
 800998a:	1a5b      	subs	r3, r3, r1
 800998c:	42ab      	cmp	r3, r5
 800998e:	dcf2      	bgt.n	8009976 <_printf_i+0x212>
 8009990:	e7eb      	b.n	800996a <_printf_i+0x206>
 8009992:	2500      	movs	r5, #0
 8009994:	f104 0619 	add.w	r6, r4, #25
 8009998:	e7f5      	b.n	8009986 <_printf_i+0x222>
 800999a:	bf00      	nop
 800999c:	08009e66 	.word	0x08009e66
 80099a0:	08009e77 	.word	0x08009e77

080099a4 <memmove>:
 80099a4:	4288      	cmp	r0, r1
 80099a6:	b510      	push	{r4, lr}
 80099a8:	eb01 0402 	add.w	r4, r1, r2
 80099ac:	d902      	bls.n	80099b4 <memmove+0x10>
 80099ae:	4284      	cmp	r4, r0
 80099b0:	4623      	mov	r3, r4
 80099b2:	d807      	bhi.n	80099c4 <memmove+0x20>
 80099b4:	1e43      	subs	r3, r0, #1
 80099b6:	42a1      	cmp	r1, r4
 80099b8:	d008      	beq.n	80099cc <memmove+0x28>
 80099ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099c2:	e7f8      	b.n	80099b6 <memmove+0x12>
 80099c4:	4402      	add	r2, r0
 80099c6:	4601      	mov	r1, r0
 80099c8:	428a      	cmp	r2, r1
 80099ca:	d100      	bne.n	80099ce <memmove+0x2a>
 80099cc:	bd10      	pop	{r4, pc}
 80099ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099d6:	e7f7      	b.n	80099c8 <memmove+0x24>

080099d8 <_sbrk_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	4d06      	ldr	r5, [pc, #24]	@ (80099f4 <_sbrk_r+0x1c>)
 80099dc:	2300      	movs	r3, #0
 80099de:	4604      	mov	r4, r0
 80099e0:	4608      	mov	r0, r1
 80099e2:	602b      	str	r3, [r5, #0]
 80099e4:	f7fa f972 	bl	8003ccc <_sbrk>
 80099e8:	1c43      	adds	r3, r0, #1
 80099ea:	d102      	bne.n	80099f2 <_sbrk_r+0x1a>
 80099ec:	682b      	ldr	r3, [r5, #0]
 80099ee:	b103      	cbz	r3, 80099f2 <_sbrk_r+0x1a>
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	bd38      	pop	{r3, r4, r5, pc}
 80099f4:	200005e0 	.word	0x200005e0

080099f8 <memcpy>:
 80099f8:	440a      	add	r2, r1
 80099fa:	4291      	cmp	r1, r2
 80099fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a00:	d100      	bne.n	8009a04 <memcpy+0xc>
 8009a02:	4770      	bx	lr
 8009a04:	b510      	push	{r4, lr}
 8009a06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a0e:	4291      	cmp	r1, r2
 8009a10:	d1f9      	bne.n	8009a06 <memcpy+0xe>
 8009a12:	bd10      	pop	{r4, pc}

08009a14 <_realloc_r>:
 8009a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a18:	4680      	mov	r8, r0
 8009a1a:	4615      	mov	r5, r2
 8009a1c:	460c      	mov	r4, r1
 8009a1e:	b921      	cbnz	r1, 8009a2a <_realloc_r+0x16>
 8009a20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a24:	4611      	mov	r1, r2
 8009a26:	f7ff bc4b 	b.w	80092c0 <_malloc_r>
 8009a2a:	b92a      	cbnz	r2, 8009a38 <_realloc_r+0x24>
 8009a2c:	f7ff fbdc 	bl	80091e8 <_free_r>
 8009a30:	2400      	movs	r4, #0
 8009a32:	4620      	mov	r0, r4
 8009a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a38:	f000 f81a 	bl	8009a70 <_malloc_usable_size_r>
 8009a3c:	4285      	cmp	r5, r0
 8009a3e:	4606      	mov	r6, r0
 8009a40:	d802      	bhi.n	8009a48 <_realloc_r+0x34>
 8009a42:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009a46:	d8f4      	bhi.n	8009a32 <_realloc_r+0x1e>
 8009a48:	4629      	mov	r1, r5
 8009a4a:	4640      	mov	r0, r8
 8009a4c:	f7ff fc38 	bl	80092c0 <_malloc_r>
 8009a50:	4607      	mov	r7, r0
 8009a52:	2800      	cmp	r0, #0
 8009a54:	d0ec      	beq.n	8009a30 <_realloc_r+0x1c>
 8009a56:	42b5      	cmp	r5, r6
 8009a58:	462a      	mov	r2, r5
 8009a5a:	4621      	mov	r1, r4
 8009a5c:	bf28      	it	cs
 8009a5e:	4632      	movcs	r2, r6
 8009a60:	f7ff ffca 	bl	80099f8 <memcpy>
 8009a64:	4621      	mov	r1, r4
 8009a66:	4640      	mov	r0, r8
 8009a68:	f7ff fbbe 	bl	80091e8 <_free_r>
 8009a6c:	463c      	mov	r4, r7
 8009a6e:	e7e0      	b.n	8009a32 <_realloc_r+0x1e>

08009a70 <_malloc_usable_size_r>:
 8009a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a74:	1f18      	subs	r0, r3, #4
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	bfbc      	itt	lt
 8009a7a:	580b      	ldrlt	r3, [r1, r0]
 8009a7c:	18c0      	addlt	r0, r0, r3
 8009a7e:	4770      	bx	lr

08009a80 <floor>:
 8009a80:	ec51 0b10 	vmov	r0, r1, d0
 8009a84:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a8c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8009a90:	2e13      	cmp	r6, #19
 8009a92:	460c      	mov	r4, r1
 8009a94:	4605      	mov	r5, r0
 8009a96:	4680      	mov	r8, r0
 8009a98:	dc34      	bgt.n	8009b04 <floor+0x84>
 8009a9a:	2e00      	cmp	r6, #0
 8009a9c:	da17      	bge.n	8009ace <floor+0x4e>
 8009a9e:	a332      	add	r3, pc, #200	@ (adr r3, 8009b68 <floor+0xe8>)
 8009aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa4:	f7f6 fc12 	bl	80002cc <__adddf3>
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	2300      	movs	r3, #0
 8009aac:	f7f7 f854 	bl	8000b58 <__aeabi_dcmpgt>
 8009ab0:	b150      	cbz	r0, 8009ac8 <floor+0x48>
 8009ab2:	2c00      	cmp	r4, #0
 8009ab4:	da55      	bge.n	8009b62 <floor+0xe2>
 8009ab6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8009aba:	432c      	orrs	r4, r5
 8009abc:	2500      	movs	r5, #0
 8009abe:	42ac      	cmp	r4, r5
 8009ac0:	4c2b      	ldr	r4, [pc, #172]	@ (8009b70 <floor+0xf0>)
 8009ac2:	bf08      	it	eq
 8009ac4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009ac8:	4621      	mov	r1, r4
 8009aca:	4628      	mov	r0, r5
 8009acc:	e023      	b.n	8009b16 <floor+0x96>
 8009ace:	4f29      	ldr	r7, [pc, #164]	@ (8009b74 <floor+0xf4>)
 8009ad0:	4137      	asrs	r7, r6
 8009ad2:	ea01 0307 	and.w	r3, r1, r7
 8009ad6:	4303      	orrs	r3, r0
 8009ad8:	d01d      	beq.n	8009b16 <floor+0x96>
 8009ada:	a323      	add	r3, pc, #140	@ (adr r3, 8009b68 <floor+0xe8>)
 8009adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae0:	f7f6 fbf4 	bl	80002cc <__adddf3>
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	f7f7 f836 	bl	8000b58 <__aeabi_dcmpgt>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d0eb      	beq.n	8009ac8 <floor+0x48>
 8009af0:	2c00      	cmp	r4, #0
 8009af2:	bfbe      	ittt	lt
 8009af4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8009af8:	4133      	asrlt	r3, r6
 8009afa:	18e4      	addlt	r4, r4, r3
 8009afc:	ea24 0407 	bic.w	r4, r4, r7
 8009b00:	2500      	movs	r5, #0
 8009b02:	e7e1      	b.n	8009ac8 <floor+0x48>
 8009b04:	2e33      	cmp	r6, #51	@ 0x33
 8009b06:	dd0a      	ble.n	8009b1e <floor+0x9e>
 8009b08:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8009b0c:	d103      	bne.n	8009b16 <floor+0x96>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	460b      	mov	r3, r1
 8009b12:	f7f6 fbdb 	bl	80002cc <__adddf3>
 8009b16:	ec41 0b10 	vmov	d0, r0, r1
 8009b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b1e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8009b22:	f04f 37ff 	mov.w	r7, #4294967295
 8009b26:	40df      	lsrs	r7, r3
 8009b28:	4207      	tst	r7, r0
 8009b2a:	d0f4      	beq.n	8009b16 <floor+0x96>
 8009b2c:	a30e      	add	r3, pc, #56	@ (adr r3, 8009b68 <floor+0xe8>)
 8009b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b32:	f7f6 fbcb 	bl	80002cc <__adddf3>
 8009b36:	2200      	movs	r2, #0
 8009b38:	2300      	movs	r3, #0
 8009b3a:	f7f7 f80d 	bl	8000b58 <__aeabi_dcmpgt>
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d0c2      	beq.n	8009ac8 <floor+0x48>
 8009b42:	2c00      	cmp	r4, #0
 8009b44:	da0a      	bge.n	8009b5c <floor+0xdc>
 8009b46:	2e14      	cmp	r6, #20
 8009b48:	d101      	bne.n	8009b4e <floor+0xce>
 8009b4a:	3401      	adds	r4, #1
 8009b4c:	e006      	b.n	8009b5c <floor+0xdc>
 8009b4e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8009b52:	2301      	movs	r3, #1
 8009b54:	40b3      	lsls	r3, r6
 8009b56:	441d      	add	r5, r3
 8009b58:	4545      	cmp	r5, r8
 8009b5a:	d3f6      	bcc.n	8009b4a <floor+0xca>
 8009b5c:	ea25 0507 	bic.w	r5, r5, r7
 8009b60:	e7b2      	b.n	8009ac8 <floor+0x48>
 8009b62:	2500      	movs	r5, #0
 8009b64:	462c      	mov	r4, r5
 8009b66:	e7af      	b.n	8009ac8 <floor+0x48>
 8009b68:	8800759c 	.word	0x8800759c
 8009b6c:	7e37e43c 	.word	0x7e37e43c
 8009b70:	bff00000 	.word	0xbff00000
 8009b74:	000fffff 	.word	0x000fffff

08009b78 <_init>:
 8009b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7a:	bf00      	nop
 8009b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b7e:	bc08      	pop	{r3}
 8009b80:	469e      	mov	lr, r3
 8009b82:	4770      	bx	lr

08009b84 <_fini>:
 8009b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b86:	bf00      	nop
 8009b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b8a:	bc08      	pop	{r3}
 8009b8c:	469e      	mov	lr, r3
 8009b8e:	4770      	bx	lr
