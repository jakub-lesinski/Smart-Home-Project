
smarthome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  0800aa98  0800aa98  0001aa98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae30  0800ae30  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae30  0800ae30  0001ae30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae38  0800ae38  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae38  0800ae38  0001ae38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae3c  0800ae3c  0001ae3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800ae40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  20000188  0800afc4  00020188  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  0800afc4  0002066c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000190d7  00000000  00000000  000201f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003829  00000000  00000000  000392ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e0  00000000  00000000  0003caf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001067  00000000  00000000  0003dfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004db2  00000000  00000000  0003f03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ce82  00000000  00000000  00043df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6cc6  00000000  00000000  00060c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ec4  00000000  00000000  0015793c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0015d800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000188 	.word	0x20000188
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aa80 	.word	0x0800aa80

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000018c 	.word	0x2000018c
 800020c:	0800aa80 	.word	0x0800aa80

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2f>:
 8000bdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be4:	bf24      	itt	cs
 8000be6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bee:	d90d      	bls.n	8000c0c <__aeabi_d2f+0x30>
 8000bf0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bfc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c04:	bf08      	it	eq
 8000c06:	f020 0001 	biceq.w	r0, r0, #1
 8000c0a:	4770      	bx	lr
 8000c0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c10:	d121      	bne.n	8000c56 <__aeabi_d2f+0x7a>
 8000c12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c16:	bfbc      	itt	lt
 8000c18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	4770      	bxlt	lr
 8000c1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c26:	f1c2 0218 	rsb	r2, r2, #24
 8000c2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c32:	fa20 f002 	lsr.w	r0, r0, r2
 8000c36:	bf18      	it	ne
 8000c38:	f040 0001 	orrne.w	r0, r0, #1
 8000c3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c48:	ea40 000c 	orr.w	r0, r0, ip
 8000c4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c54:	e7cc      	b.n	8000bf0 <__aeabi_d2f+0x14>
 8000c56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5a:	d107      	bne.n	8000c6c <__aeabi_d2f+0x90>
 8000c5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c60:	bf1e      	ittt	ne
 8000c62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6a:	4770      	bxne	lr
 8000c6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <__aeabi_uldivmod>:
 8000c7c:	b953      	cbnz	r3, 8000c94 <__aeabi_uldivmod+0x18>
 8000c7e:	b94a      	cbnz	r2, 8000c94 <__aeabi_uldivmod+0x18>
 8000c80:	2900      	cmp	r1, #0
 8000c82:	bf08      	it	eq
 8000c84:	2800      	cmpeq	r0, #0
 8000c86:	bf1c      	itt	ne
 8000c88:	f04f 31ff 	movne.w	r1, #4294967295
 8000c8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c90:	f000 b970 	b.w	8000f74 <__aeabi_idiv0>
 8000c94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c9c:	f000 f806 	bl	8000cac <__udivmoddi4>
 8000ca0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca8:	b004      	add	sp, #16
 8000caa:	4770      	bx	lr

08000cac <__udivmoddi4>:
 8000cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb0:	9e08      	ldr	r6, [sp, #32]
 8000cb2:	460d      	mov	r5, r1
 8000cb4:	4604      	mov	r4, r0
 8000cb6:	460f      	mov	r7, r1
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d14a      	bne.n	8000d52 <__udivmoddi4+0xa6>
 8000cbc:	428a      	cmp	r2, r1
 8000cbe:	4694      	mov	ip, r2
 8000cc0:	d965      	bls.n	8000d8e <__udivmoddi4+0xe2>
 8000cc2:	fab2 f382 	clz	r3, r2
 8000cc6:	b143      	cbz	r3, 8000cda <__udivmoddi4+0x2e>
 8000cc8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ccc:	f1c3 0220 	rsb	r2, r3, #32
 8000cd0:	409f      	lsls	r7, r3
 8000cd2:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd6:	4317      	orrs	r7, r2
 8000cd8:	409c      	lsls	r4, r3
 8000cda:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cde:	fa1f f58c 	uxth.w	r5, ip
 8000ce2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce6:	0c22      	lsrs	r2, r4, #16
 8000ce8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cf0:	fb01 f005 	mul.w	r0, r1, r5
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	d90a      	bls.n	8000d0e <__udivmoddi4+0x62>
 8000cf8:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d00:	f080 811c 	bcs.w	8000f3c <__udivmoddi4+0x290>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f240 8119 	bls.w	8000f3c <__udivmoddi4+0x290>
 8000d0a:	3902      	subs	r1, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a12      	subs	r2, r2, r0
 8000d10:	b2a4      	uxth	r4, r4
 8000d12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1e:	fb00 f505 	mul.w	r5, r0, r5
 8000d22:	42a5      	cmp	r5, r4
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x90>
 8000d26:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2e:	f080 8107 	bcs.w	8000f40 <__udivmoddi4+0x294>
 8000d32:	42a5      	cmp	r5, r4
 8000d34:	f240 8104 	bls.w	8000f40 <__udivmoddi4+0x294>
 8000d38:	4464      	add	r4, ip
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d40:	1b64      	subs	r4, r4, r5
 8000d42:	2100      	movs	r1, #0
 8000d44:	b11e      	cbz	r6, 8000d4e <__udivmoddi4+0xa2>
 8000d46:	40dc      	lsrs	r4, r3
 8000d48:	2300      	movs	r3, #0
 8000d4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0xbc>
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	f000 80ed 	beq.w	8000f36 <__udivmoddi4+0x28a>
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d62:	4608      	mov	r0, r1
 8000d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d68:	fab3 f183 	clz	r1, r3
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	d149      	bne.n	8000e04 <__udivmoddi4+0x158>
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	d302      	bcc.n	8000d7a <__udivmoddi4+0xce>
 8000d74:	4282      	cmp	r2, r0
 8000d76:	f200 80f8 	bhi.w	8000f6a <__udivmoddi4+0x2be>
 8000d7a:	1a84      	subs	r4, r0, r2
 8000d7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d80:	2001      	movs	r0, #1
 8000d82:	4617      	mov	r7, r2
 8000d84:	2e00      	cmp	r6, #0
 8000d86:	d0e2      	beq.n	8000d4e <__udivmoddi4+0xa2>
 8000d88:	e9c6 4700 	strd	r4, r7, [r6]
 8000d8c:	e7df      	b.n	8000d4e <__udivmoddi4+0xa2>
 8000d8e:	b902      	cbnz	r2, 8000d92 <__udivmoddi4+0xe6>
 8000d90:	deff      	udf	#255	; 0xff
 8000d92:	fab2 f382 	clz	r3, r2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x210>
 8000d9c:	1a8a      	subs	r2, r1, r2
 8000d9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	2101      	movs	r1, #1
 8000da8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dac:	fb07 2015 	mls	r0, r7, r5, r2
 8000db0:	0c22      	lsrs	r2, r4, #16
 8000db2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db6:	fb0e f005 	mul.w	r0, lr, r5
 8000dba:	4290      	cmp	r0, r2
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x124>
 8000dbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x122>
 8000dc8:	4290      	cmp	r0, r2
 8000dca:	f200 80cb 	bhi.w	8000f64 <__udivmoddi4+0x2b8>
 8000dce:	4645      	mov	r5, r8
 8000dd0:	1a12      	subs	r2, r2, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000ddc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de0:	fb0e fe00 	mul.w	lr, lr, r0
 8000de4:	45a6      	cmp	lr, r4
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x14e>
 8000de8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df0:	d202      	bcs.n	8000df8 <__udivmoddi4+0x14c>
 8000df2:	45a6      	cmp	lr, r4
 8000df4:	f200 80bb 	bhi.w	8000f6e <__udivmoddi4+0x2c2>
 8000df8:	4610      	mov	r0, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e02:	e79f      	b.n	8000d44 <__udivmoddi4+0x98>
 8000e04:	f1c1 0720 	rsb	r7, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e12:	fa05 f401 	lsl.w	r4, r5, r1
 8000e16:	fa20 f307 	lsr.w	r3, r0, r7
 8000e1a:	40fd      	lsrs	r5, r7
 8000e1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e26:	fa1f fe8c 	uxth.w	lr, ip
 8000e2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e34:	fb08 f50e 	mul.w	r5, r8, lr
 8000e38:	42a5      	cmp	r5, r4
 8000e3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e42:	d90b      	bls.n	8000e5c <__udivmoddi4+0x1b0>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e4c:	f080 8088 	bcs.w	8000f60 <__udivmoddi4+0x2b4>
 8000e50:	42a5      	cmp	r5, r4
 8000e52:	f240 8085 	bls.w	8000f60 <__udivmoddi4+0x2b4>
 8000e56:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5a:	4464      	add	r4, ip
 8000e5c:	1b64      	subs	r4, r4, r5
 8000e5e:	b29d      	uxth	r5, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e70:	45a6      	cmp	lr, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1da>
 8000e74:	eb1c 0404 	adds.w	r4, ip, r4
 8000e78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e7c:	d26c      	bcs.n	8000f58 <__udivmoddi4+0x2ac>
 8000e7e:	45a6      	cmp	lr, r4
 8000e80:	d96a      	bls.n	8000f58 <__udivmoddi4+0x2ac>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	4464      	add	r4, ip
 8000e86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8e:	eba4 040e 	sub.w	r4, r4, lr
 8000e92:	42ac      	cmp	r4, r5
 8000e94:	46c8      	mov	r8, r9
 8000e96:	46ae      	mov	lr, r5
 8000e98:	d356      	bcc.n	8000f48 <__udivmoddi4+0x29c>
 8000e9a:	d053      	beq.n	8000f44 <__udivmoddi4+0x298>
 8000e9c:	b156      	cbz	r6, 8000eb4 <__udivmoddi4+0x208>
 8000e9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000ea2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea6:	fa04 f707 	lsl.w	r7, r4, r7
 8000eaa:	40ca      	lsrs	r2, r1
 8000eac:	40cc      	lsrs	r4, r1
 8000eae:	4317      	orrs	r7, r2
 8000eb0:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ebc:	f1c3 0120 	rsb	r1, r3, #32
 8000ec0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ecc:	409d      	lsls	r5, r3
 8000ece:	432a      	orrs	r2, r5
 8000ed0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed4:	fa1f fe8c 	uxth.w	lr, ip
 8000ed8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000edc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ee0:	0c11      	lsrs	r1, r2, #16
 8000ee2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee6:	fb00 f50e 	mul.w	r5, r0, lr
 8000eea:	428d      	cmp	r5, r1
 8000eec:	fa04 f403 	lsl.w	r4, r4, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x258>
 8000ef2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efa:	d22f      	bcs.n	8000f5c <__udivmoddi4+0x2b0>
 8000efc:	428d      	cmp	r5, r1
 8000efe:	d92d      	bls.n	8000f5c <__udivmoddi4+0x2b0>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4461      	add	r1, ip
 8000f04:	1b49      	subs	r1, r1, r5
 8000f06:	b292      	uxth	r2, r2
 8000f08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	fb05 f10e 	mul.w	r1, r5, lr
 8000f18:	4291      	cmp	r1, r2
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x282>
 8000f1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f24:	d216      	bcs.n	8000f54 <__udivmoddi4+0x2a8>
 8000f26:	4291      	cmp	r1, r2
 8000f28:	d914      	bls.n	8000f54 <__udivmoddi4+0x2a8>
 8000f2a:	3d02      	subs	r5, #2
 8000f2c:	4462      	add	r2, ip
 8000f2e:	1a52      	subs	r2, r2, r1
 8000f30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f34:	e738      	b.n	8000da8 <__udivmoddi4+0xfc>
 8000f36:	4631      	mov	r1, r6
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e708      	b.n	8000d4e <__udivmoddi4+0xa2>
 8000f3c:	4639      	mov	r1, r7
 8000f3e:	e6e6      	b.n	8000d0e <__udivmoddi4+0x62>
 8000f40:	4610      	mov	r0, r2
 8000f42:	e6fb      	b.n	8000d3c <__udivmoddi4+0x90>
 8000f44:	4548      	cmp	r0, r9
 8000f46:	d2a9      	bcs.n	8000e9c <__udivmoddi4+0x1f0>
 8000f48:	ebb9 0802 	subs.w	r8, r9, r2
 8000f4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f50:	3b01      	subs	r3, #1
 8000f52:	e7a3      	b.n	8000e9c <__udivmoddi4+0x1f0>
 8000f54:	4645      	mov	r5, r8
 8000f56:	e7ea      	b.n	8000f2e <__udivmoddi4+0x282>
 8000f58:	462b      	mov	r3, r5
 8000f5a:	e794      	b.n	8000e86 <__udivmoddi4+0x1da>
 8000f5c:	4640      	mov	r0, r8
 8000f5e:	e7d1      	b.n	8000f04 <__udivmoddi4+0x258>
 8000f60:	46d0      	mov	r8, sl
 8000f62:	e77b      	b.n	8000e5c <__udivmoddi4+0x1b0>
 8000f64:	3d02      	subs	r5, #2
 8000f66:	4462      	add	r2, ip
 8000f68:	e732      	b.n	8000dd0 <__udivmoddi4+0x124>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e70a      	b.n	8000d84 <__udivmoddi4+0xd8>
 8000f6e:	4464      	add	r4, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e742      	b.n	8000dfa <__udivmoddi4+0x14e>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 fa47 	bl	8001414 <null_ptr_check>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d117      	bne.n	8000fc2 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2201      	movs	r2, #1
 8000f98:	20d0      	movs	r0, #208	; 0xd0
 8000f9a:	f000 f818 	bl	8000fce <bmp2_get_regs>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8000fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10b      	bne.n	8000fc2 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b58      	cmp	r3, #88	; 0x58
 8000fb0:	d105      	bne.n	8000fbe <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 fa79 	bl	80014aa <get_calib_param>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	e001      	b.n	8000fc2 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8000fbe:	23fc      	movs	r3, #252	; 0xfc
 8000fc0:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000fce:	b590      	push	{r4, r7, lr}
 8000fd0:	b087      	sub	sp, #28
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	4603      	mov	r3, r0
 8000fdc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000fde:	6838      	ldr	r0, [r7, #0]
 8000fe0:	f000 fa18 	bl	8001414 <null_ptr_check>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8000fe8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d11e      	bne.n	800102e <bmp2_get_regs+0x60>
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d01b      	beq.n	800102e <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	785b      	ldrb	r3, [r3, #1]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d103      	bne.n	8001006 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001004:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	68dc      	ldr	r4, [r3, #12]
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	7bf8      	ldrb	r0, [r7, #15]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	68b9      	ldr	r1, [r7, #8]
 8001014:	47a0      	blx	r4
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d004      	beq.n	8001032 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 8001028:	23fe      	movs	r3, #254	; 0xfe
 800102a:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800102c:	e001      	b.n	8001032 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800102e:	23ff      	movs	r3, #255	; 0xff
 8001030:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001032:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001036:	4618      	mov	r0, r3
 8001038:	371c      	adds	r7, #28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd90      	pop	{r4, r7, pc}

0800103e <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 800103e:	b590      	push	{r4, r7, lr}
 8001040:	b08b      	sub	sp, #44	; 0x2c
 8001042:	af00      	add	r7, sp, #0
 8001044:	60f8      	str	r0, [r7, #12]
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b04      	cmp	r3, #4
 8001050:	d901      	bls.n	8001056 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8001052:	2304      	movs	r3, #4
 8001054:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8001056:	6838      	ldr	r0, [r7, #0]
 8001058:	f000 f9dc 	bl	8001414 <null_ptr_check>
 800105c:	4603      	mov	r3, r0
 800105e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001062:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001066:	2b00      	cmp	r3, #0
 8001068:	d150      	bne.n	800110c <bmp2_set_regs+0xce>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d04d      	beq.n	800110c <bmp2_set_regs+0xce>
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d04a      	beq.n	800110c <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d043      	beq.n	8001104 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	785b      	ldrb	r3, [r3, #1]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d114      	bne.n	80010b4 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800108a:	2300      	movs	r3, #0
 800108c:	77fb      	strb	r3, [r7, #31]
 800108e:	e00d      	b.n	80010ac <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 8001090:	7ffb      	ldrb	r3, [r7, #31]
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	4413      	add	r3, r2
 8001096:	781a      	ldrb	r2, [r3, #0]
 8001098:	7ffb      	ldrb	r3, [r7, #31]
 800109a:	68f9      	ldr	r1, [r7, #12]
 800109c:	440b      	add	r3, r1
 800109e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010a6:	7ffb      	ldrb	r3, [r7, #31]
 80010a8:	3301      	adds	r3, #1
 80010aa:	77fb      	strb	r3, [r7, #31]
 80010ac:	7ffb      	ldrb	r3, [r7, #31]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8ed      	bhi.n	8001090 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d90b      	bls.n	80010d2 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80010ba:	f107 0114 	add.w	r1, r7, #20
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f000 f9c6 	bl	8001454 <interleave_data>
                temp_len = ((len * 2) - 1);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	3b01      	subs	r3, #1
 80010ce:	623b      	str	r3, [r7, #32]
 80010d0:	e001      	b.n	80010d6 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	691c      	ldr	r4, [r3, #16]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	7818      	ldrb	r0, [r3, #0]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f107 0114 	add.w	r1, r7, #20
 80010e6:	6a3a      	ldr	r2, [r7, #32]
 80010e8:	47a0      	blx	r4
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00b      	beq.n	8001114 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 80010fc:	23fe      	movs	r3, #254	; 0xfe
 80010fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8001102:	e007      	b.n	8001114 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8001104:	23fd      	movs	r3, #253	; 0xfd
 8001106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 800110a:	e003      	b.n	8001114 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800110c:	23ff      	movs	r3, #255	; 0xff
 800110e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001112:	e000      	b.n	8001116 <bmp2_set_regs+0xd8>
        if (len > 0)
 8001114:	bf00      	nop
    }

    return rslt;
 8001116:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800111a:	4618      	mov	r0, r3
 800111c:	372c      	adds	r7, #44	; 0x2c
 800111e:	46bd      	mov	sp, r7
 8001120:	bd90      	pop	{r4, r7, pc}

08001122 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 800112a:	23e0      	movs	r3, #224	; 0xe0
 800112c:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 800112e:	23b6      	movs	r3, #182	; 0xb6
 8001130:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001132:	f107 010d 	add.w	r1, r7, #13
 8001136:	f107 000e 	add.w	r0, r7, #14
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2201      	movs	r2, #1
 800113e:	f7ff ff7e 	bl	800103e <bmp2_set_regs>
 8001142:	4603      	mov	r3, r0
 8001144:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8001146:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b084      	sub	sp, #16
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800115c:	2300      	movs	r3, #0
 800115e:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d02d      	beq.n	80011c2 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001166:	f107 010c 	add.w	r1, r7, #12
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	2202      	movs	r2, #2
 800116e:	20f4      	movs	r0, #244	; 0xf4
 8001170:	f7ff ff2d 	bl	8000fce <bmp2_get_regs>
 8001174:	4603      	mov	r3, r0
 8001176:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d122      	bne.n	80011c6 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8001180:	7b3b      	ldrb	r3, [r7, #12]
 8001182:	095b      	lsrs	r3, r3, #5
 8001184:	b2da      	uxtb	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 800118a:	7b3b      	ldrb	r3, [r7, #12]
 800118c:	109b      	asrs	r3, r3, #2
 800118e:	b2db      	uxtb	r3, r3
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	b2da      	uxtb	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 800119a:	7b7b      	ldrb	r3, [r7, #13]
 800119c:	095b      	lsrs	r3, r3, #5
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 80011a4:	7b7b      	ldrb	r3, [r7, #13]
 80011a6:	109b      	asrs	r3, r3, #2
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 80011b4:	7b7b      	ldrb	r3, [r7, #13]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	715a      	strb	r2, [r3, #5]
 80011c0:	e001      	b.n	80011c6 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80011c2:	23ff      	movs	r3, #255	; 0xff
 80011c4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80011c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	2000      	movs	r0, #0
 80011e2:	f000 f9fd 	bl	80015e0 <conf_sensor>
 80011e6:	4603      	mov	r3, r0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d01b      	beq.n	8001238 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 8001200:	f107 010e 	add.w	r1, r7, #14
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	2201      	movs	r2, #1
 8001208:	20f3      	movs	r0, #243	; 0xf3
 800120a:	f7ff fee0 	bl	8000fce <bmp2_get_regs>
 800120e:	4603      	mov	r3, r0
 8001210:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d110      	bne.n	800123c <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 800121a:	7bbb      	ldrb	r3, [r7, #14]
 800121c:	10db      	asrs	r3, r3, #3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	b2da      	uxtb	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	b2da      	uxtb	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	705a      	strb	r2, [r3, #1]
 8001236:	e001      	b.n	800123c <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001238:	23ff      	movs	r3, #255	; 0xff
 800123a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800123c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	68b9      	ldr	r1, [r7, #8]
 800125c:	4618      	mov	r0, r3
 800125e:	f000 f9bf 	bl	80015e0 <conf_sensor>
 8001262:	4603      	mov	r3, r0
 8001264:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8001266:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	2300      	movs	r3, #0
 8001282:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d024      	beq.n	80012de <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8001294:	f107 0110 	add.w	r1, r7, #16
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	2206      	movs	r2, #6
 800129c:	20f7      	movs	r0, #247	; 0xf7
 800129e:	f7ff fe96 	bl	8000fce <bmp2_get_regs>
 80012a2:	4603      	mov	r3, r0
 80012a4:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80012a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d119      	bne.n	80012e2 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 80012ae:	f107 0208 	add.w	r2, r7, #8
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 fab9 	bl	8001830 <parse_sensor_data>
 80012be:	4603      	mov	r3, r0
 80012c0:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80012c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10b      	bne.n	80012e2 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f80b 	bl	80012ee <bmp2_compensate_data>
 80012d8:	4603      	mov	r3, r0
 80012da:	75fb      	strb	r3, [r7, #23]
 80012dc:	e001      	b.n	80012e2 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012de:	23ff      	movs	r3, #255	; 0xff
 80012e0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 f88a 	bl	8001414 <null_ptr_check>
 8001300:	4603      	mov	r3, r0
 8001302:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 8001304:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d129      	bne.n	8001360 <bmp2_compensate_data+0x72>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d026      	beq.n	8001360 <bmp2_compensate_data+0x72>
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d023      	beq.n	8001360 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	f04f 0300 	mov.w	r3, #0
 8001322:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8001326:	68b9      	ldr	r1, [r7, #8]
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	f04f 0300 	mov.w	r3, #0
 8001330:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	3308      	adds	r3, #8
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	68f9      	ldr	r1, [r7, #12]
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fabb 	bl	80018b8 <compensate_temperature>
 8001342:	4603      	mov	r3, r0
 8001344:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001346:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10a      	bne.n	8001364 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	68f9      	ldr	r1, [r7, #12]
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fba7 	bl	8001aa8 <compensate_pressure>
 800135a:	4603      	mov	r3, r0
 800135c:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 800135e:	e001      	b.n	8001364 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001360:	23ff      	movs	r3, #255	; 0xff
 8001362:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001364:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001370:	b5b0      	push	{r4, r5, r7, lr}
 8001372:	b092      	sub	sp, #72	; 0x48
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 800137c:	4b23      	ldr	r3, [pc, #140]	; (800140c <bmp2_compute_meas_time+0x9c>)
 800137e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001382:	461d      	mov	r5, r3
 8001384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001388:	682b      	ldr	r3, [r5, #0]
 800138a:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 800138c:	4b20      	ldr	r3, [pc, #128]	; (8001410 <bmp2_compute_meas_time+0xa0>)
 800138e:	f107 0410 	add.w	r4, r7, #16
 8001392:	461d      	mov	r5, r3
 8001394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001398:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800139c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f837 	bl	8001414 <null_ptr_check>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 80013ac:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d122      	bne.n	80013fa <bmp2_compute_meas_time+0x8a>
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d01f      	beq.n	80013fa <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7e1b      	ldrb	r3, [r3, #24]
 80013be:	2b03      	cmp	r3, #3
 80013c0:	d111      	bne.n	80013e6 <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	78db      	ldrb	r3, [r3, #3]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	3348      	adds	r3, #72	; 0x48
 80013ca:	443b      	add	r3, r7
 80013cc:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	789b      	ldrb	r3, [r3, #2]
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	3348      	adds	r3, #72	; 0x48
 80013d8:	443b      	add	r3, r7
 80013da:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80013de:	441a      	add	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013e4:	e00c      	b.n	8001400 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	78db      	ldrb	r3, [r3, #3]
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	3348      	adds	r3, #72	; 0x48
 80013ee:	443b      	add	r3, r7
 80013f0:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013f8:	e002      	b.n	8001400 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80013fa:	23ff      	movs	r3, #255	; 0xff
 80013fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 8001400:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8001404:	4618      	mov	r0, r3
 8001406:	3748      	adds	r7, #72	; 0x48
 8001408:	46bd      	mov	sp, r7
 800140a:	bdb0      	pop	{r4, r5, r7, pc}
 800140c:	0800aa98 	.word	0x0800aa98
 8001410:	0800aaac 	.word	0x0800aaac

08001414 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00b      	beq.n	800143a <null_ptr_check+0x26>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d007      	beq.n	800143a <null_ptr_check+0x26>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <null_ptr_check+0x26>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d102      	bne.n	8001440 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 800143a:	23ff      	movs	r3, #255	; 0xff
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	e001      	b.n	8001444 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001444:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001454:	b480      	push	{r7}
 8001456:	b087      	sub	sp, #28
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
 8001460:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001462:	2301      	movs	r3, #1
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	e015      	b.n	8001494 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	441a      	add	r2, r3
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	3b01      	subs	r3, #1
 8001474:	68b9      	ldr	r1, [r7, #8]
 8001476:	440b      	add	r3, r1
 8001478:	7812      	ldrb	r2, [r2, #0]
 800147a:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	441a      	add	r2, r3
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	68b9      	ldr	r1, [r7, #8]
 8001488:	440b      	add	r3, r1
 800148a:	7812      	ldrb	r2, [r2, #0]
 800148c:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	3301      	adds	r3, #1
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d3e5      	bcc.n	8001468 <interleave_data+0x14>
    }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	371c      	adds	r7, #28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b08a      	sub	sp, #40	; 0x28
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	f107 0310 	add.w	r3, r7, #16
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]
 80014c6:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 80014c8:	f107 010c 	add.w	r1, r7, #12
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2219      	movs	r2, #25
 80014d0:	2088      	movs	r0, #136	; 0x88
 80014d2:	f7ff fd7c 	bl	8000fce <bmp2_get_regs>
 80014d6:	4603      	mov	r3, r0
 80014d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 80014dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d177      	bne.n	80015d4 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 80014e4:	7b7b      	ldrb	r3, [r7, #13]
 80014e6:	021b      	lsls	r3, r3, #8
 80014e8:	b21a      	sxth	r2, r3
 80014ea:	7b3b      	ldrb	r3, [r7, #12]
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	4313      	orrs	r3, r2
 80014f0:	b21b      	sxth	r3, r3
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	7bbb      	ldrb	r3, [r7, #14]
 8001500:	b21b      	sxth	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	b21a      	sxth	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 800150a:	7c7b      	ldrb	r3, [r7, #17]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	b21a      	sxth	r2, r3
 8001510:	7c3b      	ldrb	r3, [r7, #16]
 8001512:	b21b      	sxth	r3, r3
 8001514:	4313      	orrs	r3, r2
 8001516:	b21a      	sxth	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 800151c:	7cfb      	ldrb	r3, [r7, #19]
 800151e:	021b      	lsls	r3, r3, #8
 8001520:	b21a      	sxth	r2, r3
 8001522:	7cbb      	ldrb	r3, [r7, #18]
 8001524:	b21b      	sxth	r3, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	b21b      	sxth	r3, r3
 800152a:	b29a      	uxth	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 8001530:	7d7b      	ldrb	r3, [r7, #21]
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	b21a      	sxth	r2, r3
 8001536:	7d3b      	ldrb	r3, [r7, #20]
 8001538:	b21b      	sxth	r3, r3
 800153a:	4313      	orrs	r3, r2
 800153c:	b21a      	sxth	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8001542:	7dfb      	ldrb	r3, [r7, #23]
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	b21a      	sxth	r2, r3
 8001548:	7dbb      	ldrb	r3, [r7, #22]
 800154a:	b21b      	sxth	r3, r3
 800154c:	4313      	orrs	r3, r2
 800154e:	b21a      	sxth	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001554:	7e7b      	ldrb	r3, [r7, #25]
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	b21a      	sxth	r2, r3
 800155a:	7e3b      	ldrb	r3, [r7, #24]
 800155c:	b21b      	sxth	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	b21a      	sxth	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8001566:	7efb      	ldrb	r3, [r7, #27]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	b21a      	sxth	r2, r3
 800156c:	7ebb      	ldrb	r3, [r7, #26]
 800156e:	b21b      	sxth	r3, r3
 8001570:	4313      	orrs	r3, r2
 8001572:	b21a      	sxth	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001578:	7f7b      	ldrb	r3, [r7, #29]
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	b21a      	sxth	r2, r3
 800157e:	7f3b      	ldrb	r3, [r7, #28]
 8001580:	b21b      	sxth	r3, r3
 8001582:	4313      	orrs	r3, r2
 8001584:	b21a      	sxth	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 800158a:	7ffb      	ldrb	r3, [r7, #31]
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	b21a      	sxth	r2, r3
 8001590:	7fbb      	ldrb	r3, [r7, #30]
 8001592:	b21b      	sxth	r3, r3
 8001594:	4313      	orrs	r3, r2
 8001596:	b21a      	sxth	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 800159c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	4313      	orrs	r3, r2
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 80015b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80015be:	b21b      	sxth	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 80015c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015cc:	b25a      	sxtb	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 80015d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3728      	adds	r7, #40	; 0x28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80015ee:	2300      	movs	r3, #0
 80015f0:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 80015f2:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 80015f6:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d074      	beq.n	80016e8 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80015fe:	f107 0114 	add.w	r1, r7, #20
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2202      	movs	r2, #2
 8001606:	20f4      	movs	r0, #244	; 0xf4
 8001608:	f7ff fce1 	bl	8000fce <bmp2_get_regs>
 800160c:	4603      	mov	r3, r0
 800160e:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001610:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d169      	bne.n	80016ec <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff fd82 	bl	8001122 <bmp2_soft_reset>
 800161e:	4603      	mov	r3, r0
 8001620:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001622:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d160      	bne.n	80016ec <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	68b9      	ldr	r1, [r7, #8]
 8001630:	4618      	mov	r0, r3
 8001632:	f000 f861 	bl	80016f8 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 8001636:	7d7b      	ldrb	r3, [r7, #21]
 8001638:	b25b      	sxtb	r3, r3
 800163a:	f003 031f 	and.w	r3, r3, #31
 800163e:	b25a      	sxtb	r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	789b      	ldrb	r3, [r3, #2]
 8001644:	015b      	lsls	r3, r3, #5
 8001646:	b25b      	sxtb	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	b25b      	sxtb	r3, r3
 800164c:	b2db      	uxtb	r3, r3
 800164e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001650:	7d7b      	ldrb	r3, [r7, #21]
 8001652:	b25b      	sxtb	r3, r3
 8001654:	f023 031c 	bic.w	r3, r3, #28
 8001658:	b25a      	sxtb	r2, r3
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	791b      	ldrb	r3, [r3, #4]
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	b25b      	sxtb	r3, r3
 8001662:	f003 031c 	and.w	r3, r3, #28
 8001666:	b25b      	sxtb	r3, r3
 8001668:	4313      	orrs	r3, r2
 800166a:	b25b      	sxtb	r3, r3
 800166c:	b2db      	uxtb	r3, r3
 800166e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001670:	7d7b      	ldrb	r3, [r7, #21]
 8001672:	b25b      	sxtb	r3, r3
 8001674:	f023 0301 	bic.w	r3, r3, #1
 8001678:	b25a      	sxtb	r2, r3
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	795b      	ldrb	r3, [r3, #5]
 800167e:	b25b      	sxtb	r3, r3
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	b25b      	sxtb	r3, r3
 8001686:	4313      	orrs	r3, r2
 8001688:	b25b      	sxtb	r3, r3
 800168a:	b2db      	uxtb	r3, r3
 800168c:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 800168e:	f107 0114 	add.w	r1, r7, #20
 8001692:	f107 0010 	add.w	r0, r7, #16
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2202      	movs	r2, #2
 800169a:	f7ff fcd0 	bl	800103e <bmp2_set_regs>
 800169e:	4603      	mov	r3, r0
 80016a0:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 80016a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d120      	bne.n	80016ec <conf_sensor+0x10c>
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d01d      	beq.n	80016ec <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	7bfa      	ldrb	r2, [r7, #15]
 80016b4:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 80016b6:	7d3b      	ldrb	r3, [r7, #20]
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	f023 0303 	bic.w	r3, r3, #3
 80016be:	b25a      	sxtb	r2, r3
 80016c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	4313      	orrs	r3, r2
 80016cc:	b25b      	sxtb	r3, r3
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 80016d2:	f107 0114 	add.w	r1, r7, #20
 80016d6:	f107 0010 	add.w	r0, r7, #16
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f7ff fcae 	bl	800103e <bmp2_set_regs>
 80016e2:	4603      	mov	r3, r0
 80016e4:	75fb      	strb	r3, [r7, #23]
 80016e6:	e001      	b.n	80016ec <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80016e8:	23ff      	movs	r3, #255	; 0xff
 80016ea:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80016ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	78db      	ldrb	r3, [r3, #3]
 8001706:	2b04      	cmp	r3, #4
 8001708:	f200 808b 	bhi.w	8001822 <set_os_mode+0x12a>
 800170c:	a201      	add	r2, pc, #4	; (adr r2, 8001714 <set_os_mode+0x1c>)
 800170e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001712:	bf00      	nop
 8001714:	08001729 	.word	0x08001729
 8001718:	0800175b 	.word	0x0800175b
 800171c:	0800178d 	.word	0x0800178d
 8001720:	080017bf 	.word	0x080017bf
 8001724:	080017f1 	.word	0x080017f1
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b25b      	sxtb	r3, r3
 800172e:	f003 031f 	and.w	r3, r3, #31
 8001732:	b25b      	sxtb	r3, r3
 8001734:	f043 0320 	orr.w	r3, r3, #32
 8001738:	b25b      	sxtb	r3, r3
 800173a:	b2da      	uxtb	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	b25b      	sxtb	r3, r3
 8001746:	f023 031c 	bic.w	r3, r3, #28
 800174a:	b25b      	sxtb	r3, r3
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	b25b      	sxtb	r3, r3
 8001752:	b2da      	uxtb	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	701a      	strb	r2, [r3, #0]
            break;
 8001758:	e064      	b.n	8001824 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b25b      	sxtb	r3, r3
 8001760:	f003 031f 	and.w	r3, r3, #31
 8001764:	b25b      	sxtb	r3, r3
 8001766:	f043 0320 	orr.w	r3, r3, #32
 800176a:	b25b      	sxtb	r3, r3
 800176c:	b2da      	uxtb	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	b25b      	sxtb	r3, r3
 8001778:	f023 031c 	bic.w	r3, r3, #28
 800177c:	b25b      	sxtb	r3, r3
 800177e:	f043 0308 	orr.w	r3, r3, #8
 8001782:	b25b      	sxtb	r3, r3
 8001784:	b2da      	uxtb	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	701a      	strb	r2, [r3, #0]
            break;
 800178a:	e04b      	b.n	8001824 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b25b      	sxtb	r3, r3
 8001792:	f003 031f 	and.w	r3, r3, #31
 8001796:	b25b      	sxtb	r3, r3
 8001798:	f043 0320 	orr.w	r3, r3, #32
 800179c:	b25b      	sxtb	r3, r3
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	f023 031c 	bic.w	r3, r3, #28
 80017ae:	b25b      	sxtb	r3, r3
 80017b0:	f043 030c 	orr.w	r3, r3, #12
 80017b4:	b25b      	sxtb	r3, r3
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	701a      	strb	r2, [r3, #0]
            break;
 80017bc:	e032      	b.n	8001824 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	b25b      	sxtb	r3, r3
 80017c4:	f003 031f 	and.w	r3, r3, #31
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	f043 0320 	orr.w	r3, r3, #32
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	f023 031c 	bic.w	r3, r3, #28
 80017e0:	b25b      	sxtb	r3, r3
 80017e2:	f043 0310 	orr.w	r3, r3, #16
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	701a      	strb	r2, [r3, #0]
            break;
 80017ee:	e019      	b.n	8001824 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001800:	b25b      	sxtb	r3, r3
 8001802:	b2da      	uxtb	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b25b      	sxtb	r3, r3
 800180e:	f023 031c 	bic.w	r3, r3, #28
 8001812:	b25b      	sxtb	r3, r3
 8001814:	f043 0314 	orr.w	r3, r3, #20
 8001818:	b25b      	sxtb	r3, r3
 800181a:	b2da      	uxtb	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	701a      	strb	r2, [r3, #0]
            break;
 8001820:	e000      	b.n	8001824 <set_os_mode+0x12c>
        default:
            break;
 8001822:	bf00      	nop
    }
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	031b      	lsls	r3, r3, #12
 8001840:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3301      	adds	r3, #1
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3302      	adds	r3, #2
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	091b      	lsrs	r3, r3, #4
 8001854:	b2db      	uxtb	r3, r3
 8001856:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	431a      	orrs	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	431a      	orrs	r2, r3
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3303      	adds	r3, #3
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	031b      	lsls	r3, r3, #12
 800186e:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3304      	adds	r3, #4
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3305      	adds	r3, #5
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	b2db      	uxtb	r3, r3
 8001884:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	431a      	orrs	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4313      	orrs	r3, r2
 8001890:	461a      	mov	r2, r3
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4619      	mov	r1, r3
 80018a0:	4610      	mov	r0, r2
 80018a2:	f000 fae5 	bl	8001e70 <st_check_boundaries>
 80018a6:	4603      	mov	r3, r0
 80018a8:	72fb      	strb	r3, [r7, #11]

    return rslt;
 80018aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 80018b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018bc:	b08c      	sub	sp, #48	; 0x30
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fe57 	bl	8000584 <__aeabi_i2d>
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	4b6c      	ldr	r3, [pc, #432]	; (8001a8c <compensate_temperature+0x1d4>)
 80018dc:	f7fe ffe6 	bl	80008ac <__aeabi_ddiv>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4614      	mov	r4, r2
 80018e6:	461d      	mov	r5, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	8b9b      	ldrh	r3, [r3, #28]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fe39 	bl	8000564 <__aeabi_ui2d>
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	4b66      	ldr	r3, [pc, #408]	; (8001a90 <compensate_temperature+0x1d8>)
 80018f8:	f7fe ffd8 	bl	80008ac <__aeabi_ddiv>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4620      	mov	r0, r4
 8001902:	4629      	mov	r1, r5
 8001904:	f7fe fcf0 	bl	80002e8 <__aeabi_dsub>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4614      	mov	r4, r2
 800190e:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fe34 	bl	8000584 <__aeabi_i2d>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001920:	4620      	mov	r0, r4
 8001922:	4629      	mov	r1, r5
 8001924:	f7fe fe98 	bl	8000658 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fe25 	bl	8000584 <__aeabi_i2d>
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001942:	f7fe ffb3 	bl	80008ac <__aeabi_ddiv>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4614      	mov	r4, r2
 800194c:	461d      	mov	r5, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	8b9b      	ldrh	r3, [r3, #28]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fe06 	bl	8000564 <__aeabi_ui2d>
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	4b4d      	ldr	r3, [pc, #308]	; (8001a94 <compensate_temperature+0x1dc>)
 800195e:	f7fe ffa5 	bl	80008ac <__aeabi_ddiv>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4620      	mov	r0, r4
 8001968:	4629      	mov	r1, r5
 800196a:	f7fe fcbd 	bl	80002e8 <__aeabi_dsub>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4614      	mov	r4, r2
 8001974:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fe02 	bl	8000584 <__aeabi_i2d>
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001988:	f7fe ff90 	bl	80008ac <__aeabi_ddiv>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4690      	mov	r8, r2
 8001992:	4699      	mov	r9, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	8b9b      	ldrh	r3, [r3, #28]
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fde3 	bl	8000564 <__aeabi_ui2d>
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	4b3c      	ldr	r3, [pc, #240]	; (8001a94 <compensate_temperature+0x1dc>)
 80019a4:	f7fe ff82 	bl	80008ac <__aeabi_ddiv>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4640      	mov	r0, r8
 80019ae:	4649      	mov	r1, r9
 80019b0:	f7fe fc9a 	bl	80002e8 <__aeabi_dsub>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80019b8:	4620      	mov	r0, r4
 80019ba:	4629      	mov	r1, r5
 80019bc:	f7fe fe4c 	bl	8000658 <__aeabi_dmul>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4614      	mov	r4, r2
 80019c6:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fdd8 	bl	8000584 <__aeabi_i2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
    var2 =
 80019d8:	4620      	mov	r0, r4
 80019da:	4629      	mov	r1, r5
 80019dc:	f7fe fe3c 	bl	8000658 <__aeabi_dmul>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 80019e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019f0:	f7fe fc7c 	bl	80002ec <__adddf3>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f7ff f8c6 	bl	8000b8c <__aeabi_d2iz>
 8001a00:	4602      	mov	r2, r0
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 8001a06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a0e:	f7fe fc6d 	bl	80002ec <__adddf3>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <compensate_temperature+0x1e0>)
 8001a20:	f7fe ff44 	bl	80008ac <__aeabi_ddiv>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <compensate_temperature+0x1e4>)
 8001a32:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a36:	f7ff f881 	bl	8000b3c <__aeabi_dcmplt>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d007      	beq.n	8001a50 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <compensate_temperature+0x1e4>)
 8001a46:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <compensate_temperature+0x1e8>)
 8001a56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a5a:	f7ff f88d 	bl	8000b78 <__aeabi_dcmpgt>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d007      	beq.n	8001a74 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <compensate_temperature+0x1e8>)
 8001a6a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 8001a74:	68f9      	ldr	r1, [r7, #12]
 8001a76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a7a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001a7e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3730      	adds	r7, #48	; 0x30
 8001a86:	46bd      	mov	sp, r7
 8001a88:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a8c:	40d00000 	.word	0x40d00000
 8001a90:	40900000 	.word	0x40900000
 8001a94:	40c00000 	.word	0x40c00000
 8001a98:	40b40000 	.word	0x40b40000
 8001a9c:	c0440000 	.word	0xc0440000
 8001aa0:	40554000 	.word	0x40554000
 8001aa4:	00000000 	.word	0x00000000

08001aa8 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001aa8:	b5b0      	push	{r4, r5, r7, lr}
 8001aaa:	b08c      	sub	sp, #48	; 0x30
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fd5a 	bl	8000584 <__aeabi_i2d>
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ad8:	f7fe fee8 	bl	80008ac <__aeabi_ddiv>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	4bcb      	ldr	r3, [pc, #812]	; (8001e18 <compensate_pressure+0x370>)
 8001aea:	f7fe fbfd 	bl	80002e8 <__aeabi_dsub>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001af6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001afa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001afe:	f7fe fdab 	bl	8000658 <__aeabi_dmul>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4614      	mov	r4, r2
 8001b08:	461d      	mov	r5, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fd37 	bl	8000584 <__aeabi_i2d>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	f7fe fd9b 	bl	8000658 <__aeabi_dmul>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	4bbb      	ldr	r3, [pc, #748]	; (8001e1c <compensate_pressure+0x374>)
 8001b30:	f7fe febc 	bl	80008ac <__aeabi_ddiv>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fd1e 	bl	8000584 <__aeabi_i2d>
 8001b48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b4c:	f7fe fd84 	bl	8000658 <__aeabi_dmul>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	f7fe fbc6 	bl	80002ec <__adddf3>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b68:	f7fe fbc0 	bl	80002ec <__adddf3>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	4ba9      	ldr	r3, [pc, #676]	; (8001e20 <compensate_pressure+0x378>)
 8001b7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b7e:	f7fe fe95 	bl	80008ac <__aeabi_ddiv>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4614      	mov	r4, r2
 8001b88:	461d      	mov	r5, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fcf7 	bl	8000584 <__aeabi_i2d>
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	4ba2      	ldr	r3, [pc, #648]	; (8001e24 <compensate_pressure+0x37c>)
 8001b9c:	f7fe fd5c 	bl	8000658 <__aeabi_dmul>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	f7fe fba0 	bl	80002ec <__adddf3>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fce2 	bl	8000584 <__aeabi_i2d>
 8001bc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bc4:	f7fe fd48 	bl	8000658 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bd4:	f7fe fd40 	bl	8000658 <__aeabi_dmul>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	4b90      	ldr	r3, [pc, #576]	; (8001e28 <compensate_pressure+0x380>)
 8001be6:	f7fe fe61 	bl	80008ac <__aeabi_ddiv>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4614      	mov	r4, r2
 8001bf0:	461d      	mov	r5, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fcc3 	bl	8000584 <__aeabi_i2d>
 8001bfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c02:	f7fe fd29 	bl	8000658 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	4629      	mov	r1, r5
 8001c0e:	f7fe fb6d 	bl	80002ec <__adddf3>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4610      	mov	r0, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	4b82      	ldr	r3, [pc, #520]	; (8001e28 <compensate_pressure+0x380>)
 8001c20:	f7fe fe44 	bl	80008ac <__aeabi_ddiv>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	4b7a      	ldr	r3, [pc, #488]	; (8001e1c <compensate_pressure+0x374>)
 8001c32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c36:	f7fe fe39 	bl	80008ac <__aeabi_ddiv>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	4b79      	ldr	r3, [pc, #484]	; (8001e2c <compensate_pressure+0x384>)
 8001c48:	f7fe fb50 	bl	80002ec <__adddf3>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4614      	mov	r4, r2
 8001c52:	461d      	mov	r5, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fc83 	bl	8000564 <__aeabi_ui2d>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4620      	mov	r0, r4
 8001c64:	4629      	mov	r1, r5
 8001c66:	f7fe fcf7 	bl	8000658 <__aeabi_dmul>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c7e:	f7fe ff5d 	bl	8000b3c <__aeabi_dcmplt>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10b      	bne.n	8001ca0 <compensate_pressure+0x1f8>
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c94:	f7fe ff70 	bl	8000b78 <__aeabi_dcmpgt>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 80de 	beq.w	8001e5c <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fc5d 	bl	8000564 <__aeabi_ui2d>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	f04f 0000 	mov.w	r0, #0
 8001cb2:	495f      	ldr	r1, [pc, #380]	; (8001e30 <compensate_pressure+0x388>)
 8001cb4:	f7fe fb18 	bl	80002e8 <__aeabi_dsub>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	4b5b      	ldr	r3, [pc, #364]	; (8001e34 <compensate_pressure+0x38c>)
 8001cc6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cca:	f7fe fdef 	bl	80008ac <__aeabi_ddiv>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cd6:	f7fe fb07 	bl	80002e8 <__aeabi_dsub>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	a347      	add	r3, pc, #284	; (adr r3, 8001e00 <compensate_pressure+0x358>)
 8001ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce8:	f7fe fcb6 	bl	8000658 <__aeabi_dmul>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cf8:	f7fe fdd8 	bl	80008ac <__aeabi_ddiv>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fc3a 	bl	8000584 <__aeabi_i2d>
 8001d10:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d14:	f7fe fca0 	bl	8000658 <__aeabi_dmul>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d24:	f7fe fc98 	bl	8000658 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	4b40      	ldr	r3, [pc, #256]	; (8001e38 <compensate_pressure+0x390>)
 8001d36:	f7fe fdb9 	bl	80008ac <__aeabi_ddiv>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fc1b 	bl	8000584 <__aeabi_i2d>
 8001d4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d52:	f7fe fc81 	bl	8000658 <__aeabi_dmul>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	4b2e      	ldr	r3, [pc, #184]	; (8001e1c <compensate_pressure+0x374>)
 8001d64:	f7fe fda2 	bl	80008ac <__aeabi_ddiv>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001d70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d74:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d78:	f7fe fab8 	bl	80002ec <__adddf3>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4614      	mov	r4, r2
 8001d82:	461d      	mov	r5, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fbfa 	bl	8000584 <__aeabi_i2d>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4620      	mov	r0, r4
 8001d96:	4629      	mov	r1, r5
 8001d98:	f7fe faa8 	bl	80002ec <__adddf3>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <compensate_pressure+0x394>)
 8001daa:	f7fe fd7f 	bl	80008ac <__aeabi_ddiv>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001db6:	f7fe fa99 	bl	80002ec <__adddf3>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001dc2:	a311      	add	r3, pc, #68	; (adr r3, 8001e08 <compensate_pressure+0x360>)
 8001dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dcc:	f7fe feb6 	bl	8000b3c <__aeabi_dcmplt>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d007      	beq.n	8001de6 <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001dd6:	a30c      	add	r3, pc, #48	; (adr r3, 8001e08 <compensate_pressure+0x360>)
 8001dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ddc:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001de0:	2303      	movs	r3, #3
 8001de2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001de6:	a30a      	add	r3, pc, #40	; (adr r3, 8001e10 <compensate_pressure+0x368>)
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001df0:	f7fe fec2 	bl	8000b78 <__aeabi_dcmpgt>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	e022      	b.n	8001e40 <compensate_pressure+0x398>
 8001dfa:	bf00      	nop
 8001dfc:	f3af 8000 	nop.w
 8001e00:	00000000 	.word	0x00000000
 8001e04:	40b86a00 	.word	0x40b86a00
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	40dd4c00 	.word	0x40dd4c00
 8001e10:	00000000 	.word	0x00000000
 8001e14:	40fadb00 	.word	0x40fadb00
 8001e18:	40ef4000 	.word	0x40ef4000
 8001e1c:	40e00000 	.word	0x40e00000
 8001e20:	40100000 	.word	0x40100000
 8001e24:	40f00000 	.word	0x40f00000
 8001e28:	41200000 	.word	0x41200000
 8001e2c:	3ff00000 	.word	0x3ff00000
 8001e30:	41300000 	.word	0x41300000
 8001e34:	40b00000 	.word	0x40b00000
 8001e38:	41e00000 	.word	0x41e00000
 8001e3c:	40300000 	.word	0x40300000
 8001e40:	d007      	beq.n	8001e52 <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001e42:	a309      	add	r3, pc, #36	; (adr r3, 8001e68 <compensate_pressure+0x3c0>)
 8001e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e48:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 8001e52:	68f9      	ldr	r1, [r7, #12]
 8001e54:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e58:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001e5c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3730      	adds	r7, #48	; 0x30
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bdb0      	pop	{r4, r5, r7, pc}
 8001e68:	00000000 	.word	0x00000000
 8001e6c:	40fadb00 	.word	0x40fadb00

08001e70 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	db03      	blt.n	8001e8c <st_check_boundaries+0x1c>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	4a1c      	ldr	r2, [pc, #112]	; (8001ef8 <st_check_boundaries+0x88>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	dd09      	ble.n	8001ea0 <st_check_boundaries+0x30>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	db06      	blt.n	8001ea0 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a18      	ldr	r2, [pc, #96]	; (8001ef8 <st_check_boundaries+0x88>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	dc02      	bgt.n	8001ea0 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001e9a:	23fa      	movs	r3, #250	; 0xfa
 8001e9c:	73fb      	strb	r3, [r7, #15]
 8001e9e:	e023      	b.n	8001ee8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	db03      	blt.n	8001eae <st_check_boundaries+0x3e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a13      	ldr	r2, [pc, #76]	; (8001ef8 <st_check_boundaries+0x88>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	dd09      	ble.n	8001ec2 <st_check_boundaries+0x52>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	db06      	blt.n	8001ec2 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4a10      	ldr	r2, [pc, #64]	; (8001ef8 <st_check_boundaries+0x88>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	dc02      	bgt.n	8001ec2 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001ebc:	23fb      	movs	r3, #251	; 0xfb
 8001ebe:	73fb      	strb	r3, [r7, #15]
 8001ec0:	e012      	b.n	8001ee8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	db03      	blt.n	8001ed0 <st_check_boundaries+0x60>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <st_check_boundaries+0x88>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	dd09      	ble.n	8001ee4 <st_check_boundaries+0x74>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	db03      	blt.n	8001ede <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a07      	ldr	r2, [pc, #28]	; (8001ef8 <st_check_boundaries+0x88>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	dd02      	ble.n	8001ee4 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001ede:	23f9      	movs	r3, #249	; 0xf9
 8001ee0:	73fb      	strb	r3, [r7, #15]
 8001ee2:	e001      	b.n	8001ee8 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	000ffff0 	.word	0x000ffff0

08001efc <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff f837 	bl	8000f78 <bmp2_init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001f0e:	f107 0308 	add.w	r3, r7, #8
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff f91c 	bl	8001152 <bmp2_get_config>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001f22:	2300      	movs	r3, #0
 8001f24:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001f26:	2303      	movs	r3, #3
 8001f28:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001f2a:	f107 0308 	add.w	r3, r7, #8
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f94e 	bl	80011d2 <bmp2_set_config>
 8001f36:	4603      	mov	r3, r0
 8001f38:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001f3a:	f107 0308 	add.w	r3, r7, #8
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	4619      	mov	r1, r3
 8001f42:	2003      	movs	r0, #3
 8001f44:	f7ff f980 	bl	8001248 <bmp2_set_power_mode>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001f4c:	f107 0108 	add.w	r1, r7, #8
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fa0a 	bl	8001370 <bmp2_compute_meas_time>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001f60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	4603      	mov	r3, r0
 8001f7a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001f80:	2300      	movs	r3, #0
 8001f82:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	6858      	ldr	r0, [r3, #4]
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	891b      	ldrh	r3, [r3, #8]
 8001f90:	2200      	movs	r2, #0
 8001f92:	4619      	mov	r1, r3
 8001f94:	f003 f9d6 	bl	8005344 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	f107 010f 	add.w	r1, r7, #15
 8001fa0:	2305      	movs	r3, #5
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f004 fcc3 	bl	800692e <HAL_SPI_Transmit>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	2305      	movs	r3, #5
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	f004 fe27 	bl	8006c0a <HAL_SPI_Receive>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	7dbb      	ldrb	r3, [r7, #22]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	6858      	ldr	r0, [r3, #4]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	891b      	ldrh	r3, [r3, #8]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f003 f9b7 	bl	8005344 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8001fd6:	7dbb      	ldrb	r3, [r7, #22]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <bmp2_spi_read+0x74>
    iError = -1;
 8001fdc:	23ff      	movs	r3, #255	; 0xff
 8001fde:	75fb      	strb	r3, [r7, #23]

  return iError;
 8001fe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002000:	2300      	movs	r3, #0
 8002002:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	6858      	ldr	r0, [r3, #4]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	891b      	ldrh	r3, [r3, #8]
 8002010:	2200      	movs	r2, #0
 8002012:	4619      	mov	r1, r3
 8002014:	f003 f996 	bl	8005344 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	6818      	ldr	r0, [r3, #0]
 800201c:	f107 010f 	add.w	r1, r7, #15
 8002020:	2305      	movs	r3, #5
 8002022:	2201      	movs	r2, #1
 8002024:	f004 fc83 	bl	800692e <HAL_SPI_Transmit>
 8002028:	4603      	mov	r3, r0
 800202a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	6818      	ldr	r0, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	b29a      	uxth	r2, r3
 8002034:	2305      	movs	r3, #5
 8002036:	68b9      	ldr	r1, [r7, #8]
 8002038:	f004 fc79 	bl	800692e <HAL_SPI_Transmit>
 800203c:	4603      	mov	r3, r0
 800203e:	461a      	mov	r2, r3
 8002040:	7dbb      	ldrb	r3, [r7, #22]
 8002042:	4413      	add	r3, r2
 8002044:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	6858      	ldr	r0, [r3, #4]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	891b      	ldrh	r3, [r3, #8]
 800204e:	2201      	movs	r2, #1
 8002050:	4619      	mov	r1, r3
 8002052:	f003 f977 	bl	8005344 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002056:	7dbb      	ldrb	r3, [r7, #22]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <bmp2_spi_write+0x74>
    iError = -1;
 800205c:	23ff      	movs	r3, #255	; 0xff
 800205e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002060:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a05      	ldr	r2, [pc, #20]	; (8002090 <bmp2_delay_us+0x24>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	099b      	lsrs	r3, r3, #6
 8002080:	4618      	mov	r0, r3
 8002082:	f002 fe43 	bl	8004d0c <HAL_Delay>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	10624dd3 	.word	0x10624dd3

08002094 <BMP2_ReadData>:
 *  @retval 0 -> Success.
 *  @retval <0 -> Failure.
 *
 */
int8_t BMP2_ReadData(struct bmp2_dev *dev, double* press, double* temp)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b08b      	sub	sp, #44	; 0x2c
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 80020a0:	23ff      	movs	r3, #255	; 0xff
 80020a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  struct bmp2_status status;
  struct bmp2_data comp_data;
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	899b      	ldrh	r3, [r3, #12]
 80020ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 80020b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b4:	68f9      	ldr	r1, [r7, #12]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff f89a 	bl	80011f0 <bmp2_get_status>
 80020bc:	4603      	mov	r3, r0
 80020be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 80020c2:	f107 0310 	add.w	r3, r7, #16
 80020c6:	68f9      	ldr	r1, [r7, #12]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff f8d2 	bl	8001272 <bmp2_get_sensor_data>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    *temp = comp_data.temperature;
 80020d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	e9c1 2300 	strd	r2, r3, [r1]
    *press = comp_data.pressure / 100.0;
 80020de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <BMP2_ReadData+0xc4>)
 80020e8:	f7fe fbe0 	bl	80008ac <__aeabi_ddiv>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	e9c1 2300 	strd	r2, r3, [r1]
    try--;
 80020f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 8002104:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <BMP2_ReadData+0x80>
 800210c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002110:	2b00      	cmp	r3, #0
 8002112:	dccd      	bgt.n	80020b0 <BMP2_ReadData+0x1c>

  /* Save reading result in sensor handler */
  BMP2_GET_PRESS(dev) = *press;
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211a:	68f9      	ldr	r1, [r7, #12]
 800211c:	684c      	ldr	r4, [r1, #4]
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	f7fe fd5b 	bl	8000bdc <__aeabi_d2f>
 8002126:	4603      	mov	r3, r0
 8002128:	6163      	str	r3, [r4, #20]
  BMP2_GET_TEMP(dev) = *temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002130:	68f9      	ldr	r1, [r7, #12]
 8002132:	684c      	ldr	r4, [r1, #4]
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	f7fe fd50 	bl	8000bdc <__aeabi_d2f>
 800213c:	4603      	mov	r3, r0
 800213e:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002148:	729a      	strb	r2, [r3, #10]

  return rslt;
 800214a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800214e:	4618      	mov	r0, r3
 8002150:	372c      	adds	r7, #44	; 0x2c
 8002152:	46bd      	mov	sp, r7
 8002154:	bd90      	pop	{r4, r7, pc}
 8002156:	bf00      	nop
 8002158:	40590000 	.word	0x40590000

0800215c <MX_GPIO_Init>:
        * EXTI
     PD8   ------> USART3_TX
     PD9   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08e      	sub	sp, #56	; 0x38
 8002160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	609a      	str	r2, [r3, #8]
 800216e:	60da      	str	r2, [r3, #12]
 8002170:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002172:	4b82      	ldr	r3, [pc, #520]	; (800237c <MX_GPIO_Init+0x220>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a81      	ldr	r2, [pc, #516]	; (800237c <MX_GPIO_Init+0x220>)
 8002178:	f043 0310 	orr.w	r3, r3, #16
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b7f      	ldr	r3, [pc, #508]	; (800237c <MX_GPIO_Init+0x220>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	623b      	str	r3, [r7, #32]
 8002188:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800218a:	4b7c      	ldr	r3, [pc, #496]	; (800237c <MX_GPIO_Init+0x220>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a7b      	ldr	r2, [pc, #492]	; (800237c <MX_GPIO_Init+0x220>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b79      	ldr	r3, [pc, #484]	; (800237c <MX_GPIO_Init+0x220>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	61fb      	str	r3, [r7, #28]
 80021a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021a2:	4b76      	ldr	r3, [pc, #472]	; (800237c <MX_GPIO_Init+0x220>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a75      	ldr	r2, [pc, #468]	; (800237c <MX_GPIO_Init+0x220>)
 80021a8:	f043 0320 	orr.w	r3, r3, #32
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b73      	ldr	r3, [pc, #460]	; (800237c <MX_GPIO_Init+0x220>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0320 	and.w	r3, r3, #32
 80021b6:	61bb      	str	r3, [r7, #24]
 80021b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ba:	4b70      	ldr	r3, [pc, #448]	; (800237c <MX_GPIO_Init+0x220>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a6f      	ldr	r2, [pc, #444]	; (800237c <MX_GPIO_Init+0x220>)
 80021c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b6d      	ldr	r3, [pc, #436]	; (800237c <MX_GPIO_Init+0x220>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d2:	4b6a      	ldr	r3, [pc, #424]	; (800237c <MX_GPIO_Init+0x220>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a69      	ldr	r2, [pc, #420]	; (800237c <MX_GPIO_Init+0x220>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b67      	ldr	r3, [pc, #412]	; (800237c <MX_GPIO_Init+0x220>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ea:	4b64      	ldr	r3, [pc, #400]	; (800237c <MX_GPIO_Init+0x220>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a63      	ldr	r2, [pc, #396]	; (800237c <MX_GPIO_Init+0x220>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b61      	ldr	r3, [pc, #388]	; (800237c <MX_GPIO_Init+0x220>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002202:	4b5e      	ldr	r3, [pc, #376]	; (800237c <MX_GPIO_Init+0x220>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a5d      	ldr	r2, [pc, #372]	; (800237c <MX_GPIO_Init+0x220>)
 8002208:	f043 0308 	orr.w	r3, r3, #8
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b5b      	ldr	r3, [pc, #364]	; (800237c <MX_GPIO_Init+0x220>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800221a:	4b58      	ldr	r3, [pc, #352]	; (800237c <MX_GPIO_Init+0x220>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a57      	ldr	r2, [pc, #348]	; (800237c <MX_GPIO_Init+0x220>)
 8002220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b55      	ldr	r3, [pc, #340]	; (800237c <MX_GPIO_Init+0x220>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP2_CSB_Pin|Alarm_LED_Pin, GPIO_PIN_RESET);
 8002232:	2200      	movs	r2, #0
 8002234:	f248 0110 	movw	r1, #32784	; 0x8010
 8002238:	4851      	ldr	r0, [pc, #324]	; (8002380 <MX_GPIO_Init+0x224>)
 800223a:	f003 f883 	bl	8005344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Battery_Pin|Output_Pin, GPIO_PIN_RESET);
 800223e:	2200      	movs	r2, #0
 8002240:	2128      	movs	r1, #40	; 0x28
 8002242:	4850      	ldr	r0, [pc, #320]	; (8002384 <MX_GPIO_Init+0x228>)
 8002244:	f003 f87e 	bl	8005344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PowerSupply_GPIO_Port, PowerSupply_Pin, GPIO_PIN_RESET);
 8002248:	2200      	movs	r2, #0
 800224a:	2108      	movs	r1, #8
 800224c:	484e      	ldr	r0, [pc, #312]	; (8002388 <MX_GPIO_Init+0x22c>)
 800224e:	f003 f879 	bl	8005344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002252:	2200      	movs	r2, #0
 8002254:	2140      	movs	r1, #64	; 0x40
 8002256:	484d      	ldr	r0, [pc, #308]	; (800238c <MX_GPIO_Init+0x230>)
 8002258:	f003 f874 	bl	8005344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800225c:	2200      	movs	r2, #0
 800225e:	2180      	movs	r1, #128	; 0x80
 8002260:	484b      	ldr	r0, [pc, #300]	; (8002390 <MX_GPIO_Init+0x234>)
 8002262:	f003 f86f 	bl	8005344 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BMP2_CSB_Pin|Alarm_LED_Pin;
 8002266:	f248 0310 	movw	r3, #32784	; 0x8010
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226c:	2301      	movs	r3, #1
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002274:	2300      	movs	r3, #0
 8002276:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227c:	4619      	mov	r1, r3
 800227e:	4840      	ldr	r0, [pc, #256]	; (8002380 <MX_GPIO_Init+0x224>)
 8002280:	f002 fe9c 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002284:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800228a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002298:	4619      	mov	r1, r3
 800229a:	483e      	ldr	r0, [pc, #248]	; (8002394 <MX_GPIO_Init+0x238>)
 800229c:	f002 fe8e 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = Battery_Pin|Output_Pin;
 80022a0:	2328      	movs	r3, #40	; 0x28
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a4:	2301      	movs	r3, #1
 80022a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ac:	2300      	movs	r3, #0
 80022ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b4:	4619      	mov	r1, r3
 80022b6:	4833      	ldr	r0, [pc, #204]	; (8002384 <MX_GPIO_Init+0x228>)
 80022b8:	f002 fe80 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PowerSupply_Pin;
 80022bc:	2308      	movs	r3, #8
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c0:	2301      	movs	r3, #1
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2300      	movs	r3, #0
 80022ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PowerSupply_GPIO_Port, &GPIO_InitStruct);
 80022cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d0:	4619      	mov	r1, r3
 80022d2:	482d      	ldr	r0, [pc, #180]	; (8002388 <MX_GPIO_Init+0x22c>)
 80022d4:	f002 fe72 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PIR_Livingroom_Pin|PIR_Garage_Pin|PIR_Kitchen_Pin;
 80022d8:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022de:	2300      	movs	r3, #0
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ea:	4619      	mov	r1, r3
 80022ec:	4824      	ldr	r0, [pc, #144]	; (8002380 <MX_GPIO_Init+0x224>)
 80022ee:	f002 fe65 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80022f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022fc:	2301      	movs	r3, #1
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002300:	2303      	movs	r3, #3
 8002302:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002304:	2307      	movs	r3, #7
 8002306:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800230c:	4619      	mov	r1, r3
 800230e:	4822      	ldr	r0, [pc, #136]	; (8002398 <MX_GPIO_Init+0x23c>)
 8002310:	f002 fe54 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002314:	2340      	movs	r3, #64	; 0x40
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002318:	2301      	movs	r3, #1
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002328:	4619      	mov	r1, r3
 800232a:	4818      	ldr	r0, [pc, #96]	; (800238c <MX_GPIO_Init+0x230>)
 800232c:	f002 fe46 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002334:	2300      	movs	r3, #0
 8002336:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800233c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002340:	4619      	mov	r1, r3
 8002342:	4812      	ldr	r0, [pc, #72]	; (800238c <MX_GPIO_Init+0x230>)
 8002344:	f002 fe3a 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234c:	2301      	movs	r3, #1
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002354:	2300      	movs	r3, #0
 8002356:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235c:	4619      	mov	r1, r3
 800235e:	480c      	ldr	r0, [pc, #48]	; (8002390 <MX_GPIO_Init+0x234>)
 8002360:	f002 fe2c 	bl	8004fbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002364:	2200      	movs	r2, #0
 8002366:	2100      	movs	r1, #0
 8002368:	2028      	movs	r0, #40	; 0x28
 800236a:	f002 fdce 	bl	8004f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800236e:	2028      	movs	r0, #40	; 0x28
 8002370:	f002 fde7 	bl	8004f42 <HAL_NVIC_EnableIRQ>

}
 8002374:	bf00      	nop
 8002376:	3738      	adds	r7, #56	; 0x38
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40023800 	.word	0x40023800
 8002380:	40021000 	.word	0x40021000
 8002384:	40021400 	.word	0x40021400
 8002388:	40020000 	.word	0x40020000
 800238c:	40021800 	.word	0x40021800
 8002390:	40020400 	.word	0x40020400
 8002394:	40020800 	.word	0x40020800
 8002398:	40020c00 	.word	0x40020c00

0800239c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023a0:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <MX_I2C1_Init+0x74>)
 80023a2:	4a1c      	ldr	r2, [pc, #112]	; (8002414 <MX_I2C1_Init+0x78>)
 80023a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80023a6:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <MX_I2C1_Init+0x74>)
 80023a8:	4a1b      	ldr	r2, [pc, #108]	; (8002418 <MX_I2C1_Init+0x7c>)
 80023aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80023ac:	4b18      	ldr	r3, [pc, #96]	; (8002410 <MX_I2C1_Init+0x74>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <MX_I2C1_Init+0x74>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023b8:	4b15      	ldr	r3, [pc, #84]	; (8002410 <MX_I2C1_Init+0x74>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80023be:	4b14      	ldr	r3, [pc, #80]	; (8002410 <MX_I2C1_Init+0x74>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <MX_I2C1_Init+0x74>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <MX_I2C1_Init+0x74>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023d0:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <MX_I2C1_Init+0x74>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023d6:	480e      	ldr	r0, [pc, #56]	; (8002410 <MX_I2C1_Init+0x74>)
 80023d8:	f003 f80c 	bl	80053f4 <HAL_I2C_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80023e2:	f001 fe3d 	bl	8004060 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023e6:	2100      	movs	r1, #0
 80023e8:	4809      	ldr	r0, [pc, #36]	; (8002410 <MX_I2C1_Init+0x74>)
 80023ea:	f003 f893 	bl	8005514 <HAL_I2CEx_ConfigAnalogFilter>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80023f4:	f001 fe34 	bl	8004060 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80023f8:	2100      	movs	r1, #0
 80023fa:	4805      	ldr	r0, [pc, #20]	; (8002410 <MX_I2C1_Init+0x74>)
 80023fc:	f003 f8d5 	bl	80055aa <HAL_I2CEx_ConfigDigitalFilter>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002406:	f001 fe2b 	bl	8004060 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	200001a4 	.word	0x200001a4
 8002414:	40005400 	.word	0x40005400
 8002418:	00808cd2 	.word	0x00808cd2

0800241c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <MX_I2C2_Init+0x74>)
 8002422:	4a1c      	ldr	r2, [pc, #112]	; (8002494 <MX_I2C2_Init+0x78>)
 8002424:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8002426:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <MX_I2C2_Init+0x74>)
 8002428:	4a1b      	ldr	r2, [pc, #108]	; (8002498 <MX_I2C2_Init+0x7c>)
 800242a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800242c:	4b18      	ldr	r3, [pc, #96]	; (8002490 <MX_I2C2_Init+0x74>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002432:	4b17      	ldr	r3, [pc, #92]	; (8002490 <MX_I2C2_Init+0x74>)
 8002434:	2201      	movs	r2, #1
 8002436:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002438:	4b15      	ldr	r3, [pc, #84]	; (8002490 <MX_I2C2_Init+0x74>)
 800243a:	2200      	movs	r2, #0
 800243c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800243e:	4b14      	ldr	r3, [pc, #80]	; (8002490 <MX_I2C2_Init+0x74>)
 8002440:	2200      	movs	r2, #0
 8002442:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002444:	4b12      	ldr	r3, [pc, #72]	; (8002490 <MX_I2C2_Init+0x74>)
 8002446:	2200      	movs	r2, #0
 8002448:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <MX_I2C2_Init+0x74>)
 800244c:	2200      	movs	r2, #0
 800244e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <MX_I2C2_Init+0x74>)
 8002452:	2200      	movs	r2, #0
 8002454:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002456:	480e      	ldr	r0, [pc, #56]	; (8002490 <MX_I2C2_Init+0x74>)
 8002458:	f002 ffcc 	bl	80053f4 <HAL_I2C_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002462:	f001 fdfd 	bl	8004060 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002466:	2100      	movs	r1, #0
 8002468:	4809      	ldr	r0, [pc, #36]	; (8002490 <MX_I2C2_Init+0x74>)
 800246a:	f003 f853 	bl	8005514 <HAL_I2CEx_ConfigAnalogFilter>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002474:	f001 fdf4 	bl	8004060 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002478:	2100      	movs	r1, #0
 800247a:	4805      	ldr	r0, [pc, #20]	; (8002490 <MX_I2C2_Init+0x74>)
 800247c:	f003 f895 	bl	80055aa <HAL_I2CEx_ConfigDigitalFilter>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002486:	f001 fdeb 	bl	8004060 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	200001f8 	.word	0x200001f8
 8002494:	40005800 	.word	0x40005800
 8002498:	00808cd2 	.word	0x00808cd2

0800249c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b0ac      	sub	sp, #176	; 0xb0
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024b4:	f107 0318 	add.w	r3, r7, #24
 80024b8:	2284      	movs	r2, #132	; 0x84
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f007 fdd9 	bl	800a074 <memset>
  if(i2cHandle->Instance==I2C1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a43      	ldr	r2, [pc, #268]	; (80025d4 <HAL_I2C_MspInit+0x138>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d13d      	bne.n	8002548 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80024cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80024d2:	2300      	movs	r3, #0
 80024d4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024d6:	f107 0318 	add.w	r3, r7, #24
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 fd8c 	bl	8005ff8 <HAL_RCCEx_PeriphCLKConfig>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80024e6:	f001 fdbb 	bl	8004060 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ea:	4b3b      	ldr	r3, [pc, #236]	; (80025d8 <HAL_I2C_MspInit+0x13c>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	4a3a      	ldr	r2, [pc, #232]	; (80025d8 <HAL_I2C_MspInit+0x13c>)
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	6313      	str	r3, [r2, #48]	; 0x30
 80024f6:	4b38      	ldr	r3, [pc, #224]	; (80025d8 <HAL_I2C_MspInit+0x13c>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_INA219_Solar_Pin|I2C1_SDA_INA219_Solar_Pin;
 8002502:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002506:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800250a:	2312      	movs	r3, #18
 800250c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002516:	2303      	movs	r3, #3
 8002518:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800251c:	2304      	movs	r3, #4
 800251e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002522:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002526:	4619      	mov	r1, r3
 8002528:	482c      	ldr	r0, [pc, #176]	; (80025dc <HAL_I2C_MspInit+0x140>)
 800252a:	f002 fd47 	bl	8004fbc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800252e:	4b2a      	ldr	r3, [pc, #168]	; (80025d8 <HAL_I2C_MspInit+0x13c>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	4a29      	ldr	r2, [pc, #164]	; (80025d8 <HAL_I2C_MspInit+0x13c>)
 8002534:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002538:	6413      	str	r3, [r2, #64]	; 0x40
 800253a:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <HAL_I2C_MspInit+0x13c>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002546:	e041      	b.n	80025cc <HAL_I2C_MspInit+0x130>
  else if(i2cHandle->Instance==I2C2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a24      	ldr	r2, [pc, #144]	; (80025e0 <HAL_I2C_MspInit+0x144>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d13c      	bne.n	80025cc <HAL_I2C_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002556:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002558:	2300      	movs	r3, #0
 800255a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800255e:	f107 0318 	add.w	r3, r7, #24
 8002562:	4618      	mov	r0, r3
 8002564:	f003 fd48 	bl	8005ff8 <HAL_RCCEx_PeriphCLKConfig>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800256e:	f001 fd77 	bl	8004060 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002572:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <HAL_I2C_MspInit+0x13c>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a18      	ldr	r2, [pc, #96]	; (80025d8 <HAL_I2C_MspInit+0x13c>)
 8002578:	f043 0320 	orr.w	r3, r3, #32
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b16      	ldr	r3, [pc, #88]	; (80025d8 <HAL_I2C_MspInit+0x13c>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C2_SDA_INA219_Output_Pin|I2C2_SCL_Output_Pin;
 800258a:	2303      	movs	r3, #3
 800258c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002590:	2312      	movs	r3, #18
 8002592:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259c:	2303      	movs	r3, #3
 800259e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025a2:	2304      	movs	r3, #4
 80025a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025ac:	4619      	mov	r1, r3
 80025ae:	480d      	ldr	r0, [pc, #52]	; (80025e4 <HAL_I2C_MspInit+0x148>)
 80025b0:	f002 fd04 	bl	8004fbc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <HAL_I2C_MspInit+0x13c>)
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <HAL_I2C_MspInit+0x13c>)
 80025ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025be:	6413      	str	r3, [r2, #64]	; 0x40
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <HAL_I2C_MspInit+0x13c>)
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	68bb      	ldr	r3, [r7, #8]
}
 80025cc:	bf00      	nop
 80025ce:	37b0      	adds	r7, #176	; 0xb0
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40005400 	.word	0x40005400
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40020400 	.word	0x40020400
 80025e0:	40005800 	.word	0x40005800
 80025e4:	40021400 	.word	0x40021400

080025e8 <keypad_config>:

const char Rows[4]={R1, R2, R3, R4};
const char Cols[4]={C1, C2, C3, C4};

void keypad_config(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08a      	sub	sp, #40	; 0x28
 80025ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  if (KEYPAD_4x4_GPIO == GPIOA) __HAL_RCC_GPIOA_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOB) __HAL_RCC_GPIOB_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOC) __HAL_RCC_GPIOC_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOD) __HAL_RCC_GPIOD_CLK_ENABLE(); else
 80025ee:	4b16      	ldr	r3, [pc, #88]	; (8002648 <keypad_config+0x60>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	4a15      	ldr	r2, [pc, #84]	; (8002648 <keypad_config+0x60>)
 80025f4:	f043 0308 	orr.w	r3, r3, #8
 80025f8:	6313      	str	r3, [r2, #48]	; 0x30
 80025fa:	4b13      	ldr	r3, [pc, #76]	; (8002648 <keypad_config+0x60>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	607b      	str	r3, [r7, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
  if (KEYPAD_4x4_GPIO == GPIOE) __HAL_RCC_GPIOE_CLK_ENABLE();


  GPIO_InitStruct.Pin = R1 | R2 | R3 | R4;
 8002606:	230f      	movs	r3, #15
 8002608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260a:	2301      	movs	r3, #1
 800260c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002612:	2300      	movs	r3, #0
 8002614:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEYPAD_4x4_GPIO, &GPIO_InitStruct);
 8002616:	f107 0314 	add.w	r3, r7, #20
 800261a:	4619      	mov	r1, r3
 800261c:	480b      	ldr	r0, [pc, #44]	; (800264c <keypad_config+0x64>)
 800261e:	f002 fccd 	bl	8004fbc <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = C1 | C2 | C3 | C4;
 8002622:	23f0      	movs	r3, #240	; 0xf0
 8002624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002626:	2300      	movs	r3, #0
 8002628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800262a:	2302      	movs	r3, #2
 800262c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262e:	2300      	movs	r3, #0
 8002630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEYPAD_4x4_GPIO, &GPIO_InitStruct);
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	4619      	mov	r1, r3
 8002638:	4804      	ldr	r0, [pc, #16]	; (800264c <keypad_config+0x64>)
 800263a:	f002 fcbf 	bl	8004fbc <HAL_GPIO_Init>

}
 800263e:	bf00      	nop
 8002640:	3728      	adds	r7, #40	; 0x28
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800
 800264c:	40020c00 	.word	0x40020c00

08002650 <keypad_readkey>:

char keypad_readkey(void)
{ //returns ASCII code of a pressed key
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
  unsigned char r, c;
  char pressedKey=0x00;
 8002656:	2300      	movs	r3, #0
 8002658:	717b      	strb	r3, [r7, #5]

  r=0;
 800265a:	2300      	movs	r3, #0
 800265c:	71fb      	strb	r3, [r7, #7]
  while (r<4) {
 800265e:	e030      	b.n	80026c2 <keypad_readkey+0x72>
    HAL_GPIO_WritePin(KEYPAD_4x4_GPIO, Rows[r], GPIO_PIN_SET);        //activate row
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <keypad_readkey+0x84>)
 8002664:	5cd3      	ldrb	r3, [r2, r3]
 8002666:	b29b      	uxth	r3, r3
 8002668:	2201      	movs	r2, #1
 800266a:	4619      	mov	r1, r3
 800266c:	481a      	ldr	r0, [pc, #104]	; (80026d8 <keypad_readkey+0x88>)
 800266e:	f002 fe69 	bl	8005344 <HAL_GPIO_WritePin>
    c=0;
 8002672:	2300      	movs	r3, #0
 8002674:	71bb      	strb	r3, [r7, #6]
    while (c<4) {
 8002676:	e015      	b.n	80026a4 <keypad_readkey+0x54>
      if (HAL_GPIO_ReadPin(KEYPAD_4x4_GPIO, Cols[c])==GPIO_PIN_SET){  //check columns
 8002678:	79bb      	ldrb	r3, [r7, #6]
 800267a:	4a18      	ldr	r2, [pc, #96]	; (80026dc <keypad_readkey+0x8c>)
 800267c:	5cd3      	ldrb	r3, [r2, r3]
 800267e:	b29b      	uxth	r3, r3
 8002680:	4619      	mov	r1, r3
 8002682:	4815      	ldr	r0, [pc, #84]	; (80026d8 <keypad_readkey+0x88>)
 8002684:	f002 fe46 	bl	8005314 <HAL_GPIO_ReadPin>
 8002688:	4603      	mov	r3, r0
 800268a:	2b01      	cmp	r3, #1
 800268c:	d107      	bne.n	800269e <keypad_readkey+0x4e>
        pressedKey=KeyMap[r][c];                                   //if column active - find key value
 800268e:	79fa      	ldrb	r2, [r7, #7]
 8002690:	79bb      	ldrb	r3, [r7, #6]
 8002692:	4913      	ldr	r1, [pc, #76]	; (80026e0 <keypad_readkey+0x90>)
 8002694:	0092      	lsls	r2, r2, #2
 8002696:	440a      	add	r2, r1
 8002698:	4413      	add	r3, r2
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	717b      	strb	r3, [r7, #5]
      }
      c++;
 800269e:	79bb      	ldrb	r3, [r7, #6]
 80026a0:	3301      	adds	r3, #1
 80026a2:	71bb      	strb	r3, [r7, #6]
    while (c<4) {
 80026a4:	79bb      	ldrb	r3, [r7, #6]
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	d9e6      	bls.n	8002678 <keypad_readkey+0x28>
    }
    HAL_GPIO_WritePin(KEYPAD_4x4_GPIO, Rows[r], GPIO_PIN_RESET);      //deactivate row
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <keypad_readkey+0x84>)
 80026ae:	5cd3      	ldrb	r3, [r2, r3]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2200      	movs	r2, #0
 80026b4:	4619      	mov	r1, r3
 80026b6:	4808      	ldr	r0, [pc, #32]	; (80026d8 <keypad_readkey+0x88>)
 80026b8:	f002 fe44 	bl	8005344 <HAL_GPIO_WritePin>
    r++;
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	3301      	adds	r3, #1
 80026c0:	71fb      	strb	r3, [r7, #7]
  while (r<4) {
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d9cb      	bls.n	8002660 <keypad_readkey+0x10>
  }
  return pressedKey;                                               //return ASCII key value
 80026c8:	797b      	ldrb	r3, [r7, #5]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	0800acdc 	.word	0x0800acdc
 80026d8:	40020c00 	.word	0x40020c00
 80026dc:	0800ace0 	.word	0x0800ace0
 80026e0:	0800accc 	.word	0x0800accc

080026e4 <LCD_WriteNibble>:

GPIO_InitTypeDef GPIO_InitStruct;

//-----------------------------------------------------------------------------
void LCD_WriteNibble(char nibbleToWrite)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_SET);
 80026ee:	2201      	movs	r2, #1
 80026f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026f4:	4818      	ldr	r0, [pc, #96]	; (8002758 <LCD_WriteNibble+0x74>)
 80026f6:	f002 fe25 	bl	8005344 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D4, (GPIO_PinState)(nibbleToWrite & 0x01));
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	b2db      	uxtb	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	2108      	movs	r1, #8
 8002706:	4814      	ldr	r0, [pc, #80]	; (8002758 <LCD_WriteNibble+0x74>)
 8002708:	f002 fe1c 	bl	8005344 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D5, (GPIO_PinState)(nibbleToWrite & 0x02));
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	b2db      	uxtb	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	2104      	movs	r1, #4
 8002718:	480f      	ldr	r0, [pc, #60]	; (8002758 <LCD_WriteNibble+0x74>)
 800271a:	f002 fe13 	bl	8005344 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D6, (GPIO_PinState)(nibbleToWrite & 0x04));
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	2140      	movs	r1, #64	; 0x40
 800272a:	480b      	ldr	r0, [pc, #44]	; (8002758 <LCD_WriteNibble+0x74>)
 800272c:	f002 fe0a 	bl	8005344 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D7, (GPIO_PinState)(nibbleToWrite & 0x08));
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	b2db      	uxtb	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	2101      	movs	r1, #1
 800273c:	4806      	ldr	r0, [pc, #24]	; (8002758 <LCD_WriteNibble+0x74>)
 800273e:	f002 fe01 	bl	8005344 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_RESET);
 8002742:	2200      	movs	r2, #0
 8002744:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002748:	4803      	ldr	r0, [pc, #12]	; (8002758 <LCD_WriteNibble+0x74>)
 800274a:	f002 fdfb 	bl	8005344 <HAL_GPIO_WritePin>
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40020800 	.word	0x40020800

0800275c <LCD_ReadNibble>:


//-----------------------------------------------------------------------------
unsigned char LCD_ReadNibble(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
  unsigned char tmp = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_SET);
 8002766:	2201      	movs	r2, #1
 8002768:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800276c:	481e      	ldr	r0, [pc, #120]	; (80027e8 <LCD_ReadNibble+0x8c>)
 800276e:	f002 fde9 	bl	8005344 <HAL_GPIO_WritePin>
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D4) << 0);
 8002772:	2108      	movs	r1, #8
 8002774:	481c      	ldr	r0, [pc, #112]	; (80027e8 <LCD_ReadNibble+0x8c>)
 8002776:	f002 fdcd 	bl	8005314 <HAL_GPIO_ReadPin>
 800277a:	4603      	mov	r3, r0
 800277c:	b25a      	sxtb	r2, r3
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	4313      	orrs	r3, r2
 8002784:	b25b      	sxtb	r3, r3
 8002786:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D5) << 1);
 8002788:	2104      	movs	r1, #4
 800278a:	4817      	ldr	r0, [pc, #92]	; (80027e8 <LCD_ReadNibble+0x8c>)
 800278c:	f002 fdc2 	bl	8005314 <HAL_GPIO_ReadPin>
 8002790:	4603      	mov	r3, r0
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	b25a      	sxtb	r2, r3
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	4313      	orrs	r3, r2
 800279c:	b25b      	sxtb	r3, r3
 800279e:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D6) << 2);
 80027a0:	2140      	movs	r1, #64	; 0x40
 80027a2:	4811      	ldr	r0, [pc, #68]	; (80027e8 <LCD_ReadNibble+0x8c>)
 80027a4:	f002 fdb6 	bl	8005314 <HAL_GPIO_ReadPin>
 80027a8:	4603      	mov	r3, r0
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	b25a      	sxtb	r2, r3
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	b25b      	sxtb	r3, r3
 80027b6:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D7) << 3);
 80027b8:	2101      	movs	r1, #1
 80027ba:	480b      	ldr	r0, [pc, #44]	; (80027e8 <LCD_ReadNibble+0x8c>)
 80027bc:	f002 fdaa 	bl	8005314 <HAL_GPIO_ReadPin>
 80027c0:	4603      	mov	r3, r0
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	b25a      	sxtb	r2, r3
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	b25b      	sxtb	r3, r3
 80027ce:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_RESET);
 80027d0:	2200      	movs	r2, #0
 80027d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027d6:	4804      	ldr	r0, [pc, #16]	; (80027e8 <LCD_ReadNibble+0x8c>)
 80027d8:	f002 fdb4 	bl	8005344 <HAL_GPIO_WritePin>
  return tmp;
 80027dc:	79fb      	ldrb	r3, [r7, #7]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40020800 	.word	0x40020800

080027ec <LCD_ReadStatus>:


//-----------------------------------------------------------------------------
unsigned char LCD_ReadStatus(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
  unsigned char status = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	71fb      	strb	r3, [r7, #7]
  
  GPIO_InitStruct.Pin =  LCD_D4 | LCD_D5 | LCD_D6 | LCD_D7;
 80027f6:	4b21      	ldr	r3, [pc, #132]	; (800287c <LCD_ReadStatus+0x90>)
 80027f8:	224d      	movs	r2, #77	; 0x4d
 80027fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027fc:	4b1f      	ldr	r3, [pc, #124]	; (800287c <LCD_ReadStatus+0x90>)
 80027fe:	2200      	movs	r2, #0
 8002800:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002802:	4b1e      	ldr	r3, [pc, #120]	; (800287c <LCD_ReadStatus+0x90>)
 8002804:	2201      	movs	r2, #1
 8002806:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002808:	4b1c      	ldr	r3, [pc, #112]	; (800287c <LCD_ReadStatus+0x90>)
 800280a:	2201      	movs	r2, #1
 800280c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800280e:	491b      	ldr	r1, [pc, #108]	; (800287c <LCD_ReadStatus+0x90>)
 8002810:	481b      	ldr	r0, [pc, #108]	; (8002880 <LCD_ReadStatus+0x94>)
 8002812:	f002 fbd3 	bl	8004fbc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW, GPIO_PIN_SET);
 8002816:	2201      	movs	r2, #1
 8002818:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800281c:	4818      	ldr	r0, [pc, #96]	; (8002880 <LCD_ReadStatus+0x94>)
 800281e:	f002 fd91 	bl	8005344 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RS, GPIO_PIN_RESET);
 8002822:	2200      	movs	r2, #0
 8002824:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002828:	4815      	ldr	r0, [pc, #84]	; (8002880 <LCD_ReadStatus+0x94>)
 800282a:	f002 fd8b 	bl	8005344 <HAL_GPIO_WritePin>
  
  status |= (LCD_ReadNibble() << 4);
 800282e:	f7ff ff95 	bl	800275c <LCD_ReadNibble>
 8002832:	4603      	mov	r3, r0
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	b25a      	sxtb	r2, r3
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	4313      	orrs	r3, r2
 800283e:	b25b      	sxtb	r3, r3
 8002840:	71fb      	strb	r3, [r7, #7]
  status |= LCD_ReadNibble();
 8002842:	f7ff ff8b 	bl	800275c <LCD_ReadNibble>
 8002846:	4603      	mov	r3, r0
 8002848:	461a      	mov	r2, r3
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	4313      	orrs	r3, r2
 800284e:	71fb      	strb	r3, [r7, #7]
  

  GPIO_InitStruct.Pin = LCD_D4|LCD_D5|LCD_D6|LCD_D7;
 8002850:	4b0a      	ldr	r3, [pc, #40]	; (800287c <LCD_ReadStatus+0x90>)
 8002852:	224d      	movs	r2, #77	; 0x4d
 8002854:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002856:	4b09      	ldr	r3, [pc, #36]	; (800287c <LCD_ReadStatus+0x90>)
 8002858:	2201      	movs	r2, #1
 800285a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	4b07      	ldr	r3, [pc, #28]	; (800287c <LCD_ReadStatus+0x90>)
 800285e:	2200      	movs	r2, #0
 8002860:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <LCD_ReadStatus+0x90>)
 8002864:	2201      	movs	r2, #1
 8002866:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002868:	4904      	ldr	r1, [pc, #16]	; (800287c <LCD_ReadStatus+0x90>)
 800286a:	4805      	ldr	r0, [pc, #20]	; (8002880 <LCD_ReadStatus+0x94>)
 800286c:	f002 fba6 	bl	8004fbc <HAL_GPIO_Init>

  return status;
 8002870:	79fb      	ldrb	r3, [r7, #7]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	2000024c 	.word	0x2000024c
 8002880:	40020800 	.word	0x40020800

08002884 <LCD_WriteData>:


//-----------------------------------------------------------------------------
void LCD_WriteData(char dataToWrite)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW, GPIO_PIN_RESET);
 800288e:	2200      	movs	r2, #0
 8002890:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002894:	4810      	ldr	r0, [pc, #64]	; (80028d8 <LCD_WriteData+0x54>)
 8002896:	f002 fd55 	bl	8005344 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RS, GPIO_PIN_SET);
 800289a:	2201      	movs	r2, #1
 800289c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028a0:	480d      	ldr	r0, [pc, #52]	; (80028d8 <LCD_WriteData+0x54>)
 80028a2:	f002 fd4f 	bl	8005344 <HAL_GPIO_WritePin>
  
  LCD_WriteNibble(dataToWrite >> 4);
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff19 	bl	80026e4 <LCD_WriteNibble>
  LCD_WriteNibble(dataToWrite & 0x0F);
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff ff12 	bl	80026e4 <LCD_WriteNibble>
  
  while(LCD_ReadStatus() & 0x80);
 80028c0:	bf00      	nop
 80028c2:	f7ff ff93 	bl	80027ec <LCD_ReadStatus>
 80028c6:	4603      	mov	r3, r0
 80028c8:	b25b      	sxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	dbf9      	blt.n	80028c2 <LCD_WriteData+0x3e>
}
 80028ce:	bf00      	nop
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40020800 	.word	0x40020800

080028dc <LCD_WriteCommand>:


//-----------------------------------------------------------------------------
void LCD_WriteCommand(char commandToWrite)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW | LCD_RS, GPIO_PIN_RESET);
 80028e6:	2200      	movs	r2, #0
 80028e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80028ec:	480d      	ldr	r0, [pc, #52]	; (8002924 <LCD_WriteCommand+0x48>)
 80028ee:	f002 fd29 	bl	8005344 <HAL_GPIO_WritePin>
  LCD_WriteNibble(commandToWrite >> 4);
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff fef3 	bl	80026e4 <LCD_WriteNibble>
  LCD_WriteNibble(commandToWrite & 0x0F);
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	f003 030f 	and.w	r3, r3, #15
 8002904:	b2db      	uxtb	r3, r3
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff feec 	bl	80026e4 <LCD_WriteNibble>
  
  while(LCD_ReadStatus() & 0x80);
 800290c:	bf00      	nop
 800290e:	f7ff ff6d 	bl	80027ec <LCD_ReadStatus>
 8002912:	4603      	mov	r3, r0
 8002914:	b25b      	sxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	dbf9      	blt.n	800290e <LCD_WriteCommand+0x32>
}
 800291a:	bf00      	nop
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40020800 	.word	0x40020800

08002928 <LCD_WriteText>:


//-----------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  while(*text)
 8002930:	e006      	b.n	8002940 <LCD_WriteText+0x18>
    LCD_WriteData(*text++);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff ffa2 	bl	8002884 <LCD_WriteData>
  while(*text)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f4      	bne.n	8002932 <LCD_WriteText+0xa>
}
 8002948:	bf00      	nop
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <LCD_GoTo>:


//-----------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	4603      	mov	r3, r0
 800295a:	460a      	mov	r2, r1
 800295c:	71fb      	strb	r3, [r7, #7]
 800295e:	4613      	mov	r3, r2
 8002960:	71bb      	strb	r3, [r7, #6]
  LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 8002962:	79bb      	ldrb	r3, [r7, #6]
 8002964:	019b      	lsls	r3, r3, #6
 8002966:	b2da      	uxtb	r2, r3
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	4413      	add	r3, r2
 800296c:	b2db      	uxtb	r3, r3
 800296e:	b25b      	sxtb	r3, r3
 8002970:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002974:	b25b      	sxtb	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ffaf 	bl	80028dc <LCD_WriteCommand>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <LCD_WriteTextXY>:


//-----------------------------------------------------------------------------
void LCD_WriteTextXY(char * text, unsigned char x, unsigned char y)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	460b      	mov	r3, r1
 8002990:	70fb      	strb	r3, [r7, #3]
 8002992:	4613      	mov	r3, r2
 8002994:	70bb      	strb	r3, [r7, #2]
  LCD_GoTo(x,y);
 8002996:	78ba      	ldrb	r2, [r7, #2]
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	4611      	mov	r1, r2
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ffd8 	bl	8002952 <LCD_GoTo>
  while(*text)
 80029a2:	e006      	b.n	80029b2 <LCD_WriteTextXY+0x2c>
    LCD_WriteData(*text++);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	607a      	str	r2, [r7, #4]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff69 	bl	8002884 <LCD_WriteData>
  while(*text)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f4      	bne.n	80029a4 <LCD_WriteTextXY+0x1e>
}
 80029ba:	bf00      	nop
 80029bc:	bf00      	nop
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <LCD_Initialize>:
}


//-----------------------------------------------------------------------------
void LCD_Initialize(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af00      	add	r7, sp, #0
  volatile unsigned char i = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	77fb      	strb	r3, [r7, #31]
  volatile unsigned int delayCnt = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61bb      	str	r3, [r7, #24]
  
  if (LCD_GPIO == GPIOA) __HAL_RCC_GPIOA_CLK_ENABLE(); else
  if (LCD_GPIO == GPIOB) __HAL_RCC_GPIOB_CLK_ENABLE(); else
  if (LCD_GPIO == GPIOC) __HAL_RCC_GPIOC_CLK_ENABLE(); else
 80029d2:	4b34      	ldr	r3, [pc, #208]	; (8002aa4 <LCD_Initialize+0xe0>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	4a33      	ldr	r2, [pc, #204]	; (8002aa4 <LCD_Initialize+0xe0>)
 80029d8:	f043 0304 	orr.w	r3, r3, #4
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
 80029de:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <LCD_Initialize+0xe0>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
  if (LCD_GPIO == GPIOD) __HAL_RCC_GPIOD_CLK_ENABLE(); else
  if (LCD_GPIO == GPIOE) __HAL_RCC_GPIOE_CLK_ENABLE();


  GPIO_InitStruct.Pin = LCD_D4|LCD_D5|LCD_D6|LCD_D7|LCD_RS|LCD_RW|LCD_EN;
 80029ea:	4b2f      	ldr	r3, [pc, #188]	; (8002aa8 <LCD_Initialize+0xe4>)
 80029ec:	f641 424d 	movw	r2, #7245	; 0x1c4d
 80029f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f2:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <LCD_Initialize+0xe4>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <LCD_Initialize+0xe4>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80029fe:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <LCD_Initialize+0xe4>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_GPIO, &GPIO_InitStruct);
 8002a04:	4928      	ldr	r1, [pc, #160]	; (8002aa8 <LCD_Initialize+0xe4>)
 8002a06:	4829      	ldr	r0, [pc, #164]	; (8002aac <LCD_Initialize+0xe8>)
 8002a08:	f002 fad8 	bl	8004fbc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RS | LCD_EN | LCD_RW, GPIO_PIN_RESET);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002a12:	4826      	ldr	r0, [pc, #152]	; (8002aac <LCD_Initialize+0xe8>)
 8002a14:	f002 fc96 	bl	8005344 <HAL_GPIO_WritePin>
  

  for(delayCnt = 0; delayCnt < 300000; delayCnt++);
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61bb      	str	r3, [r7, #24]
 8002a1c:	e002      	b.n	8002a24 <LCD_Initialize+0x60>
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	3301      	adds	r3, #1
 8002a22:	61bb      	str	r3, [r7, #24]
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	4a22      	ldr	r2, [pc, #136]	; (8002ab0 <LCD_Initialize+0xec>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d9f8      	bls.n	8002a1e <LCD_Initialize+0x5a>

  for(i = 0; i < 3; i++) {
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	77fb      	strb	r3, [r7, #31]
 8002a30:	e012      	b.n	8002a58 <LCD_Initialize+0x94>
    LCD_WriteNibble(0x03);            
 8002a32:	2003      	movs	r0, #3
 8002a34:	f7ff fe56 	bl	80026e4 <LCD_WriteNibble>
    for(delayCnt = 0; delayCnt < 30000; delayCnt++);
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61bb      	str	r3, [r7, #24]
 8002a3c:	e002      	b.n	8002a44 <LCD_Initialize+0x80>
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	3301      	adds	r3, #1
 8002a42:	61bb      	str	r3, [r7, #24]
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	f247 522f 	movw	r2, #29999	; 0x752f
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d9f7      	bls.n	8002a3e <LCD_Initialize+0x7a>
  for(i = 0; i < 3; i++) {
 8002a4e:	7ffb      	ldrb	r3, [r7, #31]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	3301      	adds	r3, #1
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	77fb      	strb	r3, [r7, #31]
 8002a58:	7ffb      	ldrb	r3, [r7, #31]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d9e8      	bls.n	8002a32 <LCD_Initialize+0x6e>
  }
  
  LCD_WriteNibble(0x02);             
 8002a60:	2002      	movs	r0, #2
 8002a62:	f7ff fe3f 	bl	80026e4 <LCD_WriteNibble>
  
  for(delayCnt = 0; delayCnt < 6000; delayCnt++);
 8002a66:	2300      	movs	r3, #0
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	e002      	b.n	8002a72 <LCD_Initialize+0xae>
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	f241 726f 	movw	r2, #5999	; 0x176f
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d9f7      	bls.n	8002a6c <LCD_Initialize+0xa8>
     
  LCD_WriteCommand(HD44780_FUNCTION_SET | 
 8002a7c:	2028      	movs	r0, #40	; 0x28
 8002a7e:	f7ff ff2d 	bl	80028dc <LCD_WriteCommand>
                   HD44780_FONT5x7 | 
                   HD44780_TWO_LINE | 
                   HD44780_4_BIT);
  
  LCD_WriteCommand(HD44780_DISPLAY_ONOFF | 
 8002a82:	2008      	movs	r0, #8
 8002a84:	f7ff ff2a 	bl	80028dc <LCD_WriteCommand>
                   HD44780_DISPLAY_OFF); 
  
  LCD_WriteCommand(HD44780_CLEAR); 
 8002a88:	2001      	movs	r0, #1
 8002a8a:	f7ff ff27 	bl	80028dc <LCD_WriteCommand>
  
  LCD_WriteCommand(HD44780_ENTRY_MODE | 
 8002a8e:	2006      	movs	r0, #6
 8002a90:	f7ff ff24 	bl	80028dc <LCD_WriteCommand>
                   HD44780_EM_SHIFT_CURSOR | 
                   HD44780_EM_INCREMENT);
  
  LCD_WriteCommand(HD44780_DISPLAY_ONOFF | 
 8002a94:	200c      	movs	r0, #12
 8002a96:	f7ff ff21 	bl	80028dc <LCD_WriteCommand>
                   HD44780_DISPLAY_ON |
                   HD44780_CURSOR_OFF | 
                   HD44780_CURSOR_NOBLINK);
}
 8002a9a:	bf00      	nop
 8002a9c:	3720      	adds	r7, #32
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	2000024c 	.word	0x2000024c
 8002aac:	40020800 	.word	0x40020800
 8002ab0:	000493df 	.word	0x000493df

08002ab4 <move_menu>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void move_menu(char *a[])
  {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
	symbol[0] = keypad_readkey();
 8002abc:	f7ff fdc8 	bl	8002650 <keypad_readkey>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4b29      	ldr	r3, [pc, #164]	; (8002b6c <move_menu+0xb8>)
 8002ac6:	701a      	strb	r2, [r3, #0]
	  if (symbol[0] == 'B' && (position<max_pos)) {
 8002ac8:	4b28      	ldr	r3, [pc, #160]	; (8002b6c <move_menu+0xb8>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b42      	cmp	r3, #66	; 0x42
 8002ace:	d10e      	bne.n	8002aee <move_menu+0x3a>
 8002ad0:	4b27      	ldr	r3, [pc, #156]	; (8002b70 <move_menu+0xbc>)
 8002ad2:	781a      	ldrb	r2, [r3, #0]
 8002ad4:	4b27      	ldr	r3, [pc, #156]	; (8002b74 <move_menu+0xc0>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d208      	bcs.n	8002aee <move_menu+0x3a>
	  	   	  position++;
 8002adc:	4b24      	ldr	r3, [pc, #144]	; (8002b70 <move_menu+0xbc>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <move_menu+0xbc>)
 8002ae6:	701a      	strb	r2, [r3, #0]
	  	   	  refreshLCD=true;
 8002ae8:	4b23      	ldr	r3, [pc, #140]	; (8002b78 <move_menu+0xc4>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	701a      	strb	r2, [r3, #0]
	  	   	}

	  	   	if (symbol[0] == 'A' && (position>1)) {
 8002aee:	4b1f      	ldr	r3, [pc, #124]	; (8002b6c <move_menu+0xb8>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b41      	cmp	r3, #65	; 0x41
 8002af4:	d10c      	bne.n	8002b10 <move_menu+0x5c>
 8002af6:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <move_menu+0xbc>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d908      	bls.n	8002b10 <move_menu+0x5c>
	  	   	  position--;
 8002afe:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <move_menu+0xbc>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <move_menu+0xbc>)
 8002b08:	701a      	strb	r2, [r3, #0]
	  	   	  refreshLCD=true;
 8002b0a:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <move_menu+0xc4>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]
	  	   	}
	  	  if (refreshLCD){                           //Odswiezanie LCD tylko przy zmiane zawartosci - usuwa problem "migotania" LCD
 8002b10:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <move_menu+0xc4>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d024      	beq.n	8002b62 <move_menu+0xae>
	   	  LCD_WriteCommand(HD44780_CLEAR);
 8002b18:	2001      	movs	r0, #1
 8002b1a:	f7ff fedf 	bl	80028dc <LCD_WriteCommand>
	   	  LCD_WriteText("->");
 8002b1e:	4817      	ldr	r0, [pc, #92]	; (8002b7c <move_menu+0xc8>)
 8002b20:	f7ff ff02 	bl	8002928 <LCD_WriteText>
	   	  LCD_WriteText(a[position-1]);
 8002b24:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <move_menu+0xbc>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fef5 	bl	8002928 <LCD_WriteText>
	   	  if (position<4){
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <move_menu+0xbc>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d80a      	bhi.n	8002b5c <move_menu+0xa8>
	   		LCD_WriteTextXY(a[position-1+1],2,1);
 8002b46:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <move_menu+0xbc>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	4413      	add	r3, r2
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2201      	movs	r2, #1
 8002b54:	2102      	movs	r1, #2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff ff15 	bl	8002986 <LCD_WriteTextXY>
	   	  }
	   	  refreshLCD=false;
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <move_menu+0xc4>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	701a      	strb	r2, [r3, #0]
	   	}
  }
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000260 	.word	0x20000260
 8002b70:	20000054 	.word	0x20000054
 8002b74:	20000055 	.word	0x20000055
 8002b78:	200002c5 	.word	0x200002c5
 8002b7c:	0800ab94 	.word	0x0800ab94

08002b80 <roundToTwoDecimals>:

double roundToTwoDecimals(double value) {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	ed87 0b00 	vstr	d0, [r7]
	return floor(value * 100.0 + 0.5) / 100.0;
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <roundToTwoDecimals+0x64>)
 8002b90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b94:	f7fd fd60 	bl	8000658 <__aeabi_dmul>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <roundToTwoDecimals+0x68>)
 8002ba6:	f7fd fba1 	bl	80002ec <__adddf3>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	ec43 2b17 	vmov	d7, r2, r3
 8002bb2:	eeb0 0a47 	vmov.f32	s0, s14
 8002bb6:	eef0 0a67 	vmov.f32	s1, s15
 8002bba:	f007 fee1 	bl	800a980 <floor>
 8002bbe:	ec51 0b10 	vmov	r0, r1, d0
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <roundToTwoDecimals+0x64>)
 8002bc8:	f7fd fe70 	bl	80008ac <__aeabi_ddiv>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	ec43 2b17 	vmov	d7, r2, r3
}
 8002bd4:	eeb0 0a47 	vmov.f32	s0, s14
 8002bd8:	eef0 0a67 	vmov.f32	s1, s15
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40590000 	.word	0x40590000
 8002be8:	3fe00000 	.word	0x3fe00000

08002bec <sendBluetoothData>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void sendBluetoothData(const char* data){
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
	snprintf(buffer, sizeof(buffer), "%s\n", data);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a0c      	ldr	r2, [pc, #48]	; (8002c28 <sendBluetoothData+0x3c>)
 8002bf8:	210a      	movs	r1, #10
 8002bfa:	480c      	ldr	r0, [pc, #48]	; (8002c2c <sendBluetoothData+0x40>)
 8002bfc:	f007 fa06 	bl	800a00c <sniprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002c00:	480a      	ldr	r0, [pc, #40]	; (8002c2c <sendBluetoothData+0x40>)
 8002c02:	f7fd fb0f 	bl	8000224 <strlen>
 8002c06:	4603      	mov	r3, r0
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0e:	4907      	ldr	r1, [pc, #28]	; (8002c2c <sendBluetoothData+0x40>)
 8002c10:	4807      	ldr	r0, [pc, #28]	; (8002c30 <sendBluetoothData+0x44>)
 8002c12:	f006 fa67 	bl	80090e4 <HAL_UART_Transmit>
	HAL_Delay(500);
 8002c16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c1a:	f002 f877 	bl	8004d0c <HAL_Delay>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	0800ab98 	.word	0x0800ab98
 8002c2c:	200002a0 	.word	0x200002a0
 8002c30:	20000498 	.word	0x20000498

08002c34 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6) {
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a0e      	ldr	r2, [pc, #56]	; (8002c7c <HAL_UART_RxCpltCallback+0x48>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d116      	bne.n	8002c74 <HAL_UART_RxCpltCallback+0x40>
        rxIndex++;
 8002c46:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <HAL_UART_RxCpltCallback+0x4c>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <HAL_UART_RxCpltCallback+0x4c>)
 8002c50:	701a      	strb	r2, [r3, #0]

        if (rxIndex >= RX_BUFFER_SIZE+2) {
 8002c52:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_UART_RxCpltCallback+0x4c>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b05      	cmp	r3, #5
 8002c58:	d902      	bls.n	8002c60 <HAL_UART_RxCpltCallback+0x2c>
            rxIndex = 0;
 8002c5a:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <HAL_UART_RxCpltCallback+0x4c>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(huart, &rxBuffer[rxIndex], 1);
 8002c60:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <HAL_UART_RxCpltCallback+0x4c>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <HAL_UART_RxCpltCallback+0x50>)
 8002c68:	4413      	add	r3, r2
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f006 fabb 	bl	80091ea <HAL_UART_Receive_IT>
    }
}
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40011400 	.word	0x40011400
 8002c80:	200002b6 	.word	0x200002b6
 8002c84:	200002ac 	.word	0x200002ac

08002c88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  if(htim == &htim2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a1a      	ldr	r2, [pc, #104]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d12d      	bne.n	8002cf4 <HAL_TIM_PeriodElapsedCallback+0x6c>
  {
	  if((PIR_Garage == true || PIR_Kitchen == true || PIR_Livingroom == true) && alarm == true)
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d107      	bne.n	8002cb0 <HAL_TIM_PeriodElapsedCallback+0x28>
 8002ca0:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d103      	bne.n	8002cb0 <HAL_TIM_PeriodElapsedCallback+0x28>
 8002ca8:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d009      	beq.n	8002cc4 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8002cb0:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_TIM_PeriodElapsedCallback+0x3c>
	  {
		  PIR_detected = true, alarmLED = true;
 8002cb8:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	701a      	strb	r2, [r3, #0]
	  }

	  if(alarmLED == true && PIR_detected == true)
 8002cc4:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00d      	beq.n	8002ce8 <HAL_TIM_PeriodElapsedCallback+0x60>
 8002ccc:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d009      	beq.n	8002ce8 <HAL_TIM_PeriodElapsedCallback+0x60>
	  {
		  HAL_GPIO_TogglePin(Alarm_LED_GPIO_Port, Alarm_LED_Pin);
 8002cd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cd8:	480f      	ldr	r0, [pc, #60]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002cda:	f002 fb4c 	bl	8005376 <HAL_GPIO_TogglePin>
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002cde:	2108      	movs	r1, #8
 8002ce0:	4806      	ldr	r0, [pc, #24]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002ce2:	f004 ffaf 	bl	8007c44 <HAL_TIM_PWM_Start>
	  else
	  {
		  HAL_GPIO_WritePin(Alarm_LED_GPIO_Port, Alarm_LED_Pin, GPIO_PIN_RESET);
	  };
  }
}
 8002ce6:	e005      	b.n	8002cf4 <HAL_TIM_PeriodElapsedCallback+0x6c>
		  HAL_GPIO_WritePin(Alarm_LED_GPIO_Port, Alarm_LED_Pin, GPIO_PIN_RESET);
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cee:	480a      	ldr	r0, [pc, #40]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002cf0:	f002 fb28 	bl	8005344 <HAL_GPIO_WritePin>
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	200003b4 	.word	0x200003b4
 8002d00:	200002c8 	.word	0x200002c8
 8002d04:	200002ca 	.word	0x200002ca
 8002d08:	200002c9 	.word	0x200002c9
 8002d0c:	200002c6 	.word	0x200002c6
 8002d10:	200002cb 	.word	0x200002cb
 8002d14:	200002c7 	.word	0x200002c7
 8002d18:	40021000 	.word	0x40021000

08002d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d1c:	b5b0      	push	{r4, r5, r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d22:	f001 ff96 	bl	8004c52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d26:	f001 f933 	bl	8003f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d2a:	f7ff fa17 	bl	800215c <MX_GPIO_Init>
  MX_TIM2_Init();
 8002d2e:	f001 fbd1 	bl	80044d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002d32:	f001 fc53 	bl	80045dc <MX_TIM3_Init>
  MX_TIM4_Init();
 8002d36:	f001 fcd3 	bl	80046e0 <MX_TIM4_Init>
  MX_SPI4_Init();
 8002d3a:	f001 f997 	bl	800406c <MX_SPI4_Init>
  MX_I2C1_Init();
 8002d3e:	f7ff fb2d 	bl	800239c <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8002d42:	f001 fecd 	bl	8004ae0 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8002d46:	f001 faeb 	bl	8004320 <MX_TIM1_Init>
  MX_I2C2_Init();
 8002d4a:	f7ff fb67 	bl	800241c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  //LOAD CONFIG
  //alarm_config();
  keypad_config();
 8002d4e:	f7ff fc4b 	bl	80025e8 <keypad_config>
  LCD_Initialize();
 8002d52:	f7ff fe37 	bl	80029c4 <LCD_Initialize>
 //TIMERS AND INTERRUPTS
  HAL_TIM_Base_Start_IT(&htim2);
 8002d56:	489f      	ldr	r0, [pc, #636]	; (8002fd4 <main+0x2b8>)
 8002d58:	f004 fe0a 	bl	8007970 <HAL_TIM_Base_Start_IT>
  BMP2_Init(&bmp2dev);
 8002d5c:	489e      	ldr	r0, [pc, #632]	; (8002fd8 <main+0x2bc>)
 8002d5e:	f7ff f8cd 	bl	8001efc <BMP2_Init>
  //START SCREEN
  LCD_WriteCommand(HD44780_CLEAR);
 8002d62:	2001      	movs	r0, #1
 8002d64:	f7ff fdba 	bl	80028dc <LCD_WriteCommand>
  LCD_WriteText("Welcome to");
 8002d68:	489c      	ldr	r0, [pc, #624]	; (8002fdc <main+0x2c0>)
 8002d6a:	f7ff fddd 	bl	8002928 <LCD_WriteText>
  LCD_WriteTextXY("Smarthome system",0,1);
 8002d6e:	2201      	movs	r2, #1
 8002d70:	2100      	movs	r1, #0
 8002d72:	489b      	ldr	r0, [pc, #620]	; (8002fe0 <main+0x2c4>)
 8002d74:	f7ff fe07 	bl	8002986 <LCD_WriteTextXY>
  HAL_Delay(3000);
 8002d78:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002d7c:	f001 ffc6 	bl	8004d0c <HAL_Delay>
  refreshLCD = true;
 8002d80:	4b98      	ldr	r3, [pc, #608]	; (8002fe4 <main+0x2c8>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &rxBuffer[rxIndex], 1);  // Rozpocznij odbiór
 8002d86:	4b98      	ldr	r3, [pc, #608]	; (8002fe8 <main+0x2cc>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4b97      	ldr	r3, [pc, #604]	; (8002fec <main+0x2d0>)
 8002d8e:	4413      	add	r3, r2
 8002d90:	2201      	movs	r2, #1
 8002d92:	4619      	mov	r1, r3
 8002d94:	4896      	ldr	r0, [pc, #600]	; (8002ff0 <main+0x2d4>)
 8002d96:	f006 fa28 	bl	80091ea <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(PIR_Garage_GPIO_Port, PIR_Garage_Pin) == GPIO_PIN_SET){PIR_Garage = true;}
 8002d9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d9e:	4895      	ldr	r0, [pc, #596]	; (8002ff4 <main+0x2d8>)
 8002da0:	f002 fab8 	bl	8005314 <HAL_GPIO_ReadPin>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d103      	bne.n	8002db2 <main+0x96>
 8002daa:	4b93      	ldr	r3, [pc, #588]	; (8002ff8 <main+0x2dc>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	e002      	b.n	8002db8 <main+0x9c>
	  	  else {PIR_Garage = false;};
 8002db2:	4b91      	ldr	r3, [pc, #580]	; (8002ff8 <main+0x2dc>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(PIR_Kitchen_GPIO_Port, PIR_Kitchen_Pin) == GPIO_PIN_SET){PIR_Kitchen = true;}
 8002db8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002dbc:	488d      	ldr	r0, [pc, #564]	; (8002ff4 <main+0x2d8>)
 8002dbe:	f002 faa9 	bl	8005314 <HAL_GPIO_ReadPin>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d103      	bne.n	8002dd0 <main+0xb4>
 8002dc8:	4b8c      	ldr	r3, [pc, #560]	; (8002ffc <main+0x2e0>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	701a      	strb	r2, [r3, #0]
 8002dce:	e002      	b.n	8002dd6 <main+0xba>
	  	  else {PIR_Kitchen = false;};
 8002dd0:	4b8a      	ldr	r3, [pc, #552]	; (8002ffc <main+0x2e0>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(PIR_Livingroom_GPIO_Port, PIR_Livingroom_Pin) == GPIO_PIN_SET){PIR_Livingroom = true;}
 8002dd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dda:	4886      	ldr	r0, [pc, #536]	; (8002ff4 <main+0x2d8>)
 8002ddc:	f002 fa9a 	bl	8005314 <HAL_GPIO_ReadPin>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d103      	bne.n	8002dee <main+0xd2>
 8002de6:	4b86      	ldr	r3, [pc, #536]	; (8003000 <main+0x2e4>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	701a      	strb	r2, [r3, #0]
 8002dec:	e002      	b.n	8002df4 <main+0xd8>
	  	  else{PIR_Livingroom = false;};
 8002dee:	4b84      	ldr	r3, [pc, #528]	; (8003000 <main+0x2e4>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]
	  move_menu(act_menu);
 8002df4:	4b83      	ldr	r3, [pc, #524]	; (8003004 <main+0x2e8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fe5b 	bl	8002ab4 <move_menu>
 	if (symbol[0] == '*' && act_menu == mainmenu){
 8002dfe:	4b82      	ldr	r3, [pc, #520]	; (8003008 <main+0x2ec>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b2a      	cmp	r3, #42	; 0x2a
 8002e04:	f040 80af 	bne.w	8002f66 <main+0x24a>
 8002e08:	4b7e      	ldr	r3, [pc, #504]	; (8003004 <main+0x2e8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a7f      	ldr	r2, [pc, #508]	; (800300c <main+0x2f0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	f040 80a9 	bne.w	8002f66 <main+0x24a>
 		refreshLCD = true;
 8002e14:	4b73      	ldr	r3, [pc, #460]	; (8002fe4 <main+0x2c8>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]
 		switch (position){
 8002e1a:	4b7d      	ldr	r3, [pc, #500]	; (8003010 <main+0x2f4>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	f200 8094 	bhi.w	8002f4e <main+0x232>
 8002e26:	a201      	add	r2, pc, #4	; (adr r2, 8002e2c <main+0x110>)
 8002e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2c:	08002e3d 	.word	0x08002e3d
 8002e30:	08002e51 	.word	0x08002e51
 8002e34:	08002e65 	.word	0x08002e65
 8002e38:	08002e79 	.word	0x08002e79
			case 1: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8002e3c:	4b71      	ldr	r3, [pc, #452]	; (8003004 <main+0x2e8>)
 8002e3e:	4a75      	ldr	r2, [pc, #468]	; (8003014 <main+0x2f8>)
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	4b73      	ldr	r3, [pc, #460]	; (8003010 <main+0x2f4>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	701a      	strb	r2, [r3, #0]
 8002e48:	4b73      	ldr	r3, [pc, #460]	; (8003018 <main+0x2fc>)
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	701a      	strb	r2, [r3, #0]
 8002e4e:	e088      	b.n	8002f62 <main+0x246>
			case 2: act_menu = menuLivingroom, position = 1, max_pos = 2; break;
 8002e50:	4b6c      	ldr	r3, [pc, #432]	; (8003004 <main+0x2e8>)
 8002e52:	4a72      	ldr	r2, [pc, #456]	; (800301c <main+0x300>)
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	4b6e      	ldr	r3, [pc, #440]	; (8003010 <main+0x2f4>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	701a      	strb	r2, [r3, #0]
 8002e5c:	4b6e      	ldr	r3, [pc, #440]	; (8003018 <main+0x2fc>)
 8002e5e:	2202      	movs	r2, #2
 8002e60:	701a      	strb	r2, [r3, #0]
 8002e62:	e07e      	b.n	8002f62 <main+0x246>
			case 3: act_menu = menuGarage, position = 1, max_pos = 1; break;
 8002e64:	4b67      	ldr	r3, [pc, #412]	; (8003004 <main+0x2e8>)
 8002e66:	4a6e      	ldr	r2, [pc, #440]	; (8003020 <main+0x304>)
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	4b69      	ldr	r3, [pc, #420]	; (8003010 <main+0x2f4>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	701a      	strb	r2, [r3, #0]
 8002e70:	4b69      	ldr	r3, [pc, #420]	; (8003018 <main+0x2fc>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	701a      	strb	r2, [r3, #0]
 8002e76:	e074      	b.n	8002f62 <main+0x246>
			case 4:
					i = 0;
 8002e78:	4b6a      	ldr	r3, [pc, #424]	; (8003024 <main+0x308>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
					HAL_Delay(200);
 8002e7e:	20c8      	movs	r0, #200	; 0xc8
 8002e80:	f001 ff44 	bl	8004d0c <HAL_Delay>
					memset(buff, 0, sizeof(buff));
 8002e84:	2205      	movs	r2, #5
 8002e86:	2100      	movs	r1, #0
 8002e88:	4867      	ldr	r0, [pc, #412]	; (8003028 <main+0x30c>)
 8002e8a:	f007 f8f3 	bl	800a074 <memset>
					LCD_WriteCommand(HD44780_CLEAR);
 8002e8e:	2001      	movs	r0, #1
 8002e90:	f7ff fd24 	bl	80028dc <LCD_WriteCommand>
					LCD_WriteText("Write PIN");
 8002e94:	4865      	ldr	r0, [pc, #404]	; (800302c <main+0x310>)
 8002e96:	f7ff fd47 	bl	8002928 <LCD_WriteText>
					while(1) {
						refreshLCD = true;
 8002e9a:	4b52      	ldr	r3, [pc, #328]	; (8002fe4 <main+0x2c8>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	701a      	strb	r2, [r3, #0]
						symbol[0] = keypad_readkey();
 8002ea0:	f7ff fbd6 	bl	8002650 <keypad_readkey>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	4b57      	ldr	r3, [pc, #348]	; (8003008 <main+0x2ec>)
 8002eaa:	701a      	strb	r2, [r3, #0]
						if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 8002eac:	4b56      	ldr	r3, [pc, #344]	; (8003008 <main+0x2ec>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b2f      	cmp	r3, #47	; 0x2f
 8002eb2:	d922      	bls.n	8002efa <main+0x1de>
 8002eb4:	4b54      	ldr	r3, [pc, #336]	; (8003008 <main+0x2ec>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b39      	cmp	r3, #57	; 0x39
 8002eba:	d81e      	bhi.n	8002efa <main+0x1de>
 8002ebc:	4b59      	ldr	r3, [pc, #356]	; (8003024 <main+0x308>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d81a      	bhi.n	8002efa <main+0x1de>
							buff[i] = symbol[0];
 8002ec4:	4b57      	ldr	r3, [pc, #348]	; (8003024 <main+0x308>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a4f      	ldr	r2, [pc, #316]	; (8003008 <main+0x2ec>)
 8002eca:	7811      	ldrb	r1, [r2, #0]
 8002ecc:	4a56      	ldr	r2, [pc, #344]	; (8003028 <main+0x30c>)
 8002ece:	54d1      	strb	r1, [r2, r3]
							i++;
 8002ed0:	4b54      	ldr	r3, [pc, #336]	; (8003024 <main+0x308>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	4a53      	ldr	r2, [pc, #332]	; (8003024 <main+0x308>)
 8002ed8:	6013      	str	r3, [r2, #0]
							buff[i] = '\0';
 8002eda:	4b52      	ldr	r3, [pc, #328]	; (8003024 <main+0x308>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a52      	ldr	r2, [pc, #328]	; (8003028 <main+0x30c>)
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	54d1      	strb	r1, [r2, r3]
							LCD_WriteCommand(HD44780_CLEAR);
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	f7ff fcf9 	bl	80028dc <LCD_WriteCommand>
							LCD_WriteText("PIN: ");
 8002eea:	4851      	ldr	r0, [pc, #324]	; (8003030 <main+0x314>)
 8002eec:	f7ff fd1c 	bl	8002928 <LCD_WriteText>
							LCD_WriteTextXY(buff, 0, 1);
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	484c      	ldr	r0, [pc, #304]	; (8003028 <main+0x30c>)
 8002ef6:	f7ff fd46 	bl	8002986 <LCD_WriteTextXY>
						}
						HAL_Delay(300);
 8002efa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002efe:	f001 ff05 	bl	8004d0c <HAL_Delay>
						symbol[0] = keypad_readkey();
 8002f02:	f7ff fba5 	bl	8002650 <keypad_readkey>
 8002f06:	4603      	mov	r3, r0
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4b3f      	ldr	r3, [pc, #252]	; (8003008 <main+0x2ec>)
 8002f0c:	701a      	strb	r2, [r3, #0]
						if(symbol[0] == '*') {
 8002f0e:	4b3e      	ldr	r3, [pc, #248]	; (8003008 <main+0x2ec>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b2a      	cmp	r3, #42	; 0x2a
 8002f14:	d115      	bne.n	8002f42 <main+0x226>
							pinKey = atoi(buff);
 8002f16:	4844      	ldr	r0, [pc, #272]	; (8003028 <main+0x30c>)
 8002f18:	f006 ffe8 	bl	8009eec <atoi>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	4a45      	ldr	r2, [pc, #276]	; (8003034 <main+0x318>)
 8002f20:	6013      	str	r3, [r2, #0]
							if(pinKey == 1234) {
 8002f22:	4b44      	ldr	r3, [pc, #272]	; (8003034 <main+0x318>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d10d      	bne.n	8002f4a <main+0x22e>
								act_menu = menuAlarm, position = 1, max_pos = 2; break;
 8002f2e:	4b35      	ldr	r3, [pc, #212]	; (8003004 <main+0x2e8>)
 8002f30:	4a41      	ldr	r2, [pc, #260]	; (8003038 <main+0x31c>)
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	4b36      	ldr	r3, [pc, #216]	; (8003010 <main+0x2f4>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]
 8002f3a:	4b37      	ldr	r3, [pc, #220]	; (8003018 <main+0x2fc>)
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	701a      	strb	r2, [r3, #0]
 8002f40:	e004      	b.n	8002f4c <main+0x230>
							}
							break;
						}
						HAL_Delay(100);
 8002f42:	2064      	movs	r0, #100	; 0x64
 8002f44:	f001 fee2 	bl	8004d0c <HAL_Delay>
						refreshLCD = true;
 8002f48:	e7a7      	b.n	8002e9a <main+0x17e>
							break;
 8002f4a:	bf00      	nop
					}
					break;
 8002f4c:	e009      	b.n	8002f62 <main+0x246>
			default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8002f4e:	4b2d      	ldr	r3, [pc, #180]	; (8003004 <main+0x2e8>)
 8002f50:	4a30      	ldr	r2, [pc, #192]	; (8003014 <main+0x2f8>)
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	4b2e      	ldr	r3, [pc, #184]	; (8003010 <main+0x2f4>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	701a      	strb	r2, [r3, #0]
 8002f5a:	4b2f      	ldr	r3, [pc, #188]	; (8003018 <main+0x2fc>)
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	701a      	strb	r2, [r3, #0]
 8002f60:	bf00      	nop
 		switch (position){
 8002f62:	f000 be45 	b.w	8003bf0 <main+0xed4>
 		}
 	}
 	else if(symbol[0] == '*' && act_menu == menuAlarm){
 8002f66:	4b28      	ldr	r3, [pc, #160]	; (8003008 <main+0x2ec>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8002f6c:	f040 80a1 	bne.w	80030b2 <main+0x396>
 8002f70:	4b24      	ldr	r3, [pc, #144]	; (8003004 <main+0x2e8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a30      	ldr	r2, [pc, #192]	; (8003038 <main+0x31c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	f040 809b 	bne.w	80030b2 <main+0x396>
 		refreshLCD = true;
 8002f7c:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <main+0x2c8>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	701a      	strb	r2, [r3, #0]
 		switch (position){
 8002f82:	4b23      	ldr	r3, [pc, #140]	; (8003010 <main+0x2f4>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d002      	beq.n	8002f90 <main+0x274>
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d060      	beq.n	8003050 <main+0x334>
 8002f8e:	e084      	b.n	800309a <main+0x37e>
			case 1: alarm = true;
 8002f90:	4b2a      	ldr	r3, [pc, #168]	; (800303c <main+0x320>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	701a      	strb	r2, [r3, #0]
				PIR_detected = false;
 8002f96:	4b2a      	ldr	r3, [pc, #168]	; (8003040 <main+0x324>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
				alarmLED = false;
 8002f9c:	4b29      	ldr	r3, [pc, #164]	; (8003044 <main+0x328>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
				LCD_WriteCommand(HD44780_CLEAR);
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	f7ff fc9a 	bl	80028dc <LCD_WriteCommand>
				LCD_WriteText("Alarm");
 8002fa8:	4827      	ldr	r0, [pc, #156]	; (8003048 <main+0x32c>)
 8002faa:	f7ff fcbd 	bl	8002928 <LCD_WriteText>
				LCD_WriteTextXY("turned on",0,1);
 8002fae:	2201      	movs	r2, #1
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4826      	ldr	r0, [pc, #152]	; (800304c <main+0x330>)
 8002fb4:	f7ff fce7 	bl	8002986 <LCD_WriteTextXY>
				HAL_TIM_Base_Start_IT(&htim2);
 8002fb8:	4806      	ldr	r0, [pc, #24]	; (8002fd4 <main+0x2b8>)
 8002fba:	f004 fcd9 	bl	8007970 <HAL_TIM_Base_Start_IT>
				act_menu = mainmenu, position = 1, max_pos = 4;
 8002fbe:	4b11      	ldr	r3, [pc, #68]	; (8003004 <main+0x2e8>)
 8002fc0:	4a12      	ldr	r2, [pc, #72]	; (800300c <main+0x2f0>)
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	4b12      	ldr	r3, [pc, #72]	; (8003010 <main+0x2f4>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	701a      	strb	r2, [r3, #0]
 8002fca:	4b13      	ldr	r3, [pc, #76]	; (8003018 <main+0x2fc>)
 8002fcc:	2204      	movs	r2, #4
 8002fce:	701a      	strb	r2, [r3, #0]
				break;
 8002fd0:	e06d      	b.n	80030ae <main+0x392>
 8002fd2:	bf00      	nop
 8002fd4:	200003b4 	.word	0x200003b4
 8002fd8:	20000018 	.word	0x20000018
 8002fdc:	0800ab9c 	.word	0x0800ab9c
 8002fe0:	0800aba8 	.word	0x0800aba8
 8002fe4:	200002c5 	.word	0x200002c5
 8002fe8:	200002b6 	.word	0x200002b6
 8002fec:	200002ac 	.word	0x200002ac
 8002ff0:	20000498 	.word	0x20000498
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	200002c8 	.word	0x200002c8
 8002ffc:	200002ca 	.word	0x200002ca
 8003000:	200002c9 	.word	0x200002c9
 8003004:	20000118 	.word	0x20000118
 8003008:	20000260 	.word	0x20000260
 800300c:	20000058 	.word	0x20000058
 8003010:	20000054 	.word	0x20000054
 8003014:	20000068 	.word	0x20000068
 8003018:	20000055 	.word	0x20000055
 800301c:	20000098 	.word	0x20000098
 8003020:	200000d8 	.word	0x200000d8
 8003024:	200002d0 	.word	0x200002d0
 8003028:	20000264 	.word	0x20000264
 800302c:	0800abbc 	.word	0x0800abbc
 8003030:	0800abc8 	.word	0x0800abc8
 8003034:	200002d8 	.word	0x200002d8
 8003038:	20000108 	.word	0x20000108
 800303c:	200002c6 	.word	0x200002c6
 8003040:	200002cb 	.word	0x200002cb
 8003044:	200002c7 	.word	0x200002c7
 8003048:	0800abd0 	.word	0x0800abd0
 800304c:	0800abd8 	.word	0x0800abd8

 	 		case 2: alarm = false;
 8003050:	4b9c      	ldr	r3, [pc, #624]	; (80032c4 <main+0x5a8>)
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
				PIR_detected = false;
 8003056:	4b9c      	ldr	r3, [pc, #624]	; (80032c8 <main+0x5ac>)
 8003058:	2200      	movs	r2, #0
 800305a:	701a      	strb	r2, [r3, #0]
				alarmLED = false;
 800305c:	4b9b      	ldr	r3, [pc, #620]	; (80032cc <main+0x5b0>)
 800305e:	2200      	movs	r2, #0
 8003060:	701a      	strb	r2, [r3, #0]
				LCD_WriteCommand(HD44780_CLEAR);
 8003062:	2001      	movs	r0, #1
 8003064:	f7ff fc3a 	bl	80028dc <LCD_WriteCommand>
				LCD_WriteText("Alarm");
 8003068:	4899      	ldr	r0, [pc, #612]	; (80032d0 <main+0x5b4>)
 800306a:	f7ff fc5d 	bl	8002928 <LCD_WriteText>
				LCD_WriteTextXY("turned off",0,1);
 800306e:	2201      	movs	r2, #1
 8003070:	2100      	movs	r1, #0
 8003072:	4898      	ldr	r0, [pc, #608]	; (80032d4 <main+0x5b8>)
 8003074:	f7ff fc87 	bl	8002986 <LCD_WriteTextXY>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8003078:	2108      	movs	r1, #8
 800307a:	4897      	ldr	r0, [pc, #604]	; (80032d8 <main+0x5bc>)
 800307c:	f004 fedc 	bl	8007e38 <HAL_TIM_PWM_Stop>
				HAL_TIM_Base_Stop_IT(&htim2);
 8003080:	4895      	ldr	r0, [pc, #596]	; (80032d8 <main+0x5bc>)
 8003082:	f004 fced 	bl	8007a60 <HAL_TIM_Base_Stop_IT>
				act_menu = mainmenu, position = 1, max_pos = 4;
 8003086:	4b95      	ldr	r3, [pc, #596]	; (80032dc <main+0x5c0>)
 8003088:	4a95      	ldr	r2, [pc, #596]	; (80032e0 <main+0x5c4>)
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	4b95      	ldr	r3, [pc, #596]	; (80032e4 <main+0x5c8>)
 800308e:	2201      	movs	r2, #1
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	4b95      	ldr	r3, [pc, #596]	; (80032e8 <main+0x5cc>)
 8003094:	2204      	movs	r2, #4
 8003096:	701a      	strb	r2, [r3, #0]
				break;
 8003098:	e009      	b.n	80030ae <main+0x392>

 	 		default: act_menu = menuAlarm, position = 1, max_pos = 2; break;
 800309a:	4b90      	ldr	r3, [pc, #576]	; (80032dc <main+0x5c0>)
 800309c:	4a93      	ldr	r2, [pc, #588]	; (80032ec <main+0x5d0>)
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	4b90      	ldr	r3, [pc, #576]	; (80032e4 <main+0x5c8>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	701a      	strb	r2, [r3, #0]
 80030a6:	4b90      	ldr	r3, [pc, #576]	; (80032e8 <main+0x5cc>)
 80030a8:	2202      	movs	r2, #2
 80030aa:	701a      	strb	r2, [r3, #0]
 80030ac:	bf00      	nop
 		switch (position){
 80030ae:	f000 bd9f 	b.w	8003bf0 <main+0xed4>
 		}
 	}
	else if(symbol[0] == '*' && act_menu == menuKitchen){
 80030b2:	4b8f      	ldr	r3, [pc, #572]	; (80032f0 <main+0x5d4>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b2a      	cmp	r3, #42	; 0x2a
 80030b8:	d12e      	bne.n	8003118 <main+0x3fc>
 80030ba:	4b88      	ldr	r3, [pc, #544]	; (80032dc <main+0x5c0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a8d      	ldr	r2, [pc, #564]	; (80032f4 <main+0x5d8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d129      	bne.n	8003118 <main+0x3fc>
		refreshLCD = true;
 80030c4:	4b8c      	ldr	r3, [pc, #560]	; (80032f8 <main+0x5dc>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	701a      	strb	r2, [r3, #0]
		switch (position){
 80030ca:	4b86      	ldr	r3, [pc, #536]	; (80032e4 <main+0x5c8>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d002      	beq.n	80030d8 <main+0x3bc>
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d00a      	beq.n	80030ec <main+0x3d0>
 80030d6:	e013      	b.n	8003100 <main+0x3e4>
			case 1: act_menu = menuKitchenLighting, position = 1, max_pos = 3; break;
 80030d8:	4b80      	ldr	r3, [pc, #512]	; (80032dc <main+0x5c0>)
 80030da:	4a88      	ldr	r2, [pc, #544]	; (80032fc <main+0x5e0>)
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	4b81      	ldr	r3, [pc, #516]	; (80032e4 <main+0x5c8>)
 80030e0:	2201      	movs	r2, #1
 80030e2:	701a      	strb	r2, [r3, #0]
 80030e4:	4b80      	ldr	r3, [pc, #512]	; (80032e8 <main+0x5cc>)
 80030e6:	2203      	movs	r2, #3
 80030e8:	701a      	strb	r2, [r3, #0]
 80030ea:	e013      	b.n	8003114 <main+0x3f8>
			case 2: act_menu = menuKitchenShutter, position = 1, max_pos = 2; break;
 80030ec:	4b7b      	ldr	r3, [pc, #492]	; (80032dc <main+0x5c0>)
 80030ee:	4a84      	ldr	r2, [pc, #528]	; (8003300 <main+0x5e4>)
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	4b7c      	ldr	r3, [pc, #496]	; (80032e4 <main+0x5c8>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	701a      	strb	r2, [r3, #0]
 80030f8:	4b7b      	ldr	r3, [pc, #492]	; (80032e8 <main+0x5cc>)
 80030fa:	2202      	movs	r2, #2
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	e009      	b.n	8003114 <main+0x3f8>
			default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8003100:	4b76      	ldr	r3, [pc, #472]	; (80032dc <main+0x5c0>)
 8003102:	4a7c      	ldr	r2, [pc, #496]	; (80032f4 <main+0x5d8>)
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	4b77      	ldr	r3, [pc, #476]	; (80032e4 <main+0x5c8>)
 8003108:	2201      	movs	r2, #1
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	4b76      	ldr	r3, [pc, #472]	; (80032e8 <main+0x5cc>)
 800310e:	2202      	movs	r2, #2
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	bf00      	nop
		switch (position){
 8003114:	f000 bd6c 	b.w	8003bf0 <main+0xed4>
		}
	}
	else if(symbol[0] == '*' && act_menu == menuKitchenLighting){
 8003118:	4b75      	ldr	r3, [pc, #468]	; (80032f0 <main+0x5d4>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b2a      	cmp	r3, #42	; 0x2a
 800311e:	f040 80bc 	bne.w	800329a <main+0x57e>
 8003122:	4b6e      	ldr	r3, [pc, #440]	; (80032dc <main+0x5c0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a75      	ldr	r2, [pc, #468]	; (80032fc <main+0x5e0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	f040 80b6 	bne.w	800329a <main+0x57e>
 		 	 		refreshLCD = true;
 800312e:	4b72      	ldr	r3, [pc, #456]	; (80032f8 <main+0x5dc>)
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 8003134:	4b6b      	ldr	r3, [pc, #428]	; (80032e4 <main+0x5c8>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b03      	cmp	r3, #3
 800313a:	d02c      	beq.n	8003196 <main+0x47a>
 800313c:	2b03      	cmp	r3, #3
 800313e:	f300 80a0 	bgt.w	8003282 <main+0x566>
 8003142:	2b01      	cmp	r3, #1
 8003144:	d002      	beq.n	800314c <main+0x430>
 8003146:	2b02      	cmp	r3, #2
 8003148:	d015      	beq.n	8003176 <main+0x45a>
 800314a:	e09a      	b.n	8003282 <main+0x566>
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 800314c:	2001      	movs	r0, #1
 800314e:	f7ff fbc5 	bl	80028dc <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 8003152:	486c      	ldr	r0, [pc, #432]	; (8003304 <main+0x5e8>)
 8003154:	f7ff fbe8 	bl	8002928 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 8003158:	2201      	movs	r2, #1
 800315a:	2100      	movs	r1, #0
 800315c:	486a      	ldr	r0, [pc, #424]	; (8003308 <main+0x5ec>)
 800315e:	f7ff fc12 	bl	8002986 <LCD_WriteTextXY>
 		 	 				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, brightnessKitchen);
 8003162:	4b6a      	ldr	r3, [pc, #424]	; (800330c <main+0x5f0>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	4b6a      	ldr	r3, [pc, #424]	; (8003310 <main+0x5f4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	63da      	str	r2, [r3, #60]	; 0x3c
 		 	 				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800316c:	2108      	movs	r1, #8
 800316e:	4868      	ldr	r0, [pc, #416]	; (8003310 <main+0x5f4>)
 8003170:	f004 fd68 	bl	8007c44 <HAL_TIM_PWM_Start>
 		 	 				break;
 8003174:	e08f      	b.n	8003296 <main+0x57a>

 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 8003176:	2001      	movs	r0, #1
 8003178:	f7ff fbb0 	bl	80028dc <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 800317c:	4861      	ldr	r0, [pc, #388]	; (8003304 <main+0x5e8>)
 800317e:	f7ff fbd3 	bl	8002928 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 8003182:	2201      	movs	r2, #1
 8003184:	2100      	movs	r1, #0
 8003186:	4853      	ldr	r0, [pc, #332]	; (80032d4 <main+0x5b8>)
 8003188:	f7ff fbfd 	bl	8002986 <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 800318c:	2108      	movs	r1, #8
 800318e:	4860      	ldr	r0, [pc, #384]	; (8003310 <main+0x5f4>)
 8003190:	f004 fe52 	bl	8007e38 <HAL_TIM_PWM_Stop>
 				 	 		break;
 8003194:	e07f      	b.n	8003296 <main+0x57a>

 		 	 		case 3:
							i = 0;
 8003196:	4b5f      	ldr	r3, [pc, #380]	; (8003314 <main+0x5f8>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
							HAL_Delay(200);
 800319c:	20c8      	movs	r0, #200	; 0xc8
 800319e:	f001 fdb5 	bl	8004d0c <HAL_Delay>
							memset(buff, 0, sizeof(buff));
 80031a2:	2205      	movs	r2, #5
 80031a4:	2100      	movs	r1, #0
 80031a6:	485c      	ldr	r0, [pc, #368]	; (8003318 <main+0x5fc>)
 80031a8:	f006 ff64 	bl	800a074 <memset>
							LCD_WriteCommand(HD44780_CLEAR);
 80031ac:	2001      	movs	r0, #1
 80031ae:	f7ff fb95 	bl	80028dc <LCD_WriteCommand>
							LCD_WriteText("Write Bright");
 80031b2:	485a      	ldr	r0, [pc, #360]	; (800331c <main+0x600>)
 80031b4:	f7ff fbb8 	bl	8002928 <LCD_WriteText>
							while(1) {
								refreshLCD = true;
 80031b8:	4b4f      	ldr	r3, [pc, #316]	; (80032f8 <main+0x5dc>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	701a      	strb	r2, [r3, #0]
								symbol[0] = keypad_readkey();
 80031be:	f7ff fa47 	bl	8002650 <keypad_readkey>
 80031c2:	4603      	mov	r3, r0
 80031c4:	461a      	mov	r2, r3
 80031c6:	4b4a      	ldr	r3, [pc, #296]	; (80032f0 <main+0x5d4>)
 80031c8:	701a      	strb	r2, [r3, #0]
								if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 80031ca:	4b49      	ldr	r3, [pc, #292]	; (80032f0 <main+0x5d4>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b2f      	cmp	r3, #47	; 0x2f
 80031d0:	d922      	bls.n	8003218 <main+0x4fc>
 80031d2:	4b47      	ldr	r3, [pc, #284]	; (80032f0 <main+0x5d4>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b39      	cmp	r3, #57	; 0x39
 80031d8:	d81e      	bhi.n	8003218 <main+0x4fc>
 80031da:	4b4e      	ldr	r3, [pc, #312]	; (8003314 <main+0x5f8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d81a      	bhi.n	8003218 <main+0x4fc>
									buff[i] = symbol[0];
 80031e2:	4b4c      	ldr	r3, [pc, #304]	; (8003314 <main+0x5f8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a42      	ldr	r2, [pc, #264]	; (80032f0 <main+0x5d4>)
 80031e8:	7811      	ldrb	r1, [r2, #0]
 80031ea:	4a4b      	ldr	r2, [pc, #300]	; (8003318 <main+0x5fc>)
 80031ec:	54d1      	strb	r1, [r2, r3]
									i++;
 80031ee:	4b49      	ldr	r3, [pc, #292]	; (8003314 <main+0x5f8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3301      	adds	r3, #1
 80031f4:	4a47      	ldr	r2, [pc, #284]	; (8003314 <main+0x5f8>)
 80031f6:	6013      	str	r3, [r2, #0]
									buff[i] = '\0';
 80031f8:	4b46      	ldr	r3, [pc, #280]	; (8003314 <main+0x5f8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a46      	ldr	r2, [pc, #280]	; (8003318 <main+0x5fc>)
 80031fe:	2100      	movs	r1, #0
 8003200:	54d1      	strb	r1, [r2, r3]
									LCD_WriteCommand(HD44780_CLEAR);
 8003202:	2001      	movs	r0, #1
 8003204:	f7ff fb6a 	bl	80028dc <LCD_WriteCommand>
									LCD_WriteText("Brightness: ");
 8003208:	4845      	ldr	r0, [pc, #276]	; (8003320 <main+0x604>)
 800320a:	f7ff fb8d 	bl	8002928 <LCD_WriteText>
									LCD_WriteTextXY(buff, 0, 1);
 800320e:	2201      	movs	r2, #1
 8003210:	2100      	movs	r1, #0
 8003212:	4841      	ldr	r0, [pc, #260]	; (8003318 <main+0x5fc>)
 8003214:	f7ff fbb7 	bl	8002986 <LCD_WriteTextXY>
								}
								HAL_Delay(200);
 8003218:	20c8      	movs	r0, #200	; 0xc8
 800321a:	f001 fd77 	bl	8004d0c <HAL_Delay>
								symbol[0] = keypad_readkey();
 800321e:	f7ff fa17 	bl	8002650 <keypad_readkey>
 8003222:	4603      	mov	r3, r0
 8003224:	461a      	mov	r2, r3
 8003226:	4b32      	ldr	r3, [pc, #200]	; (80032f0 <main+0x5d4>)
 8003228:	701a      	strb	r2, [r3, #0]
								if(symbol[0] == '*') {
 800322a:	4b31      	ldr	r3, [pc, #196]	; (80032f0 <main+0x5d4>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b2a      	cmp	r3, #42	; 0x2a
 8003230:	d123      	bne.n	800327a <main+0x55e>
									brightnessKitchen = atoi(buff)*10;
 8003232:	4839      	ldr	r0, [pc, #228]	; (8003318 <main+0x5fc>)
 8003234:	f006 fe5a 	bl	8009eec <atoi>
 8003238:	4602      	mov	r2, r0
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	461a      	mov	r2, r3
 8003244:	4b31      	ldr	r3, [pc, #196]	; (800330c <main+0x5f0>)
 8003246:	601a      	str	r2, [r3, #0]
									if(brightnessKitchen >= 1000) {
 8003248:	4b30      	ldr	r3, [pc, #192]	; (800330c <main+0x5f0>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003250:	db03      	blt.n	800325a <main+0x53e>
										brightnessKitchen = 999;
 8003252:	4b2e      	ldr	r3, [pc, #184]	; (800330c <main+0x5f0>)
 8003254:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003258:	601a      	str	r2, [r3, #0]
									}
								   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, brightnessKitchen);
 800325a:	4b2c      	ldr	r3, [pc, #176]	; (800330c <main+0x5f0>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	4b2c      	ldr	r3, [pc, #176]	; (8003310 <main+0x5f4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	63da      	str	r2, [r3, #60]	; 0x3c
									act_menu = menuKitchenLighting;
 8003264:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <main+0x5c0>)
 8003266:	4a25      	ldr	r2, [pc, #148]	; (80032fc <main+0x5e0>)
 8003268:	601a      	str	r2, [r3, #0]
									position = 1;
 800326a:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <main+0x5c8>)
 800326c:	2201      	movs	r2, #1
 800326e:	701a      	strb	r2, [r3, #0]
									max_pos = 3;
 8003270:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <main+0x5cc>)
 8003272:	2203      	movs	r2, #3
 8003274:	701a      	strb	r2, [r3, #0]
									break;
 8003276:	bf00      	nop
								}
								HAL_Delay(100);
							}
							break;
 8003278:	e00d      	b.n	8003296 <main+0x57a>
								HAL_Delay(100);
 800327a:	2064      	movs	r0, #100	; 0x64
 800327c:	f001 fd46 	bl	8004d0c <HAL_Delay>
								refreshLCD = true;
 8003280:	e79a      	b.n	80031b8 <main+0x49c>
 		 	 		default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8003282:	4b16      	ldr	r3, [pc, #88]	; (80032dc <main+0x5c0>)
 8003284:	4a1b      	ldr	r2, [pc, #108]	; (80032f4 <main+0x5d8>)
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	4b16      	ldr	r3, [pc, #88]	; (80032e4 <main+0x5c8>)
 800328a:	2201      	movs	r2, #1
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <main+0x5cc>)
 8003290:	2202      	movs	r2, #2
 8003292:	701a      	strb	r2, [r3, #0]
 8003294:	bf00      	nop
 		 	 	  switch (position){
 8003296:	f000 bcab 	b.w	8003bf0 <main+0xed4>
//					}
//					break;
//			default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
//		}
//	}
	else if(symbol[0] == '*' && act_menu == menuKitchenShutter) {
 800329a:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <main+0x5d4>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b2a      	cmp	r3, #42	; 0x2a
 80032a0:	d175      	bne.n	800338e <main+0x672>
 80032a2:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <main+0x5c0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a16      	ldr	r2, [pc, #88]	; (8003300 <main+0x5e4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d170      	bne.n	800338e <main+0x672>
			refreshLCD = true;
 80032ac:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <main+0x5dc>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	701a      	strb	r2, [r3, #0]
			switch(position) {
 80032b2:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <main+0x5c8>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d034      	beq.n	8003324 <main+0x608>
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d04d      	beq.n	800335a <main+0x63e>
 80032be:	f000 bc97 	b.w	8003bf0 <main+0xed4>
 80032c2:	bf00      	nop
 80032c4:	200002c6 	.word	0x200002c6
 80032c8:	200002cb 	.word	0x200002cb
 80032cc:	200002c7 	.word	0x200002c7
 80032d0:	0800abd0 	.word	0x0800abd0
 80032d4:	0800abe4 	.word	0x0800abe4
 80032d8:	200003b4 	.word	0x200003b4
 80032dc:	20000118 	.word	0x20000118
 80032e0:	20000058 	.word	0x20000058
 80032e4:	20000054 	.word	0x20000054
 80032e8:	20000055 	.word	0x20000055
 80032ec:	20000108 	.word	0x20000108
 80032f0:	20000260 	.word	0x20000260
 80032f4:	20000068 	.word	0x20000068
 80032f8:	200002c5 	.word	0x200002c5
 80032fc:	20000078 	.word	0x20000078
 8003300:	20000088 	.word	0x20000088
 8003304:	0800abf0 	.word	0x0800abf0
 8003308:	0800abd8 	.word	0x0800abd8
 800330c:	20000120 	.word	0x20000120
 8003310:	20000400 	.word	0x20000400
 8003314:	200002d0 	.word	0x200002d0
 8003318:	20000264 	.word	0x20000264
 800331c:	0800abf8 	.word	0x0800abf8
 8003320:	0800ac08 	.word	0x0800ac08
				case 1:
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 500);
 8003324:	4b9b      	ldr	r3, [pc, #620]	; (8003594 <main+0x878>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800332c:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_Delay(500);
 800332e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003332:	f001 fceb 	bl	8004d0c <HAL_Delay>
				   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 8003336:	4b97      	ldr	r3, [pc, #604]	; (8003594 <main+0x878>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2200      	movs	r2, #0
 800333c:	635a      	str	r2, [r3, #52]	; 0x34
				   kitchenShutter = true;
 800333e:	4b96      	ldr	r3, [pc, #600]	; (8003598 <main+0x87c>)
 8003340:	2201      	movs	r2, #1
 8003342:	701a      	strb	r2, [r3, #0]
				   LCD_WriteText("Shutter");
 8003344:	4895      	ldr	r0, [pc, #596]	; (800359c <main+0x880>)
 8003346:	f7ff faef 	bl	8002928 <LCD_WriteText>
				   LCD_WriteTextXY("is lowering",0,1);
 800334a:	2201      	movs	r2, #1
 800334c:	2100      	movs	r1, #0
 800334e:	4894      	ldr	r0, [pc, #592]	; (80035a0 <main+0x884>)
 8003350:	f7ff fb19 	bl	8002986 <LCD_WriteTextXY>
				   break;
 8003354:	bf00      	nop
			switch(position) {
 8003356:	f000 bc4b 	b.w	8003bf0 <main+0xed4>
				case 2:
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 2000);
 800335a:	4b8e      	ldr	r3, [pc, #568]	; (8003594 <main+0x878>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003362:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_Delay(500);
 8003364:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003368:	f001 fcd0 	bl	8004d0c <HAL_Delay>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800336c:	4b89      	ldr	r3, [pc, #548]	; (8003594 <main+0x878>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2200      	movs	r2, #0
 8003372:	635a      	str	r2, [r3, #52]	; 0x34
					kitchenShutter = false;
 8003374:	4b88      	ldr	r3, [pc, #544]	; (8003598 <main+0x87c>)
 8003376:	2200      	movs	r2, #0
 8003378:	701a      	strb	r2, [r3, #0]
					LCD_WriteText("Shutter");
 800337a:	4888      	ldr	r0, [pc, #544]	; (800359c <main+0x880>)
 800337c:	f7ff fad4 	bl	8002928 <LCD_WriteText>
					LCD_WriteTextXY("go up",0,1);
 8003380:	2201      	movs	r2, #1
 8003382:	2100      	movs	r1, #0
 8003384:	4887      	ldr	r0, [pc, #540]	; (80035a4 <main+0x888>)
 8003386:	f7ff fafe 	bl	8002986 <LCD_WriteTextXY>
			switch(position) {
 800338a:	f000 bc31 	b.w	8003bf0 <main+0xed4>
			}
	}

	else if(symbol[0] == '*' && act_menu == menuLivingroom){
 800338e:	4b86      	ldr	r3, [pc, #536]	; (80035a8 <main+0x88c>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b2a      	cmp	r3, #42	; 0x2a
 8003394:	d13b      	bne.n	800340e <main+0x6f2>
 8003396:	4b85      	ldr	r3, [pc, #532]	; (80035ac <main+0x890>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a85      	ldr	r2, [pc, #532]	; (80035b0 <main+0x894>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d136      	bne.n	800340e <main+0x6f2>
					refreshLCD = true;
 80033a0:	4b84      	ldr	r3, [pc, #528]	; (80035b4 <main+0x898>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	701a      	strb	r2, [r3, #0]
				  switch (position){
 80033a6:	4b84      	ldr	r3, [pc, #528]	; (80035b8 <main+0x89c>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	d01a      	beq.n	80033e4 <main+0x6c8>
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	dc22      	bgt.n	80033f8 <main+0x6dc>
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d002      	beq.n	80033bc <main+0x6a0>
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d00a      	beq.n	80033d0 <main+0x6b4>
 80033ba:	e01d      	b.n	80033f8 <main+0x6dc>
						case 1: act_menu = menuLivingroomTemperature, position = 1, max_pos = 2; break;
 80033bc:	4b7b      	ldr	r3, [pc, #492]	; (80035ac <main+0x890>)
 80033be:	4a7f      	ldr	r2, [pc, #508]	; (80035bc <main+0x8a0>)
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	4b7d      	ldr	r3, [pc, #500]	; (80035b8 <main+0x89c>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	701a      	strb	r2, [r3, #0]
 80033c8:	4b7d      	ldr	r3, [pc, #500]	; (80035c0 <main+0x8a4>)
 80033ca:	2202      	movs	r2, #2
 80033cc:	701a      	strb	r2, [r3, #0]
 80033ce:	e01d      	b.n	800340c <main+0x6f0>
						case 2: act_menu = menuLivingroomLighting, position = 1, max_pos = 3; break;
 80033d0:	4b76      	ldr	r3, [pc, #472]	; (80035ac <main+0x890>)
 80033d2:	4a7c      	ldr	r2, [pc, #496]	; (80035c4 <main+0x8a8>)
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	4b78      	ldr	r3, [pc, #480]	; (80035b8 <main+0x89c>)
 80033d8:	2201      	movs	r2, #1
 80033da:	701a      	strb	r2, [r3, #0]
 80033dc:	4b78      	ldr	r3, [pc, #480]	; (80035c0 <main+0x8a4>)
 80033de:	2203      	movs	r2, #3
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	e013      	b.n	800340c <main+0x6f0>
						case 3: act_menu = menuLivingroomShutter, position = 1, max_pos = 2; break;
 80033e4:	4b71      	ldr	r3, [pc, #452]	; (80035ac <main+0x890>)
 80033e6:	4a78      	ldr	r2, [pc, #480]	; (80035c8 <main+0x8ac>)
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	4b73      	ldr	r3, [pc, #460]	; (80035b8 <main+0x89c>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]
 80033f0:	4b73      	ldr	r3, [pc, #460]	; (80035c0 <main+0x8a4>)
 80033f2:	2202      	movs	r2, #2
 80033f4:	701a      	strb	r2, [r3, #0]
 80033f6:	e009      	b.n	800340c <main+0x6f0>
					default: act_menu = menuLivingroom, position = 1, max_pos = 2; break;
 80033f8:	4b6c      	ldr	r3, [pc, #432]	; (80035ac <main+0x890>)
 80033fa:	4a6d      	ldr	r2, [pc, #436]	; (80035b0 <main+0x894>)
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	4b6e      	ldr	r3, [pc, #440]	; (80035b8 <main+0x89c>)
 8003400:	2201      	movs	r2, #1
 8003402:	701a      	strb	r2, [r3, #0]
 8003404:	4b6e      	ldr	r3, [pc, #440]	; (80035c0 <main+0x8a4>)
 8003406:	2202      	movs	r2, #2
 8003408:	701a      	strb	r2, [r3, #0]
 800340a:	bf00      	nop
				  switch (position){
 800340c:	e3f0      	b.n	8003bf0 <main+0xed4>
					  }
	}
	else if(symbol[0] == '*' && act_menu == menuLivingroomLighting){
 800340e:	4b66      	ldr	r3, [pc, #408]	; (80035a8 <main+0x88c>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b2a      	cmp	r3, #42	; 0x2a
 8003414:	f040 80ec 	bne.w	80035f0 <main+0x8d4>
 8003418:	4b64      	ldr	r3, [pc, #400]	; (80035ac <main+0x890>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a69      	ldr	r2, [pc, #420]	; (80035c4 <main+0x8a8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	f040 80e6 	bne.w	80035f0 <main+0x8d4>
 		 	 		refreshLCD = true;
 8003424:	4b63      	ldr	r3, [pc, #396]	; (80035b4 <main+0x898>)
 8003426:	2201      	movs	r2, #1
 8003428:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 800342a:	4b63      	ldr	r3, [pc, #396]	; (80035b8 <main+0x89c>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b03      	cmp	r3, #3
 8003430:	d02c      	beq.n	800348c <main+0x770>
 8003432:	2b03      	cmp	r3, #3
 8003434:	f300 80a3 	bgt.w	800357e <main+0x862>
 8003438:	2b01      	cmp	r3, #1
 800343a:	d002      	beq.n	8003442 <main+0x726>
 800343c:	2b02      	cmp	r3, #2
 800343e:	d015      	beq.n	800346c <main+0x750>
 8003440:	e09d      	b.n	800357e <main+0x862>
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 8003442:	2001      	movs	r0, #1
 8003444:	f7ff fa4a 	bl	80028dc <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 8003448:	4860      	ldr	r0, [pc, #384]	; (80035cc <main+0x8b0>)
 800344a:	f7ff fa6d 	bl	8002928 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 800344e:	2201      	movs	r2, #1
 8003450:	2100      	movs	r1, #0
 8003452:	485f      	ldr	r0, [pc, #380]	; (80035d0 <main+0x8b4>)
 8003454:	f7ff fa97 	bl	8002986 <LCD_WriteTextXY>
 		 	 				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 8003458:	4b5e      	ldr	r3, [pc, #376]	; (80035d4 <main+0x8b8>)
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	4b5e      	ldr	r3, [pc, #376]	; (80035d8 <main+0x8bc>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	635a      	str	r2, [r3, #52]	; 0x34
							HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003462:	2100      	movs	r1, #0
 8003464:	485c      	ldr	r0, [pc, #368]	; (80035d8 <main+0x8bc>)
 8003466:	f004 fbed 	bl	8007c44 <HAL_TIM_PWM_Start>
 		 	 				break;
 800346a:	e092      	b.n	8003592 <main+0x876>

 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 800346c:	2001      	movs	r0, #1
 800346e:	f7ff fa35 	bl	80028dc <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 8003472:	4856      	ldr	r0, [pc, #344]	; (80035cc <main+0x8b0>)
 8003474:	f7ff fa58 	bl	8002928 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 8003478:	2201      	movs	r2, #1
 800347a:	2100      	movs	r1, #0
 800347c:	4857      	ldr	r0, [pc, #348]	; (80035dc <main+0x8c0>)
 800347e:	f7ff fa82 	bl	8002986 <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim4 , TIM_CHANNEL_1);
 8003482:	2100      	movs	r1, #0
 8003484:	4854      	ldr	r0, [pc, #336]	; (80035d8 <main+0x8bc>)
 8003486:	f004 fcd7 	bl	8007e38 <HAL_TIM_PWM_Stop>
 				 	 		break;
 800348a:	e082      	b.n	8003592 <main+0x876>
 		 	 		case 3:
							i = 0;
 800348c:	4b54      	ldr	r3, [pc, #336]	; (80035e0 <main+0x8c4>)
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
							refreshLCD = true;
 8003492:	4b48      	ldr	r3, [pc, #288]	; (80035b4 <main+0x898>)
 8003494:	2201      	movs	r2, #1
 8003496:	701a      	strb	r2, [r3, #0]
							HAL_Delay(200);
 8003498:	20c8      	movs	r0, #200	; 0xc8
 800349a:	f001 fc37 	bl	8004d0c <HAL_Delay>
							memset(buff, 0, sizeof(buff));
 800349e:	2205      	movs	r2, #5
 80034a0:	2100      	movs	r1, #0
 80034a2:	4850      	ldr	r0, [pc, #320]	; (80035e4 <main+0x8c8>)
 80034a4:	f006 fde6 	bl	800a074 <memset>
							LCD_WriteCommand(HD44780_CLEAR);
 80034a8:	2001      	movs	r0, #1
 80034aa:	f7ff fa17 	bl	80028dc <LCD_WriteCommand>
							LCD_WriteText("Write Bright");
 80034ae:	484e      	ldr	r0, [pc, #312]	; (80035e8 <main+0x8cc>)
 80034b0:	f7ff fa3a 	bl	8002928 <LCD_WriteText>
							while(1) {
								refreshLCD = true;
 80034b4:	4b3f      	ldr	r3, [pc, #252]	; (80035b4 <main+0x898>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	701a      	strb	r2, [r3, #0]
								symbol[0] = keypad_readkey();
 80034ba:	f7ff f8c9 	bl	8002650 <keypad_readkey>
 80034be:	4603      	mov	r3, r0
 80034c0:	461a      	mov	r2, r3
 80034c2:	4b39      	ldr	r3, [pc, #228]	; (80035a8 <main+0x88c>)
 80034c4:	701a      	strb	r2, [r3, #0]
								if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 80034c6:	4b38      	ldr	r3, [pc, #224]	; (80035a8 <main+0x88c>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b2f      	cmp	r3, #47	; 0x2f
 80034cc:	d922      	bls.n	8003514 <main+0x7f8>
 80034ce:	4b36      	ldr	r3, [pc, #216]	; (80035a8 <main+0x88c>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b39      	cmp	r3, #57	; 0x39
 80034d4:	d81e      	bhi.n	8003514 <main+0x7f8>
 80034d6:	4b42      	ldr	r3, [pc, #264]	; (80035e0 <main+0x8c4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d81a      	bhi.n	8003514 <main+0x7f8>
									buff[i] = symbol[0];
 80034de:	4b40      	ldr	r3, [pc, #256]	; (80035e0 <main+0x8c4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a31      	ldr	r2, [pc, #196]	; (80035a8 <main+0x88c>)
 80034e4:	7811      	ldrb	r1, [r2, #0]
 80034e6:	4a3f      	ldr	r2, [pc, #252]	; (80035e4 <main+0x8c8>)
 80034e8:	54d1      	strb	r1, [r2, r3]
									i++;
 80034ea:	4b3d      	ldr	r3, [pc, #244]	; (80035e0 <main+0x8c4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	3301      	adds	r3, #1
 80034f0:	4a3b      	ldr	r2, [pc, #236]	; (80035e0 <main+0x8c4>)
 80034f2:	6013      	str	r3, [r2, #0]
									buff[i] = '\0';
 80034f4:	4b3a      	ldr	r3, [pc, #232]	; (80035e0 <main+0x8c4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a3a      	ldr	r2, [pc, #232]	; (80035e4 <main+0x8c8>)
 80034fa:	2100      	movs	r1, #0
 80034fc:	54d1      	strb	r1, [r2, r3]
									LCD_WriteCommand(HD44780_CLEAR);
 80034fe:	2001      	movs	r0, #1
 8003500:	f7ff f9ec 	bl	80028dc <LCD_WriteCommand>
									LCD_WriteText("Brightness: ");
 8003504:	4839      	ldr	r0, [pc, #228]	; (80035ec <main+0x8d0>)
 8003506:	f7ff fa0f 	bl	8002928 <LCD_WriteText>
									LCD_WriteTextXY(buff, 0, 1);
 800350a:	2201      	movs	r2, #1
 800350c:	2100      	movs	r1, #0
 800350e:	4835      	ldr	r0, [pc, #212]	; (80035e4 <main+0x8c8>)
 8003510:	f7ff fa39 	bl	8002986 <LCD_WriteTextXY>
								}
								HAL_Delay(200);
 8003514:	20c8      	movs	r0, #200	; 0xc8
 8003516:	f001 fbf9 	bl	8004d0c <HAL_Delay>
								symbol[0] = keypad_readkey();
 800351a:	f7ff f899 	bl	8002650 <keypad_readkey>
 800351e:	4603      	mov	r3, r0
 8003520:	461a      	mov	r2, r3
 8003522:	4b21      	ldr	r3, [pc, #132]	; (80035a8 <main+0x88c>)
 8003524:	701a      	strb	r2, [r3, #0]
								if(symbol[0] == '*') {
 8003526:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <main+0x88c>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b2a      	cmp	r3, #42	; 0x2a
 800352c:	d123      	bne.n	8003576 <main+0x85a>
									brightnessLivingroom = atoi(buff)*10;
 800352e:	482d      	ldr	r0, [pc, #180]	; (80035e4 <main+0x8c8>)
 8003530:	f006 fcdc 	bl	8009eec <atoi>
 8003534:	4602      	mov	r2, r0
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	461a      	mov	r2, r3
 8003540:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <main+0x8b8>)
 8003542:	601a      	str	r2, [r3, #0]
									if(brightnessLivingroom >= 1000) {
 8003544:	4b23      	ldr	r3, [pc, #140]	; (80035d4 <main+0x8b8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800354c:	db03      	blt.n	8003556 <main+0x83a>
										brightnessLivingroom = 999;
 800354e:	4b21      	ldr	r3, [pc, #132]	; (80035d4 <main+0x8b8>)
 8003550:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003554:	601a      	str	r2, [r3, #0]
									}
								   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 8003556:	4b1f      	ldr	r3, [pc, #124]	; (80035d4 <main+0x8b8>)
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	4b1f      	ldr	r3, [pc, #124]	; (80035d8 <main+0x8bc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	635a      	str	r2, [r3, #52]	; 0x34
									act_menu = menuLivingroomLighting;
 8003560:	4b12      	ldr	r3, [pc, #72]	; (80035ac <main+0x890>)
 8003562:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <main+0x8a8>)
 8003564:	601a      	str	r2, [r3, #0]
									position = 1;
 8003566:	4b14      	ldr	r3, [pc, #80]	; (80035b8 <main+0x89c>)
 8003568:	2201      	movs	r2, #1
 800356a:	701a      	strb	r2, [r3, #0]
									max_pos = 3;
 800356c:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <main+0x8a4>)
 800356e:	2203      	movs	r2, #3
 8003570:	701a      	strb	r2, [r3, #0]
									break;
 8003572:	bf00      	nop
								}
								HAL_Delay(100);
							}
							break;
 8003574:	e00d      	b.n	8003592 <main+0x876>
								HAL_Delay(100);
 8003576:	2064      	movs	r0, #100	; 0x64
 8003578:	f001 fbc8 	bl	8004d0c <HAL_Delay>
								refreshLCD = true;
 800357c:	e79a      	b.n	80034b4 <main+0x798>
 		 	 		default: act_menu = menuLivingroom, position = 1, max_pos = 2; break;
 800357e:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <main+0x890>)
 8003580:	4a0b      	ldr	r2, [pc, #44]	; (80035b0 <main+0x894>)
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <main+0x89c>)
 8003586:	2201      	movs	r2, #1
 8003588:	701a      	strb	r2, [r3, #0]
 800358a:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <main+0x8a4>)
 800358c:	2202      	movs	r2, #2
 800358e:	701a      	strb	r2, [r3, #0]
 8003590:	bf00      	nop
 		 	 	  switch (position){
 8003592:	e32d      	b.n	8003bf0 <main+0xed4>
 8003594:	20000368 	.word	0x20000368
 8003598:	200002cc 	.word	0x200002cc
 800359c:	0800ac18 	.word	0x0800ac18
 80035a0:	0800ac20 	.word	0x0800ac20
 80035a4:	0800ac2c 	.word	0x0800ac2c
 80035a8:	20000260 	.word	0x20000260
 80035ac:	20000118 	.word	0x20000118
 80035b0:	20000098 	.word	0x20000098
 80035b4:	200002c5 	.word	0x200002c5
 80035b8:	20000054 	.word	0x20000054
 80035bc:	200000b8 	.word	0x200000b8
 80035c0:	20000055 	.word	0x20000055
 80035c4:	200000a8 	.word	0x200000a8
 80035c8:	200000c8 	.word	0x200000c8
 80035cc:	0800abf0 	.word	0x0800abf0
 80035d0:	0800abd8 	.word	0x0800abd8
 80035d4:	2000011c 	.word	0x2000011c
 80035d8:	2000044c 	.word	0x2000044c
 80035dc:	0800abe4 	.word	0x0800abe4
 80035e0:	200002d0 	.word	0x200002d0
 80035e4:	20000264 	.word	0x20000264
 80035e8:	0800abf8 	.word	0x0800abf8
 80035ec:	0800ac08 	.word	0x0800ac08
 		 	 	  	  }
 		 	 	}
	else if(symbol[0] == '*' && act_menu == menuLivingroomTemperature){
 80035f0:	4ba2      	ldr	r3, [pc, #648]	; (800387c <main+0xb60>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b2a      	cmp	r3, #42	; 0x2a
 80035f6:	f040 8113 	bne.w	8003820 <main+0xb04>
 80035fa:	4ba1      	ldr	r3, [pc, #644]	; (8003880 <main+0xb64>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4aa1      	ldr	r2, [pc, #644]	; (8003884 <main+0xb68>)
 8003600:	4293      	cmp	r3, r2
 8003602:	f040 810d 	bne.w	8003820 <main+0xb04>
		refreshLCD = true;
 8003606:	4ba0      	ldr	r3, [pc, #640]	; (8003888 <main+0xb6c>)
 8003608:	2201      	movs	r2, #1
 800360a:	701a      	strb	r2, [r3, #0]
		switch (position){
 800360c:	4b9f      	ldr	r3, [pc, #636]	; (800388c <main+0xb70>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b03      	cmp	r3, #3
 8003612:	f000 8089 	beq.w	8003728 <main+0xa0c>
 8003616:	2b03      	cmp	r3, #3
 8003618:	f300 80f7 	bgt.w	800380a <main+0xaee>
 800361c:	2b01      	cmp	r3, #1
 800361e:	d002      	beq.n	8003626 <main+0x90a>
 8003620:	2b02      	cmp	r3, #2
 8003622:	d075      	beq.n	8003710 <main+0x9f4>
 8003624:	e0f1      	b.n	800380a <main+0xaee>
			case 1:
				while(1) {
					HAL_Delay(500);
 8003626:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800362a:	f001 fb6f 	bl	8004d0c <HAL_Delay>
					BMP2_ReadData(&bmp2dev, &press, &temp);
 800362e:	4a98      	ldr	r2, [pc, #608]	; (8003890 <main+0xb74>)
 8003630:	4998      	ldr	r1, [pc, #608]	; (8003894 <main+0xb78>)
 8003632:	4899      	ldr	r0, [pc, #612]	; (8003898 <main+0xb7c>)
 8003634:	f7fe fd2e 	bl	8002094 <BMP2_ReadData>
					roundedValue = roundToTwoDecimals(temp);
 8003638:	4b95      	ldr	r3, [pc, #596]	; (8003890 <main+0xb74>)
 800363a:	ed93 7b00 	vldr	d7, [r3]
 800363e:	eeb0 0a47 	vmov.f32	s0, s14
 8003642:	eef0 0a67 	vmov.f32	s1, s15
 8003646:	f7ff fa9b 	bl	8002b80 <roundToTwoDecimals>
 800364a:	eeb0 7a40 	vmov.f32	s14, s0
 800364e:	eef0 7a60 	vmov.f32	s15, s1
 8003652:	4b92      	ldr	r3, [pc, #584]	; (800389c <main+0xb80>)
 8003654:	ed83 7b00 	vstr	d7, [r3]
					intPart = (int)roundedValue;
 8003658:	4b90      	ldr	r3, [pc, #576]	; (800389c <main+0xb80>)
 800365a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365e:	4610      	mov	r0, r2
 8003660:	4619      	mov	r1, r3
 8003662:	f7fd fa93 	bl	8000b8c <__aeabi_d2iz>
 8003666:	4603      	mov	r3, r0
 8003668:	4a8d      	ldr	r2, [pc, #564]	; (80038a0 <main+0xb84>)
 800366a:	6013      	str	r3, [r2, #0]
					fracPart = (int)((roundedValue - intPart) * 100);
 800366c:	4b8b      	ldr	r3, [pc, #556]	; (800389c <main+0xb80>)
 800366e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003672:	4b8b      	ldr	r3, [pc, #556]	; (80038a0 <main+0xb84>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7fc ff84 	bl	8000584 <__aeabi_i2d>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4620      	mov	r0, r4
 8003682:	4629      	mov	r1, r5
 8003684:	f7fc fe30 	bl	80002e8 <__aeabi_dsub>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4610      	mov	r0, r2
 800368e:	4619      	mov	r1, r3
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	4b83      	ldr	r3, [pc, #524]	; (80038a4 <main+0xb88>)
 8003696:	f7fc ffdf 	bl	8000658 <__aeabi_dmul>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4610      	mov	r0, r2
 80036a0:	4619      	mov	r1, r3
 80036a2:	f7fd fa73 	bl	8000b8c <__aeabi_d2iz>
 80036a6:	4603      	mov	r3, r0
 80036a8:	4a7f      	ldr	r2, [pc, #508]	; (80038a8 <main+0xb8c>)
 80036aa:	6013      	str	r3, [r2, #0]
					snprintf(result, sizeof(result), "Temp: %d.%04d", intPart, abs(fracPart));
 80036ac:	4b7c      	ldr	r3, [pc, #496]	; (80038a0 <main+0xb84>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	4b7d      	ldr	r3, [pc, #500]	; (80038a8 <main+0xb8c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bfb8      	it	lt
 80036b8:	425b      	neglt	r3, r3
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	4613      	mov	r3, r2
 80036be:	4a7b      	ldr	r2, [pc, #492]	; (80038ac <main+0xb90>)
 80036c0:	2132      	movs	r1, #50	; 0x32
 80036c2:	487b      	ldr	r0, [pc, #492]	; (80038b0 <main+0xb94>)
 80036c4:	f006 fca2 	bl	800a00c <sniprintf>
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 990);
 80036c8:	4b7a      	ldr	r3, [pc, #488]	; (80038b4 <main+0xb98>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f240 32de 	movw	r2, #990	; 0x3de
 80036d0:	63da      	str	r2, [r3, #60]	; 0x3c
					HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80036d2:	2108      	movs	r1, #8
 80036d4:	4877      	ldr	r0, [pc, #476]	; (80038b4 <main+0xb98>)
 80036d6:	f004 fab5 	bl	8007c44 <HAL_TIM_PWM_Start>
					LCD_WriteCommand(HD44780_CLEAR);
 80036da:	2001      	movs	r0, #1
 80036dc:	f7ff f8fe 	bl	80028dc <LCD_WriteCommand>
					LCD_WriteText(result);
 80036e0:	4873      	ldr	r0, [pc, #460]	; (80038b0 <main+0xb94>)
 80036e2:	f7ff f921 	bl	8002928 <LCD_WriteText>
					if(symbol[0] == '*') {
 80036e6:	4b65      	ldr	r3, [pc, #404]	; (800387c <main+0xb60>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b2a      	cmp	r3, #42	; 0x2a
 80036ec:	d10a      	bne.n	8003704 <main+0x9e8>
						act_menu = menuLivingroomTemperature;
 80036ee:	4b64      	ldr	r3, [pc, #400]	; (8003880 <main+0xb64>)
 80036f0:	4a64      	ldr	r2, [pc, #400]	; (8003884 <main+0xb68>)
 80036f2:	601a      	str	r2, [r3, #0]
						position = 1;
 80036f4:	4b65      	ldr	r3, [pc, #404]	; (800388c <main+0xb70>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	701a      	strb	r2, [r3, #0]
						max_pos = 3;
 80036fa:	4b6f      	ldr	r3, [pc, #444]	; (80038b8 <main+0xb9c>)
 80036fc:	2203      	movs	r2, #3
 80036fe:	701a      	strb	r2, [r3, #0]
						break;
 8003700:	bf00      	nop
					}
					i++;
				}
				break;
 8003702:	e08c      	b.n	800381e <main+0xb02>
					i++;
 8003704:	4b6d      	ldr	r3, [pc, #436]	; (80038bc <main+0xba0>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3301      	adds	r3, #1
 800370a:	4a6c      	ldr	r2, [pc, #432]	; (80038bc <main+0xba0>)
 800370c:	6013      	str	r3, [r2, #0]
				while(1) {
 800370e:	e78a      	b.n	8003626 <main+0x90a>
			case 2: LCD_WriteCommand(HD44780_CLEAR);
 8003710:	2001      	movs	r0, #1
 8003712:	f7ff f8e3 	bl	80028dc <LCD_WriteCommand>
					LCD_WriteText("Heat");
 8003716:	486a      	ldr	r0, [pc, #424]	; (80038c0 <main+0xba4>)
 8003718:	f7ff f906 	bl	8002928 <LCD_WriteText>
					LCD_WriteTextXY("Turned off",0,1);; break;
 800371c:	2201      	movs	r2, #1
 800371e:	2100      	movs	r1, #0
 8003720:	4868      	ldr	r0, [pc, #416]	; (80038c4 <main+0xba8>)
 8003722:	f7ff f930 	bl	8002986 <LCD_WriteTextXY>
 8003726:	e07a      	b.n	800381e <main+0xb02>
			case 3:
				i = 0;
 8003728:	4b64      	ldr	r3, [pc, #400]	; (80038bc <main+0xba0>)
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
				HAL_Delay(200);
 800372e:	20c8      	movs	r0, #200	; 0xc8
 8003730:	f001 faec 	bl	8004d0c <HAL_Delay>
				memset(buff, 0, sizeof(buff));
 8003734:	2205      	movs	r2, #5
 8003736:	2100      	movs	r1, #0
 8003738:	4863      	ldr	r0, [pc, #396]	; (80038c8 <main+0xbac>)
 800373a:	f006 fc9b 	bl	800a074 <memset>
				LCD_WriteCommand(HD44780_CLEAR);
 800373e:	2001      	movs	r0, #1
 8003740:	f7ff f8cc 	bl	80028dc <LCD_WriteCommand>
				LCD_WriteText("Write Temp");
 8003744:	4861      	ldr	r0, [pc, #388]	; (80038cc <main+0xbb0>)
 8003746:	f7ff f8ef 	bl	8002928 <LCD_WriteText>
				while(1) {
					refreshLCD = true;
 800374a:	4b4f      	ldr	r3, [pc, #316]	; (8003888 <main+0xb6c>)
 800374c:	2201      	movs	r2, #1
 800374e:	701a      	strb	r2, [r3, #0]
					symbol[0] = keypad_readkey();
 8003750:	f7fe ff7e 	bl	8002650 <keypad_readkey>
 8003754:	4603      	mov	r3, r0
 8003756:	461a      	mov	r2, r3
 8003758:	4b48      	ldr	r3, [pc, #288]	; (800387c <main+0xb60>)
 800375a:	701a      	strb	r2, [r3, #0]
					if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 800375c:	4b47      	ldr	r3, [pc, #284]	; (800387c <main+0xb60>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b2f      	cmp	r3, #47	; 0x2f
 8003762:	d922      	bls.n	80037aa <main+0xa8e>
 8003764:	4b45      	ldr	r3, [pc, #276]	; (800387c <main+0xb60>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b39      	cmp	r3, #57	; 0x39
 800376a:	d81e      	bhi.n	80037aa <main+0xa8e>
 800376c:	4b53      	ldr	r3, [pc, #332]	; (80038bc <main+0xba0>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b03      	cmp	r3, #3
 8003772:	d81a      	bhi.n	80037aa <main+0xa8e>
						buff[i] = symbol[0];
 8003774:	4b51      	ldr	r3, [pc, #324]	; (80038bc <main+0xba0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a40      	ldr	r2, [pc, #256]	; (800387c <main+0xb60>)
 800377a:	7811      	ldrb	r1, [r2, #0]
 800377c:	4a52      	ldr	r2, [pc, #328]	; (80038c8 <main+0xbac>)
 800377e:	54d1      	strb	r1, [r2, r3]
						i++;
 8003780:	4b4e      	ldr	r3, [pc, #312]	; (80038bc <main+0xba0>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3301      	adds	r3, #1
 8003786:	4a4d      	ldr	r2, [pc, #308]	; (80038bc <main+0xba0>)
 8003788:	6013      	str	r3, [r2, #0]
						buff[i] = '\0';
 800378a:	4b4c      	ldr	r3, [pc, #304]	; (80038bc <main+0xba0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a4e      	ldr	r2, [pc, #312]	; (80038c8 <main+0xbac>)
 8003790:	2100      	movs	r1, #0
 8003792:	54d1      	strb	r1, [r2, r3]
						LCD_WriteCommand(HD44780_CLEAR);
 8003794:	2001      	movs	r0, #1
 8003796:	f7ff f8a1 	bl	80028dc <LCD_WriteCommand>
						LCD_WriteText("Temp: ");
 800379a:	484d      	ldr	r0, [pc, #308]	; (80038d0 <main+0xbb4>)
 800379c:	f7ff f8c4 	bl	8002928 <LCD_WriteText>
						LCD_WriteTextXY(buff, 0, 1);
 80037a0:	2201      	movs	r2, #1
 80037a2:	2100      	movs	r1, #0
 80037a4:	4848      	ldr	r0, [pc, #288]	; (80038c8 <main+0xbac>)
 80037a6:	f7ff f8ee 	bl	8002986 <LCD_WriteTextXY>
					}
					HAL_Delay(200);
 80037aa:	20c8      	movs	r0, #200	; 0xc8
 80037ac:	f001 faae 	bl	8004d0c <HAL_Delay>
					symbol[0] = keypad_readkey();
 80037b0:	f7fe ff4e 	bl	8002650 <keypad_readkey>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461a      	mov	r2, r3
 80037b8:	4b30      	ldr	r3, [pc, #192]	; (800387c <main+0xb60>)
 80037ba:	701a      	strb	r2, [r3, #0]
					if(symbol[0] == '*') {
 80037bc:	4b2f      	ldr	r3, [pc, #188]	; (800387c <main+0xb60>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b2a      	cmp	r3, #42	; 0x2a
 80037c2:	d11e      	bne.n	8003802 <main+0xae6>
						tempLivingroom = atoi(buff)*10;
 80037c4:	4840      	ldr	r0, [pc, #256]	; (80038c8 <main+0xbac>)
 80037c6:	f006 fb91 	bl	8009eec <atoi>
 80037ca:	4602      	mov	r2, r0
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	461a      	mov	r2, r3
 80037d6:	4b3f      	ldr	r3, [pc, #252]	; (80038d4 <main+0xbb8>)
 80037d8:	601a      	str	r2, [r3, #0]
						if(tempLivingroom >= 1000) {
 80037da:	4b3e      	ldr	r3, [pc, #248]	; (80038d4 <main+0xbb8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037e2:	db03      	blt.n	80037ec <main+0xad0>
							tempLivingroom = 999;
 80037e4:	4b3b      	ldr	r3, [pc, #236]	; (80038d4 <main+0xbb8>)
 80037e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037ea:	601a      	str	r2, [r3, #0]
						}
						act_menu = menuLivingroomTemperature;
 80037ec:	4b24      	ldr	r3, [pc, #144]	; (8003880 <main+0xb64>)
 80037ee:	4a25      	ldr	r2, [pc, #148]	; (8003884 <main+0xb68>)
 80037f0:	601a      	str	r2, [r3, #0]
						position = 1;
 80037f2:	4b26      	ldr	r3, [pc, #152]	; (800388c <main+0xb70>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	701a      	strb	r2, [r3, #0]
						max_pos = 3;
 80037f8:	4b2f      	ldr	r3, [pc, #188]	; (80038b8 <main+0xb9c>)
 80037fa:	2203      	movs	r2, #3
 80037fc:	701a      	strb	r2, [r3, #0]
						break;
 80037fe:	bf00      	nop
					}
					HAL_Delay(100);
				}
			break;
 8003800:	e00d      	b.n	800381e <main+0xb02>
					HAL_Delay(100);
 8003802:	2064      	movs	r0, #100	; 0x64
 8003804:	f001 fa82 	bl	8004d0c <HAL_Delay>
					refreshLCD = true;
 8003808:	e79f      	b.n	800374a <main+0xa2e>
			default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 800380a:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <main+0xb64>)
 800380c:	4a32      	ldr	r2, [pc, #200]	; (80038d8 <main+0xbbc>)
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	4b1e      	ldr	r3, [pc, #120]	; (800388c <main+0xb70>)
 8003812:	2201      	movs	r2, #1
 8003814:	701a      	strb	r2, [r3, #0]
 8003816:	4b28      	ldr	r3, [pc, #160]	; (80038b8 <main+0xb9c>)
 8003818:	2202      	movs	r2, #2
 800381a:	701a      	strb	r2, [r3, #0]
 800381c:	bf00      	nop
		switch (position){
 800381e:	e1e7      	b.n	8003bf0 <main+0xed4>
				  }
			}
	else if(symbol[0] == '*' && act_menu == menuLivingroomShutter) {
 8003820:	4b16      	ldr	r3, [pc, #88]	; (800387c <main+0xb60>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b2a      	cmp	r3, #42	; 0x2a
 8003826:	d17c      	bne.n	8003922 <main+0xc06>
 8003828:	4b15      	ldr	r3, [pc, #84]	; (8003880 <main+0xb64>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a2b      	ldr	r2, [pc, #172]	; (80038dc <main+0xbc0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d177      	bne.n	8003922 <main+0xc06>
			refreshLCD = true;
 8003832:	4b15      	ldr	r3, [pc, #84]	; (8003888 <main+0xb6c>)
 8003834:	2201      	movs	r2, #1
 8003836:	701a      	strb	r2, [r3, #0]
			switch(position) {
 8003838:	4b14      	ldr	r3, [pc, #80]	; (800388c <main+0xb70>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d002      	beq.n	8003846 <main+0xb2a>
 8003840:	2b02      	cmp	r3, #2
 8003842:	d055      	beq.n	80038f0 <main+0xbd4>
 8003844:	e1d4      	b.n	8003bf0 <main+0xed4>
				case 1:
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 500);
 8003846:	4b26      	ldr	r3, [pc, #152]	; (80038e0 <main+0xbc4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800384e:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_Delay(500);
 8003850:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003854:	f001 fa5a 	bl	8004d0c <HAL_Delay>
				   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 8003858:	4b21      	ldr	r3, [pc, #132]	; (80038e0 <main+0xbc4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2200      	movs	r2, #0
 800385e:	635a      	str	r2, [r3, #52]	; 0x34
				   livingroomShutter = true;
 8003860:	4b20      	ldr	r3, [pc, #128]	; (80038e4 <main+0xbc8>)
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
				   LCD_WriteText("Shutter");
 8003866:	4820      	ldr	r0, [pc, #128]	; (80038e8 <main+0xbcc>)
 8003868:	f7ff f85e 	bl	8002928 <LCD_WriteText>
				   LCD_WriteTextXY("is lowering",0,1);
 800386c:	2201      	movs	r2, #1
 800386e:	2100      	movs	r1, #0
 8003870:	481e      	ldr	r0, [pc, #120]	; (80038ec <main+0xbd0>)
 8003872:	f7ff f888 	bl	8002986 <LCD_WriteTextXY>
				   break;
 8003876:	bf00      	nop
			switch(position) {
 8003878:	e1ba      	b.n	8003bf0 <main+0xed4>
 800387a:	bf00      	nop
 800387c:	20000260 	.word	0x20000260
 8003880:	20000118 	.word	0x20000118
 8003884:	200000b8 	.word	0x200000b8
 8003888:	200002c5 	.word	0x200002c5
 800388c:	20000054 	.word	0x20000054
 8003890:	200002e8 	.word	0x200002e8
 8003894:	200002f0 	.word	0x200002f0
 8003898:	20000018 	.word	0x20000018
 800389c:	200002f8 	.word	0x200002f8
 80038a0:	200002dc 	.word	0x200002dc
 80038a4:	40590000 	.word	0x40590000
 80038a8:	200002e0 	.word	0x200002e0
 80038ac:	0800ac34 	.word	0x0800ac34
 80038b0:	2000026c 	.word	0x2000026c
 80038b4:	2000044c 	.word	0x2000044c
 80038b8:	20000055 	.word	0x20000055
 80038bc:	200002d0 	.word	0x200002d0
 80038c0:	0800ac44 	.word	0x0800ac44
 80038c4:	0800ac4c 	.word	0x0800ac4c
 80038c8:	20000264 	.word	0x20000264
 80038cc:	0800ac58 	.word	0x0800ac58
 80038d0:	0800ac64 	.word	0x0800ac64
 80038d4:	200002d4 	.word	0x200002d4
 80038d8:	20000068 	.word	0x20000068
 80038dc:	200000c8 	.word	0x200000c8
 80038e0:	20000368 	.word	0x20000368
 80038e4:	200002cd 	.word	0x200002cd
 80038e8:	0800ac18 	.word	0x0800ac18
 80038ec:	0800ac20 	.word	0x0800ac20
				case 2:
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 2000);
 80038f0:	4b9c      	ldr	r3, [pc, #624]	; (8003b64 <main+0xe48>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80038f8:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_Delay(500);
 80038fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80038fe:	f001 fa05 	bl	8004d0c <HAL_Delay>
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 8003902:	4b98      	ldr	r3, [pc, #608]	; (8003b64 <main+0xe48>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2200      	movs	r2, #0
 8003908:	635a      	str	r2, [r3, #52]	; 0x34
					livingroomShutter = false;
 800390a:	4b97      	ldr	r3, [pc, #604]	; (8003b68 <main+0xe4c>)
 800390c:	2200      	movs	r2, #0
 800390e:	701a      	strb	r2, [r3, #0]
					LCD_WriteText("Shutter");
 8003910:	4896      	ldr	r0, [pc, #600]	; (8003b6c <main+0xe50>)
 8003912:	f7ff f809 	bl	8002928 <LCD_WriteText>
					LCD_WriteTextXY("go up",0,1);
 8003916:	2201      	movs	r2, #1
 8003918:	2100      	movs	r1, #0
 800391a:	4895      	ldr	r0, [pc, #596]	; (8003b70 <main+0xe54>)
 800391c:	f7ff f833 	bl	8002986 <LCD_WriteTextXY>
			switch(position) {
 8003920:	e166      	b.n	8003bf0 <main+0xed4>
			}
	}
	else if(symbol[0] == '*' && act_menu == menuGarage){
 8003922:	4b94      	ldr	r3, [pc, #592]	; (8003b74 <main+0xe58>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	2b2a      	cmp	r3, #42	; 0x2a
 8003928:	d12d      	bne.n	8003986 <main+0xc6a>
 800392a:	4b93      	ldr	r3, [pc, #588]	; (8003b78 <main+0xe5c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a93      	ldr	r2, [pc, #588]	; (8003b7c <main+0xe60>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d128      	bne.n	8003986 <main+0xc6a>
 		 		 	 		refreshLCD = true;
 8003934:	4b92      	ldr	r3, [pc, #584]	; (8003b80 <main+0xe64>)
 8003936:	2201      	movs	r2, #1
 8003938:	701a      	strb	r2, [r3, #0]
 		 		 	 	  switch (position){
 800393a:	4b92      	ldr	r3, [pc, #584]	; (8003b84 <main+0xe68>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d002      	beq.n	8003948 <main+0xc2c>
 8003942:	2b02      	cmp	r3, #2
 8003944:	d00a      	beq.n	800395c <main+0xc40>
 8003946:	e013      	b.n	8003970 <main+0xc54>
 		 		 	 	  	  	case 1: act_menu = menuGarageLighting, position = 1, max_pos = 3; break;
 8003948:	4b8b      	ldr	r3, [pc, #556]	; (8003b78 <main+0xe5c>)
 800394a:	4a8f      	ldr	r2, [pc, #572]	; (8003b88 <main+0xe6c>)
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	4b8d      	ldr	r3, [pc, #564]	; (8003b84 <main+0xe68>)
 8003950:	2201      	movs	r2, #1
 8003952:	701a      	strb	r2, [r3, #0]
 8003954:	4b8d      	ldr	r3, [pc, #564]	; (8003b8c <main+0xe70>)
 8003956:	2203      	movs	r2, #3
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	e013      	b.n	8003984 <main+0xc68>
 		 		 	 	  	  	case 2: act_menu = menuGarageShutter, position = 1, max_pos = 2; break;
 800395c:	4b86      	ldr	r3, [pc, #536]	; (8003b78 <main+0xe5c>)
 800395e:	4a8c      	ldr	r2, [pc, #560]	; (8003b90 <main+0xe74>)
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	4b88      	ldr	r3, [pc, #544]	; (8003b84 <main+0xe68>)
 8003964:	2201      	movs	r2, #1
 8003966:	701a      	strb	r2, [r3, #0]
 8003968:	4b88      	ldr	r3, [pc, #544]	; (8003b8c <main+0xe70>)
 800396a:	2202      	movs	r2, #2
 800396c:	701a      	strb	r2, [r3, #0]
 800396e:	e009      	b.n	8003984 <main+0xc68>
 		 		 	 		default: act_menu = menuGarage, position = 1, max_pos = 1; break;
 8003970:	4b81      	ldr	r3, [pc, #516]	; (8003b78 <main+0xe5c>)
 8003972:	4a82      	ldr	r2, [pc, #520]	; (8003b7c <main+0xe60>)
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	4b83      	ldr	r3, [pc, #524]	; (8003b84 <main+0xe68>)
 8003978:	2201      	movs	r2, #1
 800397a:	701a      	strb	r2, [r3, #0]
 800397c:	4b83      	ldr	r3, [pc, #524]	; (8003b8c <main+0xe70>)
 800397e:	2201      	movs	r2, #1
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	bf00      	nop
 		 		 	 	  switch (position){
 8003984:	e134      	b.n	8003bf0 <main+0xed4>
 		 		 	 	  	  }
 		 		 	 	}
 			else if(symbol[0] == '*' && act_menu == menuGarageLighting){
 8003986:	4b7b      	ldr	r3, [pc, #492]	; (8003b74 <main+0xe58>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b2a      	cmp	r3, #42	; 0x2a
 800398c:	f040 80be 	bne.w	8003b0c <main+0xdf0>
 8003990:	4b79      	ldr	r3, [pc, #484]	; (8003b78 <main+0xe5c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a7c      	ldr	r2, [pc, #496]	; (8003b88 <main+0xe6c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	f040 80b8 	bne.w	8003b0c <main+0xdf0>
 		 	 		refreshLCD = true;
 800399c:	4b78      	ldr	r3, [pc, #480]	; (8003b80 <main+0xe64>)
 800399e:	2201      	movs	r2, #1
 80039a0:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 80039a2:	4b78      	ldr	r3, [pc, #480]	; (8003b84 <main+0xe68>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	d02c      	beq.n	8003a04 <main+0xce8>
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	f300 80a3 	bgt.w	8003af6 <main+0xdda>
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d002      	beq.n	80039ba <main+0xc9e>
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d015      	beq.n	80039e4 <main+0xcc8>
 80039b8:	e09d      	b.n	8003af6 <main+0xdda>
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 80039ba:	2001      	movs	r0, #1
 80039bc:	f7fe ff8e 	bl	80028dc <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 80039c0:	4874      	ldr	r0, [pc, #464]	; (8003b94 <main+0xe78>)
 80039c2:	f7fe ffb1 	bl	8002928 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 80039c6:	2201      	movs	r2, #1
 80039c8:	2100      	movs	r1, #0
 80039ca:	4873      	ldr	r0, [pc, #460]	; (8003b98 <main+0xe7c>)
 80039cc:	f7fe ffdb 	bl	8002986 <LCD_WriteTextXY>
 		 	 				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 80039d0:	4b72      	ldr	r3, [pc, #456]	; (8003b9c <main+0xe80>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4b72      	ldr	r3, [pc, #456]	; (8003ba0 <main+0xe84>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	635a      	str	r2, [r3, #52]	; 0x34
 		 	 				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80039da:	2100      	movs	r1, #0
 80039dc:	4870      	ldr	r0, [pc, #448]	; (8003ba0 <main+0xe84>)
 80039de:	f004 f931 	bl	8007c44 <HAL_TIM_PWM_Start>
 		 	 				break;
 80039e2:	e092      	b.n	8003b0a <main+0xdee>

 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 80039e4:	2001      	movs	r0, #1
 80039e6:	f7fe ff79 	bl	80028dc <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 80039ea:	486a      	ldr	r0, [pc, #424]	; (8003b94 <main+0xe78>)
 80039ec:	f7fe ff9c 	bl	8002928 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 80039f0:	2201      	movs	r2, #1
 80039f2:	2100      	movs	r1, #0
 80039f4:	486b      	ldr	r0, [pc, #428]	; (8003ba4 <main+0xe88>)
 80039f6:	f7fe ffc6 	bl	8002986 <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80039fa:	2100      	movs	r1, #0
 80039fc:	4868      	ldr	r0, [pc, #416]	; (8003ba0 <main+0xe84>)
 80039fe:	f004 fa1b 	bl	8007e38 <HAL_TIM_PWM_Stop>
 				 	 		break;
 8003a02:	e082      	b.n	8003b0a <main+0xdee>

 		 	 		case 3:
							i = 0;
 8003a04:	4b68      	ldr	r3, [pc, #416]	; (8003ba8 <main+0xe8c>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
							refreshLCD = true;
 8003a0a:	4b5d      	ldr	r3, [pc, #372]	; (8003b80 <main+0xe64>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	701a      	strb	r2, [r3, #0]
							HAL_Delay(200);
 8003a10:	20c8      	movs	r0, #200	; 0xc8
 8003a12:	f001 f97b 	bl	8004d0c <HAL_Delay>
							memset(buff, 0, sizeof(buff));
 8003a16:	2205      	movs	r2, #5
 8003a18:	2100      	movs	r1, #0
 8003a1a:	4864      	ldr	r0, [pc, #400]	; (8003bac <main+0xe90>)
 8003a1c:	f006 fb2a 	bl	800a074 <memset>
							LCD_WriteCommand(HD44780_CLEAR);
 8003a20:	2001      	movs	r0, #1
 8003a22:	f7fe ff5b 	bl	80028dc <LCD_WriteCommand>
							LCD_WriteText("Write Bright");
 8003a26:	4862      	ldr	r0, [pc, #392]	; (8003bb0 <main+0xe94>)
 8003a28:	f7fe ff7e 	bl	8002928 <LCD_WriteText>
							while(1) {
								refreshLCD = true;
 8003a2c:	4b54      	ldr	r3, [pc, #336]	; (8003b80 <main+0xe64>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	701a      	strb	r2, [r3, #0]
								symbol[0] = keypad_readkey();
 8003a32:	f7fe fe0d 	bl	8002650 <keypad_readkey>
 8003a36:	4603      	mov	r3, r0
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4b4e      	ldr	r3, [pc, #312]	; (8003b74 <main+0xe58>)
 8003a3c:	701a      	strb	r2, [r3, #0]
								if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 8003a3e:	4b4d      	ldr	r3, [pc, #308]	; (8003b74 <main+0xe58>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b2f      	cmp	r3, #47	; 0x2f
 8003a44:	d922      	bls.n	8003a8c <main+0xd70>
 8003a46:	4b4b      	ldr	r3, [pc, #300]	; (8003b74 <main+0xe58>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b39      	cmp	r3, #57	; 0x39
 8003a4c:	d81e      	bhi.n	8003a8c <main+0xd70>
 8003a4e:	4b56      	ldr	r3, [pc, #344]	; (8003ba8 <main+0xe8c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d81a      	bhi.n	8003a8c <main+0xd70>
									buff[i] = symbol[0];
 8003a56:	4b54      	ldr	r3, [pc, #336]	; (8003ba8 <main+0xe8c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a46      	ldr	r2, [pc, #280]	; (8003b74 <main+0xe58>)
 8003a5c:	7811      	ldrb	r1, [r2, #0]
 8003a5e:	4a53      	ldr	r2, [pc, #332]	; (8003bac <main+0xe90>)
 8003a60:	54d1      	strb	r1, [r2, r3]
									i++;
 8003a62:	4b51      	ldr	r3, [pc, #324]	; (8003ba8 <main+0xe8c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3301      	adds	r3, #1
 8003a68:	4a4f      	ldr	r2, [pc, #316]	; (8003ba8 <main+0xe8c>)
 8003a6a:	6013      	str	r3, [r2, #0]
									buff[i] = '\0';
 8003a6c:	4b4e      	ldr	r3, [pc, #312]	; (8003ba8 <main+0xe8c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a4e      	ldr	r2, [pc, #312]	; (8003bac <main+0xe90>)
 8003a72:	2100      	movs	r1, #0
 8003a74:	54d1      	strb	r1, [r2, r3]
									LCD_WriteCommand(HD44780_CLEAR);
 8003a76:	2001      	movs	r0, #1
 8003a78:	f7fe ff30 	bl	80028dc <LCD_WriteCommand>
									LCD_WriteText("Brightness: ");
 8003a7c:	484d      	ldr	r0, [pc, #308]	; (8003bb4 <main+0xe98>)
 8003a7e:	f7fe ff53 	bl	8002928 <LCD_WriteText>
									LCD_WriteTextXY(buff, 0, 1);
 8003a82:	2201      	movs	r2, #1
 8003a84:	2100      	movs	r1, #0
 8003a86:	4849      	ldr	r0, [pc, #292]	; (8003bac <main+0xe90>)
 8003a88:	f7fe ff7d 	bl	8002986 <LCD_WriteTextXY>
								}
								HAL_Delay(200);
 8003a8c:	20c8      	movs	r0, #200	; 0xc8
 8003a8e:	f001 f93d 	bl	8004d0c <HAL_Delay>
								symbol[0] = keypad_readkey();
 8003a92:	f7fe fddd 	bl	8002650 <keypad_readkey>
 8003a96:	4603      	mov	r3, r0
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4b36      	ldr	r3, [pc, #216]	; (8003b74 <main+0xe58>)
 8003a9c:	701a      	strb	r2, [r3, #0]
								if(symbol[0] == '*') {
 8003a9e:	4b35      	ldr	r3, [pc, #212]	; (8003b74 <main+0xe58>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b2a      	cmp	r3, #42	; 0x2a
 8003aa4:	d123      	bne.n	8003aee <main+0xdd2>
									brightnessGarage = atoi(buff)*10;
 8003aa6:	4841      	ldr	r0, [pc, #260]	; (8003bac <main+0xe90>)
 8003aa8:	f006 fa20 	bl	8009eec <atoi>
 8003aac:	4602      	mov	r2, r0
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4b38      	ldr	r3, [pc, #224]	; (8003b9c <main+0xe80>)
 8003aba:	601a      	str	r2, [r3, #0]
									if(brightnessGarage >= 1000) {
 8003abc:	4b37      	ldr	r3, [pc, #220]	; (8003b9c <main+0xe80>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ac4:	db03      	blt.n	8003ace <main+0xdb2>
										brightnessGarage = 999;
 8003ac6:	4b35      	ldr	r3, [pc, #212]	; (8003b9c <main+0xe80>)
 8003ac8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003acc:	601a      	str	r2, [r3, #0]
									}
								   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 8003ace:	4b33      	ldr	r3, [pc, #204]	; (8003b9c <main+0xe80>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4b33      	ldr	r3, [pc, #204]	; (8003ba0 <main+0xe84>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	635a      	str	r2, [r3, #52]	; 0x34
									act_menu = menuGarageLighting;
 8003ad8:	4b27      	ldr	r3, [pc, #156]	; (8003b78 <main+0xe5c>)
 8003ada:	4a2b      	ldr	r2, [pc, #172]	; (8003b88 <main+0xe6c>)
 8003adc:	601a      	str	r2, [r3, #0]
									position = 1;
 8003ade:	4b29      	ldr	r3, [pc, #164]	; (8003b84 <main+0xe68>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	701a      	strb	r2, [r3, #0]
									max_pos = 3;
 8003ae4:	4b29      	ldr	r3, [pc, #164]	; (8003b8c <main+0xe70>)
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	701a      	strb	r2, [r3, #0]
									break;
 8003aea:	bf00      	nop
								}
								HAL_Delay(100);
							}
							break;
 8003aec:	e00d      	b.n	8003b0a <main+0xdee>
								HAL_Delay(100);
 8003aee:	2064      	movs	r0, #100	; 0x64
 8003af0:	f001 f90c 	bl	8004d0c <HAL_Delay>
								refreshLCD = true;
 8003af4:	e79a      	b.n	8003a2c <main+0xd10>
 		 	 		default: act_menu = menuGarage, position = 1, max_pos = 2; break;
 8003af6:	4b20      	ldr	r3, [pc, #128]	; (8003b78 <main+0xe5c>)
 8003af8:	4a20      	ldr	r2, [pc, #128]	; (8003b7c <main+0xe60>)
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	4b21      	ldr	r3, [pc, #132]	; (8003b84 <main+0xe68>)
 8003afe:	2201      	movs	r2, #1
 8003b00:	701a      	strb	r2, [r3, #0]
 8003b02:	4b22      	ldr	r3, [pc, #136]	; (8003b8c <main+0xe70>)
 8003b04:	2202      	movs	r2, #2
 8003b06:	701a      	strb	r2, [r3, #0]
 8003b08:	bf00      	nop
 		 	 	  switch (position){
 8003b0a:	e071      	b.n	8003bf0 <main+0xed4>
 		 	 	  }
			}
 			else if(symbol[0] == '*' && act_menu == menuGarageShutter) {
 8003b0c:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <main+0xe58>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b2a      	cmp	r3, #42	; 0x2a
 8003b12:	d16d      	bne.n	8003bf0 <main+0xed4>
 8003b14:	4b18      	ldr	r3, [pc, #96]	; (8003b78 <main+0xe5c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1d      	ldr	r2, [pc, #116]	; (8003b90 <main+0xe74>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d168      	bne.n	8003bf0 <main+0xed4>
 						refreshLCD = true;
 8003b1e:	4b18      	ldr	r3, [pc, #96]	; (8003b80 <main+0xe64>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	701a      	strb	r2, [r3, #0]
 						switch(position) {
 8003b24:	4b17      	ldr	r3, [pc, #92]	; (8003b84 <main+0xe68>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d002      	beq.n	8003b32 <main+0xe16>
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d047      	beq.n	8003bc0 <main+0xea4>
 8003b30:	e05e      	b.n	8003bf0 <main+0xed4>
 							case 1:
 								__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 500);
 8003b32:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <main+0xe48>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003b3a:	635a      	str	r2, [r3, #52]	; 0x34
 								HAL_Delay(500);
 8003b3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b40:	f001 f8e4 	bl	8004d0c <HAL_Delay>
 							   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 8003b44:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <main+0xe48>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	635a      	str	r2, [r3, #52]	; 0x34
 							  garageShutter= true;
 8003b4c:	4b1a      	ldr	r3, [pc, #104]	; (8003bb8 <main+0xe9c>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	701a      	strb	r2, [r3, #0]
 							   LCD_WriteText("Shutter");
 8003b52:	4806      	ldr	r0, [pc, #24]	; (8003b6c <main+0xe50>)
 8003b54:	f7fe fee8 	bl	8002928 <LCD_WriteText>
 							   LCD_WriteTextXY("is lowering",0,1);
 8003b58:	2201      	movs	r2, #1
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	4817      	ldr	r0, [pc, #92]	; (8003bbc <main+0xea0>)
 8003b5e:	f7fe ff12 	bl	8002986 <LCD_WriteTextXY>
 							   break;
 8003b62:	e045      	b.n	8003bf0 <main+0xed4>
 8003b64:	20000368 	.word	0x20000368
 8003b68:	200002cd 	.word	0x200002cd
 8003b6c:	0800ac18 	.word	0x0800ac18
 8003b70:	0800ac2c 	.word	0x0800ac2c
 8003b74:	20000260 	.word	0x20000260
 8003b78:	20000118 	.word	0x20000118
 8003b7c:	200000d8 	.word	0x200000d8
 8003b80:	200002c5 	.word	0x200002c5
 8003b84:	20000054 	.word	0x20000054
 8003b88:	200000e8 	.word	0x200000e8
 8003b8c:	20000055 	.word	0x20000055
 8003b90:	200000f8 	.word	0x200000f8
 8003b94:	0800abf0 	.word	0x0800abf0
 8003b98:	0800abd8 	.word	0x0800abd8
 8003b9c:	20000124 	.word	0x20000124
 8003ba0:	200003b4 	.word	0x200003b4
 8003ba4:	0800abe4 	.word	0x0800abe4
 8003ba8:	200002d0 	.word	0x200002d0
 8003bac:	20000264 	.word	0x20000264
 8003bb0:	0800abf8 	.word	0x0800abf8
 8003bb4:	0800ac08 	.word	0x0800ac08
 8003bb8:	200002ce 	.word	0x200002ce
 8003bbc:	0800ac20 	.word	0x0800ac20
 							case 2:
 								__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 2000);
 8003bc0:	4b17      	ldr	r3, [pc, #92]	; (8003c20 <main+0xf04>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003bc8:	635a      	str	r2, [r3, #52]	; 0x34
 								HAL_Delay(500);
 8003bca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003bce:	f001 f89d 	bl	8004d0c <HAL_Delay>
 								__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 8003bd2:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <main+0xf04>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	635a      	str	r2, [r3, #52]	; 0x34
 								garageShutter = false;
 8003bda:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <main+0xf08>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	701a      	strb	r2, [r3, #0]
 								LCD_WriteText("Shutter");
 8003be0:	4811      	ldr	r0, [pc, #68]	; (8003c28 <main+0xf0c>)
 8003be2:	f7fe fea1 	bl	8002928 <LCD_WriteText>
 								LCD_WriteTextXY("go up",0,1);
 8003be6:	2201      	movs	r2, #1
 8003be8:	2100      	movs	r1, #0
 8003bea:	4810      	ldr	r0, [pc, #64]	; (8003c2c <main+0xf10>)
 8003bec:	f7fe fecb 	bl	8002986 <LCD_WriteTextXY>
 						}
 				}

 	if (symbol[0] == '#')
 8003bf0:	4b0f      	ldr	r3, [pc, #60]	; (8003c30 <main+0xf14>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b23      	cmp	r3, #35	; 0x23
 8003bf6:	d10b      	bne.n	8003c10 <main+0xef4>
 	{
 		refreshLCD = true;
 8003bf8:	4b0e      	ldr	r3, [pc, #56]	; (8003c34 <main+0xf18>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	701a      	strb	r2, [r3, #0]
 		act_menu = mainmenu;
 8003bfe:	4b0e      	ldr	r3, [pc, #56]	; (8003c38 <main+0xf1c>)
 8003c00:	4a0e      	ldr	r2, [pc, #56]	; (8003c3c <main+0xf20>)
 8003c02:	601a      	str	r2, [r3, #0]
 		position = 1;
 8003c04:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <main+0xf24>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	701a      	strb	r2, [r3, #0]
 		max_pos = 4;
 8003c0a:	4b0e      	ldr	r3, [pc, #56]	; (8003c44 <main+0xf28>)
 8003c0c:	2204      	movs	r2, #4
 8003c0e:	701a      	strb	r2, [r3, #0]
 	}

 	HAL_Delay(500);
 8003c10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c14:	f001 f87a 	bl	8004d0c <HAL_Delay>

 	////////////////////////////////////////////////////////////////////////////////////
 	for (int i = 0; i < RX_BUFFER_SIZE; i++) {
 8003c18:	2300      	movs	r3, #0
 8003c1a:	607b      	str	r3, [r7, #4]
 8003c1c:	e020      	b.n	8003c60 <main+0xf44>
 8003c1e:	bf00      	nop
 8003c20:	20000368 	.word	0x20000368
 8003c24:	200002ce 	.word	0x200002ce
 8003c28:	0800ac18 	.word	0x0800ac18
 8003c2c:	0800ac2c 	.word	0x0800ac2c
 8003c30:	20000260 	.word	0x20000260
 8003c34:	200002c5 	.word	0x200002c5
 8003c38:	20000118 	.word	0x20000118
 8003c3c:	20000058 	.word	0x20000058
 8003c40:	20000054 	.word	0x20000054
 8003c44:	20000055 	.word	0x20000055
 	    received[i] = rxBuffer[i]; // Kopiuj dane
 8003c48:	4aa5      	ldr	r2, [pc, #660]	; (8003ee0 <main+0x11c4>)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	7819      	ldrb	r1, [r3, #0]
 8003c50:	4aa4      	ldr	r2, [pc, #656]	; (8003ee4 <main+0x11c8>)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4413      	add	r3, r2
 8003c56:	460a      	mov	r2, r1
 8003c58:	701a      	strb	r2, [r3, #0]
 	for (int i = 0; i < RX_BUFFER_SIZE; i++) {
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	607b      	str	r3, [r7, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	ddf0      	ble.n	8003c48 <main+0xf2c>
 	}
 	received[RX_BUFFER_SIZE] = '\0'; // Dodaj znak końca stringa
 8003c66:	4b9f      	ldr	r3, [pc, #636]	; (8003ee4 <main+0x11c8>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	711a      	strb	r2, [r3, #4]
 	//Wyłączenie światła w kuchnii
 	if (strcmp(received, "LK00") == 0 && strcmp(lastMessage, "LK00") != 0) {
 8003c6c:	499e      	ldr	r1, [pc, #632]	; (8003ee8 <main+0x11cc>)
 8003c6e:	489d      	ldr	r0, [pc, #628]	; (8003ee4 <main+0x11c8>)
 8003c70:	f7fc face 	bl	8000210 <strcmp>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d114      	bne.n	8003ca4 <main+0xf88>
 8003c7a:	499b      	ldr	r1, [pc, #620]	; (8003ee8 <main+0x11cc>)
 8003c7c:	489b      	ldr	r0, [pc, #620]	; (8003eec <main+0x11d0>)
 8003c7e:	f7fc fac7 	bl	8000210 <strcmp>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00d      	beq.n	8003ca4 <main+0xf88>
 	    sendBluetoothData("1");
 8003c88:	4899      	ldr	r0, [pc, #612]	; (8003ef0 <main+0x11d4>)
 8003c8a:	f7fe ffaf 	bl	8002bec <sendBluetoothData>
 	    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8003c8e:	2108      	movs	r1, #8
 8003c90:	4898      	ldr	r0, [pc, #608]	; (8003ef4 <main+0x11d8>)
 8003c92:	f004 f8d1 	bl	8007e38 <HAL_TIM_PWM_Stop>
 	    strcpy(lastMessage, "LK00");
 8003c96:	4b95      	ldr	r3, [pc, #596]	; (8003eec <main+0x11d0>)
 8003c98:	4a93      	ldr	r2, [pc, #588]	; (8003ee8 <main+0x11cc>)
 8003c9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c9e:	6018      	str	r0, [r3, #0]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	7019      	strb	r1, [r3, #0]
 	}
 	//Włączenie światła w kuchnii
 	if (strcmp(received, "LK01") == 0 && strcmp(lastMessage, "LK01") != 0) {
 8003ca4:	4994      	ldr	r1, [pc, #592]	; (8003ef8 <main+0x11dc>)
 8003ca6:	488f      	ldr	r0, [pc, #572]	; (8003ee4 <main+0x11c8>)
 8003ca8:	f7fc fab2 	bl	8000210 <strcmp>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d119      	bne.n	8003ce6 <main+0xfca>
 8003cb2:	4991      	ldr	r1, [pc, #580]	; (8003ef8 <main+0x11dc>)
 8003cb4:	488d      	ldr	r0, [pc, #564]	; (8003eec <main+0x11d0>)
 8003cb6:	f7fc faab 	bl	8000210 <strcmp>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d012      	beq.n	8003ce6 <main+0xfca>
 	 	sendBluetoothData("2");
 8003cc0:	488e      	ldr	r0, [pc, #568]	; (8003efc <main+0x11e0>)
 8003cc2:	f7fe ff93 	bl	8002bec <sendBluetoothData>
 	 	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, brightnessKitchen);
 8003cc6:	4b8e      	ldr	r3, [pc, #568]	; (8003f00 <main+0x11e4>)
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	4b8a      	ldr	r3, [pc, #552]	; (8003ef4 <main+0x11d8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	63da      	str	r2, [r3, #60]	; 0x3c
 	 	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003cd0:	2108      	movs	r1, #8
 8003cd2:	4888      	ldr	r0, [pc, #544]	; (8003ef4 <main+0x11d8>)
 8003cd4:	f003 ffb6 	bl	8007c44 <HAL_TIM_PWM_Start>
 	 	strcpy(lastMessage, "LK01");
 8003cd8:	4b84      	ldr	r3, [pc, #528]	; (8003eec <main+0x11d0>)
 8003cda:	4a87      	ldr	r2, [pc, #540]	; (8003ef8 <main+0x11dc>)
 8003cdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ce0:	6018      	str	r0, [r3, #0]
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	7019      	strb	r1, [r3, #0]
 	}
 	//Wyłączenie światła w salonie
 	if (strcmp(received, "LL00") == 0 && strcmp(lastMessage, "LL00") != 0) {
 8003ce6:	4987      	ldr	r1, [pc, #540]	; (8003f04 <main+0x11e8>)
 8003ce8:	487e      	ldr	r0, [pc, #504]	; (8003ee4 <main+0x11c8>)
 8003cea:	f7fc fa91 	bl	8000210 <strcmp>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d114      	bne.n	8003d1e <main+0x1002>
 8003cf4:	4983      	ldr	r1, [pc, #524]	; (8003f04 <main+0x11e8>)
 8003cf6:	487d      	ldr	r0, [pc, #500]	; (8003eec <main+0x11d0>)
 8003cf8:	f7fc fa8a 	bl	8000210 <strcmp>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00d      	beq.n	8003d1e <main+0x1002>
 	 	sendBluetoothData("3");
 8003d02:	4881      	ldr	r0, [pc, #516]	; (8003f08 <main+0x11ec>)
 8003d04:	f7fe ff72 	bl	8002bec <sendBluetoothData>
 	 	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8003d08:	2100      	movs	r1, #0
 8003d0a:	4880      	ldr	r0, [pc, #512]	; (8003f0c <main+0x11f0>)
 8003d0c:	f004 f894 	bl	8007e38 <HAL_TIM_PWM_Stop>
 	 	strcpy(lastMessage, "LL00");
 8003d10:	4b76      	ldr	r3, [pc, #472]	; (8003eec <main+0x11d0>)
 8003d12:	4a7c      	ldr	r2, [pc, #496]	; (8003f04 <main+0x11e8>)
 8003d14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d18:	6018      	str	r0, [r3, #0]
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	7019      	strb	r1, [r3, #0]
 	}
 	//Włączenie światła w salonie
 	if (strcmp(received, "LL01") == 0 && strcmp(lastMessage, "LL01") != 0) {
 8003d1e:	497c      	ldr	r1, [pc, #496]	; (8003f10 <main+0x11f4>)
 8003d20:	4870      	ldr	r0, [pc, #448]	; (8003ee4 <main+0x11c8>)
 8003d22:	f7fc fa75 	bl	8000210 <strcmp>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d119      	bne.n	8003d60 <main+0x1044>
 8003d2c:	4978      	ldr	r1, [pc, #480]	; (8003f10 <main+0x11f4>)
 8003d2e:	486f      	ldr	r0, [pc, #444]	; (8003eec <main+0x11d0>)
 8003d30:	f7fc fa6e 	bl	8000210 <strcmp>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d012      	beq.n	8003d60 <main+0x1044>
 	 	sendBluetoothData("4");
 8003d3a:	4876      	ldr	r0, [pc, #472]	; (8003f14 <main+0x11f8>)
 8003d3c:	f7fe ff56 	bl	8002bec <sendBluetoothData>
 	 	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 8003d40:	4b75      	ldr	r3, [pc, #468]	; (8003f18 <main+0x11fc>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	4b71      	ldr	r3, [pc, #452]	; (8003f0c <main+0x11f0>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	635a      	str	r2, [r3, #52]	; 0x34
 	 	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	486f      	ldr	r0, [pc, #444]	; (8003f0c <main+0x11f0>)
 8003d4e:	f003 ff79 	bl	8007c44 <HAL_TIM_PWM_Start>
 	 	strcpy(lastMessage, "LL01");
 8003d52:	4b66      	ldr	r3, [pc, #408]	; (8003eec <main+0x11d0>)
 8003d54:	4a6e      	ldr	r2, [pc, #440]	; (8003f10 <main+0x11f4>)
 8003d56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d5a:	6018      	str	r0, [r3, #0]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	7019      	strb	r1, [r3, #0]
 	}
 	//Wyłączenie światła w garażu
 	if (strcmp(received, "LG00") == 0 && strcmp(lastMessage, "LG00") != 0) {
 8003d60:	496e      	ldr	r1, [pc, #440]	; (8003f1c <main+0x1200>)
 8003d62:	4860      	ldr	r0, [pc, #384]	; (8003ee4 <main+0x11c8>)
 8003d64:	f7fc fa54 	bl	8000210 <strcmp>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d114      	bne.n	8003d98 <main+0x107c>
 8003d6e:	496b      	ldr	r1, [pc, #428]	; (8003f1c <main+0x1200>)
 8003d70:	485e      	ldr	r0, [pc, #376]	; (8003eec <main+0x11d0>)
 8003d72:	f7fc fa4d 	bl	8000210 <strcmp>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00d      	beq.n	8003d98 <main+0x107c>
 	 	sendBluetoothData("5");
 8003d7c:	4868      	ldr	r0, [pc, #416]	; (8003f20 <main+0x1204>)
 8003d7e:	f7fe ff35 	bl	8002bec <sendBluetoothData>
 	 	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8003d82:	2100      	movs	r1, #0
 8003d84:	4867      	ldr	r0, [pc, #412]	; (8003f24 <main+0x1208>)
 8003d86:	f004 f857 	bl	8007e38 <HAL_TIM_PWM_Stop>
 	 	strcpy(lastMessage, "LG00");
 8003d8a:	4b58      	ldr	r3, [pc, #352]	; (8003eec <main+0x11d0>)
 8003d8c:	4a63      	ldr	r2, [pc, #396]	; (8003f1c <main+0x1200>)
 8003d8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d92:	6018      	str	r0, [r3, #0]
 8003d94:	3304      	adds	r3, #4
 8003d96:	7019      	strb	r1, [r3, #0]
 	}
 	//Włączenie światła w garażu
 	if (strcmp(received, "LG01") == 0 && strcmp(lastMessage, "LG01") != 0) {
 8003d98:	4963      	ldr	r1, [pc, #396]	; (8003f28 <main+0x120c>)
 8003d9a:	4852      	ldr	r0, [pc, #328]	; (8003ee4 <main+0x11c8>)
 8003d9c:	f7fc fa38 	bl	8000210 <strcmp>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d119      	bne.n	8003dda <main+0x10be>
 8003da6:	4960      	ldr	r1, [pc, #384]	; (8003f28 <main+0x120c>)
 8003da8:	4850      	ldr	r0, [pc, #320]	; (8003eec <main+0x11d0>)
 8003daa:	f7fc fa31 	bl	8000210 <strcmp>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d012      	beq.n	8003dda <main+0x10be>
 	 	sendBluetoothData("6");
 8003db4:	485d      	ldr	r0, [pc, #372]	; (8003f2c <main+0x1210>)
 8003db6:	f7fe ff19 	bl	8002bec <sendBluetoothData>
 	 	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 8003dba:	4b5d      	ldr	r3, [pc, #372]	; (8003f30 <main+0x1214>)
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	4b59      	ldr	r3, [pc, #356]	; (8003f24 <main+0x1208>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	635a      	str	r2, [r3, #52]	; 0x34
 	 	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	4857      	ldr	r0, [pc, #348]	; (8003f24 <main+0x1208>)
 8003dc8:	f003 ff3c 	bl	8007c44 <HAL_TIM_PWM_Start>
 	 	strcpy(lastMessage, "LG01");
 8003dcc:	4b47      	ldr	r3, [pc, #284]	; (8003eec <main+0x11d0>)
 8003dce:	4a56      	ldr	r2, [pc, #344]	; (8003f28 <main+0x120c>)
 8003dd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003dd4:	6018      	str	r0, [r3, #0]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	7019      	strb	r1, [r3, #0]
 	}

 	if(rxBuffer[0]=='1')  //Suwak jasności kuchnia
 8003dda:	4b41      	ldr	r3, [pc, #260]	; (8003ee0 <main+0x11c4>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2b31      	cmp	r3, #49	; 0x31
 8003de0:	d119      	bne.n	8003e16 <main+0x10fa>
 	{
 		brightnessKitchen = (received[1] - '0') * 100
 8003de2:	4b40      	ldr	r3, [pc, #256]	; (8003ee4 <main+0x11c8>)
 8003de4:	785b      	ldrb	r3, [r3, #1]
 8003de6:	3b30      	subs	r3, #48	; 0x30
 8003de8:	2264      	movs	r2, #100	; 0x64
 8003dea:	fb02 f103 	mul.w	r1, r2, r3
 		                  + (received[2] - '0') * 10
 8003dee:	4b3d      	ldr	r3, [pc, #244]	; (8003ee4 <main+0x11c8>)
 8003df0:	789b      	ldrb	r3, [r3, #2]
 8003df2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003df6:	4613      	mov	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	18ca      	adds	r2, r1, r3
 		                  + (received[3] - '0');
 8003e00:	4b38      	ldr	r3, [pc, #224]	; (8003ee4 <main+0x11c8>)
 8003e02:	78db      	ldrb	r3, [r3, #3]
 8003e04:	3b30      	subs	r3, #48	; 0x30
 8003e06:	4413      	add	r3, r2
 		brightnessKitchen = (received[1] - '0') * 100
 8003e08:	4a3d      	ldr	r2, [pc, #244]	; (8003f00 <main+0x11e4>)
 8003e0a:	6013      	str	r3, [r2, #0]
 		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, brightnessKitchen);
 8003e0c:	4b3c      	ldr	r3, [pc, #240]	; (8003f00 <main+0x11e4>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4b38      	ldr	r3, [pc, #224]	; (8003ef4 <main+0x11d8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	63da      	str	r2, [r3, #60]	; 0x3c
 	}

 	if(received[0]=='2')	//Suwak jasności salon
 8003e16:	4b33      	ldr	r3, [pc, #204]	; (8003ee4 <main+0x11c8>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b32      	cmp	r3, #50	; 0x32
 8003e1c:	d119      	bne.n	8003e52 <main+0x1136>
 	{
 		brightnessLivingroom = (received[1] - '0') * 100
 8003e1e:	4b31      	ldr	r3, [pc, #196]	; (8003ee4 <main+0x11c8>)
 8003e20:	785b      	ldrb	r3, [r3, #1]
 8003e22:	3b30      	subs	r3, #48	; 0x30
 8003e24:	2264      	movs	r2, #100	; 0x64
 8003e26:	fb02 f103 	mul.w	r1, r2, r3
                 + (received[2] - '0') * 10
 8003e2a:	4b2e      	ldr	r3, [pc, #184]	; (8003ee4 <main+0x11c8>)
 8003e2c:	789b      	ldrb	r3, [r3, #2]
 8003e2e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003e32:	4613      	mov	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	18ca      	adds	r2, r1, r3
                 + (received[3] - '0');
 8003e3c:	4b29      	ldr	r3, [pc, #164]	; (8003ee4 <main+0x11c8>)
 8003e3e:	78db      	ldrb	r3, [r3, #3]
 8003e40:	3b30      	subs	r3, #48	; 0x30
 8003e42:	4413      	add	r3, r2
 		brightnessLivingroom = (received[1] - '0') * 100
 8003e44:	4a34      	ldr	r2, [pc, #208]	; (8003f18 <main+0x11fc>)
 8003e46:	6013      	str	r3, [r2, #0]
 		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 8003e48:	4b33      	ldr	r3, [pc, #204]	; (8003f18 <main+0x11fc>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	4b2f      	ldr	r3, [pc, #188]	; (8003f0c <main+0x11f0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	635a      	str	r2, [r3, #52]	; 0x34
 	}
 	if(received[0]=='3')	//Suwak jasności garaż
 8003e52:	4b24      	ldr	r3, [pc, #144]	; (8003ee4 <main+0x11c8>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b33      	cmp	r3, #51	; 0x33
 8003e58:	d119      	bne.n	8003e8e <main+0x1172>
 	{
 		brightnessGarage = (received[1] - '0') * 100
 8003e5a:	4b22      	ldr	r3, [pc, #136]	; (8003ee4 <main+0x11c8>)
 8003e5c:	785b      	ldrb	r3, [r3, #1]
 8003e5e:	3b30      	subs	r3, #48	; 0x30
 8003e60:	2264      	movs	r2, #100	; 0x64
 8003e62:	fb02 f103 	mul.w	r1, r2, r3
                 + (received[2] - '0') * 10
 8003e66:	4b1f      	ldr	r3, [pc, #124]	; (8003ee4 <main+0x11c8>)
 8003e68:	789b      	ldrb	r3, [r3, #2]
 8003e6a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003e6e:	4613      	mov	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	18ca      	adds	r2, r1, r3
                 + (received[3] - '0');
 8003e78:	4b1a      	ldr	r3, [pc, #104]	; (8003ee4 <main+0x11c8>)
 8003e7a:	78db      	ldrb	r3, [r3, #3]
 8003e7c:	3b30      	subs	r3, #48	; 0x30
 8003e7e:	4413      	add	r3, r2
 		brightnessGarage = (received[1] - '0') * 100
 8003e80:	4a2b      	ldr	r2, [pc, #172]	; (8003f30 <main+0x1214>)
 8003e82:	6013      	str	r3, [r2, #0]
 		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 8003e84:	4b2a      	ldr	r3, [pc, #168]	; (8003f30 <main+0x1214>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	4b26      	ldr	r3, [pc, #152]	; (8003f24 <main+0x1208>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	635a      	str	r2, [r3, #52]	; 0x34
 	}
 	//Włączenie alarmu
 	if (strcmp(received, "AL01") == 0 && strcmp(lastMessage, "AL01") != 0)
 8003e8e:	4929      	ldr	r1, [pc, #164]	; (8003f34 <main+0x1218>)
 8003e90:	4814      	ldr	r0, [pc, #80]	; (8003ee4 <main+0x11c8>)
 8003e92:	f7fc f9bd 	bl	8000210 <strcmp>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d112      	bne.n	8003ec2 <main+0x11a6>
 8003e9c:	4925      	ldr	r1, [pc, #148]	; (8003f34 <main+0x1218>)
 8003e9e:	4813      	ldr	r0, [pc, #76]	; (8003eec <main+0x11d0>)
 8003ea0:	f7fc f9b6 	bl	8000210 <strcmp>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00b      	beq.n	8003ec2 <main+0x11a6>
 	{
 		alarm = true;
 8003eaa:	4b23      	ldr	r3, [pc, #140]	; (8003f38 <main+0x121c>)
 8003eac:	2201      	movs	r2, #1
 8003eae:	701a      	strb	r2, [r3, #0]
		PIR_detected = false;
 8003eb0:	4b22      	ldr	r3, [pc, #136]	; (8003f3c <main+0x1220>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	701a      	strb	r2, [r3, #0]
		alarmLED = false;
 8003eb6:	4b22      	ldr	r3, [pc, #136]	; (8003f40 <main+0x1224>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim2);
 8003ebc:	4819      	ldr	r0, [pc, #100]	; (8003f24 <main+0x1208>)
 8003ebe:	f003 fd57 	bl	8007970 <HAL_TIM_Base_Start_IT>
 	}
 	//Wyłączenie alarmu
 	if (strcmp(received, "AL00") == 0 && strcmp(lastMessage, "AL00") != 0)
 8003ec2:	4920      	ldr	r1, [pc, #128]	; (8003f44 <main+0x1228>)
 8003ec4:	4807      	ldr	r0, [pc, #28]	; (8003ee4 <main+0x11c8>)
 8003ec6:	f7fc f9a3 	bl	8000210 <strcmp>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d14b      	bne.n	8003f68 <main+0x124c>
 8003ed0:	491c      	ldr	r1, [pc, #112]	; (8003f44 <main+0x1228>)
 8003ed2:	4806      	ldr	r0, [pc, #24]	; (8003eec <main+0x11d0>)
 8003ed4:	f7fc f99c 	bl	8000210 <strcmp>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d044      	beq.n	8003f68 <main+0x124c>
 8003ede:	e033      	b.n	8003f48 <main+0x122c>
 8003ee0:	200002ac 	.word	0x200002ac
 8003ee4:	200002b8 	.word	0x200002b8
 8003ee8:	0800ac6c 	.word	0x0800ac6c
 8003eec:	200002c0 	.word	0x200002c0
 8003ef0:	0800ac74 	.word	0x0800ac74
 8003ef4:	20000400 	.word	0x20000400
 8003ef8:	0800ac78 	.word	0x0800ac78
 8003efc:	0800ac80 	.word	0x0800ac80
 8003f00:	20000120 	.word	0x20000120
 8003f04:	0800ac84 	.word	0x0800ac84
 8003f08:	0800ac8c 	.word	0x0800ac8c
 8003f0c:	2000044c 	.word	0x2000044c
 8003f10:	0800ac90 	.word	0x0800ac90
 8003f14:	0800ac98 	.word	0x0800ac98
 8003f18:	2000011c 	.word	0x2000011c
 8003f1c:	0800ac9c 	.word	0x0800ac9c
 8003f20:	0800aca4 	.word	0x0800aca4
 8003f24:	200003b4 	.word	0x200003b4
 8003f28:	0800aca8 	.word	0x0800aca8
 8003f2c:	0800acb0 	.word	0x0800acb0
 8003f30:	20000124 	.word	0x20000124
 8003f34:	0800acb4 	.word	0x0800acb4
 8003f38:	200002c6 	.word	0x200002c6
 8003f3c:	200002cb 	.word	0x200002cb
 8003f40:	200002c7 	.word	0x200002c7
 8003f44:	0800acbc 	.word	0x0800acbc
 	{
 		alarm = false;
 8003f48:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <main+0x125c>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	701a      	strb	r2, [r3, #0]
		PIR_detected = false;
 8003f4e:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <main+0x1260>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	701a      	strb	r2, [r3, #0]
		alarmLED = false;
 8003f54:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <main+0x1264>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8003f5a:	2108      	movs	r1, #8
 8003f5c:	4809      	ldr	r0, [pc, #36]	; (8003f84 <main+0x1268>)
 8003f5e:	f003 ff6b 	bl	8007e38 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop_IT(&htim2);
 8003f62:	4808      	ldr	r0, [pc, #32]	; (8003f84 <main+0x1268>)
 8003f64:	f003 fd7c 	bl	8007a60 <HAL_TIM_Base_Stop_IT>
 	////////////////////////////////////////////////////////////////////////////////////
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

 	sendBluetoothData("70");
 8003f68:	4807      	ldr	r0, [pc, #28]	; (8003f88 <main+0x126c>)
 8003f6a:	f7fe fe3f 	bl	8002bec <sendBluetoothData>
 	sendBluetoothData("23");
 8003f6e:	4807      	ldr	r0, [pc, #28]	; (8003f8c <main+0x1270>)
 8003f70:	f7fe fe3c 	bl	8002bec <sendBluetoothData>
	  if(HAL_GPIO_ReadPin(PIR_Garage_GPIO_Port, PIR_Garage_Pin) == GPIO_PIN_SET){PIR_Garage = true;}
 8003f74:	f7fe bf11 	b.w	8002d9a <main+0x7e>
 8003f78:	200002c6 	.word	0x200002c6
 8003f7c:	200002cb 	.word	0x200002cb
 8003f80:	200002c7 	.word	0x200002c7
 8003f84:	200003b4 	.word	0x200003b4
 8003f88:	0800acc4 	.word	0x0800acc4
 8003f8c:	0800acc8 	.word	0x0800acc8

08003f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b094      	sub	sp, #80	; 0x50
 8003f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f96:	f107 0320 	add.w	r3, r7, #32
 8003f9a:	2230      	movs	r2, #48	; 0x30
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f006 f868 	bl	800a074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fa4:	f107 030c 	add.w	r3, r7, #12
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	609a      	str	r2, [r3, #8]
 8003fb0:	60da      	str	r2, [r3, #12]
 8003fb2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003fb4:	f001 fb46 	bl	8005644 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fb8:	4b27      	ldr	r3, [pc, #156]	; (8004058 <SystemClock_Config+0xc8>)
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	4a26      	ldr	r2, [pc, #152]	; (8004058 <SystemClock_Config+0xc8>)
 8003fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8003fc4:	4b24      	ldr	r3, [pc, #144]	; (8004058 <SystemClock_Config+0xc8>)
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003fd0:	4b22      	ldr	r3, [pc, #136]	; (800405c <SystemClock_Config+0xcc>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003fd8:	4a20      	ldr	r2, [pc, #128]	; (800405c <SystemClock_Config+0xcc>)
 8003fda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fde:	6013      	str	r3, [r2, #0]
 8003fe0:	4b1e      	ldr	r3, [pc, #120]	; (800405c <SystemClock_Config+0xcc>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003fe8:	607b      	str	r3, [r7, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003fec:	2302      	movs	r3, #2
 8003fee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004000:	2308      	movs	r3, #8
 8004002:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8004004:	2348      	movs	r3, #72	; 0x48
 8004006:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004008:	2302      	movs	r3, #2
 800400a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800400c:	2303      	movs	r3, #3
 800400e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004010:	f107 0320 	add.w	r3, r7, #32
 8004014:	4618      	mov	r0, r3
 8004016:	f001 fb25 	bl	8005664 <HAL_RCC_OscConfig>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004020:	f000 f81e 	bl	8004060 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004024:	230f      	movs	r3, #15
 8004026:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004028:	2302      	movs	r3, #2
 800402a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004034:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004036:	2300      	movs	r3, #0
 8004038:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800403a:	f107 030c 	add.w	r3, r7, #12
 800403e:	2102      	movs	r1, #2
 8004040:	4618      	mov	r0, r3
 8004042:	f001 fdb3 	bl	8005bac <HAL_RCC_ClockConfig>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800404c:	f000 f808 	bl	8004060 <Error_Handler>
  }
}
 8004050:	bf00      	nop
 8004052:	3750      	adds	r7, #80	; 0x50
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40023800 	.word	0x40023800
 800405c:	40007000 	.word	0x40007000

08004060 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004064:	b672      	cpsid	i
}
 8004066:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004068:	e7fe      	b.n	8004068 <Error_Handler+0x8>
	...

0800406c <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8004070:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <MX_SPI4_Init+0x74>)
 8004072:	4a1c      	ldr	r2, [pc, #112]	; (80040e4 <MX_SPI4_Init+0x78>)
 8004074:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8004076:	4b1a      	ldr	r3, [pc, #104]	; (80040e0 <MX_SPI4_Init+0x74>)
 8004078:	f44f 7282 	mov.w	r2, #260	; 0x104
 800407c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800407e:	4b18      	ldr	r3, [pc, #96]	; (80040e0 <MX_SPI4_Init+0x74>)
 8004080:	2200      	movs	r2, #0
 8004082:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8004084:	4b16      	ldr	r3, [pc, #88]	; (80040e0 <MX_SPI4_Init+0x74>)
 8004086:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800408a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800408c:	4b14      	ldr	r3, [pc, #80]	; (80040e0 <MX_SPI4_Init+0x74>)
 800408e:	2202      	movs	r2, #2
 8004090:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004092:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <MX_SPI4_Init+0x74>)
 8004094:	2201      	movs	r2, #1
 8004096:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004098:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <MX_SPI4_Init+0x74>)
 800409a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800409e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80040a0:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <MX_SPI4_Init+0x74>)
 80040a2:	2210      	movs	r2, #16
 80040a4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040a6:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <MX_SPI4_Init+0x74>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80040ac:	4b0c      	ldr	r3, [pc, #48]	; (80040e0 <MX_SPI4_Init+0x74>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040b2:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <MX_SPI4_Init+0x74>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80040b8:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <MX_SPI4_Init+0x74>)
 80040ba:	2207      	movs	r2, #7
 80040bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80040be:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <MX_SPI4_Init+0x74>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80040c4:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <MX_SPI4_Init+0x74>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80040ca:	4805      	ldr	r0, [pc, #20]	; (80040e0 <MX_SPI4_Init+0x74>)
 80040cc:	f002 fb84 	bl	80067d8 <HAL_SPI_Init>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80040d6:	f7ff ffc3 	bl	8004060 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80040da:	bf00      	nop
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20000300 	.word	0x20000300
 80040e4:	40013400 	.word	0x40013400

080040e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08a      	sub	sp, #40	; 0x28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f0:	f107 0314 	add.w	r3, r7, #20
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	609a      	str	r2, [r3, #8]
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1b      	ldr	r2, [pc, #108]	; (8004174 <HAL_SPI_MspInit+0x8c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d12f      	bne.n	800416a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800410a:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <HAL_SPI_MspInit+0x90>)
 800410c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410e:	4a1a      	ldr	r2, [pc, #104]	; (8004178 <HAL_SPI_MspInit+0x90>)
 8004110:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004114:	6453      	str	r3, [r2, #68]	; 0x44
 8004116:	4b18      	ldr	r3, [pc, #96]	; (8004178 <HAL_SPI_MspInit+0x90>)
 8004118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004122:	4b15      	ldr	r3, [pc, #84]	; (8004178 <HAL_SPI_MspInit+0x90>)
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	4a14      	ldr	r2, [pc, #80]	; (8004178 <HAL_SPI_MspInit+0x90>)
 8004128:	f043 0310 	orr.w	r3, r3, #16
 800412c:	6313      	str	r3, [r2, #48]	; 0x30
 800412e:	4b12      	ldr	r3, [pc, #72]	; (8004178 <HAL_SPI_MspInit+0x90>)
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	f003 0310 	and.w	r3, r3, #16
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = SPI4_SCK_temperature_Pin|SPI4_MISO_temperature_Pin|SPI4_MOSI_temperature_Pin;
 800413a:	2364      	movs	r3, #100	; 0x64
 800413c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800413e:	2302      	movs	r3, #2
 8004140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004142:	2300      	movs	r3, #0
 8004144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004146:	2303      	movs	r3, #3
 8004148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800414a:	2305      	movs	r3, #5
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800414e:	f107 0314 	add.w	r3, r7, #20
 8004152:	4619      	mov	r1, r3
 8004154:	4809      	ldr	r0, [pc, #36]	; (800417c <HAL_SPI_MspInit+0x94>)
 8004156:	f000 ff31 	bl	8004fbc <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800415a:	2200      	movs	r2, #0
 800415c:	2100      	movs	r1, #0
 800415e:	2054      	movs	r0, #84	; 0x54
 8004160:	f000 fed3 	bl	8004f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8004164:	2054      	movs	r0, #84	; 0x54
 8004166:	f000 feec 	bl	8004f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800416a:	bf00      	nop
 800416c:	3728      	adds	r7, #40	; 0x28
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40013400 	.word	0x40013400
 8004178:	40023800 	.word	0x40023800
 800417c:	40021000 	.word	0x40021000

08004180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004186:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <HAL_MspInit+0x44>)
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	4a0e      	ldr	r2, [pc, #56]	; (80041c4 <HAL_MspInit+0x44>)
 800418c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004190:	6413      	str	r3, [r2, #64]	; 0x40
 8004192:	4b0c      	ldr	r3, [pc, #48]	; (80041c4 <HAL_MspInit+0x44>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419a:	607b      	str	r3, [r7, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800419e:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <HAL_MspInit+0x44>)
 80041a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a2:	4a08      	ldr	r2, [pc, #32]	; (80041c4 <HAL_MspInit+0x44>)
 80041a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041a8:	6453      	str	r3, [r2, #68]	; 0x44
 80041aa:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <HAL_MspInit+0x44>)
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40023800 	.word	0x40023800

080041c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80041cc:	e7fe      	b.n	80041cc <NMI_Handler+0x4>

080041ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041ce:	b480      	push	{r7}
 80041d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041d2:	e7fe      	b.n	80041d2 <HardFault_Handler+0x4>

080041d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041d8:	e7fe      	b.n	80041d8 <MemManage_Handler+0x4>

080041da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041da:	b480      	push	{r7}
 80041dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041de:	e7fe      	b.n	80041de <BusFault_Handler+0x4>

080041e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041e4:	e7fe      	b.n	80041e4 <UsageFault_Handler+0x4>

080041e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041e6:	b480      	push	{r7}
 80041e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041ea:	bf00      	nop
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041f8:	bf00      	nop
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004202:	b480      	push	{r7}
 8004204:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004206:	bf00      	nop
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004214:	f000 fd5a 	bl	8004ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004218:	bf00      	nop
 800421a:	bd80      	pop	{r7, pc}

0800421c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004220:	4802      	ldr	r0, [pc, #8]	; (800422c <TIM1_CC_IRQHandler+0x10>)
 8004222:	f003 fe89 	bl	8007f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004226:	bf00      	nop
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000368 	.word	0x20000368

08004230 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004234:	4802      	ldr	r0, [pc, #8]	; (8004240 <TIM2_IRQHandler+0x10>)
 8004236:	f003 fe7f 	bl	8007f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800423a:	bf00      	nop
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	200003b4 	.word	0x200003b4

08004244 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004248:	4802      	ldr	r0, [pc, #8]	; (8004254 <TIM3_IRQHandler+0x10>)
 800424a:	f003 fe75 	bl	8007f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20000400 	.word	0x20000400

08004258 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800425c:	4802      	ldr	r0, [pc, #8]	; (8004268 <TIM4_IRQHandler+0x10>)
 800425e:	f003 fe6b 	bl	8007f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004262:	bf00      	nop
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	2000044c 	.word	0x2000044c

0800426c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8004270:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004274:	f001 f89a 	bl	80053ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004278:	bf00      	nop
 800427a:	bd80      	pop	{r7, pc}

0800427c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8004280:	4802      	ldr	r0, [pc, #8]	; (800428c <SPI4_IRQHandler+0x10>)
 8004282:	f003 f805 	bl	8007290 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8004286:	bf00      	nop
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	20000300 	.word	0x20000300

08004290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004298:	4a14      	ldr	r2, [pc, #80]	; (80042ec <_sbrk+0x5c>)
 800429a:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <_sbrk+0x60>)
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042a4:	4b13      	ldr	r3, [pc, #76]	; (80042f4 <_sbrk+0x64>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d102      	bne.n	80042b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042ac:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <_sbrk+0x64>)
 80042ae:	4a12      	ldr	r2, [pc, #72]	; (80042f8 <_sbrk+0x68>)
 80042b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042b2:	4b10      	ldr	r3, [pc, #64]	; (80042f4 <_sbrk+0x64>)
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4413      	add	r3, r2
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d207      	bcs.n	80042d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042c0:	f005 fee0 	bl	800a084 <__errno>
 80042c4:	4603      	mov	r3, r0
 80042c6:	220c      	movs	r2, #12
 80042c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042ca:	f04f 33ff 	mov.w	r3, #4294967295
 80042ce:	e009      	b.n	80042e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042d0:	4b08      	ldr	r3, [pc, #32]	; (80042f4 <_sbrk+0x64>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042d6:	4b07      	ldr	r3, [pc, #28]	; (80042f4 <_sbrk+0x64>)
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4413      	add	r3, r2
 80042de:	4a05      	ldr	r2, [pc, #20]	; (80042f4 <_sbrk+0x64>)
 80042e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042e2:	68fb      	ldr	r3, [r7, #12]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	20050000 	.word	0x20050000
 80042f0:	00000400 	.word	0x00000400
 80042f4:	20000364 	.word	0x20000364
 80042f8:	20000670 	.word	0x20000670

080042fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004300:	4b06      	ldr	r3, [pc, #24]	; (800431c <SystemInit+0x20>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004306:	4a05      	ldr	r2, [pc, #20]	; (800431c <SystemInit+0x20>)
 8004308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800430c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004310:	bf00      	nop
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	e000ed00 	.word	0xe000ed00

08004320 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b09a      	sub	sp, #104	; 0x68
 8004324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004326:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	605a      	str	r2, [r3, #4]
 8004330:	609a      	str	r2, [r3, #8]
 8004332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004334:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	605a      	str	r2, [r3, #4]
 800433e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004340:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	605a      	str	r2, [r3, #4]
 800434a:	609a      	str	r2, [r3, #8]
 800434c:	60da      	str	r2, [r3, #12]
 800434e:	611a      	str	r2, [r3, #16]
 8004350:	615a      	str	r2, [r3, #20]
 8004352:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004354:	1d3b      	adds	r3, r7, #4
 8004356:	222c      	movs	r2, #44	; 0x2c
 8004358:	2100      	movs	r1, #0
 800435a:	4618      	mov	r0, r3
 800435c:	f005 fe8a 	bl	800a074 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004360:	4b5a      	ldr	r3, [pc, #360]	; (80044cc <MX_TIM1_Init+0x1ac>)
 8004362:	4a5b      	ldr	r2, [pc, #364]	; (80044d0 <MX_TIM1_Init+0x1b0>)
 8004364:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8004366:	4b59      	ldr	r3, [pc, #356]	; (80044cc <MX_TIM1_Init+0x1ac>)
 8004368:	2247      	movs	r2, #71	; 0x47
 800436a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800436c:	4b57      	ldr	r3, [pc, #348]	; (80044cc <MX_TIM1_Init+0x1ac>)
 800436e:	2200      	movs	r2, #0
 8004370:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8004372:	4b56      	ldr	r3, [pc, #344]	; (80044cc <MX_TIM1_Init+0x1ac>)
 8004374:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004378:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800437a:	4b54      	ldr	r3, [pc, #336]	; (80044cc <MX_TIM1_Init+0x1ac>)
 800437c:	2200      	movs	r2, #0
 800437e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004380:	4b52      	ldr	r3, [pc, #328]	; (80044cc <MX_TIM1_Init+0x1ac>)
 8004382:	2200      	movs	r2, #0
 8004384:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004386:	4b51      	ldr	r3, [pc, #324]	; (80044cc <MX_TIM1_Init+0x1ac>)
 8004388:	2200      	movs	r2, #0
 800438a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800438c:	484f      	ldr	r0, [pc, #316]	; (80044cc <MX_TIM1_Init+0x1ac>)
 800438e:	f003 fa97 	bl	80078c0 <HAL_TIM_Base_Init>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004398:	f7ff fe62 	bl	8004060 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800439c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043a0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80043a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80043a6:	4619      	mov	r1, r3
 80043a8:	4848      	ldr	r0, [pc, #288]	; (80044cc <MX_TIM1_Init+0x1ac>)
 80043aa:	f004 f873 	bl	8008494 <HAL_TIM_ConfigClockSource>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80043b4:	f7ff fe54 	bl	8004060 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80043b8:	4844      	ldr	r0, [pc, #272]	; (80044cc <MX_TIM1_Init+0x1ac>)
 80043ba:	f003 fbe1 	bl	8007b80 <HAL_TIM_PWM_Init>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80043c4:	f7ff fe4c 	bl	8004060 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80043c8:	4840      	ldr	r0, [pc, #256]	; (80044cc <MX_TIM1_Init+0x1ac>)
 80043ca:	f003 fb78 	bl	8007abe <HAL_TIM_OC_Init>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 80043d4:	f7ff fe44 	bl	8004060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043d8:	2300      	movs	r3, #0
 80043da:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80043dc:	2300      	movs	r3, #0
 80043de:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043e0:	2300      	movs	r3, #0
 80043e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80043e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80043e8:	4619      	mov	r1, r3
 80043ea:	4838      	ldr	r0, [pc, #224]	; (80044cc <MX_TIM1_Init+0x1ac>)
 80043ec:	f004 fd02 	bl	8008df4 <HAL_TIMEx_MasterConfigSynchronization>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80043f6:	f7ff fe33 	bl	8004060 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043fa:	2360      	movs	r3, #96	; 0x60
 80043fc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80043fe:	2300      	movs	r3, #0
 8004400:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004402:	2300      	movs	r3, #0
 8004404:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004406:	2300      	movs	r3, #0
 8004408:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800440a:	2300      	movs	r3, #0
 800440c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800440e:	2300      	movs	r3, #0
 8004410:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004412:	2300      	movs	r3, #0
 8004414:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004416:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800441a:	2200      	movs	r2, #0
 800441c:	4619      	mov	r1, r3
 800441e:	482b      	ldr	r0, [pc, #172]	; (80044cc <MX_TIM1_Init+0x1ac>)
 8004420:	f003 ff24 	bl	800826c <HAL_TIM_PWM_ConfigChannel>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800442a:	f7ff fe19 	bl	8004060 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800442e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004432:	2204      	movs	r2, #4
 8004434:	4619      	mov	r1, r3
 8004436:	4825      	ldr	r0, [pc, #148]	; (80044cc <MX_TIM1_Init+0x1ac>)
 8004438:	f003 ff18 	bl	800826c <HAL_TIM_PWM_ConfigChannel>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8004442:	f7ff fe0d 	bl	8004060 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004446:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800444a:	2208      	movs	r2, #8
 800444c:	4619      	mov	r1, r3
 800444e:	481f      	ldr	r0, [pc, #124]	; (80044cc <MX_TIM1_Init+0x1ac>)
 8004450:	f003 ff0c 	bl	800826c <HAL_TIM_PWM_ConfigChannel>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 800445a:	f7ff fe01 	bl	8004060 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800445e:	2300      	movs	r3, #0
 8004460:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004462:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004466:	220c      	movs	r2, #12
 8004468:	4619      	mov	r1, r3
 800446a:	4818      	ldr	r0, [pc, #96]	; (80044cc <MX_TIM1_Init+0x1ac>)
 800446c:	f003 fe84 	bl	8008178 <HAL_TIM_OC_ConfigChannel>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8004476:	f7ff fdf3 	bl	8004060 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800447a:	2300      	movs	r3, #0
 800447c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800447e:	2300      	movs	r3, #0
 8004480:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004486:	2300      	movs	r3, #0
 8004488:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800448a:	2300      	movs	r3, #0
 800448c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800448e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004492:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004494:	2300      	movs	r3, #0
 8004496:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004498:	2300      	movs	r3, #0
 800449a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800449c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80044a2:	2300      	movs	r3, #0
 80044a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80044a6:	2300      	movs	r3, #0
 80044a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80044aa:	1d3b      	adds	r3, r7, #4
 80044ac:	4619      	mov	r1, r3
 80044ae:	4807      	ldr	r0, [pc, #28]	; (80044cc <MX_TIM1_Init+0x1ac>)
 80044b0:	f004 fd2e 	bl	8008f10 <HAL_TIMEx_ConfigBreakDeadTime>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <MX_TIM1_Init+0x19e>
  {
    Error_Handler();
 80044ba:	f7ff fdd1 	bl	8004060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80044be:	4803      	ldr	r0, [pc, #12]	; (80044cc <MX_TIM1_Init+0x1ac>)
 80044c0:	f000 fa0c 	bl	80048dc <HAL_TIM_MspPostInit>

}
 80044c4:	bf00      	nop
 80044c6:	3768      	adds	r7, #104	; 0x68
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	20000368 	.word	0x20000368
 80044d0:	40010000 	.word	0x40010000

080044d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b08e      	sub	sp, #56	; 0x38
 80044d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	605a      	str	r2, [r3, #4]
 80044e4:	609a      	str	r2, [r3, #8]
 80044e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044e8:	f107 031c 	add.w	r3, r7, #28
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	605a      	str	r2, [r3, #4]
 80044f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044f4:	463b      	mov	r3, r7
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	605a      	str	r2, [r3, #4]
 80044fc:	609a      	str	r2, [r3, #8]
 80044fe:	60da      	str	r2, [r3, #12]
 8004500:	611a      	str	r2, [r3, #16]
 8004502:	615a      	str	r2, [r3, #20]
 8004504:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004506:	4b34      	ldr	r3, [pc, #208]	; (80045d8 <MX_TIM2_Init+0x104>)
 8004508:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800450c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800450e:	4b32      	ldr	r3, [pc, #200]	; (80045d8 <MX_TIM2_Init+0x104>)
 8004510:	2247      	movs	r2, #71	; 0x47
 8004512:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004514:	4b30      	ldr	r3, [pc, #192]	; (80045d8 <MX_TIM2_Init+0x104>)
 8004516:	2200      	movs	r2, #0
 8004518:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800451a:	4b2f      	ldr	r3, [pc, #188]	; (80045d8 <MX_TIM2_Init+0x104>)
 800451c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004520:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004522:	4b2d      	ldr	r3, [pc, #180]	; (80045d8 <MX_TIM2_Init+0x104>)
 8004524:	2200      	movs	r2, #0
 8004526:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004528:	4b2b      	ldr	r3, [pc, #172]	; (80045d8 <MX_TIM2_Init+0x104>)
 800452a:	2200      	movs	r2, #0
 800452c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800452e:	482a      	ldr	r0, [pc, #168]	; (80045d8 <MX_TIM2_Init+0x104>)
 8004530:	f003 f9c6 	bl	80078c0 <HAL_TIM_Base_Init>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800453a:	f7ff fd91 	bl	8004060 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800453e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004544:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004548:	4619      	mov	r1, r3
 800454a:	4823      	ldr	r0, [pc, #140]	; (80045d8 <MX_TIM2_Init+0x104>)
 800454c:	f003 ffa2 	bl	8008494 <HAL_TIM_ConfigClockSource>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004556:	f7ff fd83 	bl	8004060 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800455a:	481f      	ldr	r0, [pc, #124]	; (80045d8 <MX_TIM2_Init+0x104>)
 800455c:	f003 fb10 	bl	8007b80 <HAL_TIM_PWM_Init>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004566:	f7ff fd7b 	bl	8004060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800456a:	2300      	movs	r3, #0
 800456c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800456e:	2300      	movs	r3, #0
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004572:	f107 031c 	add.w	r3, r7, #28
 8004576:	4619      	mov	r1, r3
 8004578:	4817      	ldr	r0, [pc, #92]	; (80045d8 <MX_TIM2_Init+0x104>)
 800457a:	f004 fc3b 	bl	8008df4 <HAL_TIMEx_MasterConfigSynchronization>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004584:	f7ff fd6c 	bl	8004060 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004588:	2360      	movs	r3, #96	; 0x60
 800458a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 800458c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004590:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004592:	2300      	movs	r3, #0
 8004594:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004596:	2300      	movs	r3, #0
 8004598:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800459a:	463b      	mov	r3, r7
 800459c:	2200      	movs	r2, #0
 800459e:	4619      	mov	r1, r3
 80045a0:	480d      	ldr	r0, [pc, #52]	; (80045d8 <MX_TIM2_Init+0x104>)
 80045a2:	f003 fe63 	bl	800826c <HAL_TIM_PWM_ConfigChannel>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80045ac:	f7ff fd58 	bl	8004060 <Error_Handler>
  }
  sConfigOC.Pulse = 10;
 80045b0:	230a      	movs	r3, #10
 80045b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80045b4:	463b      	mov	r3, r7
 80045b6:	2208      	movs	r2, #8
 80045b8:	4619      	mov	r1, r3
 80045ba:	4807      	ldr	r0, [pc, #28]	; (80045d8 <MX_TIM2_Init+0x104>)
 80045bc:	f003 fe56 	bl	800826c <HAL_TIM_PWM_ConfigChannel>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 80045c6:	f7ff fd4b 	bl	8004060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80045ca:	4803      	ldr	r0, [pc, #12]	; (80045d8 <MX_TIM2_Init+0x104>)
 80045cc:	f000 f986 	bl	80048dc <HAL_TIM_MspPostInit>

}
 80045d0:	bf00      	nop
 80045d2:	3738      	adds	r7, #56	; 0x38
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	200003b4 	.word	0x200003b4

080045dc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08e      	sub	sp, #56	; 0x38
 80045e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	605a      	str	r2, [r3, #4]
 80045ec:	609a      	str	r2, [r3, #8]
 80045ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045f0:	f107 031c 	add.w	r3, r7, #28
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	605a      	str	r2, [r3, #4]
 80045fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045fc:	463b      	mov	r3, r7
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	605a      	str	r2, [r3, #4]
 8004604:	609a      	str	r2, [r3, #8]
 8004606:	60da      	str	r2, [r3, #12]
 8004608:	611a      	str	r2, [r3, #16]
 800460a:	615a      	str	r2, [r3, #20]
 800460c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800460e:	4b32      	ldr	r3, [pc, #200]	; (80046d8 <MX_TIM3_Init+0xfc>)
 8004610:	4a32      	ldr	r2, [pc, #200]	; (80046dc <MX_TIM3_Init+0x100>)
 8004612:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8004614:	4b30      	ldr	r3, [pc, #192]	; (80046d8 <MX_TIM3_Init+0xfc>)
 8004616:	2247      	movs	r2, #71	; 0x47
 8004618:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800461a:	4b2f      	ldr	r3, [pc, #188]	; (80046d8 <MX_TIM3_Init+0xfc>)
 800461c:	2200      	movs	r2, #0
 800461e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8004620:	4b2d      	ldr	r3, [pc, #180]	; (80046d8 <MX_TIM3_Init+0xfc>)
 8004622:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004626:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004628:	4b2b      	ldr	r3, [pc, #172]	; (80046d8 <MX_TIM3_Init+0xfc>)
 800462a:	2200      	movs	r2, #0
 800462c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800462e:	4b2a      	ldr	r3, [pc, #168]	; (80046d8 <MX_TIM3_Init+0xfc>)
 8004630:	2200      	movs	r2, #0
 8004632:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004634:	4828      	ldr	r0, [pc, #160]	; (80046d8 <MX_TIM3_Init+0xfc>)
 8004636:	f003 f943 	bl	80078c0 <HAL_TIM_Base_Init>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004640:	f7ff fd0e 	bl	8004060 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004648:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800464a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800464e:	4619      	mov	r1, r3
 8004650:	4821      	ldr	r0, [pc, #132]	; (80046d8 <MX_TIM3_Init+0xfc>)
 8004652:	f003 ff1f 	bl	8008494 <HAL_TIM_ConfigClockSource>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800465c:	f7ff fd00 	bl	8004060 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004660:	481d      	ldr	r0, [pc, #116]	; (80046d8 <MX_TIM3_Init+0xfc>)
 8004662:	f003 fa8d 	bl	8007b80 <HAL_TIM_PWM_Init>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800466c:	f7ff fcf8 	bl	8004060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004670:	2300      	movs	r3, #0
 8004672:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004674:	2300      	movs	r3, #0
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004678:	f107 031c 	add.w	r3, r7, #28
 800467c:	4619      	mov	r1, r3
 800467e:	4816      	ldr	r0, [pc, #88]	; (80046d8 <MX_TIM3_Init+0xfc>)
 8004680:	f004 fbb8 	bl	8008df4 <HAL_TIMEx_MasterConfigSynchronization>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800468a:	f7ff fce9 	bl	8004060 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800468e:	2360      	movs	r3, #96	; 0x60
 8004690:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004692:	2300      	movs	r3, #0
 8004694:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004696:	2300      	movs	r3, #0
 8004698:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800469a:	2300      	movs	r3, #0
 800469c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800469e:	463b      	mov	r3, r7
 80046a0:	2208      	movs	r2, #8
 80046a2:	4619      	mov	r1, r3
 80046a4:	480c      	ldr	r0, [pc, #48]	; (80046d8 <MX_TIM3_Init+0xfc>)
 80046a6:	f003 fde1 	bl	800826c <HAL_TIM_PWM_ConfigChannel>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80046b0:	f7ff fcd6 	bl	8004060 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80046b4:	463b      	mov	r3, r7
 80046b6:	220c      	movs	r2, #12
 80046b8:	4619      	mov	r1, r3
 80046ba:	4807      	ldr	r0, [pc, #28]	; (80046d8 <MX_TIM3_Init+0xfc>)
 80046bc:	f003 fdd6 	bl	800826c <HAL_TIM_PWM_ConfigChannel>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80046c6:	f7ff fccb 	bl	8004060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80046ca:	4803      	ldr	r0, [pc, #12]	; (80046d8 <MX_TIM3_Init+0xfc>)
 80046cc:	f000 f906 	bl	80048dc <HAL_TIM_MspPostInit>

}
 80046d0:	bf00      	nop
 80046d2:	3738      	adds	r7, #56	; 0x38
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	20000400 	.word	0x20000400
 80046dc:	40000400 	.word	0x40000400

080046e0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08e      	sub	sp, #56	; 0x38
 80046e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	605a      	str	r2, [r3, #4]
 80046f0:	609a      	str	r2, [r3, #8]
 80046f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046f4:	f107 031c 	add.w	r3, r7, #28
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	605a      	str	r2, [r3, #4]
 80046fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004700:	463b      	mov	r3, r7
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	605a      	str	r2, [r3, #4]
 8004708:	609a      	str	r2, [r3, #8]
 800470a:	60da      	str	r2, [r3, #12]
 800470c:	611a      	str	r2, [r3, #16]
 800470e:	615a      	str	r2, [r3, #20]
 8004710:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004712:	4b34      	ldr	r3, [pc, #208]	; (80047e4 <MX_TIM4_Init+0x104>)
 8004714:	4a34      	ldr	r2, [pc, #208]	; (80047e8 <MX_TIM4_Init+0x108>)
 8004716:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8004718:	4b32      	ldr	r3, [pc, #200]	; (80047e4 <MX_TIM4_Init+0x104>)
 800471a:	2247      	movs	r2, #71	; 0x47
 800471c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800471e:	4b31      	ldr	r3, [pc, #196]	; (80047e4 <MX_TIM4_Init+0x104>)
 8004720:	2200      	movs	r2, #0
 8004722:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8004724:	4b2f      	ldr	r3, [pc, #188]	; (80047e4 <MX_TIM4_Init+0x104>)
 8004726:	f240 32e7 	movw	r2, #999	; 0x3e7
 800472a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800472c:	4b2d      	ldr	r3, [pc, #180]	; (80047e4 <MX_TIM4_Init+0x104>)
 800472e:	2200      	movs	r2, #0
 8004730:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004732:	4b2c      	ldr	r3, [pc, #176]	; (80047e4 <MX_TIM4_Init+0x104>)
 8004734:	2200      	movs	r2, #0
 8004736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004738:	482a      	ldr	r0, [pc, #168]	; (80047e4 <MX_TIM4_Init+0x104>)
 800473a:	f003 f8c1 	bl	80078c0 <HAL_TIM_Base_Init>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8004744:	f7ff fc8c 	bl	8004060 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800474c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800474e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004752:	4619      	mov	r1, r3
 8004754:	4823      	ldr	r0, [pc, #140]	; (80047e4 <MX_TIM4_Init+0x104>)
 8004756:	f003 fe9d 	bl	8008494 <HAL_TIM_ConfigClockSource>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8004760:	f7ff fc7e 	bl	8004060 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004764:	481f      	ldr	r0, [pc, #124]	; (80047e4 <MX_TIM4_Init+0x104>)
 8004766:	f003 fa0b 	bl	8007b80 <HAL_TIM_PWM_Init>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8004770:	f7ff fc76 	bl	8004060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004774:	2300      	movs	r3, #0
 8004776:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004778:	2300      	movs	r3, #0
 800477a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800477c:	f107 031c 	add.w	r3, r7, #28
 8004780:	4619      	mov	r1, r3
 8004782:	4818      	ldr	r0, [pc, #96]	; (80047e4 <MX_TIM4_Init+0x104>)
 8004784:	f004 fb36 	bl	8008df4 <HAL_TIMEx_MasterConfigSynchronization>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800478e:	f7ff fc67 	bl	8004060 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004792:	2360      	movs	r3, #96	; 0x60
 8004794:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8004796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800479a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800479c:	2300      	movs	r3, #0
 800479e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047a0:	2300      	movs	r3, #0
 80047a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047a4:	463b      	mov	r3, r7
 80047a6:	2200      	movs	r2, #0
 80047a8:	4619      	mov	r1, r3
 80047aa:	480e      	ldr	r0, [pc, #56]	; (80047e4 <MX_TIM4_Init+0x104>)
 80047ac:	f003 fd5e 	bl	800826c <HAL_TIM_PWM_ConfigChannel>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80047b6:	f7ff fc53 	bl	8004060 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80047ba:	2300      	movs	r3, #0
 80047bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80047be:	463b      	mov	r3, r7
 80047c0:	2208      	movs	r2, #8
 80047c2:	4619      	mov	r1, r3
 80047c4:	4807      	ldr	r0, [pc, #28]	; (80047e4 <MX_TIM4_Init+0x104>)
 80047c6:	f003 fd51 	bl	800826c <HAL_TIM_PWM_ConfigChannel>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 80047d0:	f7ff fc46 	bl	8004060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80047d4:	4803      	ldr	r0, [pc, #12]	; (80047e4 <MX_TIM4_Init+0x104>)
 80047d6:	f000 f881 	bl	80048dc <HAL_TIM_MspPostInit>

}
 80047da:	bf00      	nop
 80047dc:	3738      	adds	r7, #56	; 0x38
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	2000044c 	.word	0x2000044c
 80047e8:	40000800 	.word	0x40000800

080047ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a34      	ldr	r2, [pc, #208]	; (80048cc <HAL_TIM_Base_MspInit+0xe0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d114      	bne.n	8004828 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80047fe:	4b34      	ldr	r3, [pc, #208]	; (80048d0 <HAL_TIM_Base_MspInit+0xe4>)
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	4a33      	ldr	r2, [pc, #204]	; (80048d0 <HAL_TIM_Base_MspInit+0xe4>)
 8004804:	f043 0301 	orr.w	r3, r3, #1
 8004808:	6453      	str	r3, [r2, #68]	; 0x44
 800480a:	4b31      	ldr	r3, [pc, #196]	; (80048d0 <HAL_TIM_Base_MspInit+0xe4>)
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004816:	2200      	movs	r2, #0
 8004818:	2100      	movs	r1, #0
 800481a:	201b      	movs	r0, #27
 800481c:	f000 fb75 	bl	8004f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004820:	201b      	movs	r0, #27
 8004822:	f000 fb8e 	bl	8004f42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004826:	e04c      	b.n	80048c2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004830:	d114      	bne.n	800485c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004832:	4b27      	ldr	r3, [pc, #156]	; (80048d0 <HAL_TIM_Base_MspInit+0xe4>)
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	4a26      	ldr	r2, [pc, #152]	; (80048d0 <HAL_TIM_Base_MspInit+0xe4>)
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	6413      	str	r3, [r2, #64]	; 0x40
 800483e:	4b24      	ldr	r3, [pc, #144]	; (80048d0 <HAL_TIM_Base_MspInit+0xe4>)
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800484a:	2200      	movs	r2, #0
 800484c:	2100      	movs	r1, #0
 800484e:	201c      	movs	r0, #28
 8004850:	f000 fb5b 	bl	8004f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004854:	201c      	movs	r0, #28
 8004856:	f000 fb74 	bl	8004f42 <HAL_NVIC_EnableIRQ>
}
 800485a:	e032      	b.n	80048c2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1c      	ldr	r2, [pc, #112]	; (80048d4 <HAL_TIM_Base_MspInit+0xe8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d114      	bne.n	8004890 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004866:	4b1a      	ldr	r3, [pc, #104]	; (80048d0 <HAL_TIM_Base_MspInit+0xe4>)
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	4a19      	ldr	r2, [pc, #100]	; (80048d0 <HAL_TIM_Base_MspInit+0xe4>)
 800486c:	f043 0302 	orr.w	r3, r3, #2
 8004870:	6413      	str	r3, [r2, #64]	; 0x40
 8004872:	4b17      	ldr	r3, [pc, #92]	; (80048d0 <HAL_TIM_Base_MspInit+0xe4>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800487e:	2200      	movs	r2, #0
 8004880:	2100      	movs	r1, #0
 8004882:	201d      	movs	r0, #29
 8004884:	f000 fb41 	bl	8004f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004888:	201d      	movs	r0, #29
 800488a:	f000 fb5a 	bl	8004f42 <HAL_NVIC_EnableIRQ>
}
 800488e:	e018      	b.n	80048c2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a10      	ldr	r2, [pc, #64]	; (80048d8 <HAL_TIM_Base_MspInit+0xec>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d113      	bne.n	80048c2 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800489a:	4b0d      	ldr	r3, [pc, #52]	; (80048d0 <HAL_TIM_Base_MspInit+0xe4>)
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	4a0c      	ldr	r2, [pc, #48]	; (80048d0 <HAL_TIM_Base_MspInit+0xe4>)
 80048a0:	f043 0304 	orr.w	r3, r3, #4
 80048a4:	6413      	str	r3, [r2, #64]	; 0x40
 80048a6:	4b0a      	ldr	r3, [pc, #40]	; (80048d0 <HAL_TIM_Base_MspInit+0xe4>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	60bb      	str	r3, [r7, #8]
 80048b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80048b2:	2200      	movs	r2, #0
 80048b4:	2100      	movs	r1, #0
 80048b6:	201e      	movs	r0, #30
 80048b8:	f000 fb27 	bl	8004f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80048bc:	201e      	movs	r0, #30
 80048be:	f000 fb40 	bl	8004f42 <HAL_NVIC_EnableIRQ>
}
 80048c2:	bf00      	nop
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40010000 	.word	0x40010000
 80048d0:	40023800 	.word	0x40023800
 80048d4:	40000400 	.word	0x40000400
 80048d8:	40000800 	.word	0x40000800

080048dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08e      	sub	sp, #56	; 0x38
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	605a      	str	r2, [r3, #4]
 80048ee:	609a      	str	r2, [r3, #8]
 80048f0:	60da      	str	r2, [r3, #12]
 80048f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a70      	ldr	r2, [pc, #448]	; (8004abc <HAL_TIM_MspPostInit+0x1e0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d13a      	bne.n	8004974 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80048fe:	4b70      	ldr	r3, [pc, #448]	; (8004ac0 <HAL_TIM_MspPostInit+0x1e4>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	4a6f      	ldr	r2, [pc, #444]	; (8004ac0 <HAL_TIM_MspPostInit+0x1e4>)
 8004904:	f043 0310 	orr.w	r3, r3, #16
 8004908:	6313      	str	r3, [r2, #48]	; 0x30
 800490a:	4b6d      	ldr	r3, [pc, #436]	; (8004ac0 <HAL_TIM_MspPostInit+0x1e4>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	f003 0310 	and.w	r3, r3, #16
 8004912:	623b      	str	r3, [r7, #32]
 8004914:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004916:	4b6a      	ldr	r3, [pc, #424]	; (8004ac0 <HAL_TIM_MspPostInit+0x1e4>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	4a69      	ldr	r2, [pc, #420]	; (8004ac0 <HAL_TIM_MspPostInit+0x1e4>)
 800491c:	f043 0301 	orr.w	r3, r3, #1
 8004920:	6313      	str	r3, [r2, #48]	; 0x30
 8004922:	4b67      	ldr	r3, [pc, #412]	; (8004ac0 <HAL_TIM_MspPostInit+0x1e4>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	69fb      	ldr	r3, [r7, #28]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_Kitchen_Shutter_Pin|TIM1_CH2_LivingRoom_Shutter_Pin|TIM3_CH3_Garage_Shutter_Pin;
 800492e:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004934:	2302      	movs	r3, #2
 8004936:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004938:	2300      	movs	r3, #0
 800493a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800493c:	2300      	movs	r3, #0
 800493e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004940:	2301      	movs	r3, #1
 8004942:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004948:	4619      	mov	r1, r3
 800494a:	485e      	ldr	r0, [pc, #376]	; (8004ac4 <HAL_TIM_MspPostInit+0x1e8>)
 800494c:	f000 fb36 	bl	8004fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM1_CH4_Door_Pin;
 8004950:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004956:	2302      	movs	r3, #2
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800495a:	2300      	movs	r3, #0
 800495c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800495e:	2300      	movs	r3, #0
 8004960:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004962:	2301      	movs	r3, #1
 8004964:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM1_CH4_Door_GPIO_Port, &GPIO_InitStruct);
 8004966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800496a:	4619      	mov	r1, r3
 800496c:	4856      	ldr	r0, [pc, #344]	; (8004ac8 <HAL_TIM_MspPostInit+0x1ec>)
 800496e:	f000 fb25 	bl	8004fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004972:	e09f      	b.n	8004ab4 <HAL_TIM_MspPostInit+0x1d8>
  else if(timHandle->Instance==TIM2)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497c:	d139      	bne.n	80049f2 <HAL_TIM_MspPostInit+0x116>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800497e:	4b50      	ldr	r3, [pc, #320]	; (8004ac0 <HAL_TIM_MspPostInit+0x1e4>)
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	4a4f      	ldr	r2, [pc, #316]	; (8004ac0 <HAL_TIM_MspPostInit+0x1e4>)
 8004984:	f043 0301 	orr.w	r3, r3, #1
 8004988:	6313      	str	r3, [r2, #48]	; 0x30
 800498a:	4b4d      	ldr	r3, [pc, #308]	; (8004ac0 <HAL_TIM_MspPostInit+0x1e4>)
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	61bb      	str	r3, [r7, #24]
 8004994:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004996:	4b4a      	ldr	r3, [pc, #296]	; (8004ac0 <HAL_TIM_MspPostInit+0x1e4>)
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	4a49      	ldr	r2, [pc, #292]	; (8004ac0 <HAL_TIM_MspPostInit+0x1e4>)
 800499c:	f043 0302 	orr.w	r3, r3, #2
 80049a0:	6313      	str	r3, [r2, #48]	; 0x30
 80049a2:	4b47      	ldr	r3, [pc, #284]	; (8004ac0 <HAL_TIM_MspPostInit+0x1e4>)
 80049a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_RGB_Garage_Pin;
 80049ae:	2301      	movs	r3, #1
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049b2:	2302      	movs	r3, #2
 80049b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ba:	2300      	movs	r3, #0
 80049bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80049be:	2301      	movs	r3, #1
 80049c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH1_RGB_Garage_GPIO_Port, &GPIO_InitStruct);
 80049c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049c6:	4619      	mov	r1, r3
 80049c8:	483f      	ldr	r0, [pc, #252]	; (8004ac8 <HAL_TIM_MspPostInit+0x1ec>)
 80049ca:	f000 faf7 	bl	8004fbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM2_CH3_Alarm_Buzzer_Pin;
 80049ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049d4:	2302      	movs	r3, #2
 80049d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d8:	2300      	movs	r3, #0
 80049da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049dc:	2300      	movs	r3, #0
 80049de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80049e0:	2301      	movs	r3, #1
 80049e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH3_Alarm_Buzzer_GPIO_Port, &GPIO_InitStruct);
 80049e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049e8:	4619      	mov	r1, r3
 80049ea:	4838      	ldr	r0, [pc, #224]	; (8004acc <HAL_TIM_MspPostInit+0x1f0>)
 80049ec:	f000 fae6 	bl	8004fbc <HAL_GPIO_Init>
}
 80049f0:	e060      	b.n	8004ab4 <HAL_TIM_MspPostInit+0x1d8>
  else if(timHandle->Instance==TIM3)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a36      	ldr	r2, [pc, #216]	; (8004ad0 <HAL_TIM_MspPostInit+0x1f4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d139      	bne.n	8004a70 <HAL_TIM_MspPostInit+0x194>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049fc:	4b30      	ldr	r3, [pc, #192]	; (8004ac0 <HAL_TIM_MspPostInit+0x1e4>)
 80049fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a00:	4a2f      	ldr	r2, [pc, #188]	; (8004ac0 <HAL_TIM_MspPostInit+0x1e4>)
 8004a02:	f043 0302 	orr.w	r3, r3, #2
 8004a06:	6313      	str	r3, [r2, #48]	; 0x30
 8004a08:	4b2d      	ldr	r3, [pc, #180]	; (8004ac0 <HAL_TIM_MspPostInit+0x1e4>)
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a14:	4b2a      	ldr	r3, [pc, #168]	; (8004ac0 <HAL_TIM_MspPostInit+0x1e4>)
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	4a29      	ldr	r2, [pc, #164]	; (8004ac0 <HAL_TIM_MspPostInit+0x1e4>)
 8004a1a:	f043 0304 	orr.w	r3, r3, #4
 8004a1e:	6313      	str	r3, [r2, #48]	; 0x30
 8004a20:	4b27      	ldr	r3, [pc, #156]	; (8004ac0 <HAL_TIM_MspPostInit+0x1e4>)
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH3_RGB_Kitchen_Pin;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a30:	2302      	movs	r3, #2
 8004a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM3_CH3_RGB_Kitchen_GPIO_Port, &GPIO_InitStruct);
 8004a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a44:	4619      	mov	r1, r3
 8004a46:	4821      	ldr	r0, [pc, #132]	; (8004acc <HAL_TIM_MspPostInit+0x1f0>)
 8004a48:	f000 fab8 	bl	8004fbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM3_CH4_Garage_Pin;
 8004a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a52:	2302      	movs	r3, #2
 8004a54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004a5e:	2302      	movs	r3, #2
 8004a60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM3_CH4_Garage_GPIO_Port, &GPIO_InitStruct);
 8004a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a66:	4619      	mov	r1, r3
 8004a68:	481a      	ldr	r0, [pc, #104]	; (8004ad4 <HAL_TIM_MspPostInit+0x1f8>)
 8004a6a:	f000 faa7 	bl	8004fbc <HAL_GPIO_Init>
}
 8004a6e:	e021      	b.n	8004ab4 <HAL_TIM_MspPostInit+0x1d8>
  else if(timHandle->Instance==TIM4)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a18      	ldr	r2, [pc, #96]	; (8004ad8 <HAL_TIM_MspPostInit+0x1fc>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d11c      	bne.n	8004ab4 <HAL_TIM_MspPostInit+0x1d8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a7a:	4b11      	ldr	r3, [pc, #68]	; (8004ac0 <HAL_TIM_MspPostInit+0x1e4>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	4a10      	ldr	r2, [pc, #64]	; (8004ac0 <HAL_TIM_MspPostInit+0x1e4>)
 8004a80:	f043 0308 	orr.w	r3, r3, #8
 8004a84:	6313      	str	r3, [r2, #48]	; 0x30
 8004a86:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <HAL_TIM_MspPostInit+0x1e4>)
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	60bb      	str	r3, [r7, #8]
 8004a90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM4_CH1_RGB_LivingRoom_Pin|TIM4_CH3_heating_Pin;
 8004a92:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a98:	2302      	movs	r3, #2
 8004a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004aac:	4619      	mov	r1, r3
 8004aae:	480b      	ldr	r0, [pc, #44]	; (8004adc <HAL_TIM_MspPostInit+0x200>)
 8004ab0:	f000 fa84 	bl	8004fbc <HAL_GPIO_Init>
}
 8004ab4:	bf00      	nop
 8004ab6:	3738      	adds	r7, #56	; 0x38
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	40010000 	.word	0x40010000
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	40020000 	.word	0x40020000
 8004acc:	40020400 	.word	0x40020400
 8004ad0:	40000400 	.word	0x40000400
 8004ad4:	40020800 	.word	0x40020800
 8004ad8:	40000800 	.word	0x40000800
 8004adc:	40020c00 	.word	0x40020c00

08004ae0 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004ae4:	4b14      	ldr	r3, [pc, #80]	; (8004b38 <MX_USART6_UART_Init+0x58>)
 8004ae6:	4a15      	ldr	r2, [pc, #84]	; (8004b3c <MX_USART6_UART_Init+0x5c>)
 8004ae8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8004aea:	4b13      	ldr	r3, [pc, #76]	; (8004b38 <MX_USART6_UART_Init+0x58>)
 8004aec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004af0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004af2:	4b11      	ldr	r3, [pc, #68]	; (8004b38 <MX_USART6_UART_Init+0x58>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004af8:	4b0f      	ldr	r3, [pc, #60]	; (8004b38 <MX_USART6_UART_Init+0x58>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004afe:	4b0e      	ldr	r3, [pc, #56]	; (8004b38 <MX_USART6_UART_Init+0x58>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004b04:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <MX_USART6_UART_Init+0x58>)
 8004b06:	220c      	movs	r2, #12
 8004b08:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b0a:	4b0b      	ldr	r3, [pc, #44]	; (8004b38 <MX_USART6_UART_Init+0x58>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b10:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <MX_USART6_UART_Init+0x58>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b16:	4b08      	ldr	r3, [pc, #32]	; (8004b38 <MX_USART6_UART_Init+0x58>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b1c:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <MX_USART6_UART_Init+0x58>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004b22:	4805      	ldr	r0, [pc, #20]	; (8004b38 <MX_USART6_UART_Init+0x58>)
 8004b24:	f004 fa90 	bl	8009048 <HAL_UART_Init>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8004b2e:	f7ff fa97 	bl	8004060 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004b32:	bf00      	nop
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20000498 	.word	0x20000498
 8004b3c:	40011400 	.word	0x40011400

08004b40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b0aa      	sub	sp, #168	; 0xa8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b48:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	605a      	str	r2, [r3, #4]
 8004b52:	609a      	str	r2, [r3, #8]
 8004b54:	60da      	str	r2, [r3, #12]
 8004b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b58:	f107 0310 	add.w	r3, r7, #16
 8004b5c:	2284      	movs	r2, #132	; 0x84
 8004b5e:	2100      	movs	r1, #0
 8004b60:	4618      	mov	r0, r3
 8004b62:	f005 fa87 	bl	800a074 <memset>
  if(uartHandle->Instance==USART6)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a22      	ldr	r2, [pc, #136]	; (8004bf4 <HAL_UART_MspInit+0xb4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d13c      	bne.n	8004bea <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004b70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b74:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004b76:	2300      	movs	r3, #0
 8004b78:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b7a:	f107 0310 	add.w	r3, r7, #16
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f001 fa3a 	bl	8005ff8 <HAL_RCCEx_PeriphCLKConfig>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004b8a:	f7ff fa69 	bl	8004060 <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8004b8e:	4b1a      	ldr	r3, [pc, #104]	; (8004bf8 <HAL_UART_MspInit+0xb8>)
 8004b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b92:	4a19      	ldr	r2, [pc, #100]	; (8004bf8 <HAL_UART_MspInit+0xb8>)
 8004b94:	f043 0320 	orr.w	r3, r3, #32
 8004b98:	6453      	str	r3, [r2, #68]	; 0x44
 8004b9a:	4b17      	ldr	r3, [pc, #92]	; (8004bf8 <HAL_UART_MspInit+0xb8>)
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004ba6:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <HAL_UART_MspInit+0xb8>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	4a13      	ldr	r2, [pc, #76]	; (8004bf8 <HAL_UART_MspInit+0xb8>)
 8004bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb2:	4b11      	ldr	r3, [pc, #68]	; (8004bf8 <HAL_UART_MspInit+0xb8>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bba:	60bb      	str	r3, [r7, #8]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8004bbe:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8004bc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004bd8:	2308      	movs	r3, #8
 8004bda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004bde:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004be2:	4619      	mov	r1, r3
 8004be4:	4805      	ldr	r0, [pc, #20]	; (8004bfc <HAL_UART_MspInit+0xbc>)
 8004be6:	f000 f9e9 	bl	8004fbc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004bea:	bf00      	nop
 8004bec:	37a8      	adds	r7, #168	; 0xa8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40011400 	.word	0x40011400
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	40021800 	.word	0x40021800

08004c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c04:	480d      	ldr	r0, [pc, #52]	; (8004c3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004c06:	490e      	ldr	r1, [pc, #56]	; (8004c40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004c08:	4a0e      	ldr	r2, [pc, #56]	; (8004c44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c0c:	e002      	b.n	8004c14 <LoopCopyDataInit>

08004c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c12:	3304      	adds	r3, #4

08004c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c18:	d3f9      	bcc.n	8004c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c1a:	4a0b      	ldr	r2, [pc, #44]	; (8004c48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004c1c:	4c0b      	ldr	r4, [pc, #44]	; (8004c4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c20:	e001      	b.n	8004c26 <LoopFillZerobss>

08004c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c24:	3204      	adds	r2, #4

08004c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c28:	d3fb      	bcc.n	8004c22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004c2a:	f7ff fb67 	bl	80042fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c2e:	f005 fa2f 	bl	800a090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c32:	f7fe f873 	bl	8002d1c <main>
  bx  lr    
 8004c36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004c38:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c40:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8004c44:	0800ae40 	.word	0x0800ae40
  ldr r2, =_sbss
 8004c48:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8004c4c:	2000066c 	.word	0x2000066c

08004c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c50:	e7fe      	b.n	8004c50 <ADC_IRQHandler>

08004c52 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c56:	2003      	movs	r0, #3
 8004c58:	f000 f94c 	bl	8004ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	f000 f805 	bl	8004c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c62:	f7ff fa8d 	bl	8004180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c74:	4b12      	ldr	r3, [pc, #72]	; (8004cc0 <HAL_InitTick+0x54>)
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	4b12      	ldr	r3, [pc, #72]	; (8004cc4 <HAL_InitTick+0x58>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 f967 	bl	8004f5e <HAL_SYSTICK_Config>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e00e      	b.n	8004cb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b0f      	cmp	r3, #15
 8004c9e:	d80a      	bhi.n	8004cb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca8:	f000 f92f 	bl	8004f0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cac:	4a06      	ldr	r2, [pc, #24]	; (8004cc8 <HAL_InitTick+0x5c>)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e000      	b.n	8004cb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	20000128 	.word	0x20000128
 8004cc4:	20000130 	.word	0x20000130
 8004cc8:	2000012c 	.word	0x2000012c

08004ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cd0:	4b06      	ldr	r3, [pc, #24]	; (8004cec <HAL_IncTick+0x20>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <HAL_IncTick+0x24>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4413      	add	r3, r2
 8004cdc:	4a04      	ldr	r2, [pc, #16]	; (8004cf0 <HAL_IncTick+0x24>)
 8004cde:	6013      	str	r3, [r2, #0]
}
 8004ce0:	bf00      	nop
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	20000130 	.word	0x20000130
 8004cf0:	20000520 	.word	0x20000520

08004cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8004cf8:	4b03      	ldr	r3, [pc, #12]	; (8004d08 <HAL_GetTick+0x14>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	20000520 	.word	0x20000520

08004d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d14:	f7ff ffee 	bl	8004cf4 <HAL_GetTick>
 8004d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d24:	d005      	beq.n	8004d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d26:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <HAL_Delay+0x44>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4413      	add	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d32:	bf00      	nop
 8004d34:	f7ff ffde 	bl	8004cf4 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d8f7      	bhi.n	8004d34 <HAL_Delay+0x28>
  {
  }
}
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000130 	.word	0x20000130

08004d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f003 0307 	and.w	r3, r3, #7
 8004d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d64:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <__NVIC_SetPriorityGrouping+0x40>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d70:	4013      	ands	r3, r2
 8004d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004d7c:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <__NVIC_SetPriorityGrouping+0x44>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d82:	4a04      	ldr	r2, [pc, #16]	; (8004d94 <__NVIC_SetPriorityGrouping+0x40>)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	60d3      	str	r3, [r2, #12]
}
 8004d88:	bf00      	nop
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	e000ed00 	.word	0xe000ed00
 8004d98:	05fa0000 	.word	0x05fa0000

08004d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004da0:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <__NVIC_GetPriorityGrouping+0x18>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	0a1b      	lsrs	r3, r3, #8
 8004da6:	f003 0307 	and.w	r3, r3, #7
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	e000ed00 	.word	0xe000ed00

08004db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	db0b      	blt.n	8004de2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dca:	79fb      	ldrb	r3, [r7, #7]
 8004dcc:	f003 021f 	and.w	r2, r3, #31
 8004dd0:	4907      	ldr	r1, [pc, #28]	; (8004df0 <__NVIC_EnableIRQ+0x38>)
 8004dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd6:	095b      	lsrs	r3, r3, #5
 8004dd8:	2001      	movs	r0, #1
 8004dda:	fa00 f202 	lsl.w	r2, r0, r2
 8004dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	e000e100 	.word	0xe000e100

08004df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	6039      	str	r1, [r7, #0]
 8004dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	db0a      	blt.n	8004e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	490c      	ldr	r1, [pc, #48]	; (8004e40 <__NVIC_SetPriority+0x4c>)
 8004e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e12:	0112      	lsls	r2, r2, #4
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	440b      	add	r3, r1
 8004e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e1c:	e00a      	b.n	8004e34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	4908      	ldr	r1, [pc, #32]	; (8004e44 <__NVIC_SetPriority+0x50>)
 8004e24:	79fb      	ldrb	r3, [r7, #7]
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	3b04      	subs	r3, #4
 8004e2c:	0112      	lsls	r2, r2, #4
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	440b      	add	r3, r1
 8004e32:	761a      	strb	r2, [r3, #24]
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	e000e100 	.word	0xe000e100
 8004e44:	e000ed00 	.word	0xe000ed00

08004e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b089      	sub	sp, #36	; 0x24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f003 0307 	and.w	r3, r3, #7
 8004e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f1c3 0307 	rsb	r3, r3, #7
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	bf28      	it	cs
 8004e66:	2304      	movcs	r3, #4
 8004e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	2b06      	cmp	r3, #6
 8004e70:	d902      	bls.n	8004e78 <NVIC_EncodePriority+0x30>
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	3b03      	subs	r3, #3
 8004e76:	e000      	b.n	8004e7a <NVIC_EncodePriority+0x32>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	fa02 f303 	lsl.w	r3, r2, r3
 8004e86:	43da      	mvns	r2, r3
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	401a      	ands	r2, r3
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e90:	f04f 31ff 	mov.w	r1, #4294967295
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9a:	43d9      	mvns	r1, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ea0:	4313      	orrs	r3, r2
         );
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3724      	adds	r7, #36	; 0x24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
	...

08004eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ec0:	d301      	bcc.n	8004ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e00f      	b.n	8004ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ec6:	4a0a      	ldr	r2, [pc, #40]	; (8004ef0 <SysTick_Config+0x40>)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ece:	210f      	movs	r1, #15
 8004ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed4:	f7ff ff8e 	bl	8004df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ed8:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <SysTick_Config+0x40>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ede:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <SysTick_Config+0x40>)
 8004ee0:	2207      	movs	r2, #7
 8004ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	e000e010 	.word	0xe000e010

08004ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7ff ff29 	bl	8004d54 <__NVIC_SetPriorityGrouping>
}
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b086      	sub	sp, #24
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	4603      	mov	r3, r0
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	607a      	str	r2, [r7, #4]
 8004f16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f1c:	f7ff ff3e 	bl	8004d9c <__NVIC_GetPriorityGrouping>
 8004f20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	6978      	ldr	r0, [r7, #20]
 8004f28:	f7ff ff8e 	bl	8004e48 <NVIC_EncodePriority>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f32:	4611      	mov	r1, r2
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff ff5d 	bl	8004df4 <__NVIC_SetPriority>
}
 8004f3a:	bf00      	nop
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b082      	sub	sp, #8
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	4603      	mov	r3, r0
 8004f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff ff31 	bl	8004db8 <__NVIC_EnableIRQ>
}
 8004f56:	bf00      	nop
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b082      	sub	sp, #8
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7ff ffa2 	bl	8004eb0 <SysTick_Config>
 8004f6c:	4603      	mov	r3, r0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d004      	beq.n	8004f94 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2280      	movs	r2, #128	; 0x80
 8004f8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e00c      	b.n	8004fae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2205      	movs	r2, #5
 8004f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0201 	bic.w	r2, r2, #1
 8004faa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
	...

08004fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b089      	sub	sp, #36	; 0x24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	e175      	b.n	80052c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004fdc:	2201      	movs	r2, #1
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	4013      	ands	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	f040 8164 	bne.w	80052c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f003 0303 	and.w	r3, r3, #3
 8005002:	2b01      	cmp	r3, #1
 8005004:	d005      	beq.n	8005012 <HAL_GPIO_Init+0x56>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d130      	bne.n	8005074 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	2203      	movs	r2, #3
 800501e:	fa02 f303 	lsl.w	r3, r2, r3
 8005022:	43db      	mvns	r3, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4013      	ands	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	4313      	orrs	r3, r2
 800503a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005048:	2201      	movs	r2, #1
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	43db      	mvns	r3, r3
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	4013      	ands	r3, r2
 8005056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	091b      	lsrs	r3, r3, #4
 800505e:	f003 0201 	and.w	r2, r3, #1
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	4313      	orrs	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f003 0303 	and.w	r3, r3, #3
 800507c:	2b03      	cmp	r3, #3
 800507e:	d017      	beq.n	80050b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	2203      	movs	r2, #3
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	43db      	mvns	r3, r3
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	4013      	ands	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d123      	bne.n	8005104 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	08da      	lsrs	r2, r3, #3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3208      	adds	r2, #8
 80050c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	220f      	movs	r2, #15
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	43db      	mvns	r3, r3
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	4013      	ands	r3, r2
 80050de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	691a      	ldr	r2, [r3, #16]
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	08da      	lsrs	r2, r3, #3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	3208      	adds	r2, #8
 80050fe:	69b9      	ldr	r1, [r7, #24]
 8005100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	2203      	movs	r2, #3
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	43db      	mvns	r3, r3
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	4013      	ands	r3, r2
 800511a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f003 0203 	and.w	r2, r3, #3
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	4313      	orrs	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 80be 	beq.w	80052c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005146:	4b66      	ldr	r3, [pc, #408]	; (80052e0 <HAL_GPIO_Init+0x324>)
 8005148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514a:	4a65      	ldr	r2, [pc, #404]	; (80052e0 <HAL_GPIO_Init+0x324>)
 800514c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005150:	6453      	str	r3, [r2, #68]	; 0x44
 8005152:	4b63      	ldr	r3, [pc, #396]	; (80052e0 <HAL_GPIO_Init+0x324>)
 8005154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800515e:	4a61      	ldr	r2, [pc, #388]	; (80052e4 <HAL_GPIO_Init+0x328>)
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	089b      	lsrs	r3, r3, #2
 8005164:	3302      	adds	r3, #2
 8005166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800516a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	220f      	movs	r2, #15
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	43db      	mvns	r3, r3
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	4013      	ands	r3, r2
 8005180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a58      	ldr	r2, [pc, #352]	; (80052e8 <HAL_GPIO_Init+0x32c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d037      	beq.n	80051fa <HAL_GPIO_Init+0x23e>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a57      	ldr	r2, [pc, #348]	; (80052ec <HAL_GPIO_Init+0x330>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d031      	beq.n	80051f6 <HAL_GPIO_Init+0x23a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a56      	ldr	r2, [pc, #344]	; (80052f0 <HAL_GPIO_Init+0x334>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d02b      	beq.n	80051f2 <HAL_GPIO_Init+0x236>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a55      	ldr	r2, [pc, #340]	; (80052f4 <HAL_GPIO_Init+0x338>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d025      	beq.n	80051ee <HAL_GPIO_Init+0x232>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a54      	ldr	r2, [pc, #336]	; (80052f8 <HAL_GPIO_Init+0x33c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d01f      	beq.n	80051ea <HAL_GPIO_Init+0x22e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a53      	ldr	r2, [pc, #332]	; (80052fc <HAL_GPIO_Init+0x340>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d019      	beq.n	80051e6 <HAL_GPIO_Init+0x22a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a52      	ldr	r2, [pc, #328]	; (8005300 <HAL_GPIO_Init+0x344>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d013      	beq.n	80051e2 <HAL_GPIO_Init+0x226>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a51      	ldr	r2, [pc, #324]	; (8005304 <HAL_GPIO_Init+0x348>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00d      	beq.n	80051de <HAL_GPIO_Init+0x222>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a50      	ldr	r2, [pc, #320]	; (8005308 <HAL_GPIO_Init+0x34c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d007      	beq.n	80051da <HAL_GPIO_Init+0x21e>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a4f      	ldr	r2, [pc, #316]	; (800530c <HAL_GPIO_Init+0x350>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d101      	bne.n	80051d6 <HAL_GPIO_Init+0x21a>
 80051d2:	2309      	movs	r3, #9
 80051d4:	e012      	b.n	80051fc <HAL_GPIO_Init+0x240>
 80051d6:	230a      	movs	r3, #10
 80051d8:	e010      	b.n	80051fc <HAL_GPIO_Init+0x240>
 80051da:	2308      	movs	r3, #8
 80051dc:	e00e      	b.n	80051fc <HAL_GPIO_Init+0x240>
 80051de:	2307      	movs	r3, #7
 80051e0:	e00c      	b.n	80051fc <HAL_GPIO_Init+0x240>
 80051e2:	2306      	movs	r3, #6
 80051e4:	e00a      	b.n	80051fc <HAL_GPIO_Init+0x240>
 80051e6:	2305      	movs	r3, #5
 80051e8:	e008      	b.n	80051fc <HAL_GPIO_Init+0x240>
 80051ea:	2304      	movs	r3, #4
 80051ec:	e006      	b.n	80051fc <HAL_GPIO_Init+0x240>
 80051ee:	2303      	movs	r3, #3
 80051f0:	e004      	b.n	80051fc <HAL_GPIO_Init+0x240>
 80051f2:	2302      	movs	r3, #2
 80051f4:	e002      	b.n	80051fc <HAL_GPIO_Init+0x240>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <HAL_GPIO_Init+0x240>
 80051fa:	2300      	movs	r3, #0
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	f002 0203 	and.w	r2, r2, #3
 8005202:	0092      	lsls	r2, r2, #2
 8005204:	4093      	lsls	r3, r2
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	4313      	orrs	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800520c:	4935      	ldr	r1, [pc, #212]	; (80052e4 <HAL_GPIO_Init+0x328>)
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	089b      	lsrs	r3, r3, #2
 8005212:	3302      	adds	r3, #2
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800521a:	4b3d      	ldr	r3, [pc, #244]	; (8005310 <HAL_GPIO_Init+0x354>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	43db      	mvns	r3, r3
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	4013      	ands	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800523e:	4a34      	ldr	r2, [pc, #208]	; (8005310 <HAL_GPIO_Init+0x354>)
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005244:	4b32      	ldr	r3, [pc, #200]	; (8005310 <HAL_GPIO_Init+0x354>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	43db      	mvns	r3, r3
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	4013      	ands	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005268:	4a29      	ldr	r2, [pc, #164]	; (8005310 <HAL_GPIO_Init+0x354>)
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800526e:	4b28      	ldr	r3, [pc, #160]	; (8005310 <HAL_GPIO_Init+0x354>)
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	43db      	mvns	r3, r3
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	4013      	ands	r3, r2
 800527c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005292:	4a1f      	ldr	r2, [pc, #124]	; (8005310 <HAL_GPIO_Init+0x354>)
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005298:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <HAL_GPIO_Init+0x354>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	43db      	mvns	r3, r3
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	4013      	ands	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052bc:	4a14      	ldr	r2, [pc, #80]	; (8005310 <HAL_GPIO_Init+0x354>)
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	3301      	adds	r3, #1
 80052c6:	61fb      	str	r3, [r7, #28]
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	2b0f      	cmp	r3, #15
 80052cc:	f67f ae86 	bls.w	8004fdc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80052d0:	bf00      	nop
 80052d2:	bf00      	nop
 80052d4:	3724      	adds	r7, #36	; 0x24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40023800 	.word	0x40023800
 80052e4:	40013800 	.word	0x40013800
 80052e8:	40020000 	.word	0x40020000
 80052ec:	40020400 	.word	0x40020400
 80052f0:	40020800 	.word	0x40020800
 80052f4:	40020c00 	.word	0x40020c00
 80052f8:	40021000 	.word	0x40021000
 80052fc:	40021400 	.word	0x40021400
 8005300:	40021800 	.word	0x40021800
 8005304:	40021c00 	.word	0x40021c00
 8005308:	40022000 	.word	0x40022000
 800530c:	40022400 	.word	0x40022400
 8005310:	40013c00 	.word	0x40013c00

08005314 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	887b      	ldrh	r3, [r7, #2]
 8005326:	4013      	ands	r3, r2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d002      	beq.n	8005332 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800532c:	2301      	movs	r3, #1
 800532e:	73fb      	strb	r3, [r7, #15]
 8005330:	e001      	b.n	8005336 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005332:	2300      	movs	r3, #0
 8005334:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005336:	7bfb      	ldrb	r3, [r7, #15]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	460b      	mov	r3, r1
 800534e:	807b      	strh	r3, [r7, #2]
 8005350:	4613      	mov	r3, r2
 8005352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005354:	787b      	ldrb	r3, [r7, #1]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800535a:	887a      	ldrh	r2, [r7, #2]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005360:	e003      	b.n	800536a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005362:	887b      	ldrh	r3, [r7, #2]
 8005364:	041a      	lsls	r2, r3, #16
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	619a      	str	r2, [r3, #24]
}
 800536a:	bf00      	nop
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005376:	b480      	push	{r7}
 8005378:	b085      	sub	sp, #20
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	460b      	mov	r3, r1
 8005380:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005388:	887a      	ldrh	r2, [r7, #2]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4013      	ands	r3, r2
 800538e:	041a      	lsls	r2, r3, #16
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	43d9      	mvns	r1, r3
 8005394:	887b      	ldrh	r3, [r7, #2]
 8005396:	400b      	ands	r3, r1
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	619a      	str	r2, [r3, #24]
}
 800539e:	bf00      	nop
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
	...

080053ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	4603      	mov	r3, r0
 80053b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80053b6:	4b08      	ldr	r3, [pc, #32]	; (80053d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053b8:	695a      	ldr	r2, [r3, #20]
 80053ba:	88fb      	ldrh	r3, [r7, #6]
 80053bc:	4013      	ands	r3, r2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d006      	beq.n	80053d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053c2:	4a05      	ldr	r2, [pc, #20]	; (80053d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053c4:	88fb      	ldrh	r3, [r7, #6]
 80053c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053c8:	88fb      	ldrh	r3, [r7, #6]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 f806 	bl	80053dc <HAL_GPIO_EXTI_Callback>
  }
}
 80053d0:	bf00      	nop
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40013c00 	.word	0x40013c00

080053dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80053e6:	bf00      	nop
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
	...

080053f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e07f      	b.n	8005506 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d106      	bne.n	8005420 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7fd f83e 	bl	800249c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2224      	movs	r2, #36	; 0x24
 8005424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0201 	bic.w	r2, r2, #1
 8005436:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005444:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005454:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d107      	bne.n	800546e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800546a:	609a      	str	r2, [r3, #8]
 800546c:	e006      	b.n	800547c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689a      	ldr	r2, [r3, #8]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800547a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	2b02      	cmp	r3, #2
 8005482:	d104      	bne.n	800548e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800548c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6859      	ldr	r1, [r3, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	4b1d      	ldr	r3, [pc, #116]	; (8005510 <HAL_I2C_Init+0x11c>)
 800549a:	430b      	orrs	r3, r1
 800549c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691a      	ldr	r2, [r3, #16]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	69d9      	ldr	r1, [r3, #28]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1a      	ldr	r2, [r3, #32]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0201 	orr.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	02008000 	.word	0x02008000

08005514 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b20      	cmp	r3, #32
 8005528:	d138      	bne.n	800559c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005534:	2302      	movs	r3, #2
 8005536:	e032      	b.n	800559e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2224      	movs	r2, #36	; 0x24
 8005544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0201 	bic.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005566:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6819      	ldr	r1, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0201 	orr.w	r2, r2, #1
 8005586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005598:	2300      	movs	r3, #0
 800559a:	e000      	b.n	800559e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800559c:	2302      	movs	r3, #2
  }
}
 800559e:	4618      	mov	r0, r3
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b085      	sub	sp, #20
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d139      	bne.n	8005634 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d101      	bne.n	80055ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80055ca:	2302      	movs	r3, #2
 80055cc:	e033      	b.n	8005636 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2224      	movs	r2, #36	; 0x24
 80055da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0201 	bic.w	r2, r2, #1
 80055ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80055fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	021b      	lsls	r3, r3, #8
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	e000      	b.n	8005636 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005634:	2302      	movs	r3, #2
  }
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
	...

08005644 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005648:	4b05      	ldr	r3, [pc, #20]	; (8005660 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a04      	ldr	r2, [pc, #16]	; (8005660 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800564e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005652:	6013      	str	r3, [r2, #0]
}
 8005654:	bf00      	nop
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40007000 	.word	0x40007000

08005664 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800566c:	2300      	movs	r3, #0
 800566e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e291      	b.n	8005b9e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 8087 	beq.w	8005796 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005688:	4b96      	ldr	r3, [pc, #600]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f003 030c 	and.w	r3, r3, #12
 8005690:	2b04      	cmp	r3, #4
 8005692:	d00c      	beq.n	80056ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005694:	4b93      	ldr	r3, [pc, #588]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f003 030c 	and.w	r3, r3, #12
 800569c:	2b08      	cmp	r3, #8
 800569e:	d112      	bne.n	80056c6 <HAL_RCC_OscConfig+0x62>
 80056a0:	4b90      	ldr	r3, [pc, #576]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056ac:	d10b      	bne.n	80056c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056ae:	4b8d      	ldr	r3, [pc, #564]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d06c      	beq.n	8005794 <HAL_RCC_OscConfig+0x130>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d168      	bne.n	8005794 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e26b      	b.n	8005b9e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ce:	d106      	bne.n	80056de <HAL_RCC_OscConfig+0x7a>
 80056d0:	4b84      	ldr	r3, [pc, #528]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a83      	ldr	r2, [pc, #524]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 80056d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056da:	6013      	str	r3, [r2, #0]
 80056dc:	e02e      	b.n	800573c <HAL_RCC_OscConfig+0xd8>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10c      	bne.n	8005700 <HAL_RCC_OscConfig+0x9c>
 80056e6:	4b7f      	ldr	r3, [pc, #508]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a7e      	ldr	r2, [pc, #504]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 80056ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	4b7c      	ldr	r3, [pc, #496]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a7b      	ldr	r2, [pc, #492]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 80056f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	e01d      	b.n	800573c <HAL_RCC_OscConfig+0xd8>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005708:	d10c      	bne.n	8005724 <HAL_RCC_OscConfig+0xc0>
 800570a:	4b76      	ldr	r3, [pc, #472]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a75      	ldr	r2, [pc, #468]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 8005710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	4b73      	ldr	r3, [pc, #460]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a72      	ldr	r2, [pc, #456]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 800571c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	e00b      	b.n	800573c <HAL_RCC_OscConfig+0xd8>
 8005724:	4b6f      	ldr	r3, [pc, #444]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a6e      	ldr	r2, [pc, #440]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 800572a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	4b6c      	ldr	r3, [pc, #432]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a6b      	ldr	r2, [pc, #428]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 8005736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800573a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d013      	beq.n	800576c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005744:	f7ff fad6 	bl	8004cf4 <HAL_GetTick>
 8005748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800574a:	e008      	b.n	800575e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800574c:	f7ff fad2 	bl	8004cf4 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b64      	cmp	r3, #100	; 0x64
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e21f      	b.n	8005b9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800575e:	4b61      	ldr	r3, [pc, #388]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0f0      	beq.n	800574c <HAL_RCC_OscConfig+0xe8>
 800576a:	e014      	b.n	8005796 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576c:	f7ff fac2 	bl	8004cf4 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005774:	f7ff fabe 	bl	8004cf4 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b64      	cmp	r3, #100	; 0x64
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e20b      	b.n	8005b9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005786:	4b57      	ldr	r3, [pc, #348]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f0      	bne.n	8005774 <HAL_RCC_OscConfig+0x110>
 8005792:	e000      	b.n	8005796 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d069      	beq.n	8005876 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057a2:	4b50      	ldr	r3, [pc, #320]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 030c 	and.w	r3, r3, #12
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00b      	beq.n	80057c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057ae:	4b4d      	ldr	r3, [pc, #308]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 030c 	and.w	r3, r3, #12
 80057b6:	2b08      	cmp	r3, #8
 80057b8:	d11c      	bne.n	80057f4 <HAL_RCC_OscConfig+0x190>
 80057ba:	4b4a      	ldr	r3, [pc, #296]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d116      	bne.n	80057f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057c6:	4b47      	ldr	r3, [pc, #284]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <HAL_RCC_OscConfig+0x17a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d001      	beq.n	80057de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e1df      	b.n	8005b9e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057de:	4b41      	ldr	r3, [pc, #260]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	493d      	ldr	r1, [pc, #244]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057f2:	e040      	b.n	8005876 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d023      	beq.n	8005844 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057fc:	4b39      	ldr	r3, [pc, #228]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a38      	ldr	r2, [pc, #224]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 8005802:	f043 0301 	orr.w	r3, r3, #1
 8005806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005808:	f7ff fa74 	bl	8004cf4 <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005810:	f7ff fa70 	bl	8004cf4 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e1bd      	b.n	8005b9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005822:	4b30      	ldr	r3, [pc, #192]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d0f0      	beq.n	8005810 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800582e:	4b2d      	ldr	r3, [pc, #180]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	4929      	ldr	r1, [pc, #164]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 800583e:	4313      	orrs	r3, r2
 8005840:	600b      	str	r3, [r1, #0]
 8005842:	e018      	b.n	8005876 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005844:	4b27      	ldr	r3, [pc, #156]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a26      	ldr	r2, [pc, #152]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 800584a:	f023 0301 	bic.w	r3, r3, #1
 800584e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005850:	f7ff fa50 	bl	8004cf4 <HAL_GetTick>
 8005854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005858:	f7ff fa4c 	bl	8004cf4 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e199      	b.n	8005b9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800586a:	4b1e      	ldr	r3, [pc, #120]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f0      	bne.n	8005858 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0308 	and.w	r3, r3, #8
 800587e:	2b00      	cmp	r3, #0
 8005880:	d038      	beq.n	80058f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d019      	beq.n	80058be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800588a:	4b16      	ldr	r3, [pc, #88]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 800588c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800588e:	4a15      	ldr	r2, [pc, #84]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 8005890:	f043 0301 	orr.w	r3, r3, #1
 8005894:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005896:	f7ff fa2d 	bl	8004cf4 <HAL_GetTick>
 800589a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800589c:	e008      	b.n	80058b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800589e:	f7ff fa29 	bl	8004cf4 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e176      	b.n	8005b9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058b0:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 80058b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d0f0      	beq.n	800589e <HAL_RCC_OscConfig+0x23a>
 80058bc:	e01a      	b.n	80058f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058be:	4b09      	ldr	r3, [pc, #36]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 80058c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058c2:	4a08      	ldr	r2, [pc, #32]	; (80058e4 <HAL_RCC_OscConfig+0x280>)
 80058c4:	f023 0301 	bic.w	r3, r3, #1
 80058c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ca:	f7ff fa13 	bl	8004cf4 <HAL_GetTick>
 80058ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058d0:	e00a      	b.n	80058e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058d2:	f7ff fa0f 	bl	8004cf4 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d903      	bls.n	80058e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e15c      	b.n	8005b9e <HAL_RCC_OscConfig+0x53a>
 80058e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058e8:	4b91      	ldr	r3, [pc, #580]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 80058ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1ee      	bne.n	80058d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 80a4 	beq.w	8005a4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005902:	4b8b      	ldr	r3, [pc, #556]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10d      	bne.n	800592a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800590e:	4b88      	ldr	r3, [pc, #544]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	4a87      	ldr	r2, [pc, #540]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005918:	6413      	str	r3, [r2, #64]	; 0x40
 800591a:	4b85      	ldr	r3, [pc, #532]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005922:	60bb      	str	r3, [r7, #8]
 8005924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005926:	2301      	movs	r3, #1
 8005928:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800592a:	4b82      	ldr	r3, [pc, #520]	; (8005b34 <HAL_RCC_OscConfig+0x4d0>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005932:	2b00      	cmp	r3, #0
 8005934:	d118      	bne.n	8005968 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005936:	4b7f      	ldr	r3, [pc, #508]	; (8005b34 <HAL_RCC_OscConfig+0x4d0>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a7e      	ldr	r2, [pc, #504]	; (8005b34 <HAL_RCC_OscConfig+0x4d0>)
 800593c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005942:	f7ff f9d7 	bl	8004cf4 <HAL_GetTick>
 8005946:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005948:	e008      	b.n	800595c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800594a:	f7ff f9d3 	bl	8004cf4 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	2b64      	cmp	r3, #100	; 0x64
 8005956:	d901      	bls.n	800595c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e120      	b.n	8005b9e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800595c:	4b75      	ldr	r3, [pc, #468]	; (8005b34 <HAL_RCC_OscConfig+0x4d0>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0f0      	beq.n	800594a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d106      	bne.n	800597e <HAL_RCC_OscConfig+0x31a>
 8005970:	4b6f      	ldr	r3, [pc, #444]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005974:	4a6e      	ldr	r2, [pc, #440]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005976:	f043 0301 	orr.w	r3, r3, #1
 800597a:	6713      	str	r3, [r2, #112]	; 0x70
 800597c:	e02d      	b.n	80059da <HAL_RCC_OscConfig+0x376>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10c      	bne.n	80059a0 <HAL_RCC_OscConfig+0x33c>
 8005986:	4b6a      	ldr	r3, [pc, #424]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598a:	4a69      	ldr	r2, [pc, #420]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 800598c:	f023 0301 	bic.w	r3, r3, #1
 8005990:	6713      	str	r3, [r2, #112]	; 0x70
 8005992:	4b67      	ldr	r3, [pc, #412]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005996:	4a66      	ldr	r2, [pc, #408]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005998:	f023 0304 	bic.w	r3, r3, #4
 800599c:	6713      	str	r3, [r2, #112]	; 0x70
 800599e:	e01c      	b.n	80059da <HAL_RCC_OscConfig+0x376>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	2b05      	cmp	r3, #5
 80059a6:	d10c      	bne.n	80059c2 <HAL_RCC_OscConfig+0x35e>
 80059a8:	4b61      	ldr	r3, [pc, #388]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 80059aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ac:	4a60      	ldr	r2, [pc, #384]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 80059ae:	f043 0304 	orr.w	r3, r3, #4
 80059b2:	6713      	str	r3, [r2, #112]	; 0x70
 80059b4:	4b5e      	ldr	r3, [pc, #376]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 80059b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b8:	4a5d      	ldr	r2, [pc, #372]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 80059ba:	f043 0301 	orr.w	r3, r3, #1
 80059be:	6713      	str	r3, [r2, #112]	; 0x70
 80059c0:	e00b      	b.n	80059da <HAL_RCC_OscConfig+0x376>
 80059c2:	4b5b      	ldr	r3, [pc, #364]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 80059c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c6:	4a5a      	ldr	r2, [pc, #360]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 80059c8:	f023 0301 	bic.w	r3, r3, #1
 80059cc:	6713      	str	r3, [r2, #112]	; 0x70
 80059ce:	4b58      	ldr	r3, [pc, #352]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 80059d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d2:	4a57      	ldr	r2, [pc, #348]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 80059d4:	f023 0304 	bic.w	r3, r3, #4
 80059d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d015      	beq.n	8005a0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e2:	f7ff f987 	bl	8004cf4 <HAL_GetTick>
 80059e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e8:	e00a      	b.n	8005a00 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ea:	f7ff f983 	bl	8004cf4 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d901      	bls.n	8005a00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e0ce      	b.n	8005b9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a00:	4b4b      	ldr	r3, [pc, #300]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0ee      	beq.n	80059ea <HAL_RCC_OscConfig+0x386>
 8005a0c:	e014      	b.n	8005a38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a0e:	f7ff f971 	bl	8004cf4 <HAL_GetTick>
 8005a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a14:	e00a      	b.n	8005a2c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a16:	f7ff f96d 	bl	8004cf4 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d901      	bls.n	8005a2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e0b8      	b.n	8005b9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a2c:	4b40      	ldr	r3, [pc, #256]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1ee      	bne.n	8005a16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a38:	7dfb      	ldrb	r3, [r7, #23]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d105      	bne.n	8005a4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a3e:	4b3c      	ldr	r3, [pc, #240]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	4a3b      	ldr	r2, [pc, #236]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 80a4 	beq.w	8005b9c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a54:	4b36      	ldr	r3, [pc, #216]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 030c 	and.w	r3, r3, #12
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d06b      	beq.n	8005b38 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d149      	bne.n	8005afc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a68:	4b31      	ldr	r3, [pc, #196]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a30      	ldr	r2, [pc, #192]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005a6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a74:	f7ff f93e 	bl	8004cf4 <HAL_GetTick>
 8005a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a7c:	f7ff f93a 	bl	8004cf4 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e087      	b.n	8005b9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a8e:	4b28      	ldr	r3, [pc, #160]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1f0      	bne.n	8005a7c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	69da      	ldr	r2, [r3, #28]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	019b      	lsls	r3, r3, #6
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab0:	085b      	lsrs	r3, r3, #1
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	041b      	lsls	r3, r3, #16
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	061b      	lsls	r3, r3, #24
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	4a1b      	ldr	r2, [pc, #108]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005ac2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ac6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ac8:	4b19      	ldr	r3, [pc, #100]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a18      	ldr	r2, [pc, #96]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad4:	f7ff f90e 	bl	8004cf4 <HAL_GetTick>
 8005ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ada:	e008      	b.n	8005aee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005adc:	f7ff f90a 	bl	8004cf4 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e057      	b.n	8005b9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aee:	4b10      	ldr	r3, [pc, #64]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d0f0      	beq.n	8005adc <HAL_RCC_OscConfig+0x478>
 8005afa:	e04f      	b.n	8005b9c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005afc:	4b0c      	ldr	r3, [pc, #48]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a0b      	ldr	r2, [pc, #44]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005b02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b08:	f7ff f8f4 	bl	8004cf4 <HAL_GetTick>
 8005b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b10:	f7ff f8f0 	bl	8004cf4 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e03d      	b.n	8005b9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b22:	4b03      	ldr	r3, [pc, #12]	; (8005b30 <HAL_RCC_OscConfig+0x4cc>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1f0      	bne.n	8005b10 <HAL_RCC_OscConfig+0x4ac>
 8005b2e:	e035      	b.n	8005b9c <HAL_RCC_OscConfig+0x538>
 8005b30:	40023800 	.word	0x40023800
 8005b34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005b38:	4b1b      	ldr	r3, [pc, #108]	; (8005ba8 <HAL_RCC_OscConfig+0x544>)
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d028      	beq.n	8005b98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d121      	bne.n	8005b98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d11a      	bne.n	8005b98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b68:	4013      	ands	r3, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b6e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d111      	bne.n	8005b98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	085b      	lsrs	r3, r3, #1
 8005b80:	3b01      	subs	r3, #1
 8005b82:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d107      	bne.n	8005b98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b92:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d001      	beq.n	8005b9c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e000      	b.n	8005b9e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	40023800 	.word	0x40023800

08005bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e0d0      	b.n	8005d66 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bc4:	4b6a      	ldr	r3, [pc, #424]	; (8005d70 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 030f 	and.w	r3, r3, #15
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d910      	bls.n	8005bf4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bd2:	4b67      	ldr	r3, [pc, #412]	; (8005d70 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f023 020f 	bic.w	r2, r3, #15
 8005bda:	4965      	ldr	r1, [pc, #404]	; (8005d70 <HAL_RCC_ClockConfig+0x1c4>)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005be2:	4b63      	ldr	r3, [pc, #396]	; (8005d70 <HAL_RCC_ClockConfig+0x1c4>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d001      	beq.n	8005bf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e0b8      	b.n	8005d66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0302 	and.w	r3, r3, #2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d020      	beq.n	8005c42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d005      	beq.n	8005c18 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c0c:	4b59      	ldr	r3, [pc, #356]	; (8005d74 <HAL_RCC_ClockConfig+0x1c8>)
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	4a58      	ldr	r2, [pc, #352]	; (8005d74 <HAL_RCC_ClockConfig+0x1c8>)
 8005c12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0308 	and.w	r3, r3, #8
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d005      	beq.n	8005c30 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c24:	4b53      	ldr	r3, [pc, #332]	; (8005d74 <HAL_RCC_ClockConfig+0x1c8>)
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	4a52      	ldr	r2, [pc, #328]	; (8005d74 <HAL_RCC_ClockConfig+0x1c8>)
 8005c2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c30:	4b50      	ldr	r3, [pc, #320]	; (8005d74 <HAL_RCC_ClockConfig+0x1c8>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	494d      	ldr	r1, [pc, #308]	; (8005d74 <HAL_RCC_ClockConfig+0x1c8>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d040      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d107      	bne.n	8005c66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c56:	4b47      	ldr	r3, [pc, #284]	; (8005d74 <HAL_RCC_ClockConfig+0x1c8>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d115      	bne.n	8005c8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e07f      	b.n	8005d66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d107      	bne.n	8005c7e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c6e:	4b41      	ldr	r3, [pc, #260]	; (8005d74 <HAL_RCC_ClockConfig+0x1c8>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d109      	bne.n	8005c8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e073      	b.n	8005d66 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c7e:	4b3d      	ldr	r3, [pc, #244]	; (8005d74 <HAL_RCC_ClockConfig+0x1c8>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e06b      	b.n	8005d66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c8e:	4b39      	ldr	r3, [pc, #228]	; (8005d74 <HAL_RCC_ClockConfig+0x1c8>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f023 0203 	bic.w	r2, r3, #3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	4936      	ldr	r1, [pc, #216]	; (8005d74 <HAL_RCC_ClockConfig+0x1c8>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca0:	f7ff f828 	bl	8004cf4 <HAL_GetTick>
 8005ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca6:	e00a      	b.n	8005cbe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca8:	f7ff f824 	bl	8004cf4 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e053      	b.n	8005d66 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cbe:	4b2d      	ldr	r3, [pc, #180]	; (8005d74 <HAL_RCC_ClockConfig+0x1c8>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 020c 	and.w	r2, r3, #12
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d1eb      	bne.n	8005ca8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cd0:	4b27      	ldr	r3, [pc, #156]	; (8005d70 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d210      	bcs.n	8005d00 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cde:	4b24      	ldr	r3, [pc, #144]	; (8005d70 <HAL_RCC_ClockConfig+0x1c4>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f023 020f 	bic.w	r2, r3, #15
 8005ce6:	4922      	ldr	r1, [pc, #136]	; (8005d70 <HAL_RCC_ClockConfig+0x1c4>)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cee:	4b20      	ldr	r3, [pc, #128]	; (8005d70 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 030f 	and.w	r3, r3, #15
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d001      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e032      	b.n	8005d66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d008      	beq.n	8005d1e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d0c:	4b19      	ldr	r3, [pc, #100]	; (8005d74 <HAL_RCC_ClockConfig+0x1c8>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	4916      	ldr	r1, [pc, #88]	; (8005d74 <HAL_RCC_ClockConfig+0x1c8>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d009      	beq.n	8005d3e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d2a:	4b12      	ldr	r3, [pc, #72]	; (8005d74 <HAL_RCC_ClockConfig+0x1c8>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	490e      	ldr	r1, [pc, #56]	; (8005d74 <HAL_RCC_ClockConfig+0x1c8>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d3e:	f000 f821 	bl	8005d84 <HAL_RCC_GetSysClockFreq>
 8005d42:	4602      	mov	r2, r0
 8005d44:	4b0b      	ldr	r3, [pc, #44]	; (8005d74 <HAL_RCC_ClockConfig+0x1c8>)
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	091b      	lsrs	r3, r3, #4
 8005d4a:	f003 030f 	and.w	r3, r3, #15
 8005d4e:	490a      	ldr	r1, [pc, #40]	; (8005d78 <HAL_RCC_ClockConfig+0x1cc>)
 8005d50:	5ccb      	ldrb	r3, [r1, r3]
 8005d52:	fa22 f303 	lsr.w	r3, r2, r3
 8005d56:	4a09      	ldr	r2, [pc, #36]	; (8005d7c <HAL_RCC_ClockConfig+0x1d0>)
 8005d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d5a:	4b09      	ldr	r3, [pc, #36]	; (8005d80 <HAL_RCC_ClockConfig+0x1d4>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fe ff84 	bl	8004c6c <HAL_InitTick>

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	40023c00 	.word	0x40023c00
 8005d74:	40023800 	.word	0x40023800
 8005d78:	0800ace4 	.word	0x0800ace4
 8005d7c:	20000128 	.word	0x20000128
 8005d80:	2000012c 	.word	0x2000012c

08005d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d88:	b094      	sub	sp, #80	; 0x50
 8005d8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d90:	2300      	movs	r3, #0
 8005d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d94:	2300      	movs	r3, #0
 8005d96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d9c:	4b79      	ldr	r3, [pc, #484]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 030c 	and.w	r3, r3, #12
 8005da4:	2b08      	cmp	r3, #8
 8005da6:	d00d      	beq.n	8005dc4 <HAL_RCC_GetSysClockFreq+0x40>
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	f200 80e1 	bhi.w	8005f70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <HAL_RCC_GetSysClockFreq+0x34>
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d003      	beq.n	8005dbe <HAL_RCC_GetSysClockFreq+0x3a>
 8005db6:	e0db      	b.n	8005f70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005db8:	4b73      	ldr	r3, [pc, #460]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x204>)
 8005dba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005dbc:	e0db      	b.n	8005f76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005dbe:	4b73      	ldr	r3, [pc, #460]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x208>)
 8005dc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005dc2:	e0d8      	b.n	8005f76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005dc4:	4b6f      	ldr	r3, [pc, #444]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dcc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005dce:	4b6d      	ldr	r3, [pc, #436]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d063      	beq.n	8005ea2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dda:	4b6a      	ldr	r3, [pc, #424]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	099b      	lsrs	r3, r3, #6
 8005de0:	2200      	movs	r2, #0
 8005de2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005de4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dec:	633b      	str	r3, [r7, #48]	; 0x30
 8005dee:	2300      	movs	r3, #0
 8005df0:	637b      	str	r3, [r7, #52]	; 0x34
 8005df2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005df6:	4622      	mov	r2, r4
 8005df8:	462b      	mov	r3, r5
 8005dfa:	f04f 0000 	mov.w	r0, #0
 8005dfe:	f04f 0100 	mov.w	r1, #0
 8005e02:	0159      	lsls	r1, r3, #5
 8005e04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e08:	0150      	lsls	r0, r2, #5
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4621      	mov	r1, r4
 8005e10:	1a51      	subs	r1, r2, r1
 8005e12:	6139      	str	r1, [r7, #16]
 8005e14:	4629      	mov	r1, r5
 8005e16:	eb63 0301 	sbc.w	r3, r3, r1
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	f04f 0200 	mov.w	r2, #0
 8005e20:	f04f 0300 	mov.w	r3, #0
 8005e24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e28:	4659      	mov	r1, fp
 8005e2a:	018b      	lsls	r3, r1, #6
 8005e2c:	4651      	mov	r1, sl
 8005e2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e32:	4651      	mov	r1, sl
 8005e34:	018a      	lsls	r2, r1, #6
 8005e36:	4651      	mov	r1, sl
 8005e38:	ebb2 0801 	subs.w	r8, r2, r1
 8005e3c:	4659      	mov	r1, fp
 8005e3e:	eb63 0901 	sbc.w	r9, r3, r1
 8005e42:	f04f 0200 	mov.w	r2, #0
 8005e46:	f04f 0300 	mov.w	r3, #0
 8005e4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e56:	4690      	mov	r8, r2
 8005e58:	4699      	mov	r9, r3
 8005e5a:	4623      	mov	r3, r4
 8005e5c:	eb18 0303 	adds.w	r3, r8, r3
 8005e60:	60bb      	str	r3, [r7, #8]
 8005e62:	462b      	mov	r3, r5
 8005e64:	eb49 0303 	adc.w	r3, r9, r3
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	f04f 0200 	mov.w	r2, #0
 8005e6e:	f04f 0300 	mov.w	r3, #0
 8005e72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e76:	4629      	mov	r1, r5
 8005e78:	024b      	lsls	r3, r1, #9
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e80:	4621      	mov	r1, r4
 8005e82:	024a      	lsls	r2, r1, #9
 8005e84:	4610      	mov	r0, r2
 8005e86:	4619      	mov	r1, r3
 8005e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e94:	f7fa fef2 	bl	8000c7c <__aeabi_uldivmod>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ea0:	e058      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ea2:	4b38      	ldr	r3, [pc, #224]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	099b      	lsrs	r3, r3, #6
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	4618      	mov	r0, r3
 8005eac:	4611      	mov	r1, r2
 8005eae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005eb2:	623b      	str	r3, [r7, #32]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ebc:	4642      	mov	r2, r8
 8005ebe:	464b      	mov	r3, r9
 8005ec0:	f04f 0000 	mov.w	r0, #0
 8005ec4:	f04f 0100 	mov.w	r1, #0
 8005ec8:	0159      	lsls	r1, r3, #5
 8005eca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ece:	0150      	lsls	r0, r2, #5
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4641      	mov	r1, r8
 8005ed6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005eda:	4649      	mov	r1, r9
 8005edc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ee0:	f04f 0200 	mov.w	r2, #0
 8005ee4:	f04f 0300 	mov.w	r3, #0
 8005ee8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005eec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ef0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ef4:	ebb2 040a 	subs.w	r4, r2, sl
 8005ef8:	eb63 050b 	sbc.w	r5, r3, fp
 8005efc:	f04f 0200 	mov.w	r2, #0
 8005f00:	f04f 0300 	mov.w	r3, #0
 8005f04:	00eb      	lsls	r3, r5, #3
 8005f06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f0a:	00e2      	lsls	r2, r4, #3
 8005f0c:	4614      	mov	r4, r2
 8005f0e:	461d      	mov	r5, r3
 8005f10:	4643      	mov	r3, r8
 8005f12:	18e3      	adds	r3, r4, r3
 8005f14:	603b      	str	r3, [r7, #0]
 8005f16:	464b      	mov	r3, r9
 8005f18:	eb45 0303 	adc.w	r3, r5, r3
 8005f1c:	607b      	str	r3, [r7, #4]
 8005f1e:	f04f 0200 	mov.w	r2, #0
 8005f22:	f04f 0300 	mov.w	r3, #0
 8005f26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f2a:	4629      	mov	r1, r5
 8005f2c:	028b      	lsls	r3, r1, #10
 8005f2e:	4621      	mov	r1, r4
 8005f30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f34:	4621      	mov	r1, r4
 8005f36:	028a      	lsls	r2, r1, #10
 8005f38:	4610      	mov	r0, r2
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f3e:	2200      	movs	r2, #0
 8005f40:	61bb      	str	r3, [r7, #24]
 8005f42:	61fa      	str	r2, [r7, #28]
 8005f44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f48:	f7fa fe98 	bl	8000c7c <__aeabi_uldivmod>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4613      	mov	r3, r2
 8005f52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005f54:	4b0b      	ldr	r3, [pc, #44]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	0c1b      	lsrs	r3, r3, #16
 8005f5a:	f003 0303 	and.w	r3, r3, #3
 8005f5e:	3301      	adds	r3, #1
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005f64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f6e:	e002      	b.n	8005f76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f70:	4b05      	ldr	r3, [pc, #20]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3750      	adds	r7, #80	; 0x50
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f82:	bf00      	nop
 8005f84:	40023800 	.word	0x40023800
 8005f88:	00f42400 	.word	0x00f42400
 8005f8c:	007a1200 	.word	0x007a1200

08005f90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f90:	b480      	push	{r7}
 8005f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f94:	4b03      	ldr	r3, [pc, #12]	; (8005fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f96:	681b      	ldr	r3, [r3, #0]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	20000128 	.word	0x20000128

08005fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fac:	f7ff fff0 	bl	8005f90 <HAL_RCC_GetHCLKFreq>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	4b05      	ldr	r3, [pc, #20]	; (8005fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	0a9b      	lsrs	r3, r3, #10
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	4903      	ldr	r1, [pc, #12]	; (8005fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fbe:	5ccb      	ldrb	r3, [r1, r3]
 8005fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	40023800 	.word	0x40023800
 8005fcc:	0800acf4 	.word	0x0800acf4

08005fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005fd4:	f7ff ffdc 	bl	8005f90 <HAL_RCC_GetHCLKFreq>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	0b5b      	lsrs	r3, r3, #13
 8005fe0:	f003 0307 	and.w	r3, r3, #7
 8005fe4:	4903      	ldr	r1, [pc, #12]	; (8005ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fe6:	5ccb      	ldrb	r3, [r1, r3]
 8005fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	40023800 	.word	0x40023800
 8005ff4:	0800acf4 	.word	0x0800acf4

08005ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b088      	sub	sp, #32
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006000:	2300      	movs	r3, #0
 8006002:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006004:	2300      	movs	r3, #0
 8006006:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006010:	2300      	movs	r3, #0
 8006012:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d012      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006020:	4b69      	ldr	r3, [pc, #420]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	4a68      	ldr	r2, [pc, #416]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006026:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800602a:	6093      	str	r3, [r2, #8]
 800602c:	4b66      	ldr	r3, [pc, #408]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800602e:	689a      	ldr	r2, [r3, #8]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006034:	4964      	ldr	r1, [pc, #400]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006036:	4313      	orrs	r3, r2
 8006038:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006042:	2301      	movs	r3, #1
 8006044:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d017      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006052:	4b5d      	ldr	r3, [pc, #372]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006058:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006060:	4959      	ldr	r1, [pc, #356]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006062:	4313      	orrs	r3, r2
 8006064:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006070:	d101      	bne.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006072:	2301      	movs	r3, #1
 8006074:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800607e:	2301      	movs	r3, #1
 8006080:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d017      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800608e:	4b4e      	ldr	r3, [pc, #312]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006094:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609c:	494a      	ldr	r1, [pc, #296]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060ac:	d101      	bne.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80060ae:	2301      	movs	r3, #1
 80060b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80060ba:	2301      	movs	r3, #1
 80060bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80060ca:	2301      	movs	r3, #1
 80060cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0320 	and.w	r3, r3, #32
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 808b 	beq.w	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80060dc:	4b3a      	ldr	r3, [pc, #232]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e0:	4a39      	ldr	r2, [pc, #228]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e6:	6413      	str	r3, [r2, #64]	; 0x40
 80060e8:	4b37      	ldr	r3, [pc, #220]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060f0:	60bb      	str	r3, [r7, #8]
 80060f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80060f4:	4b35      	ldr	r3, [pc, #212]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a34      	ldr	r2, [pc, #208]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006100:	f7fe fdf8 	bl	8004cf4 <HAL_GetTick>
 8006104:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006106:	e008      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006108:	f7fe fdf4 	bl	8004cf4 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b64      	cmp	r3, #100	; 0x64
 8006114:	d901      	bls.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e357      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800611a:	4b2c      	ldr	r3, [pc, #176]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0f0      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006126:	4b28      	ldr	r3, [pc, #160]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800612e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d035      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	429a      	cmp	r2, r3
 8006142:	d02e      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006144:	4b20      	ldr	r3, [pc, #128]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800614c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800614e:	4b1e      	ldr	r3, [pc, #120]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006152:	4a1d      	ldr	r2, [pc, #116]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006158:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800615a:	4b1b      	ldr	r3, [pc, #108]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800615c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615e:	4a1a      	ldr	r2, [pc, #104]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006164:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006166:	4a18      	ldr	r2, [pc, #96]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800616c:	4b16      	ldr	r3, [pc, #88]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800616e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b01      	cmp	r3, #1
 8006176:	d114      	bne.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006178:	f7fe fdbc 	bl	8004cf4 <HAL_GetTick>
 800617c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800617e:	e00a      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006180:	f7fe fdb8 	bl	8004cf4 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	f241 3288 	movw	r2, #5000	; 0x1388
 800618e:	4293      	cmp	r3, r2
 8006190:	d901      	bls.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e319      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006196:	4b0c      	ldr	r3, [pc, #48]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0ee      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061ae:	d111      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80061b0:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80061bc:	4b04      	ldr	r3, [pc, #16]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80061be:	400b      	ands	r3, r1
 80061c0:	4901      	ldr	r1, [pc, #4]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	608b      	str	r3, [r1, #8]
 80061c6:	e00b      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80061c8:	40023800 	.word	0x40023800
 80061cc:	40007000 	.word	0x40007000
 80061d0:	0ffffcff 	.word	0x0ffffcff
 80061d4:	4baa      	ldr	r3, [pc, #680]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	4aa9      	ldr	r2, [pc, #676]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80061de:	6093      	str	r3, [r2, #8]
 80061e0:	4ba7      	ldr	r3, [pc, #668]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ec:	49a4      	ldr	r1, [pc, #656]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0310 	and.w	r3, r3, #16
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d010      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061fe:	4ba0      	ldr	r3, [pc, #640]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006204:	4a9e      	ldr	r2, [pc, #632]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800620a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800620e:	4b9c      	ldr	r3, [pc, #624]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006210:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006218:	4999      	ldr	r1, [pc, #612]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800621a:	4313      	orrs	r3, r2
 800621c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00a      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800622c:	4b94      	ldr	r3, [pc, #592]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800622e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006232:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800623a:	4991      	ldr	r1, [pc, #580]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800623c:	4313      	orrs	r3, r2
 800623e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800624e:	4b8c      	ldr	r3, [pc, #560]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006254:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800625c:	4988      	ldr	r1, [pc, #544]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800625e:	4313      	orrs	r3, r2
 8006260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00a      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006270:	4b83      	ldr	r3, [pc, #524]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006276:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800627e:	4980      	ldr	r1, [pc, #512]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006280:	4313      	orrs	r3, r2
 8006282:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00a      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006292:	4b7b      	ldr	r3, [pc, #492]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006298:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a0:	4977      	ldr	r1, [pc, #476]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00a      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062b4:	4b72      	ldr	r3, [pc, #456]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ba:	f023 0203 	bic.w	r2, r3, #3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c2:	496f      	ldr	r1, [pc, #444]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00a      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062d6:	4b6a      	ldr	r3, [pc, #424]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062dc:	f023 020c 	bic.w	r2, r3, #12
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062e4:	4966      	ldr	r1, [pc, #408]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00a      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062f8:	4b61      	ldr	r3, [pc, #388]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006306:	495e      	ldr	r1, [pc, #376]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006308:	4313      	orrs	r3, r2
 800630a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00a      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800631a:	4b59      	ldr	r3, [pc, #356]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800631c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006320:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006328:	4955      	ldr	r1, [pc, #340]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800632a:	4313      	orrs	r3, r2
 800632c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00a      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800633c:	4b50      	ldr	r3, [pc, #320]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800633e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006342:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634a:	494d      	ldr	r1, [pc, #308]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800634c:	4313      	orrs	r3, r2
 800634e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800635e:	4b48      	ldr	r3, [pc, #288]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006364:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800636c:	4944      	ldr	r1, [pc, #272]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800636e:	4313      	orrs	r3, r2
 8006370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00a      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006380:	4b3f      	ldr	r3, [pc, #252]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006386:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638e:	493c      	ldr	r1, [pc, #240]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006390:	4313      	orrs	r3, r2
 8006392:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80063a2:	4b37      	ldr	r3, [pc, #220]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b0:	4933      	ldr	r1, [pc, #204]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00a      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80063c4:	4b2e      	ldr	r3, [pc, #184]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063d2:	492b      	ldr	r1, [pc, #172]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d011      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80063e6:	4b26      	ldr	r3, [pc, #152]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063f4:	4922      	ldr	r1, [pc, #136]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006404:	d101      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006406:	2301      	movs	r3, #1
 8006408:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0308 	and.w	r3, r3, #8
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006416:	2301      	movs	r3, #1
 8006418:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006426:	4b16      	ldr	r3, [pc, #88]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800642c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006434:	4912      	ldr	r1, [pc, #72]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006436:	4313      	orrs	r3, r2
 8006438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00b      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006448:	4b0d      	ldr	r3, [pc, #52]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800644a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006458:	4909      	ldr	r1, [pc, #36]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800645a:	4313      	orrs	r3, r2
 800645c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d006      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 80d9 	beq.w	8006626 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006474:	4b02      	ldr	r3, [pc, #8]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a01      	ldr	r2, [pc, #4]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800647a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800647e:	e001      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006480:	40023800 	.word	0x40023800
 8006484:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006486:	f7fe fc35 	bl	8004cf4 <HAL_GetTick>
 800648a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800648c:	e008      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800648e:	f7fe fc31 	bl	8004cf4 <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	2b64      	cmp	r3, #100	; 0x64
 800649a:	d901      	bls.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e194      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064a0:	4b6c      	ldr	r3, [pc, #432]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1f0      	bne.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d021      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x504>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d11d      	bne.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80064c0:	4b64      	ldr	r3, [pc, #400]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064c6:	0c1b      	lsrs	r3, r3, #16
 80064c8:	f003 0303 	and.w	r3, r3, #3
 80064cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80064ce:	4b61      	ldr	r3, [pc, #388]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064d4:	0e1b      	lsrs	r3, r3, #24
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	019a      	lsls	r2, r3, #6
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	041b      	lsls	r3, r3, #16
 80064e6:	431a      	orrs	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	061b      	lsls	r3, r3, #24
 80064ec:	431a      	orrs	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	071b      	lsls	r3, r3, #28
 80064f4:	4957      	ldr	r1, [pc, #348]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d004      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006510:	d00a      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800651a:	2b00      	cmp	r3, #0
 800651c:	d02e      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006526:	d129      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006528:	4b4a      	ldr	r3, [pc, #296]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800652a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800652e:	0c1b      	lsrs	r3, r3, #16
 8006530:	f003 0303 	and.w	r3, r3, #3
 8006534:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006536:	4b47      	ldr	r3, [pc, #284]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800653c:	0f1b      	lsrs	r3, r3, #28
 800653e:	f003 0307 	and.w	r3, r3, #7
 8006542:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	019a      	lsls	r2, r3, #6
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	041b      	lsls	r3, r3, #16
 800654e:	431a      	orrs	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	061b      	lsls	r3, r3, #24
 8006556:	431a      	orrs	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	071b      	lsls	r3, r3, #28
 800655c:	493d      	ldr	r1, [pc, #244]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800655e:	4313      	orrs	r3, r2
 8006560:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006564:	4b3b      	ldr	r3, [pc, #236]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800656a:	f023 021f 	bic.w	r2, r3, #31
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006572:	3b01      	subs	r3, #1
 8006574:	4937      	ldr	r1, [pc, #220]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006576:	4313      	orrs	r3, r2
 8006578:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01d      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006588:	4b32      	ldr	r3, [pc, #200]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800658a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800658e:	0e1b      	lsrs	r3, r3, #24
 8006590:	f003 030f 	and.w	r3, r3, #15
 8006594:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006596:	4b2f      	ldr	r3, [pc, #188]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800659c:	0f1b      	lsrs	r3, r3, #28
 800659e:	f003 0307 	and.w	r3, r3, #7
 80065a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	019a      	lsls	r2, r3, #6
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	041b      	lsls	r3, r3, #16
 80065b0:	431a      	orrs	r2, r3
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	061b      	lsls	r3, r3, #24
 80065b6:	431a      	orrs	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	071b      	lsls	r3, r3, #28
 80065bc:	4925      	ldr	r1, [pc, #148]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d011      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	019a      	lsls	r2, r3, #6
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	041b      	lsls	r3, r3, #16
 80065dc:	431a      	orrs	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	061b      	lsls	r3, r3, #24
 80065e4:	431a      	orrs	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	071b      	lsls	r3, r3, #28
 80065ec:	4919      	ldr	r1, [pc, #100]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80065f4:	4b17      	ldr	r3, [pc, #92]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a16      	ldr	r2, [pc, #88]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006600:	f7fe fb78 	bl	8004cf4 <HAL_GetTick>
 8006604:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006606:	e008      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006608:	f7fe fb74 	bl	8004cf4 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b64      	cmp	r3, #100	; 0x64
 8006614:	d901      	bls.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e0d7      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800661a:	4b0e      	ldr	r3, [pc, #56]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0f0      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	2b01      	cmp	r3, #1
 800662a:	f040 80cd 	bne.w	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800662e:	4b09      	ldr	r3, [pc, #36]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a08      	ldr	r2, [pc, #32]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800663a:	f7fe fb5b 	bl	8004cf4 <HAL_GetTick>
 800663e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006640:	e00a      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006642:	f7fe fb57 	bl	8004cf4 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	2b64      	cmp	r3, #100	; 0x64
 800664e:	d903      	bls.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e0ba      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006654:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006658:	4b5e      	ldr	r3, [pc, #376]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006664:	d0ed      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006676:	2b00      	cmp	r3, #0
 8006678:	d009      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006682:	2b00      	cmp	r3, #0
 8006684:	d02e      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668a:	2b00      	cmp	r3, #0
 800668c:	d12a      	bne.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800668e:	4b51      	ldr	r3, [pc, #324]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006694:	0c1b      	lsrs	r3, r3, #16
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800669c:	4b4d      	ldr	r3, [pc, #308]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800669e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a2:	0f1b      	lsrs	r3, r3, #28
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	019a      	lsls	r2, r3, #6
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	041b      	lsls	r3, r3, #16
 80066b4:	431a      	orrs	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	061b      	lsls	r3, r3, #24
 80066bc:	431a      	orrs	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	071b      	lsls	r3, r3, #28
 80066c2:	4944      	ldr	r1, [pc, #272]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80066ca:	4b42      	ldr	r3, [pc, #264]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d8:	3b01      	subs	r3, #1
 80066da:	021b      	lsls	r3, r3, #8
 80066dc:	493d      	ldr	r1, [pc, #244]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d022      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066f8:	d11d      	bne.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80066fa:	4b36      	ldr	r3, [pc, #216]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006700:	0e1b      	lsrs	r3, r3, #24
 8006702:	f003 030f 	and.w	r3, r3, #15
 8006706:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006708:	4b32      	ldr	r3, [pc, #200]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800670a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670e:	0f1b      	lsrs	r3, r3, #28
 8006710:	f003 0307 	and.w	r3, r3, #7
 8006714:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	019a      	lsls	r2, r3, #6
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	041b      	lsls	r3, r3, #16
 8006722:	431a      	orrs	r2, r3
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	061b      	lsls	r3, r3, #24
 8006728:	431a      	orrs	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	071b      	lsls	r3, r3, #28
 800672e:	4929      	ldr	r1, [pc, #164]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006730:	4313      	orrs	r3, r2
 8006732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0308 	and.w	r3, r3, #8
 800673e:	2b00      	cmp	r3, #0
 8006740:	d028      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006742:	4b24      	ldr	r3, [pc, #144]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006748:	0e1b      	lsrs	r3, r3, #24
 800674a:	f003 030f 	and.w	r3, r3, #15
 800674e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006750:	4b20      	ldr	r3, [pc, #128]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006756:	0c1b      	lsrs	r3, r3, #16
 8006758:	f003 0303 	and.w	r3, r3, #3
 800675c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	019a      	lsls	r2, r3, #6
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	041b      	lsls	r3, r3, #16
 8006768:	431a      	orrs	r2, r3
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	061b      	lsls	r3, r3, #24
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	071b      	lsls	r3, r3, #28
 8006776:	4917      	ldr	r1, [pc, #92]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006778:	4313      	orrs	r3, r2
 800677a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800677e:	4b15      	ldr	r3, [pc, #84]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006784:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	4911      	ldr	r1, [pc, #68]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800678e:	4313      	orrs	r3, r2
 8006790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006794:	4b0f      	ldr	r3, [pc, #60]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a0e      	ldr	r2, [pc, #56]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800679a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800679e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067a0:	f7fe faa8 	bl	8004cf4 <HAL_GetTick>
 80067a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067a6:	e008      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80067a8:	f7fe faa4 	bl	8004cf4 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	2b64      	cmp	r3, #100	; 0x64
 80067b4:	d901      	bls.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e007      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067ba:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067c6:	d1ef      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3720      	adds	r7, #32
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	40023800 	.word	0x40023800

080067d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e09d      	b.n	8006926 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d108      	bne.n	8006804 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067fa:	d009      	beq.n	8006810 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	61da      	str	r2, [r3, #28]
 8006802:	e005      	b.n	8006810 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d106      	bne.n	8006830 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7fd fc5c 	bl	80040e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2202      	movs	r2, #2
 8006834:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006846:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006850:	d902      	bls.n	8006858 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006852:	2300      	movs	r3, #0
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	e002      	b.n	800685e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800685c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006866:	d007      	beq.n	8006878 <HAL_SPI_Init+0xa0>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006870:	d002      	beq.n	8006878 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006888:	431a      	orrs	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	431a      	orrs	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	431a      	orrs	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068a6:	431a      	orrs	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068b0:	431a      	orrs	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ba:	ea42 0103 	orr.w	r1, r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	0c1b      	lsrs	r3, r3, #16
 80068d4:	f003 0204 	and.w	r2, r3, #4
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068dc:	f003 0310 	and.w	r3, r3, #16
 80068e0:	431a      	orrs	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e6:	f003 0308 	and.w	r3, r3, #8
 80068ea:	431a      	orrs	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80068f4:	ea42 0103 	orr.w	r1, r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	69da      	ldr	r2, [r3, #28]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006914:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b088      	sub	sp, #32
 8006932:	af00      	add	r7, sp, #0
 8006934:	60f8      	str	r0, [r7, #12]
 8006936:	60b9      	str	r1, [r7, #8]
 8006938:	603b      	str	r3, [r7, #0]
 800693a:	4613      	mov	r3, r2
 800693c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006948:	2b01      	cmp	r3, #1
 800694a:	d101      	bne.n	8006950 <HAL_SPI_Transmit+0x22>
 800694c:	2302      	movs	r3, #2
 800694e:	e158      	b.n	8006c02 <HAL_SPI_Transmit+0x2d4>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006958:	f7fe f9cc 	bl	8004cf4 <HAL_GetTick>
 800695c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800695e:	88fb      	ldrh	r3, [r7, #6]
 8006960:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b01      	cmp	r3, #1
 800696c:	d002      	beq.n	8006974 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800696e:	2302      	movs	r3, #2
 8006970:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006972:	e13d      	b.n	8006bf0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <HAL_SPI_Transmit+0x52>
 800697a:	88fb      	ldrh	r3, [r7, #6]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d102      	bne.n	8006986 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006984:	e134      	b.n	8006bf0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2203      	movs	r2, #3
 800698a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	88fa      	ldrh	r2, [r7, #6]
 800699e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	88fa      	ldrh	r2, [r7, #6]
 80069a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069d0:	d10f      	bne.n	80069f2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fc:	2b40      	cmp	r3, #64	; 0x40
 80069fe:	d007      	beq.n	8006a10 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a18:	d94b      	bls.n	8006ab2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d002      	beq.n	8006a28 <HAL_SPI_Transmit+0xfa>
 8006a22:	8afb      	ldrh	r3, [r7, #22]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d13e      	bne.n	8006aa6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2c:	881a      	ldrh	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a38:	1c9a      	adds	r2, r3, #2
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	3b01      	subs	r3, #1
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a4c:	e02b      	b.n	8006aa6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d112      	bne.n	8006a82 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a60:	881a      	ldrh	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6c:	1c9a      	adds	r2, r3, #2
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a80:	e011      	b.n	8006aa6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a82:	f7fe f937 	bl	8004cf4 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d803      	bhi.n	8006a9a <HAL_SPI_Transmit+0x16c>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a98:	d102      	bne.n	8006aa0 <HAL_SPI_Transmit+0x172>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d102      	bne.n	8006aa6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006aa4:	e0a4      	b.n	8006bf0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1ce      	bne.n	8006a4e <HAL_SPI_Transmit+0x120>
 8006ab0:	e07c      	b.n	8006bac <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d002      	beq.n	8006ac0 <HAL_SPI_Transmit+0x192>
 8006aba:	8afb      	ldrh	r3, [r7, #22]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d170      	bne.n	8006ba2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d912      	bls.n	8006af0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ace:	881a      	ldrh	r2, [r3, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ada:	1c9a      	adds	r2, r3, #2
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	3b02      	subs	r3, #2
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006aee:	e058      	b.n	8006ba2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	330c      	adds	r3, #12
 8006afa:	7812      	ldrb	r2, [r2, #0]
 8006afc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006b16:	e044      	b.n	8006ba2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d12b      	bne.n	8006b7e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d912      	bls.n	8006b56 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b34:	881a      	ldrh	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b40:	1c9a      	adds	r2, r3, #2
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	3b02      	subs	r3, #2
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b54:	e025      	b.n	8006ba2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	330c      	adds	r3, #12
 8006b60:	7812      	ldrb	r2, [r2, #0]
 8006b62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	3b01      	subs	r3, #1
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b7c:	e011      	b.n	8006ba2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b7e:	f7fe f8b9 	bl	8004cf4 <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	683a      	ldr	r2, [r7, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d803      	bhi.n	8006b96 <HAL_SPI_Transmit+0x268>
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b94:	d102      	bne.n	8006b9c <HAL_SPI_Transmit+0x26e>
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d102      	bne.n	8006ba2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ba0:	e026      	b.n	8006bf0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1b5      	bne.n	8006b18 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bac:	69ba      	ldr	r2, [r7, #24]
 8006bae:	6839      	ldr	r1, [r7, #0]
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 fe1b 	bl	80077ec <SPI_EndRxTxTransaction>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d002      	beq.n	8006bc2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2220      	movs	r2, #32
 8006bc0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10a      	bne.n	8006be0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bca:	2300      	movs	r3, #0
 8006bcc:	613b      	str	r3, [r7, #16]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	613b      	str	r3, [r7, #16]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	613b      	str	r3, [r7, #16]
 8006bde:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	77fb      	strb	r3, [r7, #31]
 8006bec:	e000      	b.n	8006bf0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006bee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006c00:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3720      	adds	r7, #32
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b088      	sub	sp, #32
 8006c0e:	af02      	add	r7, sp, #8
 8006c10:	60f8      	str	r0, [r7, #12]
 8006c12:	60b9      	str	r1, [r7, #8]
 8006c14:	603b      	str	r3, [r7, #0]
 8006c16:	4613      	mov	r3, r2
 8006c18:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c26:	d112      	bne.n	8006c4e <HAL_SPI_Receive+0x44>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10e      	bne.n	8006c4e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2204      	movs	r2, #4
 8006c34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006c38:	88fa      	ldrh	r2, [r7, #6]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	68b9      	ldr	r1, [r7, #8]
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f000 f910 	bl	8006e6a <HAL_SPI_TransmitReceive>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	e109      	b.n	8006e62 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d101      	bne.n	8006c5c <HAL_SPI_Receive+0x52>
 8006c58:	2302      	movs	r3, #2
 8006c5a:	e102      	b.n	8006e62 <HAL_SPI_Receive+0x258>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c64:	f7fe f846 	bl	8004cf4 <HAL_GetTick>
 8006c68:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d002      	beq.n	8006c7c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006c76:	2302      	movs	r3, #2
 8006c78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c7a:	e0e9      	b.n	8006e50 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <HAL_SPI_Receive+0x7e>
 8006c82:	88fb      	ldrh	r3, [r7, #6]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d102      	bne.n	8006c8e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c8c:	e0e0      	b.n	8006e50 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2204      	movs	r2, #4
 8006c92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	88fa      	ldrh	r2, [r7, #6]
 8006ca6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	88fa      	ldrh	r2, [r7, #6]
 8006cae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006cd8:	d908      	bls.n	8006cec <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	685a      	ldr	r2, [r3, #4]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ce8:	605a      	str	r2, [r3, #4]
 8006cea:	e007      	b.n	8006cfc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cfa:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d04:	d10f      	bne.n	8006d26 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d24:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d30:	2b40      	cmp	r3, #64	; 0x40
 8006d32:	d007      	beq.n	8006d44 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d42:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d4c:	d867      	bhi.n	8006e1e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006d4e:	e030      	b.n	8006db2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d117      	bne.n	8006d8e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f103 020c 	add.w	r2, r3, #12
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	7812      	ldrb	r2, [r2, #0]
 8006d6c:	b2d2      	uxtb	r2, r2
 8006d6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d74:	1c5a      	adds	r2, r3, #1
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	3b01      	subs	r3, #1
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006d8c:	e011      	b.n	8006db2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d8e:	f7fd ffb1 	bl	8004cf4 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d803      	bhi.n	8006da6 <HAL_SPI_Receive+0x19c>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da4:	d102      	bne.n	8006dac <HAL_SPI_Receive+0x1a2>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d102      	bne.n	8006db2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006db0:	e04e      	b.n	8006e50 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1c8      	bne.n	8006d50 <HAL_SPI_Receive+0x146>
 8006dbe:	e034      	b.n	8006e2a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d115      	bne.n	8006dfa <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68da      	ldr	r2, [r3, #12]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd8:	b292      	uxth	r2, r2
 8006dda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de0:	1c9a      	adds	r2, r3, #2
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	3b01      	subs	r3, #1
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006df8:	e011      	b.n	8006e1e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dfa:	f7fd ff7b 	bl	8004cf4 <HAL_GetTick>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d803      	bhi.n	8006e12 <HAL_SPI_Receive+0x208>
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e10:	d102      	bne.n	8006e18 <HAL_SPI_Receive+0x20e>
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d102      	bne.n	8006e1e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006e1c:	e018      	b.n	8006e50 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1ca      	bne.n	8006dc0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 fc60 	bl	80076f4 <SPI_EndRxTransaction>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d002      	beq.n	8006e40 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	75fb      	strb	r3, [r7, #23]
 8006e4c:	e000      	b.n	8006e50 <HAL_SPI_Receive+0x246>
  }

error :
 8006e4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b08a      	sub	sp, #40	; 0x28
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	60f8      	str	r0, [r7, #12]
 8006e72:	60b9      	str	r1, [r7, #8]
 8006e74:	607a      	str	r2, [r7, #4]
 8006e76:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d101      	bne.n	8006e90 <HAL_SPI_TransmitReceive+0x26>
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	e1fb      	b.n	8007288 <HAL_SPI_TransmitReceive+0x41e>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e98:	f7fd ff2c 	bl	8004cf4 <HAL_GetTick>
 8006e9c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ea4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006eac:	887b      	ldrh	r3, [r7, #2]
 8006eae:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006eb0:	887b      	ldrh	r3, [r7, #2]
 8006eb2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006eb4:	7efb      	ldrb	r3, [r7, #27]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d00e      	beq.n	8006ed8 <HAL_SPI_TransmitReceive+0x6e>
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ec0:	d106      	bne.n	8006ed0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d102      	bne.n	8006ed0 <HAL_SPI_TransmitReceive+0x66>
 8006eca:	7efb      	ldrb	r3, [r7, #27]
 8006ecc:	2b04      	cmp	r3, #4
 8006ece:	d003      	beq.n	8006ed8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006ed6:	e1cd      	b.n	8007274 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d005      	beq.n	8006eea <HAL_SPI_TransmitReceive+0x80>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d002      	beq.n	8006eea <HAL_SPI_TransmitReceive+0x80>
 8006ee4:	887b      	ldrh	r3, [r7, #2]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d103      	bne.n	8006ef2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006ef0:	e1c0      	b.n	8007274 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	d003      	beq.n	8006f06 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2205      	movs	r2, #5
 8006f02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	887a      	ldrh	r2, [r7, #2]
 8006f16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	887a      	ldrh	r2, [r7, #2]
 8006f1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	887a      	ldrh	r2, [r7, #2]
 8006f2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	887a      	ldrh	r2, [r7, #2]
 8006f32:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f48:	d802      	bhi.n	8006f50 <HAL_SPI_TransmitReceive+0xe6>
 8006f4a:	8a3b      	ldrh	r3, [r7, #16]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d908      	bls.n	8006f62 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f5e:	605a      	str	r2, [r3, #4]
 8006f60:	e007      	b.n	8006f72 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f70:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f7c:	2b40      	cmp	r3, #64	; 0x40
 8006f7e:	d007      	beq.n	8006f90 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f98:	d97c      	bls.n	8007094 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <HAL_SPI_TransmitReceive+0x13e>
 8006fa2:	8a7b      	ldrh	r3, [r7, #18]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d169      	bne.n	800707c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fac:	881a      	ldrh	r2, [r3, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb8:	1c9a      	adds	r2, r3, #2
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fcc:	e056      	b.n	800707c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d11b      	bne.n	8007014 <HAL_SPI_TransmitReceive+0x1aa>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d016      	beq.n	8007014 <HAL_SPI_TransmitReceive+0x1aa>
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d113      	bne.n	8007014 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff0:	881a      	ldrh	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffc:	1c9a      	adds	r2, r3, #2
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007006:	b29b      	uxth	r3, r3
 8007008:	3b01      	subs	r3, #1
 800700a:	b29a      	uxth	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007010:	2300      	movs	r3, #0
 8007012:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b01      	cmp	r3, #1
 8007020:	d11c      	bne.n	800705c <HAL_SPI_TransmitReceive+0x1f2>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007028:	b29b      	uxth	r3, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	d016      	beq.n	800705c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68da      	ldr	r2, [r3, #12]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007038:	b292      	uxth	r2, r2
 800703a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007040:	1c9a      	adds	r2, r3, #2
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800704c:	b29b      	uxth	r3, r3
 800704e:	3b01      	subs	r3, #1
 8007050:	b29a      	uxth	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007058:	2301      	movs	r3, #1
 800705a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800705c:	f7fd fe4a 	bl	8004cf4 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007068:	429a      	cmp	r2, r3
 800706a:	d807      	bhi.n	800707c <HAL_SPI_TransmitReceive+0x212>
 800706c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007072:	d003      	beq.n	800707c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800707a:	e0fb      	b.n	8007274 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007080:	b29b      	uxth	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1a3      	bne.n	8006fce <HAL_SPI_TransmitReceive+0x164>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800708c:	b29b      	uxth	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d19d      	bne.n	8006fce <HAL_SPI_TransmitReceive+0x164>
 8007092:	e0df      	b.n	8007254 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <HAL_SPI_TransmitReceive+0x23a>
 800709c:	8a7b      	ldrh	r3, [r7, #18]
 800709e:	2b01      	cmp	r3, #1
 80070a0:	f040 80cb 	bne.w	800723a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d912      	bls.n	80070d4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b2:	881a      	ldrh	r2, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070be:	1c9a      	adds	r2, r3, #2
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	3b02      	subs	r3, #2
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070d2:	e0b2      	b.n	800723a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	330c      	adds	r3, #12
 80070de:	7812      	ldrb	r2, [r2, #0]
 80070e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e6:	1c5a      	adds	r2, r3, #1
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	3b01      	subs	r3, #1
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070fa:	e09e      	b.n	800723a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b02      	cmp	r3, #2
 8007108:	d134      	bne.n	8007174 <HAL_SPI_TransmitReceive+0x30a>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800710e:	b29b      	uxth	r3, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	d02f      	beq.n	8007174 <HAL_SPI_TransmitReceive+0x30a>
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	2b01      	cmp	r3, #1
 8007118:	d12c      	bne.n	8007174 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800711e:	b29b      	uxth	r3, r3
 8007120:	2b01      	cmp	r3, #1
 8007122:	d912      	bls.n	800714a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007128:	881a      	ldrh	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007134:	1c9a      	adds	r2, r3, #2
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800713e:	b29b      	uxth	r3, r3
 8007140:	3b02      	subs	r3, #2
 8007142:	b29a      	uxth	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007148:	e012      	b.n	8007170 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	330c      	adds	r3, #12
 8007154:	7812      	ldrb	r2, [r2, #0]
 8007156:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715c:	1c5a      	adds	r2, r3, #1
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007166:	b29b      	uxth	r3, r3
 8007168:	3b01      	subs	r3, #1
 800716a:	b29a      	uxth	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f003 0301 	and.w	r3, r3, #1
 800717e:	2b01      	cmp	r3, #1
 8007180:	d148      	bne.n	8007214 <HAL_SPI_TransmitReceive+0x3aa>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007188:	b29b      	uxth	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	d042      	beq.n	8007214 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007194:	b29b      	uxth	r3, r3
 8007196:	2b01      	cmp	r3, #1
 8007198:	d923      	bls.n	80071e2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68da      	ldr	r2, [r3, #12]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a4:	b292      	uxth	r2, r2
 80071a6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ac:	1c9a      	adds	r2, r3, #2
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	3b02      	subs	r3, #2
 80071bc:	b29a      	uxth	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d81f      	bhi.n	8007210 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071de:	605a      	str	r2, [r3, #4]
 80071e0:	e016      	b.n	8007210 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f103 020c 	add.w	r2, r3, #12
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	7812      	ldrb	r2, [r2, #0]
 80071f0:	b2d2      	uxtb	r2, r2
 80071f2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007204:	b29b      	uxth	r3, r3
 8007206:	3b01      	subs	r3, #1
 8007208:	b29a      	uxth	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007210:	2301      	movs	r3, #1
 8007212:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007214:	f7fd fd6e 	bl	8004cf4 <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007220:	429a      	cmp	r2, r3
 8007222:	d803      	bhi.n	800722c <HAL_SPI_TransmitReceive+0x3c2>
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722a:	d102      	bne.n	8007232 <HAL_SPI_TransmitReceive+0x3c8>
 800722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722e:	2b00      	cmp	r3, #0
 8007230:	d103      	bne.n	800723a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007238:	e01c      	b.n	8007274 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800723e:	b29b      	uxth	r3, r3
 8007240:	2b00      	cmp	r3, #0
 8007242:	f47f af5b 	bne.w	80070fc <HAL_SPI_TransmitReceive+0x292>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800724c:	b29b      	uxth	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	f47f af54 	bne.w	80070fc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007254:	69fa      	ldr	r2, [r7, #28]
 8007256:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f000 fac7 	bl	80077ec <SPI_EndRxTxTransaction>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d006      	beq.n	8007272 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2220      	movs	r2, #32
 800726e:	661a      	str	r2, [r3, #96]	; 0x60
 8007270:	e000      	b.n	8007274 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007272:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007284:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007288:	4618      	mov	r0, r3
 800728a:	3728      	adds	r7, #40	; 0x28
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b088      	sub	sp, #32
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10e      	bne.n	80072d0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d009      	beq.n	80072d0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d004      	beq.n	80072d0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	4798      	blx	r3
    return;
 80072ce:	e0ce      	b.n	800746e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d009      	beq.n	80072ee <HAL_SPI_IRQHandler+0x5e>
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d004      	beq.n	80072ee <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	4798      	blx	r3
    return;
 80072ec:	e0bf      	b.n	800746e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	f003 0320 	and.w	r3, r3, #32
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10a      	bne.n	800730e <HAL_SPI_IRQHandler+0x7e>
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d105      	bne.n	800730e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 80b0 	beq.w	800746e <HAL_SPI_IRQHandler+0x1de>
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	f003 0320 	and.w	r3, r3, #32
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 80aa 	beq.w	800746e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007320:	2b00      	cmp	r3, #0
 8007322:	d023      	beq.n	800736c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b03      	cmp	r3, #3
 800732e:	d011      	beq.n	8007354 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007334:	f043 0204 	orr.w	r2, r3, #4
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800733c:	2300      	movs	r3, #0
 800733e:	617b      	str	r3, [r7, #20]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	617b      	str	r3, [r7, #20]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	617b      	str	r3, [r7, #20]
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	e00b      	b.n	800736c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007354:	2300      	movs	r3, #0
 8007356:	613b      	str	r3, [r7, #16]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	613b      	str	r3, [r7, #16]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	613b      	str	r3, [r7, #16]
 8007368:	693b      	ldr	r3, [r7, #16]
        return;
 800736a:	e080      	b.n	800746e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	f003 0320 	and.w	r3, r3, #32
 8007372:	2b00      	cmp	r3, #0
 8007374:	d014      	beq.n	80073a0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800737a:	f043 0201 	orr.w	r2, r3, #1
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007382:	2300      	movs	r3, #0
 8007384:	60fb      	str	r3, [r7, #12]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	60fb      	str	r3, [r7, #12]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00c      	beq.n	80073c4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ae:	f043 0208 	orr.w	r2, r3, #8
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80073b6:	2300      	movs	r3, #0
 80073b8:	60bb      	str	r3, [r7, #8]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	60bb      	str	r3, [r7, #8]
 80073c2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d04f      	beq.n	800746c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685a      	ldr	r2, [r3, #4]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80073da:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d104      	bne.n	80073f8 <HAL_SPI_IRQHandler+0x168>
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d034      	beq.n	8007462 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 0203 	bic.w	r2, r2, #3
 8007406:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800740c:	2b00      	cmp	r3, #0
 800740e:	d011      	beq.n	8007434 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007414:	4a17      	ldr	r2, [pc, #92]	; (8007474 <HAL_SPI_IRQHandler+0x1e4>)
 8007416:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741c:	4618      	mov	r0, r3
 800741e:	f7fd fdaa 	bl	8004f76 <HAL_DMA_Abort_IT>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d005      	beq.n	8007434 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800742c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007438:	2b00      	cmp	r3, #0
 800743a:	d016      	beq.n	800746a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007440:	4a0c      	ldr	r2, [pc, #48]	; (8007474 <HAL_SPI_IRQHandler+0x1e4>)
 8007442:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007448:	4618      	mov	r0, r3
 800744a:	f7fd fd94 	bl	8004f76 <HAL_DMA_Abort_IT>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00a      	beq.n	800746a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007458:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007460:	e003      	b.n	800746a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f808 	bl	8007478 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007468:	e000      	b.n	800746c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800746a:	bf00      	nop
    return;
 800746c:	bf00      	nop
  }
}
 800746e:	3720      	adds	r7, #32
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	0800748d 	.word	0x0800748d

08007478 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007498:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f7ff ffe5 	bl	8007478 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80074ae:	bf00      	nop
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
	...

080074b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b088      	sub	sp, #32
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	603b      	str	r3, [r7, #0]
 80074c4:	4613      	mov	r3, r2
 80074c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80074c8:	f7fd fc14 	bl	8004cf4 <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d0:	1a9b      	subs	r3, r3, r2
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	4413      	add	r3, r2
 80074d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80074d8:	f7fd fc0c 	bl	8004cf4 <HAL_GetTick>
 80074dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80074de:	4b39      	ldr	r3, [pc, #228]	; (80075c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	015b      	lsls	r3, r3, #5
 80074e4:	0d1b      	lsrs	r3, r3, #20
 80074e6:	69fa      	ldr	r2, [r7, #28]
 80074e8:	fb02 f303 	mul.w	r3, r2, r3
 80074ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074ee:	e054      	b.n	800759a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f6:	d050      	beq.n	800759a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074f8:	f7fd fbfc 	bl	8004cf4 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	69fa      	ldr	r2, [r7, #28]
 8007504:	429a      	cmp	r2, r3
 8007506:	d902      	bls.n	800750e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d13d      	bne.n	800758a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800751c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007526:	d111      	bne.n	800754c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007530:	d004      	beq.n	800753c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800753a:	d107      	bne.n	800754c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800754a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007554:	d10f      	bne.n	8007576 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007574:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e017      	b.n	80075ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007590:	2300      	movs	r3, #0
 8007592:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	3b01      	subs	r3, #1
 8007598:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689a      	ldr	r2, [r3, #8]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	4013      	ands	r3, r2
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	bf0c      	ite	eq
 80075aa:	2301      	moveq	r3, #1
 80075ac:	2300      	movne	r3, #0
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	461a      	mov	r2, r3
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d19b      	bne.n	80074f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3720      	adds	r7, #32
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	20000128 	.word	0x20000128

080075c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b08a      	sub	sp, #40	; 0x28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
 80075d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80075d6:	2300      	movs	r3, #0
 80075d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80075da:	f7fd fb8b 	bl	8004cf4 <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e2:	1a9b      	subs	r3, r3, r2
 80075e4:	683a      	ldr	r2, [r7, #0]
 80075e6:	4413      	add	r3, r2
 80075e8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80075ea:	f7fd fb83 	bl	8004cf4 <HAL_GetTick>
 80075ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	330c      	adds	r3, #12
 80075f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80075f8:	4b3d      	ldr	r3, [pc, #244]	; (80076f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	4613      	mov	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	00da      	lsls	r2, r3, #3
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	0d1b      	lsrs	r3, r3, #20
 8007608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800760a:	fb02 f303 	mul.w	r3, r2, r3
 800760e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007610:	e060      	b.n	80076d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007618:	d107      	bne.n	800762a <SPI_WaitFifoStateUntilTimeout+0x62>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d104      	bne.n	800762a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	b2db      	uxtb	r3, r3
 8007626:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007628:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007630:	d050      	beq.n	80076d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007632:	f7fd fb5f 	bl	8004cf4 <HAL_GetTick>
 8007636:	4602      	mov	r2, r0
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800763e:	429a      	cmp	r2, r3
 8007640:	d902      	bls.n	8007648 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	2b00      	cmp	r3, #0
 8007646:	d13d      	bne.n	80076c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007656:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007660:	d111      	bne.n	8007686 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800766a:	d004      	beq.n	8007676 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007674:	d107      	bne.n	8007686 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007684:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800768e:	d10f      	bne.n	80076b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800769e:	601a      	str	r2, [r3, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e010      	b.n	80076e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	3b01      	subs	r3, #1
 80076d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689a      	ldr	r2, [r3, #8]
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	4013      	ands	r3, r2
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d196      	bne.n	8007612 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3728      	adds	r7, #40	; 0x28
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	20000128 	.word	0x20000128

080076f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b088      	sub	sp, #32
 80076f8:	af02      	add	r7, sp, #8
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007708:	d111      	bne.n	800772e <SPI_EndRxTransaction+0x3a>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007712:	d004      	beq.n	800771e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800771c:	d107      	bne.n	800772e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800772c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007736:	d112      	bne.n	800775e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	2200      	movs	r2, #0
 8007740:	2180      	movs	r1, #128	; 0x80
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f7ff feb8 	bl	80074b8 <SPI_WaitFlagStateUntilTimeout>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d021      	beq.n	8007792 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007752:	f043 0220 	orr.w	r2, r3, #32
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e03d      	b.n	80077da <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800775e:	4b21      	ldr	r3, [pc, #132]	; (80077e4 <SPI_EndRxTransaction+0xf0>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a21      	ldr	r2, [pc, #132]	; (80077e8 <SPI_EndRxTransaction+0xf4>)
 8007764:	fba2 2303 	umull	r2, r3, r2, r3
 8007768:	0d5b      	lsrs	r3, r3, #21
 800776a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800776e:	fb02 f303 	mul.w	r3, r2, r3
 8007772:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	3b01      	subs	r3, #1
 800777e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800778a:	2b80      	cmp	r3, #128	; 0x80
 800778c:	d0f2      	beq.n	8007774 <SPI_EndRxTransaction+0x80>
 800778e:	e000      	b.n	8007792 <SPI_EndRxTransaction+0x9e>
        break;
 8007790:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800779a:	d11d      	bne.n	80077d8 <SPI_EndRxTransaction+0xe4>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077a4:	d004      	beq.n	80077b0 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077ae:	d113      	bne.n	80077d8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f7ff ff03 	bl	80075c8 <SPI_WaitFifoStateUntilTimeout>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d007      	beq.n	80077d8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077cc:	f043 0220 	orr.w	r2, r3, #32
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e000      	b.n	80077da <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	20000128 	.word	0x20000128
 80077e8:	165e9f81 	.word	0x165e9f81

080077ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b088      	sub	sp, #32
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2200      	movs	r2, #0
 8007800:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f7ff fedf 	bl	80075c8 <SPI_WaitFifoStateUntilTimeout>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d007      	beq.n	8007820 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007814:	f043 0220 	orr.w	r2, r3, #32
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e046      	b.n	80078ae <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007820:	4b25      	ldr	r3, [pc, #148]	; (80078b8 <SPI_EndRxTxTransaction+0xcc>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a25      	ldr	r2, [pc, #148]	; (80078bc <SPI_EndRxTxTransaction+0xd0>)
 8007826:	fba2 2303 	umull	r2, r3, r2, r3
 800782a:	0d5b      	lsrs	r3, r3, #21
 800782c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007830:	fb02 f303 	mul.w	r3, r2, r3
 8007834:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800783e:	d112      	bne.n	8007866 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	2200      	movs	r2, #0
 8007848:	2180      	movs	r1, #128	; 0x80
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f7ff fe34 	bl	80074b8 <SPI_WaitFlagStateUntilTimeout>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d016      	beq.n	8007884 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800785a:	f043 0220 	orr.w	r2, r3, #32
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e023      	b.n	80078ae <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00a      	beq.n	8007882 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	3b01      	subs	r3, #1
 8007870:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800787c:	2b80      	cmp	r3, #128	; 0x80
 800787e:	d0f2      	beq.n	8007866 <SPI_EndRxTxTransaction+0x7a>
 8007880:	e000      	b.n	8007884 <SPI_EndRxTxTransaction+0x98>
        break;
 8007882:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2200      	movs	r2, #0
 800788c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f7ff fe99 	bl	80075c8 <SPI_WaitFifoStateUntilTimeout>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d007      	beq.n	80078ac <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078a0:	f043 0220 	orr.w	r2, r3, #32
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e000      	b.n	80078ae <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	20000128 	.word	0x20000128
 80078bc:	165e9f81 	.word	0x165e9f81

080078c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e049      	b.n	8007966 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d106      	bne.n	80078ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7fc ff80 	bl	80047ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2202      	movs	r2, #2
 80078f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	3304      	adds	r3, #4
 80078fc:	4619      	mov	r1, r3
 80078fe:	4610      	mov	r0, r2
 8007900:	f000 feba 	bl	8008678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
	...

08007970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b01      	cmp	r3, #1
 8007982:	d001      	beq.n	8007988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e054      	b.n	8007a32 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68da      	ldr	r2, [r3, #12]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f042 0201 	orr.w	r2, r2, #1
 800799e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a26      	ldr	r2, [pc, #152]	; (8007a40 <HAL_TIM_Base_Start_IT+0xd0>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d022      	beq.n	80079f0 <HAL_TIM_Base_Start_IT+0x80>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b2:	d01d      	beq.n	80079f0 <HAL_TIM_Base_Start_IT+0x80>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a22      	ldr	r2, [pc, #136]	; (8007a44 <HAL_TIM_Base_Start_IT+0xd4>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d018      	beq.n	80079f0 <HAL_TIM_Base_Start_IT+0x80>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a21      	ldr	r2, [pc, #132]	; (8007a48 <HAL_TIM_Base_Start_IT+0xd8>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d013      	beq.n	80079f0 <HAL_TIM_Base_Start_IT+0x80>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a1f      	ldr	r2, [pc, #124]	; (8007a4c <HAL_TIM_Base_Start_IT+0xdc>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d00e      	beq.n	80079f0 <HAL_TIM_Base_Start_IT+0x80>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a1e      	ldr	r2, [pc, #120]	; (8007a50 <HAL_TIM_Base_Start_IT+0xe0>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d009      	beq.n	80079f0 <HAL_TIM_Base_Start_IT+0x80>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a1c      	ldr	r2, [pc, #112]	; (8007a54 <HAL_TIM_Base_Start_IT+0xe4>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d004      	beq.n	80079f0 <HAL_TIM_Base_Start_IT+0x80>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a1b      	ldr	r2, [pc, #108]	; (8007a58 <HAL_TIM_Base_Start_IT+0xe8>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d115      	bne.n	8007a1c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	689a      	ldr	r2, [r3, #8]
 80079f6:	4b19      	ldr	r3, [pc, #100]	; (8007a5c <HAL_TIM_Base_Start_IT+0xec>)
 80079f8:	4013      	ands	r3, r2
 80079fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b06      	cmp	r3, #6
 8007a00:	d015      	beq.n	8007a2e <HAL_TIM_Base_Start_IT+0xbe>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a08:	d011      	beq.n	8007a2e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f042 0201 	orr.w	r2, r2, #1
 8007a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a1a:	e008      	b.n	8007a2e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f042 0201 	orr.w	r2, r2, #1
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	e000      	b.n	8007a30 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	40010000 	.word	0x40010000
 8007a44:	40000400 	.word	0x40000400
 8007a48:	40000800 	.word	0x40000800
 8007a4c:	40000c00 	.word	0x40000c00
 8007a50:	40010400 	.word	0x40010400
 8007a54:	40014000 	.word	0x40014000
 8007a58:	40001800 	.word	0x40001800
 8007a5c:	00010007 	.word	0x00010007

08007a60 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f022 0201 	bic.w	r2, r2, #1
 8007a76:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6a1a      	ldr	r2, [r3, #32]
 8007a7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a82:	4013      	ands	r3, r2
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10f      	bne.n	8007aa8 <HAL_TIM_Base_Stop_IT+0x48>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6a1a      	ldr	r2, [r3, #32]
 8007a8e:	f240 4344 	movw	r3, #1092	; 0x444
 8007a92:	4013      	ands	r3, r2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d107      	bne.n	8007aa8 <HAL_TIM_Base_Stop_IT+0x48>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f022 0201 	bic.w	r2, r2, #1
 8007aa6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b082      	sub	sp, #8
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d101      	bne.n	8007ad0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e049      	b.n	8007b64 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d106      	bne.n	8007aea <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f841 	bl	8007b6c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2202      	movs	r2, #2
 8007aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	3304      	adds	r3, #4
 8007afa:	4619      	mov	r1, r3
 8007afc:	4610      	mov	r0, r2
 8007afe:	f000 fdbb 	bl	8008678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e049      	b.n	8007c26 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d106      	bne.n	8007bac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f841 	bl	8007c2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	3304      	adds	r3, #4
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	f000 fd5a 	bl	8008678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b083      	sub	sp, #12
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c36:	bf00      	nop
 8007c38:	370c      	adds	r7, #12
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
	...

08007c44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d109      	bne.n	8007c68 <HAL_TIM_PWM_Start+0x24>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	bf14      	ite	ne
 8007c60:	2301      	movne	r3, #1
 8007c62:	2300      	moveq	r3, #0
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	e03c      	b.n	8007ce2 <HAL_TIM_PWM_Start+0x9e>
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d109      	bne.n	8007c82 <HAL_TIM_PWM_Start+0x3e>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	bf14      	ite	ne
 8007c7a:	2301      	movne	r3, #1
 8007c7c:	2300      	moveq	r3, #0
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	e02f      	b.n	8007ce2 <HAL_TIM_PWM_Start+0x9e>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b08      	cmp	r3, #8
 8007c86:	d109      	bne.n	8007c9c <HAL_TIM_PWM_Start+0x58>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	bf14      	ite	ne
 8007c94:	2301      	movne	r3, #1
 8007c96:	2300      	moveq	r3, #0
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	e022      	b.n	8007ce2 <HAL_TIM_PWM_Start+0x9e>
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	2b0c      	cmp	r3, #12
 8007ca0:	d109      	bne.n	8007cb6 <HAL_TIM_PWM_Start+0x72>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	bf14      	ite	ne
 8007cae:	2301      	movne	r3, #1
 8007cb0:	2300      	moveq	r3, #0
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	e015      	b.n	8007ce2 <HAL_TIM_PWM_Start+0x9e>
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	2b10      	cmp	r3, #16
 8007cba:	d109      	bne.n	8007cd0 <HAL_TIM_PWM_Start+0x8c>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	bf14      	ite	ne
 8007cc8:	2301      	movne	r3, #1
 8007cca:	2300      	moveq	r3, #0
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	e008      	b.n	8007ce2 <HAL_TIM_PWM_Start+0x9e>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	bf14      	ite	ne
 8007cdc:	2301      	movne	r3, #1
 8007cde:	2300      	moveq	r3, #0
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e092      	b.n	8007e10 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d104      	bne.n	8007cfa <HAL_TIM_PWM_Start+0xb6>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cf8:	e023      	b.n	8007d42 <HAL_TIM_PWM_Start+0xfe>
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	2b04      	cmp	r3, #4
 8007cfe:	d104      	bne.n	8007d0a <HAL_TIM_PWM_Start+0xc6>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2202      	movs	r2, #2
 8007d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d08:	e01b      	b.n	8007d42 <HAL_TIM_PWM_Start+0xfe>
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	2b08      	cmp	r3, #8
 8007d0e:	d104      	bne.n	8007d1a <HAL_TIM_PWM_Start+0xd6>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2202      	movs	r2, #2
 8007d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d18:	e013      	b.n	8007d42 <HAL_TIM_PWM_Start+0xfe>
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	2b0c      	cmp	r3, #12
 8007d1e:	d104      	bne.n	8007d2a <HAL_TIM_PWM_Start+0xe6>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2202      	movs	r2, #2
 8007d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d28:	e00b      	b.n	8007d42 <HAL_TIM_PWM_Start+0xfe>
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2b10      	cmp	r3, #16
 8007d2e:	d104      	bne.n	8007d3a <HAL_TIM_PWM_Start+0xf6>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2202      	movs	r2, #2
 8007d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d38:	e003      	b.n	8007d42 <HAL_TIM_PWM_Start+0xfe>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2201      	movs	r2, #1
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f001 f82c 	bl	8008da8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a30      	ldr	r2, [pc, #192]	; (8007e18 <HAL_TIM_PWM_Start+0x1d4>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d004      	beq.n	8007d64 <HAL_TIM_PWM_Start+0x120>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a2f      	ldr	r2, [pc, #188]	; (8007e1c <HAL_TIM_PWM_Start+0x1d8>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d101      	bne.n	8007d68 <HAL_TIM_PWM_Start+0x124>
 8007d64:	2301      	movs	r3, #1
 8007d66:	e000      	b.n	8007d6a <HAL_TIM_PWM_Start+0x126>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d007      	beq.n	8007d7e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a25      	ldr	r2, [pc, #148]	; (8007e18 <HAL_TIM_PWM_Start+0x1d4>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d022      	beq.n	8007dce <HAL_TIM_PWM_Start+0x18a>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d90:	d01d      	beq.n	8007dce <HAL_TIM_PWM_Start+0x18a>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a22      	ldr	r2, [pc, #136]	; (8007e20 <HAL_TIM_PWM_Start+0x1dc>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d018      	beq.n	8007dce <HAL_TIM_PWM_Start+0x18a>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a20      	ldr	r2, [pc, #128]	; (8007e24 <HAL_TIM_PWM_Start+0x1e0>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d013      	beq.n	8007dce <HAL_TIM_PWM_Start+0x18a>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a1f      	ldr	r2, [pc, #124]	; (8007e28 <HAL_TIM_PWM_Start+0x1e4>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d00e      	beq.n	8007dce <HAL_TIM_PWM_Start+0x18a>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a19      	ldr	r2, [pc, #100]	; (8007e1c <HAL_TIM_PWM_Start+0x1d8>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d009      	beq.n	8007dce <HAL_TIM_PWM_Start+0x18a>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a1b      	ldr	r2, [pc, #108]	; (8007e2c <HAL_TIM_PWM_Start+0x1e8>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d004      	beq.n	8007dce <HAL_TIM_PWM_Start+0x18a>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a19      	ldr	r2, [pc, #100]	; (8007e30 <HAL_TIM_PWM_Start+0x1ec>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d115      	bne.n	8007dfa <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	689a      	ldr	r2, [r3, #8]
 8007dd4:	4b17      	ldr	r3, [pc, #92]	; (8007e34 <HAL_TIM_PWM_Start+0x1f0>)
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2b06      	cmp	r3, #6
 8007dde:	d015      	beq.n	8007e0c <HAL_TIM_PWM_Start+0x1c8>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007de6:	d011      	beq.n	8007e0c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f042 0201 	orr.w	r2, r2, #1
 8007df6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007df8:	e008      	b.n	8007e0c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f042 0201 	orr.w	r2, r2, #1
 8007e08:	601a      	str	r2, [r3, #0]
 8007e0a:	e000      	b.n	8007e0e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	40010000 	.word	0x40010000
 8007e1c:	40010400 	.word	0x40010400
 8007e20:	40000400 	.word	0x40000400
 8007e24:	40000800 	.word	0x40000800
 8007e28:	40000c00 	.word	0x40000c00
 8007e2c:	40014000 	.word	0x40014000
 8007e30:	40001800 	.word	0x40001800
 8007e34:	00010007 	.word	0x00010007

08007e38 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2200      	movs	r2, #0
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 ffac 	bl	8008da8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a36      	ldr	r2, [pc, #216]	; (8007f30 <HAL_TIM_PWM_Stop+0xf8>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d004      	beq.n	8007e64 <HAL_TIM_PWM_Stop+0x2c>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a35      	ldr	r2, [pc, #212]	; (8007f34 <HAL_TIM_PWM_Stop+0xfc>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d101      	bne.n	8007e68 <HAL_TIM_PWM_Stop+0x30>
 8007e64:	2301      	movs	r3, #1
 8007e66:	e000      	b.n	8007e6a <HAL_TIM_PWM_Stop+0x32>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d017      	beq.n	8007e9e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	6a1a      	ldr	r2, [r3, #32]
 8007e74:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e78:	4013      	ands	r3, r2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10f      	bne.n	8007e9e <HAL_TIM_PWM_Stop+0x66>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6a1a      	ldr	r2, [r3, #32]
 8007e84:	f240 4344 	movw	r3, #1092	; 0x444
 8007e88:	4013      	ands	r3, r2
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d107      	bne.n	8007e9e <HAL_TIM_PWM_Stop+0x66>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6a1a      	ldr	r2, [r3, #32]
 8007ea4:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10f      	bne.n	8007ece <HAL_TIM_PWM_Stop+0x96>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	6a1a      	ldr	r2, [r3, #32]
 8007eb4:	f240 4344 	movw	r3, #1092	; 0x444
 8007eb8:	4013      	ands	r3, r2
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d107      	bne.n	8007ece <HAL_TIM_PWM_Stop+0x96>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f022 0201 	bic.w	r2, r2, #1
 8007ecc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d104      	bne.n	8007ede <HAL_TIM_PWM_Stop+0xa6>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007edc:	e023      	b.n	8007f26 <HAL_TIM_PWM_Stop+0xee>
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	2b04      	cmp	r3, #4
 8007ee2:	d104      	bne.n	8007eee <HAL_TIM_PWM_Stop+0xb6>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007eec:	e01b      	b.n	8007f26 <HAL_TIM_PWM_Stop+0xee>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	2b08      	cmp	r3, #8
 8007ef2:	d104      	bne.n	8007efe <HAL_TIM_PWM_Stop+0xc6>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007efc:	e013      	b.n	8007f26 <HAL_TIM_PWM_Stop+0xee>
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b0c      	cmp	r3, #12
 8007f02:	d104      	bne.n	8007f0e <HAL_TIM_PWM_Stop+0xd6>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f0c:	e00b      	b.n	8007f26 <HAL_TIM_PWM_Stop+0xee>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	2b10      	cmp	r3, #16
 8007f12:	d104      	bne.n	8007f1e <HAL_TIM_PWM_Stop+0xe6>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f1c:	e003      	b.n	8007f26 <HAL_TIM_PWM_Stop+0xee>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	40010000 	.word	0x40010000
 8007f34:	40010400 	.word	0x40010400

08007f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	f003 0302 	and.w	r3, r3, #2
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d122      	bne.n	8007f94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d11b      	bne.n	8007f94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f06f 0202 	mvn.w	r2, #2
 8007f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	f003 0303 	and.w	r3, r3, #3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fb5e 	bl	800863c <HAL_TIM_IC_CaptureCallback>
 8007f80:	e005      	b.n	8007f8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fb50 	bl	8008628 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fb61 	bl	8008650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	f003 0304 	and.w	r3, r3, #4
 8007f9e:	2b04      	cmp	r3, #4
 8007fa0:	d122      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	f003 0304 	and.w	r3, r3, #4
 8007fac:	2b04      	cmp	r3, #4
 8007fae:	d11b      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f06f 0204 	mvn.w	r2, #4
 8007fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d003      	beq.n	8007fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fb34 	bl	800863c <HAL_TIM_IC_CaptureCallback>
 8007fd4:	e005      	b.n	8007fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fb26 	bl	8008628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fb37 	bl	8008650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	f003 0308 	and.w	r3, r3, #8
 8007ff2:	2b08      	cmp	r3, #8
 8007ff4:	d122      	bne.n	800803c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	f003 0308 	and.w	r3, r3, #8
 8008000:	2b08      	cmp	r3, #8
 8008002:	d11b      	bne.n	800803c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f06f 0208 	mvn.w	r2, #8
 800800c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2204      	movs	r2, #4
 8008012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	f003 0303 	and.w	r3, r3, #3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fb0a 	bl	800863c <HAL_TIM_IC_CaptureCallback>
 8008028:	e005      	b.n	8008036 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 fafc 	bl	8008628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fb0d 	bl	8008650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	f003 0310 	and.w	r3, r3, #16
 8008046:	2b10      	cmp	r3, #16
 8008048:	d122      	bne.n	8008090 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	f003 0310 	and.w	r3, r3, #16
 8008054:	2b10      	cmp	r3, #16
 8008056:	d11b      	bne.n	8008090 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f06f 0210 	mvn.w	r2, #16
 8008060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2208      	movs	r2, #8
 8008066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	69db      	ldr	r3, [r3, #28]
 800806e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fae0 	bl	800863c <HAL_TIM_IC_CaptureCallback>
 800807c:	e005      	b.n	800808a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fad2 	bl	8008628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fae3 	bl	8008650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	2b01      	cmp	r3, #1
 800809c:	d10e      	bne.n	80080bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	f003 0301 	and.w	r3, r3, #1
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d107      	bne.n	80080bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f06f 0201 	mvn.w	r2, #1
 80080b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7fa fde6 	bl	8002c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c6:	2b80      	cmp	r3, #128	; 0x80
 80080c8:	d10e      	bne.n	80080e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080d4:	2b80      	cmp	r3, #128	; 0x80
 80080d6:	d107      	bne.n	80080e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 ff9c 	bl	8009020 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080f6:	d10e      	bne.n	8008116 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008102:	2b80      	cmp	r3, #128	; 0x80
 8008104:	d107      	bne.n	8008116 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800810e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 ff8f 	bl	8009034 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008120:	2b40      	cmp	r3, #64	; 0x40
 8008122:	d10e      	bne.n	8008142 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800812e:	2b40      	cmp	r3, #64	; 0x40
 8008130:	d107      	bne.n	8008142 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800813a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fa91 	bl	8008664 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	f003 0320 	and.w	r3, r3, #32
 800814c:	2b20      	cmp	r3, #32
 800814e:	d10e      	bne.n	800816e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	f003 0320 	and.w	r3, r3, #32
 800815a:	2b20      	cmp	r3, #32
 800815c:	d107      	bne.n	800816e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f06f 0220 	mvn.w	r2, #32
 8008166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 ff4f 	bl	800900c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800816e:	bf00      	nop
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
	...

08008178 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800818e:	2b01      	cmp	r3, #1
 8008190:	d101      	bne.n	8008196 <HAL_TIM_OC_ConfigChannel+0x1e>
 8008192:	2302      	movs	r3, #2
 8008194:	e066      	b.n	8008264 <HAL_TIM_OC_ConfigChannel+0xec>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2b14      	cmp	r3, #20
 80081a2:	d857      	bhi.n	8008254 <HAL_TIM_OC_ConfigChannel+0xdc>
 80081a4:	a201      	add	r2, pc, #4	; (adr r2, 80081ac <HAL_TIM_OC_ConfigChannel+0x34>)
 80081a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081aa:	bf00      	nop
 80081ac:	08008201 	.word	0x08008201
 80081b0:	08008255 	.word	0x08008255
 80081b4:	08008255 	.word	0x08008255
 80081b8:	08008255 	.word	0x08008255
 80081bc:	0800820f 	.word	0x0800820f
 80081c0:	08008255 	.word	0x08008255
 80081c4:	08008255 	.word	0x08008255
 80081c8:	08008255 	.word	0x08008255
 80081cc:	0800821d 	.word	0x0800821d
 80081d0:	08008255 	.word	0x08008255
 80081d4:	08008255 	.word	0x08008255
 80081d8:	08008255 	.word	0x08008255
 80081dc:	0800822b 	.word	0x0800822b
 80081e0:	08008255 	.word	0x08008255
 80081e4:	08008255 	.word	0x08008255
 80081e8:	08008255 	.word	0x08008255
 80081ec:	08008239 	.word	0x08008239
 80081f0:	08008255 	.word	0x08008255
 80081f4:	08008255 	.word	0x08008255
 80081f8:	08008255 	.word	0x08008255
 80081fc:	08008247 	.word	0x08008247
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68b9      	ldr	r1, [r7, #8]
 8008206:	4618      	mov	r0, r3
 8008208:	f000 fad6 	bl	80087b8 <TIM_OC1_SetConfig>
      break;
 800820c:	e025      	b.n	800825a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68b9      	ldr	r1, [r7, #8]
 8008214:	4618      	mov	r0, r3
 8008216:	f000 fb41 	bl	800889c <TIM_OC2_SetConfig>
      break;
 800821a:	e01e      	b.n	800825a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68b9      	ldr	r1, [r7, #8]
 8008222:	4618      	mov	r0, r3
 8008224:	f000 fbb2 	bl	800898c <TIM_OC3_SetConfig>
      break;
 8008228:	e017      	b.n	800825a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	68b9      	ldr	r1, [r7, #8]
 8008230:	4618      	mov	r0, r3
 8008232:	f000 fc21 	bl	8008a78 <TIM_OC4_SetConfig>
      break;
 8008236:	e010      	b.n	800825a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68b9      	ldr	r1, [r7, #8]
 800823e:	4618      	mov	r0, r3
 8008240:	f000 fc72 	bl	8008b28 <TIM_OC5_SetConfig>
      break;
 8008244:	e009      	b.n	800825a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68b9      	ldr	r1, [r7, #8]
 800824c:	4618      	mov	r0, r3
 800824e:	f000 fcbd 	bl	8008bcc <TIM_OC6_SetConfig>
      break;
 8008252:	e002      	b.n	800825a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	75fb      	strb	r3, [r7, #23]
      break;
 8008258:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008262:	7dfb      	ldrb	r3, [r7, #23]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3718      	adds	r7, #24
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008282:	2b01      	cmp	r3, #1
 8008284:	d101      	bne.n	800828a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008286:	2302      	movs	r3, #2
 8008288:	e0ff      	b.n	800848a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2201      	movs	r2, #1
 800828e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b14      	cmp	r3, #20
 8008296:	f200 80f0 	bhi.w	800847a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800829a:	a201      	add	r2, pc, #4	; (adr r2, 80082a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800829c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a0:	080082f5 	.word	0x080082f5
 80082a4:	0800847b 	.word	0x0800847b
 80082a8:	0800847b 	.word	0x0800847b
 80082ac:	0800847b 	.word	0x0800847b
 80082b0:	08008335 	.word	0x08008335
 80082b4:	0800847b 	.word	0x0800847b
 80082b8:	0800847b 	.word	0x0800847b
 80082bc:	0800847b 	.word	0x0800847b
 80082c0:	08008377 	.word	0x08008377
 80082c4:	0800847b 	.word	0x0800847b
 80082c8:	0800847b 	.word	0x0800847b
 80082cc:	0800847b 	.word	0x0800847b
 80082d0:	080083b7 	.word	0x080083b7
 80082d4:	0800847b 	.word	0x0800847b
 80082d8:	0800847b 	.word	0x0800847b
 80082dc:	0800847b 	.word	0x0800847b
 80082e0:	080083f9 	.word	0x080083f9
 80082e4:	0800847b 	.word	0x0800847b
 80082e8:	0800847b 	.word	0x0800847b
 80082ec:	0800847b 	.word	0x0800847b
 80082f0:	08008439 	.word	0x08008439
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68b9      	ldr	r1, [r7, #8]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 fa5c 	bl	80087b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	699a      	ldr	r2, [r3, #24]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f042 0208 	orr.w	r2, r2, #8
 800830e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	699a      	ldr	r2, [r3, #24]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f022 0204 	bic.w	r2, r2, #4
 800831e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	6999      	ldr	r1, [r3, #24]
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	691a      	ldr	r2, [r3, #16]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	430a      	orrs	r2, r1
 8008330:	619a      	str	r2, [r3, #24]
      break;
 8008332:	e0a5      	b.n	8008480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68b9      	ldr	r1, [r7, #8]
 800833a:	4618      	mov	r0, r3
 800833c:	f000 faae 	bl	800889c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	699a      	ldr	r2, [r3, #24]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800834e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	699a      	ldr	r2, [r3, #24]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800835e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	6999      	ldr	r1, [r3, #24]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	021a      	lsls	r2, r3, #8
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	430a      	orrs	r2, r1
 8008372:	619a      	str	r2, [r3, #24]
      break;
 8008374:	e084      	b.n	8008480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68b9      	ldr	r1, [r7, #8]
 800837c:	4618      	mov	r0, r3
 800837e:	f000 fb05 	bl	800898c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	69da      	ldr	r2, [r3, #28]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f042 0208 	orr.w	r2, r2, #8
 8008390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	69da      	ldr	r2, [r3, #28]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f022 0204 	bic.w	r2, r2, #4
 80083a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	69d9      	ldr	r1, [r3, #28]
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	691a      	ldr	r2, [r3, #16]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	430a      	orrs	r2, r1
 80083b2:	61da      	str	r2, [r3, #28]
      break;
 80083b4:	e064      	b.n	8008480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68b9      	ldr	r1, [r7, #8]
 80083bc:	4618      	mov	r0, r3
 80083be:	f000 fb5b 	bl	8008a78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	69da      	ldr	r2, [r3, #28]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	69da      	ldr	r2, [r3, #28]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	69d9      	ldr	r1, [r3, #28]
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	021a      	lsls	r2, r3, #8
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	430a      	orrs	r2, r1
 80083f4:	61da      	str	r2, [r3, #28]
      break;
 80083f6:	e043      	b.n	8008480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68b9      	ldr	r1, [r7, #8]
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 fb92 	bl	8008b28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f042 0208 	orr.w	r2, r2, #8
 8008412:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f022 0204 	bic.w	r2, r2, #4
 8008422:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	691a      	ldr	r2, [r3, #16]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	430a      	orrs	r2, r1
 8008434:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008436:	e023      	b.n	8008480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68b9      	ldr	r1, [r7, #8]
 800843e:	4618      	mov	r0, r3
 8008440:	f000 fbc4 	bl	8008bcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008452:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008462:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	021a      	lsls	r2, r3, #8
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	430a      	orrs	r2, r1
 8008476:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008478:	e002      	b.n	8008480 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	75fb      	strb	r3, [r7, #23]
      break;
 800847e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008488:	7dfb      	ldrb	r3, [r7, #23]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3718      	adds	r7, #24
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop

08008494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d101      	bne.n	80084b0 <HAL_TIM_ConfigClockSource+0x1c>
 80084ac:	2302      	movs	r3, #2
 80084ae:	e0b4      	b.n	800861a <HAL_TIM_ConfigClockSource+0x186>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2202      	movs	r2, #2
 80084bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	4b56      	ldr	r3, [pc, #344]	; (8008624 <HAL_TIM_ConfigClockSource+0x190>)
 80084cc:	4013      	ands	r3, r2
 80084ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084e8:	d03e      	beq.n	8008568 <HAL_TIM_ConfigClockSource+0xd4>
 80084ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084ee:	f200 8087 	bhi.w	8008600 <HAL_TIM_ConfigClockSource+0x16c>
 80084f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084f6:	f000 8086 	beq.w	8008606 <HAL_TIM_ConfigClockSource+0x172>
 80084fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084fe:	d87f      	bhi.n	8008600 <HAL_TIM_ConfigClockSource+0x16c>
 8008500:	2b70      	cmp	r3, #112	; 0x70
 8008502:	d01a      	beq.n	800853a <HAL_TIM_ConfigClockSource+0xa6>
 8008504:	2b70      	cmp	r3, #112	; 0x70
 8008506:	d87b      	bhi.n	8008600 <HAL_TIM_ConfigClockSource+0x16c>
 8008508:	2b60      	cmp	r3, #96	; 0x60
 800850a:	d050      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x11a>
 800850c:	2b60      	cmp	r3, #96	; 0x60
 800850e:	d877      	bhi.n	8008600 <HAL_TIM_ConfigClockSource+0x16c>
 8008510:	2b50      	cmp	r3, #80	; 0x50
 8008512:	d03c      	beq.n	800858e <HAL_TIM_ConfigClockSource+0xfa>
 8008514:	2b50      	cmp	r3, #80	; 0x50
 8008516:	d873      	bhi.n	8008600 <HAL_TIM_ConfigClockSource+0x16c>
 8008518:	2b40      	cmp	r3, #64	; 0x40
 800851a:	d058      	beq.n	80085ce <HAL_TIM_ConfigClockSource+0x13a>
 800851c:	2b40      	cmp	r3, #64	; 0x40
 800851e:	d86f      	bhi.n	8008600 <HAL_TIM_ConfigClockSource+0x16c>
 8008520:	2b30      	cmp	r3, #48	; 0x30
 8008522:	d064      	beq.n	80085ee <HAL_TIM_ConfigClockSource+0x15a>
 8008524:	2b30      	cmp	r3, #48	; 0x30
 8008526:	d86b      	bhi.n	8008600 <HAL_TIM_ConfigClockSource+0x16c>
 8008528:	2b20      	cmp	r3, #32
 800852a:	d060      	beq.n	80085ee <HAL_TIM_ConfigClockSource+0x15a>
 800852c:	2b20      	cmp	r3, #32
 800852e:	d867      	bhi.n	8008600 <HAL_TIM_ConfigClockSource+0x16c>
 8008530:	2b00      	cmp	r3, #0
 8008532:	d05c      	beq.n	80085ee <HAL_TIM_ConfigClockSource+0x15a>
 8008534:	2b10      	cmp	r3, #16
 8008536:	d05a      	beq.n	80085ee <HAL_TIM_ConfigClockSource+0x15a>
 8008538:	e062      	b.n	8008600 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800854a:	f000 fc0d 	bl	8008d68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800855c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68ba      	ldr	r2, [r7, #8]
 8008564:	609a      	str	r2, [r3, #8]
      break;
 8008566:	e04f      	b.n	8008608 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008578:	f000 fbf6 	bl	8008d68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	689a      	ldr	r2, [r3, #8]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800858a:	609a      	str	r2, [r3, #8]
      break;
 800858c:	e03c      	b.n	8008608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800859a:	461a      	mov	r2, r3
 800859c:	f000 fb6a 	bl	8008c74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2150      	movs	r1, #80	; 0x50
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 fbc3 	bl	8008d32 <TIM_ITRx_SetConfig>
      break;
 80085ac:	e02c      	b.n	8008608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085ba:	461a      	mov	r2, r3
 80085bc:	f000 fb89 	bl	8008cd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2160      	movs	r1, #96	; 0x60
 80085c6:	4618      	mov	r0, r3
 80085c8:	f000 fbb3 	bl	8008d32 <TIM_ITRx_SetConfig>
      break;
 80085cc:	e01c      	b.n	8008608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085da:	461a      	mov	r2, r3
 80085dc:	f000 fb4a 	bl	8008c74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2140      	movs	r1, #64	; 0x40
 80085e6:	4618      	mov	r0, r3
 80085e8:	f000 fba3 	bl	8008d32 <TIM_ITRx_SetConfig>
      break;
 80085ec:	e00c      	b.n	8008608 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4619      	mov	r1, r3
 80085f8:	4610      	mov	r0, r2
 80085fa:	f000 fb9a 	bl	8008d32 <TIM_ITRx_SetConfig>
      break;
 80085fe:	e003      	b.n	8008608 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	73fb      	strb	r3, [r7, #15]
      break;
 8008604:	e000      	b.n	8008608 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008606:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008618:	7bfb      	ldrb	r3, [r7, #15]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	fffeff88 	.word	0xfffeff88

08008628 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800866c:	bf00      	nop
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a40      	ldr	r2, [pc, #256]	; (800878c <TIM_Base_SetConfig+0x114>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d013      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008696:	d00f      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a3d      	ldr	r2, [pc, #244]	; (8008790 <TIM_Base_SetConfig+0x118>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d00b      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a3c      	ldr	r2, [pc, #240]	; (8008794 <TIM_Base_SetConfig+0x11c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d007      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a3b      	ldr	r2, [pc, #236]	; (8008798 <TIM_Base_SetConfig+0x120>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d003      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a3a      	ldr	r2, [pc, #232]	; (800879c <TIM_Base_SetConfig+0x124>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d108      	bne.n	80086ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a2f      	ldr	r2, [pc, #188]	; (800878c <TIM_Base_SetConfig+0x114>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d02b      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086d8:	d027      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a2c      	ldr	r2, [pc, #176]	; (8008790 <TIM_Base_SetConfig+0x118>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d023      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a2b      	ldr	r2, [pc, #172]	; (8008794 <TIM_Base_SetConfig+0x11c>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d01f      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a2a      	ldr	r2, [pc, #168]	; (8008798 <TIM_Base_SetConfig+0x120>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d01b      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a29      	ldr	r2, [pc, #164]	; (800879c <TIM_Base_SetConfig+0x124>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d017      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a28      	ldr	r2, [pc, #160]	; (80087a0 <TIM_Base_SetConfig+0x128>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d013      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a27      	ldr	r2, [pc, #156]	; (80087a4 <TIM_Base_SetConfig+0x12c>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d00f      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a26      	ldr	r2, [pc, #152]	; (80087a8 <TIM_Base_SetConfig+0x130>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d00b      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a25      	ldr	r2, [pc, #148]	; (80087ac <TIM_Base_SetConfig+0x134>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d007      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a24      	ldr	r2, [pc, #144]	; (80087b0 <TIM_Base_SetConfig+0x138>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d003      	beq.n	800872a <TIM_Base_SetConfig+0xb2>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a23      	ldr	r2, [pc, #140]	; (80087b4 <TIM_Base_SetConfig+0x13c>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d108      	bne.n	800873c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	4313      	orrs	r3, r2
 800873a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	4313      	orrs	r3, r2
 8008748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	689a      	ldr	r2, [r3, #8]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a0a      	ldr	r2, [pc, #40]	; (800878c <TIM_Base_SetConfig+0x114>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d003      	beq.n	8008770 <TIM_Base_SetConfig+0xf8>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a0c      	ldr	r2, [pc, #48]	; (800879c <TIM_Base_SetConfig+0x124>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d103      	bne.n	8008778 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	691a      	ldr	r2, [r3, #16]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	615a      	str	r2, [r3, #20]
}
 800877e:	bf00      	nop
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	40010000 	.word	0x40010000
 8008790:	40000400 	.word	0x40000400
 8008794:	40000800 	.word	0x40000800
 8008798:	40000c00 	.word	0x40000c00
 800879c:	40010400 	.word	0x40010400
 80087a0:	40014000 	.word	0x40014000
 80087a4:	40014400 	.word	0x40014400
 80087a8:	40014800 	.word	0x40014800
 80087ac:	40001800 	.word	0x40001800
 80087b0:	40001c00 	.word	0x40001c00
 80087b4:	40002000 	.word	0x40002000

080087b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	f023 0201 	bic.w	r2, r3, #1
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	4b2b      	ldr	r3, [pc, #172]	; (8008890 <TIM_OC1_SetConfig+0xd8>)
 80087e4:	4013      	ands	r3, r2
 80087e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f023 0303 	bic.w	r3, r3, #3
 80087ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f023 0302 	bic.w	r3, r3, #2
 8008800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	4313      	orrs	r3, r2
 800880a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a21      	ldr	r2, [pc, #132]	; (8008894 <TIM_OC1_SetConfig+0xdc>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d003      	beq.n	800881c <TIM_OC1_SetConfig+0x64>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a20      	ldr	r2, [pc, #128]	; (8008898 <TIM_OC1_SetConfig+0xe0>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d10c      	bne.n	8008836 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	f023 0308 	bic.w	r3, r3, #8
 8008822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	4313      	orrs	r3, r2
 800882c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	f023 0304 	bic.w	r3, r3, #4
 8008834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a16      	ldr	r2, [pc, #88]	; (8008894 <TIM_OC1_SetConfig+0xdc>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d003      	beq.n	8008846 <TIM_OC1_SetConfig+0x8e>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a15      	ldr	r2, [pc, #84]	; (8008898 <TIM_OC1_SetConfig+0xe0>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d111      	bne.n	800886a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800884c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	693a      	ldr	r2, [r7, #16]
 800885c:	4313      	orrs	r3, r2
 800885e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	693a      	ldr	r2, [r7, #16]
 8008866:	4313      	orrs	r3, r2
 8008868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	685a      	ldr	r2, [r3, #4]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	621a      	str	r2, [r3, #32]
}
 8008884:	bf00      	nop
 8008886:	371c      	adds	r7, #28
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	fffeff8f 	.word	0xfffeff8f
 8008894:	40010000 	.word	0x40010000
 8008898:	40010400 	.word	0x40010400

0800889c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800889c:	b480      	push	{r7}
 800889e:	b087      	sub	sp, #28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a1b      	ldr	r3, [r3, #32]
 80088aa:	f023 0210 	bic.w	r2, r3, #16
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a1b      	ldr	r3, [r3, #32]
 80088b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	699b      	ldr	r3, [r3, #24]
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	4b2e      	ldr	r3, [pc, #184]	; (8008980 <TIM_OC2_SetConfig+0xe4>)
 80088c8:	4013      	ands	r3, r2
 80088ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	021b      	lsls	r3, r3, #8
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	4313      	orrs	r3, r2
 80088de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	f023 0320 	bic.w	r3, r3, #32
 80088e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	011b      	lsls	r3, r3, #4
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a23      	ldr	r2, [pc, #140]	; (8008984 <TIM_OC2_SetConfig+0xe8>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d003      	beq.n	8008904 <TIM_OC2_SetConfig+0x68>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a22      	ldr	r2, [pc, #136]	; (8008988 <TIM_OC2_SetConfig+0xec>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d10d      	bne.n	8008920 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800890a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	011b      	lsls	r3, r3, #4
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	4313      	orrs	r3, r2
 8008916:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800891e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a18      	ldr	r2, [pc, #96]	; (8008984 <TIM_OC2_SetConfig+0xe8>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d003      	beq.n	8008930 <TIM_OC2_SetConfig+0x94>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a17      	ldr	r2, [pc, #92]	; (8008988 <TIM_OC2_SetConfig+0xec>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d113      	bne.n	8008958 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008936:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800893e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	695b      	ldr	r3, [r3, #20]
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	693a      	ldr	r2, [r7, #16]
 8008948:	4313      	orrs	r3, r2
 800894a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	4313      	orrs	r3, r2
 8008956:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	621a      	str	r2, [r3, #32]
}
 8008972:	bf00      	nop
 8008974:	371c      	adds	r7, #28
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	feff8fff 	.word	0xfeff8fff
 8008984:	40010000 	.word	0x40010000
 8008988:	40010400 	.word	0x40010400

0800898c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800898c:	b480      	push	{r7}
 800898e:	b087      	sub	sp, #28
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	4b2d      	ldr	r3, [pc, #180]	; (8008a6c <TIM_OC3_SetConfig+0xe0>)
 80089b8:	4013      	ands	r3, r2
 80089ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f023 0303 	bic.w	r3, r3, #3
 80089c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	021b      	lsls	r3, r3, #8
 80089dc:	697a      	ldr	r2, [r7, #20]
 80089de:	4313      	orrs	r3, r2
 80089e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a22      	ldr	r2, [pc, #136]	; (8008a70 <TIM_OC3_SetConfig+0xe4>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d003      	beq.n	80089f2 <TIM_OC3_SetConfig+0x66>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a21      	ldr	r2, [pc, #132]	; (8008a74 <TIM_OC3_SetConfig+0xe8>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d10d      	bne.n	8008a0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	021b      	lsls	r3, r3, #8
 8008a00:	697a      	ldr	r2, [r7, #20]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a17      	ldr	r2, [pc, #92]	; (8008a70 <TIM_OC3_SetConfig+0xe4>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d003      	beq.n	8008a1e <TIM_OC3_SetConfig+0x92>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a16      	ldr	r2, [pc, #88]	; (8008a74 <TIM_OC3_SetConfig+0xe8>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d113      	bne.n	8008a46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	695b      	ldr	r3, [r3, #20]
 8008a32:	011b      	lsls	r3, r3, #4
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	011b      	lsls	r3, r3, #4
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	68fa      	ldr	r2, [r7, #12]
 8008a50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	621a      	str	r2, [r3, #32]
}
 8008a60:	bf00      	nop
 8008a62:	371c      	adds	r7, #28
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr
 8008a6c:	fffeff8f 	.word	0xfffeff8f
 8008a70:	40010000 	.word	0x40010000
 8008a74:	40010400 	.word	0x40010400

08008a78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b087      	sub	sp, #28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a1b      	ldr	r3, [r3, #32]
 8008a86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a1b      	ldr	r3, [r3, #32]
 8008a92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	69db      	ldr	r3, [r3, #28]
 8008a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	4b1e      	ldr	r3, [pc, #120]	; (8008b1c <TIM_OC4_SetConfig+0xa4>)
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	021b      	lsls	r3, r3, #8
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ac2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	031b      	lsls	r3, r3, #12
 8008aca:	693a      	ldr	r2, [r7, #16]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a13      	ldr	r2, [pc, #76]	; (8008b20 <TIM_OC4_SetConfig+0xa8>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d003      	beq.n	8008ae0 <TIM_OC4_SetConfig+0x68>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a12      	ldr	r2, [pc, #72]	; (8008b24 <TIM_OC4_SetConfig+0xac>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d109      	bne.n	8008af4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ae6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	019b      	lsls	r3, r3, #6
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	621a      	str	r2, [r3, #32]
}
 8008b0e:	bf00      	nop
 8008b10:	371c      	adds	r7, #28
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	feff8fff 	.word	0xfeff8fff
 8008b20:	40010000 	.word	0x40010000
 8008b24:	40010400 	.word	0x40010400

08008b28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b087      	sub	sp, #28
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6a1b      	ldr	r3, [r3, #32]
 8008b42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	4b1b      	ldr	r3, [pc, #108]	; (8008bc0 <TIM_OC5_SetConfig+0x98>)
 8008b54:	4013      	ands	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008b68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	041b      	lsls	r3, r3, #16
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a12      	ldr	r2, [pc, #72]	; (8008bc4 <TIM_OC5_SetConfig+0x9c>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d003      	beq.n	8008b86 <TIM_OC5_SetConfig+0x5e>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a11      	ldr	r2, [pc, #68]	; (8008bc8 <TIM_OC5_SetConfig+0xa0>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d109      	bne.n	8008b9a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	695b      	ldr	r3, [r3, #20]
 8008b92:	021b      	lsls	r3, r3, #8
 8008b94:	697a      	ldr	r2, [r7, #20]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	697a      	ldr	r2, [r7, #20]
 8008b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	685a      	ldr	r2, [r3, #4]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	693a      	ldr	r2, [r7, #16]
 8008bb2:	621a      	str	r2, [r3, #32]
}
 8008bb4:	bf00      	nop
 8008bb6:	371c      	adds	r7, #28
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr
 8008bc0:	fffeff8f 	.word	0xfffeff8f
 8008bc4:	40010000 	.word	0x40010000
 8008bc8:	40010400 	.word	0x40010400

08008bcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b087      	sub	sp, #28
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	4b1c      	ldr	r3, [pc, #112]	; (8008c68 <TIM_OC6_SetConfig+0x9c>)
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	021b      	lsls	r3, r3, #8
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	051b      	lsls	r3, r3, #20
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a13      	ldr	r2, [pc, #76]	; (8008c6c <TIM_OC6_SetConfig+0xa0>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d003      	beq.n	8008c2c <TIM_OC6_SetConfig+0x60>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a12      	ldr	r2, [pc, #72]	; (8008c70 <TIM_OC6_SetConfig+0xa4>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d109      	bne.n	8008c40 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	695b      	ldr	r3, [r3, #20]
 8008c38:	029b      	lsls	r3, r3, #10
 8008c3a:	697a      	ldr	r2, [r7, #20]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	697a      	ldr	r2, [r7, #20]
 8008c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	685a      	ldr	r2, [r3, #4]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	621a      	str	r2, [r3, #32]
}
 8008c5a:	bf00      	nop
 8008c5c:	371c      	adds	r7, #28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	feff8fff 	.word	0xfeff8fff
 8008c6c:	40010000 	.word	0x40010000
 8008c70:	40010400 	.word	0x40010400

08008c74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b087      	sub	sp, #28
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6a1b      	ldr	r3, [r3, #32]
 8008c84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6a1b      	ldr	r3, [r3, #32]
 8008c8a:	f023 0201 	bic.w	r2, r3, #1
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	011b      	lsls	r3, r3, #4
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	f023 030a 	bic.w	r3, r3, #10
 8008cb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008cb2:	697a      	ldr	r2, [r7, #20]
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	697a      	ldr	r2, [r7, #20]
 8008cc4:	621a      	str	r2, [r3, #32]
}
 8008cc6:	bf00      	nop
 8008cc8:	371c      	adds	r7, #28
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b087      	sub	sp, #28
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	60f8      	str	r0, [r7, #12]
 8008cda:	60b9      	str	r1, [r7, #8]
 8008cdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6a1b      	ldr	r3, [r3, #32]
 8008ce2:	f023 0210 	bic.w	r2, r3, #16
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	699b      	ldr	r3, [r3, #24]
 8008cee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6a1b      	ldr	r3, [r3, #32]
 8008cf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008cfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	031b      	lsls	r3, r3, #12
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	011b      	lsls	r3, r3, #4
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	697a      	ldr	r2, [r7, #20]
 8008d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	621a      	str	r2, [r3, #32]
}
 8008d26:	bf00      	nop
 8008d28:	371c      	adds	r7, #28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr

08008d32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d32:	b480      	push	{r7}
 8008d34:	b085      	sub	sp, #20
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	f043 0307 	orr.w	r3, r3, #7
 8008d54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	609a      	str	r2, [r3, #8]
}
 8008d5c:	bf00      	nop
 8008d5e:	3714      	adds	r7, #20
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b087      	sub	sp, #28
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
 8008d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	021a      	lsls	r2, r3, #8
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	431a      	orrs	r2, r3
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	697a      	ldr	r2, [r7, #20]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	697a      	ldr	r2, [r7, #20]
 8008d9a:	609a      	str	r2, [r3, #8]
}
 8008d9c:	bf00      	nop
 8008d9e:	371c      	adds	r7, #28
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b087      	sub	sp, #28
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	f003 031f 	and.w	r3, r3, #31
 8008dba:	2201      	movs	r2, #1
 8008dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6a1a      	ldr	r2, [r3, #32]
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	43db      	mvns	r3, r3
 8008dca:	401a      	ands	r2, r3
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6a1a      	ldr	r2, [r3, #32]
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	f003 031f 	and.w	r3, r3, #31
 8008dda:	6879      	ldr	r1, [r7, #4]
 8008ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8008de0:	431a      	orrs	r2, r3
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	621a      	str	r2, [r3, #32]
}
 8008de6:	bf00      	nop
 8008de8:	371c      	adds	r7, #28
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
	...

08008df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d101      	bne.n	8008e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e08:	2302      	movs	r3, #2
 8008e0a:	e06d      	b.n	8008ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2202      	movs	r2, #2
 8008e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a30      	ldr	r2, [pc, #192]	; (8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d004      	beq.n	8008e40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a2f      	ldr	r2, [pc, #188]	; (8008ef8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d108      	bne.n	8008e52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a20      	ldr	r2, [pc, #128]	; (8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d022      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e7e:	d01d      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a1d      	ldr	r2, [pc, #116]	; (8008efc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d018      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a1c      	ldr	r2, [pc, #112]	; (8008f00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d013      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a1a      	ldr	r2, [pc, #104]	; (8008f04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d00e      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a15      	ldr	r2, [pc, #84]	; (8008ef8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d009      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a16      	ldr	r2, [pc, #88]	; (8008f08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d004      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a15      	ldr	r2, [pc, #84]	; (8008f0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d10c      	bne.n	8008ed6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ec2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68ba      	ldr	r2, [r7, #8]
 8008ed4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	40010000 	.word	0x40010000
 8008ef8:	40010400 	.word	0x40010400
 8008efc:	40000400 	.word	0x40000400
 8008f00:	40000800 	.word	0x40000800
 8008f04:	40000c00 	.word	0x40000c00
 8008f08:	40014000 	.word	0x40014000
 8008f0c:	40001800 	.word	0x40001800

08008f10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d101      	bne.n	8008f2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008f28:	2302      	movs	r3, #2
 8008f2a:	e065      	b.n	8008ff8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	695b      	ldr	r3, [r3, #20]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f92:	4313      	orrs	r3, r2
 8008f94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	041b      	lsls	r3, r3, #16
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a16      	ldr	r2, [pc, #88]	; (8009004 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d004      	beq.n	8008fba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a14      	ldr	r2, [pc, #80]	; (8009008 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d115      	bne.n	8008fe6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc4:	051b      	lsls	r3, r3, #20
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	69db      	ldr	r3, [r3, #28]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	40010000 	.word	0x40010000
 8009008:	40010400 	.word	0x40010400

0800900c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009014:	bf00      	nop
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	e040      	b.n	80090dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800905e:	2b00      	cmp	r3, #0
 8009060:	d106      	bne.n	8009070 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f7fb fd68 	bl	8004b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2224      	movs	r2, #36	; 0x24
 8009074:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f022 0201 	bic.w	r2, r2, #1
 8009084:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f900 	bl	800928c <UART_SetConfig>
 800908c:	4603      	mov	r3, r0
 800908e:	2b01      	cmp	r3, #1
 8009090:	d101      	bne.n	8009096 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	e022      	b.n	80090dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909a:	2b00      	cmp	r3, #0
 800909c:	d002      	beq.n	80090a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fb58 	bl	8009754 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	685a      	ldr	r2, [r3, #4]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80090b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	689a      	ldr	r2, [r3, #8]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f042 0201 	orr.w	r2, r2, #1
 80090d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 fbdf 	bl	8009898 <UART_CheckIdleState>
 80090da:	4603      	mov	r3, r0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b08a      	sub	sp, #40	; 0x28
 80090e8:	af02      	add	r7, sp, #8
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	603b      	str	r3, [r7, #0]
 80090f0:	4613      	mov	r3, r2
 80090f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090f8:	2b20      	cmp	r3, #32
 80090fa:	d171      	bne.n	80091e0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d002      	beq.n	8009108 <HAL_UART_Transmit+0x24>
 8009102:	88fb      	ldrh	r3, [r7, #6]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d101      	bne.n	800910c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	e06a      	b.n	80091e2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2221      	movs	r2, #33	; 0x21
 8009118:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800911a:	f7fb fdeb 	bl	8004cf4 <HAL_GetTick>
 800911e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	88fa      	ldrh	r2, [r7, #6]
 8009124:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	88fa      	ldrh	r2, [r7, #6]
 800912c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009138:	d108      	bne.n	800914c <HAL_UART_Transmit+0x68>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d104      	bne.n	800914c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009142:	2300      	movs	r3, #0
 8009144:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	61bb      	str	r3, [r7, #24]
 800914a:	e003      	b.n	8009154 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009150:	2300      	movs	r3, #0
 8009152:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009154:	e02c      	b.n	80091b0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	9300      	str	r3, [sp, #0]
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	2200      	movs	r2, #0
 800915e:	2180      	movs	r1, #128	; 0x80
 8009160:	68f8      	ldr	r0, [r7, #12]
 8009162:	f000 fbd0 	bl	8009906 <UART_WaitOnFlagUntilTimeout>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d001      	beq.n	8009170 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800916c:	2303      	movs	r3, #3
 800916e:	e038      	b.n	80091e2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10b      	bne.n	800918e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	881b      	ldrh	r3, [r3, #0]
 800917a:	461a      	mov	r2, r3
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009184:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	3302      	adds	r3, #2
 800918a:	61bb      	str	r3, [r7, #24]
 800918c:	e007      	b.n	800919e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	781a      	ldrb	r2, [r3, #0]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	3301      	adds	r3, #1
 800919c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	3b01      	subs	r3, #1
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1cc      	bne.n	8009156 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	2200      	movs	r2, #0
 80091c4:	2140      	movs	r1, #64	; 0x40
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f000 fb9d 	bl	8009906 <UART_WaitOnFlagUntilTimeout>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80091d2:	2303      	movs	r3, #3
 80091d4:	e005      	b.n	80091e2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2220      	movs	r2, #32
 80091da:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80091dc:	2300      	movs	r3, #0
 80091de:	e000      	b.n	80091e2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80091e0:	2302      	movs	r3, #2
  }
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3720      	adds	r7, #32
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b08a      	sub	sp, #40	; 0x28
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	60b9      	str	r1, [r7, #8]
 80091f4:	4613      	mov	r3, r2
 80091f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091fe:	2b20      	cmp	r3, #32
 8009200:	d132      	bne.n	8009268 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <HAL_UART_Receive_IT+0x24>
 8009208:	88fb      	ldrh	r3, [r7, #6]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d101      	bne.n	8009212 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e02b      	b.n	800926a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009222:	2b00      	cmp	r3, #0
 8009224:	d018      	beq.n	8009258 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	e853 3f00 	ldrex	r3, [r3]
 8009232:	613b      	str	r3, [r7, #16]
   return(result);
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800923a:	627b      	str	r3, [r7, #36]	; 0x24
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	461a      	mov	r2, r3
 8009242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009244:	623b      	str	r3, [r7, #32]
 8009246:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009248:	69f9      	ldr	r1, [r7, #28]
 800924a:	6a3a      	ldr	r2, [r7, #32]
 800924c:	e841 2300 	strex	r3, r2, [r1]
 8009250:	61bb      	str	r3, [r7, #24]
   return(result);
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1e6      	bne.n	8009226 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009258:	88fb      	ldrh	r3, [r7, #6]
 800925a:	461a      	mov	r2, r3
 800925c:	68b9      	ldr	r1, [r7, #8]
 800925e:	68f8      	ldr	r0, [r7, #12]
 8009260:	f000 fc18 	bl	8009a94 <UART_Start_Receive_IT>
 8009264:	4603      	mov	r3, r0
 8009266:	e000      	b.n	800926a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009268:	2302      	movs	r3, #2
  }
}
 800926a:	4618      	mov	r0, r3
 800926c:	3728      	adds	r7, #40	; 0x28
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009272:	b480      	push	{r7}
 8009274:	b083      	sub	sp, #12
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
 800927a:	460b      	mov	r3, r1
 800927c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800927e:	bf00      	nop
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
	...

0800928c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b088      	sub	sp, #32
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009294:	2300      	movs	r3, #0
 8009296:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	689a      	ldr	r2, [r3, #8]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	691b      	ldr	r3, [r3, #16]
 80092a0:	431a      	orrs	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	695b      	ldr	r3, [r3, #20]
 80092a6:	431a      	orrs	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	69db      	ldr	r3, [r3, #28]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	4ba6      	ldr	r3, [pc, #664]	; (8009550 <UART_SetConfig+0x2c4>)
 80092b8:	4013      	ands	r3, r2
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	6812      	ldr	r2, [r2, #0]
 80092be:	6979      	ldr	r1, [r7, #20]
 80092c0:	430b      	orrs	r3, r1
 80092c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	68da      	ldr	r2, [r3, #12]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	430a      	orrs	r2, r1
 80092d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a1b      	ldr	r3, [r3, #32]
 80092e4:	697a      	ldr	r2, [r7, #20]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	697a      	ldr	r2, [r7, #20]
 80092fa:	430a      	orrs	r2, r1
 80092fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a94      	ldr	r2, [pc, #592]	; (8009554 <UART_SetConfig+0x2c8>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d120      	bne.n	800934a <UART_SetConfig+0xbe>
 8009308:	4b93      	ldr	r3, [pc, #588]	; (8009558 <UART_SetConfig+0x2cc>)
 800930a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800930e:	f003 0303 	and.w	r3, r3, #3
 8009312:	2b03      	cmp	r3, #3
 8009314:	d816      	bhi.n	8009344 <UART_SetConfig+0xb8>
 8009316:	a201      	add	r2, pc, #4	; (adr r2, 800931c <UART_SetConfig+0x90>)
 8009318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931c:	0800932d 	.word	0x0800932d
 8009320:	08009339 	.word	0x08009339
 8009324:	08009333 	.word	0x08009333
 8009328:	0800933f 	.word	0x0800933f
 800932c:	2301      	movs	r3, #1
 800932e:	77fb      	strb	r3, [r7, #31]
 8009330:	e150      	b.n	80095d4 <UART_SetConfig+0x348>
 8009332:	2302      	movs	r3, #2
 8009334:	77fb      	strb	r3, [r7, #31]
 8009336:	e14d      	b.n	80095d4 <UART_SetConfig+0x348>
 8009338:	2304      	movs	r3, #4
 800933a:	77fb      	strb	r3, [r7, #31]
 800933c:	e14a      	b.n	80095d4 <UART_SetConfig+0x348>
 800933e:	2308      	movs	r3, #8
 8009340:	77fb      	strb	r3, [r7, #31]
 8009342:	e147      	b.n	80095d4 <UART_SetConfig+0x348>
 8009344:	2310      	movs	r3, #16
 8009346:	77fb      	strb	r3, [r7, #31]
 8009348:	e144      	b.n	80095d4 <UART_SetConfig+0x348>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a83      	ldr	r2, [pc, #524]	; (800955c <UART_SetConfig+0x2d0>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d132      	bne.n	80093ba <UART_SetConfig+0x12e>
 8009354:	4b80      	ldr	r3, [pc, #512]	; (8009558 <UART_SetConfig+0x2cc>)
 8009356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800935a:	f003 030c 	and.w	r3, r3, #12
 800935e:	2b0c      	cmp	r3, #12
 8009360:	d828      	bhi.n	80093b4 <UART_SetConfig+0x128>
 8009362:	a201      	add	r2, pc, #4	; (adr r2, 8009368 <UART_SetConfig+0xdc>)
 8009364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009368:	0800939d 	.word	0x0800939d
 800936c:	080093b5 	.word	0x080093b5
 8009370:	080093b5 	.word	0x080093b5
 8009374:	080093b5 	.word	0x080093b5
 8009378:	080093a9 	.word	0x080093a9
 800937c:	080093b5 	.word	0x080093b5
 8009380:	080093b5 	.word	0x080093b5
 8009384:	080093b5 	.word	0x080093b5
 8009388:	080093a3 	.word	0x080093a3
 800938c:	080093b5 	.word	0x080093b5
 8009390:	080093b5 	.word	0x080093b5
 8009394:	080093b5 	.word	0x080093b5
 8009398:	080093af 	.word	0x080093af
 800939c:	2300      	movs	r3, #0
 800939e:	77fb      	strb	r3, [r7, #31]
 80093a0:	e118      	b.n	80095d4 <UART_SetConfig+0x348>
 80093a2:	2302      	movs	r3, #2
 80093a4:	77fb      	strb	r3, [r7, #31]
 80093a6:	e115      	b.n	80095d4 <UART_SetConfig+0x348>
 80093a8:	2304      	movs	r3, #4
 80093aa:	77fb      	strb	r3, [r7, #31]
 80093ac:	e112      	b.n	80095d4 <UART_SetConfig+0x348>
 80093ae:	2308      	movs	r3, #8
 80093b0:	77fb      	strb	r3, [r7, #31]
 80093b2:	e10f      	b.n	80095d4 <UART_SetConfig+0x348>
 80093b4:	2310      	movs	r3, #16
 80093b6:	77fb      	strb	r3, [r7, #31]
 80093b8:	e10c      	b.n	80095d4 <UART_SetConfig+0x348>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a68      	ldr	r2, [pc, #416]	; (8009560 <UART_SetConfig+0x2d4>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d120      	bne.n	8009406 <UART_SetConfig+0x17a>
 80093c4:	4b64      	ldr	r3, [pc, #400]	; (8009558 <UART_SetConfig+0x2cc>)
 80093c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80093ce:	2b30      	cmp	r3, #48	; 0x30
 80093d0:	d013      	beq.n	80093fa <UART_SetConfig+0x16e>
 80093d2:	2b30      	cmp	r3, #48	; 0x30
 80093d4:	d814      	bhi.n	8009400 <UART_SetConfig+0x174>
 80093d6:	2b20      	cmp	r3, #32
 80093d8:	d009      	beq.n	80093ee <UART_SetConfig+0x162>
 80093da:	2b20      	cmp	r3, #32
 80093dc:	d810      	bhi.n	8009400 <UART_SetConfig+0x174>
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d002      	beq.n	80093e8 <UART_SetConfig+0x15c>
 80093e2:	2b10      	cmp	r3, #16
 80093e4:	d006      	beq.n	80093f4 <UART_SetConfig+0x168>
 80093e6:	e00b      	b.n	8009400 <UART_SetConfig+0x174>
 80093e8:	2300      	movs	r3, #0
 80093ea:	77fb      	strb	r3, [r7, #31]
 80093ec:	e0f2      	b.n	80095d4 <UART_SetConfig+0x348>
 80093ee:	2302      	movs	r3, #2
 80093f0:	77fb      	strb	r3, [r7, #31]
 80093f2:	e0ef      	b.n	80095d4 <UART_SetConfig+0x348>
 80093f4:	2304      	movs	r3, #4
 80093f6:	77fb      	strb	r3, [r7, #31]
 80093f8:	e0ec      	b.n	80095d4 <UART_SetConfig+0x348>
 80093fa:	2308      	movs	r3, #8
 80093fc:	77fb      	strb	r3, [r7, #31]
 80093fe:	e0e9      	b.n	80095d4 <UART_SetConfig+0x348>
 8009400:	2310      	movs	r3, #16
 8009402:	77fb      	strb	r3, [r7, #31]
 8009404:	e0e6      	b.n	80095d4 <UART_SetConfig+0x348>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a56      	ldr	r2, [pc, #344]	; (8009564 <UART_SetConfig+0x2d8>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d120      	bne.n	8009452 <UART_SetConfig+0x1c6>
 8009410:	4b51      	ldr	r3, [pc, #324]	; (8009558 <UART_SetConfig+0x2cc>)
 8009412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009416:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800941a:	2bc0      	cmp	r3, #192	; 0xc0
 800941c:	d013      	beq.n	8009446 <UART_SetConfig+0x1ba>
 800941e:	2bc0      	cmp	r3, #192	; 0xc0
 8009420:	d814      	bhi.n	800944c <UART_SetConfig+0x1c0>
 8009422:	2b80      	cmp	r3, #128	; 0x80
 8009424:	d009      	beq.n	800943a <UART_SetConfig+0x1ae>
 8009426:	2b80      	cmp	r3, #128	; 0x80
 8009428:	d810      	bhi.n	800944c <UART_SetConfig+0x1c0>
 800942a:	2b00      	cmp	r3, #0
 800942c:	d002      	beq.n	8009434 <UART_SetConfig+0x1a8>
 800942e:	2b40      	cmp	r3, #64	; 0x40
 8009430:	d006      	beq.n	8009440 <UART_SetConfig+0x1b4>
 8009432:	e00b      	b.n	800944c <UART_SetConfig+0x1c0>
 8009434:	2300      	movs	r3, #0
 8009436:	77fb      	strb	r3, [r7, #31]
 8009438:	e0cc      	b.n	80095d4 <UART_SetConfig+0x348>
 800943a:	2302      	movs	r3, #2
 800943c:	77fb      	strb	r3, [r7, #31]
 800943e:	e0c9      	b.n	80095d4 <UART_SetConfig+0x348>
 8009440:	2304      	movs	r3, #4
 8009442:	77fb      	strb	r3, [r7, #31]
 8009444:	e0c6      	b.n	80095d4 <UART_SetConfig+0x348>
 8009446:	2308      	movs	r3, #8
 8009448:	77fb      	strb	r3, [r7, #31]
 800944a:	e0c3      	b.n	80095d4 <UART_SetConfig+0x348>
 800944c:	2310      	movs	r3, #16
 800944e:	77fb      	strb	r3, [r7, #31]
 8009450:	e0c0      	b.n	80095d4 <UART_SetConfig+0x348>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a44      	ldr	r2, [pc, #272]	; (8009568 <UART_SetConfig+0x2dc>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d125      	bne.n	80094a8 <UART_SetConfig+0x21c>
 800945c:	4b3e      	ldr	r3, [pc, #248]	; (8009558 <UART_SetConfig+0x2cc>)
 800945e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800946a:	d017      	beq.n	800949c <UART_SetConfig+0x210>
 800946c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009470:	d817      	bhi.n	80094a2 <UART_SetConfig+0x216>
 8009472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009476:	d00b      	beq.n	8009490 <UART_SetConfig+0x204>
 8009478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800947c:	d811      	bhi.n	80094a2 <UART_SetConfig+0x216>
 800947e:	2b00      	cmp	r3, #0
 8009480:	d003      	beq.n	800948a <UART_SetConfig+0x1fe>
 8009482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009486:	d006      	beq.n	8009496 <UART_SetConfig+0x20a>
 8009488:	e00b      	b.n	80094a2 <UART_SetConfig+0x216>
 800948a:	2300      	movs	r3, #0
 800948c:	77fb      	strb	r3, [r7, #31]
 800948e:	e0a1      	b.n	80095d4 <UART_SetConfig+0x348>
 8009490:	2302      	movs	r3, #2
 8009492:	77fb      	strb	r3, [r7, #31]
 8009494:	e09e      	b.n	80095d4 <UART_SetConfig+0x348>
 8009496:	2304      	movs	r3, #4
 8009498:	77fb      	strb	r3, [r7, #31]
 800949a:	e09b      	b.n	80095d4 <UART_SetConfig+0x348>
 800949c:	2308      	movs	r3, #8
 800949e:	77fb      	strb	r3, [r7, #31]
 80094a0:	e098      	b.n	80095d4 <UART_SetConfig+0x348>
 80094a2:	2310      	movs	r3, #16
 80094a4:	77fb      	strb	r3, [r7, #31]
 80094a6:	e095      	b.n	80095d4 <UART_SetConfig+0x348>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a2f      	ldr	r2, [pc, #188]	; (800956c <UART_SetConfig+0x2e0>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d125      	bne.n	80094fe <UART_SetConfig+0x272>
 80094b2:	4b29      	ldr	r3, [pc, #164]	; (8009558 <UART_SetConfig+0x2cc>)
 80094b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80094bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80094c0:	d017      	beq.n	80094f2 <UART_SetConfig+0x266>
 80094c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80094c6:	d817      	bhi.n	80094f8 <UART_SetConfig+0x26c>
 80094c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094cc:	d00b      	beq.n	80094e6 <UART_SetConfig+0x25a>
 80094ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094d2:	d811      	bhi.n	80094f8 <UART_SetConfig+0x26c>
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d003      	beq.n	80094e0 <UART_SetConfig+0x254>
 80094d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094dc:	d006      	beq.n	80094ec <UART_SetConfig+0x260>
 80094de:	e00b      	b.n	80094f8 <UART_SetConfig+0x26c>
 80094e0:	2301      	movs	r3, #1
 80094e2:	77fb      	strb	r3, [r7, #31]
 80094e4:	e076      	b.n	80095d4 <UART_SetConfig+0x348>
 80094e6:	2302      	movs	r3, #2
 80094e8:	77fb      	strb	r3, [r7, #31]
 80094ea:	e073      	b.n	80095d4 <UART_SetConfig+0x348>
 80094ec:	2304      	movs	r3, #4
 80094ee:	77fb      	strb	r3, [r7, #31]
 80094f0:	e070      	b.n	80095d4 <UART_SetConfig+0x348>
 80094f2:	2308      	movs	r3, #8
 80094f4:	77fb      	strb	r3, [r7, #31]
 80094f6:	e06d      	b.n	80095d4 <UART_SetConfig+0x348>
 80094f8:	2310      	movs	r3, #16
 80094fa:	77fb      	strb	r3, [r7, #31]
 80094fc:	e06a      	b.n	80095d4 <UART_SetConfig+0x348>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a1b      	ldr	r2, [pc, #108]	; (8009570 <UART_SetConfig+0x2e4>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d138      	bne.n	800957a <UART_SetConfig+0x2ee>
 8009508:	4b13      	ldr	r3, [pc, #76]	; (8009558 <UART_SetConfig+0x2cc>)
 800950a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800950e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009512:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009516:	d017      	beq.n	8009548 <UART_SetConfig+0x2bc>
 8009518:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800951c:	d82a      	bhi.n	8009574 <UART_SetConfig+0x2e8>
 800951e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009522:	d00b      	beq.n	800953c <UART_SetConfig+0x2b0>
 8009524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009528:	d824      	bhi.n	8009574 <UART_SetConfig+0x2e8>
 800952a:	2b00      	cmp	r3, #0
 800952c:	d003      	beq.n	8009536 <UART_SetConfig+0x2aa>
 800952e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009532:	d006      	beq.n	8009542 <UART_SetConfig+0x2b6>
 8009534:	e01e      	b.n	8009574 <UART_SetConfig+0x2e8>
 8009536:	2300      	movs	r3, #0
 8009538:	77fb      	strb	r3, [r7, #31]
 800953a:	e04b      	b.n	80095d4 <UART_SetConfig+0x348>
 800953c:	2302      	movs	r3, #2
 800953e:	77fb      	strb	r3, [r7, #31]
 8009540:	e048      	b.n	80095d4 <UART_SetConfig+0x348>
 8009542:	2304      	movs	r3, #4
 8009544:	77fb      	strb	r3, [r7, #31]
 8009546:	e045      	b.n	80095d4 <UART_SetConfig+0x348>
 8009548:	2308      	movs	r3, #8
 800954a:	77fb      	strb	r3, [r7, #31]
 800954c:	e042      	b.n	80095d4 <UART_SetConfig+0x348>
 800954e:	bf00      	nop
 8009550:	efff69f3 	.word	0xefff69f3
 8009554:	40011000 	.word	0x40011000
 8009558:	40023800 	.word	0x40023800
 800955c:	40004400 	.word	0x40004400
 8009560:	40004800 	.word	0x40004800
 8009564:	40004c00 	.word	0x40004c00
 8009568:	40005000 	.word	0x40005000
 800956c:	40011400 	.word	0x40011400
 8009570:	40007800 	.word	0x40007800
 8009574:	2310      	movs	r3, #16
 8009576:	77fb      	strb	r3, [r7, #31]
 8009578:	e02c      	b.n	80095d4 <UART_SetConfig+0x348>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a72      	ldr	r2, [pc, #456]	; (8009748 <UART_SetConfig+0x4bc>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d125      	bne.n	80095d0 <UART_SetConfig+0x344>
 8009584:	4b71      	ldr	r3, [pc, #452]	; (800974c <UART_SetConfig+0x4c0>)
 8009586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800958a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800958e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009592:	d017      	beq.n	80095c4 <UART_SetConfig+0x338>
 8009594:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009598:	d817      	bhi.n	80095ca <UART_SetConfig+0x33e>
 800959a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800959e:	d00b      	beq.n	80095b8 <UART_SetConfig+0x32c>
 80095a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095a4:	d811      	bhi.n	80095ca <UART_SetConfig+0x33e>
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d003      	beq.n	80095b2 <UART_SetConfig+0x326>
 80095aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095ae:	d006      	beq.n	80095be <UART_SetConfig+0x332>
 80095b0:	e00b      	b.n	80095ca <UART_SetConfig+0x33e>
 80095b2:	2300      	movs	r3, #0
 80095b4:	77fb      	strb	r3, [r7, #31]
 80095b6:	e00d      	b.n	80095d4 <UART_SetConfig+0x348>
 80095b8:	2302      	movs	r3, #2
 80095ba:	77fb      	strb	r3, [r7, #31]
 80095bc:	e00a      	b.n	80095d4 <UART_SetConfig+0x348>
 80095be:	2304      	movs	r3, #4
 80095c0:	77fb      	strb	r3, [r7, #31]
 80095c2:	e007      	b.n	80095d4 <UART_SetConfig+0x348>
 80095c4:	2308      	movs	r3, #8
 80095c6:	77fb      	strb	r3, [r7, #31]
 80095c8:	e004      	b.n	80095d4 <UART_SetConfig+0x348>
 80095ca:	2310      	movs	r3, #16
 80095cc:	77fb      	strb	r3, [r7, #31]
 80095ce:	e001      	b.n	80095d4 <UART_SetConfig+0x348>
 80095d0:	2310      	movs	r3, #16
 80095d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	69db      	ldr	r3, [r3, #28]
 80095d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095dc:	d15b      	bne.n	8009696 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80095de:	7ffb      	ldrb	r3, [r7, #31]
 80095e0:	2b08      	cmp	r3, #8
 80095e2:	d828      	bhi.n	8009636 <UART_SetConfig+0x3aa>
 80095e4:	a201      	add	r2, pc, #4	; (adr r2, 80095ec <UART_SetConfig+0x360>)
 80095e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ea:	bf00      	nop
 80095ec:	08009611 	.word	0x08009611
 80095f0:	08009619 	.word	0x08009619
 80095f4:	08009621 	.word	0x08009621
 80095f8:	08009637 	.word	0x08009637
 80095fc:	08009627 	.word	0x08009627
 8009600:	08009637 	.word	0x08009637
 8009604:	08009637 	.word	0x08009637
 8009608:	08009637 	.word	0x08009637
 800960c:	0800962f 	.word	0x0800962f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009610:	f7fc fcca 	bl	8005fa8 <HAL_RCC_GetPCLK1Freq>
 8009614:	61b8      	str	r0, [r7, #24]
        break;
 8009616:	e013      	b.n	8009640 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009618:	f7fc fcda 	bl	8005fd0 <HAL_RCC_GetPCLK2Freq>
 800961c:	61b8      	str	r0, [r7, #24]
        break;
 800961e:	e00f      	b.n	8009640 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009620:	4b4b      	ldr	r3, [pc, #300]	; (8009750 <UART_SetConfig+0x4c4>)
 8009622:	61bb      	str	r3, [r7, #24]
        break;
 8009624:	e00c      	b.n	8009640 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009626:	f7fc fbad 	bl	8005d84 <HAL_RCC_GetSysClockFreq>
 800962a:	61b8      	str	r0, [r7, #24]
        break;
 800962c:	e008      	b.n	8009640 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800962e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009632:	61bb      	str	r3, [r7, #24]
        break;
 8009634:	e004      	b.n	8009640 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009636:	2300      	movs	r3, #0
 8009638:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	77bb      	strb	r3, [r7, #30]
        break;
 800963e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d074      	beq.n	8009730 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	005a      	lsls	r2, r3, #1
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	085b      	lsrs	r3, r3, #1
 8009650:	441a      	add	r2, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	fbb2 f3f3 	udiv	r3, r2, r3
 800965a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	2b0f      	cmp	r3, #15
 8009660:	d916      	bls.n	8009690 <UART_SetConfig+0x404>
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009668:	d212      	bcs.n	8009690 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	b29b      	uxth	r3, r3
 800966e:	f023 030f 	bic.w	r3, r3, #15
 8009672:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	085b      	lsrs	r3, r3, #1
 8009678:	b29b      	uxth	r3, r3
 800967a:	f003 0307 	and.w	r3, r3, #7
 800967e:	b29a      	uxth	r2, r3
 8009680:	89fb      	ldrh	r3, [r7, #14]
 8009682:	4313      	orrs	r3, r2
 8009684:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	89fa      	ldrh	r2, [r7, #14]
 800968c:	60da      	str	r2, [r3, #12]
 800968e:	e04f      	b.n	8009730 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	77bb      	strb	r3, [r7, #30]
 8009694:	e04c      	b.n	8009730 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009696:	7ffb      	ldrb	r3, [r7, #31]
 8009698:	2b08      	cmp	r3, #8
 800969a:	d828      	bhi.n	80096ee <UART_SetConfig+0x462>
 800969c:	a201      	add	r2, pc, #4	; (adr r2, 80096a4 <UART_SetConfig+0x418>)
 800969e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a2:	bf00      	nop
 80096a4:	080096c9 	.word	0x080096c9
 80096a8:	080096d1 	.word	0x080096d1
 80096ac:	080096d9 	.word	0x080096d9
 80096b0:	080096ef 	.word	0x080096ef
 80096b4:	080096df 	.word	0x080096df
 80096b8:	080096ef 	.word	0x080096ef
 80096bc:	080096ef 	.word	0x080096ef
 80096c0:	080096ef 	.word	0x080096ef
 80096c4:	080096e7 	.word	0x080096e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096c8:	f7fc fc6e 	bl	8005fa8 <HAL_RCC_GetPCLK1Freq>
 80096cc:	61b8      	str	r0, [r7, #24]
        break;
 80096ce:	e013      	b.n	80096f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096d0:	f7fc fc7e 	bl	8005fd0 <HAL_RCC_GetPCLK2Freq>
 80096d4:	61b8      	str	r0, [r7, #24]
        break;
 80096d6:	e00f      	b.n	80096f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096d8:	4b1d      	ldr	r3, [pc, #116]	; (8009750 <UART_SetConfig+0x4c4>)
 80096da:	61bb      	str	r3, [r7, #24]
        break;
 80096dc:	e00c      	b.n	80096f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096de:	f7fc fb51 	bl	8005d84 <HAL_RCC_GetSysClockFreq>
 80096e2:	61b8      	str	r0, [r7, #24]
        break;
 80096e4:	e008      	b.n	80096f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096ea:	61bb      	str	r3, [r7, #24]
        break;
 80096ec:	e004      	b.n	80096f8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80096ee:	2300      	movs	r3, #0
 80096f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	77bb      	strb	r3, [r7, #30]
        break;
 80096f6:	bf00      	nop
    }

    if (pclk != 0U)
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d018      	beq.n	8009730 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	085a      	lsrs	r2, r3, #1
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	441a      	add	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009710:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	2b0f      	cmp	r3, #15
 8009716:	d909      	bls.n	800972c <UART_SetConfig+0x4a0>
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800971e:	d205      	bcs.n	800972c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	b29a      	uxth	r2, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	60da      	str	r2, [r3, #12]
 800972a:	e001      	b.n	8009730 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800973c:	7fbb      	ldrb	r3, [r7, #30]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3720      	adds	r7, #32
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	40007c00 	.word	0x40007c00
 800974c:	40023800 	.word	0x40023800
 8009750:	00f42400 	.word	0x00f42400

08009754 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009760:	f003 0301 	and.w	r3, r3, #1
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00a      	beq.n	800977e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	430a      	orrs	r2, r1
 800977c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009782:	f003 0302 	and.w	r3, r3, #2
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00a      	beq.n	80097a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	430a      	orrs	r2, r1
 800979e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a4:	f003 0304 	and.w	r3, r3, #4
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00a      	beq.n	80097c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	430a      	orrs	r2, r1
 80097c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c6:	f003 0308 	and.w	r3, r3, #8
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00a      	beq.n	80097e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	430a      	orrs	r2, r1
 80097e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e8:	f003 0310 	and.w	r3, r3, #16
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00a      	beq.n	8009806 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	430a      	orrs	r2, r1
 8009804:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980a:	f003 0320 	and.w	r3, r3, #32
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00a      	beq.n	8009828 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	430a      	orrs	r2, r1
 8009826:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009830:	2b00      	cmp	r3, #0
 8009832:	d01a      	beq.n	800986a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	430a      	orrs	r2, r1
 8009848:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800984e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009852:	d10a      	bne.n	800986a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	430a      	orrs	r2, r1
 8009868:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00a      	beq.n	800988c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	430a      	orrs	r2, r1
 800988a:	605a      	str	r2, [r3, #4]
  }
}
 800988c:	bf00      	nop
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af02      	add	r7, sp, #8
 800989e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80098a8:	f7fb fa24 	bl	8004cf4 <HAL_GetTick>
 80098ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f003 0308 	and.w	r3, r3, #8
 80098b8:	2b08      	cmp	r3, #8
 80098ba:	d10e      	bne.n	80098da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80098c0:	9300      	str	r3, [sp, #0]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f81b 	bl	8009906 <UART_WaitOnFlagUntilTimeout>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d001      	beq.n	80098da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098d6:	2303      	movs	r3, #3
 80098d8:	e011      	b.n	80098fe <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2220      	movs	r2, #32
 80098de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2220      	movs	r2, #32
 80098e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3710      	adds	r7, #16
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b09c      	sub	sp, #112	; 0x70
 800990a:	af00      	add	r7, sp, #0
 800990c:	60f8      	str	r0, [r7, #12]
 800990e:	60b9      	str	r1, [r7, #8]
 8009910:	603b      	str	r3, [r7, #0]
 8009912:	4613      	mov	r3, r2
 8009914:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009916:	e0a7      	b.n	8009a68 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009918:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800991a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800991e:	f000 80a3 	beq.w	8009a68 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009922:	f7fb f9e7 	bl	8004cf4 <HAL_GetTick>
 8009926:	4602      	mov	r2, r0
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800992e:	429a      	cmp	r2, r3
 8009930:	d302      	bcc.n	8009938 <UART_WaitOnFlagUntilTimeout+0x32>
 8009932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009934:	2b00      	cmp	r3, #0
 8009936:	d13f      	bne.n	80099b8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009940:	e853 3f00 	ldrex	r3, [r3]
 8009944:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009948:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800994c:	667b      	str	r3, [r7, #100]	; 0x64
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	461a      	mov	r2, r3
 8009954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009956:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009958:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800995c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800995e:	e841 2300 	strex	r3, r2, [r1]
 8009962:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1e6      	bne.n	8009938 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	3308      	adds	r3, #8
 8009970:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009974:	e853 3f00 	ldrex	r3, [r3]
 8009978:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800997a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997c:	f023 0301 	bic.w	r3, r3, #1
 8009980:	663b      	str	r3, [r7, #96]	; 0x60
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	3308      	adds	r3, #8
 8009988:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800998a:	64ba      	str	r2, [r7, #72]	; 0x48
 800998c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009990:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009992:	e841 2300 	strex	r3, r2, [r1]
 8009996:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1e5      	bne.n	800996a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2220      	movs	r2, #32
 80099a2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2220      	movs	r2, #32
 80099a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80099b4:	2303      	movs	r3, #3
 80099b6:	e068      	b.n	8009a8a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f003 0304 	and.w	r3, r3, #4
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d050      	beq.n	8009a68 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	69db      	ldr	r3, [r3, #28]
 80099cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099d4:	d148      	bne.n	8009a68 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80099de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e8:	e853 3f00 	ldrex	r3, [r3]
 80099ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80099f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	461a      	mov	r2, r3
 80099fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099fe:	637b      	str	r3, [r7, #52]	; 0x34
 8009a00:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a06:	e841 2300 	strex	r3, r2, [r1]
 8009a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1e6      	bne.n	80099e0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	3308      	adds	r3, #8
 8009a18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	e853 3f00 	ldrex	r3, [r3]
 8009a20:	613b      	str	r3, [r7, #16]
   return(result);
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	f023 0301 	bic.w	r3, r3, #1
 8009a28:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	3308      	adds	r3, #8
 8009a30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009a32:	623a      	str	r2, [r7, #32]
 8009a34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a36:	69f9      	ldr	r1, [r7, #28]
 8009a38:	6a3a      	ldr	r2, [r7, #32]
 8009a3a:	e841 2300 	strex	r3, r2, [r1]
 8009a3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1e5      	bne.n	8009a12 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2220      	movs	r2, #32
 8009a4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2220      	movs	r2, #32
 8009a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2220      	movs	r2, #32
 8009a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e010      	b.n	8009a8a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	69da      	ldr	r2, [r3, #28]
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	4013      	ands	r3, r2
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	bf0c      	ite	eq
 8009a78:	2301      	moveq	r3, #1
 8009a7a:	2300      	movne	r3, #0
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	461a      	mov	r2, r3
 8009a80:	79fb      	ldrb	r3, [r7, #7]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	f43f af48 	beq.w	8009918 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3770      	adds	r7, #112	; 0x70
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
	...

08009a94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b097      	sub	sp, #92	; 0x5c
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	68ba      	ldr	r2, [r7, #8]
 8009aa6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	88fa      	ldrh	r2, [r7, #6]
 8009aac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	88fa      	ldrh	r2, [r7, #6]
 8009ab4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ac6:	d10e      	bne.n	8009ae6 <UART_Start_Receive_IT+0x52>
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d105      	bne.n	8009adc <UART_Start_Receive_IT+0x48>
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009ad6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ada:	e02d      	b.n	8009b38 <UART_Start_Receive_IT+0xa4>
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	22ff      	movs	r2, #255	; 0xff
 8009ae0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ae4:	e028      	b.n	8009b38 <UART_Start_Receive_IT+0xa4>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d10d      	bne.n	8009b0a <UART_Start_Receive_IT+0x76>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d104      	bne.n	8009b00 <UART_Start_Receive_IT+0x6c>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	22ff      	movs	r2, #255	; 0xff
 8009afa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009afe:	e01b      	b.n	8009b38 <UART_Start_Receive_IT+0xa4>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	227f      	movs	r2, #127	; 0x7f
 8009b04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b08:	e016      	b.n	8009b38 <UART_Start_Receive_IT+0xa4>
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b12:	d10d      	bne.n	8009b30 <UART_Start_Receive_IT+0x9c>
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d104      	bne.n	8009b26 <UART_Start_Receive_IT+0x92>
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	227f      	movs	r2, #127	; 0x7f
 8009b20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b24:	e008      	b.n	8009b38 <UART_Start_Receive_IT+0xa4>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	223f      	movs	r2, #63	; 0x3f
 8009b2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b2e:	e003      	b.n	8009b38 <UART_Start_Receive_IT+0xa4>
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2200      	movs	r2, #0
 8009b34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2222      	movs	r2, #34	; 0x22
 8009b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	3308      	adds	r3, #8
 8009b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b52:	e853 3f00 	ldrex	r3, [r3]
 8009b56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5a:	f043 0301 	orr.w	r3, r3, #1
 8009b5e:	657b      	str	r3, [r7, #84]	; 0x54
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3308      	adds	r3, #8
 8009b66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009b68:	64ba      	str	r2, [r7, #72]	; 0x48
 8009b6a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b70:	e841 2300 	strex	r3, r2, [r1]
 8009b74:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1e5      	bne.n	8009b48 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b84:	d107      	bne.n	8009b96 <UART_Start_Receive_IT+0x102>
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d103      	bne.n	8009b96 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	4a21      	ldr	r2, [pc, #132]	; (8009c18 <UART_Start_Receive_IT+0x184>)
 8009b92:	669a      	str	r2, [r3, #104]	; 0x68
 8009b94:	e002      	b.n	8009b9c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	4a20      	ldr	r2, [pc, #128]	; (8009c1c <UART_Start_Receive_IT+0x188>)
 8009b9a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d019      	beq.n	8009bd8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bac:	e853 3f00 	ldrex	r3, [r3]
 8009bb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8009bc4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bca:	e841 2300 	strex	r3, r2, [r1]
 8009bce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1e6      	bne.n	8009ba4 <UART_Start_Receive_IT+0x110>
 8009bd6:	e018      	b.n	8009c0a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	e853 3f00 	ldrex	r3, [r3]
 8009be4:	613b      	str	r3, [r7, #16]
   return(result);
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	f043 0320 	orr.w	r3, r3, #32
 8009bec:	653b      	str	r3, [r7, #80]	; 0x50
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bf6:	623b      	str	r3, [r7, #32]
 8009bf8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfa:	69f9      	ldr	r1, [r7, #28]
 8009bfc:	6a3a      	ldr	r2, [r7, #32]
 8009bfe:	e841 2300 	strex	r3, r2, [r1]
 8009c02:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1e6      	bne.n	8009bd8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	375c      	adds	r7, #92	; 0x5c
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr
 8009c18:	08009d87 	.word	0x08009d87
 8009c1c:	08009c21 	.word	0x08009c21

08009c20 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b096      	sub	sp, #88	; 0x58
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c2e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c38:	2b22      	cmp	r3, #34	; 0x22
 8009c3a:	f040 8098 	bne.w	8009d6e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c44:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009c48:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009c4c:	b2d9      	uxtb	r1, r3
 8009c4e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009c52:	b2da      	uxtb	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c58:	400a      	ands	r2, r1
 8009c5a:	b2d2      	uxtb	r2, r2
 8009c5c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c62:	1c5a      	adds	r2, r3, #1
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	3b01      	subs	r3, #1
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d17b      	bne.n	8009d7e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8e:	e853 3f00 	ldrex	r3, [r3]
 8009c92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8009ca6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009caa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cac:	e841 2300 	strex	r3, r2, [r1]
 8009cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d1e6      	bne.n	8009c86 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	3308      	adds	r3, #8
 8009cbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc2:	e853 3f00 	ldrex	r3, [r3]
 8009cc6:	623b      	str	r3, [r7, #32]
   return(result);
 8009cc8:	6a3b      	ldr	r3, [r7, #32]
 8009cca:	f023 0301 	bic.w	r3, r3, #1
 8009cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	3308      	adds	r3, #8
 8009cd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009cd8:	633a      	str	r2, [r7, #48]	; 0x30
 8009cda:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ce0:	e841 2300 	strex	r3, r2, [r1]
 8009ce4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1e5      	bne.n	8009cb8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2220      	movs	r2, #32
 8009cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d12e      	bne.n	8009d66 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	e853 3f00 	ldrex	r3, [r3]
 8009d1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f023 0310 	bic.w	r3, r3, #16
 8009d22:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	461a      	mov	r2, r3
 8009d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d2c:	61fb      	str	r3, [r7, #28]
 8009d2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d30:	69b9      	ldr	r1, [r7, #24]
 8009d32:	69fa      	ldr	r2, [r7, #28]
 8009d34:	e841 2300 	strex	r3, r2, [r1]
 8009d38:	617b      	str	r3, [r7, #20]
   return(result);
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d1e6      	bne.n	8009d0e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	69db      	ldr	r3, [r3, #28]
 8009d46:	f003 0310 	and.w	r3, r3, #16
 8009d4a:	2b10      	cmp	r3, #16
 8009d4c:	d103      	bne.n	8009d56 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2210      	movs	r2, #16
 8009d54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f7ff fa87 	bl	8009272 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d64:	e00b      	b.n	8009d7e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f7f8 ff64 	bl	8002c34 <HAL_UART_RxCpltCallback>
}
 8009d6c:	e007      	b.n	8009d7e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	699a      	ldr	r2, [r3, #24]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f042 0208 	orr.w	r2, r2, #8
 8009d7c:	619a      	str	r2, [r3, #24]
}
 8009d7e:	bf00      	nop
 8009d80:	3758      	adds	r7, #88	; 0x58
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b096      	sub	sp, #88	; 0x58
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d94:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d9e:	2b22      	cmp	r3, #34	; 0x22
 8009da0:	f040 8098 	bne.w	8009ed4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009daa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009db2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009db4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009db8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	b29a      	uxth	r2, r3
 8009dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dc2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dc8:	1c9a      	adds	r2, r3, #2
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	b29a      	uxth	r2, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d17b      	bne.n	8009ee4 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009df4:	e853 3f00 	ldrex	r3, [r3]
 8009df8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e0a:	643b      	str	r3, [r7, #64]	; 0x40
 8009e0c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e12:	e841 2300 	strex	r3, r2, [r1]
 8009e16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d1e6      	bne.n	8009dec <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	3308      	adds	r3, #8
 8009e24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e26:	6a3b      	ldr	r3, [r7, #32]
 8009e28:	e853 3f00 	ldrex	r3, [r3]
 8009e2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	f023 0301 	bic.w	r3, r3, #1
 8009e34:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	3308      	adds	r3, #8
 8009e3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e46:	e841 2300 	strex	r3, r2, [r1]
 8009e4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1e5      	bne.n	8009e1e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2220      	movs	r2, #32
 8009e56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d12e      	bne.n	8009ecc <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	e853 3f00 	ldrex	r3, [r3]
 8009e80:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	f023 0310 	bic.w	r3, r3, #16
 8009e88:	647b      	str	r3, [r7, #68]	; 0x44
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	461a      	mov	r2, r3
 8009e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e92:	61bb      	str	r3, [r7, #24]
 8009e94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e96:	6979      	ldr	r1, [r7, #20]
 8009e98:	69ba      	ldr	r2, [r7, #24]
 8009e9a:	e841 2300 	strex	r3, r2, [r1]
 8009e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1e6      	bne.n	8009e74 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	69db      	ldr	r3, [r3, #28]
 8009eac:	f003 0310 	and.w	r3, r3, #16
 8009eb0:	2b10      	cmp	r3, #16
 8009eb2:	d103      	bne.n	8009ebc <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2210      	movs	r2, #16
 8009eba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f7ff f9d4 	bl	8009272 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009eca:	e00b      	b.n	8009ee4 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f7f8 feb1 	bl	8002c34 <HAL_UART_RxCpltCallback>
}
 8009ed2:	e007      	b.n	8009ee4 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	699a      	ldr	r2, [r3, #24]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f042 0208 	orr.w	r2, r2, #8
 8009ee2:	619a      	str	r2, [r3, #24]
}
 8009ee4:	bf00      	nop
 8009ee6:	3758      	adds	r7, #88	; 0x58
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <atoi>:
 8009eec:	220a      	movs	r2, #10
 8009eee:	2100      	movs	r1, #0
 8009ef0:	f000 b882 	b.w	8009ff8 <strtol>

08009ef4 <_strtol_l.constprop.0>:
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009efa:	d001      	beq.n	8009f00 <_strtol_l.constprop.0+0xc>
 8009efc:	2b24      	cmp	r3, #36	; 0x24
 8009efe:	d906      	bls.n	8009f0e <_strtol_l.constprop.0+0x1a>
 8009f00:	f000 f8c0 	bl	800a084 <__errno>
 8009f04:	2316      	movs	r3, #22
 8009f06:	6003      	str	r3, [r0, #0]
 8009f08:	2000      	movs	r0, #0
 8009f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f0e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009ff4 <_strtol_l.constprop.0+0x100>
 8009f12:	460d      	mov	r5, r1
 8009f14:	462e      	mov	r6, r5
 8009f16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f1a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009f1e:	f017 0708 	ands.w	r7, r7, #8
 8009f22:	d1f7      	bne.n	8009f14 <_strtol_l.constprop.0+0x20>
 8009f24:	2c2d      	cmp	r4, #45	; 0x2d
 8009f26:	d132      	bne.n	8009f8e <_strtol_l.constprop.0+0x9a>
 8009f28:	782c      	ldrb	r4, [r5, #0]
 8009f2a:	2701      	movs	r7, #1
 8009f2c:	1cb5      	adds	r5, r6, #2
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d05b      	beq.n	8009fea <_strtol_l.constprop.0+0xf6>
 8009f32:	2b10      	cmp	r3, #16
 8009f34:	d109      	bne.n	8009f4a <_strtol_l.constprop.0+0x56>
 8009f36:	2c30      	cmp	r4, #48	; 0x30
 8009f38:	d107      	bne.n	8009f4a <_strtol_l.constprop.0+0x56>
 8009f3a:	782c      	ldrb	r4, [r5, #0]
 8009f3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009f40:	2c58      	cmp	r4, #88	; 0x58
 8009f42:	d14d      	bne.n	8009fe0 <_strtol_l.constprop.0+0xec>
 8009f44:	786c      	ldrb	r4, [r5, #1]
 8009f46:	2310      	movs	r3, #16
 8009f48:	3502      	adds	r5, #2
 8009f4a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009f4e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f52:	f04f 0e00 	mov.w	lr, #0
 8009f56:	fbb8 f9f3 	udiv	r9, r8, r3
 8009f5a:	4676      	mov	r6, lr
 8009f5c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009f60:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009f64:	f1bc 0f09 	cmp.w	ip, #9
 8009f68:	d816      	bhi.n	8009f98 <_strtol_l.constprop.0+0xa4>
 8009f6a:	4664      	mov	r4, ip
 8009f6c:	42a3      	cmp	r3, r4
 8009f6e:	dd24      	ble.n	8009fba <_strtol_l.constprop.0+0xc6>
 8009f70:	f1be 3fff 	cmp.w	lr, #4294967295
 8009f74:	d008      	beq.n	8009f88 <_strtol_l.constprop.0+0x94>
 8009f76:	45b1      	cmp	r9, r6
 8009f78:	d31c      	bcc.n	8009fb4 <_strtol_l.constprop.0+0xc0>
 8009f7a:	d101      	bne.n	8009f80 <_strtol_l.constprop.0+0x8c>
 8009f7c:	45a2      	cmp	sl, r4
 8009f7e:	db19      	blt.n	8009fb4 <_strtol_l.constprop.0+0xc0>
 8009f80:	fb06 4603 	mla	r6, r6, r3, r4
 8009f84:	f04f 0e01 	mov.w	lr, #1
 8009f88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f8c:	e7e8      	b.n	8009f60 <_strtol_l.constprop.0+0x6c>
 8009f8e:	2c2b      	cmp	r4, #43	; 0x2b
 8009f90:	bf04      	itt	eq
 8009f92:	782c      	ldrbeq	r4, [r5, #0]
 8009f94:	1cb5      	addeq	r5, r6, #2
 8009f96:	e7ca      	b.n	8009f2e <_strtol_l.constprop.0+0x3a>
 8009f98:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009f9c:	f1bc 0f19 	cmp.w	ip, #25
 8009fa0:	d801      	bhi.n	8009fa6 <_strtol_l.constprop.0+0xb2>
 8009fa2:	3c37      	subs	r4, #55	; 0x37
 8009fa4:	e7e2      	b.n	8009f6c <_strtol_l.constprop.0+0x78>
 8009fa6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009faa:	f1bc 0f19 	cmp.w	ip, #25
 8009fae:	d804      	bhi.n	8009fba <_strtol_l.constprop.0+0xc6>
 8009fb0:	3c57      	subs	r4, #87	; 0x57
 8009fb2:	e7db      	b.n	8009f6c <_strtol_l.constprop.0+0x78>
 8009fb4:	f04f 3eff 	mov.w	lr, #4294967295
 8009fb8:	e7e6      	b.n	8009f88 <_strtol_l.constprop.0+0x94>
 8009fba:	f1be 3fff 	cmp.w	lr, #4294967295
 8009fbe:	d105      	bne.n	8009fcc <_strtol_l.constprop.0+0xd8>
 8009fc0:	2322      	movs	r3, #34	; 0x22
 8009fc2:	6003      	str	r3, [r0, #0]
 8009fc4:	4646      	mov	r6, r8
 8009fc6:	b942      	cbnz	r2, 8009fda <_strtol_l.constprop.0+0xe6>
 8009fc8:	4630      	mov	r0, r6
 8009fca:	e79e      	b.n	8009f0a <_strtol_l.constprop.0+0x16>
 8009fcc:	b107      	cbz	r7, 8009fd0 <_strtol_l.constprop.0+0xdc>
 8009fce:	4276      	negs	r6, r6
 8009fd0:	2a00      	cmp	r2, #0
 8009fd2:	d0f9      	beq.n	8009fc8 <_strtol_l.constprop.0+0xd4>
 8009fd4:	f1be 0f00 	cmp.w	lr, #0
 8009fd8:	d000      	beq.n	8009fdc <_strtol_l.constprop.0+0xe8>
 8009fda:	1e69      	subs	r1, r5, #1
 8009fdc:	6011      	str	r1, [r2, #0]
 8009fde:	e7f3      	b.n	8009fc8 <_strtol_l.constprop.0+0xd4>
 8009fe0:	2430      	movs	r4, #48	; 0x30
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1b1      	bne.n	8009f4a <_strtol_l.constprop.0+0x56>
 8009fe6:	2308      	movs	r3, #8
 8009fe8:	e7af      	b.n	8009f4a <_strtol_l.constprop.0+0x56>
 8009fea:	2c30      	cmp	r4, #48	; 0x30
 8009fec:	d0a5      	beq.n	8009f3a <_strtol_l.constprop.0+0x46>
 8009fee:	230a      	movs	r3, #10
 8009ff0:	e7ab      	b.n	8009f4a <_strtol_l.constprop.0+0x56>
 8009ff2:	bf00      	nop
 8009ff4:	0800acfd 	.word	0x0800acfd

08009ff8 <strtol>:
 8009ff8:	4613      	mov	r3, r2
 8009ffa:	460a      	mov	r2, r1
 8009ffc:	4601      	mov	r1, r0
 8009ffe:	4802      	ldr	r0, [pc, #8]	; (800a008 <strtol+0x10>)
 800a000:	6800      	ldr	r0, [r0, #0]
 800a002:	f7ff bf77 	b.w	8009ef4 <_strtol_l.constprop.0>
 800a006:	bf00      	nop
 800a008:	20000180 	.word	0x20000180

0800a00c <sniprintf>:
 800a00c:	b40c      	push	{r2, r3}
 800a00e:	b530      	push	{r4, r5, lr}
 800a010:	4b17      	ldr	r3, [pc, #92]	; (800a070 <sniprintf+0x64>)
 800a012:	1e0c      	subs	r4, r1, #0
 800a014:	681d      	ldr	r5, [r3, #0]
 800a016:	b09d      	sub	sp, #116	; 0x74
 800a018:	da08      	bge.n	800a02c <sniprintf+0x20>
 800a01a:	238b      	movs	r3, #139	; 0x8b
 800a01c:	602b      	str	r3, [r5, #0]
 800a01e:	f04f 30ff 	mov.w	r0, #4294967295
 800a022:	b01d      	add	sp, #116	; 0x74
 800a024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a028:	b002      	add	sp, #8
 800a02a:	4770      	bx	lr
 800a02c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a030:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a034:	bf14      	ite	ne
 800a036:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a03a:	4623      	moveq	r3, r4
 800a03c:	9304      	str	r3, [sp, #16]
 800a03e:	9307      	str	r3, [sp, #28]
 800a040:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a044:	9002      	str	r0, [sp, #8]
 800a046:	9006      	str	r0, [sp, #24]
 800a048:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a04c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a04e:	ab21      	add	r3, sp, #132	; 0x84
 800a050:	a902      	add	r1, sp, #8
 800a052:	4628      	mov	r0, r5
 800a054:	9301      	str	r3, [sp, #4]
 800a056:	f000 f993 	bl	800a380 <_svfiprintf_r>
 800a05a:	1c43      	adds	r3, r0, #1
 800a05c:	bfbc      	itt	lt
 800a05e:	238b      	movlt	r3, #139	; 0x8b
 800a060:	602b      	strlt	r3, [r5, #0]
 800a062:	2c00      	cmp	r4, #0
 800a064:	d0dd      	beq.n	800a022 <sniprintf+0x16>
 800a066:	9b02      	ldr	r3, [sp, #8]
 800a068:	2200      	movs	r2, #0
 800a06a:	701a      	strb	r2, [r3, #0]
 800a06c:	e7d9      	b.n	800a022 <sniprintf+0x16>
 800a06e:	bf00      	nop
 800a070:	20000180 	.word	0x20000180

0800a074 <memset>:
 800a074:	4402      	add	r2, r0
 800a076:	4603      	mov	r3, r0
 800a078:	4293      	cmp	r3, r2
 800a07a:	d100      	bne.n	800a07e <memset+0xa>
 800a07c:	4770      	bx	lr
 800a07e:	f803 1b01 	strb.w	r1, [r3], #1
 800a082:	e7f9      	b.n	800a078 <memset+0x4>

0800a084 <__errno>:
 800a084:	4b01      	ldr	r3, [pc, #4]	; (800a08c <__errno+0x8>)
 800a086:	6818      	ldr	r0, [r3, #0]
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop
 800a08c:	20000180 	.word	0x20000180

0800a090 <__libc_init_array>:
 800a090:	b570      	push	{r4, r5, r6, lr}
 800a092:	4d0d      	ldr	r5, [pc, #52]	; (800a0c8 <__libc_init_array+0x38>)
 800a094:	4c0d      	ldr	r4, [pc, #52]	; (800a0cc <__libc_init_array+0x3c>)
 800a096:	1b64      	subs	r4, r4, r5
 800a098:	10a4      	asrs	r4, r4, #2
 800a09a:	2600      	movs	r6, #0
 800a09c:	42a6      	cmp	r6, r4
 800a09e:	d109      	bne.n	800a0b4 <__libc_init_array+0x24>
 800a0a0:	4d0b      	ldr	r5, [pc, #44]	; (800a0d0 <__libc_init_array+0x40>)
 800a0a2:	4c0c      	ldr	r4, [pc, #48]	; (800a0d4 <__libc_init_array+0x44>)
 800a0a4:	f000 fcec 	bl	800aa80 <_init>
 800a0a8:	1b64      	subs	r4, r4, r5
 800a0aa:	10a4      	asrs	r4, r4, #2
 800a0ac:	2600      	movs	r6, #0
 800a0ae:	42a6      	cmp	r6, r4
 800a0b0:	d105      	bne.n	800a0be <__libc_init_array+0x2e>
 800a0b2:	bd70      	pop	{r4, r5, r6, pc}
 800a0b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0b8:	4798      	blx	r3
 800a0ba:	3601      	adds	r6, #1
 800a0bc:	e7ee      	b.n	800a09c <__libc_init_array+0xc>
 800a0be:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0c2:	4798      	blx	r3
 800a0c4:	3601      	adds	r6, #1
 800a0c6:	e7f2      	b.n	800a0ae <__libc_init_array+0x1e>
 800a0c8:	0800ae38 	.word	0x0800ae38
 800a0cc:	0800ae38 	.word	0x0800ae38
 800a0d0:	0800ae38 	.word	0x0800ae38
 800a0d4:	0800ae3c 	.word	0x0800ae3c

0800a0d8 <__retarget_lock_acquire_recursive>:
 800a0d8:	4770      	bx	lr

0800a0da <__retarget_lock_release_recursive>:
 800a0da:	4770      	bx	lr

0800a0dc <_free_r>:
 800a0dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0de:	2900      	cmp	r1, #0
 800a0e0:	d044      	beq.n	800a16c <_free_r+0x90>
 800a0e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0e6:	9001      	str	r0, [sp, #4]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f1a1 0404 	sub.w	r4, r1, #4
 800a0ee:	bfb8      	it	lt
 800a0f0:	18e4      	addlt	r4, r4, r3
 800a0f2:	f000 f8df 	bl	800a2b4 <__malloc_lock>
 800a0f6:	4a1e      	ldr	r2, [pc, #120]	; (800a170 <_free_r+0x94>)
 800a0f8:	9801      	ldr	r0, [sp, #4]
 800a0fa:	6813      	ldr	r3, [r2, #0]
 800a0fc:	b933      	cbnz	r3, 800a10c <_free_r+0x30>
 800a0fe:	6063      	str	r3, [r4, #4]
 800a100:	6014      	str	r4, [r2, #0]
 800a102:	b003      	add	sp, #12
 800a104:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a108:	f000 b8da 	b.w	800a2c0 <__malloc_unlock>
 800a10c:	42a3      	cmp	r3, r4
 800a10e:	d908      	bls.n	800a122 <_free_r+0x46>
 800a110:	6825      	ldr	r5, [r4, #0]
 800a112:	1961      	adds	r1, r4, r5
 800a114:	428b      	cmp	r3, r1
 800a116:	bf01      	itttt	eq
 800a118:	6819      	ldreq	r1, [r3, #0]
 800a11a:	685b      	ldreq	r3, [r3, #4]
 800a11c:	1949      	addeq	r1, r1, r5
 800a11e:	6021      	streq	r1, [r4, #0]
 800a120:	e7ed      	b.n	800a0fe <_free_r+0x22>
 800a122:	461a      	mov	r2, r3
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	b10b      	cbz	r3, 800a12c <_free_r+0x50>
 800a128:	42a3      	cmp	r3, r4
 800a12a:	d9fa      	bls.n	800a122 <_free_r+0x46>
 800a12c:	6811      	ldr	r1, [r2, #0]
 800a12e:	1855      	adds	r5, r2, r1
 800a130:	42a5      	cmp	r5, r4
 800a132:	d10b      	bne.n	800a14c <_free_r+0x70>
 800a134:	6824      	ldr	r4, [r4, #0]
 800a136:	4421      	add	r1, r4
 800a138:	1854      	adds	r4, r2, r1
 800a13a:	42a3      	cmp	r3, r4
 800a13c:	6011      	str	r1, [r2, #0]
 800a13e:	d1e0      	bne.n	800a102 <_free_r+0x26>
 800a140:	681c      	ldr	r4, [r3, #0]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	6053      	str	r3, [r2, #4]
 800a146:	440c      	add	r4, r1
 800a148:	6014      	str	r4, [r2, #0]
 800a14a:	e7da      	b.n	800a102 <_free_r+0x26>
 800a14c:	d902      	bls.n	800a154 <_free_r+0x78>
 800a14e:	230c      	movs	r3, #12
 800a150:	6003      	str	r3, [r0, #0]
 800a152:	e7d6      	b.n	800a102 <_free_r+0x26>
 800a154:	6825      	ldr	r5, [r4, #0]
 800a156:	1961      	adds	r1, r4, r5
 800a158:	428b      	cmp	r3, r1
 800a15a:	bf04      	itt	eq
 800a15c:	6819      	ldreq	r1, [r3, #0]
 800a15e:	685b      	ldreq	r3, [r3, #4]
 800a160:	6063      	str	r3, [r4, #4]
 800a162:	bf04      	itt	eq
 800a164:	1949      	addeq	r1, r1, r5
 800a166:	6021      	streq	r1, [r4, #0]
 800a168:	6054      	str	r4, [r2, #4]
 800a16a:	e7ca      	b.n	800a102 <_free_r+0x26>
 800a16c:	b003      	add	sp, #12
 800a16e:	bd30      	pop	{r4, r5, pc}
 800a170:	20000664 	.word	0x20000664

0800a174 <sbrk_aligned>:
 800a174:	b570      	push	{r4, r5, r6, lr}
 800a176:	4e0e      	ldr	r6, [pc, #56]	; (800a1b0 <sbrk_aligned+0x3c>)
 800a178:	460c      	mov	r4, r1
 800a17a:	6831      	ldr	r1, [r6, #0]
 800a17c:	4605      	mov	r5, r0
 800a17e:	b911      	cbnz	r1, 800a186 <sbrk_aligned+0x12>
 800a180:	f000 fba6 	bl	800a8d0 <_sbrk_r>
 800a184:	6030      	str	r0, [r6, #0]
 800a186:	4621      	mov	r1, r4
 800a188:	4628      	mov	r0, r5
 800a18a:	f000 fba1 	bl	800a8d0 <_sbrk_r>
 800a18e:	1c43      	adds	r3, r0, #1
 800a190:	d00a      	beq.n	800a1a8 <sbrk_aligned+0x34>
 800a192:	1cc4      	adds	r4, r0, #3
 800a194:	f024 0403 	bic.w	r4, r4, #3
 800a198:	42a0      	cmp	r0, r4
 800a19a:	d007      	beq.n	800a1ac <sbrk_aligned+0x38>
 800a19c:	1a21      	subs	r1, r4, r0
 800a19e:	4628      	mov	r0, r5
 800a1a0:	f000 fb96 	bl	800a8d0 <_sbrk_r>
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	d101      	bne.n	800a1ac <sbrk_aligned+0x38>
 800a1a8:	f04f 34ff 	mov.w	r4, #4294967295
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	bd70      	pop	{r4, r5, r6, pc}
 800a1b0:	20000668 	.word	0x20000668

0800a1b4 <_malloc_r>:
 800a1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1b8:	1ccd      	adds	r5, r1, #3
 800a1ba:	f025 0503 	bic.w	r5, r5, #3
 800a1be:	3508      	adds	r5, #8
 800a1c0:	2d0c      	cmp	r5, #12
 800a1c2:	bf38      	it	cc
 800a1c4:	250c      	movcc	r5, #12
 800a1c6:	2d00      	cmp	r5, #0
 800a1c8:	4607      	mov	r7, r0
 800a1ca:	db01      	blt.n	800a1d0 <_malloc_r+0x1c>
 800a1cc:	42a9      	cmp	r1, r5
 800a1ce:	d905      	bls.n	800a1dc <_malloc_r+0x28>
 800a1d0:	230c      	movs	r3, #12
 800a1d2:	603b      	str	r3, [r7, #0]
 800a1d4:	2600      	movs	r6, #0
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a2b0 <_malloc_r+0xfc>
 800a1e0:	f000 f868 	bl	800a2b4 <__malloc_lock>
 800a1e4:	f8d8 3000 	ldr.w	r3, [r8]
 800a1e8:	461c      	mov	r4, r3
 800a1ea:	bb5c      	cbnz	r4, 800a244 <_malloc_r+0x90>
 800a1ec:	4629      	mov	r1, r5
 800a1ee:	4638      	mov	r0, r7
 800a1f0:	f7ff ffc0 	bl	800a174 <sbrk_aligned>
 800a1f4:	1c43      	adds	r3, r0, #1
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	d155      	bne.n	800a2a6 <_malloc_r+0xf2>
 800a1fa:	f8d8 4000 	ldr.w	r4, [r8]
 800a1fe:	4626      	mov	r6, r4
 800a200:	2e00      	cmp	r6, #0
 800a202:	d145      	bne.n	800a290 <_malloc_r+0xdc>
 800a204:	2c00      	cmp	r4, #0
 800a206:	d048      	beq.n	800a29a <_malloc_r+0xe6>
 800a208:	6823      	ldr	r3, [r4, #0]
 800a20a:	4631      	mov	r1, r6
 800a20c:	4638      	mov	r0, r7
 800a20e:	eb04 0903 	add.w	r9, r4, r3
 800a212:	f000 fb5d 	bl	800a8d0 <_sbrk_r>
 800a216:	4581      	cmp	r9, r0
 800a218:	d13f      	bne.n	800a29a <_malloc_r+0xe6>
 800a21a:	6821      	ldr	r1, [r4, #0]
 800a21c:	1a6d      	subs	r5, r5, r1
 800a21e:	4629      	mov	r1, r5
 800a220:	4638      	mov	r0, r7
 800a222:	f7ff ffa7 	bl	800a174 <sbrk_aligned>
 800a226:	3001      	adds	r0, #1
 800a228:	d037      	beq.n	800a29a <_malloc_r+0xe6>
 800a22a:	6823      	ldr	r3, [r4, #0]
 800a22c:	442b      	add	r3, r5
 800a22e:	6023      	str	r3, [r4, #0]
 800a230:	f8d8 3000 	ldr.w	r3, [r8]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d038      	beq.n	800a2aa <_malloc_r+0xf6>
 800a238:	685a      	ldr	r2, [r3, #4]
 800a23a:	42a2      	cmp	r2, r4
 800a23c:	d12b      	bne.n	800a296 <_malloc_r+0xe2>
 800a23e:	2200      	movs	r2, #0
 800a240:	605a      	str	r2, [r3, #4]
 800a242:	e00f      	b.n	800a264 <_malloc_r+0xb0>
 800a244:	6822      	ldr	r2, [r4, #0]
 800a246:	1b52      	subs	r2, r2, r5
 800a248:	d41f      	bmi.n	800a28a <_malloc_r+0xd6>
 800a24a:	2a0b      	cmp	r2, #11
 800a24c:	d917      	bls.n	800a27e <_malloc_r+0xca>
 800a24e:	1961      	adds	r1, r4, r5
 800a250:	42a3      	cmp	r3, r4
 800a252:	6025      	str	r5, [r4, #0]
 800a254:	bf18      	it	ne
 800a256:	6059      	strne	r1, [r3, #4]
 800a258:	6863      	ldr	r3, [r4, #4]
 800a25a:	bf08      	it	eq
 800a25c:	f8c8 1000 	streq.w	r1, [r8]
 800a260:	5162      	str	r2, [r4, r5]
 800a262:	604b      	str	r3, [r1, #4]
 800a264:	4638      	mov	r0, r7
 800a266:	f104 060b 	add.w	r6, r4, #11
 800a26a:	f000 f829 	bl	800a2c0 <__malloc_unlock>
 800a26e:	f026 0607 	bic.w	r6, r6, #7
 800a272:	1d23      	adds	r3, r4, #4
 800a274:	1af2      	subs	r2, r6, r3
 800a276:	d0ae      	beq.n	800a1d6 <_malloc_r+0x22>
 800a278:	1b9b      	subs	r3, r3, r6
 800a27a:	50a3      	str	r3, [r4, r2]
 800a27c:	e7ab      	b.n	800a1d6 <_malloc_r+0x22>
 800a27e:	42a3      	cmp	r3, r4
 800a280:	6862      	ldr	r2, [r4, #4]
 800a282:	d1dd      	bne.n	800a240 <_malloc_r+0x8c>
 800a284:	f8c8 2000 	str.w	r2, [r8]
 800a288:	e7ec      	b.n	800a264 <_malloc_r+0xb0>
 800a28a:	4623      	mov	r3, r4
 800a28c:	6864      	ldr	r4, [r4, #4]
 800a28e:	e7ac      	b.n	800a1ea <_malloc_r+0x36>
 800a290:	4634      	mov	r4, r6
 800a292:	6876      	ldr	r6, [r6, #4]
 800a294:	e7b4      	b.n	800a200 <_malloc_r+0x4c>
 800a296:	4613      	mov	r3, r2
 800a298:	e7cc      	b.n	800a234 <_malloc_r+0x80>
 800a29a:	230c      	movs	r3, #12
 800a29c:	603b      	str	r3, [r7, #0]
 800a29e:	4638      	mov	r0, r7
 800a2a0:	f000 f80e 	bl	800a2c0 <__malloc_unlock>
 800a2a4:	e797      	b.n	800a1d6 <_malloc_r+0x22>
 800a2a6:	6025      	str	r5, [r4, #0]
 800a2a8:	e7dc      	b.n	800a264 <_malloc_r+0xb0>
 800a2aa:	605b      	str	r3, [r3, #4]
 800a2ac:	deff      	udf	#255	; 0xff
 800a2ae:	bf00      	nop
 800a2b0:	20000664 	.word	0x20000664

0800a2b4 <__malloc_lock>:
 800a2b4:	4801      	ldr	r0, [pc, #4]	; (800a2bc <__malloc_lock+0x8>)
 800a2b6:	f7ff bf0f 	b.w	800a0d8 <__retarget_lock_acquire_recursive>
 800a2ba:	bf00      	nop
 800a2bc:	20000660 	.word	0x20000660

0800a2c0 <__malloc_unlock>:
 800a2c0:	4801      	ldr	r0, [pc, #4]	; (800a2c8 <__malloc_unlock+0x8>)
 800a2c2:	f7ff bf0a 	b.w	800a0da <__retarget_lock_release_recursive>
 800a2c6:	bf00      	nop
 800a2c8:	20000660 	.word	0x20000660

0800a2cc <__ssputs_r>:
 800a2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2d0:	688e      	ldr	r6, [r1, #8]
 800a2d2:	461f      	mov	r7, r3
 800a2d4:	42be      	cmp	r6, r7
 800a2d6:	680b      	ldr	r3, [r1, #0]
 800a2d8:	4682      	mov	sl, r0
 800a2da:	460c      	mov	r4, r1
 800a2dc:	4690      	mov	r8, r2
 800a2de:	d82c      	bhi.n	800a33a <__ssputs_r+0x6e>
 800a2e0:	898a      	ldrh	r2, [r1, #12]
 800a2e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2e6:	d026      	beq.n	800a336 <__ssputs_r+0x6a>
 800a2e8:	6965      	ldr	r5, [r4, #20]
 800a2ea:	6909      	ldr	r1, [r1, #16]
 800a2ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2f0:	eba3 0901 	sub.w	r9, r3, r1
 800a2f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2f8:	1c7b      	adds	r3, r7, #1
 800a2fa:	444b      	add	r3, r9
 800a2fc:	106d      	asrs	r5, r5, #1
 800a2fe:	429d      	cmp	r5, r3
 800a300:	bf38      	it	cc
 800a302:	461d      	movcc	r5, r3
 800a304:	0553      	lsls	r3, r2, #21
 800a306:	d527      	bpl.n	800a358 <__ssputs_r+0x8c>
 800a308:	4629      	mov	r1, r5
 800a30a:	f7ff ff53 	bl	800a1b4 <_malloc_r>
 800a30e:	4606      	mov	r6, r0
 800a310:	b360      	cbz	r0, 800a36c <__ssputs_r+0xa0>
 800a312:	6921      	ldr	r1, [r4, #16]
 800a314:	464a      	mov	r2, r9
 800a316:	f000 faeb 	bl	800a8f0 <memcpy>
 800a31a:	89a3      	ldrh	r3, [r4, #12]
 800a31c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a324:	81a3      	strh	r3, [r4, #12]
 800a326:	6126      	str	r6, [r4, #16]
 800a328:	6165      	str	r5, [r4, #20]
 800a32a:	444e      	add	r6, r9
 800a32c:	eba5 0509 	sub.w	r5, r5, r9
 800a330:	6026      	str	r6, [r4, #0]
 800a332:	60a5      	str	r5, [r4, #8]
 800a334:	463e      	mov	r6, r7
 800a336:	42be      	cmp	r6, r7
 800a338:	d900      	bls.n	800a33c <__ssputs_r+0x70>
 800a33a:	463e      	mov	r6, r7
 800a33c:	6820      	ldr	r0, [r4, #0]
 800a33e:	4632      	mov	r2, r6
 800a340:	4641      	mov	r1, r8
 800a342:	f000 faab 	bl	800a89c <memmove>
 800a346:	68a3      	ldr	r3, [r4, #8]
 800a348:	1b9b      	subs	r3, r3, r6
 800a34a:	60a3      	str	r3, [r4, #8]
 800a34c:	6823      	ldr	r3, [r4, #0]
 800a34e:	4433      	add	r3, r6
 800a350:	6023      	str	r3, [r4, #0]
 800a352:	2000      	movs	r0, #0
 800a354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a358:	462a      	mov	r2, r5
 800a35a:	f000 fad7 	bl	800a90c <_realloc_r>
 800a35e:	4606      	mov	r6, r0
 800a360:	2800      	cmp	r0, #0
 800a362:	d1e0      	bne.n	800a326 <__ssputs_r+0x5a>
 800a364:	6921      	ldr	r1, [r4, #16]
 800a366:	4650      	mov	r0, sl
 800a368:	f7ff feb8 	bl	800a0dc <_free_r>
 800a36c:	230c      	movs	r3, #12
 800a36e:	f8ca 3000 	str.w	r3, [sl]
 800a372:	89a3      	ldrh	r3, [r4, #12]
 800a374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a378:	81a3      	strh	r3, [r4, #12]
 800a37a:	f04f 30ff 	mov.w	r0, #4294967295
 800a37e:	e7e9      	b.n	800a354 <__ssputs_r+0x88>

0800a380 <_svfiprintf_r>:
 800a380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a384:	4698      	mov	r8, r3
 800a386:	898b      	ldrh	r3, [r1, #12]
 800a388:	061b      	lsls	r3, r3, #24
 800a38a:	b09d      	sub	sp, #116	; 0x74
 800a38c:	4607      	mov	r7, r0
 800a38e:	460d      	mov	r5, r1
 800a390:	4614      	mov	r4, r2
 800a392:	d50e      	bpl.n	800a3b2 <_svfiprintf_r+0x32>
 800a394:	690b      	ldr	r3, [r1, #16]
 800a396:	b963      	cbnz	r3, 800a3b2 <_svfiprintf_r+0x32>
 800a398:	2140      	movs	r1, #64	; 0x40
 800a39a:	f7ff ff0b 	bl	800a1b4 <_malloc_r>
 800a39e:	6028      	str	r0, [r5, #0]
 800a3a0:	6128      	str	r0, [r5, #16]
 800a3a2:	b920      	cbnz	r0, 800a3ae <_svfiprintf_r+0x2e>
 800a3a4:	230c      	movs	r3, #12
 800a3a6:	603b      	str	r3, [r7, #0]
 800a3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ac:	e0d0      	b.n	800a550 <_svfiprintf_r+0x1d0>
 800a3ae:	2340      	movs	r3, #64	; 0x40
 800a3b0:	616b      	str	r3, [r5, #20]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a3b6:	2320      	movs	r3, #32
 800a3b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3c0:	2330      	movs	r3, #48	; 0x30
 800a3c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a568 <_svfiprintf_r+0x1e8>
 800a3c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3ca:	f04f 0901 	mov.w	r9, #1
 800a3ce:	4623      	mov	r3, r4
 800a3d0:	469a      	mov	sl, r3
 800a3d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3d6:	b10a      	cbz	r2, 800a3dc <_svfiprintf_r+0x5c>
 800a3d8:	2a25      	cmp	r2, #37	; 0x25
 800a3da:	d1f9      	bne.n	800a3d0 <_svfiprintf_r+0x50>
 800a3dc:	ebba 0b04 	subs.w	fp, sl, r4
 800a3e0:	d00b      	beq.n	800a3fa <_svfiprintf_r+0x7a>
 800a3e2:	465b      	mov	r3, fp
 800a3e4:	4622      	mov	r2, r4
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	4638      	mov	r0, r7
 800a3ea:	f7ff ff6f 	bl	800a2cc <__ssputs_r>
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	f000 80a9 	beq.w	800a546 <_svfiprintf_r+0x1c6>
 800a3f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3f6:	445a      	add	r2, fp
 800a3f8:	9209      	str	r2, [sp, #36]	; 0x24
 800a3fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f000 80a1 	beq.w	800a546 <_svfiprintf_r+0x1c6>
 800a404:	2300      	movs	r3, #0
 800a406:	f04f 32ff 	mov.w	r2, #4294967295
 800a40a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a40e:	f10a 0a01 	add.w	sl, sl, #1
 800a412:	9304      	str	r3, [sp, #16]
 800a414:	9307      	str	r3, [sp, #28]
 800a416:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a41a:	931a      	str	r3, [sp, #104]	; 0x68
 800a41c:	4654      	mov	r4, sl
 800a41e:	2205      	movs	r2, #5
 800a420:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a424:	4850      	ldr	r0, [pc, #320]	; (800a568 <_svfiprintf_r+0x1e8>)
 800a426:	f7f5 ff0b 	bl	8000240 <memchr>
 800a42a:	9a04      	ldr	r2, [sp, #16]
 800a42c:	b9d8      	cbnz	r0, 800a466 <_svfiprintf_r+0xe6>
 800a42e:	06d0      	lsls	r0, r2, #27
 800a430:	bf44      	itt	mi
 800a432:	2320      	movmi	r3, #32
 800a434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a438:	0711      	lsls	r1, r2, #28
 800a43a:	bf44      	itt	mi
 800a43c:	232b      	movmi	r3, #43	; 0x2b
 800a43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a442:	f89a 3000 	ldrb.w	r3, [sl]
 800a446:	2b2a      	cmp	r3, #42	; 0x2a
 800a448:	d015      	beq.n	800a476 <_svfiprintf_r+0xf6>
 800a44a:	9a07      	ldr	r2, [sp, #28]
 800a44c:	4654      	mov	r4, sl
 800a44e:	2000      	movs	r0, #0
 800a450:	f04f 0c0a 	mov.w	ip, #10
 800a454:	4621      	mov	r1, r4
 800a456:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a45a:	3b30      	subs	r3, #48	; 0x30
 800a45c:	2b09      	cmp	r3, #9
 800a45e:	d94d      	bls.n	800a4fc <_svfiprintf_r+0x17c>
 800a460:	b1b0      	cbz	r0, 800a490 <_svfiprintf_r+0x110>
 800a462:	9207      	str	r2, [sp, #28]
 800a464:	e014      	b.n	800a490 <_svfiprintf_r+0x110>
 800a466:	eba0 0308 	sub.w	r3, r0, r8
 800a46a:	fa09 f303 	lsl.w	r3, r9, r3
 800a46e:	4313      	orrs	r3, r2
 800a470:	9304      	str	r3, [sp, #16]
 800a472:	46a2      	mov	sl, r4
 800a474:	e7d2      	b.n	800a41c <_svfiprintf_r+0x9c>
 800a476:	9b03      	ldr	r3, [sp, #12]
 800a478:	1d19      	adds	r1, r3, #4
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	9103      	str	r1, [sp, #12]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	bfbb      	ittet	lt
 800a482:	425b      	neglt	r3, r3
 800a484:	f042 0202 	orrlt.w	r2, r2, #2
 800a488:	9307      	strge	r3, [sp, #28]
 800a48a:	9307      	strlt	r3, [sp, #28]
 800a48c:	bfb8      	it	lt
 800a48e:	9204      	strlt	r2, [sp, #16]
 800a490:	7823      	ldrb	r3, [r4, #0]
 800a492:	2b2e      	cmp	r3, #46	; 0x2e
 800a494:	d10c      	bne.n	800a4b0 <_svfiprintf_r+0x130>
 800a496:	7863      	ldrb	r3, [r4, #1]
 800a498:	2b2a      	cmp	r3, #42	; 0x2a
 800a49a:	d134      	bne.n	800a506 <_svfiprintf_r+0x186>
 800a49c:	9b03      	ldr	r3, [sp, #12]
 800a49e:	1d1a      	adds	r2, r3, #4
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	9203      	str	r2, [sp, #12]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	bfb8      	it	lt
 800a4a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4ac:	3402      	adds	r4, #2
 800a4ae:	9305      	str	r3, [sp, #20]
 800a4b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a578 <_svfiprintf_r+0x1f8>
 800a4b4:	7821      	ldrb	r1, [r4, #0]
 800a4b6:	2203      	movs	r2, #3
 800a4b8:	4650      	mov	r0, sl
 800a4ba:	f7f5 fec1 	bl	8000240 <memchr>
 800a4be:	b138      	cbz	r0, 800a4d0 <_svfiprintf_r+0x150>
 800a4c0:	9b04      	ldr	r3, [sp, #16]
 800a4c2:	eba0 000a 	sub.w	r0, r0, sl
 800a4c6:	2240      	movs	r2, #64	; 0x40
 800a4c8:	4082      	lsls	r2, r0
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	3401      	adds	r4, #1
 800a4ce:	9304      	str	r3, [sp, #16]
 800a4d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4d4:	4825      	ldr	r0, [pc, #148]	; (800a56c <_svfiprintf_r+0x1ec>)
 800a4d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4da:	2206      	movs	r2, #6
 800a4dc:	f7f5 feb0 	bl	8000240 <memchr>
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	d038      	beq.n	800a556 <_svfiprintf_r+0x1d6>
 800a4e4:	4b22      	ldr	r3, [pc, #136]	; (800a570 <_svfiprintf_r+0x1f0>)
 800a4e6:	bb1b      	cbnz	r3, 800a530 <_svfiprintf_r+0x1b0>
 800a4e8:	9b03      	ldr	r3, [sp, #12]
 800a4ea:	3307      	adds	r3, #7
 800a4ec:	f023 0307 	bic.w	r3, r3, #7
 800a4f0:	3308      	adds	r3, #8
 800a4f2:	9303      	str	r3, [sp, #12]
 800a4f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f6:	4433      	add	r3, r6
 800a4f8:	9309      	str	r3, [sp, #36]	; 0x24
 800a4fa:	e768      	b.n	800a3ce <_svfiprintf_r+0x4e>
 800a4fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a500:	460c      	mov	r4, r1
 800a502:	2001      	movs	r0, #1
 800a504:	e7a6      	b.n	800a454 <_svfiprintf_r+0xd4>
 800a506:	2300      	movs	r3, #0
 800a508:	3401      	adds	r4, #1
 800a50a:	9305      	str	r3, [sp, #20]
 800a50c:	4619      	mov	r1, r3
 800a50e:	f04f 0c0a 	mov.w	ip, #10
 800a512:	4620      	mov	r0, r4
 800a514:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a518:	3a30      	subs	r2, #48	; 0x30
 800a51a:	2a09      	cmp	r2, #9
 800a51c:	d903      	bls.n	800a526 <_svfiprintf_r+0x1a6>
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d0c6      	beq.n	800a4b0 <_svfiprintf_r+0x130>
 800a522:	9105      	str	r1, [sp, #20]
 800a524:	e7c4      	b.n	800a4b0 <_svfiprintf_r+0x130>
 800a526:	fb0c 2101 	mla	r1, ip, r1, r2
 800a52a:	4604      	mov	r4, r0
 800a52c:	2301      	movs	r3, #1
 800a52e:	e7f0      	b.n	800a512 <_svfiprintf_r+0x192>
 800a530:	ab03      	add	r3, sp, #12
 800a532:	9300      	str	r3, [sp, #0]
 800a534:	462a      	mov	r2, r5
 800a536:	4b0f      	ldr	r3, [pc, #60]	; (800a574 <_svfiprintf_r+0x1f4>)
 800a538:	a904      	add	r1, sp, #16
 800a53a:	4638      	mov	r0, r7
 800a53c:	f3af 8000 	nop.w
 800a540:	1c42      	adds	r2, r0, #1
 800a542:	4606      	mov	r6, r0
 800a544:	d1d6      	bne.n	800a4f4 <_svfiprintf_r+0x174>
 800a546:	89ab      	ldrh	r3, [r5, #12]
 800a548:	065b      	lsls	r3, r3, #25
 800a54a:	f53f af2d 	bmi.w	800a3a8 <_svfiprintf_r+0x28>
 800a54e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a550:	b01d      	add	sp, #116	; 0x74
 800a552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a556:	ab03      	add	r3, sp, #12
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	462a      	mov	r2, r5
 800a55c:	4b05      	ldr	r3, [pc, #20]	; (800a574 <_svfiprintf_r+0x1f4>)
 800a55e:	a904      	add	r1, sp, #16
 800a560:	4638      	mov	r0, r7
 800a562:	f000 f879 	bl	800a658 <_printf_i>
 800a566:	e7eb      	b.n	800a540 <_svfiprintf_r+0x1c0>
 800a568:	0800adfd 	.word	0x0800adfd
 800a56c:	0800ae07 	.word	0x0800ae07
 800a570:	00000000 	.word	0x00000000
 800a574:	0800a2cd 	.word	0x0800a2cd
 800a578:	0800ae03 	.word	0x0800ae03

0800a57c <_printf_common>:
 800a57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a580:	4616      	mov	r6, r2
 800a582:	4699      	mov	r9, r3
 800a584:	688a      	ldr	r2, [r1, #8]
 800a586:	690b      	ldr	r3, [r1, #16]
 800a588:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a58c:	4293      	cmp	r3, r2
 800a58e:	bfb8      	it	lt
 800a590:	4613      	movlt	r3, r2
 800a592:	6033      	str	r3, [r6, #0]
 800a594:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a598:	4607      	mov	r7, r0
 800a59a:	460c      	mov	r4, r1
 800a59c:	b10a      	cbz	r2, 800a5a2 <_printf_common+0x26>
 800a59e:	3301      	adds	r3, #1
 800a5a0:	6033      	str	r3, [r6, #0]
 800a5a2:	6823      	ldr	r3, [r4, #0]
 800a5a4:	0699      	lsls	r1, r3, #26
 800a5a6:	bf42      	ittt	mi
 800a5a8:	6833      	ldrmi	r3, [r6, #0]
 800a5aa:	3302      	addmi	r3, #2
 800a5ac:	6033      	strmi	r3, [r6, #0]
 800a5ae:	6825      	ldr	r5, [r4, #0]
 800a5b0:	f015 0506 	ands.w	r5, r5, #6
 800a5b4:	d106      	bne.n	800a5c4 <_printf_common+0x48>
 800a5b6:	f104 0a19 	add.w	sl, r4, #25
 800a5ba:	68e3      	ldr	r3, [r4, #12]
 800a5bc:	6832      	ldr	r2, [r6, #0]
 800a5be:	1a9b      	subs	r3, r3, r2
 800a5c0:	42ab      	cmp	r3, r5
 800a5c2:	dc26      	bgt.n	800a612 <_printf_common+0x96>
 800a5c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5c8:	1e13      	subs	r3, r2, #0
 800a5ca:	6822      	ldr	r2, [r4, #0]
 800a5cc:	bf18      	it	ne
 800a5ce:	2301      	movne	r3, #1
 800a5d0:	0692      	lsls	r2, r2, #26
 800a5d2:	d42b      	bmi.n	800a62c <_printf_common+0xb0>
 800a5d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5d8:	4649      	mov	r1, r9
 800a5da:	4638      	mov	r0, r7
 800a5dc:	47c0      	blx	r8
 800a5de:	3001      	adds	r0, #1
 800a5e0:	d01e      	beq.n	800a620 <_printf_common+0xa4>
 800a5e2:	6823      	ldr	r3, [r4, #0]
 800a5e4:	6922      	ldr	r2, [r4, #16]
 800a5e6:	f003 0306 	and.w	r3, r3, #6
 800a5ea:	2b04      	cmp	r3, #4
 800a5ec:	bf02      	ittt	eq
 800a5ee:	68e5      	ldreq	r5, [r4, #12]
 800a5f0:	6833      	ldreq	r3, [r6, #0]
 800a5f2:	1aed      	subeq	r5, r5, r3
 800a5f4:	68a3      	ldr	r3, [r4, #8]
 800a5f6:	bf0c      	ite	eq
 800a5f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5fc:	2500      	movne	r5, #0
 800a5fe:	4293      	cmp	r3, r2
 800a600:	bfc4      	itt	gt
 800a602:	1a9b      	subgt	r3, r3, r2
 800a604:	18ed      	addgt	r5, r5, r3
 800a606:	2600      	movs	r6, #0
 800a608:	341a      	adds	r4, #26
 800a60a:	42b5      	cmp	r5, r6
 800a60c:	d11a      	bne.n	800a644 <_printf_common+0xc8>
 800a60e:	2000      	movs	r0, #0
 800a610:	e008      	b.n	800a624 <_printf_common+0xa8>
 800a612:	2301      	movs	r3, #1
 800a614:	4652      	mov	r2, sl
 800a616:	4649      	mov	r1, r9
 800a618:	4638      	mov	r0, r7
 800a61a:	47c0      	blx	r8
 800a61c:	3001      	adds	r0, #1
 800a61e:	d103      	bne.n	800a628 <_printf_common+0xac>
 800a620:	f04f 30ff 	mov.w	r0, #4294967295
 800a624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a628:	3501      	adds	r5, #1
 800a62a:	e7c6      	b.n	800a5ba <_printf_common+0x3e>
 800a62c:	18e1      	adds	r1, r4, r3
 800a62e:	1c5a      	adds	r2, r3, #1
 800a630:	2030      	movs	r0, #48	; 0x30
 800a632:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a636:	4422      	add	r2, r4
 800a638:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a63c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a640:	3302      	adds	r3, #2
 800a642:	e7c7      	b.n	800a5d4 <_printf_common+0x58>
 800a644:	2301      	movs	r3, #1
 800a646:	4622      	mov	r2, r4
 800a648:	4649      	mov	r1, r9
 800a64a:	4638      	mov	r0, r7
 800a64c:	47c0      	blx	r8
 800a64e:	3001      	adds	r0, #1
 800a650:	d0e6      	beq.n	800a620 <_printf_common+0xa4>
 800a652:	3601      	adds	r6, #1
 800a654:	e7d9      	b.n	800a60a <_printf_common+0x8e>
	...

0800a658 <_printf_i>:
 800a658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a65c:	7e0f      	ldrb	r7, [r1, #24]
 800a65e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a660:	2f78      	cmp	r7, #120	; 0x78
 800a662:	4691      	mov	r9, r2
 800a664:	4680      	mov	r8, r0
 800a666:	460c      	mov	r4, r1
 800a668:	469a      	mov	sl, r3
 800a66a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a66e:	d807      	bhi.n	800a680 <_printf_i+0x28>
 800a670:	2f62      	cmp	r7, #98	; 0x62
 800a672:	d80a      	bhi.n	800a68a <_printf_i+0x32>
 800a674:	2f00      	cmp	r7, #0
 800a676:	f000 80d4 	beq.w	800a822 <_printf_i+0x1ca>
 800a67a:	2f58      	cmp	r7, #88	; 0x58
 800a67c:	f000 80c0 	beq.w	800a800 <_printf_i+0x1a8>
 800a680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a684:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a688:	e03a      	b.n	800a700 <_printf_i+0xa8>
 800a68a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a68e:	2b15      	cmp	r3, #21
 800a690:	d8f6      	bhi.n	800a680 <_printf_i+0x28>
 800a692:	a101      	add	r1, pc, #4	; (adr r1, 800a698 <_printf_i+0x40>)
 800a694:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a698:	0800a6f1 	.word	0x0800a6f1
 800a69c:	0800a705 	.word	0x0800a705
 800a6a0:	0800a681 	.word	0x0800a681
 800a6a4:	0800a681 	.word	0x0800a681
 800a6a8:	0800a681 	.word	0x0800a681
 800a6ac:	0800a681 	.word	0x0800a681
 800a6b0:	0800a705 	.word	0x0800a705
 800a6b4:	0800a681 	.word	0x0800a681
 800a6b8:	0800a681 	.word	0x0800a681
 800a6bc:	0800a681 	.word	0x0800a681
 800a6c0:	0800a681 	.word	0x0800a681
 800a6c4:	0800a809 	.word	0x0800a809
 800a6c8:	0800a731 	.word	0x0800a731
 800a6cc:	0800a7c3 	.word	0x0800a7c3
 800a6d0:	0800a681 	.word	0x0800a681
 800a6d4:	0800a681 	.word	0x0800a681
 800a6d8:	0800a82b 	.word	0x0800a82b
 800a6dc:	0800a681 	.word	0x0800a681
 800a6e0:	0800a731 	.word	0x0800a731
 800a6e4:	0800a681 	.word	0x0800a681
 800a6e8:	0800a681 	.word	0x0800a681
 800a6ec:	0800a7cb 	.word	0x0800a7cb
 800a6f0:	682b      	ldr	r3, [r5, #0]
 800a6f2:	1d1a      	adds	r2, r3, #4
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	602a      	str	r2, [r5, #0]
 800a6f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a700:	2301      	movs	r3, #1
 800a702:	e09f      	b.n	800a844 <_printf_i+0x1ec>
 800a704:	6820      	ldr	r0, [r4, #0]
 800a706:	682b      	ldr	r3, [r5, #0]
 800a708:	0607      	lsls	r7, r0, #24
 800a70a:	f103 0104 	add.w	r1, r3, #4
 800a70e:	6029      	str	r1, [r5, #0]
 800a710:	d501      	bpl.n	800a716 <_printf_i+0xbe>
 800a712:	681e      	ldr	r6, [r3, #0]
 800a714:	e003      	b.n	800a71e <_printf_i+0xc6>
 800a716:	0646      	lsls	r6, r0, #25
 800a718:	d5fb      	bpl.n	800a712 <_printf_i+0xba>
 800a71a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a71e:	2e00      	cmp	r6, #0
 800a720:	da03      	bge.n	800a72a <_printf_i+0xd2>
 800a722:	232d      	movs	r3, #45	; 0x2d
 800a724:	4276      	negs	r6, r6
 800a726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a72a:	485a      	ldr	r0, [pc, #360]	; (800a894 <_printf_i+0x23c>)
 800a72c:	230a      	movs	r3, #10
 800a72e:	e012      	b.n	800a756 <_printf_i+0xfe>
 800a730:	682b      	ldr	r3, [r5, #0]
 800a732:	6820      	ldr	r0, [r4, #0]
 800a734:	1d19      	adds	r1, r3, #4
 800a736:	6029      	str	r1, [r5, #0]
 800a738:	0605      	lsls	r5, r0, #24
 800a73a:	d501      	bpl.n	800a740 <_printf_i+0xe8>
 800a73c:	681e      	ldr	r6, [r3, #0]
 800a73e:	e002      	b.n	800a746 <_printf_i+0xee>
 800a740:	0641      	lsls	r1, r0, #25
 800a742:	d5fb      	bpl.n	800a73c <_printf_i+0xe4>
 800a744:	881e      	ldrh	r6, [r3, #0]
 800a746:	4853      	ldr	r0, [pc, #332]	; (800a894 <_printf_i+0x23c>)
 800a748:	2f6f      	cmp	r7, #111	; 0x6f
 800a74a:	bf0c      	ite	eq
 800a74c:	2308      	moveq	r3, #8
 800a74e:	230a      	movne	r3, #10
 800a750:	2100      	movs	r1, #0
 800a752:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a756:	6865      	ldr	r5, [r4, #4]
 800a758:	60a5      	str	r5, [r4, #8]
 800a75a:	2d00      	cmp	r5, #0
 800a75c:	bfa2      	ittt	ge
 800a75e:	6821      	ldrge	r1, [r4, #0]
 800a760:	f021 0104 	bicge.w	r1, r1, #4
 800a764:	6021      	strge	r1, [r4, #0]
 800a766:	b90e      	cbnz	r6, 800a76c <_printf_i+0x114>
 800a768:	2d00      	cmp	r5, #0
 800a76a:	d04b      	beq.n	800a804 <_printf_i+0x1ac>
 800a76c:	4615      	mov	r5, r2
 800a76e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a772:	fb03 6711 	mls	r7, r3, r1, r6
 800a776:	5dc7      	ldrb	r7, [r0, r7]
 800a778:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a77c:	4637      	mov	r7, r6
 800a77e:	42bb      	cmp	r3, r7
 800a780:	460e      	mov	r6, r1
 800a782:	d9f4      	bls.n	800a76e <_printf_i+0x116>
 800a784:	2b08      	cmp	r3, #8
 800a786:	d10b      	bne.n	800a7a0 <_printf_i+0x148>
 800a788:	6823      	ldr	r3, [r4, #0]
 800a78a:	07de      	lsls	r6, r3, #31
 800a78c:	d508      	bpl.n	800a7a0 <_printf_i+0x148>
 800a78e:	6923      	ldr	r3, [r4, #16]
 800a790:	6861      	ldr	r1, [r4, #4]
 800a792:	4299      	cmp	r1, r3
 800a794:	bfde      	ittt	le
 800a796:	2330      	movle	r3, #48	; 0x30
 800a798:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a79c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a7a0:	1b52      	subs	r2, r2, r5
 800a7a2:	6122      	str	r2, [r4, #16]
 800a7a4:	f8cd a000 	str.w	sl, [sp]
 800a7a8:	464b      	mov	r3, r9
 800a7aa:	aa03      	add	r2, sp, #12
 800a7ac:	4621      	mov	r1, r4
 800a7ae:	4640      	mov	r0, r8
 800a7b0:	f7ff fee4 	bl	800a57c <_printf_common>
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	d14a      	bne.n	800a84e <_printf_i+0x1f6>
 800a7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7bc:	b004      	add	sp, #16
 800a7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7c2:	6823      	ldr	r3, [r4, #0]
 800a7c4:	f043 0320 	orr.w	r3, r3, #32
 800a7c8:	6023      	str	r3, [r4, #0]
 800a7ca:	4833      	ldr	r0, [pc, #204]	; (800a898 <_printf_i+0x240>)
 800a7cc:	2778      	movs	r7, #120	; 0x78
 800a7ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a7d2:	6823      	ldr	r3, [r4, #0]
 800a7d4:	6829      	ldr	r1, [r5, #0]
 800a7d6:	061f      	lsls	r7, r3, #24
 800a7d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a7dc:	d402      	bmi.n	800a7e4 <_printf_i+0x18c>
 800a7de:	065f      	lsls	r7, r3, #25
 800a7e0:	bf48      	it	mi
 800a7e2:	b2b6      	uxthmi	r6, r6
 800a7e4:	07df      	lsls	r7, r3, #31
 800a7e6:	bf48      	it	mi
 800a7e8:	f043 0320 	orrmi.w	r3, r3, #32
 800a7ec:	6029      	str	r1, [r5, #0]
 800a7ee:	bf48      	it	mi
 800a7f0:	6023      	strmi	r3, [r4, #0]
 800a7f2:	b91e      	cbnz	r6, 800a7fc <_printf_i+0x1a4>
 800a7f4:	6823      	ldr	r3, [r4, #0]
 800a7f6:	f023 0320 	bic.w	r3, r3, #32
 800a7fa:	6023      	str	r3, [r4, #0]
 800a7fc:	2310      	movs	r3, #16
 800a7fe:	e7a7      	b.n	800a750 <_printf_i+0xf8>
 800a800:	4824      	ldr	r0, [pc, #144]	; (800a894 <_printf_i+0x23c>)
 800a802:	e7e4      	b.n	800a7ce <_printf_i+0x176>
 800a804:	4615      	mov	r5, r2
 800a806:	e7bd      	b.n	800a784 <_printf_i+0x12c>
 800a808:	682b      	ldr	r3, [r5, #0]
 800a80a:	6826      	ldr	r6, [r4, #0]
 800a80c:	6961      	ldr	r1, [r4, #20]
 800a80e:	1d18      	adds	r0, r3, #4
 800a810:	6028      	str	r0, [r5, #0]
 800a812:	0635      	lsls	r5, r6, #24
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	d501      	bpl.n	800a81c <_printf_i+0x1c4>
 800a818:	6019      	str	r1, [r3, #0]
 800a81a:	e002      	b.n	800a822 <_printf_i+0x1ca>
 800a81c:	0670      	lsls	r0, r6, #25
 800a81e:	d5fb      	bpl.n	800a818 <_printf_i+0x1c0>
 800a820:	8019      	strh	r1, [r3, #0]
 800a822:	2300      	movs	r3, #0
 800a824:	6123      	str	r3, [r4, #16]
 800a826:	4615      	mov	r5, r2
 800a828:	e7bc      	b.n	800a7a4 <_printf_i+0x14c>
 800a82a:	682b      	ldr	r3, [r5, #0]
 800a82c:	1d1a      	adds	r2, r3, #4
 800a82e:	602a      	str	r2, [r5, #0]
 800a830:	681d      	ldr	r5, [r3, #0]
 800a832:	6862      	ldr	r2, [r4, #4]
 800a834:	2100      	movs	r1, #0
 800a836:	4628      	mov	r0, r5
 800a838:	f7f5 fd02 	bl	8000240 <memchr>
 800a83c:	b108      	cbz	r0, 800a842 <_printf_i+0x1ea>
 800a83e:	1b40      	subs	r0, r0, r5
 800a840:	6060      	str	r0, [r4, #4]
 800a842:	6863      	ldr	r3, [r4, #4]
 800a844:	6123      	str	r3, [r4, #16]
 800a846:	2300      	movs	r3, #0
 800a848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a84c:	e7aa      	b.n	800a7a4 <_printf_i+0x14c>
 800a84e:	6923      	ldr	r3, [r4, #16]
 800a850:	462a      	mov	r2, r5
 800a852:	4649      	mov	r1, r9
 800a854:	4640      	mov	r0, r8
 800a856:	47d0      	blx	sl
 800a858:	3001      	adds	r0, #1
 800a85a:	d0ad      	beq.n	800a7b8 <_printf_i+0x160>
 800a85c:	6823      	ldr	r3, [r4, #0]
 800a85e:	079b      	lsls	r3, r3, #30
 800a860:	d413      	bmi.n	800a88a <_printf_i+0x232>
 800a862:	68e0      	ldr	r0, [r4, #12]
 800a864:	9b03      	ldr	r3, [sp, #12]
 800a866:	4298      	cmp	r0, r3
 800a868:	bfb8      	it	lt
 800a86a:	4618      	movlt	r0, r3
 800a86c:	e7a6      	b.n	800a7bc <_printf_i+0x164>
 800a86e:	2301      	movs	r3, #1
 800a870:	4632      	mov	r2, r6
 800a872:	4649      	mov	r1, r9
 800a874:	4640      	mov	r0, r8
 800a876:	47d0      	blx	sl
 800a878:	3001      	adds	r0, #1
 800a87a:	d09d      	beq.n	800a7b8 <_printf_i+0x160>
 800a87c:	3501      	adds	r5, #1
 800a87e:	68e3      	ldr	r3, [r4, #12]
 800a880:	9903      	ldr	r1, [sp, #12]
 800a882:	1a5b      	subs	r3, r3, r1
 800a884:	42ab      	cmp	r3, r5
 800a886:	dcf2      	bgt.n	800a86e <_printf_i+0x216>
 800a888:	e7eb      	b.n	800a862 <_printf_i+0x20a>
 800a88a:	2500      	movs	r5, #0
 800a88c:	f104 0619 	add.w	r6, r4, #25
 800a890:	e7f5      	b.n	800a87e <_printf_i+0x226>
 800a892:	bf00      	nop
 800a894:	0800ae0e 	.word	0x0800ae0e
 800a898:	0800ae1f 	.word	0x0800ae1f

0800a89c <memmove>:
 800a89c:	4288      	cmp	r0, r1
 800a89e:	b510      	push	{r4, lr}
 800a8a0:	eb01 0402 	add.w	r4, r1, r2
 800a8a4:	d902      	bls.n	800a8ac <memmove+0x10>
 800a8a6:	4284      	cmp	r4, r0
 800a8a8:	4623      	mov	r3, r4
 800a8aa:	d807      	bhi.n	800a8bc <memmove+0x20>
 800a8ac:	1e43      	subs	r3, r0, #1
 800a8ae:	42a1      	cmp	r1, r4
 800a8b0:	d008      	beq.n	800a8c4 <memmove+0x28>
 800a8b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8ba:	e7f8      	b.n	800a8ae <memmove+0x12>
 800a8bc:	4402      	add	r2, r0
 800a8be:	4601      	mov	r1, r0
 800a8c0:	428a      	cmp	r2, r1
 800a8c2:	d100      	bne.n	800a8c6 <memmove+0x2a>
 800a8c4:	bd10      	pop	{r4, pc}
 800a8c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8ce:	e7f7      	b.n	800a8c0 <memmove+0x24>

0800a8d0 <_sbrk_r>:
 800a8d0:	b538      	push	{r3, r4, r5, lr}
 800a8d2:	4d06      	ldr	r5, [pc, #24]	; (800a8ec <_sbrk_r+0x1c>)
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	4608      	mov	r0, r1
 800a8da:	602b      	str	r3, [r5, #0]
 800a8dc:	f7f9 fcd8 	bl	8004290 <_sbrk>
 800a8e0:	1c43      	adds	r3, r0, #1
 800a8e2:	d102      	bne.n	800a8ea <_sbrk_r+0x1a>
 800a8e4:	682b      	ldr	r3, [r5, #0]
 800a8e6:	b103      	cbz	r3, 800a8ea <_sbrk_r+0x1a>
 800a8e8:	6023      	str	r3, [r4, #0]
 800a8ea:	bd38      	pop	{r3, r4, r5, pc}
 800a8ec:	2000065c 	.word	0x2000065c

0800a8f0 <memcpy>:
 800a8f0:	440a      	add	r2, r1
 800a8f2:	4291      	cmp	r1, r2
 800a8f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8f8:	d100      	bne.n	800a8fc <memcpy+0xc>
 800a8fa:	4770      	bx	lr
 800a8fc:	b510      	push	{r4, lr}
 800a8fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a902:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a906:	4291      	cmp	r1, r2
 800a908:	d1f9      	bne.n	800a8fe <memcpy+0xe>
 800a90a:	bd10      	pop	{r4, pc}

0800a90c <_realloc_r>:
 800a90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a910:	4680      	mov	r8, r0
 800a912:	4614      	mov	r4, r2
 800a914:	460e      	mov	r6, r1
 800a916:	b921      	cbnz	r1, 800a922 <_realloc_r+0x16>
 800a918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a91c:	4611      	mov	r1, r2
 800a91e:	f7ff bc49 	b.w	800a1b4 <_malloc_r>
 800a922:	b92a      	cbnz	r2, 800a930 <_realloc_r+0x24>
 800a924:	f7ff fbda 	bl	800a0dc <_free_r>
 800a928:	4625      	mov	r5, r4
 800a92a:	4628      	mov	r0, r5
 800a92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a930:	f000 f81b 	bl	800a96a <_malloc_usable_size_r>
 800a934:	4284      	cmp	r4, r0
 800a936:	4607      	mov	r7, r0
 800a938:	d802      	bhi.n	800a940 <_realloc_r+0x34>
 800a93a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a93e:	d812      	bhi.n	800a966 <_realloc_r+0x5a>
 800a940:	4621      	mov	r1, r4
 800a942:	4640      	mov	r0, r8
 800a944:	f7ff fc36 	bl	800a1b4 <_malloc_r>
 800a948:	4605      	mov	r5, r0
 800a94a:	2800      	cmp	r0, #0
 800a94c:	d0ed      	beq.n	800a92a <_realloc_r+0x1e>
 800a94e:	42bc      	cmp	r4, r7
 800a950:	4622      	mov	r2, r4
 800a952:	4631      	mov	r1, r6
 800a954:	bf28      	it	cs
 800a956:	463a      	movcs	r2, r7
 800a958:	f7ff ffca 	bl	800a8f0 <memcpy>
 800a95c:	4631      	mov	r1, r6
 800a95e:	4640      	mov	r0, r8
 800a960:	f7ff fbbc 	bl	800a0dc <_free_r>
 800a964:	e7e1      	b.n	800a92a <_realloc_r+0x1e>
 800a966:	4635      	mov	r5, r6
 800a968:	e7df      	b.n	800a92a <_realloc_r+0x1e>

0800a96a <_malloc_usable_size_r>:
 800a96a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a96e:	1f18      	subs	r0, r3, #4
 800a970:	2b00      	cmp	r3, #0
 800a972:	bfbc      	itt	lt
 800a974:	580b      	ldrlt	r3, [r1, r0]
 800a976:	18c0      	addlt	r0, r0, r3
 800a978:	4770      	bx	lr
 800a97a:	0000      	movs	r0, r0
 800a97c:	0000      	movs	r0, r0
	...

0800a980 <floor>:
 800a980:	ec51 0b10 	vmov	r0, r1, d0
 800a984:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a98c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800a990:	2e13      	cmp	r6, #19
 800a992:	ee10 5a10 	vmov	r5, s0
 800a996:	ee10 8a10 	vmov	r8, s0
 800a99a:	460c      	mov	r4, r1
 800a99c:	dc31      	bgt.n	800aa02 <floor+0x82>
 800a99e:	2e00      	cmp	r6, #0
 800a9a0:	da14      	bge.n	800a9cc <floor+0x4c>
 800a9a2:	a333      	add	r3, pc, #204	; (adr r3, 800aa70 <floor+0xf0>)
 800a9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a8:	f7f5 fca0 	bl	80002ec <__adddf3>
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	f7f6 f8e2 	bl	8000b78 <__aeabi_dcmpgt>
 800a9b4:	b138      	cbz	r0, 800a9c6 <floor+0x46>
 800a9b6:	2c00      	cmp	r4, #0
 800a9b8:	da53      	bge.n	800aa62 <floor+0xe2>
 800a9ba:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800a9be:	4325      	orrs	r5, r4
 800a9c0:	d052      	beq.n	800aa68 <floor+0xe8>
 800a9c2:	4c2d      	ldr	r4, [pc, #180]	; (800aa78 <floor+0xf8>)
 800a9c4:	2500      	movs	r5, #0
 800a9c6:	4621      	mov	r1, r4
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	e024      	b.n	800aa16 <floor+0x96>
 800a9cc:	4f2b      	ldr	r7, [pc, #172]	; (800aa7c <floor+0xfc>)
 800a9ce:	4137      	asrs	r7, r6
 800a9d0:	ea01 0307 	and.w	r3, r1, r7
 800a9d4:	4303      	orrs	r3, r0
 800a9d6:	d01e      	beq.n	800aa16 <floor+0x96>
 800a9d8:	a325      	add	r3, pc, #148	; (adr r3, 800aa70 <floor+0xf0>)
 800a9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9de:	f7f5 fc85 	bl	80002ec <__adddf3>
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f7f6 f8c7 	bl	8000b78 <__aeabi_dcmpgt>
 800a9ea:	2800      	cmp	r0, #0
 800a9ec:	d0eb      	beq.n	800a9c6 <floor+0x46>
 800a9ee:	2c00      	cmp	r4, #0
 800a9f0:	bfbe      	ittt	lt
 800a9f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a9f6:	4133      	asrlt	r3, r6
 800a9f8:	18e4      	addlt	r4, r4, r3
 800a9fa:	ea24 0407 	bic.w	r4, r4, r7
 800a9fe:	2500      	movs	r5, #0
 800aa00:	e7e1      	b.n	800a9c6 <floor+0x46>
 800aa02:	2e33      	cmp	r6, #51	; 0x33
 800aa04:	dd0b      	ble.n	800aa1e <floor+0x9e>
 800aa06:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800aa0a:	d104      	bne.n	800aa16 <floor+0x96>
 800aa0c:	ee10 2a10 	vmov	r2, s0
 800aa10:	460b      	mov	r3, r1
 800aa12:	f7f5 fc6b 	bl	80002ec <__adddf3>
 800aa16:	ec41 0b10 	vmov	d0, r0, r1
 800aa1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa1e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800aa22:	f04f 37ff 	mov.w	r7, #4294967295
 800aa26:	40df      	lsrs	r7, r3
 800aa28:	4238      	tst	r0, r7
 800aa2a:	d0f4      	beq.n	800aa16 <floor+0x96>
 800aa2c:	a310      	add	r3, pc, #64	; (adr r3, 800aa70 <floor+0xf0>)
 800aa2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa32:	f7f5 fc5b 	bl	80002ec <__adddf3>
 800aa36:	2200      	movs	r2, #0
 800aa38:	2300      	movs	r3, #0
 800aa3a:	f7f6 f89d 	bl	8000b78 <__aeabi_dcmpgt>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	d0c1      	beq.n	800a9c6 <floor+0x46>
 800aa42:	2c00      	cmp	r4, #0
 800aa44:	da0a      	bge.n	800aa5c <floor+0xdc>
 800aa46:	2e14      	cmp	r6, #20
 800aa48:	d101      	bne.n	800aa4e <floor+0xce>
 800aa4a:	3401      	adds	r4, #1
 800aa4c:	e006      	b.n	800aa5c <floor+0xdc>
 800aa4e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800aa52:	2301      	movs	r3, #1
 800aa54:	40b3      	lsls	r3, r6
 800aa56:	441d      	add	r5, r3
 800aa58:	45a8      	cmp	r8, r5
 800aa5a:	d8f6      	bhi.n	800aa4a <floor+0xca>
 800aa5c:	ea25 0507 	bic.w	r5, r5, r7
 800aa60:	e7b1      	b.n	800a9c6 <floor+0x46>
 800aa62:	2500      	movs	r5, #0
 800aa64:	462c      	mov	r4, r5
 800aa66:	e7ae      	b.n	800a9c6 <floor+0x46>
 800aa68:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800aa6c:	e7ab      	b.n	800a9c6 <floor+0x46>
 800aa6e:	bf00      	nop
 800aa70:	8800759c 	.word	0x8800759c
 800aa74:	7e37e43c 	.word	0x7e37e43c
 800aa78:	bff00000 	.word	0xbff00000
 800aa7c:	000fffff 	.word	0x000fffff

0800aa80 <_init>:
 800aa80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa82:	bf00      	nop
 800aa84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa86:	bc08      	pop	{r3}
 800aa88:	469e      	mov	lr, r3
 800aa8a:	4770      	bx	lr

0800aa8c <_fini>:
 800aa8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa8e:	bf00      	nop
 800aa90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa92:	bc08      	pop	{r3}
 800aa94:	469e      	mov	lr, r3
 800aa96:	4770      	bx	lr
