
smarthome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6d0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  0800a8a0  0800a8a0  0000b8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac38  0800ac38  0000c184  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac38  0800ac38  0000bc38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac40  0800ac40  0000c184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac40  0800ac40  0000bc40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac44  0800ac44  0000bc44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800ac48  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000188  0800adcc  0000c188  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  0800adcc  0000c614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000190af  00000000  00000000  0000c1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003835  00000000  00000000  00025263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  00028a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000105a  00000000  00000000  00029f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004d66  00000000  00000000  0002afc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cfcc  00000000  00000000  0002fd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6a42  00000000  00000000  0004ccf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143736  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e8c  00000000  00000000  0014377c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00149608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000188 	.word	0x20000188
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a888 	.word	0x0800a888

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000018c 	.word	0x2000018c
 800020c:	0800a888 	.word	0x0800a888

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2f>:
 8000bdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be4:	bf24      	itt	cs
 8000be6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bee:	d90d      	bls.n	8000c0c <__aeabi_d2f+0x30>
 8000bf0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bfc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c04:	bf08      	it	eq
 8000c06:	f020 0001 	biceq.w	r0, r0, #1
 8000c0a:	4770      	bx	lr
 8000c0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c10:	d121      	bne.n	8000c56 <__aeabi_d2f+0x7a>
 8000c12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c16:	bfbc      	itt	lt
 8000c18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c1c:	4770      	bxlt	lr
 8000c1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c26:	f1c2 0218 	rsb	r2, r2, #24
 8000c2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c32:	fa20 f002 	lsr.w	r0, r0, r2
 8000c36:	bf18      	it	ne
 8000c38:	f040 0001 	orrne.w	r0, r0, #1
 8000c3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c48:	ea40 000c 	orr.w	r0, r0, ip
 8000c4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c54:	e7cc      	b.n	8000bf0 <__aeabi_d2f+0x14>
 8000c56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5a:	d107      	bne.n	8000c6c <__aeabi_d2f+0x90>
 8000c5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c60:	bf1e      	ittt	ne
 8000c62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c6a:	4770      	bxne	lr
 8000c6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <__aeabi_uldivmod>:
 8000c7c:	b953      	cbnz	r3, 8000c94 <__aeabi_uldivmod+0x18>
 8000c7e:	b94a      	cbnz	r2, 8000c94 <__aeabi_uldivmod+0x18>
 8000c80:	2900      	cmp	r1, #0
 8000c82:	bf08      	it	eq
 8000c84:	2800      	cmpeq	r0, #0
 8000c86:	bf1c      	itt	ne
 8000c88:	f04f 31ff 	movne.w	r1, #4294967295
 8000c8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c90:	f000 b96a 	b.w	8000f68 <__aeabi_idiv0>
 8000c94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c9c:	f000 f806 	bl	8000cac <__udivmoddi4>
 8000ca0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca8:	b004      	add	sp, #16
 8000caa:	4770      	bx	lr

08000cac <__udivmoddi4>:
 8000cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb0:	9d08      	ldr	r5, [sp, #32]
 8000cb2:	460c      	mov	r4, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14e      	bne.n	8000d56 <__udivmoddi4+0xaa>
 8000cb8:	4694      	mov	ip, r2
 8000cba:	458c      	cmp	ip, r1
 8000cbc:	4686      	mov	lr, r0
 8000cbe:	fab2 f282 	clz	r2, r2
 8000cc2:	d962      	bls.n	8000d8a <__udivmoddi4+0xde>
 8000cc4:	b14a      	cbz	r2, 8000cda <__udivmoddi4+0x2e>
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	4091      	lsls	r1, r2
 8000ccc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	4319      	orrs	r1, r3
 8000cd6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f f68c 	uxth.w	r6, ip
 8000ce2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ce6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cea:	fb07 1114 	mls	r1, r7, r4, r1
 8000cee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf2:	fb04 f106 	mul.w	r1, r4, r6
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	d90a      	bls.n	8000d10 <__udivmoddi4+0x64>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d02:	f080 8112 	bcs.w	8000f2a <__udivmoddi4+0x27e>
 8000d06:	4299      	cmp	r1, r3
 8000d08:	f240 810f 	bls.w	8000f2a <__udivmoddi4+0x27e>
 8000d0c:	3c02      	subs	r4, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a59      	subs	r1, r3, r1
 8000d12:	fa1f f38e 	uxth.w	r3, lr
 8000d16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d22:	fb00 f606 	mul.w	r6, r0, r6
 8000d26:	429e      	cmp	r6, r3
 8000d28:	d90a      	bls.n	8000d40 <__udivmoddi4+0x94>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d32:	f080 80fc 	bcs.w	8000f2e <__udivmoddi4+0x282>
 8000d36:	429e      	cmp	r6, r3
 8000d38:	f240 80f9 	bls.w	8000f2e <__udivmoddi4+0x282>
 8000d3c:	4463      	add	r3, ip
 8000d3e:	3802      	subs	r0, #2
 8000d40:	1b9b      	subs	r3, r3, r6
 8000d42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d46:	2100      	movs	r1, #0
 8000d48:	b11d      	cbz	r5, 8000d52 <__udivmoddi4+0xa6>
 8000d4a:	40d3      	lsrs	r3, r2
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d905      	bls.n	8000d66 <__udivmoddi4+0xba>
 8000d5a:	b10d      	cbz	r5, 8000d60 <__udivmoddi4+0xb4>
 8000d5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d60:	2100      	movs	r1, #0
 8000d62:	4608      	mov	r0, r1
 8000d64:	e7f5      	b.n	8000d52 <__udivmoddi4+0xa6>
 8000d66:	fab3 f183 	clz	r1, r3
 8000d6a:	2900      	cmp	r1, #0
 8000d6c:	d146      	bne.n	8000dfc <__udivmoddi4+0x150>
 8000d6e:	42a3      	cmp	r3, r4
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xcc>
 8000d72:	4290      	cmp	r0, r2
 8000d74:	f0c0 80f0 	bcc.w	8000f58 <__udivmoddi4+0x2ac>
 8000d78:	1a86      	subs	r6, r0, r2
 8000d7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	2d00      	cmp	r5, #0
 8000d82:	d0e6      	beq.n	8000d52 <__udivmoddi4+0xa6>
 8000d84:	e9c5 6300 	strd	r6, r3, [r5]
 8000d88:	e7e3      	b.n	8000d52 <__udivmoddi4+0xa6>
 8000d8a:	2a00      	cmp	r2, #0
 8000d8c:	f040 8090 	bne.w	8000eb0 <__udivmoddi4+0x204>
 8000d90:	eba1 040c 	sub.w	r4, r1, ip
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	fa1f f78c 	uxth.w	r7, ip
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000da2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da6:	fb08 4416 	mls	r4, r8, r6, r4
 8000daa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dae:	fb07 f006 	mul.w	r0, r7, r6
 8000db2:	4298      	cmp	r0, r3
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x11c>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dbe:	d202      	bcs.n	8000dc6 <__udivmoddi4+0x11a>
 8000dc0:	4298      	cmp	r0, r3
 8000dc2:	f200 80cd 	bhi.w	8000f60 <__udivmoddi4+0x2b4>
 8000dc6:	4626      	mov	r6, r4
 8000dc8:	1a1c      	subs	r4, r3, r0
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb00 f707 	mul.w	r7, r0, r7
 8000dde:	429f      	cmp	r7, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x148>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x146>
 8000dec:	429f      	cmp	r7, r3
 8000dee:	f200 80b0 	bhi.w	8000f52 <__udivmoddi4+0x2a6>
 8000df2:	4620      	mov	r0, r4
 8000df4:	1bdb      	subs	r3, r3, r7
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	e7a5      	b.n	8000d48 <__udivmoddi4+0x9c>
 8000dfc:	f1c1 0620 	rsb	r6, r1, #32
 8000e00:	408b      	lsls	r3, r1
 8000e02:	fa22 f706 	lsr.w	r7, r2, r6
 8000e06:	431f      	orrs	r7, r3
 8000e08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000e10:	ea43 030c 	orr.w	r3, r3, ip
 8000e14:	40f4      	lsrs	r4, r6
 8000e16:	fa00 f801 	lsl.w	r8, r0, r1
 8000e1a:	0c38      	lsrs	r0, r7, #16
 8000e1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e20:	fbb4 fef0 	udiv	lr, r4, r0
 8000e24:	fa1f fc87 	uxth.w	ip, r7
 8000e28:	fb00 441e 	mls	r4, r0, lr, r4
 8000e2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e30:	fb0e f90c 	mul.w	r9, lr, ip
 8000e34:	45a1      	cmp	r9, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	d90a      	bls.n	8000e52 <__udivmoddi4+0x1a6>
 8000e3c:	193c      	adds	r4, r7, r4
 8000e3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e42:	f080 8084 	bcs.w	8000f4e <__udivmoddi4+0x2a2>
 8000e46:	45a1      	cmp	r9, r4
 8000e48:	f240 8081 	bls.w	8000f4e <__udivmoddi4+0x2a2>
 8000e4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e50:	443c      	add	r4, r7
 8000e52:	eba4 0409 	sub.w	r4, r4, r9
 8000e56:	fa1f f983 	uxth.w	r9, r3
 8000e5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e6a:	45a4      	cmp	ip, r4
 8000e6c:	d907      	bls.n	8000e7e <__udivmoddi4+0x1d2>
 8000e6e:	193c      	adds	r4, r7, r4
 8000e70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e74:	d267      	bcs.n	8000f46 <__udivmoddi4+0x29a>
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d965      	bls.n	8000f46 <__udivmoddi4+0x29a>
 8000e7a:	3b02      	subs	r3, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e82:	fba0 9302 	umull	r9, r3, r0, r2
 8000e86:	eba4 040c 	sub.w	r4, r4, ip
 8000e8a:	429c      	cmp	r4, r3
 8000e8c:	46ce      	mov	lr, r9
 8000e8e:	469c      	mov	ip, r3
 8000e90:	d351      	bcc.n	8000f36 <__udivmoddi4+0x28a>
 8000e92:	d04e      	beq.n	8000f32 <__udivmoddi4+0x286>
 8000e94:	b155      	cbz	r5, 8000eac <__udivmoddi4+0x200>
 8000e96:	ebb8 030e 	subs.w	r3, r8, lr
 8000e9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000ea2:	40cb      	lsrs	r3, r1
 8000ea4:	431e      	orrs	r6, r3
 8000ea6:	40cc      	lsrs	r4, r1
 8000ea8:	e9c5 6400 	strd	r6, r4, [r5]
 8000eac:	2100      	movs	r1, #0
 8000eae:	e750      	b.n	8000d52 <__udivmoddi4+0xa6>
 8000eb0:	f1c2 0320 	rsb	r3, r2, #32
 8000eb4:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ec0:	4094      	lsls	r4, r2
 8000ec2:	430c      	orrs	r4, r1
 8000ec4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ecc:	fa1f f78c 	uxth.w	r7, ip
 8000ed0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed8:	0c23      	lsrs	r3, r4, #16
 8000eda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ede:	fb00 f107 	mul.w	r1, r0, r7
 8000ee2:	4299      	cmp	r1, r3
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x24c>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eee:	d22c      	bcs.n	8000f4a <__udivmoddi4+0x29e>
 8000ef0:	4299      	cmp	r1, r3
 8000ef2:	d92a      	bls.n	8000f4a <__udivmoddi4+0x29e>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1a5b      	subs	r3, r3, r1
 8000efa:	b2a4      	uxth	r4, r4
 8000efc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f00:	fb08 3311 	mls	r3, r8, r1, r3
 8000f04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f08:	fb01 f307 	mul.w	r3, r1, r7
 8000f0c:	42a3      	cmp	r3, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x276>
 8000f10:	eb1c 0404 	adds.w	r4, ip, r4
 8000f14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f18:	d213      	bcs.n	8000f42 <__udivmoddi4+0x296>
 8000f1a:	42a3      	cmp	r3, r4
 8000f1c:	d911      	bls.n	8000f42 <__udivmoddi4+0x296>
 8000f1e:	3902      	subs	r1, #2
 8000f20:	4464      	add	r4, ip
 8000f22:	1ae4      	subs	r4, r4, r3
 8000f24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f28:	e739      	b.n	8000d9e <__udivmoddi4+0xf2>
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	e6f0      	b.n	8000d10 <__udivmoddi4+0x64>
 8000f2e:	4608      	mov	r0, r1
 8000f30:	e706      	b.n	8000d40 <__udivmoddi4+0x94>
 8000f32:	45c8      	cmp	r8, r9
 8000f34:	d2ae      	bcs.n	8000e94 <__udivmoddi4+0x1e8>
 8000f36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f3e:	3801      	subs	r0, #1
 8000f40:	e7a8      	b.n	8000e94 <__udivmoddi4+0x1e8>
 8000f42:	4631      	mov	r1, r6
 8000f44:	e7ed      	b.n	8000f22 <__udivmoddi4+0x276>
 8000f46:	4603      	mov	r3, r0
 8000f48:	e799      	b.n	8000e7e <__udivmoddi4+0x1d2>
 8000f4a:	4630      	mov	r0, r6
 8000f4c:	e7d4      	b.n	8000ef8 <__udivmoddi4+0x24c>
 8000f4e:	46d6      	mov	lr, sl
 8000f50:	e77f      	b.n	8000e52 <__udivmoddi4+0x1a6>
 8000f52:	4463      	add	r3, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e74d      	b.n	8000df4 <__udivmoddi4+0x148>
 8000f58:	4606      	mov	r6, r0
 8000f5a:	4623      	mov	r3, r4
 8000f5c:	4608      	mov	r0, r1
 8000f5e:	e70f      	b.n	8000d80 <__udivmoddi4+0xd4>
 8000f60:	3e02      	subs	r6, #2
 8000f62:	4463      	add	r3, ip
 8000f64:	e730      	b.n	8000dc8 <__udivmoddi4+0x11c>
 8000f66:	bf00      	nop

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f000 fa47 	bl	8001408 <null_ptr_check>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d117      	bne.n	8000fb6 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	20d0      	movs	r0, #208	@ 0xd0
 8000f8e:	f000 f818 	bl	8000fc2 <bmp2_get_regs>
 8000f92:	4603      	mov	r3, r0
 8000f94:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8000f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10b      	bne.n	8000fb6 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b58      	cmp	r3, #88	@ 0x58
 8000fa4:	d105      	bne.n	8000fb2 <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 fa79 	bl	800149e <get_calib_param>
 8000fac:	4603      	mov	r3, r0
 8000fae:	73fb      	strb	r3, [r7, #15]
 8000fb0:	e001      	b.n	8000fb6 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8000fb2:	23fc      	movs	r3, #252	@ 0xfc
 8000fb4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000fc2:	b590      	push	{r4, r7, lr}
 8000fc4:	b087      	sub	sp, #28
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	4603      	mov	r3, r0
 8000fd0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000fd2:	6838      	ldr	r0, [r7, #0]
 8000fd4:	f000 fa18 	bl	8001408 <null_ptr_check>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8000fdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d11e      	bne.n	8001022 <bmp2_get_regs+0x60>
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d01b      	beq.n	8001022 <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	785b      	ldrb	r3, [r3, #1]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d103      	bne.n	8000ffa <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ff8:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	68dc      	ldr	r4, [r3, #12]
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	7bf8      	ldrb	r0, [r7, #15]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	68b9      	ldr	r1, [r7, #8]
 8001008:	47a0      	blx	r4
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d004      	beq.n	8001026 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 800101c:	23fe      	movs	r3, #254	@ 0xfe
 800101e:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001020:	e001      	b.n	8001026 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001022:	23ff      	movs	r3, #255	@ 0xff
 8001024:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001026:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800102a:	4618      	mov	r0, r3
 800102c:	371c      	adds	r7, #28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd90      	pop	{r4, r7, pc}

08001032 <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8001032:	b590      	push	{r4, r7, lr}
 8001034:	b08b      	sub	sp, #44	@ 0x2c
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b04      	cmp	r3, #4
 8001044:	d901      	bls.n	800104a <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8001046:	2304      	movs	r3, #4
 8001048:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 800104a:	6838      	ldr	r0, [r7, #0]
 800104c:	f000 f9dc 	bl	8001408 <null_ptr_check>
 8001050:	4603      	mov	r3, r0
 8001052:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001056:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800105a:	2b00      	cmp	r3, #0
 800105c:	d150      	bne.n	8001100 <bmp2_set_regs+0xce>
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d04d      	beq.n	8001100 <bmp2_set_regs+0xce>
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d04a      	beq.n	8001100 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d043      	beq.n	80010f8 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	785b      	ldrb	r3, [r3, #1]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d114      	bne.n	80010a8 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800107e:	2300      	movs	r3, #0
 8001080:	77fb      	strb	r3, [r7, #31]
 8001082:	e00d      	b.n	80010a0 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 8001084:	7ffb      	ldrb	r3, [r7, #31]
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	4413      	add	r3, r2
 800108a:	781a      	ldrb	r2, [r3, #0]
 800108c:	7ffb      	ldrb	r3, [r7, #31]
 800108e:	68f9      	ldr	r1, [r7, #12]
 8001090:	440b      	add	r3, r1
 8001092:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800109a:	7ffb      	ldrb	r3, [r7, #31]
 800109c:	3301      	adds	r3, #1
 800109e:	77fb      	strb	r3, [r7, #31]
 80010a0:	7ffb      	ldrb	r3, [r7, #31]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d8ed      	bhi.n	8001084 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d90b      	bls.n	80010c6 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80010ae:	f107 0114 	add.w	r1, r7, #20
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f000 f9c6 	bl	8001448 <interleave_data>
                temp_len = ((len * 2) - 1);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	3b01      	subs	r3, #1
 80010c2:	623b      	str	r3, [r7, #32]
 80010c4:	e001      	b.n	80010ca <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	691c      	ldr	r4, [r3, #16]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	7818      	ldrb	r0, [r3, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f107 0114 	add.w	r1, r7, #20
 80010da:	6a3a      	ldr	r2, [r7, #32]
 80010dc:	47a0      	blx	r4
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00b      	beq.n	8001108 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 80010f0:	23fe      	movs	r3, #254	@ 0xfe
 80010f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 80010f6:	e007      	b.n	8001108 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 80010f8:	23fd      	movs	r3, #253	@ 0xfd
 80010fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 80010fe:	e003      	b.n	8001108 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001100:	23ff      	movs	r3, #255	@ 0xff
 8001102:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001106:	e000      	b.n	800110a <bmp2_set_regs+0xd8>
        if (len > 0)
 8001108:	bf00      	nop
    }

    return rslt;
 800110a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800110e:	4618      	mov	r0, r3
 8001110:	372c      	adds	r7, #44	@ 0x2c
 8001112:	46bd      	mov	sp, r7
 8001114:	bd90      	pop	{r4, r7, pc}

08001116 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b084      	sub	sp, #16
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 800111e:	23e0      	movs	r3, #224	@ 0xe0
 8001120:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 8001122:	23b6      	movs	r3, #182	@ 0xb6
 8001124:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001126:	f107 010d 	add.w	r1, r7, #13
 800112a:	f107 000e 	add.w	r0, r7, #14
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f7ff ff7e 	bl	8001032 <bmp2_set_regs>
 8001136:	4603      	mov	r3, r0
 8001138:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b084      	sub	sp, #16
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001150:	2300      	movs	r3, #0
 8001152:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d02d      	beq.n	80011b6 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 800115a:	f107 010c 	add.w	r1, r7, #12
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	2202      	movs	r2, #2
 8001162:	20f4      	movs	r0, #244	@ 0xf4
 8001164:	f7ff ff2d 	bl	8000fc2 <bmp2_get_regs>
 8001168:	4603      	mov	r3, r0
 800116a:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 800116c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d122      	bne.n	80011ba <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8001174:	7b3b      	ldrb	r3, [r7, #12]
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	b2da      	uxtb	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 800117e:	7b3b      	ldrb	r3, [r7, #12]
 8001180:	109b      	asrs	r3, r3, #2
 8001182:	b2db      	uxtb	r3, r3
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	b2da      	uxtb	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 800118e:	7b7b      	ldrb	r3, [r7, #13]
 8001190:	095b      	lsrs	r3, r3, #5
 8001192:	b2da      	uxtb	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 8001198:	7b7b      	ldrb	r3, [r7, #13]
 800119a:	109b      	asrs	r3, r3, #2
 800119c:	b2db      	uxtb	r3, r3
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 80011a8:	7b7b      	ldrb	r3, [r7, #13]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	715a      	strb	r2, [r3, #5]
 80011b4:	e001      	b.n	80011ba <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80011b6:	23ff      	movs	r3, #255	@ 0xff
 80011b8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80011ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	2000      	movs	r0, #0
 80011d6:	f000 f9fd 	bl	80015d4 <conf_sensor>
 80011da:	4603      	mov	r3, r0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d01b      	beq.n	800122c <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 80011f4:	f107 010e 	add.w	r1, r7, #14
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2201      	movs	r2, #1
 80011fc:	20f3      	movs	r0, #243	@ 0xf3
 80011fe:	f7ff fee0 	bl	8000fc2 <bmp2_get_regs>
 8001202:	4603      	mov	r3, r0
 8001204:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d110      	bne.n	8001230 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 800120e:	7bbb      	ldrb	r3, [r7, #14]
 8001210:	10db      	asrs	r3, r3, #3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	b2da      	uxtb	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 800121e:	7bbb      	ldrb	r3, [r7, #14]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	b2da      	uxtb	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	705a      	strb	r2, [r3, #1]
 800122a:	e001      	b.n	8001230 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800122c:	23ff      	movs	r3, #255	@ 0xff
 800122e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001230:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	68b9      	ldr	r1, [r7, #8]
 8001250:	4618      	mov	r0, r3
 8001252:	f000 f9bf 	bl	80015d4 <conf_sensor>
 8001256:	4603      	mov	r3, r0
 8001258:	75fb      	strb	r3, [r7, #23]

    return rslt;
 800125a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 8001270:	2300      	movs	r3, #0
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	2300      	movs	r3, #0
 8001276:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001278:	f107 0308 	add.w	r3, r7, #8
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d024      	beq.n	80012d2 <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8001288:	f107 0110 	add.w	r1, r7, #16
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	2206      	movs	r2, #6
 8001290:	20f7      	movs	r0, #247	@ 0xf7
 8001292:	f7ff fe96 	bl	8000fc2 <bmp2_get_regs>
 8001296:	4603      	mov	r3, r0
 8001298:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 800129a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d119      	bne.n	80012d6 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 80012a2:	f107 0208 	add.w	r2, r7, #8
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 fab9 	bl	8001824 <parse_sensor_data>
 80012b2:	4603      	mov	r3, r0
 80012b4:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80012b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10b      	bne.n	80012d6 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f80b 	bl	80012e2 <bmp2_compensate_data>
 80012cc:	4603      	mov	r3, r0
 80012ce:	75fb      	strb	r3, [r7, #23]
 80012d0:	e001      	b.n	80012d6 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012d2:	23ff      	movs	r3, #255	@ 0xff
 80012d4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f88a 	bl	8001408 <null_ptr_check>
 80012f4:	4603      	mov	r3, r0
 80012f6:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 80012f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d129      	bne.n	8001354 <bmp2_compensate_data+0x72>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d026      	beq.n	8001354 <bmp2_compensate_data+0x72>
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d023      	beq.n	8001354 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 800131a:	68b9      	ldr	r1, [r7, #8]
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	f04f 0300 	mov.w	r3, #0
 8001324:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	3308      	adds	r3, #8
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	68f9      	ldr	r1, [r7, #12]
 8001330:	4618      	mov	r0, r3
 8001332:	f000 fabb 	bl	80018ac <compensate_temperature>
 8001336:	4603      	mov	r3, r0
 8001338:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 800133a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10a      	bne.n	8001358 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	68f9      	ldr	r1, [r7, #12]
 8001348:	4618      	mov	r0, r3
 800134a:	f000 fba5 	bl	8001a98 <compensate_pressure>
 800134e:	4603      	mov	r3, r0
 8001350:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 8001352:	e001      	b.n	8001358 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001354:	23ff      	movs	r3, #255	@ 0xff
 8001356:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001358:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001364:	b5b0      	push	{r4, r5, r7, lr}
 8001366:	b092      	sub	sp, #72	@ 0x48
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 8001370:	4b23      	ldr	r3, [pc, #140]	@ (8001400 <bmp2_compute_meas_time+0x9c>)
 8001372:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001376:	461d      	mov	r5, r3
 8001378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800137c:	682b      	ldr	r3, [r5, #0]
 800137e:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 8001380:	4b20      	ldr	r3, [pc, #128]	@ (8001404 <bmp2_compute_meas_time+0xa0>)
 8001382:	f107 0410 	add.w	r4, r7, #16
 8001386:	461d      	mov	r5, r3
 8001388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800138a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 f837 	bl	8001408 <null_ptr_check>
 800139a:	4603      	mov	r3, r0
 800139c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 80013a0:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d122      	bne.n	80013ee <bmp2_compute_meas_time+0x8a>
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d01f      	beq.n	80013ee <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	7e1b      	ldrb	r3, [r3, #24]
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	d111      	bne.n	80013da <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	78db      	ldrb	r3, [r3, #3]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	3348      	adds	r3, #72	@ 0x48
 80013be:	443b      	add	r3, r7
 80013c0:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	789b      	ldrb	r3, [r3, #2]
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	3348      	adds	r3, #72	@ 0x48
 80013cc:	443b      	add	r3, r7
 80013ce:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80013d2:	441a      	add	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013d8:	e00c      	b.n	80013f4 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	78db      	ldrb	r3, [r3, #3]
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	3348      	adds	r3, #72	@ 0x48
 80013e2:	443b      	add	r3, r7
 80013e4:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013ec:	e002      	b.n	80013f4 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80013ee:	23ff      	movs	r3, #255	@ 0xff
 80013f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 80013f4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3748      	adds	r7, #72	@ 0x48
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001400:	0800a8a0 	.word	0x0800a8a0
 8001404:	0800a8b4 	.word	0x0800a8b4

08001408 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00b      	beq.n	800142e <null_ptr_check+0x26>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d007      	beq.n	800142e <null_ptr_check+0x26>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <null_ptr_check+0x26>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d102      	bne.n	8001434 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 800142e:	23ff      	movs	r3, #255	@ 0xff
 8001430:	73fb      	strb	r3, [r7, #15]
 8001432:	e001      	b.n	8001438 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001438:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001448:	b480      	push	{r7}
 800144a:	b087      	sub	sp, #28
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001456:	2301      	movs	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	e015      	b.n	8001488 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	441a      	add	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	3b01      	subs	r3, #1
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	440b      	add	r3, r1
 800146c:	7812      	ldrb	r2, [r2, #0]
 800146e:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	441a      	add	r2, r3
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	68b9      	ldr	r1, [r7, #8]
 800147c:	440b      	add	r3, r1
 800147e:	7812      	ldrb	r2, [r2, #0]
 8001480:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	3301      	adds	r3, #1
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d3e5      	bcc.n	800145c <interleave_data+0x14>
    }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	371c      	adds	r7, #28
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b08a      	sub	sp, #40	@ 0x28
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]
 80014ba:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 80014bc:	f107 010c 	add.w	r1, r7, #12
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2219      	movs	r2, #25
 80014c4:	2088      	movs	r0, #136	@ 0x88
 80014c6:	f7ff fd7c 	bl	8000fc2 <bmp2_get_regs>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMP2_OK)
 80014d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d177      	bne.n	80015c8 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 80014d8:	7b7b      	ldrb	r3, [r7, #13]
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	b21a      	sxth	r2, r3
 80014de:	7b3b      	ldrb	r3, [r7, #12]
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	4313      	orrs	r3, r2
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	b21a      	sxth	r2, r3
 80014f2:	7bbb      	ldrb	r3, [r7, #14]
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 80014fe:	7c7b      	ldrb	r3, [r7, #17]
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	b21a      	sxth	r2, r3
 8001504:	7c3b      	ldrb	r3, [r7, #16]
 8001506:	b21b      	sxth	r3, r3
 8001508:	4313      	orrs	r3, r2
 800150a:	b21a      	sxth	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 8001510:	7cfb      	ldrb	r3, [r7, #19]
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	b21a      	sxth	r2, r3
 8001516:	7cbb      	ldrb	r3, [r7, #18]
 8001518:	b21b      	sxth	r3, r3
 800151a:	4313      	orrs	r3, r2
 800151c:	b21b      	sxth	r3, r3
 800151e:	b29a      	uxth	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	845a      	strh	r2, [r3, #34]	@ 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 8001524:	7d7b      	ldrb	r3, [r7, #21]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	b21a      	sxth	r2, r3
 800152a:	7d3b      	ldrb	r3, [r7, #20]
 800152c:	b21b      	sxth	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	b21a      	sxth	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8001536:	7dfb      	ldrb	r3, [r7, #23]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b21a      	sxth	r2, r3
 800153c:	7dbb      	ldrb	r3, [r7, #22]
 800153e:	b21b      	sxth	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	b21a      	sxth	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001548:	7e7b      	ldrb	r3, [r7, #25]
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	b21a      	sxth	r2, r3
 800154e:	7e3b      	ldrb	r3, [r7, #24]
 8001550:	b21b      	sxth	r3, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	b21a      	sxth	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	851a      	strh	r2, [r3, #40]	@ 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 800155a:	7efb      	ldrb	r3, [r7, #27]
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	b21a      	sxth	r2, r3
 8001560:	7ebb      	ldrb	r3, [r7, #26]
 8001562:	b21b      	sxth	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b21a      	sxth	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 800156c:	7f7b      	ldrb	r3, [r7, #29]
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	b21a      	sxth	r2, r3
 8001572:	7f3b      	ldrb	r3, [r7, #28]
 8001574:	b21b      	sxth	r3, r3
 8001576:	4313      	orrs	r3, r2
 8001578:	b21a      	sxth	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 800157e:	7ffb      	ldrb	r3, [r7, #31]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b21a      	sxth	r2, r3
 8001584:	7fbb      	ldrb	r3, [r7, #30]
 8001586:	b21b      	sxth	r3, r3
 8001588:	4313      	orrs	r3, r2
 800158a:	b21a      	sxth	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	85da      	strh	r2, [r3, #46]	@ 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8001590:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b21a      	sxth	r2, r3
 8001598:	f897 3020 	ldrb.w	r3, [r7, #32]
 800159c:	b21b      	sxth	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 80015a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 80015bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80015c0:	b25a      	sxtb	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    return rslt;
 80015c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3728      	adds	r7, #40	@ 0x28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80015e2:	2300      	movs	r3, #0
 80015e4:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 80015e6:	f24f 53f4 	movw	r3, #62964	@ 0xf5f4
 80015ea:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d074      	beq.n	80016dc <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80015f2:	f107 0114 	add.w	r1, r7, #20
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2202      	movs	r2, #2
 80015fa:	20f4      	movs	r0, #244	@ 0xf4
 80015fc:	f7ff fce1 	bl	8000fc2 <bmp2_get_regs>
 8001600:	4603      	mov	r3, r0
 8001602:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d169      	bne.n	80016e0 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fd82 	bl	8001116 <bmp2_soft_reset>
 8001612:	4603      	mov	r3, r0
 8001614:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001616:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d160      	bne.n	80016e0 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	68b9      	ldr	r1, [r7, #8]
 8001624:	4618      	mov	r0, r3
 8001626:	f000 f861 	bl	80016ec <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 800162a:	7d7b      	ldrb	r3, [r7, #21]
 800162c:	b25b      	sxtb	r3, r3
 800162e:	f003 031f 	and.w	r3, r3, #31
 8001632:	b25a      	sxtb	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	789b      	ldrb	r3, [r3, #2]
 8001638:	015b      	lsls	r3, r3, #5
 800163a:	b25b      	sxtb	r3, r3
 800163c:	4313      	orrs	r3, r2
 800163e:	b25b      	sxtb	r3, r3
 8001640:	b2db      	uxtb	r3, r3
 8001642:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001644:	7d7b      	ldrb	r3, [r7, #21]
 8001646:	b25b      	sxtb	r3, r3
 8001648:	f023 031c 	bic.w	r3, r3, #28
 800164c:	b25a      	sxtb	r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	791b      	ldrb	r3, [r3, #4]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	b25b      	sxtb	r3, r3
 8001656:	f003 031c 	and.w	r3, r3, #28
 800165a:	b25b      	sxtb	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	b25b      	sxtb	r3, r3
 8001660:	b2db      	uxtb	r3, r3
 8001662:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001664:	7d7b      	ldrb	r3, [r7, #21]
 8001666:	b25b      	sxtb	r3, r3
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	b25a      	sxtb	r2, r3
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	795b      	ldrb	r3, [r3, #5]
 8001672:	b25b      	sxtb	r3, r3
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	b25b      	sxtb	r3, r3
 800167a:	4313      	orrs	r3, r2
 800167c:	b25b      	sxtb	r3, r3
 800167e:	b2db      	uxtb	r3, r3
 8001680:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 8001682:	f107 0114 	add.w	r1, r7, #20
 8001686:	f107 0010 	add.w	r0, r7, #16
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2202      	movs	r2, #2
 800168e:	f7ff fcd0 	bl	8001032 <bmp2_set_regs>
 8001692:	4603      	mov	r3, r0
 8001694:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 8001696:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d120      	bne.n	80016e0 <conf_sensor+0x10c>
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d01d      	beq.n	80016e0 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 80016aa:	7d3b      	ldrb	r3, [r7, #20]
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	f023 0303 	bic.w	r3, r3, #3
 80016b2:	b25a      	sxtb	r2, r3
 80016b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	4313      	orrs	r3, r2
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 80016c6:	f107 0114 	add.w	r1, r7, #20
 80016ca:	f107 0010 	add.w	r0, r7, #16
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f7ff fcae 	bl	8001032 <bmp2_set_regs>
 80016d6:	4603      	mov	r3, r0
 80016d8:	75fb      	strb	r3, [r7, #23]
 80016da:	e001      	b.n	80016e0 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80016dc:	23ff      	movs	r3, #255	@ 0xff
 80016de:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80016e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	78db      	ldrb	r3, [r3, #3]
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	f200 808b 	bhi.w	8001816 <set_os_mode+0x12a>
 8001700:	a201      	add	r2, pc, #4	@ (adr r2, 8001708 <set_os_mode+0x1c>)
 8001702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001706:	bf00      	nop
 8001708:	0800171d 	.word	0x0800171d
 800170c:	0800174f 	.word	0x0800174f
 8001710:	08001781 	.word	0x08001781
 8001714:	080017b3 	.word	0x080017b3
 8001718:	080017e5 	.word	0x080017e5
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b25b      	sxtb	r3, r3
 8001722:	f003 031f 	and.w	r3, r3, #31
 8001726:	b25b      	sxtb	r3, r3
 8001728:	f043 0320 	orr.w	r3, r3, #32
 800172c:	b25b      	sxtb	r3, r3
 800172e:	b2da      	uxtb	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	b25b      	sxtb	r3, r3
 800173a:	f023 031c 	bic.w	r3, r3, #28
 800173e:	b25b      	sxtb	r3, r3
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	b25b      	sxtb	r3, r3
 8001746:	b2da      	uxtb	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	701a      	strb	r2, [r3, #0]
            break;
 800174c:	e064      	b.n	8001818 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	b25b      	sxtb	r3, r3
 8001754:	f003 031f 	and.w	r3, r3, #31
 8001758:	b25b      	sxtb	r3, r3
 800175a:	f043 0320 	orr.w	r3, r3, #32
 800175e:	b25b      	sxtb	r3, r3
 8001760:	b2da      	uxtb	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	b25b      	sxtb	r3, r3
 800176c:	f023 031c 	bic.w	r3, r3, #28
 8001770:	b25b      	sxtb	r3, r3
 8001772:	f043 0308 	orr.w	r3, r3, #8
 8001776:	b25b      	sxtb	r3, r3
 8001778:	b2da      	uxtb	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	701a      	strb	r2, [r3, #0]
            break;
 800177e:	e04b      	b.n	8001818 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	b25b      	sxtb	r3, r3
 8001786:	f003 031f 	and.w	r3, r3, #31
 800178a:	b25b      	sxtb	r3, r3
 800178c:	f043 0320 	orr.w	r3, r3, #32
 8001790:	b25b      	sxtb	r3, r3
 8001792:	b2da      	uxtb	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b25b      	sxtb	r3, r3
 800179e:	f023 031c 	bic.w	r3, r3, #28
 80017a2:	b25b      	sxtb	r3, r3
 80017a4:	f043 030c 	orr.w	r3, r3, #12
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	701a      	strb	r2, [r3, #0]
            break;
 80017b0:	e032      	b.n	8001818 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	f043 0320 	orr.w	r3, r3, #32
 80017c2:	b25b      	sxtb	r3, r3
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	f023 031c 	bic.w	r3, r3, #28
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	f043 0310 	orr.w	r3, r3, #16
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	701a      	strb	r2, [r3, #0]
            break;
 80017e2:	e019      	b.n	8001818 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	b25b      	sxtb	r3, r3
 8001802:	f023 031c 	bic.w	r3, r3, #28
 8001806:	b25b      	sxtb	r3, r3
 8001808:	f043 0314 	orr.w	r3, r3, #20
 800180c:	b25b      	sxtb	r3, r3
 800180e:	b2da      	uxtb	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	701a      	strb	r2, [r3, #0]
            break;
 8001814:	e000      	b.n	8001818 <set_os_mode+0x12c>
        default:
            break;
 8001816:	bf00      	nop
    }
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	031b      	lsls	r3, r3, #12
 8001834:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3301      	adds	r3, #1
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3302      	adds	r3, #2
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	b2db      	uxtb	r3, r3
 800184a:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	431a      	orrs	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	431a      	orrs	r2, r3
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3303      	adds	r3, #3
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	031b      	lsls	r3, r3, #12
 8001862:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3304      	adds	r3, #4
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3305      	adds	r3, #5
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	b2db      	uxtb	r3, r3
 8001878:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	431a      	orrs	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4313      	orrs	r3, r2
 8001884:	461a      	mov	r2, r3
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4619      	mov	r1, r3
 8001894:	4610      	mov	r0, r2
 8001896:	f000 fae3 	bl	8001e60 <st_check_boundaries>
 800189a:	4603      	mov	r3, r0
 800189c:	72fb      	strb	r3, [r7, #11]

    return rslt;
 800189e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 80018ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018b0:	b08c      	sub	sp, #48	@ 0x30
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fe5d 	bl	8000584 <__aeabi_i2d>
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	4b6c      	ldr	r3, [pc, #432]	@ (8001a80 <compensate_temperature+0x1d4>)
 80018d0:	f7fe ffec 	bl	80008ac <__aeabi_ddiv>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4614      	mov	r4, r2
 80018da:	461d      	mov	r5, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	8b9b      	ldrh	r3, [r3, #28]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fe3f 	bl	8000564 <__aeabi_ui2d>
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	4b66      	ldr	r3, [pc, #408]	@ (8001a84 <compensate_temperature+0x1d8>)
 80018ec:	f7fe ffde 	bl	80008ac <__aeabi_ddiv>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4620      	mov	r0, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7fe fcf6 	bl	80002e8 <__aeabi_dsub>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4614      	mov	r4, r2
 8001902:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fe3a 	bl	8000584 <__aeabi_i2d>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001914:	4620      	mov	r0, r4
 8001916:	4629      	mov	r1, r5
 8001918:	f7fe fe9e 	bl	8000658 <__aeabi_dmul>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fe2b 	bl	8000584 <__aeabi_i2d>
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001936:	f7fe ffb9 	bl	80008ac <__aeabi_ddiv>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4614      	mov	r4, r2
 8001940:	461d      	mov	r5, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	8b9b      	ldrh	r3, [r3, #28]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fe0c 	bl	8000564 <__aeabi_ui2d>
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	4b4d      	ldr	r3, [pc, #308]	@ (8001a88 <compensate_temperature+0x1dc>)
 8001952:	f7fe ffab 	bl	80008ac <__aeabi_ddiv>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4620      	mov	r0, r4
 800195c:	4629      	mov	r1, r5
 800195e:	f7fe fcc3 	bl	80002e8 <__aeabi_dsub>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4614      	mov	r4, r2
 8001968:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fe08 	bl	8000584 <__aeabi_i2d>
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800197c:	f7fe ff96 	bl	80008ac <__aeabi_ddiv>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4690      	mov	r8, r2
 8001986:	4699      	mov	r9, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	8b9b      	ldrh	r3, [r3, #28]
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fde9 	bl	8000564 <__aeabi_ui2d>
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	4b3c      	ldr	r3, [pc, #240]	@ (8001a88 <compensate_temperature+0x1dc>)
 8001998:	f7fe ff88 	bl	80008ac <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4640      	mov	r0, r8
 80019a2:	4649      	mov	r1, r9
 80019a4:	f7fe fca0 	bl	80002e8 <__aeabi_dsub>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80019ac:	4620      	mov	r0, r4
 80019ae:	4629      	mov	r1, r5
 80019b0:	f7fe fe52 	bl	8000658 <__aeabi_dmul>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4614      	mov	r4, r2
 80019ba:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fdde 	bl	8000584 <__aeabi_i2d>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
    var2 =
 80019cc:	4620      	mov	r0, r4
 80019ce:	4629      	mov	r1, r5
 80019d0:	f7fe fe42 	bl	8000658 <__aeabi_dmul>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 80019dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019e4:	f7fe fc82 	bl	80002ec <__adddf3>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	f7ff f8cc 	bl	8000b8c <__aeabi_d2iz>
 80019f4:	4602      	mov	r2, r0
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	639a      	str	r2, [r3, #56]	@ 0x38
    temperature = (var1 + var2) / 5120.0;
 80019fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a02:	f7fe fc73 	bl	80002ec <__adddf3>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	4b1e      	ldr	r3, [pc, #120]	@ (8001a8c <compensate_temperature+0x1e0>)
 8001a14:	f7fe ff4a 	bl	80008ac <__aeabi_ddiv>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	4b1a      	ldr	r3, [pc, #104]	@ (8001a90 <compensate_temperature+0x1e4>)
 8001a26:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a2a:	f7ff f887 	bl	8000b3c <__aeabi_dcmplt>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d007      	beq.n	8001a44 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <compensate_temperature+0x1e4>)
 8001a3a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <compensate_temperature+0x1e8>)
 8001a4a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a4e:	f7ff f893 	bl	8000b78 <__aeabi_dcmpgt>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d007      	beq.n	8001a68 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <compensate_temperature+0x1e8>)
 8001a5e:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    (*comp_temperature) = temperature;
 8001a68:	68f9      	ldr	r1, [r7, #12]
 8001a6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a6e:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001a72:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3730      	adds	r7, #48	@ 0x30
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a80:	40d00000 	.word	0x40d00000
 8001a84:	40900000 	.word	0x40900000
 8001a88:	40c00000 	.word	0x40c00000
 8001a8c:	40b40000 	.word	0x40b40000
 8001a90:	c0440000 	.word	0xc0440000
 8001a94:	40554000 	.word	0x40554000

08001a98 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001a98:	b5b0      	push	{r4, r5, r7, lr}
 8001a9a:	b08c      	sub	sp, #48	@ 0x30
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fd62 	bl	8000584 <__aeabi_i2d>
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ac8:	f7fe fef0 	bl	80008ac <__aeabi_ddiv>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	4bcb      	ldr	r3, [pc, #812]	@ (8001e08 <compensate_pressure+0x370>)
 8001ada:	f7fe fc05 	bl	80002e8 <__aeabi_dsub>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001ae6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001aee:	f7fe fdb3 	bl	8000658 <__aeabi_dmul>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4614      	mov	r4, r2
 8001af8:	461d      	mov	r5, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe fd3f 	bl	8000584 <__aeabi_i2d>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	f7fe fda3 	bl	8000658 <__aeabi_dmul>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	4bbb      	ldr	r3, [pc, #748]	@ (8001e0c <compensate_pressure+0x374>)
 8001b20:	f7fe fec4 	bl	80008ac <__aeabi_ddiv>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fd26 	bl	8000584 <__aeabi_i2d>
 8001b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b3c:	f7fe fd8c 	bl	8000658 <__aeabi_dmul>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	f7fe fbce 	bl	80002ec <__adddf3>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b58:	f7fe fbc8 	bl	80002ec <__adddf3>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	4ba9      	ldr	r3, [pc, #676]	@ (8001e10 <compensate_pressure+0x378>)
 8001b6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b6e:	f7fe fe9d 	bl	80008ac <__aeabi_ddiv>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4614      	mov	r4, r2
 8001b78:	461d      	mov	r5, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fcff 	bl	8000584 <__aeabi_i2d>
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	4ba2      	ldr	r3, [pc, #648]	@ (8001e14 <compensate_pressure+0x37c>)
 8001b8c:	f7fe fd64 	bl	8000658 <__aeabi_dmul>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4620      	mov	r0, r4
 8001b96:	4629      	mov	r1, r5
 8001b98:	f7fe fba8 	bl	80002ec <__adddf3>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fcea 	bl	8000584 <__aeabi_i2d>
 8001bb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bb4:	f7fe fd50 	bl	8000658 <__aeabi_dmul>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bc4:	f7fe fd48 	bl	8000658 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	4b90      	ldr	r3, [pc, #576]	@ (8001e18 <compensate_pressure+0x380>)
 8001bd6:	f7fe fe69 	bl	80008ac <__aeabi_ddiv>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4614      	mov	r4, r2
 8001be0:	461d      	mov	r5, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fccb 	bl	8000584 <__aeabi_i2d>
 8001bee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bf2:	f7fe fd31 	bl	8000658 <__aeabi_dmul>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	f7fe fb75 	bl	80002ec <__adddf3>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	4b82      	ldr	r3, [pc, #520]	@ (8001e18 <compensate_pressure+0x380>)
 8001c10:	f7fe fe4c 	bl	80008ac <__aeabi_ddiv>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	4b7a      	ldr	r3, [pc, #488]	@ (8001e0c <compensate_pressure+0x374>)
 8001c22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c26:	f7fe fe41 	bl	80008ac <__aeabi_ddiv>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4610      	mov	r0, r2
 8001c30:	4619      	mov	r1, r3
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	4b79      	ldr	r3, [pc, #484]	@ (8001e1c <compensate_pressure+0x384>)
 8001c38:	f7fe fb58 	bl	80002ec <__adddf3>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4614      	mov	r4, r2
 8001c42:	461d      	mov	r5, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fc8b 	bl	8000564 <__aeabi_ui2d>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4620      	mov	r0, r4
 8001c54:	4629      	mov	r1, r5
 8001c56:	f7fe fcff 	bl	8000658 <__aeabi_dmul>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c6e:	f7fe ff65 	bl	8000b3c <__aeabi_dcmplt>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10b      	bne.n	8001c90 <compensate_pressure+0x1f8>
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c84:	f7fe ff78 	bl	8000b78 <__aeabi_dcmpgt>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 80de 	beq.w	8001e4c <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc65 	bl	8000564 <__aeabi_ui2d>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	f04f 0000 	mov.w	r0, #0
 8001ca2:	495f      	ldr	r1, [pc, #380]	@ (8001e20 <compensate_pressure+0x388>)
 8001ca4:	f7fe fb20 	bl	80002e8 <__aeabi_dsub>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	4b5b      	ldr	r3, [pc, #364]	@ (8001e24 <compensate_pressure+0x38c>)
 8001cb6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cba:	f7fe fdf7 	bl	80008ac <__aeabi_ddiv>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cc6:	f7fe fb0f 	bl	80002e8 <__aeabi_dsub>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	a347      	add	r3, pc, #284	@ (adr r3, 8001df0 <compensate_pressure+0x358>)
 8001cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd8:	f7fe fcbe 	bl	8000658 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ce8:	f7fe fde0 	bl	80008ac <__aeabi_ddiv>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fc42 	bl	8000584 <__aeabi_i2d>
 8001d00:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d04:	f7fe fca8 	bl	8000658 <__aeabi_dmul>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d14:	f7fe fca0 	bl	8000658 <__aeabi_dmul>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	4b40      	ldr	r3, [pc, #256]	@ (8001e28 <compensate_pressure+0x390>)
 8001d26:	f7fe fdc1 	bl	80008ac <__aeabi_ddiv>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fc23 	bl	8000584 <__aeabi_i2d>
 8001d3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d42:	f7fe fc89 	bl	8000658 <__aeabi_dmul>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	4b2e      	ldr	r3, [pc, #184]	@ (8001e0c <compensate_pressure+0x374>)
 8001d54:	f7fe fdaa 	bl	80008ac <__aeabi_ddiv>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001d60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d64:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d68:	f7fe fac0 	bl	80002ec <__adddf3>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4614      	mov	r4, r2
 8001d72:	461d      	mov	r5, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fc02 	bl	8000584 <__aeabi_i2d>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4620      	mov	r0, r4
 8001d86:	4629      	mov	r1, r5
 8001d88:	f7fe fab0 	bl	80002ec <__adddf3>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	4b24      	ldr	r3, [pc, #144]	@ (8001e2c <compensate_pressure+0x394>)
 8001d9a:	f7fe fd87 	bl	80008ac <__aeabi_ddiv>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001da6:	f7fe faa1 	bl	80002ec <__adddf3>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001db2:	a311      	add	r3, pc, #68	@ (adr r3, 8001df8 <compensate_pressure+0x360>)
 8001db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dbc:	f7fe febe 	bl	8000b3c <__aeabi_dcmplt>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d007      	beq.n	8001dd6 <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001dc6:	a30c      	add	r3, pc, #48	@ (adr r3, 8001df8 <compensate_pressure+0x360>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001dd6:	a30a      	add	r3, pc, #40	@ (adr r3, 8001e00 <compensate_pressure+0x368>)
 8001dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ddc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001de0:	f7fe feca 	bl	8000b78 <__aeabi_dcmpgt>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	e022      	b.n	8001e30 <compensate_pressure+0x398>
 8001dea:	bf00      	nop
 8001dec:	f3af 8000 	nop.w
 8001df0:	00000000 	.word	0x00000000
 8001df4:	40b86a00 	.word	0x40b86a00
 8001df8:	00000000 	.word	0x00000000
 8001dfc:	40dd4c00 	.word	0x40dd4c00
 8001e00:	00000000 	.word	0x00000000
 8001e04:	40fadb00 	.word	0x40fadb00
 8001e08:	40ef4000 	.word	0x40ef4000
 8001e0c:	40e00000 	.word	0x40e00000
 8001e10:	40100000 	.word	0x40100000
 8001e14:	40f00000 	.word	0x40f00000
 8001e18:	41200000 	.word	0x41200000
 8001e1c:	3ff00000 	.word	0x3ff00000
 8001e20:	41300000 	.word	0x41300000
 8001e24:	40b00000 	.word	0x40b00000
 8001e28:	41e00000 	.word	0x41e00000
 8001e2c:	40300000 	.word	0x40300000
 8001e30:	d007      	beq.n	8001e42 <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001e32:	a309      	add	r3, pc, #36	@ (adr r3, 8001e58 <compensate_pressure+0x3c0>)
 8001e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e38:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        (*comp_pressure) = pressure;
 8001e42:	68f9      	ldr	r1, [r7, #12]
 8001e44:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e48:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001e4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3730      	adds	r7, #48	@ 0x30
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bdb0      	pop	{r4, r5, r7, pc}
 8001e58:	00000000 	.word	0x00000000
 8001e5c:	40fadb00 	.word	0x40fadb00

08001e60 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	db03      	blt.n	8001e7c <st_check_boundaries+0x1c>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	4a1c      	ldr	r2, [pc, #112]	@ (8001ee8 <st_check_boundaries+0x88>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	dd09      	ble.n	8001e90 <st_check_boundaries+0x30>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	db06      	blt.n	8001e90 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a18      	ldr	r2, [pc, #96]	@ (8001ee8 <st_check_boundaries+0x88>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	dc02      	bgt.n	8001e90 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001e8a:	23fa      	movs	r3, #250	@ 0xfa
 8001e8c:	73fb      	strb	r3, [r7, #15]
 8001e8e:	e023      	b.n	8001ed8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db03      	blt.n	8001e9e <st_check_boundaries+0x3e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a13      	ldr	r2, [pc, #76]	@ (8001ee8 <st_check_boundaries+0x88>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	dd09      	ble.n	8001eb2 <st_check_boundaries+0x52>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	db06      	blt.n	8001eb2 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4a10      	ldr	r2, [pc, #64]	@ (8001ee8 <st_check_boundaries+0x88>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	dc02      	bgt.n	8001eb2 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001eac:	23fb      	movs	r3, #251	@ 0xfb
 8001eae:	73fb      	strb	r3, [r7, #15]
 8001eb0:	e012      	b.n	8001ed8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	db03      	blt.n	8001ec0 <st_check_boundaries+0x60>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	4a0b      	ldr	r2, [pc, #44]	@ (8001ee8 <st_check_boundaries+0x88>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	dd09      	ble.n	8001ed4 <st_check_boundaries+0x74>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	db03      	blt.n	8001ece <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a07      	ldr	r2, [pc, #28]	@ (8001ee8 <st_check_boundaries+0x88>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	dd02      	ble.n	8001ed4 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001ece:	23f9      	movs	r3, #249	@ 0xf9
 8001ed0:	73fb      	strb	r3, [r7, #15]
 8001ed2:	e001      	b.n	8001ed8 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	000ffff0 	.word	0x000ffff0

08001eec <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff f839 	bl	8000f6c <bmp2_init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001efe:	f107 0308 	add.w	r3, r7, #8
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff f91e 	bl	8001146 <bmp2_get_config>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001f12:	2300      	movs	r3, #0
 8001f14:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001f16:	2303      	movs	r3, #3
 8001f18:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001f1a:	f107 0308 	add.w	r3, r7, #8
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff f950 	bl	80011c6 <bmp2_set_config>
 8001f26:	4603      	mov	r3, r0
 8001f28:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001f2a:	f107 0308 	add.w	r3, r7, #8
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	4619      	mov	r1, r3
 8001f32:	2003      	movs	r0, #3
 8001f34:	f7ff f982 	bl	800123c <bmp2_set_power_mode>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001f3c:	f107 0108 	add.w	r1, r7, #8
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fa0c 	bl	8001364 <bmp2_compute_meas_time>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001f50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	4603      	mov	r3, r0
 8001f6a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001f70:	2300      	movs	r3, #0
 8001f72:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	6858      	ldr	r0, [r3, #4]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	891b      	ldrh	r3, [r3, #8]
 8001f80:	2200      	movs	r2, #0
 8001f82:	4619      	mov	r1, r3
 8001f84:	f003 f9d0 	bl	8005328 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	f107 010f 	add.w	r1, r7, #15
 8001f90:	2305      	movs	r3, #5
 8001f92:	2201      	movs	r2, #1
 8001f94:	f004 fcbd 	bl	8006912 <HAL_SPI_Transmit>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	2305      	movs	r3, #5
 8001fa6:	68b9      	ldr	r1, [r7, #8]
 8001fa8:	f004 fe21 	bl	8006bee <HAL_SPI_Receive>
 8001fac:	4603      	mov	r3, r0
 8001fae:	461a      	mov	r2, r3
 8001fb0:	7dbb      	ldrb	r3, [r7, #22]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	6858      	ldr	r0, [r3, #4]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	891b      	ldrh	r3, [r3, #8]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f003 f9b1 	bl	8005328 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8001fc6:	7dbb      	ldrb	r3, [r7, #22]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <bmp2_spi_read+0x74>
    iError = -1;
 8001fcc:	23ff      	movs	r3, #255	@ 0xff
 8001fce:	75fb      	strb	r3, [r7, #23]

  return iError;
 8001fd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	4603      	mov	r3, r0
 8001fea:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	6858      	ldr	r0, [r3, #4]
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	891b      	ldrh	r3, [r3, #8]
 8002000:	2200      	movs	r2, #0
 8002002:	4619      	mov	r1, r3
 8002004:	f003 f990 	bl	8005328 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	f107 010f 	add.w	r1, r7, #15
 8002010:	2305      	movs	r3, #5
 8002012:	2201      	movs	r2, #1
 8002014:	f004 fc7d 	bl	8006912 <HAL_SPI_Transmit>
 8002018:	4603      	mov	r3, r0
 800201a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	b29a      	uxth	r2, r3
 8002024:	2305      	movs	r3, #5
 8002026:	68b9      	ldr	r1, [r7, #8]
 8002028:	f004 fc73 	bl	8006912 <HAL_SPI_Transmit>
 800202c:	4603      	mov	r3, r0
 800202e:	461a      	mov	r2, r3
 8002030:	7dbb      	ldrb	r3, [r7, #22]
 8002032:	4413      	add	r3, r2
 8002034:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	6858      	ldr	r0, [r3, #4]
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	891b      	ldrh	r3, [r3, #8]
 800203e:	2201      	movs	r2, #1
 8002040:	4619      	mov	r1, r3
 8002042:	f003 f971 	bl	8005328 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002046:	7dbb      	ldrb	r3, [r7, #22]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <bmp2_spi_write+0x74>
    iError = -1;
 800204c:	23ff      	movs	r3, #255	@ 0xff
 800204e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002050:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a05      	ldr	r2, [pc, #20]	@ (8002080 <bmp2_delay_us+0x24>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	099b      	lsrs	r3, r3, #6
 8002070:	4618      	mov	r0, r3
 8002072:	f002 fe3d 	bl	8004cf0 <HAL_Delay>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	10624dd3 	.word	0x10624dd3

08002084 <BMP2_ReadData>:
 *  @retval 0 -> Success.
 *  @retval <0 -> Failure.
 *
 */
int8_t BMP2_ReadData(struct bmp2_dev *dev, double* press, double* temp)
{
 8002084:	b590      	push	{r4, r7, lr}
 8002086:	b08b      	sub	sp, #44	@ 0x2c
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 8002090:	23ff      	movs	r3, #255	@ 0xff
 8002092:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  struct bmp2_status status;
  struct bmp2_data comp_data;
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	899b      	ldrh	r3, [r3, #12]
 800209c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 80020a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020a4:	68f9      	ldr	r1, [r7, #12]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff f89c 	bl	80011e4 <bmp2_get_status>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 80020b2:	f107 0310 	add.w	r3, r7, #16
 80020b6:	68f9      	ldr	r1, [r7, #12]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff f8d4 	bl	8001266 <bmp2_get_sensor_data>
 80020be:	4603      	mov	r3, r0
 80020c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    *temp = comp_data.temperature;
 80020c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	e9c1 2300 	strd	r2, r3, [r1]
    *press = comp_data.pressure / 100.0;
 80020ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002148 <BMP2_ReadData+0xc4>)
 80020d8:	f7fe fbe8 	bl	80008ac <__aeabi_ddiv>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	e9c1 2300 	strd	r2, r3, [r1]
    try--;
 80020e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 80020f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <BMP2_ReadData+0x80>
 80020fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002100:	2b00      	cmp	r3, #0
 8002102:	dccd      	bgt.n	80020a0 <BMP2_ReadData+0x1c>

  /* Save reading result in sensor handler */
  BMP2_GET_PRESS(dev) = *press;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210a:	68f9      	ldr	r1, [r7, #12]
 800210c:	684c      	ldr	r4, [r1, #4]
 800210e:	4610      	mov	r0, r2
 8002110:	4619      	mov	r1, r3
 8002112:	f7fe fd63 	bl	8000bdc <__aeabi_d2f>
 8002116:	4603      	mov	r3, r0
 8002118:	6163      	str	r3, [r4, #20]
  BMP2_GET_TEMP(dev) = *temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002120:	68f9      	ldr	r1, [r7, #12]
 8002122:	684c      	ldr	r4, [r1, #4]
 8002124:	4610      	mov	r0, r2
 8002126:	4619      	mov	r1, r3
 8002128:	f7fe fd58 	bl	8000bdc <__aeabi_d2f>
 800212c:	4603      	mov	r3, r0
 800212e:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002138:	729a      	strb	r2, [r3, #10]

  return rslt;
 800213a:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
}
 800213e:	4618      	mov	r0, r3
 8002140:	372c      	adds	r7, #44	@ 0x2c
 8002142:	46bd      	mov	sp, r7
 8002144:	bd90      	pop	{r4, r7, pc}
 8002146:	bf00      	nop
 8002148:	40590000 	.word	0x40590000

0800214c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08c      	sub	sp, #48	@ 0x30
 8002150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002152:	f107 031c 	add.w	r3, r7, #28
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	60da      	str	r2, [r3, #12]
 8002160:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002162:	4ba2      	ldr	r3, [pc, #648]	@ (80023ec <MX_GPIO_Init+0x2a0>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	4aa1      	ldr	r2, [pc, #644]	@ (80023ec <MX_GPIO_Init+0x2a0>)
 8002168:	f043 0310 	orr.w	r3, r3, #16
 800216c:	6313      	str	r3, [r2, #48]	@ 0x30
 800216e:	4b9f      	ldr	r3, [pc, #636]	@ (80023ec <MX_GPIO_Init+0x2a0>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	61bb      	str	r3, [r7, #24]
 8002178:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800217a:	4b9c      	ldr	r3, [pc, #624]	@ (80023ec <MX_GPIO_Init+0x2a0>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	4a9b      	ldr	r2, [pc, #620]	@ (80023ec <MX_GPIO_Init+0x2a0>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	6313      	str	r3, [r2, #48]	@ 0x30
 8002186:	4b99      	ldr	r3, [pc, #612]	@ (80023ec <MX_GPIO_Init+0x2a0>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002192:	4b96      	ldr	r3, [pc, #600]	@ (80023ec <MX_GPIO_Init+0x2a0>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	4a95      	ldr	r2, [pc, #596]	@ (80023ec <MX_GPIO_Init+0x2a0>)
 8002198:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800219c:	6313      	str	r3, [r2, #48]	@ 0x30
 800219e:	4b93      	ldr	r3, [pc, #588]	@ (80023ec <MX_GPIO_Init+0x2a0>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	4b90      	ldr	r3, [pc, #576]	@ (80023ec <MX_GPIO_Init+0x2a0>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ae:	4a8f      	ldr	r2, [pc, #572]	@ (80023ec <MX_GPIO_Init+0x2a0>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b6:	4b8d      	ldr	r3, [pc, #564]	@ (80023ec <MX_GPIO_Init+0x2a0>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c2:	4b8a      	ldr	r3, [pc, #552]	@ (80023ec <MX_GPIO_Init+0x2a0>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	4a89      	ldr	r2, [pc, #548]	@ (80023ec <MX_GPIO_Init+0x2a0>)
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ce:	4b87      	ldr	r3, [pc, #540]	@ (80023ec <MX_GPIO_Init+0x2a0>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021da:	4b84      	ldr	r3, [pc, #528]	@ (80023ec <MX_GPIO_Init+0x2a0>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	4a83      	ldr	r2, [pc, #524]	@ (80023ec <MX_GPIO_Init+0x2a0>)
 80021e0:	f043 0308 	orr.w	r3, r3, #8
 80021e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e6:	4b81      	ldr	r3, [pc, #516]	@ (80023ec <MX_GPIO_Init+0x2a0>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	607b      	str	r3, [r7, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021f2:	4b7e      	ldr	r3, [pc, #504]	@ (80023ec <MX_GPIO_Init+0x2a0>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	4a7d      	ldr	r2, [pc, #500]	@ (80023ec <MX_GPIO_Init+0x2a0>)
 80021f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021fe:	4b7b      	ldr	r3, [pc, #492]	@ (80023ec <MX_GPIO_Init+0x2a0>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP2_CSB_Pin|Alarm_LED_Pin, GPIO_PIN_RESET);
 800220a:	2200      	movs	r2, #0
 800220c:	f248 0110 	movw	r1, #32784	@ 0x8010
 8002210:	4877      	ldr	r0, [pc, #476]	@ (80023f0 <MX_GPIO_Init+0x2a4>)
 8002212:	f003 f889 	bl	8005328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002216:	2200      	movs	r2, #0
 8002218:	2140      	movs	r1, #64	@ 0x40
 800221a:	4876      	ldr	r0, [pc, #472]	@ (80023f4 <MX_GPIO_Init+0x2a8>)
 800221c:	f003 f884 	bl	8005328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002220:	2200      	movs	r2, #0
 8002222:	2180      	movs	r1, #128	@ 0x80
 8002224:	4874      	ldr	r0, [pc, #464]	@ (80023f8 <MX_GPIO_Init+0x2ac>)
 8002226:	f003 f87f 	bl	8005328 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BMP2_CSB_Pin|Alarm_LED_Pin;
 800222a:	f248 0310 	movw	r3, #32784	@ 0x8010
 800222e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002230:	2301      	movs	r3, #1
 8002232:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002238:	2300      	movs	r3, #0
 800223a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800223c:	f107 031c 	add.w	r3, r7, #28
 8002240:	4619      	mov	r1, r3
 8002242:	486b      	ldr	r0, [pc, #428]	@ (80023f0 <MX_GPIO_Init+0x2a4>)
 8002244:	f002 feac 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002248:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800224c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800224e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002252:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002258:	f107 031c 	add.w	r3, r7, #28
 800225c:	4619      	mov	r1, r3
 800225e:	4867      	ldr	r0, [pc, #412]	@ (80023fc <MX_GPIO_Init+0x2b0>)
 8002260:	f002 fe9e 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002264:	2332      	movs	r3, #50	@ 0x32
 8002266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002270:	2303      	movs	r3, #3
 8002272:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002274:	230b      	movs	r3, #11
 8002276:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002278:	f107 031c 	add.w	r3, r7, #28
 800227c:	4619      	mov	r1, r3
 800227e:	485f      	ldr	r0, [pc, #380]	@ (80023fc <MX_GPIO_Init+0x2b0>)
 8002280:	f002 fe8e 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002284:	2386      	movs	r3, #134	@ 0x86
 8002286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002290:	2303      	movs	r3, #3
 8002292:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002294:	230b      	movs	r3, #11
 8002296:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002298:	f107 031c 	add.w	r3, r7, #28
 800229c:	4619      	mov	r1, r3
 800229e:	4858      	ldr	r0, [pc, #352]	@ (8002400 <MX_GPIO_Init+0x2b4>)
 80022a0:	f002 fe7e 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022aa:	2302      	movs	r3, #2
 80022ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b2:	2303      	movs	r3, #3
 80022b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80022b6:	2308      	movs	r3, #8
 80022b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022ba:	f107 031c 	add.w	r3, r7, #28
 80022be:	4619      	mov	r1, r3
 80022c0:	484b      	ldr	r0, [pc, #300]	@ (80023f0 <MX_GPIO_Init+0x2a4>)
 80022c2:	f002 fe6d 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PIR_Livingroom_Pin|PIR_Garage_Pin|PIR_Kitchen_Pin;
 80022c6:	f44f 43a8 	mov.w	r3, #21504	@ 0x5400
 80022ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022cc:	2300      	movs	r3, #0
 80022ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022d4:	f107 031c 	add.w	r3, r7, #28
 80022d8:	4619      	mov	r1, r3
 80022da:	4845      	ldr	r0, [pc, #276]	@ (80023f0 <MX_GPIO_Init+0x2a4>)
 80022dc:	f002 fe60 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80022e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e6:	2302      	movs	r3, #2
 80022e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ee:	2303      	movs	r3, #3
 80022f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022f2:	230b      	movs	r3, #11
 80022f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80022f6:	f107 031c 	add.w	r3, r7, #28
 80022fa:	4619      	mov	r1, r3
 80022fc:	483e      	ldr	r0, [pc, #248]	@ (80023f8 <MX_GPIO_Init+0x2ac>)
 80022fe:	f002 fe4f 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002302:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002308:	2302      	movs	r3, #2
 800230a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800230c:	2301      	movs	r3, #1
 800230e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002310:	2303      	movs	r3, #3
 8002312:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002314:	2307      	movs	r3, #7
 8002316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002318:	f107 031c 	add.w	r3, r7, #28
 800231c:	4619      	mov	r1, r3
 800231e:	4839      	ldr	r0, [pc, #228]	@ (8002404 <MX_GPIO_Init+0x2b8>)
 8002320:	f002 fe3e 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002324:	2340      	movs	r3, #64	@ 0x40
 8002326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002328:	2301      	movs	r3, #1
 800232a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002330:	2300      	movs	r3, #0
 8002332:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002334:	f107 031c 	add.w	r3, r7, #28
 8002338:	4619      	mov	r1, r3
 800233a:	482e      	ldr	r0, [pc, #184]	@ (80023f4 <MX_GPIO_Init+0x2a8>)
 800233c:	f002 fe30 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002340:	2380      	movs	r3, #128	@ 0x80
 8002342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002344:	2300      	movs	r3, #0
 8002346:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800234c:	f107 031c 	add.w	r3, r7, #28
 8002350:	4619      	mov	r1, r3
 8002352:	4828      	ldr	r0, [pc, #160]	@ (80023f4 <MX_GPIO_Init+0x2a8>)
 8002354:	f002 fe24 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002358:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800235c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800236a:	230a      	movs	r3, #10
 800236c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236e:	f107 031c 	add.w	r3, r7, #28
 8002372:	4619      	mov	r1, r3
 8002374:	4822      	ldr	r0, [pc, #136]	@ (8002400 <MX_GPIO_Init+0x2b4>)
 8002376:	f002 fe13 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800237a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800237e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002380:	2300      	movs	r3, #0
 8002382:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002388:	f107 031c 	add.w	r3, r7, #28
 800238c:	4619      	mov	r1, r3
 800238e:	481c      	ldr	r0, [pc, #112]	@ (8002400 <MX_GPIO_Init+0x2b4>)
 8002390:	f002 fe06 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002394:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a2:	2303      	movs	r3, #3
 80023a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023a6:	230b      	movs	r3, #11
 80023a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023aa:	f107 031c 	add.w	r3, r7, #28
 80023ae:	4619      	mov	r1, r3
 80023b0:	4810      	ldr	r0, [pc, #64]	@ (80023f4 <MX_GPIO_Init+0x2a8>)
 80023b2:	f002 fdf5 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80023b6:	2380      	movs	r3, #128	@ 0x80
 80023b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ba:	2301      	movs	r3, #1
 80023bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c2:	2300      	movs	r3, #0
 80023c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80023c6:	f107 031c 	add.w	r3, r7, #28
 80023ca:	4619      	mov	r1, r3
 80023cc:	480a      	ldr	r0, [pc, #40]	@ (80023f8 <MX_GPIO_Init+0x2ac>)
 80023ce:	f002 fde7 	bl	8004fa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2100      	movs	r1, #0
 80023d6:	2028      	movs	r0, #40	@ 0x28
 80023d8:	f002 fd89 	bl	8004eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023dc:	2028      	movs	r0, #40	@ 0x28
 80023de:	f002 fda2 	bl	8004f26 <HAL_NVIC_EnableIRQ>

}
 80023e2:	bf00      	nop
 80023e4:	3730      	adds	r7, #48	@ 0x30
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40021800 	.word	0x40021800
 80023f8:	40020400 	.word	0x40020400
 80023fc:	40020800 	.word	0x40020800
 8002400:	40020000 	.word	0x40020000
 8002404:	40020c00 	.word	0x40020c00

08002408 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800240c:	4b1b      	ldr	r3, [pc, #108]	@ (800247c <MX_I2C1_Init+0x74>)
 800240e:	4a1c      	ldr	r2, [pc, #112]	@ (8002480 <MX_I2C1_Init+0x78>)
 8002410:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8002412:	4b1a      	ldr	r3, [pc, #104]	@ (800247c <MX_I2C1_Init+0x74>)
 8002414:	4a1b      	ldr	r2, [pc, #108]	@ (8002484 <MX_I2C1_Init+0x7c>)
 8002416:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002418:	4b18      	ldr	r3, [pc, #96]	@ (800247c <MX_I2C1_Init+0x74>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800241e:	4b17      	ldr	r3, [pc, #92]	@ (800247c <MX_I2C1_Init+0x74>)
 8002420:	2201      	movs	r2, #1
 8002422:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002424:	4b15      	ldr	r3, [pc, #84]	@ (800247c <MX_I2C1_Init+0x74>)
 8002426:	2200      	movs	r2, #0
 8002428:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800242a:	4b14      	ldr	r3, [pc, #80]	@ (800247c <MX_I2C1_Init+0x74>)
 800242c:	2200      	movs	r2, #0
 800242e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002430:	4b12      	ldr	r3, [pc, #72]	@ (800247c <MX_I2C1_Init+0x74>)
 8002432:	2200      	movs	r2, #0
 8002434:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002436:	4b11      	ldr	r3, [pc, #68]	@ (800247c <MX_I2C1_Init+0x74>)
 8002438:	2200      	movs	r2, #0
 800243a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800243c:	4b0f      	ldr	r3, [pc, #60]	@ (800247c <MX_I2C1_Init+0x74>)
 800243e:	2200      	movs	r2, #0
 8002440:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002442:	480e      	ldr	r0, [pc, #56]	@ (800247c <MX_I2C1_Init+0x74>)
 8002444:	f002 ffc8 	bl	80053d8 <HAL_I2C_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800244e:	f001 fdb1 	bl	8003fb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002452:	2100      	movs	r1, #0
 8002454:	4809      	ldr	r0, [pc, #36]	@ (800247c <MX_I2C1_Init+0x74>)
 8002456:	f003 f84f 	bl	80054f8 <HAL_I2CEx_ConfigAnalogFilter>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002460:	f001 fda8 	bl	8003fb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002464:	2100      	movs	r1, #0
 8002466:	4805      	ldr	r0, [pc, #20]	@ (800247c <MX_I2C1_Init+0x74>)
 8002468:	f003 f891 	bl	800558e <HAL_I2CEx_ConfigDigitalFilter>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002472:	f001 fd9f 	bl	8003fb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	200001a4 	.word	0x200001a4
 8002480:	40005400 	.word	0x40005400
 8002484:	00808cd2 	.word	0x00808cd2

08002488 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b0aa      	sub	sp, #168	@ 0xa8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024a0:	f107 0310 	add.w	r3, r7, #16
 80024a4:	2284      	movs	r2, #132	@ 0x84
 80024a6:	2100      	movs	r1, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f007 fcf1 	bl	8009e90 <memset>
  if(i2cHandle->Instance==I2C1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a22      	ldr	r2, [pc, #136]	@ (800253c <HAL_I2C_MspInit+0xb4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d13c      	bne.n	8002532 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80024b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80024be:	2300      	movs	r3, #0
 80024c0:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024c2:	f107 0310 	add.w	r3, r7, #16
 80024c6:	4618      	mov	r0, r3
 80024c8:	f003 fd88 	bl	8005fdc <HAL_RCCEx_PeriphCLKConfig>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80024d2:	f001 fd6f 	bl	8003fb4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002540 <HAL_I2C_MspInit+0xb8>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	4a19      	ldr	r2, [pc, #100]	@ (8002540 <HAL_I2C_MspInit+0xb8>)
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e2:	4b17      	ldr	r3, [pc, #92]	@ (8002540 <HAL_I2C_MspInit+0xb8>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80024ee:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80024f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024f6:	2312      	movs	r3, #18
 80024f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002502:	2303      	movs	r3, #3
 8002504:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002508:	2304      	movs	r3, #4
 800250a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002512:	4619      	mov	r1, r3
 8002514:	480b      	ldr	r0, [pc, #44]	@ (8002544 <HAL_I2C_MspInit+0xbc>)
 8002516:	f002 fd43 	bl	8004fa0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800251a:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <HAL_I2C_MspInit+0xb8>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	4a08      	ldr	r2, [pc, #32]	@ (8002540 <HAL_I2C_MspInit+0xb8>)
 8002520:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002524:	6413      	str	r3, [r2, #64]	@ 0x40
 8002526:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <HAL_I2C_MspInit+0xb8>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002532:	bf00      	nop
 8002534:	37a8      	adds	r7, #168	@ 0xa8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40005400 	.word	0x40005400
 8002540:	40023800 	.word	0x40023800
 8002544:	40020400 	.word	0x40020400

08002548 <keypad_config>:

const char Rows[4]={R1, R2, R3, R4};
const char Cols[4]={C1, C2, C3, C4};

void keypad_config(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08a      	sub	sp, #40	@ 0x28
 800254c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  if (KEYPAD_4x4_GPIO == GPIOA) __HAL_RCC_GPIOA_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOB) __HAL_RCC_GPIOB_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOC) __HAL_RCC_GPIOC_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOD) __HAL_RCC_GPIOD_CLK_ENABLE(); else
 800254e:	4b16      	ldr	r3, [pc, #88]	@ (80025a8 <keypad_config+0x60>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	4a15      	ldr	r2, [pc, #84]	@ (80025a8 <keypad_config+0x60>)
 8002554:	f043 0308 	orr.w	r3, r3, #8
 8002558:	6313      	str	r3, [r2, #48]	@ 0x30
 800255a:	4b13      	ldr	r3, [pc, #76]	@ (80025a8 <keypad_config+0x60>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
  if (KEYPAD_4x4_GPIO == GPIOE) __HAL_RCC_GPIOE_CLK_ENABLE();


  GPIO_InitStruct.Pin = R1 | R2 | R3 | R4;
 8002566:	230f      	movs	r3, #15
 8002568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800256a:	2301      	movs	r3, #1
 800256c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002572:	2300      	movs	r3, #0
 8002574:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEYPAD_4x4_GPIO, &GPIO_InitStruct);
 8002576:	f107 0314 	add.w	r3, r7, #20
 800257a:	4619      	mov	r1, r3
 800257c:	480b      	ldr	r0, [pc, #44]	@ (80025ac <keypad_config+0x64>)
 800257e:	f002 fd0f 	bl	8004fa0 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = C1 | C2 | C3 | C4;
 8002582:	23f0      	movs	r3, #240	@ 0xf0
 8002584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800258a:	2302      	movs	r3, #2
 800258c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258e:	2300      	movs	r3, #0
 8002590:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEYPAD_4x4_GPIO, &GPIO_InitStruct);
 8002592:	f107 0314 	add.w	r3, r7, #20
 8002596:	4619      	mov	r1, r3
 8002598:	4804      	ldr	r0, [pc, #16]	@ (80025ac <keypad_config+0x64>)
 800259a:	f002 fd01 	bl	8004fa0 <HAL_GPIO_Init>

}
 800259e:	bf00      	nop
 80025a0:	3728      	adds	r7, #40	@ 0x28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40020c00 	.word	0x40020c00

080025b0 <keypad_readkey>:

char keypad_readkey(void)
{ //returns ASCII code of a pressed key
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
  unsigned char r, c;
  char pressedKey=0x00;
 80025b6:	2300      	movs	r3, #0
 80025b8:	717b      	strb	r3, [r7, #5]

  r=0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	71fb      	strb	r3, [r7, #7]
  while (r<4) {
 80025be:	e02d      	b.n	800261c <keypad_readkey+0x6c>
    HAL_GPIO_WritePin(KEYPAD_4x4_GPIO, Rows[r], GPIO_PIN_SET);        //activate row
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	4a1a      	ldr	r2, [pc, #104]	@ (800262c <keypad_readkey+0x7c>)
 80025c4:	5cd3      	ldrb	r3, [r2, r3]
 80025c6:	2201      	movs	r2, #1
 80025c8:	4619      	mov	r1, r3
 80025ca:	4819      	ldr	r0, [pc, #100]	@ (8002630 <keypad_readkey+0x80>)
 80025cc:	f002 feac 	bl	8005328 <HAL_GPIO_WritePin>
    c=0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	71bb      	strb	r3, [r7, #6]
    while (c<4) {
 80025d4:	e014      	b.n	8002600 <keypad_readkey+0x50>
      if (HAL_GPIO_ReadPin(KEYPAD_4x4_GPIO, Cols[c])==GPIO_PIN_SET){  //check columns
 80025d6:	79bb      	ldrb	r3, [r7, #6]
 80025d8:	4a16      	ldr	r2, [pc, #88]	@ (8002634 <keypad_readkey+0x84>)
 80025da:	5cd3      	ldrb	r3, [r2, r3]
 80025dc:	4619      	mov	r1, r3
 80025de:	4814      	ldr	r0, [pc, #80]	@ (8002630 <keypad_readkey+0x80>)
 80025e0:	f002 fe8a 	bl	80052f8 <HAL_GPIO_ReadPin>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d107      	bne.n	80025fa <keypad_readkey+0x4a>
        pressedKey=KeyMap[r][c];                                   //if column active - find key value
 80025ea:	79fa      	ldrb	r2, [r7, #7]
 80025ec:	79bb      	ldrb	r3, [r7, #6]
 80025ee:	4912      	ldr	r1, [pc, #72]	@ (8002638 <keypad_readkey+0x88>)
 80025f0:	0092      	lsls	r2, r2, #2
 80025f2:	440a      	add	r2, r1
 80025f4:	4413      	add	r3, r2
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	717b      	strb	r3, [r7, #5]
      }
      c++;
 80025fa:	79bb      	ldrb	r3, [r7, #6]
 80025fc:	3301      	adds	r3, #1
 80025fe:	71bb      	strb	r3, [r7, #6]
    while (c<4) {
 8002600:	79bb      	ldrb	r3, [r7, #6]
 8002602:	2b03      	cmp	r3, #3
 8002604:	d9e7      	bls.n	80025d6 <keypad_readkey+0x26>
    }
    HAL_GPIO_WritePin(KEYPAD_4x4_GPIO, Rows[r], GPIO_PIN_RESET);      //deactivate row
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	4a08      	ldr	r2, [pc, #32]	@ (800262c <keypad_readkey+0x7c>)
 800260a:	5cd3      	ldrb	r3, [r2, r3]
 800260c:	2200      	movs	r2, #0
 800260e:	4619      	mov	r1, r3
 8002610:	4807      	ldr	r0, [pc, #28]	@ (8002630 <keypad_readkey+0x80>)
 8002612:	f002 fe89 	bl	8005328 <HAL_GPIO_WritePin>
    r++;
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	3301      	adds	r3, #1
 800261a:	71fb      	strb	r3, [r7, #7]
  while (r<4) {
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	2b03      	cmp	r3, #3
 8002620:	d9ce      	bls.n	80025c0 <keypad_readkey+0x10>
  }
  return pressedKey;                                               //return ASCII key value
 8002622:	797b      	ldrb	r3, [r7, #5]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	0800aae4 	.word	0x0800aae4
 8002630:	40020c00 	.word	0x40020c00
 8002634:	0800aae8 	.word	0x0800aae8
 8002638:	0800aad4 	.word	0x0800aad4

0800263c <LCD_WriteNibble>:

GPIO_InitTypeDef GPIO_InitStruct;

//-----------------------------------------------------------------------------
void LCD_WriteNibble(char nibbleToWrite)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_SET);
 8002646:	2201      	movs	r2, #1
 8002648:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800264c:	4818      	ldr	r0, [pc, #96]	@ (80026b0 <LCD_WriteNibble+0x74>)
 800264e:	f002 fe6b 	bl	8005328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D4, (GPIO_PinState)(nibbleToWrite & 0x01));
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	2108      	movs	r1, #8
 800265e:	4814      	ldr	r0, [pc, #80]	@ (80026b0 <LCD_WriteNibble+0x74>)
 8002660:	f002 fe62 	bl	8005328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D5, (GPIO_PinState)(nibbleToWrite & 0x02));
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	b2db      	uxtb	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	2104      	movs	r1, #4
 8002670:	480f      	ldr	r0, [pc, #60]	@ (80026b0 <LCD_WriteNibble+0x74>)
 8002672:	f002 fe59 	bl	8005328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D6, (GPIO_PinState)(nibbleToWrite & 0x04));
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	2140      	movs	r1, #64	@ 0x40
 8002682:	480b      	ldr	r0, [pc, #44]	@ (80026b0 <LCD_WriteNibble+0x74>)
 8002684:	f002 fe50 	bl	8005328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D7, (GPIO_PinState)(nibbleToWrite & 0x08));
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	b2db      	uxtb	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	2101      	movs	r1, #1
 8002694:	4806      	ldr	r0, [pc, #24]	@ (80026b0 <LCD_WriteNibble+0x74>)
 8002696:	f002 fe47 	bl	8005328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_RESET);
 800269a:	2200      	movs	r2, #0
 800269c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80026a0:	4803      	ldr	r0, [pc, #12]	@ (80026b0 <LCD_WriteNibble+0x74>)
 80026a2:	f002 fe41 	bl	8005328 <HAL_GPIO_WritePin>
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40020800 	.word	0x40020800

080026b4 <LCD_ReadNibble>:


//-----------------------------------------------------------------------------
unsigned char LCD_ReadNibble(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
  unsigned char tmp = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_SET);
 80026be:	2201      	movs	r2, #1
 80026c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80026c4:	481e      	ldr	r0, [pc, #120]	@ (8002740 <LCD_ReadNibble+0x8c>)
 80026c6:	f002 fe2f 	bl	8005328 <HAL_GPIO_WritePin>
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D4) << 0);
 80026ca:	2108      	movs	r1, #8
 80026cc:	481c      	ldr	r0, [pc, #112]	@ (8002740 <LCD_ReadNibble+0x8c>)
 80026ce:	f002 fe13 	bl	80052f8 <HAL_GPIO_ReadPin>
 80026d2:	4603      	mov	r3, r0
 80026d4:	b25a      	sxtb	r2, r3
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	4313      	orrs	r3, r2
 80026dc:	b25b      	sxtb	r3, r3
 80026de:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D5) << 1);
 80026e0:	2104      	movs	r1, #4
 80026e2:	4817      	ldr	r0, [pc, #92]	@ (8002740 <LCD_ReadNibble+0x8c>)
 80026e4:	f002 fe08 	bl	80052f8 <HAL_GPIO_ReadPin>
 80026e8:	4603      	mov	r3, r0
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	b25a      	sxtb	r2, r3
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	b25b      	sxtb	r3, r3
 80026f6:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D6) << 2);
 80026f8:	2140      	movs	r1, #64	@ 0x40
 80026fa:	4811      	ldr	r0, [pc, #68]	@ (8002740 <LCD_ReadNibble+0x8c>)
 80026fc:	f002 fdfc 	bl	80052f8 <HAL_GPIO_ReadPin>
 8002700:	4603      	mov	r3, r0
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	b25a      	sxtb	r2, r3
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	4313      	orrs	r3, r2
 800270c:	b25b      	sxtb	r3, r3
 800270e:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D7) << 3);
 8002710:	2101      	movs	r1, #1
 8002712:	480b      	ldr	r0, [pc, #44]	@ (8002740 <LCD_ReadNibble+0x8c>)
 8002714:	f002 fdf0 	bl	80052f8 <HAL_GPIO_ReadPin>
 8002718:	4603      	mov	r3, r0
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	b25a      	sxtb	r2, r3
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	4313      	orrs	r3, r2
 8002724:	b25b      	sxtb	r3, r3
 8002726:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_RESET);
 8002728:	2200      	movs	r2, #0
 800272a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800272e:	4804      	ldr	r0, [pc, #16]	@ (8002740 <LCD_ReadNibble+0x8c>)
 8002730:	f002 fdfa 	bl	8005328 <HAL_GPIO_WritePin>
  return tmp;
 8002734:	79fb      	ldrb	r3, [r7, #7]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40020800 	.word	0x40020800

08002744 <LCD_ReadStatus>:


//-----------------------------------------------------------------------------
unsigned char LCD_ReadStatus(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
  unsigned char status = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	71fb      	strb	r3, [r7, #7]
  
  GPIO_InitStruct.Pin =  LCD_D4 | LCD_D5 | LCD_D6 | LCD_D7;
 800274e:	4b21      	ldr	r3, [pc, #132]	@ (80027d4 <LCD_ReadStatus+0x90>)
 8002750:	224d      	movs	r2, #77	@ 0x4d
 8002752:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002754:	4b1f      	ldr	r3, [pc, #124]	@ (80027d4 <LCD_ReadStatus+0x90>)
 8002756:	2200      	movs	r2, #0
 8002758:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800275a:	4b1e      	ldr	r3, [pc, #120]	@ (80027d4 <LCD_ReadStatus+0x90>)
 800275c:	2201      	movs	r2, #1
 800275e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002760:	4b1c      	ldr	r3, [pc, #112]	@ (80027d4 <LCD_ReadStatus+0x90>)
 8002762:	2201      	movs	r2, #1
 8002764:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002766:	491b      	ldr	r1, [pc, #108]	@ (80027d4 <LCD_ReadStatus+0x90>)
 8002768:	481b      	ldr	r0, [pc, #108]	@ (80027d8 <LCD_ReadStatus+0x94>)
 800276a:	f002 fc19 	bl	8004fa0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW, GPIO_PIN_SET);
 800276e:	2201      	movs	r2, #1
 8002770:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002774:	4818      	ldr	r0, [pc, #96]	@ (80027d8 <LCD_ReadStatus+0x94>)
 8002776:	f002 fdd7 	bl	8005328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RS, GPIO_PIN_RESET);
 800277a:	2200      	movs	r2, #0
 800277c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002780:	4815      	ldr	r0, [pc, #84]	@ (80027d8 <LCD_ReadStatus+0x94>)
 8002782:	f002 fdd1 	bl	8005328 <HAL_GPIO_WritePin>
  
  status |= (LCD_ReadNibble() << 4);
 8002786:	f7ff ff95 	bl	80026b4 <LCD_ReadNibble>
 800278a:	4603      	mov	r3, r0
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	b25a      	sxtb	r2, r3
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	4313      	orrs	r3, r2
 8002796:	b25b      	sxtb	r3, r3
 8002798:	71fb      	strb	r3, [r7, #7]
  status |= LCD_ReadNibble();
 800279a:	f7ff ff8b 	bl	80026b4 <LCD_ReadNibble>
 800279e:	4603      	mov	r3, r0
 80027a0:	461a      	mov	r2, r3
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	71fb      	strb	r3, [r7, #7]
  

  GPIO_InitStruct.Pin = LCD_D4|LCD_D5|LCD_D6|LCD_D7;
 80027a8:	4b0a      	ldr	r3, [pc, #40]	@ (80027d4 <LCD_ReadStatus+0x90>)
 80027aa:	224d      	movs	r2, #77	@ 0x4d
 80027ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ae:	4b09      	ldr	r3, [pc, #36]	@ (80027d4 <LCD_ReadStatus+0x90>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	4b07      	ldr	r3, [pc, #28]	@ (80027d4 <LCD_ReadStatus+0x90>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80027ba:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <LCD_ReadStatus+0x90>)
 80027bc:	2201      	movs	r2, #1
 80027be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c0:	4904      	ldr	r1, [pc, #16]	@ (80027d4 <LCD_ReadStatus+0x90>)
 80027c2:	4805      	ldr	r0, [pc, #20]	@ (80027d8 <LCD_ReadStatus+0x94>)
 80027c4:	f002 fbec 	bl	8004fa0 <HAL_GPIO_Init>

  return status;
 80027c8:	79fb      	ldrb	r3, [r7, #7]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	200001f8 	.word	0x200001f8
 80027d8:	40020800 	.word	0x40020800

080027dc <LCD_WriteData>:


//-----------------------------------------------------------------------------
void LCD_WriteData(char dataToWrite)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW, GPIO_PIN_RESET);
 80027e6:	2200      	movs	r2, #0
 80027e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80027ec:	4810      	ldr	r0, [pc, #64]	@ (8002830 <LCD_WriteData+0x54>)
 80027ee:	f002 fd9b 	bl	8005328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RS, GPIO_PIN_SET);
 80027f2:	2201      	movs	r2, #1
 80027f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80027f8:	480d      	ldr	r0, [pc, #52]	@ (8002830 <LCD_WriteData+0x54>)
 80027fa:	f002 fd95 	bl	8005328 <HAL_GPIO_WritePin>
  
  LCD_WriteNibble(dataToWrite >> 4);
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	b2db      	uxtb	r3, r3
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff19 	bl	800263c <LCD_WriteNibble>
  LCD_WriteNibble(dataToWrite & 0x0F);
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	f003 030f 	and.w	r3, r3, #15
 8002810:	b2db      	uxtb	r3, r3
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff12 	bl	800263c <LCD_WriteNibble>
  
  while(LCD_ReadStatus() & 0x80);
 8002818:	bf00      	nop
 800281a:	f7ff ff93 	bl	8002744 <LCD_ReadStatus>
 800281e:	4603      	mov	r3, r0
 8002820:	b25b      	sxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	dbf9      	blt.n	800281a <LCD_WriteData+0x3e>
}
 8002826:	bf00      	nop
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40020800 	.word	0x40020800

08002834 <LCD_WriteCommand>:


//-----------------------------------------------------------------------------
void LCD_WriteCommand(char commandToWrite)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW | LCD_RS, GPIO_PIN_RESET);
 800283e:	2200      	movs	r2, #0
 8002840:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002844:	480d      	ldr	r0, [pc, #52]	@ (800287c <LCD_WriteCommand+0x48>)
 8002846:	f002 fd6f 	bl	8005328 <HAL_GPIO_WritePin>
  LCD_WriteNibble(commandToWrite >> 4);
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	b2db      	uxtb	r3, r3
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fef3 	bl	800263c <LCD_WriteNibble>
  LCD_WriteNibble(commandToWrite & 0x0F);
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	b2db      	uxtb	r3, r3
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff feec 	bl	800263c <LCD_WriteNibble>
  
  while(LCD_ReadStatus() & 0x80);
 8002864:	bf00      	nop
 8002866:	f7ff ff6d 	bl	8002744 <LCD_ReadStatus>
 800286a:	4603      	mov	r3, r0
 800286c:	b25b      	sxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	dbf9      	blt.n	8002866 <LCD_WriteCommand+0x32>
}
 8002872:	bf00      	nop
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40020800 	.word	0x40020800

08002880 <LCD_WriteText>:


//-----------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  while(*text)
 8002888:	e006      	b.n	8002898 <LCD_WriteText+0x18>
    LCD_WriteData(*text++);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff ffa2 	bl	80027dc <LCD_WriteData>
  while(*text)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f4      	bne.n	800288a <LCD_WriteText+0xa>
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <LCD_GoTo>:


//-----------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	4603      	mov	r3, r0
 80028b2:	460a      	mov	r2, r1
 80028b4:	71fb      	strb	r3, [r7, #7]
 80028b6:	4613      	mov	r3, r2
 80028b8:	71bb      	strb	r3, [r7, #6]
  LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 80028ba:	79bb      	ldrb	r3, [r7, #6]
 80028bc:	019b      	lsls	r3, r3, #6
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	4413      	add	r3, r2
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	b25b      	sxtb	r3, r3
 80028c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80028cc:	b25b      	sxtb	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ffaf 	bl	8002834 <LCD_WriteCommand>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <LCD_WriteTextXY>:


//-----------------------------------------------------------------------------
void LCD_WriteTextXY(char * text, unsigned char x, unsigned char y)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	70fb      	strb	r3, [r7, #3]
 80028ea:	4613      	mov	r3, r2
 80028ec:	70bb      	strb	r3, [r7, #2]
  LCD_GoTo(x,y);
 80028ee:	78ba      	ldrb	r2, [r7, #2]
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ffd8 	bl	80028aa <LCD_GoTo>
  while(*text)
 80028fa:	e006      	b.n	800290a <LCD_WriteTextXY+0x2c>
    LCD_WriteData(*text++);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff69 	bl	80027dc <LCD_WriteData>
  while(*text)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f4      	bne.n	80028fc <LCD_WriteTextXY+0x1e>
}
 8002912:	bf00      	nop
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <LCD_Initialize>:
}


//-----------------------------------------------------------------------------
void LCD_Initialize(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
  volatile unsigned char i = 0;
 8002922:	2300      	movs	r3, #0
 8002924:	77fb      	strb	r3, [r7, #31]
  volatile unsigned int delayCnt = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	61bb      	str	r3, [r7, #24]
  
  if (LCD_GPIO == GPIOA) __HAL_RCC_GPIOA_CLK_ENABLE(); else
  if (LCD_GPIO == GPIOB) __HAL_RCC_GPIOB_CLK_ENABLE(); else
  if (LCD_GPIO == GPIOC) __HAL_RCC_GPIOC_CLK_ENABLE(); else
 800292a:	4b34      	ldr	r3, [pc, #208]	@ (80029fc <LCD_Initialize+0xe0>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	4a33      	ldr	r2, [pc, #204]	@ (80029fc <LCD_Initialize+0xe0>)
 8002930:	f043 0304 	orr.w	r3, r3, #4
 8002934:	6313      	str	r3, [r2, #48]	@ 0x30
 8002936:	4b31      	ldr	r3, [pc, #196]	@ (80029fc <LCD_Initialize+0xe0>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
  if (LCD_GPIO == GPIOD) __HAL_RCC_GPIOD_CLK_ENABLE(); else
  if (LCD_GPIO == GPIOE) __HAL_RCC_GPIOE_CLK_ENABLE();


  GPIO_InitStruct.Pin = LCD_D4|LCD_D5|LCD_D6|LCD_D7|LCD_RS|LCD_RW|LCD_EN;
 8002942:	4b2f      	ldr	r3, [pc, #188]	@ (8002a00 <LCD_Initialize+0xe4>)
 8002944:	f641 424d 	movw	r2, #7245	@ 0x1c4d
 8002948:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294a:	4b2d      	ldr	r3, [pc, #180]	@ (8002a00 <LCD_Initialize+0xe4>)
 800294c:	2201      	movs	r2, #1
 800294e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	4b2b      	ldr	r3, [pc, #172]	@ (8002a00 <LCD_Initialize+0xe4>)
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002956:	4b2a      	ldr	r3, [pc, #168]	@ (8002a00 <LCD_Initialize+0xe4>)
 8002958:	2201      	movs	r2, #1
 800295a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_GPIO, &GPIO_InitStruct);
 800295c:	4928      	ldr	r1, [pc, #160]	@ (8002a00 <LCD_Initialize+0xe4>)
 800295e:	4829      	ldr	r0, [pc, #164]	@ (8002a04 <LCD_Initialize+0xe8>)
 8002960:	f002 fb1e 	bl	8004fa0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RS | LCD_EN | LCD_RW, GPIO_PIN_RESET);
 8002964:	2200      	movs	r2, #0
 8002966:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 800296a:	4826      	ldr	r0, [pc, #152]	@ (8002a04 <LCD_Initialize+0xe8>)
 800296c:	f002 fcdc 	bl	8005328 <HAL_GPIO_WritePin>
  

  for(delayCnt = 0; delayCnt < 300000; delayCnt++);
 8002970:	2300      	movs	r3, #0
 8002972:	61bb      	str	r3, [r7, #24]
 8002974:	e002      	b.n	800297c <LCD_Initialize+0x60>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	3301      	adds	r3, #1
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	4a22      	ldr	r2, [pc, #136]	@ (8002a08 <LCD_Initialize+0xec>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d9f8      	bls.n	8002976 <LCD_Initialize+0x5a>

  for(i = 0; i < 3; i++) {
 8002984:	2300      	movs	r3, #0
 8002986:	77fb      	strb	r3, [r7, #31]
 8002988:	e012      	b.n	80029b0 <LCD_Initialize+0x94>
    LCD_WriteNibble(0x03);            
 800298a:	2003      	movs	r0, #3
 800298c:	f7ff fe56 	bl	800263c <LCD_WriteNibble>
    for(delayCnt = 0; delayCnt < 30000; delayCnt++);
 8002990:	2300      	movs	r3, #0
 8002992:	61bb      	str	r3, [r7, #24]
 8002994:	e002      	b.n	800299c <LCD_Initialize+0x80>
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	3301      	adds	r3, #1
 800299a:	61bb      	str	r3, [r7, #24]
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	f247 522f 	movw	r2, #29999	@ 0x752f
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d9f7      	bls.n	8002996 <LCD_Initialize+0x7a>
  for(i = 0; i < 3; i++) {
 80029a6:	7ffb      	ldrb	r3, [r7, #31]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	3301      	adds	r3, #1
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	77fb      	strb	r3, [r7, #31]
 80029b0:	7ffb      	ldrb	r3, [r7, #31]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d9e8      	bls.n	800298a <LCD_Initialize+0x6e>
  }
  
  LCD_WriteNibble(0x02);             
 80029b8:	2002      	movs	r0, #2
 80029ba:	f7ff fe3f 	bl	800263c <LCD_WriteNibble>
  
  for(delayCnt = 0; delayCnt < 6000; delayCnt++);
 80029be:	2300      	movs	r3, #0
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	e002      	b.n	80029ca <LCD_Initialize+0xae>
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	3301      	adds	r3, #1
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f241 726f 	movw	r2, #5999	@ 0x176f
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d9f7      	bls.n	80029c4 <LCD_Initialize+0xa8>
     
  LCD_WriteCommand(HD44780_FUNCTION_SET | 
 80029d4:	2028      	movs	r0, #40	@ 0x28
 80029d6:	f7ff ff2d 	bl	8002834 <LCD_WriteCommand>
                   HD44780_FONT5x7 | 
                   HD44780_TWO_LINE | 
                   HD44780_4_BIT);
  
  LCD_WriteCommand(HD44780_DISPLAY_ONOFF | 
 80029da:	2008      	movs	r0, #8
 80029dc:	f7ff ff2a 	bl	8002834 <LCD_WriteCommand>
                   HD44780_DISPLAY_OFF); 
  
  LCD_WriteCommand(HD44780_CLEAR); 
 80029e0:	2001      	movs	r0, #1
 80029e2:	f7ff ff27 	bl	8002834 <LCD_WriteCommand>
  
  LCD_WriteCommand(HD44780_ENTRY_MODE | 
 80029e6:	2006      	movs	r0, #6
 80029e8:	f7ff ff24 	bl	8002834 <LCD_WriteCommand>
                   HD44780_EM_SHIFT_CURSOR | 
                   HD44780_EM_INCREMENT);
  
  LCD_WriteCommand(HD44780_DISPLAY_ONOFF | 
 80029ec:	200c      	movs	r0, #12
 80029ee:	f7ff ff21 	bl	8002834 <LCD_WriteCommand>
                   HD44780_DISPLAY_ON |
                   HD44780_CURSOR_OFF | 
                   HD44780_CURSOR_NOBLINK);
}
 80029f2:	bf00      	nop
 80029f4:	3720      	adds	r7, #32
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40023800 	.word	0x40023800
 8002a00:	200001f8 	.word	0x200001f8
 8002a04:	40020800 	.word	0x40020800
 8002a08:	000493df 	.word	0x000493df

08002a0c <move_menu>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void move_menu(char *a[])
  {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	symbol[0] = keypad_readkey();
 8002a14:	f7ff fdcc 	bl	80025b0 <keypad_readkey>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4b29      	ldr	r3, [pc, #164]	@ (8002ac4 <move_menu+0xb8>)
 8002a1e:	701a      	strb	r2, [r3, #0]
	  if (symbol[0] == 'B' && (position<max_pos)) {
 8002a20:	4b28      	ldr	r3, [pc, #160]	@ (8002ac4 <move_menu+0xb8>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b42      	cmp	r3, #66	@ 0x42
 8002a26:	d10e      	bne.n	8002a46 <move_menu+0x3a>
 8002a28:	4b27      	ldr	r3, [pc, #156]	@ (8002ac8 <move_menu+0xbc>)
 8002a2a:	781a      	ldrb	r2, [r3, #0]
 8002a2c:	4b27      	ldr	r3, [pc, #156]	@ (8002acc <move_menu+0xc0>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d208      	bcs.n	8002a46 <move_menu+0x3a>
	  	   	  position++;
 8002a34:	4b24      	ldr	r3, [pc, #144]	@ (8002ac8 <move_menu+0xbc>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	4b22      	ldr	r3, [pc, #136]	@ (8002ac8 <move_menu+0xbc>)
 8002a3e:	701a      	strb	r2, [r3, #0]
	  	   	  refreshLCD=true;
 8002a40:	4b23      	ldr	r3, [pc, #140]	@ (8002ad0 <move_menu+0xc4>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]
	  	   	}

	  	   	if (symbol[0] == 'A' && (position>1)) {
 8002a46:	4b1f      	ldr	r3, [pc, #124]	@ (8002ac4 <move_menu+0xb8>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b41      	cmp	r3, #65	@ 0x41
 8002a4c:	d10c      	bne.n	8002a68 <move_menu+0x5c>
 8002a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac8 <move_menu+0xbc>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d908      	bls.n	8002a68 <move_menu+0x5c>
	  	   	  position--;
 8002a56:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac8 <move_menu+0xbc>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac8 <move_menu+0xbc>)
 8002a60:	701a      	strb	r2, [r3, #0]
	  	   	  refreshLCD=true;
 8002a62:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad0 <move_menu+0xc4>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
	  	   	}
	  	  if (refreshLCD){                           //Odswiezanie LCD tylko przy zmiane zawartosci - usuwa problem "migotania" LCD
 8002a68:	4b19      	ldr	r3, [pc, #100]	@ (8002ad0 <move_menu+0xc4>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d024      	beq.n	8002aba <move_menu+0xae>
	   	  LCD_WriteCommand(HD44780_CLEAR);
 8002a70:	2001      	movs	r0, #1
 8002a72:	f7ff fedf 	bl	8002834 <LCD_WriteCommand>
	   	  LCD_WriteText("->");
 8002a76:	4817      	ldr	r0, [pc, #92]	@ (8002ad4 <move_menu+0xc8>)
 8002a78:	f7ff ff02 	bl	8002880 <LCD_WriteText>
	   	  LCD_WriteText(a[position-1]);
 8002a7c:	4b12      	ldr	r3, [pc, #72]	@ (8002ac8 <move_menu+0xbc>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fef5 	bl	8002880 <LCD_WriteText>
	   	  if (position<4){
 8002a96:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac8 <move_menu+0xbc>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d80a      	bhi.n	8002ab4 <move_menu+0xa8>
	   		LCD_WriteTextXY(a[position-1+1],2,1);
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac8 <move_menu+0xbc>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	2102      	movs	r1, #2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ff15 	bl	80028de <LCD_WriteTextXY>
	   	  }
	   	  refreshLCD=false;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <move_menu+0xc4>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
	   	}
  }
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	2000020c 	.word	0x2000020c
 8002ac8:	20000054 	.word	0x20000054
 8002acc:	20000055 	.word	0x20000055
 8002ad0:	20000271 	.word	0x20000271
 8002ad4:	0800a99c 	.word	0x0800a99c

08002ad8 <roundToTwoDecimals>:

double roundToTwoDecimals(double value) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	ed87 0b00 	vstr	d0, [r7]
	return floor(value * 100.0 + 0.5) / 100.0;
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	4b15      	ldr	r3, [pc, #84]	@ (8002b3c <roundToTwoDecimals+0x64>)
 8002ae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002aec:	f7fd fdb4 	bl	8000658 <__aeabi_dmul>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	4b10      	ldr	r3, [pc, #64]	@ (8002b40 <roundToTwoDecimals+0x68>)
 8002afe:	f7fd fbf5 	bl	80002ec <__adddf3>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	ec43 2b17 	vmov	d7, r2, r3
 8002b0a:	eeb0 0a47 	vmov.f32	s0, s14
 8002b0e:	eef0 0a67 	vmov.f32	s1, s15
 8002b12:	f007 fe3d 	bl	800a790 <floor>
 8002b16:	ec51 0b10 	vmov	r0, r1, d0
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	4b07      	ldr	r3, [pc, #28]	@ (8002b3c <roundToTwoDecimals+0x64>)
 8002b20:	f7fd fec4 	bl	80008ac <__aeabi_ddiv>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	ec43 2b17 	vmov	d7, r2, r3
}
 8002b2c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b30:	eef0 0a67 	vmov.f32	s1, s15
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40590000 	.word	0x40590000
 8002b40:	3fe00000 	.word	0x3fe00000

08002b44 <sendBluetoothData>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void sendBluetoothData(const char* data){
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	snprintf(buffer, sizeof(buffer), "%s\n", data);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8002b80 <sendBluetoothData+0x3c>)
 8002b50:	210a      	movs	r1, #10
 8002b52:	480c      	ldr	r0, [pc, #48]	@ (8002b84 <sendBluetoothData+0x40>)
 8002b54:	f007 f968 	bl	8009e28 <sniprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002b58:	480a      	ldr	r0, [pc, #40]	@ (8002b84 <sendBluetoothData+0x40>)
 8002b5a:	f7fd fb63 	bl	8000224 <strlen>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295
 8002b66:	4907      	ldr	r1, [pc, #28]	@ (8002b84 <sendBluetoothData+0x40>)
 8002b68:	4807      	ldr	r0, [pc, #28]	@ (8002b88 <sendBluetoothData+0x44>)
 8002b6a:	f006 f9d1 	bl	8008f10 <HAL_UART_Transmit>
	HAL_Delay(500);
 8002b6e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b72:	f002 f8bd 	bl	8004cf0 <HAL_Delay>
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	0800a9a0 	.word	0x0800a9a0
 8002b84:	2000024c 	.word	0x2000024c
 8002b88:	20000440 	.word	0x20000440

08002b8c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6) {
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a0e      	ldr	r2, [pc, #56]	@ (8002bd4 <HAL_UART_RxCpltCallback+0x48>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d116      	bne.n	8002bcc <HAL_UART_RxCpltCallback+0x40>
        rxIndex++;
 8002b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd8 <HAL_UART_RxCpltCallback+0x4c>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd8 <HAL_UART_RxCpltCallback+0x4c>)
 8002ba8:	701a      	strb	r2, [r3, #0]

        if (rxIndex >= RX_BUFFER_SIZE+2) {
 8002baa:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd8 <HAL_UART_RxCpltCallback+0x4c>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b05      	cmp	r3, #5
 8002bb0:	d902      	bls.n	8002bb8 <HAL_UART_RxCpltCallback+0x2c>
            rxIndex = 0;
 8002bb2:	4b09      	ldr	r3, [pc, #36]	@ (8002bd8 <HAL_UART_RxCpltCallback+0x4c>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(huart, &rxBuffer[rxIndex], 1);
 8002bb8:	4b07      	ldr	r3, [pc, #28]	@ (8002bd8 <HAL_UART_RxCpltCallback+0x4c>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b07      	ldr	r3, [pc, #28]	@ (8002bdc <HAL_UART_RxCpltCallback+0x50>)
 8002bc0:	4413      	add	r3, r2
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f006 fa25 	bl	8009016 <HAL_UART_Receive_IT>
    }
}
 8002bcc:	bf00      	nop
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40011400 	.word	0x40011400
 8002bd8:	20000262 	.word	0x20000262
 8002bdc:	20000258 	.word	0x20000258

08002be0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  if(htim == &htim2)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a1a      	ldr	r2, [pc, #104]	@ (8002c54 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d12d      	bne.n	8002c4c <HAL_TIM_PeriodElapsedCallback+0x6c>
  {
	  if((PIR_Garage == true || PIR_Kitchen == true || PIR_Livingroom == true) && alarm == true)
 8002bf0:	4b19      	ldr	r3, [pc, #100]	@ (8002c58 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d107      	bne.n	8002c08 <HAL_TIM_PeriodElapsedCallback+0x28>
 8002bf8:	4b18      	ldr	r3, [pc, #96]	@ (8002c5c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d103      	bne.n	8002c08 <HAL_TIM_PeriodElapsedCallback+0x28>
 8002c00:	4b17      	ldr	r3, [pc, #92]	@ (8002c60 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d009      	beq.n	8002c1c <HAL_TIM_PeriodElapsedCallback+0x3c>
 8002c08:	4b16      	ldr	r3, [pc, #88]	@ (8002c64 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_TIM_PeriodElapsedCallback+0x3c>
	  {
		  PIR_detected = true, alarmLED = true;
 8002c10:	4b15      	ldr	r3, [pc, #84]	@ (8002c68 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	701a      	strb	r2, [r3, #0]
 8002c16:	4b15      	ldr	r3, [pc, #84]	@ (8002c6c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	701a      	strb	r2, [r3, #0]
	  }

	  if(alarmLED == true && PIR_detected == true)
 8002c1c:	4b13      	ldr	r3, [pc, #76]	@ (8002c6c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00d      	beq.n	8002c40 <HAL_TIM_PeriodElapsedCallback+0x60>
 8002c24:	4b10      	ldr	r3, [pc, #64]	@ (8002c68 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d009      	beq.n	8002c40 <HAL_TIM_PeriodElapsedCallback+0x60>
	  {
		  HAL_GPIO_TogglePin(Alarm_LED_GPIO_Port, Alarm_LED_Pin);
 8002c2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c30:	480f      	ldr	r0, [pc, #60]	@ (8002c70 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002c32:	f002 fb92 	bl	800535a <HAL_GPIO_TogglePin>
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002c36:	2108      	movs	r1, #8
 8002c38:	4806      	ldr	r0, [pc, #24]	@ (8002c54 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002c3a:	f004 ff93 	bl	8007b64 <HAL_TIM_PWM_Start>
	  else
	  {
		  HAL_GPIO_WritePin(Alarm_LED_GPIO_Port, Alarm_LED_Pin, GPIO_PIN_RESET);
	  };
  }
}
 8002c3e:	e005      	b.n	8002c4c <HAL_TIM_PeriodElapsedCallback+0x6c>
		  HAL_GPIO_WritePin(Alarm_LED_GPIO_Port, Alarm_LED_Pin, GPIO_PIN_RESET);
 8002c40:	2200      	movs	r2, #0
 8002c42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c46:	480a      	ldr	r0, [pc, #40]	@ (8002c70 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002c48:	f002 fb6e 	bl	8005328 <HAL_GPIO_WritePin>
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	2000035c 	.word	0x2000035c
 8002c58:	20000274 	.word	0x20000274
 8002c5c:	20000276 	.word	0x20000276
 8002c60:	20000275 	.word	0x20000275
 8002c64:	20000272 	.word	0x20000272
 8002c68:	20000277 	.word	0x20000277
 8002c6c:	20000273 	.word	0x20000273
 8002c70:	40021000 	.word	0x40021000

08002c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c74:	b5b0      	push	{r4, r5, r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c7a:	f001 ffdc 	bl	8004c36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c7e:	f001 f931 	bl	8003ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c82:	f7ff fa63 	bl	800214c <MX_GPIO_Init>
  MX_TIM2_Init();
 8002c86:	f001 fb9d 	bl	80043c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002c8a:	f001 fc1f 	bl	80044cc <MX_TIM3_Init>
  MX_TIM4_Init();
 8002c8e:	f001 fca1 	bl	80045d4 <MX_TIM4_Init>
  MX_SPI4_Init();
 8002c92:	f001 f995 	bl	8003fc0 <MX_SPI4_Init>
  MX_I2C1_Init();
 8002c96:	f7ff fbb7 	bl	8002408 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8002c9a:	f001 ff13 	bl	8004ac4 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8002c9e:	f001 fae5 	bl	800426c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //LOAD CONFIG
  //alarm_config();
  keypad_config();
 8002ca2:	f7ff fc51 	bl	8002548 <keypad_config>
  LCD_Initialize();
 8002ca6:	f7ff fe39 	bl	800291c <LCD_Initialize>
 //TIMERS AND INTERRUPTS
  HAL_TIM_Base_Start_IT(&htim2);
 8002caa:	489f      	ldr	r0, [pc, #636]	@ (8002f28 <main+0x2b4>)
 8002cac:	f004 fe52 	bl	8007954 <HAL_TIM_Base_Start_IT>
  BMP2_Init(&bmp2dev);
 8002cb0:	489e      	ldr	r0, [pc, #632]	@ (8002f2c <main+0x2b8>)
 8002cb2:	f7ff f91b 	bl	8001eec <BMP2_Init>
  //START SCREEN
  LCD_WriteCommand(HD44780_CLEAR);
 8002cb6:	2001      	movs	r0, #1
 8002cb8:	f7ff fdbc 	bl	8002834 <LCD_WriteCommand>
  LCD_WriteText("Welcome to");
 8002cbc:	489c      	ldr	r0, [pc, #624]	@ (8002f30 <main+0x2bc>)
 8002cbe:	f7ff fddf 	bl	8002880 <LCD_WriteText>
  LCD_WriteTextXY("Smarthome system",0,1);
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	489b      	ldr	r0, [pc, #620]	@ (8002f34 <main+0x2c0>)
 8002cc8:	f7ff fe09 	bl	80028de <LCD_WriteTextXY>
  HAL_Delay(3000);
 8002ccc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002cd0:	f002 f80e 	bl	8004cf0 <HAL_Delay>
  refreshLCD = true;
 8002cd4:	4b98      	ldr	r3, [pc, #608]	@ (8002f38 <main+0x2c4>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &rxBuffer[rxIndex], 1);  // Rozpocznij odbiór
 8002cda:	4b98      	ldr	r3, [pc, #608]	@ (8002f3c <main+0x2c8>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4b97      	ldr	r3, [pc, #604]	@ (8002f40 <main+0x2cc>)
 8002ce2:	4413      	add	r3, r2
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4896      	ldr	r0, [pc, #600]	@ (8002f44 <main+0x2d0>)
 8002cea:	f006 f994 	bl	8009016 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(PIR_Garage_GPIO_Port, PIR_Garage_Pin) == GPIO_PIN_SET){PIR_Garage = true;}
 8002cee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002cf2:	4895      	ldr	r0, [pc, #596]	@ (8002f48 <main+0x2d4>)
 8002cf4:	f002 fb00 	bl	80052f8 <HAL_GPIO_ReadPin>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d103      	bne.n	8002d06 <main+0x92>
 8002cfe:	4b93      	ldr	r3, [pc, #588]	@ (8002f4c <main+0x2d8>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	701a      	strb	r2, [r3, #0]
 8002d04:	e002      	b.n	8002d0c <main+0x98>
	  	  else {PIR_Garage = false;};
 8002d06:	4b91      	ldr	r3, [pc, #580]	@ (8002f4c <main+0x2d8>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(PIR_Kitchen_GPIO_Port, PIR_Kitchen_Pin) == GPIO_PIN_SET){PIR_Kitchen = true;}
 8002d0c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d10:	488d      	ldr	r0, [pc, #564]	@ (8002f48 <main+0x2d4>)
 8002d12:	f002 faf1 	bl	80052f8 <HAL_GPIO_ReadPin>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d103      	bne.n	8002d24 <main+0xb0>
 8002d1c:	4b8c      	ldr	r3, [pc, #560]	@ (8002f50 <main+0x2dc>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
 8002d22:	e002      	b.n	8002d2a <main+0xb6>
	  	  else {PIR_Kitchen = false;};
 8002d24:	4b8a      	ldr	r3, [pc, #552]	@ (8002f50 <main+0x2dc>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(PIR_Livingroom_GPIO_Port, PIR_Livingroom_Pin) == GPIO_PIN_SET){PIR_Livingroom = true;}
 8002d2a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d2e:	4886      	ldr	r0, [pc, #536]	@ (8002f48 <main+0x2d4>)
 8002d30:	f002 fae2 	bl	80052f8 <HAL_GPIO_ReadPin>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d103      	bne.n	8002d42 <main+0xce>
 8002d3a:	4b86      	ldr	r3, [pc, #536]	@ (8002f54 <main+0x2e0>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e002      	b.n	8002d48 <main+0xd4>
	  	  else{PIR_Livingroom = false;};
 8002d42:	4b84      	ldr	r3, [pc, #528]	@ (8002f54 <main+0x2e0>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	701a      	strb	r2, [r3, #0]
	  move_menu(act_menu);
 8002d48:	4b83      	ldr	r3, [pc, #524]	@ (8002f58 <main+0x2e4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fe5d 	bl	8002a0c <move_menu>
 	if (symbol[0] == '*' && act_menu == mainmenu){
 8002d52:	4b82      	ldr	r3, [pc, #520]	@ (8002f5c <main+0x2e8>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d58:	f040 80af 	bne.w	8002eba <main+0x246>
 8002d5c:	4b7e      	ldr	r3, [pc, #504]	@ (8002f58 <main+0x2e4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a7f      	ldr	r2, [pc, #508]	@ (8002f60 <main+0x2ec>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	f040 80a9 	bne.w	8002eba <main+0x246>
 		refreshLCD = true;
 8002d68:	4b73      	ldr	r3, [pc, #460]	@ (8002f38 <main+0x2c4>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	701a      	strb	r2, [r3, #0]
 		switch (position){
 8002d6e:	4b7d      	ldr	r3, [pc, #500]	@ (8002f64 <main+0x2f0>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	f200 8094 	bhi.w	8002ea2 <main+0x22e>
 8002d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d80 <main+0x10c>)
 8002d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d80:	08002d91 	.word	0x08002d91
 8002d84:	08002da5 	.word	0x08002da5
 8002d88:	08002db9 	.word	0x08002db9
 8002d8c:	08002dcd 	.word	0x08002dcd
			case 1: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8002d90:	4b71      	ldr	r3, [pc, #452]	@ (8002f58 <main+0x2e4>)
 8002d92:	4a75      	ldr	r2, [pc, #468]	@ (8002f68 <main+0x2f4>)
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	4b73      	ldr	r3, [pc, #460]	@ (8002f64 <main+0x2f0>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]
 8002d9c:	4b73      	ldr	r3, [pc, #460]	@ (8002f6c <main+0x2f8>)
 8002d9e:	2202      	movs	r2, #2
 8002da0:	701a      	strb	r2, [r3, #0]
 8002da2:	e088      	b.n	8002eb6 <main+0x242>
			case 2: act_menu = menuLivingroom, position = 1, max_pos = 2; break;
 8002da4:	4b6c      	ldr	r3, [pc, #432]	@ (8002f58 <main+0x2e4>)
 8002da6:	4a72      	ldr	r2, [pc, #456]	@ (8002f70 <main+0x2fc>)
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	4b6e      	ldr	r3, [pc, #440]	@ (8002f64 <main+0x2f0>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	4b6e      	ldr	r3, [pc, #440]	@ (8002f6c <main+0x2f8>)
 8002db2:	2202      	movs	r2, #2
 8002db4:	701a      	strb	r2, [r3, #0]
 8002db6:	e07e      	b.n	8002eb6 <main+0x242>
			case 3: act_menu = menuGarage, position = 1, max_pos = 1; break;
 8002db8:	4b67      	ldr	r3, [pc, #412]	@ (8002f58 <main+0x2e4>)
 8002dba:	4a6e      	ldr	r2, [pc, #440]	@ (8002f74 <main+0x300>)
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	4b69      	ldr	r3, [pc, #420]	@ (8002f64 <main+0x2f0>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	701a      	strb	r2, [r3, #0]
 8002dc4:	4b69      	ldr	r3, [pc, #420]	@ (8002f6c <main+0x2f8>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	e074      	b.n	8002eb6 <main+0x242>
			case 4:
					i = 0;
 8002dcc:	4b6a      	ldr	r3, [pc, #424]	@ (8002f78 <main+0x304>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
					HAL_Delay(200);
 8002dd2:	20c8      	movs	r0, #200	@ 0xc8
 8002dd4:	f001 ff8c 	bl	8004cf0 <HAL_Delay>
					memset(buff, 0, sizeof(buff));
 8002dd8:	2205      	movs	r2, #5
 8002dda:	2100      	movs	r1, #0
 8002ddc:	4867      	ldr	r0, [pc, #412]	@ (8002f7c <main+0x308>)
 8002dde:	f007 f857 	bl	8009e90 <memset>
					LCD_WriteCommand(HD44780_CLEAR);
 8002de2:	2001      	movs	r0, #1
 8002de4:	f7ff fd26 	bl	8002834 <LCD_WriteCommand>
					LCD_WriteText("Write PIN");
 8002de8:	4865      	ldr	r0, [pc, #404]	@ (8002f80 <main+0x30c>)
 8002dea:	f7ff fd49 	bl	8002880 <LCD_WriteText>
					while(1) {
						refreshLCD = true;
 8002dee:	4b52      	ldr	r3, [pc, #328]	@ (8002f38 <main+0x2c4>)
 8002df0:	2201      	movs	r2, #1
 8002df2:	701a      	strb	r2, [r3, #0]
						symbol[0] = keypad_readkey();
 8002df4:	f7ff fbdc 	bl	80025b0 <keypad_readkey>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4b57      	ldr	r3, [pc, #348]	@ (8002f5c <main+0x2e8>)
 8002dfe:	701a      	strb	r2, [r3, #0]
						if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 8002e00:	4b56      	ldr	r3, [pc, #344]	@ (8002f5c <main+0x2e8>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b2f      	cmp	r3, #47	@ 0x2f
 8002e06:	d922      	bls.n	8002e4e <main+0x1da>
 8002e08:	4b54      	ldr	r3, [pc, #336]	@ (8002f5c <main+0x2e8>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b39      	cmp	r3, #57	@ 0x39
 8002e0e:	d81e      	bhi.n	8002e4e <main+0x1da>
 8002e10:	4b59      	ldr	r3, [pc, #356]	@ (8002f78 <main+0x304>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d81a      	bhi.n	8002e4e <main+0x1da>
							buff[i] = symbol[0];
 8002e18:	4b57      	ldr	r3, [pc, #348]	@ (8002f78 <main+0x304>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a4f      	ldr	r2, [pc, #316]	@ (8002f5c <main+0x2e8>)
 8002e1e:	7811      	ldrb	r1, [r2, #0]
 8002e20:	4a56      	ldr	r2, [pc, #344]	@ (8002f7c <main+0x308>)
 8002e22:	54d1      	strb	r1, [r2, r3]
							i++;
 8002e24:	4b54      	ldr	r3, [pc, #336]	@ (8002f78 <main+0x304>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	4a53      	ldr	r2, [pc, #332]	@ (8002f78 <main+0x304>)
 8002e2c:	6013      	str	r3, [r2, #0]
							buff[i] = '\0';
 8002e2e:	4b52      	ldr	r3, [pc, #328]	@ (8002f78 <main+0x304>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a52      	ldr	r2, [pc, #328]	@ (8002f7c <main+0x308>)
 8002e34:	2100      	movs	r1, #0
 8002e36:	54d1      	strb	r1, [r2, r3]
							LCD_WriteCommand(HD44780_CLEAR);
 8002e38:	2001      	movs	r0, #1
 8002e3a:	f7ff fcfb 	bl	8002834 <LCD_WriteCommand>
							LCD_WriteText("PIN: ");
 8002e3e:	4851      	ldr	r0, [pc, #324]	@ (8002f84 <main+0x310>)
 8002e40:	f7ff fd1e 	bl	8002880 <LCD_WriteText>
							LCD_WriteTextXY(buff, 0, 1);
 8002e44:	2201      	movs	r2, #1
 8002e46:	2100      	movs	r1, #0
 8002e48:	484c      	ldr	r0, [pc, #304]	@ (8002f7c <main+0x308>)
 8002e4a:	f7ff fd48 	bl	80028de <LCD_WriteTextXY>
						}
						HAL_Delay(300);
 8002e4e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002e52:	f001 ff4d 	bl	8004cf0 <HAL_Delay>
						symbol[0] = keypad_readkey();
 8002e56:	f7ff fbab 	bl	80025b0 <keypad_readkey>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f5c <main+0x2e8>)
 8002e60:	701a      	strb	r2, [r3, #0]
						if(symbol[0] == '*') {
 8002e62:	4b3e      	ldr	r3, [pc, #248]	@ (8002f5c <main+0x2e8>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e68:	d115      	bne.n	8002e96 <main+0x222>
							pinKey = atoi(buff);
 8002e6a:	4844      	ldr	r0, [pc, #272]	@ (8002f7c <main+0x308>)
 8002e6c:	f006 ff54 	bl	8009d18 <atoi>
 8002e70:	4603      	mov	r3, r0
 8002e72:	4a45      	ldr	r2, [pc, #276]	@ (8002f88 <main+0x314>)
 8002e74:	6013      	str	r3, [r2, #0]
							if(pinKey == 1234) {
 8002e76:	4b44      	ldr	r3, [pc, #272]	@ (8002f88 <main+0x314>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d10d      	bne.n	8002e9e <main+0x22a>
								act_menu = menuAlarm, position = 1, max_pos = 2; break;
 8002e82:	4b35      	ldr	r3, [pc, #212]	@ (8002f58 <main+0x2e4>)
 8002e84:	4a41      	ldr	r2, [pc, #260]	@ (8002f8c <main+0x318>)
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	4b36      	ldr	r3, [pc, #216]	@ (8002f64 <main+0x2f0>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	4b37      	ldr	r3, [pc, #220]	@ (8002f6c <main+0x2f8>)
 8002e90:	2202      	movs	r2, #2
 8002e92:	701a      	strb	r2, [r3, #0]
 8002e94:	e004      	b.n	8002ea0 <main+0x22c>
							}
							break;
						}
						HAL_Delay(100);
 8002e96:	2064      	movs	r0, #100	@ 0x64
 8002e98:	f001 ff2a 	bl	8004cf0 <HAL_Delay>
						refreshLCD = true;
 8002e9c:	e7a7      	b.n	8002dee <main+0x17a>
							break;
 8002e9e:	bf00      	nop
					}
					break;
 8002ea0:	e009      	b.n	8002eb6 <main+0x242>
			default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8002ea2:	4b2d      	ldr	r3, [pc, #180]	@ (8002f58 <main+0x2e4>)
 8002ea4:	4a30      	ldr	r2, [pc, #192]	@ (8002f68 <main+0x2f4>)
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8002f64 <main+0x2f0>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	4b2f      	ldr	r3, [pc, #188]	@ (8002f6c <main+0x2f8>)
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	701a      	strb	r2, [r3, #0]
 8002eb4:	bf00      	nop
 		switch (position){
 8002eb6:	f000 be45 	b.w	8003b44 <main+0xed0>
 		}
 	}
 	else if(symbol[0] == '*' && act_menu == menuAlarm){
 8002eba:	4b28      	ldr	r3, [pc, #160]	@ (8002f5c <main+0x2e8>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ec0:	f040 80a1 	bne.w	8003006 <main+0x392>
 8002ec4:	4b24      	ldr	r3, [pc, #144]	@ (8002f58 <main+0x2e4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a30      	ldr	r2, [pc, #192]	@ (8002f8c <main+0x318>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	f040 809b 	bne.w	8003006 <main+0x392>
 		refreshLCD = true;
 8002ed0:	4b19      	ldr	r3, [pc, #100]	@ (8002f38 <main+0x2c4>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	701a      	strb	r2, [r3, #0]
 		switch (position){
 8002ed6:	4b23      	ldr	r3, [pc, #140]	@ (8002f64 <main+0x2f0>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d002      	beq.n	8002ee4 <main+0x270>
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d060      	beq.n	8002fa4 <main+0x330>
 8002ee2:	e084      	b.n	8002fee <main+0x37a>
			case 1: alarm = true;
 8002ee4:	4b2a      	ldr	r3, [pc, #168]	@ (8002f90 <main+0x31c>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	701a      	strb	r2, [r3, #0]
				PIR_detected = false;
 8002eea:	4b2a      	ldr	r3, [pc, #168]	@ (8002f94 <main+0x320>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]
				alarmLED = false;
 8002ef0:	4b29      	ldr	r3, [pc, #164]	@ (8002f98 <main+0x324>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	701a      	strb	r2, [r3, #0]
				LCD_WriteCommand(HD44780_CLEAR);
 8002ef6:	2001      	movs	r0, #1
 8002ef8:	f7ff fc9c 	bl	8002834 <LCD_WriteCommand>
				LCD_WriteText("Alarm");
 8002efc:	4827      	ldr	r0, [pc, #156]	@ (8002f9c <main+0x328>)
 8002efe:	f7ff fcbf 	bl	8002880 <LCD_WriteText>
				LCD_WriteTextXY("turned on",0,1);
 8002f02:	2201      	movs	r2, #1
 8002f04:	2100      	movs	r1, #0
 8002f06:	4826      	ldr	r0, [pc, #152]	@ (8002fa0 <main+0x32c>)
 8002f08:	f7ff fce9 	bl	80028de <LCD_WriteTextXY>
				HAL_TIM_Base_Start_IT(&htim2);
 8002f0c:	4806      	ldr	r0, [pc, #24]	@ (8002f28 <main+0x2b4>)
 8002f0e:	f004 fd21 	bl	8007954 <HAL_TIM_Base_Start_IT>
				act_menu = mainmenu, position = 1, max_pos = 4;
 8002f12:	4b11      	ldr	r3, [pc, #68]	@ (8002f58 <main+0x2e4>)
 8002f14:	4a12      	ldr	r2, [pc, #72]	@ (8002f60 <main+0x2ec>)
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	4b12      	ldr	r3, [pc, #72]	@ (8002f64 <main+0x2f0>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	701a      	strb	r2, [r3, #0]
 8002f1e:	4b13      	ldr	r3, [pc, #76]	@ (8002f6c <main+0x2f8>)
 8002f20:	2204      	movs	r2, #4
 8002f22:	701a      	strb	r2, [r3, #0]
				break;
 8002f24:	e06d      	b.n	8003002 <main+0x38e>
 8002f26:	bf00      	nop
 8002f28:	2000035c 	.word	0x2000035c
 8002f2c:	20000018 	.word	0x20000018
 8002f30:	0800a9a4 	.word	0x0800a9a4
 8002f34:	0800a9b0 	.word	0x0800a9b0
 8002f38:	20000271 	.word	0x20000271
 8002f3c:	20000262 	.word	0x20000262
 8002f40:	20000258 	.word	0x20000258
 8002f44:	20000440 	.word	0x20000440
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	20000274 	.word	0x20000274
 8002f50:	20000276 	.word	0x20000276
 8002f54:	20000275 	.word	0x20000275
 8002f58:	20000118 	.word	0x20000118
 8002f5c:	2000020c 	.word	0x2000020c
 8002f60:	20000058 	.word	0x20000058
 8002f64:	20000054 	.word	0x20000054
 8002f68:	20000068 	.word	0x20000068
 8002f6c:	20000055 	.word	0x20000055
 8002f70:	20000098 	.word	0x20000098
 8002f74:	200000d8 	.word	0x200000d8
 8002f78:	2000027c 	.word	0x2000027c
 8002f7c:	20000210 	.word	0x20000210
 8002f80:	0800a9c4 	.word	0x0800a9c4
 8002f84:	0800a9d0 	.word	0x0800a9d0
 8002f88:	20000284 	.word	0x20000284
 8002f8c:	20000108 	.word	0x20000108
 8002f90:	20000272 	.word	0x20000272
 8002f94:	20000277 	.word	0x20000277
 8002f98:	20000273 	.word	0x20000273
 8002f9c:	0800a9d8 	.word	0x0800a9d8
 8002fa0:	0800a9e0 	.word	0x0800a9e0

 	 		case 2: alarm = false;
 8002fa4:	4b9c      	ldr	r3, [pc, #624]	@ (8003218 <main+0x5a4>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]
				PIR_detected = false;
 8002faa:	4b9c      	ldr	r3, [pc, #624]	@ (800321c <main+0x5a8>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
				alarmLED = false;
 8002fb0:	4b9b      	ldr	r3, [pc, #620]	@ (8003220 <main+0x5ac>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	701a      	strb	r2, [r3, #0]
				LCD_WriteCommand(HD44780_CLEAR);
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f7ff fc3c 	bl	8002834 <LCD_WriteCommand>
				LCD_WriteText("Alarm");
 8002fbc:	4899      	ldr	r0, [pc, #612]	@ (8003224 <main+0x5b0>)
 8002fbe:	f7ff fc5f 	bl	8002880 <LCD_WriteText>
				LCD_WriteTextXY("turned off",0,1);
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	4898      	ldr	r0, [pc, #608]	@ (8003228 <main+0x5b4>)
 8002fc8:	f7ff fc89 	bl	80028de <LCD_WriteTextXY>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002fcc:	2108      	movs	r1, #8
 8002fce:	4897      	ldr	r0, [pc, #604]	@ (800322c <main+0x5b8>)
 8002fd0:	f004 fec2 	bl	8007d58 <HAL_TIM_PWM_Stop>
				HAL_TIM_Base_Stop_IT(&htim2);
 8002fd4:	4895      	ldr	r0, [pc, #596]	@ (800322c <main+0x5b8>)
 8002fd6:	f004 fd35 	bl	8007a44 <HAL_TIM_Base_Stop_IT>
				act_menu = mainmenu, position = 1, max_pos = 4;
 8002fda:	4b95      	ldr	r3, [pc, #596]	@ (8003230 <main+0x5bc>)
 8002fdc:	4a95      	ldr	r2, [pc, #596]	@ (8003234 <main+0x5c0>)
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	4b95      	ldr	r3, [pc, #596]	@ (8003238 <main+0x5c4>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	701a      	strb	r2, [r3, #0]
 8002fe6:	4b95      	ldr	r3, [pc, #596]	@ (800323c <main+0x5c8>)
 8002fe8:	2204      	movs	r2, #4
 8002fea:	701a      	strb	r2, [r3, #0]
				break;
 8002fec:	e009      	b.n	8003002 <main+0x38e>

 	 		default: act_menu = menuAlarm, position = 1, max_pos = 2; break;
 8002fee:	4b90      	ldr	r3, [pc, #576]	@ (8003230 <main+0x5bc>)
 8002ff0:	4a93      	ldr	r2, [pc, #588]	@ (8003240 <main+0x5cc>)
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	4b90      	ldr	r3, [pc, #576]	@ (8003238 <main+0x5c4>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
 8002ffa:	4b90      	ldr	r3, [pc, #576]	@ (800323c <main+0x5c8>)
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	bf00      	nop
 		switch (position){
 8003002:	f000 bd9f 	b.w	8003b44 <main+0xed0>
 		}
 	}
	else if(symbol[0] == '*' && act_menu == menuKitchen){
 8003006:	4b8f      	ldr	r3, [pc, #572]	@ (8003244 <main+0x5d0>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b2a      	cmp	r3, #42	@ 0x2a
 800300c:	d12e      	bne.n	800306c <main+0x3f8>
 800300e:	4b88      	ldr	r3, [pc, #544]	@ (8003230 <main+0x5bc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a8d      	ldr	r2, [pc, #564]	@ (8003248 <main+0x5d4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d129      	bne.n	800306c <main+0x3f8>
		refreshLCD = true;
 8003018:	4b8c      	ldr	r3, [pc, #560]	@ (800324c <main+0x5d8>)
 800301a:	2201      	movs	r2, #1
 800301c:	701a      	strb	r2, [r3, #0]
		switch (position){
 800301e:	4b86      	ldr	r3, [pc, #536]	@ (8003238 <main+0x5c4>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d002      	beq.n	800302c <main+0x3b8>
 8003026:	2b02      	cmp	r3, #2
 8003028:	d00a      	beq.n	8003040 <main+0x3cc>
 800302a:	e013      	b.n	8003054 <main+0x3e0>
			case 1: act_menu = menuKitchenLighting, position = 1, max_pos = 3; break;
 800302c:	4b80      	ldr	r3, [pc, #512]	@ (8003230 <main+0x5bc>)
 800302e:	4a88      	ldr	r2, [pc, #544]	@ (8003250 <main+0x5dc>)
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	4b81      	ldr	r3, [pc, #516]	@ (8003238 <main+0x5c4>)
 8003034:	2201      	movs	r2, #1
 8003036:	701a      	strb	r2, [r3, #0]
 8003038:	4b80      	ldr	r3, [pc, #512]	@ (800323c <main+0x5c8>)
 800303a:	2203      	movs	r2, #3
 800303c:	701a      	strb	r2, [r3, #0]
 800303e:	e013      	b.n	8003068 <main+0x3f4>
			case 2: act_menu = menuKitchenShutter, position = 1, max_pos = 2; break;
 8003040:	4b7b      	ldr	r3, [pc, #492]	@ (8003230 <main+0x5bc>)
 8003042:	4a84      	ldr	r2, [pc, #528]	@ (8003254 <main+0x5e0>)
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	4b7c      	ldr	r3, [pc, #496]	@ (8003238 <main+0x5c4>)
 8003048:	2201      	movs	r2, #1
 800304a:	701a      	strb	r2, [r3, #0]
 800304c:	4b7b      	ldr	r3, [pc, #492]	@ (800323c <main+0x5c8>)
 800304e:	2202      	movs	r2, #2
 8003050:	701a      	strb	r2, [r3, #0]
 8003052:	e009      	b.n	8003068 <main+0x3f4>
			default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8003054:	4b76      	ldr	r3, [pc, #472]	@ (8003230 <main+0x5bc>)
 8003056:	4a7c      	ldr	r2, [pc, #496]	@ (8003248 <main+0x5d4>)
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	4b77      	ldr	r3, [pc, #476]	@ (8003238 <main+0x5c4>)
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
 8003060:	4b76      	ldr	r3, [pc, #472]	@ (800323c <main+0x5c8>)
 8003062:	2202      	movs	r2, #2
 8003064:	701a      	strb	r2, [r3, #0]
 8003066:	bf00      	nop
		switch (position){
 8003068:	f000 bd6c 	b.w	8003b44 <main+0xed0>
		}
	}
	else if(symbol[0] == '*' && act_menu == menuKitchenLighting){
 800306c:	4b75      	ldr	r3, [pc, #468]	@ (8003244 <main+0x5d0>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b2a      	cmp	r3, #42	@ 0x2a
 8003072:	f040 80bc 	bne.w	80031ee <main+0x57a>
 8003076:	4b6e      	ldr	r3, [pc, #440]	@ (8003230 <main+0x5bc>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a75      	ldr	r2, [pc, #468]	@ (8003250 <main+0x5dc>)
 800307c:	4293      	cmp	r3, r2
 800307e:	f040 80b6 	bne.w	80031ee <main+0x57a>
 		 	 		refreshLCD = true;
 8003082:	4b72      	ldr	r3, [pc, #456]	@ (800324c <main+0x5d8>)
 8003084:	2201      	movs	r2, #1
 8003086:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 8003088:	4b6b      	ldr	r3, [pc, #428]	@ (8003238 <main+0x5c4>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b03      	cmp	r3, #3
 800308e:	d02c      	beq.n	80030ea <main+0x476>
 8003090:	2b03      	cmp	r3, #3
 8003092:	f300 80a0 	bgt.w	80031d6 <main+0x562>
 8003096:	2b01      	cmp	r3, #1
 8003098:	d002      	beq.n	80030a0 <main+0x42c>
 800309a:	2b02      	cmp	r3, #2
 800309c:	d015      	beq.n	80030ca <main+0x456>
 800309e:	e09a      	b.n	80031d6 <main+0x562>
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 80030a0:	2001      	movs	r0, #1
 80030a2:	f7ff fbc7 	bl	8002834 <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 80030a6:	486c      	ldr	r0, [pc, #432]	@ (8003258 <main+0x5e4>)
 80030a8:	f7ff fbea 	bl	8002880 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 80030ac:	2201      	movs	r2, #1
 80030ae:	2100      	movs	r1, #0
 80030b0:	486a      	ldr	r0, [pc, #424]	@ (800325c <main+0x5e8>)
 80030b2:	f7ff fc14 	bl	80028de <LCD_WriteTextXY>
 		 	 				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, brightnessKitchen);
 80030b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003260 <main+0x5ec>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	4b6a      	ldr	r3, [pc, #424]	@ (8003264 <main+0x5f0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	63da      	str	r2, [r3, #60]	@ 0x3c
 		 	 				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80030c0:	2108      	movs	r1, #8
 80030c2:	4868      	ldr	r0, [pc, #416]	@ (8003264 <main+0x5f0>)
 80030c4:	f004 fd4e 	bl	8007b64 <HAL_TIM_PWM_Start>
 		 	 				break;
 80030c8:	e08f      	b.n	80031ea <main+0x576>

 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 80030ca:	2001      	movs	r0, #1
 80030cc:	f7ff fbb2 	bl	8002834 <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 80030d0:	4861      	ldr	r0, [pc, #388]	@ (8003258 <main+0x5e4>)
 80030d2:	f7ff fbd5 	bl	8002880 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 80030d6:	2201      	movs	r2, #1
 80030d8:	2100      	movs	r1, #0
 80030da:	4853      	ldr	r0, [pc, #332]	@ (8003228 <main+0x5b4>)
 80030dc:	f7ff fbff 	bl	80028de <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80030e0:	2108      	movs	r1, #8
 80030e2:	4860      	ldr	r0, [pc, #384]	@ (8003264 <main+0x5f0>)
 80030e4:	f004 fe38 	bl	8007d58 <HAL_TIM_PWM_Stop>
 				 	 		break;
 80030e8:	e07f      	b.n	80031ea <main+0x576>

 		 	 		case 3:
							i = 0;
 80030ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003268 <main+0x5f4>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
							HAL_Delay(200);
 80030f0:	20c8      	movs	r0, #200	@ 0xc8
 80030f2:	f001 fdfd 	bl	8004cf0 <HAL_Delay>
							memset(buff, 0, sizeof(buff));
 80030f6:	2205      	movs	r2, #5
 80030f8:	2100      	movs	r1, #0
 80030fa:	485c      	ldr	r0, [pc, #368]	@ (800326c <main+0x5f8>)
 80030fc:	f006 fec8 	bl	8009e90 <memset>
							LCD_WriteCommand(HD44780_CLEAR);
 8003100:	2001      	movs	r0, #1
 8003102:	f7ff fb97 	bl	8002834 <LCD_WriteCommand>
							LCD_WriteText("Write Bright");
 8003106:	485a      	ldr	r0, [pc, #360]	@ (8003270 <main+0x5fc>)
 8003108:	f7ff fbba 	bl	8002880 <LCD_WriteText>
							while(1) {
								refreshLCD = true;
 800310c:	4b4f      	ldr	r3, [pc, #316]	@ (800324c <main+0x5d8>)
 800310e:	2201      	movs	r2, #1
 8003110:	701a      	strb	r2, [r3, #0]
								symbol[0] = keypad_readkey();
 8003112:	f7ff fa4d 	bl	80025b0 <keypad_readkey>
 8003116:	4603      	mov	r3, r0
 8003118:	461a      	mov	r2, r3
 800311a:	4b4a      	ldr	r3, [pc, #296]	@ (8003244 <main+0x5d0>)
 800311c:	701a      	strb	r2, [r3, #0]
								if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 800311e:	4b49      	ldr	r3, [pc, #292]	@ (8003244 <main+0x5d0>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b2f      	cmp	r3, #47	@ 0x2f
 8003124:	d922      	bls.n	800316c <main+0x4f8>
 8003126:	4b47      	ldr	r3, [pc, #284]	@ (8003244 <main+0x5d0>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b39      	cmp	r3, #57	@ 0x39
 800312c:	d81e      	bhi.n	800316c <main+0x4f8>
 800312e:	4b4e      	ldr	r3, [pc, #312]	@ (8003268 <main+0x5f4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b03      	cmp	r3, #3
 8003134:	d81a      	bhi.n	800316c <main+0x4f8>
									buff[i] = symbol[0];
 8003136:	4b4c      	ldr	r3, [pc, #304]	@ (8003268 <main+0x5f4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a42      	ldr	r2, [pc, #264]	@ (8003244 <main+0x5d0>)
 800313c:	7811      	ldrb	r1, [r2, #0]
 800313e:	4a4b      	ldr	r2, [pc, #300]	@ (800326c <main+0x5f8>)
 8003140:	54d1      	strb	r1, [r2, r3]
									i++;
 8003142:	4b49      	ldr	r3, [pc, #292]	@ (8003268 <main+0x5f4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3301      	adds	r3, #1
 8003148:	4a47      	ldr	r2, [pc, #284]	@ (8003268 <main+0x5f4>)
 800314a:	6013      	str	r3, [r2, #0]
									buff[i] = '\0';
 800314c:	4b46      	ldr	r3, [pc, #280]	@ (8003268 <main+0x5f4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a46      	ldr	r2, [pc, #280]	@ (800326c <main+0x5f8>)
 8003152:	2100      	movs	r1, #0
 8003154:	54d1      	strb	r1, [r2, r3]
									LCD_WriteCommand(HD44780_CLEAR);
 8003156:	2001      	movs	r0, #1
 8003158:	f7ff fb6c 	bl	8002834 <LCD_WriteCommand>
									LCD_WriteText("Brightness: ");
 800315c:	4845      	ldr	r0, [pc, #276]	@ (8003274 <main+0x600>)
 800315e:	f7ff fb8f 	bl	8002880 <LCD_WriteText>
									LCD_WriteTextXY(buff, 0, 1);
 8003162:	2201      	movs	r2, #1
 8003164:	2100      	movs	r1, #0
 8003166:	4841      	ldr	r0, [pc, #260]	@ (800326c <main+0x5f8>)
 8003168:	f7ff fbb9 	bl	80028de <LCD_WriteTextXY>
								}
								HAL_Delay(200);
 800316c:	20c8      	movs	r0, #200	@ 0xc8
 800316e:	f001 fdbf 	bl	8004cf0 <HAL_Delay>
								symbol[0] = keypad_readkey();
 8003172:	f7ff fa1d 	bl	80025b0 <keypad_readkey>
 8003176:	4603      	mov	r3, r0
 8003178:	461a      	mov	r2, r3
 800317a:	4b32      	ldr	r3, [pc, #200]	@ (8003244 <main+0x5d0>)
 800317c:	701a      	strb	r2, [r3, #0]
								if(symbol[0] == '*') {
 800317e:	4b31      	ldr	r3, [pc, #196]	@ (8003244 <main+0x5d0>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b2a      	cmp	r3, #42	@ 0x2a
 8003184:	d123      	bne.n	80031ce <main+0x55a>
									brightnessKitchen = atoi(buff)*10;
 8003186:	4839      	ldr	r0, [pc, #228]	@ (800326c <main+0x5f8>)
 8003188:	f006 fdc6 	bl	8009d18 <atoi>
 800318c:	4602      	mov	r2, r0
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	461a      	mov	r2, r3
 8003198:	4b31      	ldr	r3, [pc, #196]	@ (8003260 <main+0x5ec>)
 800319a:	601a      	str	r2, [r3, #0]
									if(brightnessKitchen >= 1000) {
 800319c:	4b30      	ldr	r3, [pc, #192]	@ (8003260 <main+0x5ec>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031a4:	db03      	blt.n	80031ae <main+0x53a>
										brightnessKitchen = 999;
 80031a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003260 <main+0x5ec>)
 80031a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80031ac:	601a      	str	r2, [r3, #0]
									}
								   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, brightnessKitchen);
 80031ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003260 <main+0x5ec>)
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	4b2c      	ldr	r3, [pc, #176]	@ (8003264 <main+0x5f0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	63da      	str	r2, [r3, #60]	@ 0x3c
									act_menu = menuKitchenLighting;
 80031b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003230 <main+0x5bc>)
 80031ba:	4a25      	ldr	r2, [pc, #148]	@ (8003250 <main+0x5dc>)
 80031bc:	601a      	str	r2, [r3, #0]
									position = 1;
 80031be:	4b1e      	ldr	r3, [pc, #120]	@ (8003238 <main+0x5c4>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	701a      	strb	r2, [r3, #0]
									max_pos = 3;
 80031c4:	4b1d      	ldr	r3, [pc, #116]	@ (800323c <main+0x5c8>)
 80031c6:	2203      	movs	r2, #3
 80031c8:	701a      	strb	r2, [r3, #0]
									break;
 80031ca:	bf00      	nop
								}
								HAL_Delay(100);
							}
							break;
 80031cc:	e00d      	b.n	80031ea <main+0x576>
								HAL_Delay(100);
 80031ce:	2064      	movs	r0, #100	@ 0x64
 80031d0:	f001 fd8e 	bl	8004cf0 <HAL_Delay>
								refreshLCD = true;
 80031d4:	e79a      	b.n	800310c <main+0x498>
 		 	 		default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 80031d6:	4b16      	ldr	r3, [pc, #88]	@ (8003230 <main+0x5bc>)
 80031d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003248 <main+0x5d4>)
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	4b16      	ldr	r3, [pc, #88]	@ (8003238 <main+0x5c4>)
 80031de:	2201      	movs	r2, #1
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	4b16      	ldr	r3, [pc, #88]	@ (800323c <main+0x5c8>)
 80031e4:	2202      	movs	r2, #2
 80031e6:	701a      	strb	r2, [r3, #0]
 80031e8:	bf00      	nop
 		 	 	  switch (position){
 80031ea:	f000 bcab 	b.w	8003b44 <main+0xed0>
//					}
//					break;
//			default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
//		}
//	}
	else if(symbol[0] == '*' && act_menu == menuKitchenShutter) {
 80031ee:	4b15      	ldr	r3, [pc, #84]	@ (8003244 <main+0x5d0>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80031f4:	d175      	bne.n	80032e2 <main+0x66e>
 80031f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003230 <main+0x5bc>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a16      	ldr	r2, [pc, #88]	@ (8003254 <main+0x5e0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d170      	bne.n	80032e2 <main+0x66e>
			refreshLCD = true;
 8003200:	4b12      	ldr	r3, [pc, #72]	@ (800324c <main+0x5d8>)
 8003202:	2201      	movs	r2, #1
 8003204:	701a      	strb	r2, [r3, #0]
			switch(position) {
 8003206:	4b0c      	ldr	r3, [pc, #48]	@ (8003238 <main+0x5c4>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d034      	beq.n	8003278 <main+0x604>
 800320e:	2b02      	cmp	r3, #2
 8003210:	d04d      	beq.n	80032ae <main+0x63a>
 8003212:	f000 bc97 	b.w	8003b44 <main+0xed0>
 8003216:	bf00      	nop
 8003218:	20000272 	.word	0x20000272
 800321c:	20000277 	.word	0x20000277
 8003220:	20000273 	.word	0x20000273
 8003224:	0800a9d8 	.word	0x0800a9d8
 8003228:	0800a9ec 	.word	0x0800a9ec
 800322c:	2000035c 	.word	0x2000035c
 8003230:	20000118 	.word	0x20000118
 8003234:	20000058 	.word	0x20000058
 8003238:	20000054 	.word	0x20000054
 800323c:	20000055 	.word	0x20000055
 8003240:	20000108 	.word	0x20000108
 8003244:	2000020c 	.word	0x2000020c
 8003248:	20000068 	.word	0x20000068
 800324c:	20000271 	.word	0x20000271
 8003250:	20000078 	.word	0x20000078
 8003254:	20000088 	.word	0x20000088
 8003258:	0800a9f8 	.word	0x0800a9f8
 800325c:	0800a9e0 	.word	0x0800a9e0
 8003260:	20000120 	.word	0x20000120
 8003264:	200003a8 	.word	0x200003a8
 8003268:	2000027c 	.word	0x2000027c
 800326c:	20000210 	.word	0x20000210
 8003270:	0800aa00 	.word	0x0800aa00
 8003274:	0800aa10 	.word	0x0800aa10
				case 1:
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 500);
 8003278:	4b9b      	ldr	r3, [pc, #620]	@ (80034e8 <main+0x874>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003280:	635a      	str	r2, [r3, #52]	@ 0x34
					HAL_Delay(500);
 8003282:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003286:	f001 fd33 	bl	8004cf0 <HAL_Delay>
				   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 800328a:	4b97      	ldr	r3, [pc, #604]	@ (80034e8 <main+0x874>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2200      	movs	r2, #0
 8003290:	635a      	str	r2, [r3, #52]	@ 0x34
				   kitchenShutter = true;
 8003292:	4b96      	ldr	r3, [pc, #600]	@ (80034ec <main+0x878>)
 8003294:	2201      	movs	r2, #1
 8003296:	701a      	strb	r2, [r3, #0]
				   LCD_WriteText("Shutter");
 8003298:	4895      	ldr	r0, [pc, #596]	@ (80034f0 <main+0x87c>)
 800329a:	f7ff faf1 	bl	8002880 <LCD_WriteText>
				   LCD_WriteTextXY("is lowering",0,1);
 800329e:	2201      	movs	r2, #1
 80032a0:	2100      	movs	r1, #0
 80032a2:	4894      	ldr	r0, [pc, #592]	@ (80034f4 <main+0x880>)
 80032a4:	f7ff fb1b 	bl	80028de <LCD_WriteTextXY>
				   break;
 80032a8:	bf00      	nop
			switch(position) {
 80032aa:	f000 bc4b 	b.w	8003b44 <main+0xed0>
				case 2:
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 2000);
 80032ae:	4b8e      	ldr	r3, [pc, #568]	@ (80034e8 <main+0x874>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80032b6:	635a      	str	r2, [r3, #52]	@ 0x34
					HAL_Delay(500);
 80032b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80032bc:	f001 fd18 	bl	8004cf0 <HAL_Delay>
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 80032c0:	4b89      	ldr	r3, [pc, #548]	@ (80034e8 <main+0x874>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2200      	movs	r2, #0
 80032c6:	635a      	str	r2, [r3, #52]	@ 0x34
					kitchenShutter = false;
 80032c8:	4b88      	ldr	r3, [pc, #544]	@ (80034ec <main+0x878>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	701a      	strb	r2, [r3, #0]
					LCD_WriteText("Shutter");
 80032ce:	4888      	ldr	r0, [pc, #544]	@ (80034f0 <main+0x87c>)
 80032d0:	f7ff fad6 	bl	8002880 <LCD_WriteText>
					LCD_WriteTextXY("go up",0,1);
 80032d4:	2201      	movs	r2, #1
 80032d6:	2100      	movs	r1, #0
 80032d8:	4887      	ldr	r0, [pc, #540]	@ (80034f8 <main+0x884>)
 80032da:	f7ff fb00 	bl	80028de <LCD_WriteTextXY>
			switch(position) {
 80032de:	f000 bc31 	b.w	8003b44 <main+0xed0>
			}
	}

	else if(symbol[0] == '*' && act_menu == menuLivingroom){
 80032e2:	4b86      	ldr	r3, [pc, #536]	@ (80034fc <main+0x888>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80032e8:	d13b      	bne.n	8003362 <main+0x6ee>
 80032ea:	4b85      	ldr	r3, [pc, #532]	@ (8003500 <main+0x88c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a85      	ldr	r2, [pc, #532]	@ (8003504 <main+0x890>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d136      	bne.n	8003362 <main+0x6ee>
					refreshLCD = true;
 80032f4:	4b84      	ldr	r3, [pc, #528]	@ (8003508 <main+0x894>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	701a      	strb	r2, [r3, #0]
				  switch (position){
 80032fa:	4b84      	ldr	r3, [pc, #528]	@ (800350c <main+0x898>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d01a      	beq.n	8003338 <main+0x6c4>
 8003302:	2b03      	cmp	r3, #3
 8003304:	dc22      	bgt.n	800334c <main+0x6d8>
 8003306:	2b01      	cmp	r3, #1
 8003308:	d002      	beq.n	8003310 <main+0x69c>
 800330a:	2b02      	cmp	r3, #2
 800330c:	d00a      	beq.n	8003324 <main+0x6b0>
 800330e:	e01d      	b.n	800334c <main+0x6d8>
						case 1: act_menu = menuLivingroomTemperature, position = 1, max_pos = 2; break;
 8003310:	4b7b      	ldr	r3, [pc, #492]	@ (8003500 <main+0x88c>)
 8003312:	4a7f      	ldr	r2, [pc, #508]	@ (8003510 <main+0x89c>)
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	4b7d      	ldr	r3, [pc, #500]	@ (800350c <main+0x898>)
 8003318:	2201      	movs	r2, #1
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	4b7d      	ldr	r3, [pc, #500]	@ (8003514 <main+0x8a0>)
 800331e:	2202      	movs	r2, #2
 8003320:	701a      	strb	r2, [r3, #0]
 8003322:	e01d      	b.n	8003360 <main+0x6ec>
						case 2: act_menu = menuLivingroomLighting, position = 1, max_pos = 3; break;
 8003324:	4b76      	ldr	r3, [pc, #472]	@ (8003500 <main+0x88c>)
 8003326:	4a7c      	ldr	r2, [pc, #496]	@ (8003518 <main+0x8a4>)
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	4b78      	ldr	r3, [pc, #480]	@ (800350c <main+0x898>)
 800332c:	2201      	movs	r2, #1
 800332e:	701a      	strb	r2, [r3, #0]
 8003330:	4b78      	ldr	r3, [pc, #480]	@ (8003514 <main+0x8a0>)
 8003332:	2203      	movs	r2, #3
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	e013      	b.n	8003360 <main+0x6ec>
						case 3: act_menu = menuLivingroomShutter, position = 1, max_pos = 2; break;
 8003338:	4b71      	ldr	r3, [pc, #452]	@ (8003500 <main+0x88c>)
 800333a:	4a78      	ldr	r2, [pc, #480]	@ (800351c <main+0x8a8>)
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	4b73      	ldr	r3, [pc, #460]	@ (800350c <main+0x898>)
 8003340:	2201      	movs	r2, #1
 8003342:	701a      	strb	r2, [r3, #0]
 8003344:	4b73      	ldr	r3, [pc, #460]	@ (8003514 <main+0x8a0>)
 8003346:	2202      	movs	r2, #2
 8003348:	701a      	strb	r2, [r3, #0]
 800334a:	e009      	b.n	8003360 <main+0x6ec>
					default: act_menu = menuLivingroom, position = 1, max_pos = 2; break;
 800334c:	4b6c      	ldr	r3, [pc, #432]	@ (8003500 <main+0x88c>)
 800334e:	4a6d      	ldr	r2, [pc, #436]	@ (8003504 <main+0x890>)
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	4b6e      	ldr	r3, [pc, #440]	@ (800350c <main+0x898>)
 8003354:	2201      	movs	r2, #1
 8003356:	701a      	strb	r2, [r3, #0]
 8003358:	4b6e      	ldr	r3, [pc, #440]	@ (8003514 <main+0x8a0>)
 800335a:	2202      	movs	r2, #2
 800335c:	701a      	strb	r2, [r3, #0]
 800335e:	bf00      	nop
				  switch (position){
 8003360:	e3f0      	b.n	8003b44 <main+0xed0>
					  }
	}
	else if(symbol[0] == '*' && act_menu == menuLivingroomLighting){
 8003362:	4b66      	ldr	r3, [pc, #408]	@ (80034fc <main+0x888>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b2a      	cmp	r3, #42	@ 0x2a
 8003368:	f040 80ec 	bne.w	8003544 <main+0x8d0>
 800336c:	4b64      	ldr	r3, [pc, #400]	@ (8003500 <main+0x88c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a69      	ldr	r2, [pc, #420]	@ (8003518 <main+0x8a4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	f040 80e6 	bne.w	8003544 <main+0x8d0>
 		 	 		refreshLCD = true;
 8003378:	4b63      	ldr	r3, [pc, #396]	@ (8003508 <main+0x894>)
 800337a:	2201      	movs	r2, #1
 800337c:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 800337e:	4b63      	ldr	r3, [pc, #396]	@ (800350c <main+0x898>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b03      	cmp	r3, #3
 8003384:	d02c      	beq.n	80033e0 <main+0x76c>
 8003386:	2b03      	cmp	r3, #3
 8003388:	f300 80a3 	bgt.w	80034d2 <main+0x85e>
 800338c:	2b01      	cmp	r3, #1
 800338e:	d002      	beq.n	8003396 <main+0x722>
 8003390:	2b02      	cmp	r3, #2
 8003392:	d015      	beq.n	80033c0 <main+0x74c>
 8003394:	e09d      	b.n	80034d2 <main+0x85e>
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 8003396:	2001      	movs	r0, #1
 8003398:	f7ff fa4c 	bl	8002834 <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 800339c:	4860      	ldr	r0, [pc, #384]	@ (8003520 <main+0x8ac>)
 800339e:	f7ff fa6f 	bl	8002880 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 80033a2:	2201      	movs	r2, #1
 80033a4:	2100      	movs	r1, #0
 80033a6:	485f      	ldr	r0, [pc, #380]	@ (8003524 <main+0x8b0>)
 80033a8:	f7ff fa99 	bl	80028de <LCD_WriteTextXY>
 		 	 				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 80033ac:	4b5e      	ldr	r3, [pc, #376]	@ (8003528 <main+0x8b4>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4b5e      	ldr	r3, [pc, #376]	@ (800352c <main+0x8b8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	635a      	str	r2, [r3, #52]	@ 0x34
							HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80033b6:	2100      	movs	r1, #0
 80033b8:	485c      	ldr	r0, [pc, #368]	@ (800352c <main+0x8b8>)
 80033ba:	f004 fbd3 	bl	8007b64 <HAL_TIM_PWM_Start>
 		 	 				break;
 80033be:	e092      	b.n	80034e6 <main+0x872>

 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 80033c0:	2001      	movs	r0, #1
 80033c2:	f7ff fa37 	bl	8002834 <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 80033c6:	4856      	ldr	r0, [pc, #344]	@ (8003520 <main+0x8ac>)
 80033c8:	f7ff fa5a 	bl	8002880 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 80033cc:	2201      	movs	r2, #1
 80033ce:	2100      	movs	r1, #0
 80033d0:	4857      	ldr	r0, [pc, #348]	@ (8003530 <main+0x8bc>)
 80033d2:	f7ff fa84 	bl	80028de <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim4 , TIM_CHANNEL_1);
 80033d6:	2100      	movs	r1, #0
 80033d8:	4854      	ldr	r0, [pc, #336]	@ (800352c <main+0x8b8>)
 80033da:	f004 fcbd 	bl	8007d58 <HAL_TIM_PWM_Stop>
 				 	 		break;
 80033de:	e082      	b.n	80034e6 <main+0x872>
 		 	 		case 3:
							i = 0;
 80033e0:	4b54      	ldr	r3, [pc, #336]	@ (8003534 <main+0x8c0>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
							refreshLCD = true;
 80033e6:	4b48      	ldr	r3, [pc, #288]	@ (8003508 <main+0x894>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	701a      	strb	r2, [r3, #0]
							HAL_Delay(200);
 80033ec:	20c8      	movs	r0, #200	@ 0xc8
 80033ee:	f001 fc7f 	bl	8004cf0 <HAL_Delay>
							memset(buff, 0, sizeof(buff));
 80033f2:	2205      	movs	r2, #5
 80033f4:	2100      	movs	r1, #0
 80033f6:	4850      	ldr	r0, [pc, #320]	@ (8003538 <main+0x8c4>)
 80033f8:	f006 fd4a 	bl	8009e90 <memset>
							LCD_WriteCommand(HD44780_CLEAR);
 80033fc:	2001      	movs	r0, #1
 80033fe:	f7ff fa19 	bl	8002834 <LCD_WriteCommand>
							LCD_WriteText("Write Bright");
 8003402:	484e      	ldr	r0, [pc, #312]	@ (800353c <main+0x8c8>)
 8003404:	f7ff fa3c 	bl	8002880 <LCD_WriteText>
							while(1) {
								refreshLCD = true;
 8003408:	4b3f      	ldr	r3, [pc, #252]	@ (8003508 <main+0x894>)
 800340a:	2201      	movs	r2, #1
 800340c:	701a      	strb	r2, [r3, #0]
								symbol[0] = keypad_readkey();
 800340e:	f7ff f8cf 	bl	80025b0 <keypad_readkey>
 8003412:	4603      	mov	r3, r0
 8003414:	461a      	mov	r2, r3
 8003416:	4b39      	ldr	r3, [pc, #228]	@ (80034fc <main+0x888>)
 8003418:	701a      	strb	r2, [r3, #0]
								if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 800341a:	4b38      	ldr	r3, [pc, #224]	@ (80034fc <main+0x888>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b2f      	cmp	r3, #47	@ 0x2f
 8003420:	d922      	bls.n	8003468 <main+0x7f4>
 8003422:	4b36      	ldr	r3, [pc, #216]	@ (80034fc <main+0x888>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b39      	cmp	r3, #57	@ 0x39
 8003428:	d81e      	bhi.n	8003468 <main+0x7f4>
 800342a:	4b42      	ldr	r3, [pc, #264]	@ (8003534 <main+0x8c0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b03      	cmp	r3, #3
 8003430:	d81a      	bhi.n	8003468 <main+0x7f4>
									buff[i] = symbol[0];
 8003432:	4b40      	ldr	r3, [pc, #256]	@ (8003534 <main+0x8c0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a31      	ldr	r2, [pc, #196]	@ (80034fc <main+0x888>)
 8003438:	7811      	ldrb	r1, [r2, #0]
 800343a:	4a3f      	ldr	r2, [pc, #252]	@ (8003538 <main+0x8c4>)
 800343c:	54d1      	strb	r1, [r2, r3]
									i++;
 800343e:	4b3d      	ldr	r3, [pc, #244]	@ (8003534 <main+0x8c0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	3301      	adds	r3, #1
 8003444:	4a3b      	ldr	r2, [pc, #236]	@ (8003534 <main+0x8c0>)
 8003446:	6013      	str	r3, [r2, #0]
									buff[i] = '\0';
 8003448:	4b3a      	ldr	r3, [pc, #232]	@ (8003534 <main+0x8c0>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a3a      	ldr	r2, [pc, #232]	@ (8003538 <main+0x8c4>)
 800344e:	2100      	movs	r1, #0
 8003450:	54d1      	strb	r1, [r2, r3]
									LCD_WriteCommand(HD44780_CLEAR);
 8003452:	2001      	movs	r0, #1
 8003454:	f7ff f9ee 	bl	8002834 <LCD_WriteCommand>
									LCD_WriteText("Brightness: ");
 8003458:	4839      	ldr	r0, [pc, #228]	@ (8003540 <main+0x8cc>)
 800345a:	f7ff fa11 	bl	8002880 <LCD_WriteText>
									LCD_WriteTextXY(buff, 0, 1);
 800345e:	2201      	movs	r2, #1
 8003460:	2100      	movs	r1, #0
 8003462:	4835      	ldr	r0, [pc, #212]	@ (8003538 <main+0x8c4>)
 8003464:	f7ff fa3b 	bl	80028de <LCD_WriteTextXY>
								}
								HAL_Delay(200);
 8003468:	20c8      	movs	r0, #200	@ 0xc8
 800346a:	f001 fc41 	bl	8004cf0 <HAL_Delay>
								symbol[0] = keypad_readkey();
 800346e:	f7ff f89f 	bl	80025b0 <keypad_readkey>
 8003472:	4603      	mov	r3, r0
 8003474:	461a      	mov	r2, r3
 8003476:	4b21      	ldr	r3, [pc, #132]	@ (80034fc <main+0x888>)
 8003478:	701a      	strb	r2, [r3, #0]
								if(symbol[0] == '*') {
 800347a:	4b20      	ldr	r3, [pc, #128]	@ (80034fc <main+0x888>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003480:	d123      	bne.n	80034ca <main+0x856>
									brightnessLivingroom = atoi(buff)*10;
 8003482:	482d      	ldr	r0, [pc, #180]	@ (8003538 <main+0x8c4>)
 8003484:	f006 fc48 	bl	8009d18 <atoi>
 8003488:	4602      	mov	r2, r0
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	461a      	mov	r2, r3
 8003494:	4b24      	ldr	r3, [pc, #144]	@ (8003528 <main+0x8b4>)
 8003496:	601a      	str	r2, [r3, #0]
									if(brightnessLivingroom >= 1000) {
 8003498:	4b23      	ldr	r3, [pc, #140]	@ (8003528 <main+0x8b4>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034a0:	db03      	blt.n	80034aa <main+0x836>
										brightnessLivingroom = 999;
 80034a2:	4b21      	ldr	r3, [pc, #132]	@ (8003528 <main+0x8b4>)
 80034a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80034a8:	601a      	str	r2, [r3, #0]
									}
								   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 80034aa:	4b1f      	ldr	r3, [pc, #124]	@ (8003528 <main+0x8b4>)
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	4b1f      	ldr	r3, [pc, #124]	@ (800352c <main+0x8b8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	635a      	str	r2, [r3, #52]	@ 0x34
									act_menu = menuLivingroomLighting;
 80034b4:	4b12      	ldr	r3, [pc, #72]	@ (8003500 <main+0x88c>)
 80034b6:	4a18      	ldr	r2, [pc, #96]	@ (8003518 <main+0x8a4>)
 80034b8:	601a      	str	r2, [r3, #0]
									position = 1;
 80034ba:	4b14      	ldr	r3, [pc, #80]	@ (800350c <main+0x898>)
 80034bc:	2201      	movs	r2, #1
 80034be:	701a      	strb	r2, [r3, #0]
									max_pos = 3;
 80034c0:	4b14      	ldr	r3, [pc, #80]	@ (8003514 <main+0x8a0>)
 80034c2:	2203      	movs	r2, #3
 80034c4:	701a      	strb	r2, [r3, #0]
									break;
 80034c6:	bf00      	nop
								}
								HAL_Delay(100);
							}
							break;
 80034c8:	e00d      	b.n	80034e6 <main+0x872>
								HAL_Delay(100);
 80034ca:	2064      	movs	r0, #100	@ 0x64
 80034cc:	f001 fc10 	bl	8004cf0 <HAL_Delay>
								refreshLCD = true;
 80034d0:	e79a      	b.n	8003408 <main+0x794>
 		 	 		default: act_menu = menuLivingroom, position = 1, max_pos = 2; break;
 80034d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003500 <main+0x88c>)
 80034d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003504 <main+0x890>)
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	4b0c      	ldr	r3, [pc, #48]	@ (800350c <main+0x898>)
 80034da:	2201      	movs	r2, #1
 80034dc:	701a      	strb	r2, [r3, #0]
 80034de:	4b0d      	ldr	r3, [pc, #52]	@ (8003514 <main+0x8a0>)
 80034e0:	2202      	movs	r2, #2
 80034e2:	701a      	strb	r2, [r3, #0]
 80034e4:	bf00      	nop
 		 	 	  switch (position){
 80034e6:	e32d      	b.n	8003b44 <main+0xed0>
 80034e8:	20000310 	.word	0x20000310
 80034ec:	20000278 	.word	0x20000278
 80034f0:	0800aa20 	.word	0x0800aa20
 80034f4:	0800aa28 	.word	0x0800aa28
 80034f8:	0800aa34 	.word	0x0800aa34
 80034fc:	2000020c 	.word	0x2000020c
 8003500:	20000118 	.word	0x20000118
 8003504:	20000098 	.word	0x20000098
 8003508:	20000271 	.word	0x20000271
 800350c:	20000054 	.word	0x20000054
 8003510:	200000b8 	.word	0x200000b8
 8003514:	20000055 	.word	0x20000055
 8003518:	200000a8 	.word	0x200000a8
 800351c:	200000c8 	.word	0x200000c8
 8003520:	0800a9f8 	.word	0x0800a9f8
 8003524:	0800a9e0 	.word	0x0800a9e0
 8003528:	2000011c 	.word	0x2000011c
 800352c:	200003f4 	.word	0x200003f4
 8003530:	0800a9ec 	.word	0x0800a9ec
 8003534:	2000027c 	.word	0x2000027c
 8003538:	20000210 	.word	0x20000210
 800353c:	0800aa00 	.word	0x0800aa00
 8003540:	0800aa10 	.word	0x0800aa10
 		 	 	  	  }
 		 	 	}
	else if(symbol[0] == '*' && act_menu == menuLivingroomTemperature){
 8003544:	4ba2      	ldr	r3, [pc, #648]	@ (80037d0 <main+0xb5c>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b2a      	cmp	r3, #42	@ 0x2a
 800354a:	f040 8113 	bne.w	8003774 <main+0xb00>
 800354e:	4ba1      	ldr	r3, [pc, #644]	@ (80037d4 <main+0xb60>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4aa1      	ldr	r2, [pc, #644]	@ (80037d8 <main+0xb64>)
 8003554:	4293      	cmp	r3, r2
 8003556:	f040 810d 	bne.w	8003774 <main+0xb00>
		refreshLCD = true;
 800355a:	4ba0      	ldr	r3, [pc, #640]	@ (80037dc <main+0xb68>)
 800355c:	2201      	movs	r2, #1
 800355e:	701a      	strb	r2, [r3, #0]
		switch (position){
 8003560:	4b9f      	ldr	r3, [pc, #636]	@ (80037e0 <main+0xb6c>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b03      	cmp	r3, #3
 8003566:	f000 8089 	beq.w	800367c <main+0xa08>
 800356a:	2b03      	cmp	r3, #3
 800356c:	f300 80f7 	bgt.w	800375e <main+0xaea>
 8003570:	2b01      	cmp	r3, #1
 8003572:	d002      	beq.n	800357a <main+0x906>
 8003574:	2b02      	cmp	r3, #2
 8003576:	d075      	beq.n	8003664 <main+0x9f0>
 8003578:	e0f1      	b.n	800375e <main+0xaea>
			case 1:
				while(1) {
					HAL_Delay(500);
 800357a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800357e:	f001 fbb7 	bl	8004cf0 <HAL_Delay>
					BMP2_ReadData(&bmp2dev, &press, &temp);
 8003582:	4a98      	ldr	r2, [pc, #608]	@ (80037e4 <main+0xb70>)
 8003584:	4998      	ldr	r1, [pc, #608]	@ (80037e8 <main+0xb74>)
 8003586:	4899      	ldr	r0, [pc, #612]	@ (80037ec <main+0xb78>)
 8003588:	f7fe fd7c 	bl	8002084 <BMP2_ReadData>
					roundedValue = roundToTwoDecimals(temp);
 800358c:	4b95      	ldr	r3, [pc, #596]	@ (80037e4 <main+0xb70>)
 800358e:	ed93 7b00 	vldr	d7, [r3]
 8003592:	eeb0 0a47 	vmov.f32	s0, s14
 8003596:	eef0 0a67 	vmov.f32	s1, s15
 800359a:	f7ff fa9d 	bl	8002ad8 <roundToTwoDecimals>
 800359e:	eeb0 7a40 	vmov.f32	s14, s0
 80035a2:	eef0 7a60 	vmov.f32	s15, s1
 80035a6:	4b92      	ldr	r3, [pc, #584]	@ (80037f0 <main+0xb7c>)
 80035a8:	ed83 7b00 	vstr	d7, [r3]
					intPart = (int)roundedValue;
 80035ac:	4b90      	ldr	r3, [pc, #576]	@ (80037f0 <main+0xb7c>)
 80035ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b2:	4610      	mov	r0, r2
 80035b4:	4619      	mov	r1, r3
 80035b6:	f7fd fae9 	bl	8000b8c <__aeabi_d2iz>
 80035ba:	4603      	mov	r3, r0
 80035bc:	4a8d      	ldr	r2, [pc, #564]	@ (80037f4 <main+0xb80>)
 80035be:	6013      	str	r3, [r2, #0]
					fracPart = (int)((roundedValue - intPart) * 100);
 80035c0:	4b8b      	ldr	r3, [pc, #556]	@ (80037f0 <main+0xb7c>)
 80035c2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80035c6:	4b8b      	ldr	r3, [pc, #556]	@ (80037f4 <main+0xb80>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fc ffda 	bl	8000584 <__aeabi_i2d>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4620      	mov	r0, r4
 80035d6:	4629      	mov	r1, r5
 80035d8:	f7fc fe86 	bl	80002e8 <__aeabi_dsub>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4610      	mov	r0, r2
 80035e2:	4619      	mov	r1, r3
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	4b83      	ldr	r3, [pc, #524]	@ (80037f8 <main+0xb84>)
 80035ea:	f7fd f835 	bl	8000658 <__aeabi_dmul>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4610      	mov	r0, r2
 80035f4:	4619      	mov	r1, r3
 80035f6:	f7fd fac9 	bl	8000b8c <__aeabi_d2iz>
 80035fa:	4603      	mov	r3, r0
 80035fc:	4a7f      	ldr	r2, [pc, #508]	@ (80037fc <main+0xb88>)
 80035fe:	6013      	str	r3, [r2, #0]
					snprintf(result, sizeof(result), "Temp: %d.%04d", intPart, abs(fracPart));
 8003600:	4b7c      	ldr	r3, [pc, #496]	@ (80037f4 <main+0xb80>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	4b7d      	ldr	r3, [pc, #500]	@ (80037fc <main+0xb88>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	bfb8      	it	lt
 800360c:	425b      	neglt	r3, r3
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	4613      	mov	r3, r2
 8003612:	4a7b      	ldr	r2, [pc, #492]	@ (8003800 <main+0xb8c>)
 8003614:	2132      	movs	r1, #50	@ 0x32
 8003616:	487b      	ldr	r0, [pc, #492]	@ (8003804 <main+0xb90>)
 8003618:	f006 fc06 	bl	8009e28 <sniprintf>
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 990);
 800361c:	4b7a      	ldr	r3, [pc, #488]	@ (8003808 <main+0xb94>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f240 32de 	movw	r2, #990	@ 0x3de
 8003624:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003626:	2108      	movs	r1, #8
 8003628:	4877      	ldr	r0, [pc, #476]	@ (8003808 <main+0xb94>)
 800362a:	f004 fa9b 	bl	8007b64 <HAL_TIM_PWM_Start>
					LCD_WriteCommand(HD44780_CLEAR);
 800362e:	2001      	movs	r0, #1
 8003630:	f7ff f900 	bl	8002834 <LCD_WriteCommand>
					LCD_WriteText(result);
 8003634:	4873      	ldr	r0, [pc, #460]	@ (8003804 <main+0xb90>)
 8003636:	f7ff f923 	bl	8002880 <LCD_WriteText>
					if(symbol[0] == '*') {
 800363a:	4b65      	ldr	r3, [pc, #404]	@ (80037d0 <main+0xb5c>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003640:	d10a      	bne.n	8003658 <main+0x9e4>
						act_menu = menuLivingroomTemperature;
 8003642:	4b64      	ldr	r3, [pc, #400]	@ (80037d4 <main+0xb60>)
 8003644:	4a64      	ldr	r2, [pc, #400]	@ (80037d8 <main+0xb64>)
 8003646:	601a      	str	r2, [r3, #0]
						position = 1;
 8003648:	4b65      	ldr	r3, [pc, #404]	@ (80037e0 <main+0xb6c>)
 800364a:	2201      	movs	r2, #1
 800364c:	701a      	strb	r2, [r3, #0]
						max_pos = 3;
 800364e:	4b6f      	ldr	r3, [pc, #444]	@ (800380c <main+0xb98>)
 8003650:	2203      	movs	r2, #3
 8003652:	701a      	strb	r2, [r3, #0]
						break;
 8003654:	bf00      	nop
					}
					i++;
				}
				break;
 8003656:	e08c      	b.n	8003772 <main+0xafe>
					i++;
 8003658:	4b6d      	ldr	r3, [pc, #436]	@ (8003810 <main+0xb9c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3301      	adds	r3, #1
 800365e:	4a6c      	ldr	r2, [pc, #432]	@ (8003810 <main+0xb9c>)
 8003660:	6013      	str	r3, [r2, #0]
				while(1) {
 8003662:	e78a      	b.n	800357a <main+0x906>
			case 2: LCD_WriteCommand(HD44780_CLEAR);
 8003664:	2001      	movs	r0, #1
 8003666:	f7ff f8e5 	bl	8002834 <LCD_WriteCommand>
					LCD_WriteText("Heat");
 800366a:	486a      	ldr	r0, [pc, #424]	@ (8003814 <main+0xba0>)
 800366c:	f7ff f908 	bl	8002880 <LCD_WriteText>
					LCD_WriteTextXY("Turned off",0,1);; break;
 8003670:	2201      	movs	r2, #1
 8003672:	2100      	movs	r1, #0
 8003674:	4868      	ldr	r0, [pc, #416]	@ (8003818 <main+0xba4>)
 8003676:	f7ff f932 	bl	80028de <LCD_WriteTextXY>
 800367a:	e07a      	b.n	8003772 <main+0xafe>
			case 3:
				i = 0;
 800367c:	4b64      	ldr	r3, [pc, #400]	@ (8003810 <main+0xb9c>)
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
				HAL_Delay(200);
 8003682:	20c8      	movs	r0, #200	@ 0xc8
 8003684:	f001 fb34 	bl	8004cf0 <HAL_Delay>
				memset(buff, 0, sizeof(buff));
 8003688:	2205      	movs	r2, #5
 800368a:	2100      	movs	r1, #0
 800368c:	4863      	ldr	r0, [pc, #396]	@ (800381c <main+0xba8>)
 800368e:	f006 fbff 	bl	8009e90 <memset>
				LCD_WriteCommand(HD44780_CLEAR);
 8003692:	2001      	movs	r0, #1
 8003694:	f7ff f8ce 	bl	8002834 <LCD_WriteCommand>
				LCD_WriteText("Write Temp");
 8003698:	4861      	ldr	r0, [pc, #388]	@ (8003820 <main+0xbac>)
 800369a:	f7ff f8f1 	bl	8002880 <LCD_WriteText>
				while(1) {
					refreshLCD = true;
 800369e:	4b4f      	ldr	r3, [pc, #316]	@ (80037dc <main+0xb68>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	701a      	strb	r2, [r3, #0]
					symbol[0] = keypad_readkey();
 80036a4:	f7fe ff84 	bl	80025b0 <keypad_readkey>
 80036a8:	4603      	mov	r3, r0
 80036aa:	461a      	mov	r2, r3
 80036ac:	4b48      	ldr	r3, [pc, #288]	@ (80037d0 <main+0xb5c>)
 80036ae:	701a      	strb	r2, [r3, #0]
					if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 80036b0:	4b47      	ldr	r3, [pc, #284]	@ (80037d0 <main+0xb5c>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80036b6:	d922      	bls.n	80036fe <main+0xa8a>
 80036b8:	4b45      	ldr	r3, [pc, #276]	@ (80037d0 <main+0xb5c>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b39      	cmp	r3, #57	@ 0x39
 80036be:	d81e      	bhi.n	80036fe <main+0xa8a>
 80036c0:	4b53      	ldr	r3, [pc, #332]	@ (8003810 <main+0xb9c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d81a      	bhi.n	80036fe <main+0xa8a>
						buff[i] = symbol[0];
 80036c8:	4b51      	ldr	r3, [pc, #324]	@ (8003810 <main+0xb9c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a40      	ldr	r2, [pc, #256]	@ (80037d0 <main+0xb5c>)
 80036ce:	7811      	ldrb	r1, [r2, #0]
 80036d0:	4a52      	ldr	r2, [pc, #328]	@ (800381c <main+0xba8>)
 80036d2:	54d1      	strb	r1, [r2, r3]
						i++;
 80036d4:	4b4e      	ldr	r3, [pc, #312]	@ (8003810 <main+0xb9c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3301      	adds	r3, #1
 80036da:	4a4d      	ldr	r2, [pc, #308]	@ (8003810 <main+0xb9c>)
 80036dc:	6013      	str	r3, [r2, #0]
						buff[i] = '\0';
 80036de:	4b4c      	ldr	r3, [pc, #304]	@ (8003810 <main+0xb9c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a4e      	ldr	r2, [pc, #312]	@ (800381c <main+0xba8>)
 80036e4:	2100      	movs	r1, #0
 80036e6:	54d1      	strb	r1, [r2, r3]
						LCD_WriteCommand(HD44780_CLEAR);
 80036e8:	2001      	movs	r0, #1
 80036ea:	f7ff f8a3 	bl	8002834 <LCD_WriteCommand>
						LCD_WriteText("Temp: ");
 80036ee:	484d      	ldr	r0, [pc, #308]	@ (8003824 <main+0xbb0>)
 80036f0:	f7ff f8c6 	bl	8002880 <LCD_WriteText>
						LCD_WriteTextXY(buff, 0, 1);
 80036f4:	2201      	movs	r2, #1
 80036f6:	2100      	movs	r1, #0
 80036f8:	4848      	ldr	r0, [pc, #288]	@ (800381c <main+0xba8>)
 80036fa:	f7ff f8f0 	bl	80028de <LCD_WriteTextXY>
					}
					HAL_Delay(200);
 80036fe:	20c8      	movs	r0, #200	@ 0xc8
 8003700:	f001 faf6 	bl	8004cf0 <HAL_Delay>
					symbol[0] = keypad_readkey();
 8003704:	f7fe ff54 	bl	80025b0 <keypad_readkey>
 8003708:	4603      	mov	r3, r0
 800370a:	461a      	mov	r2, r3
 800370c:	4b30      	ldr	r3, [pc, #192]	@ (80037d0 <main+0xb5c>)
 800370e:	701a      	strb	r2, [r3, #0]
					if(symbol[0] == '*') {
 8003710:	4b2f      	ldr	r3, [pc, #188]	@ (80037d0 <main+0xb5c>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b2a      	cmp	r3, #42	@ 0x2a
 8003716:	d11e      	bne.n	8003756 <main+0xae2>
						tempLivingroom = atoi(buff)*10;
 8003718:	4840      	ldr	r0, [pc, #256]	@ (800381c <main+0xba8>)
 800371a:	f006 fafd 	bl	8009d18 <atoi>
 800371e:	4602      	mov	r2, r0
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	461a      	mov	r2, r3
 800372a:	4b3f      	ldr	r3, [pc, #252]	@ (8003828 <main+0xbb4>)
 800372c:	601a      	str	r2, [r3, #0]
						if(tempLivingroom >= 1000) {
 800372e:	4b3e      	ldr	r3, [pc, #248]	@ (8003828 <main+0xbb4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003736:	db03      	blt.n	8003740 <main+0xacc>
							tempLivingroom = 999;
 8003738:	4b3b      	ldr	r3, [pc, #236]	@ (8003828 <main+0xbb4>)
 800373a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800373e:	601a      	str	r2, [r3, #0]
						}
						act_menu = menuLivingroomTemperature;
 8003740:	4b24      	ldr	r3, [pc, #144]	@ (80037d4 <main+0xb60>)
 8003742:	4a25      	ldr	r2, [pc, #148]	@ (80037d8 <main+0xb64>)
 8003744:	601a      	str	r2, [r3, #0]
						position = 1;
 8003746:	4b26      	ldr	r3, [pc, #152]	@ (80037e0 <main+0xb6c>)
 8003748:	2201      	movs	r2, #1
 800374a:	701a      	strb	r2, [r3, #0]
						max_pos = 3;
 800374c:	4b2f      	ldr	r3, [pc, #188]	@ (800380c <main+0xb98>)
 800374e:	2203      	movs	r2, #3
 8003750:	701a      	strb	r2, [r3, #0]
						break;
 8003752:	bf00      	nop
					}
					HAL_Delay(100);
				}
			break;
 8003754:	e00d      	b.n	8003772 <main+0xafe>
					HAL_Delay(100);
 8003756:	2064      	movs	r0, #100	@ 0x64
 8003758:	f001 faca 	bl	8004cf0 <HAL_Delay>
					refreshLCD = true;
 800375c:	e79f      	b.n	800369e <main+0xa2a>
			default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 800375e:	4b1d      	ldr	r3, [pc, #116]	@ (80037d4 <main+0xb60>)
 8003760:	4a32      	ldr	r2, [pc, #200]	@ (800382c <main+0xbb8>)
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	4b1e      	ldr	r3, [pc, #120]	@ (80037e0 <main+0xb6c>)
 8003766:	2201      	movs	r2, #1
 8003768:	701a      	strb	r2, [r3, #0]
 800376a:	4b28      	ldr	r3, [pc, #160]	@ (800380c <main+0xb98>)
 800376c:	2202      	movs	r2, #2
 800376e:	701a      	strb	r2, [r3, #0]
 8003770:	bf00      	nop
		switch (position){
 8003772:	e1e7      	b.n	8003b44 <main+0xed0>
				  }
			}
	else if(symbol[0] == '*' && act_menu == menuLivingroomShutter) {
 8003774:	4b16      	ldr	r3, [pc, #88]	@ (80037d0 <main+0xb5c>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b2a      	cmp	r3, #42	@ 0x2a
 800377a:	d17c      	bne.n	8003876 <main+0xc02>
 800377c:	4b15      	ldr	r3, [pc, #84]	@ (80037d4 <main+0xb60>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a2b      	ldr	r2, [pc, #172]	@ (8003830 <main+0xbbc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d177      	bne.n	8003876 <main+0xc02>
			refreshLCD = true;
 8003786:	4b15      	ldr	r3, [pc, #84]	@ (80037dc <main+0xb68>)
 8003788:	2201      	movs	r2, #1
 800378a:	701a      	strb	r2, [r3, #0]
			switch(position) {
 800378c:	4b14      	ldr	r3, [pc, #80]	@ (80037e0 <main+0xb6c>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d002      	beq.n	800379a <main+0xb26>
 8003794:	2b02      	cmp	r3, #2
 8003796:	d055      	beq.n	8003844 <main+0xbd0>
 8003798:	e1d4      	b.n	8003b44 <main+0xed0>
				case 1:
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 500);
 800379a:	4b26      	ldr	r3, [pc, #152]	@ (8003834 <main+0xbc0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80037a2:	635a      	str	r2, [r3, #52]	@ 0x34
					HAL_Delay(500);
 80037a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80037a8:	f001 faa2 	bl	8004cf0 <HAL_Delay>
				   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 80037ac:	4b21      	ldr	r3, [pc, #132]	@ (8003834 <main+0xbc0>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2200      	movs	r2, #0
 80037b2:	635a      	str	r2, [r3, #52]	@ 0x34
				   livingroomShutter = true;
 80037b4:	4b20      	ldr	r3, [pc, #128]	@ (8003838 <main+0xbc4>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	701a      	strb	r2, [r3, #0]
				   LCD_WriteText("Shutter");
 80037ba:	4820      	ldr	r0, [pc, #128]	@ (800383c <main+0xbc8>)
 80037bc:	f7ff f860 	bl	8002880 <LCD_WriteText>
				   LCD_WriteTextXY("is lowering",0,1);
 80037c0:	2201      	movs	r2, #1
 80037c2:	2100      	movs	r1, #0
 80037c4:	481e      	ldr	r0, [pc, #120]	@ (8003840 <main+0xbcc>)
 80037c6:	f7ff f88a 	bl	80028de <LCD_WriteTextXY>
				   break;
 80037ca:	bf00      	nop
			switch(position) {
 80037cc:	e1ba      	b.n	8003b44 <main+0xed0>
 80037ce:	bf00      	nop
 80037d0:	2000020c 	.word	0x2000020c
 80037d4:	20000118 	.word	0x20000118
 80037d8:	200000b8 	.word	0x200000b8
 80037dc:	20000271 	.word	0x20000271
 80037e0:	20000054 	.word	0x20000054
 80037e4:	20000290 	.word	0x20000290
 80037e8:	20000298 	.word	0x20000298
 80037ec:	20000018 	.word	0x20000018
 80037f0:	200002a0 	.word	0x200002a0
 80037f4:	20000288 	.word	0x20000288
 80037f8:	40590000 	.word	0x40590000
 80037fc:	2000028c 	.word	0x2000028c
 8003800:	0800aa3c 	.word	0x0800aa3c
 8003804:	20000218 	.word	0x20000218
 8003808:	200003f4 	.word	0x200003f4
 800380c:	20000055 	.word	0x20000055
 8003810:	2000027c 	.word	0x2000027c
 8003814:	0800aa4c 	.word	0x0800aa4c
 8003818:	0800aa54 	.word	0x0800aa54
 800381c:	20000210 	.word	0x20000210
 8003820:	0800aa60 	.word	0x0800aa60
 8003824:	0800aa6c 	.word	0x0800aa6c
 8003828:	20000280 	.word	0x20000280
 800382c:	20000068 	.word	0x20000068
 8003830:	200000c8 	.word	0x200000c8
 8003834:	20000310 	.word	0x20000310
 8003838:	20000279 	.word	0x20000279
 800383c:	0800aa20 	.word	0x0800aa20
 8003840:	0800aa28 	.word	0x0800aa28
				case 2:
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 2000);
 8003844:	4b9c      	ldr	r3, [pc, #624]	@ (8003ab8 <main+0xe44>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800384c:	635a      	str	r2, [r3, #52]	@ 0x34
					HAL_Delay(500);
 800384e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003852:	f001 fa4d 	bl	8004cf0 <HAL_Delay>
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 8003856:	4b98      	ldr	r3, [pc, #608]	@ (8003ab8 <main+0xe44>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2200      	movs	r2, #0
 800385c:	635a      	str	r2, [r3, #52]	@ 0x34
					livingroomShutter = false;
 800385e:	4b97      	ldr	r3, [pc, #604]	@ (8003abc <main+0xe48>)
 8003860:	2200      	movs	r2, #0
 8003862:	701a      	strb	r2, [r3, #0]
					LCD_WriteText("Shutter");
 8003864:	4896      	ldr	r0, [pc, #600]	@ (8003ac0 <main+0xe4c>)
 8003866:	f7ff f80b 	bl	8002880 <LCD_WriteText>
					LCD_WriteTextXY("go up",0,1);
 800386a:	2201      	movs	r2, #1
 800386c:	2100      	movs	r1, #0
 800386e:	4895      	ldr	r0, [pc, #596]	@ (8003ac4 <main+0xe50>)
 8003870:	f7ff f835 	bl	80028de <LCD_WriteTextXY>
			switch(position) {
 8003874:	e166      	b.n	8003b44 <main+0xed0>
			}
	}
	else if(symbol[0] == '*' && act_menu == menuGarage){
 8003876:	4b94      	ldr	r3, [pc, #592]	@ (8003ac8 <main+0xe54>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b2a      	cmp	r3, #42	@ 0x2a
 800387c:	d12d      	bne.n	80038da <main+0xc66>
 800387e:	4b93      	ldr	r3, [pc, #588]	@ (8003acc <main+0xe58>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a93      	ldr	r2, [pc, #588]	@ (8003ad0 <main+0xe5c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d128      	bne.n	80038da <main+0xc66>
 		 		 	 		refreshLCD = true;
 8003888:	4b92      	ldr	r3, [pc, #584]	@ (8003ad4 <main+0xe60>)
 800388a:	2201      	movs	r2, #1
 800388c:	701a      	strb	r2, [r3, #0]
 		 		 	 	  switch (position){
 800388e:	4b92      	ldr	r3, [pc, #584]	@ (8003ad8 <main+0xe64>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d002      	beq.n	800389c <main+0xc28>
 8003896:	2b02      	cmp	r3, #2
 8003898:	d00a      	beq.n	80038b0 <main+0xc3c>
 800389a:	e013      	b.n	80038c4 <main+0xc50>
 		 		 	 	  	  	case 1: act_menu = menuGarageLighting, position = 1, max_pos = 3; break;
 800389c:	4b8b      	ldr	r3, [pc, #556]	@ (8003acc <main+0xe58>)
 800389e:	4a8f      	ldr	r2, [pc, #572]	@ (8003adc <main+0xe68>)
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	4b8d      	ldr	r3, [pc, #564]	@ (8003ad8 <main+0xe64>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	701a      	strb	r2, [r3, #0]
 80038a8:	4b8d      	ldr	r3, [pc, #564]	@ (8003ae0 <main+0xe6c>)
 80038aa:	2203      	movs	r2, #3
 80038ac:	701a      	strb	r2, [r3, #0]
 80038ae:	e013      	b.n	80038d8 <main+0xc64>
 		 		 	 	  	  	case 2: act_menu = menuGarageShutter, position = 1, max_pos = 2; break;
 80038b0:	4b86      	ldr	r3, [pc, #536]	@ (8003acc <main+0xe58>)
 80038b2:	4a8c      	ldr	r2, [pc, #560]	@ (8003ae4 <main+0xe70>)
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	4b88      	ldr	r3, [pc, #544]	@ (8003ad8 <main+0xe64>)
 80038b8:	2201      	movs	r2, #1
 80038ba:	701a      	strb	r2, [r3, #0]
 80038bc:	4b88      	ldr	r3, [pc, #544]	@ (8003ae0 <main+0xe6c>)
 80038be:	2202      	movs	r2, #2
 80038c0:	701a      	strb	r2, [r3, #0]
 80038c2:	e009      	b.n	80038d8 <main+0xc64>
 		 		 	 		default: act_menu = menuGarage, position = 1, max_pos = 1; break;
 80038c4:	4b81      	ldr	r3, [pc, #516]	@ (8003acc <main+0xe58>)
 80038c6:	4a82      	ldr	r2, [pc, #520]	@ (8003ad0 <main+0xe5c>)
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	4b83      	ldr	r3, [pc, #524]	@ (8003ad8 <main+0xe64>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	701a      	strb	r2, [r3, #0]
 80038d0:	4b83      	ldr	r3, [pc, #524]	@ (8003ae0 <main+0xe6c>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	701a      	strb	r2, [r3, #0]
 80038d6:	bf00      	nop
 		 		 	 	  switch (position){
 80038d8:	e134      	b.n	8003b44 <main+0xed0>
 		 		 	 	  	  }
 		 		 	 	}
 			else if(symbol[0] == '*' && act_menu == menuGarageLighting){
 80038da:	4b7b      	ldr	r3, [pc, #492]	@ (8003ac8 <main+0xe54>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b2a      	cmp	r3, #42	@ 0x2a
 80038e0:	f040 80be 	bne.w	8003a60 <main+0xdec>
 80038e4:	4b79      	ldr	r3, [pc, #484]	@ (8003acc <main+0xe58>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a7c      	ldr	r2, [pc, #496]	@ (8003adc <main+0xe68>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	f040 80b8 	bne.w	8003a60 <main+0xdec>
 		 	 		refreshLCD = true;
 80038f0:	4b78      	ldr	r3, [pc, #480]	@ (8003ad4 <main+0xe60>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 80038f6:	4b78      	ldr	r3, [pc, #480]	@ (8003ad8 <main+0xe64>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d02c      	beq.n	8003958 <main+0xce4>
 80038fe:	2b03      	cmp	r3, #3
 8003900:	f300 80a3 	bgt.w	8003a4a <main+0xdd6>
 8003904:	2b01      	cmp	r3, #1
 8003906:	d002      	beq.n	800390e <main+0xc9a>
 8003908:	2b02      	cmp	r3, #2
 800390a:	d015      	beq.n	8003938 <main+0xcc4>
 800390c:	e09d      	b.n	8003a4a <main+0xdd6>
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 800390e:	2001      	movs	r0, #1
 8003910:	f7fe ff90 	bl	8002834 <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 8003914:	4874      	ldr	r0, [pc, #464]	@ (8003ae8 <main+0xe74>)
 8003916:	f7fe ffb3 	bl	8002880 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 800391a:	2201      	movs	r2, #1
 800391c:	2100      	movs	r1, #0
 800391e:	4873      	ldr	r0, [pc, #460]	@ (8003aec <main+0xe78>)
 8003920:	f7fe ffdd 	bl	80028de <LCD_WriteTextXY>
 		 	 				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 8003924:	4b72      	ldr	r3, [pc, #456]	@ (8003af0 <main+0xe7c>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	4b72      	ldr	r3, [pc, #456]	@ (8003af4 <main+0xe80>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	635a      	str	r2, [r3, #52]	@ 0x34
 		 	 				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800392e:	2100      	movs	r1, #0
 8003930:	4870      	ldr	r0, [pc, #448]	@ (8003af4 <main+0xe80>)
 8003932:	f004 f917 	bl	8007b64 <HAL_TIM_PWM_Start>
 		 	 				break;
 8003936:	e092      	b.n	8003a5e <main+0xdea>

 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 8003938:	2001      	movs	r0, #1
 800393a:	f7fe ff7b 	bl	8002834 <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 800393e:	486a      	ldr	r0, [pc, #424]	@ (8003ae8 <main+0xe74>)
 8003940:	f7fe ff9e 	bl	8002880 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 8003944:	2201      	movs	r2, #1
 8003946:	2100      	movs	r1, #0
 8003948:	486b      	ldr	r0, [pc, #428]	@ (8003af8 <main+0xe84>)
 800394a:	f7fe ffc8 	bl	80028de <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800394e:	2100      	movs	r1, #0
 8003950:	4868      	ldr	r0, [pc, #416]	@ (8003af4 <main+0xe80>)
 8003952:	f004 fa01 	bl	8007d58 <HAL_TIM_PWM_Stop>
 				 	 		break;
 8003956:	e082      	b.n	8003a5e <main+0xdea>

 		 	 		case 3:
							i = 0;
 8003958:	4b68      	ldr	r3, [pc, #416]	@ (8003afc <main+0xe88>)
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
							refreshLCD = true;
 800395e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ad4 <main+0xe60>)
 8003960:	2201      	movs	r2, #1
 8003962:	701a      	strb	r2, [r3, #0]
							HAL_Delay(200);
 8003964:	20c8      	movs	r0, #200	@ 0xc8
 8003966:	f001 f9c3 	bl	8004cf0 <HAL_Delay>
							memset(buff, 0, sizeof(buff));
 800396a:	2205      	movs	r2, #5
 800396c:	2100      	movs	r1, #0
 800396e:	4864      	ldr	r0, [pc, #400]	@ (8003b00 <main+0xe8c>)
 8003970:	f006 fa8e 	bl	8009e90 <memset>
							LCD_WriteCommand(HD44780_CLEAR);
 8003974:	2001      	movs	r0, #1
 8003976:	f7fe ff5d 	bl	8002834 <LCD_WriteCommand>
							LCD_WriteText("Write Bright");
 800397a:	4862      	ldr	r0, [pc, #392]	@ (8003b04 <main+0xe90>)
 800397c:	f7fe ff80 	bl	8002880 <LCD_WriteText>
							while(1) {
								refreshLCD = true;
 8003980:	4b54      	ldr	r3, [pc, #336]	@ (8003ad4 <main+0xe60>)
 8003982:	2201      	movs	r2, #1
 8003984:	701a      	strb	r2, [r3, #0]
								symbol[0] = keypad_readkey();
 8003986:	f7fe fe13 	bl	80025b0 <keypad_readkey>
 800398a:	4603      	mov	r3, r0
 800398c:	461a      	mov	r2, r3
 800398e:	4b4e      	ldr	r3, [pc, #312]	@ (8003ac8 <main+0xe54>)
 8003990:	701a      	strb	r2, [r3, #0]
								if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 8003992:	4b4d      	ldr	r3, [pc, #308]	@ (8003ac8 <main+0xe54>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b2f      	cmp	r3, #47	@ 0x2f
 8003998:	d922      	bls.n	80039e0 <main+0xd6c>
 800399a:	4b4b      	ldr	r3, [pc, #300]	@ (8003ac8 <main+0xe54>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b39      	cmp	r3, #57	@ 0x39
 80039a0:	d81e      	bhi.n	80039e0 <main+0xd6c>
 80039a2:	4b56      	ldr	r3, [pc, #344]	@ (8003afc <main+0xe88>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	d81a      	bhi.n	80039e0 <main+0xd6c>
									buff[i] = symbol[0];
 80039aa:	4b54      	ldr	r3, [pc, #336]	@ (8003afc <main+0xe88>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a46      	ldr	r2, [pc, #280]	@ (8003ac8 <main+0xe54>)
 80039b0:	7811      	ldrb	r1, [r2, #0]
 80039b2:	4a53      	ldr	r2, [pc, #332]	@ (8003b00 <main+0xe8c>)
 80039b4:	54d1      	strb	r1, [r2, r3]
									i++;
 80039b6:	4b51      	ldr	r3, [pc, #324]	@ (8003afc <main+0xe88>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3301      	adds	r3, #1
 80039bc:	4a4f      	ldr	r2, [pc, #316]	@ (8003afc <main+0xe88>)
 80039be:	6013      	str	r3, [r2, #0]
									buff[i] = '\0';
 80039c0:	4b4e      	ldr	r3, [pc, #312]	@ (8003afc <main+0xe88>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a4e      	ldr	r2, [pc, #312]	@ (8003b00 <main+0xe8c>)
 80039c6:	2100      	movs	r1, #0
 80039c8:	54d1      	strb	r1, [r2, r3]
									LCD_WriteCommand(HD44780_CLEAR);
 80039ca:	2001      	movs	r0, #1
 80039cc:	f7fe ff32 	bl	8002834 <LCD_WriteCommand>
									LCD_WriteText("Brightness: ");
 80039d0:	484d      	ldr	r0, [pc, #308]	@ (8003b08 <main+0xe94>)
 80039d2:	f7fe ff55 	bl	8002880 <LCD_WriteText>
									LCD_WriteTextXY(buff, 0, 1);
 80039d6:	2201      	movs	r2, #1
 80039d8:	2100      	movs	r1, #0
 80039da:	4849      	ldr	r0, [pc, #292]	@ (8003b00 <main+0xe8c>)
 80039dc:	f7fe ff7f 	bl	80028de <LCD_WriteTextXY>
								}
								HAL_Delay(200);
 80039e0:	20c8      	movs	r0, #200	@ 0xc8
 80039e2:	f001 f985 	bl	8004cf0 <HAL_Delay>
								symbol[0] = keypad_readkey();
 80039e6:	f7fe fde3 	bl	80025b0 <keypad_readkey>
 80039ea:	4603      	mov	r3, r0
 80039ec:	461a      	mov	r2, r3
 80039ee:	4b36      	ldr	r3, [pc, #216]	@ (8003ac8 <main+0xe54>)
 80039f0:	701a      	strb	r2, [r3, #0]
								if(symbol[0] == '*') {
 80039f2:	4b35      	ldr	r3, [pc, #212]	@ (8003ac8 <main+0xe54>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80039f8:	d123      	bne.n	8003a42 <main+0xdce>
									brightnessGarage = atoi(buff)*10;
 80039fa:	4841      	ldr	r0, [pc, #260]	@ (8003b00 <main+0xe8c>)
 80039fc:	f006 f98c 	bl	8009d18 <atoi>
 8003a00:	4602      	mov	r2, r0
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	4b38      	ldr	r3, [pc, #224]	@ (8003af0 <main+0xe7c>)
 8003a0e:	601a      	str	r2, [r3, #0]
									if(brightnessGarage >= 1000) {
 8003a10:	4b37      	ldr	r3, [pc, #220]	@ (8003af0 <main+0xe7c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a18:	db03      	blt.n	8003a22 <main+0xdae>
										brightnessGarage = 999;
 8003a1a:	4b35      	ldr	r3, [pc, #212]	@ (8003af0 <main+0xe7c>)
 8003a1c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003a20:	601a      	str	r2, [r3, #0]
									}
								   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 8003a22:	4b33      	ldr	r3, [pc, #204]	@ (8003af0 <main+0xe7c>)
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	4b33      	ldr	r3, [pc, #204]	@ (8003af4 <main+0xe80>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	635a      	str	r2, [r3, #52]	@ 0x34
									act_menu = menuGarageLighting;
 8003a2c:	4b27      	ldr	r3, [pc, #156]	@ (8003acc <main+0xe58>)
 8003a2e:	4a2b      	ldr	r2, [pc, #172]	@ (8003adc <main+0xe68>)
 8003a30:	601a      	str	r2, [r3, #0]
									position = 1;
 8003a32:	4b29      	ldr	r3, [pc, #164]	@ (8003ad8 <main+0xe64>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	701a      	strb	r2, [r3, #0]
									max_pos = 3;
 8003a38:	4b29      	ldr	r3, [pc, #164]	@ (8003ae0 <main+0xe6c>)
 8003a3a:	2203      	movs	r2, #3
 8003a3c:	701a      	strb	r2, [r3, #0]
									break;
 8003a3e:	bf00      	nop
								}
								HAL_Delay(100);
							}
							break;
 8003a40:	e00d      	b.n	8003a5e <main+0xdea>
								HAL_Delay(100);
 8003a42:	2064      	movs	r0, #100	@ 0x64
 8003a44:	f001 f954 	bl	8004cf0 <HAL_Delay>
								refreshLCD = true;
 8003a48:	e79a      	b.n	8003980 <main+0xd0c>
 		 	 		default: act_menu = menuGarage, position = 1, max_pos = 2; break;
 8003a4a:	4b20      	ldr	r3, [pc, #128]	@ (8003acc <main+0xe58>)
 8003a4c:	4a20      	ldr	r2, [pc, #128]	@ (8003ad0 <main+0xe5c>)
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	4b21      	ldr	r3, [pc, #132]	@ (8003ad8 <main+0xe64>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]
 8003a56:	4b22      	ldr	r3, [pc, #136]	@ (8003ae0 <main+0xe6c>)
 8003a58:	2202      	movs	r2, #2
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	bf00      	nop
 		 	 	  switch (position){
 8003a5e:	e071      	b.n	8003b44 <main+0xed0>
 		 	 	  }
			}
 			else if(symbol[0] == '*' && act_menu == menuGarageShutter) {
 8003a60:	4b19      	ldr	r3, [pc, #100]	@ (8003ac8 <main+0xe54>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a66:	d16d      	bne.n	8003b44 <main+0xed0>
 8003a68:	4b18      	ldr	r3, [pc, #96]	@ (8003acc <main+0xe58>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ae4 <main+0xe70>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d168      	bne.n	8003b44 <main+0xed0>
 						refreshLCD = true;
 8003a72:	4b18      	ldr	r3, [pc, #96]	@ (8003ad4 <main+0xe60>)
 8003a74:	2201      	movs	r2, #1
 8003a76:	701a      	strb	r2, [r3, #0]
 						switch(position) {
 8003a78:	4b17      	ldr	r3, [pc, #92]	@ (8003ad8 <main+0xe64>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d002      	beq.n	8003a86 <main+0xe12>
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d047      	beq.n	8003b14 <main+0xea0>
 8003a84:	e05e      	b.n	8003b44 <main+0xed0>
 							case 1:
 								__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 500);
 8003a86:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab8 <main+0xe44>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003a8e:	635a      	str	r2, [r3, #52]	@ 0x34
 								HAL_Delay(500);
 8003a90:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003a94:	f001 f92c 	bl	8004cf0 <HAL_Delay>
 							   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 8003a98:	4b07      	ldr	r3, [pc, #28]	@ (8003ab8 <main+0xe44>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	635a      	str	r2, [r3, #52]	@ 0x34
 							  garageShutter= true;
 8003aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b0c <main+0xe98>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	701a      	strb	r2, [r3, #0]
 							   LCD_WriteText("Shutter");
 8003aa6:	4806      	ldr	r0, [pc, #24]	@ (8003ac0 <main+0xe4c>)
 8003aa8:	f7fe feea 	bl	8002880 <LCD_WriteText>
 							   LCD_WriteTextXY("is lowering",0,1);
 8003aac:	2201      	movs	r2, #1
 8003aae:	2100      	movs	r1, #0
 8003ab0:	4817      	ldr	r0, [pc, #92]	@ (8003b10 <main+0xe9c>)
 8003ab2:	f7fe ff14 	bl	80028de <LCD_WriteTextXY>
 							   break;
 8003ab6:	e045      	b.n	8003b44 <main+0xed0>
 8003ab8:	20000310 	.word	0x20000310
 8003abc:	20000279 	.word	0x20000279
 8003ac0:	0800aa20 	.word	0x0800aa20
 8003ac4:	0800aa34 	.word	0x0800aa34
 8003ac8:	2000020c 	.word	0x2000020c
 8003acc:	20000118 	.word	0x20000118
 8003ad0:	200000d8 	.word	0x200000d8
 8003ad4:	20000271 	.word	0x20000271
 8003ad8:	20000054 	.word	0x20000054
 8003adc:	200000e8 	.word	0x200000e8
 8003ae0:	20000055 	.word	0x20000055
 8003ae4:	200000f8 	.word	0x200000f8
 8003ae8:	0800a9f8 	.word	0x0800a9f8
 8003aec:	0800a9e0 	.word	0x0800a9e0
 8003af0:	20000124 	.word	0x20000124
 8003af4:	2000035c 	.word	0x2000035c
 8003af8:	0800a9ec 	.word	0x0800a9ec
 8003afc:	2000027c 	.word	0x2000027c
 8003b00:	20000210 	.word	0x20000210
 8003b04:	0800aa00 	.word	0x0800aa00
 8003b08:	0800aa10 	.word	0x0800aa10
 8003b0c:	2000027a 	.word	0x2000027a
 8003b10:	0800aa28 	.word	0x0800aa28
 							case 2:
 								__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 2000);
 8003b14:	4b17      	ldr	r3, [pc, #92]	@ (8003b74 <main+0xf00>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003b1c:	635a      	str	r2, [r3, #52]	@ 0x34
 								HAL_Delay(500);
 8003b1e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003b22:	f001 f8e5 	bl	8004cf0 <HAL_Delay>
 								__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 8003b26:	4b13      	ldr	r3, [pc, #76]	@ (8003b74 <main+0xf00>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	635a      	str	r2, [r3, #52]	@ 0x34
 								garageShutter = false;
 8003b2e:	4b12      	ldr	r3, [pc, #72]	@ (8003b78 <main+0xf04>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	701a      	strb	r2, [r3, #0]
 								LCD_WriteText("Shutter");
 8003b34:	4811      	ldr	r0, [pc, #68]	@ (8003b7c <main+0xf08>)
 8003b36:	f7fe fea3 	bl	8002880 <LCD_WriteText>
 								LCD_WriteTextXY("go up",0,1);
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	4810      	ldr	r0, [pc, #64]	@ (8003b80 <main+0xf0c>)
 8003b40:	f7fe fecd 	bl	80028de <LCD_WriteTextXY>
 						}
 				}

 	if (symbol[0] == '#')
 8003b44:	4b0f      	ldr	r3, [pc, #60]	@ (8003b84 <main+0xf10>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b23      	cmp	r3, #35	@ 0x23
 8003b4a:	d10b      	bne.n	8003b64 <main+0xef0>
 	{
 		refreshLCD = true;
 8003b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b88 <main+0xf14>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	701a      	strb	r2, [r3, #0]
 		act_menu = mainmenu;
 8003b52:	4b0e      	ldr	r3, [pc, #56]	@ (8003b8c <main+0xf18>)
 8003b54:	4a0e      	ldr	r2, [pc, #56]	@ (8003b90 <main+0xf1c>)
 8003b56:	601a      	str	r2, [r3, #0]
 		position = 1;
 8003b58:	4b0e      	ldr	r3, [pc, #56]	@ (8003b94 <main+0xf20>)
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	701a      	strb	r2, [r3, #0]
 		max_pos = 4;
 8003b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003b98 <main+0xf24>)
 8003b60:	2204      	movs	r2, #4
 8003b62:	701a      	strb	r2, [r3, #0]
 	}

 	HAL_Delay(500);
 8003b64:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003b68:	f001 f8c2 	bl	8004cf0 <HAL_Delay>

 	////////////////////////////////////////////////////////////////////////////////////
 	for (int i = 0; i < RX_BUFFER_SIZE; i++) {
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	607b      	str	r3, [r7, #4]
 8003b70:	e020      	b.n	8003bb4 <main+0xf40>
 8003b72:	bf00      	nop
 8003b74:	20000310 	.word	0x20000310
 8003b78:	2000027a 	.word	0x2000027a
 8003b7c:	0800aa20 	.word	0x0800aa20
 8003b80:	0800aa34 	.word	0x0800aa34
 8003b84:	2000020c 	.word	0x2000020c
 8003b88:	20000271 	.word	0x20000271
 8003b8c:	20000118 	.word	0x20000118
 8003b90:	20000058 	.word	0x20000058
 8003b94:	20000054 	.word	0x20000054
 8003b98:	20000055 	.word	0x20000055
 	    received[i] = rxBuffer[i]; // Kopiuj dane
 8003b9c:	4aa5      	ldr	r2, [pc, #660]	@ (8003e34 <main+0x11c0>)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	7819      	ldrb	r1, [r3, #0]
 8003ba4:	4aa4      	ldr	r2, [pc, #656]	@ (8003e38 <main+0x11c4>)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4413      	add	r3, r2
 8003baa:	460a      	mov	r2, r1
 8003bac:	701a      	strb	r2, [r3, #0]
 	for (int i = 0; i < RX_BUFFER_SIZE; i++) {
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	607b      	str	r3, [r7, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	ddf0      	ble.n	8003b9c <main+0xf28>
 	}
 	received[RX_BUFFER_SIZE] = '\0'; // Dodaj znak końca stringa
 8003bba:	4b9f      	ldr	r3, [pc, #636]	@ (8003e38 <main+0x11c4>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	711a      	strb	r2, [r3, #4]
 	//Wyłączenie światła w kuchnii
 	if (strcmp(received, "LK00") == 0 && strcmp(lastMessage, "LK00") != 0) {
 8003bc0:	499e      	ldr	r1, [pc, #632]	@ (8003e3c <main+0x11c8>)
 8003bc2:	489d      	ldr	r0, [pc, #628]	@ (8003e38 <main+0x11c4>)
 8003bc4:	f7fc fb24 	bl	8000210 <strcmp>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d114      	bne.n	8003bf8 <main+0xf84>
 8003bce:	499b      	ldr	r1, [pc, #620]	@ (8003e3c <main+0x11c8>)
 8003bd0:	489b      	ldr	r0, [pc, #620]	@ (8003e40 <main+0x11cc>)
 8003bd2:	f7fc fb1d 	bl	8000210 <strcmp>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00d      	beq.n	8003bf8 <main+0xf84>
 	    sendBluetoothData("1");
 8003bdc:	4899      	ldr	r0, [pc, #612]	@ (8003e44 <main+0x11d0>)
 8003bde:	f7fe ffb1 	bl	8002b44 <sendBluetoothData>
 	    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8003be2:	2108      	movs	r1, #8
 8003be4:	4898      	ldr	r0, [pc, #608]	@ (8003e48 <main+0x11d4>)
 8003be6:	f004 f8b7 	bl	8007d58 <HAL_TIM_PWM_Stop>
 	    strcpy(lastMessage, "LK00");
 8003bea:	4b95      	ldr	r3, [pc, #596]	@ (8003e40 <main+0x11cc>)
 8003bec:	4a93      	ldr	r2, [pc, #588]	@ (8003e3c <main+0x11c8>)
 8003bee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bf2:	6018      	str	r0, [r3, #0]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	7019      	strb	r1, [r3, #0]
 	}
 	//Włączenie światła w kuchnii
 	if (strcmp(received, "LK01") == 0 && strcmp(lastMessage, "LK01") != 0) {
 8003bf8:	4994      	ldr	r1, [pc, #592]	@ (8003e4c <main+0x11d8>)
 8003bfa:	488f      	ldr	r0, [pc, #572]	@ (8003e38 <main+0x11c4>)
 8003bfc:	f7fc fb08 	bl	8000210 <strcmp>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d119      	bne.n	8003c3a <main+0xfc6>
 8003c06:	4991      	ldr	r1, [pc, #580]	@ (8003e4c <main+0x11d8>)
 8003c08:	488d      	ldr	r0, [pc, #564]	@ (8003e40 <main+0x11cc>)
 8003c0a:	f7fc fb01 	bl	8000210 <strcmp>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d012      	beq.n	8003c3a <main+0xfc6>
 	 	sendBluetoothData("2");
 8003c14:	488e      	ldr	r0, [pc, #568]	@ (8003e50 <main+0x11dc>)
 8003c16:	f7fe ff95 	bl	8002b44 <sendBluetoothData>
 	 	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, brightnessKitchen);
 8003c1a:	4b8e      	ldr	r3, [pc, #568]	@ (8003e54 <main+0x11e0>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4b8a      	ldr	r3, [pc, #552]	@ (8003e48 <main+0x11d4>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	63da      	str	r2, [r3, #60]	@ 0x3c
 	 	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003c24:	2108      	movs	r1, #8
 8003c26:	4888      	ldr	r0, [pc, #544]	@ (8003e48 <main+0x11d4>)
 8003c28:	f003 ff9c 	bl	8007b64 <HAL_TIM_PWM_Start>
 	 	strcpy(lastMessage, "LK01");
 8003c2c:	4b84      	ldr	r3, [pc, #528]	@ (8003e40 <main+0x11cc>)
 8003c2e:	4a87      	ldr	r2, [pc, #540]	@ (8003e4c <main+0x11d8>)
 8003c30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c34:	6018      	str	r0, [r3, #0]
 8003c36:	3304      	adds	r3, #4
 8003c38:	7019      	strb	r1, [r3, #0]
 	}
 	//Wyłączenie światła w salonie
 	if (strcmp(received, "LL00") == 0 && strcmp(lastMessage, "LL00") != 0) {
 8003c3a:	4987      	ldr	r1, [pc, #540]	@ (8003e58 <main+0x11e4>)
 8003c3c:	487e      	ldr	r0, [pc, #504]	@ (8003e38 <main+0x11c4>)
 8003c3e:	f7fc fae7 	bl	8000210 <strcmp>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d114      	bne.n	8003c72 <main+0xffe>
 8003c48:	4983      	ldr	r1, [pc, #524]	@ (8003e58 <main+0x11e4>)
 8003c4a:	487d      	ldr	r0, [pc, #500]	@ (8003e40 <main+0x11cc>)
 8003c4c:	f7fc fae0 	bl	8000210 <strcmp>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00d      	beq.n	8003c72 <main+0xffe>
 	 	sendBluetoothData("3");
 8003c56:	4881      	ldr	r0, [pc, #516]	@ (8003e5c <main+0x11e8>)
 8003c58:	f7fe ff74 	bl	8002b44 <sendBluetoothData>
 	 	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	4880      	ldr	r0, [pc, #512]	@ (8003e60 <main+0x11ec>)
 8003c60:	f004 f87a 	bl	8007d58 <HAL_TIM_PWM_Stop>
 	 	strcpy(lastMessage, "LL00");
 8003c64:	4b76      	ldr	r3, [pc, #472]	@ (8003e40 <main+0x11cc>)
 8003c66:	4a7c      	ldr	r2, [pc, #496]	@ (8003e58 <main+0x11e4>)
 8003c68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c6c:	6018      	str	r0, [r3, #0]
 8003c6e:	3304      	adds	r3, #4
 8003c70:	7019      	strb	r1, [r3, #0]
 	}
 	//Włączenie światła w salonie
 	if (strcmp(received, "LL01") == 0 && strcmp(lastMessage, "LL01") != 0) {
 8003c72:	497c      	ldr	r1, [pc, #496]	@ (8003e64 <main+0x11f0>)
 8003c74:	4870      	ldr	r0, [pc, #448]	@ (8003e38 <main+0x11c4>)
 8003c76:	f7fc facb 	bl	8000210 <strcmp>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d119      	bne.n	8003cb4 <main+0x1040>
 8003c80:	4978      	ldr	r1, [pc, #480]	@ (8003e64 <main+0x11f0>)
 8003c82:	486f      	ldr	r0, [pc, #444]	@ (8003e40 <main+0x11cc>)
 8003c84:	f7fc fac4 	bl	8000210 <strcmp>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d012      	beq.n	8003cb4 <main+0x1040>
 	 	sendBluetoothData("4");
 8003c8e:	4876      	ldr	r0, [pc, #472]	@ (8003e68 <main+0x11f4>)
 8003c90:	f7fe ff58 	bl	8002b44 <sendBluetoothData>
 	 	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 8003c94:	4b75      	ldr	r3, [pc, #468]	@ (8003e6c <main+0x11f8>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4b71      	ldr	r3, [pc, #452]	@ (8003e60 <main+0x11ec>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	635a      	str	r2, [r3, #52]	@ 0x34
 	 	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	486f      	ldr	r0, [pc, #444]	@ (8003e60 <main+0x11ec>)
 8003ca2:	f003 ff5f 	bl	8007b64 <HAL_TIM_PWM_Start>
 	 	strcpy(lastMessage, "LL01");
 8003ca6:	4b66      	ldr	r3, [pc, #408]	@ (8003e40 <main+0x11cc>)
 8003ca8:	4a6e      	ldr	r2, [pc, #440]	@ (8003e64 <main+0x11f0>)
 8003caa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cae:	6018      	str	r0, [r3, #0]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	7019      	strb	r1, [r3, #0]
 	}
 	//Wyłączenie światła w garażu
 	if (strcmp(received, "LG00") == 0 && strcmp(lastMessage, "LG00") != 0) {
 8003cb4:	496e      	ldr	r1, [pc, #440]	@ (8003e70 <main+0x11fc>)
 8003cb6:	4860      	ldr	r0, [pc, #384]	@ (8003e38 <main+0x11c4>)
 8003cb8:	f7fc faaa 	bl	8000210 <strcmp>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d114      	bne.n	8003cec <main+0x1078>
 8003cc2:	496b      	ldr	r1, [pc, #428]	@ (8003e70 <main+0x11fc>)
 8003cc4:	485e      	ldr	r0, [pc, #376]	@ (8003e40 <main+0x11cc>)
 8003cc6:	f7fc faa3 	bl	8000210 <strcmp>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00d      	beq.n	8003cec <main+0x1078>
 	 	sendBluetoothData("5");
 8003cd0:	4868      	ldr	r0, [pc, #416]	@ (8003e74 <main+0x1200>)
 8003cd2:	f7fe ff37 	bl	8002b44 <sendBluetoothData>
 	 	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4867      	ldr	r0, [pc, #412]	@ (8003e78 <main+0x1204>)
 8003cda:	f004 f83d 	bl	8007d58 <HAL_TIM_PWM_Stop>
 	 	strcpy(lastMessage, "LG00");
 8003cde:	4b58      	ldr	r3, [pc, #352]	@ (8003e40 <main+0x11cc>)
 8003ce0:	4a63      	ldr	r2, [pc, #396]	@ (8003e70 <main+0x11fc>)
 8003ce2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ce6:	6018      	str	r0, [r3, #0]
 8003ce8:	3304      	adds	r3, #4
 8003cea:	7019      	strb	r1, [r3, #0]
 	}
 	//Włączenie światła w garażu
 	if (strcmp(received, "LG01") == 0 && strcmp(lastMessage, "LG01") != 0) {
 8003cec:	4963      	ldr	r1, [pc, #396]	@ (8003e7c <main+0x1208>)
 8003cee:	4852      	ldr	r0, [pc, #328]	@ (8003e38 <main+0x11c4>)
 8003cf0:	f7fc fa8e 	bl	8000210 <strcmp>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d119      	bne.n	8003d2e <main+0x10ba>
 8003cfa:	4960      	ldr	r1, [pc, #384]	@ (8003e7c <main+0x1208>)
 8003cfc:	4850      	ldr	r0, [pc, #320]	@ (8003e40 <main+0x11cc>)
 8003cfe:	f7fc fa87 	bl	8000210 <strcmp>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d012      	beq.n	8003d2e <main+0x10ba>
 	 	sendBluetoothData("6");
 8003d08:	485d      	ldr	r0, [pc, #372]	@ (8003e80 <main+0x120c>)
 8003d0a:	f7fe ff1b 	bl	8002b44 <sendBluetoothData>
 	 	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 8003d0e:	4b5d      	ldr	r3, [pc, #372]	@ (8003e84 <main+0x1210>)
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	4b59      	ldr	r3, [pc, #356]	@ (8003e78 <main+0x1204>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	635a      	str	r2, [r3, #52]	@ 0x34
 	 	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003d18:	2100      	movs	r1, #0
 8003d1a:	4857      	ldr	r0, [pc, #348]	@ (8003e78 <main+0x1204>)
 8003d1c:	f003 ff22 	bl	8007b64 <HAL_TIM_PWM_Start>
 	 	strcpy(lastMessage, "LG01");
 8003d20:	4b47      	ldr	r3, [pc, #284]	@ (8003e40 <main+0x11cc>)
 8003d22:	4a56      	ldr	r2, [pc, #344]	@ (8003e7c <main+0x1208>)
 8003d24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d28:	6018      	str	r0, [r3, #0]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	7019      	strb	r1, [r3, #0]
 	}

 	if(rxBuffer[0]=='1')  //Suwak jasności kuchnia
 8003d2e:	4b41      	ldr	r3, [pc, #260]	@ (8003e34 <main+0x11c0>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b31      	cmp	r3, #49	@ 0x31
 8003d34:	d119      	bne.n	8003d6a <main+0x10f6>
 	{
 		brightnessKitchen = (received[1] - '0') * 100
 8003d36:	4b40      	ldr	r3, [pc, #256]	@ (8003e38 <main+0x11c4>)
 8003d38:	785b      	ldrb	r3, [r3, #1]
 8003d3a:	3b30      	subs	r3, #48	@ 0x30
 8003d3c:	2264      	movs	r2, #100	@ 0x64
 8003d3e:	fb02 f103 	mul.w	r1, r2, r3
 		                  + (received[2] - '0') * 10
 8003d42:	4b3d      	ldr	r3, [pc, #244]	@ (8003e38 <main+0x11c4>)
 8003d44:	789b      	ldrb	r3, [r3, #2]
 8003d46:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	18ca      	adds	r2, r1, r3
 		                  + (received[3] - '0');
 8003d54:	4b38      	ldr	r3, [pc, #224]	@ (8003e38 <main+0x11c4>)
 8003d56:	78db      	ldrb	r3, [r3, #3]
 8003d58:	3b30      	subs	r3, #48	@ 0x30
 8003d5a:	4413      	add	r3, r2
 		brightnessKitchen = (received[1] - '0') * 100
 8003d5c:	4a3d      	ldr	r2, [pc, #244]	@ (8003e54 <main+0x11e0>)
 8003d5e:	6013      	str	r3, [r2, #0]
 		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, brightnessKitchen);
 8003d60:	4b3c      	ldr	r3, [pc, #240]	@ (8003e54 <main+0x11e0>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	4b38      	ldr	r3, [pc, #224]	@ (8003e48 <main+0x11d4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	63da      	str	r2, [r3, #60]	@ 0x3c
 	}

 	if(received[0]=='2')	//Suwak jasności salon
 8003d6a:	4b33      	ldr	r3, [pc, #204]	@ (8003e38 <main+0x11c4>)
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b32      	cmp	r3, #50	@ 0x32
 8003d70:	d119      	bne.n	8003da6 <main+0x1132>
 	{
 		brightnessLivingroom = (received[1] - '0') * 100
 8003d72:	4b31      	ldr	r3, [pc, #196]	@ (8003e38 <main+0x11c4>)
 8003d74:	785b      	ldrb	r3, [r3, #1]
 8003d76:	3b30      	subs	r3, #48	@ 0x30
 8003d78:	2264      	movs	r2, #100	@ 0x64
 8003d7a:	fb02 f103 	mul.w	r1, r2, r3
                 + (received[2] - '0') * 10
 8003d7e:	4b2e      	ldr	r3, [pc, #184]	@ (8003e38 <main+0x11c4>)
 8003d80:	789b      	ldrb	r3, [r3, #2]
 8003d82:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	18ca      	adds	r2, r1, r3
                 + (received[3] - '0');
 8003d90:	4b29      	ldr	r3, [pc, #164]	@ (8003e38 <main+0x11c4>)
 8003d92:	78db      	ldrb	r3, [r3, #3]
 8003d94:	3b30      	subs	r3, #48	@ 0x30
 8003d96:	4413      	add	r3, r2
 		brightnessLivingroom = (received[1] - '0') * 100
 8003d98:	4a34      	ldr	r2, [pc, #208]	@ (8003e6c <main+0x11f8>)
 8003d9a:	6013      	str	r3, [r2, #0]
 		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 8003d9c:	4b33      	ldr	r3, [pc, #204]	@ (8003e6c <main+0x11f8>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4b2f      	ldr	r3, [pc, #188]	@ (8003e60 <main+0x11ec>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	635a      	str	r2, [r3, #52]	@ 0x34
 	}
 	if(received[0]=='3')	//Suwak jasności garaż
 8003da6:	4b24      	ldr	r3, [pc, #144]	@ (8003e38 <main+0x11c4>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b33      	cmp	r3, #51	@ 0x33
 8003dac:	d119      	bne.n	8003de2 <main+0x116e>
 	{
 		brightnessGarage = (received[1] - '0') * 100
 8003dae:	4b22      	ldr	r3, [pc, #136]	@ (8003e38 <main+0x11c4>)
 8003db0:	785b      	ldrb	r3, [r3, #1]
 8003db2:	3b30      	subs	r3, #48	@ 0x30
 8003db4:	2264      	movs	r2, #100	@ 0x64
 8003db6:	fb02 f103 	mul.w	r1, r2, r3
                 + (received[2] - '0') * 10
 8003dba:	4b1f      	ldr	r3, [pc, #124]	@ (8003e38 <main+0x11c4>)
 8003dbc:	789b      	ldrb	r3, [r3, #2]
 8003dbe:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	18ca      	adds	r2, r1, r3
                 + (received[3] - '0');
 8003dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8003e38 <main+0x11c4>)
 8003dce:	78db      	ldrb	r3, [r3, #3]
 8003dd0:	3b30      	subs	r3, #48	@ 0x30
 8003dd2:	4413      	add	r3, r2
 		brightnessGarage = (received[1] - '0') * 100
 8003dd4:	4a2b      	ldr	r2, [pc, #172]	@ (8003e84 <main+0x1210>)
 8003dd6:	6013      	str	r3, [r2, #0]
 		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 8003dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8003e84 <main+0x1210>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	4b26      	ldr	r3, [pc, #152]	@ (8003e78 <main+0x1204>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	635a      	str	r2, [r3, #52]	@ 0x34
 	}
 	//Włączenie alarmu
 	if (strcmp(received, "AL01") == 0 && strcmp(lastMessage, "AL01") != 0)
 8003de2:	4929      	ldr	r1, [pc, #164]	@ (8003e88 <main+0x1214>)
 8003de4:	4814      	ldr	r0, [pc, #80]	@ (8003e38 <main+0x11c4>)
 8003de6:	f7fc fa13 	bl	8000210 <strcmp>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d112      	bne.n	8003e16 <main+0x11a2>
 8003df0:	4925      	ldr	r1, [pc, #148]	@ (8003e88 <main+0x1214>)
 8003df2:	4813      	ldr	r0, [pc, #76]	@ (8003e40 <main+0x11cc>)
 8003df4:	f7fc fa0c 	bl	8000210 <strcmp>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00b      	beq.n	8003e16 <main+0x11a2>
 	{
 		alarm = true;
 8003dfe:	4b23      	ldr	r3, [pc, #140]	@ (8003e8c <main+0x1218>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	701a      	strb	r2, [r3, #0]
		PIR_detected = false;
 8003e04:	4b22      	ldr	r3, [pc, #136]	@ (8003e90 <main+0x121c>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	701a      	strb	r2, [r3, #0]
		alarmLED = false;
 8003e0a:	4b22      	ldr	r3, [pc, #136]	@ (8003e94 <main+0x1220>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim2);
 8003e10:	4819      	ldr	r0, [pc, #100]	@ (8003e78 <main+0x1204>)
 8003e12:	f003 fd9f 	bl	8007954 <HAL_TIM_Base_Start_IT>
 	}
 	//Wyłączenie alarmu
 	if (strcmp(received, "AL00") == 0 && strcmp(lastMessage, "AL00") != 0)
 8003e16:	4920      	ldr	r1, [pc, #128]	@ (8003e98 <main+0x1224>)
 8003e18:	4807      	ldr	r0, [pc, #28]	@ (8003e38 <main+0x11c4>)
 8003e1a:	f7fc f9f9 	bl	8000210 <strcmp>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d14b      	bne.n	8003ebc <main+0x1248>
 8003e24:	491c      	ldr	r1, [pc, #112]	@ (8003e98 <main+0x1224>)
 8003e26:	4806      	ldr	r0, [pc, #24]	@ (8003e40 <main+0x11cc>)
 8003e28:	f7fc f9f2 	bl	8000210 <strcmp>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d044      	beq.n	8003ebc <main+0x1248>
 8003e32:	e033      	b.n	8003e9c <main+0x1228>
 8003e34:	20000258 	.word	0x20000258
 8003e38:	20000264 	.word	0x20000264
 8003e3c:	0800aa74 	.word	0x0800aa74
 8003e40:	2000026c 	.word	0x2000026c
 8003e44:	0800aa7c 	.word	0x0800aa7c
 8003e48:	200003a8 	.word	0x200003a8
 8003e4c:	0800aa80 	.word	0x0800aa80
 8003e50:	0800aa88 	.word	0x0800aa88
 8003e54:	20000120 	.word	0x20000120
 8003e58:	0800aa8c 	.word	0x0800aa8c
 8003e5c:	0800aa94 	.word	0x0800aa94
 8003e60:	200003f4 	.word	0x200003f4
 8003e64:	0800aa98 	.word	0x0800aa98
 8003e68:	0800aaa0 	.word	0x0800aaa0
 8003e6c:	2000011c 	.word	0x2000011c
 8003e70:	0800aaa4 	.word	0x0800aaa4
 8003e74:	0800aaac 	.word	0x0800aaac
 8003e78:	2000035c 	.word	0x2000035c
 8003e7c:	0800aab0 	.word	0x0800aab0
 8003e80:	0800aab8 	.word	0x0800aab8
 8003e84:	20000124 	.word	0x20000124
 8003e88:	0800aabc 	.word	0x0800aabc
 8003e8c:	20000272 	.word	0x20000272
 8003e90:	20000277 	.word	0x20000277
 8003e94:	20000273 	.word	0x20000273
 8003e98:	0800aac4 	.word	0x0800aac4
 	{
 		alarm = false;
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003ecc <main+0x1258>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	701a      	strb	r2, [r3, #0]
		PIR_detected = false;
 8003ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed0 <main+0x125c>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]
		alarmLED = false;
 8003ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed4 <main+0x1260>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8003eae:	2108      	movs	r1, #8
 8003eb0:	4809      	ldr	r0, [pc, #36]	@ (8003ed8 <main+0x1264>)
 8003eb2:	f003 ff51 	bl	8007d58 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop_IT(&htim2);
 8003eb6:	4808      	ldr	r0, [pc, #32]	@ (8003ed8 <main+0x1264>)
 8003eb8:	f003 fdc4 	bl	8007a44 <HAL_TIM_Base_Stop_IT>
 	////////////////////////////////////////////////////////////////////////////////////
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

 	sendBluetoothData("70");
 8003ebc:	4807      	ldr	r0, [pc, #28]	@ (8003edc <main+0x1268>)
 8003ebe:	f7fe fe41 	bl	8002b44 <sendBluetoothData>
 	sendBluetoothData("23");
 8003ec2:	4807      	ldr	r0, [pc, #28]	@ (8003ee0 <main+0x126c>)
 8003ec4:	f7fe fe3e 	bl	8002b44 <sendBluetoothData>
	  if(HAL_GPIO_ReadPin(PIR_Garage_GPIO_Port, PIR_Garage_Pin) == GPIO_PIN_SET){PIR_Garage = true;}
 8003ec8:	f7fe bf11 	b.w	8002cee <main+0x7a>
 8003ecc:	20000272 	.word	0x20000272
 8003ed0:	20000277 	.word	0x20000277
 8003ed4:	20000273 	.word	0x20000273
 8003ed8:	2000035c 	.word	0x2000035c
 8003edc:	0800aacc 	.word	0x0800aacc
 8003ee0:	0800aad0 	.word	0x0800aad0

08003ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b094      	sub	sp, #80	@ 0x50
 8003ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003eea:	f107 0320 	add.w	r3, r7, #32
 8003eee:	2230      	movs	r2, #48	@ 0x30
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f005 ffcc 	bl	8009e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ef8:	f107 030c 	add.w	r3, r7, #12
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	605a      	str	r2, [r3, #4]
 8003f02:	609a      	str	r2, [r3, #8]
 8003f04:	60da      	str	r2, [r3, #12]
 8003f06:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003f08:	f001 fb8e 	bl	8005628 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f0c:	4b27      	ldr	r3, [pc, #156]	@ (8003fac <SystemClock_Config+0xc8>)
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f10:	4a26      	ldr	r2, [pc, #152]	@ (8003fac <SystemClock_Config+0xc8>)
 8003f12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f16:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f18:	4b24      	ldr	r3, [pc, #144]	@ (8003fac <SystemClock_Config+0xc8>)
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003f24:	4b22      	ldr	r3, [pc, #136]	@ (8003fb0 <SystemClock_Config+0xcc>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003f2c:	4a20      	ldr	r2, [pc, #128]	@ (8003fb0 <SystemClock_Config+0xcc>)
 8003f2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb0 <SystemClock_Config+0xcc>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003f3c:	607b      	str	r3, [r7, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003f40:	2302      	movs	r3, #2
 8003f42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f44:	2301      	movs	r3, #1
 8003f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f48:	2310      	movs	r3, #16
 8003f4a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003f50:	2300      	movs	r3, #0
 8003f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003f54:	2308      	movs	r3, #8
 8003f56:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003f58:	2348      	movs	r3, #72	@ 0x48
 8003f5a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003f60:	2303      	movs	r3, #3
 8003f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f64:	f107 0320 	add.w	r3, r7, #32
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f001 fb6d 	bl	8005648 <HAL_RCC_OscConfig>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003f74:	f000 f81e 	bl	8003fb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f78:	230f      	movs	r3, #15
 8003f7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003f84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003f8e:	f107 030c 	add.w	r3, r7, #12
 8003f92:	2102      	movs	r1, #2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f001 fdfb 	bl	8005b90 <HAL_RCC_ClockConfig>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003fa0:	f000 f808 	bl	8003fb4 <Error_Handler>
  }
}
 8003fa4:	bf00      	nop
 8003fa6:	3750      	adds	r7, #80	@ 0x50
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	40007000 	.word	0x40007000

08003fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fb8:	b672      	cpsid	i
}
 8003fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fbc:	bf00      	nop
 8003fbe:	e7fd      	b.n	8003fbc <Error_Handler+0x8>

08003fc0 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8003fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8004034 <MX_SPI4_Init+0x74>)
 8003fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8004038 <MX_SPI4_Init+0x78>)
 8003fc8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003fca:	4b1a      	ldr	r3, [pc, #104]	@ (8004034 <MX_SPI4_Init+0x74>)
 8003fcc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003fd0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003fd2:	4b18      	ldr	r3, [pc, #96]	@ (8004034 <MX_SPI4_Init+0x74>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003fd8:	4b16      	ldr	r3, [pc, #88]	@ (8004034 <MX_SPI4_Init+0x74>)
 8003fda:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003fde:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003fe0:	4b14      	ldr	r3, [pc, #80]	@ (8004034 <MX_SPI4_Init+0x74>)
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003fe6:	4b13      	ldr	r3, [pc, #76]	@ (8004034 <MX_SPI4_Init+0x74>)
 8003fe8:	2201      	movs	r2, #1
 8003fea:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003fec:	4b11      	ldr	r3, [pc, #68]	@ (8004034 <MX_SPI4_Init+0x74>)
 8003fee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ff2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8004034 <MX_SPI4_Init+0x74>)
 8003ff6:	2210      	movs	r2, #16
 8003ff8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8004034 <MX_SPI4_Init+0x74>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004000:	4b0c      	ldr	r3, [pc, #48]	@ (8004034 <MX_SPI4_Init+0x74>)
 8004002:	2200      	movs	r2, #0
 8004004:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004006:	4b0b      	ldr	r3, [pc, #44]	@ (8004034 <MX_SPI4_Init+0x74>)
 8004008:	2200      	movs	r2, #0
 800400a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 800400c:	4b09      	ldr	r3, [pc, #36]	@ (8004034 <MX_SPI4_Init+0x74>)
 800400e:	2207      	movs	r2, #7
 8004010:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004012:	4b08      	ldr	r3, [pc, #32]	@ (8004034 <MX_SPI4_Init+0x74>)
 8004014:	2200      	movs	r2, #0
 8004016:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004018:	4b06      	ldr	r3, [pc, #24]	@ (8004034 <MX_SPI4_Init+0x74>)
 800401a:	2200      	movs	r2, #0
 800401c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800401e:	4805      	ldr	r0, [pc, #20]	@ (8004034 <MX_SPI4_Init+0x74>)
 8004020:	f002 fbcc 	bl	80067bc <HAL_SPI_Init>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800402a:	f7ff ffc3 	bl	8003fb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800402e:	bf00      	nop
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	200002a8 	.word	0x200002a8
 8004038:	40013400 	.word	0x40013400

0800403c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08a      	sub	sp, #40	@ 0x28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004044:	f107 0314 	add.w	r3, r7, #20
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	605a      	str	r2, [r3, #4]
 800404e:	609a      	str	r2, [r3, #8]
 8004050:	60da      	str	r2, [r3, #12]
 8004052:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1b      	ldr	r2, [pc, #108]	@ (80040c8 <HAL_SPI_MspInit+0x8c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d12f      	bne.n	80040be <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800405e:	4b1b      	ldr	r3, [pc, #108]	@ (80040cc <HAL_SPI_MspInit+0x90>)
 8004060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004062:	4a1a      	ldr	r2, [pc, #104]	@ (80040cc <HAL_SPI_MspInit+0x90>)
 8004064:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004068:	6453      	str	r3, [r2, #68]	@ 0x44
 800406a:	4b18      	ldr	r3, [pc, #96]	@ (80040cc <HAL_SPI_MspInit+0x90>)
 800406c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004072:	613b      	str	r3, [r7, #16]
 8004074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004076:	4b15      	ldr	r3, [pc, #84]	@ (80040cc <HAL_SPI_MspInit+0x90>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407a:	4a14      	ldr	r2, [pc, #80]	@ (80040cc <HAL_SPI_MspInit+0x90>)
 800407c:	f043 0310 	orr.w	r3, r3, #16
 8004080:	6313      	str	r3, [r2, #48]	@ 0x30
 8004082:	4b12      	ldr	r3, [pc, #72]	@ (80040cc <HAL_SPI_MspInit+0x90>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800408e:	2364      	movs	r3, #100	@ 0x64
 8004090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004092:	2302      	movs	r3, #2
 8004094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800409a:	2303      	movs	r3, #3
 800409c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800409e:	2305      	movs	r3, #5
 80040a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80040a2:	f107 0314 	add.w	r3, r7, #20
 80040a6:	4619      	mov	r1, r3
 80040a8:	4809      	ldr	r0, [pc, #36]	@ (80040d0 <HAL_SPI_MspInit+0x94>)
 80040aa:	f000 ff79 	bl	8004fa0 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80040ae:	2200      	movs	r2, #0
 80040b0:	2100      	movs	r1, #0
 80040b2:	2054      	movs	r0, #84	@ 0x54
 80040b4:	f000 ff1b 	bl	8004eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80040b8:	2054      	movs	r0, #84	@ 0x54
 80040ba:	f000 ff34 	bl	8004f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80040be:	bf00      	nop
 80040c0:	3728      	adds	r7, #40	@ 0x28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40013400 	.word	0x40013400
 80040cc:	40023800 	.word	0x40023800
 80040d0:	40021000 	.word	0x40021000

080040d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80040da:	4b0f      	ldr	r3, [pc, #60]	@ (8004118 <HAL_MspInit+0x44>)
 80040dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040de:	4a0e      	ldr	r2, [pc, #56]	@ (8004118 <HAL_MspInit+0x44>)
 80040e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004118 <HAL_MspInit+0x44>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ee:	607b      	str	r3, [r7, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040f2:	4b09      	ldr	r3, [pc, #36]	@ (8004118 <HAL_MspInit+0x44>)
 80040f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f6:	4a08      	ldr	r2, [pc, #32]	@ (8004118 <HAL_MspInit+0x44>)
 80040f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80040fe:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <HAL_MspInit+0x44>)
 8004100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004106:	603b      	str	r3, [r7, #0]
 8004108:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800

0800411c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004120:	bf00      	nop
 8004122:	e7fd      	b.n	8004120 <NMI_Handler+0x4>

08004124 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004128:	bf00      	nop
 800412a:	e7fd      	b.n	8004128 <HardFault_Handler+0x4>

0800412c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004130:	bf00      	nop
 8004132:	e7fd      	b.n	8004130 <MemManage_Handler+0x4>

08004134 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004138:	bf00      	nop
 800413a:	e7fd      	b.n	8004138 <BusFault_Handler+0x4>

0800413c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004140:	bf00      	nop
 8004142:	e7fd      	b.n	8004140 <UsageFault_Handler+0x4>

08004144 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004148:	bf00      	nop
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004152:	b480      	push	{r7}
 8004154:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004156:	bf00      	nop
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004164:	bf00      	nop
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004172:	f000 fd9d 	bl	8004cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004176:	bf00      	nop
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004180:	4802      	ldr	r0, [pc, #8]	@ (800418c <TIM2_IRQHandler+0x10>)
 8004182:	f003 fe69 	bl	8007e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004186:	bf00      	nop
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	2000035c 	.word	0x2000035c

08004190 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004194:	4802      	ldr	r0, [pc, #8]	@ (80041a0 <TIM3_IRQHandler+0x10>)
 8004196:	f003 fe5f 	bl	8007e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800419a:	bf00      	nop
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	200003a8 	.word	0x200003a8

080041a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80041a8:	4802      	ldr	r0, [pc, #8]	@ (80041b4 <TIM4_IRQHandler+0x10>)
 80041aa:	f003 fe55 	bl	8007e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80041ae:	bf00      	nop
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	200003f4 	.word	0x200003f4

080041b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80041bc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80041c0:	f001 f8e6 	bl	8005390 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80041c4:	bf00      	nop
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80041cc:	4802      	ldr	r0, [pc, #8]	@ (80041d8 <SPI4_IRQHandler+0x10>)
 80041ce:	f003 f851 	bl	8007274 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80041d2:	bf00      	nop
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	200002a8 	.word	0x200002a8

080041dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041e4:	4a14      	ldr	r2, [pc, #80]	@ (8004238 <_sbrk+0x5c>)
 80041e6:	4b15      	ldr	r3, [pc, #84]	@ (800423c <_sbrk+0x60>)
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041f0:	4b13      	ldr	r3, [pc, #76]	@ (8004240 <_sbrk+0x64>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d102      	bne.n	80041fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041f8:	4b11      	ldr	r3, [pc, #68]	@ (8004240 <_sbrk+0x64>)
 80041fa:	4a12      	ldr	r2, [pc, #72]	@ (8004244 <_sbrk+0x68>)
 80041fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041fe:	4b10      	ldr	r3, [pc, #64]	@ (8004240 <_sbrk+0x64>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4413      	add	r3, r2
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	429a      	cmp	r2, r3
 800420a:	d207      	bcs.n	800421c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800420c:	f005 fe48 	bl	8009ea0 <__errno>
 8004210:	4603      	mov	r3, r0
 8004212:	220c      	movs	r2, #12
 8004214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004216:	f04f 33ff 	mov.w	r3, #4294967295
 800421a:	e009      	b.n	8004230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800421c:	4b08      	ldr	r3, [pc, #32]	@ (8004240 <_sbrk+0x64>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004222:	4b07      	ldr	r3, [pc, #28]	@ (8004240 <_sbrk+0x64>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4413      	add	r3, r2
 800422a:	4a05      	ldr	r2, [pc, #20]	@ (8004240 <_sbrk+0x64>)
 800422c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800422e:	68fb      	ldr	r3, [r7, #12]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	20050000 	.word	0x20050000
 800423c:	00000400 	.word	0x00000400
 8004240:	2000030c 	.word	0x2000030c
 8004244:	20000618 	.word	0x20000618

08004248 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800424c:	4b06      	ldr	r3, [pc, #24]	@ (8004268 <SystemInit+0x20>)
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004252:	4a05      	ldr	r2, [pc, #20]	@ (8004268 <SystemInit+0x20>)
 8004254:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004258:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800425c:	bf00      	nop
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	e000ed00 	.word	0xe000ed00

0800426c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b09a      	sub	sp, #104	@ 0x68
 8004270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004272:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	605a      	str	r2, [r3, #4]
 800427c:	609a      	str	r2, [r3, #8]
 800427e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004280:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	605a      	str	r2, [r3, #4]
 800428a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800428c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	605a      	str	r2, [r3, #4]
 8004296:	609a      	str	r2, [r3, #8]
 8004298:	60da      	str	r2, [r3, #12]
 800429a:	611a      	str	r2, [r3, #16]
 800429c:	615a      	str	r2, [r3, #20]
 800429e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80042a0:	1d3b      	adds	r3, r7, #4
 80042a2:	222c      	movs	r2, #44	@ 0x2c
 80042a4:	2100      	movs	r1, #0
 80042a6:	4618      	mov	r0, r3
 80042a8:	f005 fdf2 	bl	8009e90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80042ac:	4b43      	ldr	r3, [pc, #268]	@ (80043bc <MX_TIM1_Init+0x150>)
 80042ae:	4a44      	ldr	r2, [pc, #272]	@ (80043c0 <MX_TIM1_Init+0x154>)
 80042b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80042b2:	4b42      	ldr	r3, [pc, #264]	@ (80043bc <MX_TIM1_Init+0x150>)
 80042b4:	2247      	movs	r2, #71	@ 0x47
 80042b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042b8:	4b40      	ldr	r3, [pc, #256]	@ (80043bc <MX_TIM1_Init+0x150>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 80042be:	4b3f      	ldr	r3, [pc, #252]	@ (80043bc <MX_TIM1_Init+0x150>)
 80042c0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80042c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042c6:	4b3d      	ldr	r3, [pc, #244]	@ (80043bc <MX_TIM1_Init+0x150>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80042cc:	4b3b      	ldr	r3, [pc, #236]	@ (80043bc <MX_TIM1_Init+0x150>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042d2:	4b3a      	ldr	r3, [pc, #232]	@ (80043bc <MX_TIM1_Init+0x150>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80042d8:	4838      	ldr	r0, [pc, #224]	@ (80043bc <MX_TIM1_Init+0x150>)
 80042da:	f003 fae3 	bl	80078a4 <HAL_TIM_Base_Init>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80042e4:	f7ff fe66 	bl	8003fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80042ee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80042f2:	4619      	mov	r1, r3
 80042f4:	4831      	ldr	r0, [pc, #196]	@ (80043bc <MX_TIM1_Init+0x150>)
 80042f6:	f003 ffe3 	bl	80082c0 <HAL_TIM_ConfigClockSource>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004300:	f7ff fe58 	bl	8003fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004304:	482d      	ldr	r0, [pc, #180]	@ (80043bc <MX_TIM1_Init+0x150>)
 8004306:	f003 fbcc 	bl	8007aa2 <HAL_TIM_PWM_Init>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004310:	f7ff fe50 	bl	8003fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004314:	2300      	movs	r3, #0
 8004316:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004318:	2300      	movs	r3, #0
 800431a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800431c:	2300      	movs	r3, #0
 800431e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004320:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004324:	4619      	mov	r1, r3
 8004326:	4825      	ldr	r0, [pc, #148]	@ (80043bc <MX_TIM1_Init+0x150>)
 8004328:	f004 fc7a 	bl	8008c20 <HAL_TIMEx_MasterConfigSynchronization>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004332:	f7ff fe3f 	bl	8003fb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004336:	2360      	movs	r3, #96	@ 0x60
 8004338:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800433e:	2300      	movs	r3, #0
 8004340:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004342:	2300      	movs	r3, #0
 8004344:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004346:	2300      	movs	r3, #0
 8004348:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800434a:	2300      	movs	r3, #0
 800434c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800434e:	2300      	movs	r3, #0
 8004350:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004352:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004356:	2200      	movs	r2, #0
 8004358:	4619      	mov	r1, r3
 800435a:	4818      	ldr	r0, [pc, #96]	@ (80043bc <MX_TIM1_Init+0x150>)
 800435c:	f003 fe9c 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8004366:	f7ff fe25 	bl	8003fb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800436a:	2300      	movs	r3, #0
 800436c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800436e:	2300      	movs	r3, #0
 8004370:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004376:	2300      	movs	r3, #0
 8004378:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800437e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004382:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004384:	2300      	movs	r3, #0
 8004386:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004388:	2300      	movs	r3, #0
 800438a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800438c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004390:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004392:	2300      	movs	r3, #0
 8004394:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004396:	2300      	movs	r3, #0
 8004398:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800439a:	1d3b      	adds	r3, r7, #4
 800439c:	4619      	mov	r1, r3
 800439e:	4807      	ldr	r0, [pc, #28]	@ (80043bc <MX_TIM1_Init+0x150>)
 80043a0:	f004 fccc 	bl	8008d3c <HAL_TIMEx_ConfigBreakDeadTime>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80043aa:	f7ff fe03 	bl	8003fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80043ae:	4803      	ldr	r0, [pc, #12]	@ (80043bc <MX_TIM1_Init+0x150>)
 80043b0:	f000 faa6 	bl	8004900 <HAL_TIM_MspPostInit>

}
 80043b4:	bf00      	nop
 80043b6:	3768      	adds	r7, #104	@ 0x68
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20000310 	.word	0x20000310
 80043c0:	40010000 	.word	0x40010000

080043c4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b08e      	sub	sp, #56	@ 0x38
 80043c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	605a      	str	r2, [r3, #4]
 80043d4:	609a      	str	r2, [r3, #8]
 80043d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043d8:	f107 031c 	add.w	r3, r7, #28
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	605a      	str	r2, [r3, #4]
 80043e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043e4:	463b      	mov	r3, r7
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	605a      	str	r2, [r3, #4]
 80043ec:	609a      	str	r2, [r3, #8]
 80043ee:	60da      	str	r2, [r3, #12]
 80043f0:	611a      	str	r2, [r3, #16]
 80043f2:	615a      	str	r2, [r3, #20]
 80043f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80043f6:	4b34      	ldr	r3, [pc, #208]	@ (80044c8 <MX_TIM2_Init+0x104>)
 80043f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80043fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80043fe:	4b32      	ldr	r3, [pc, #200]	@ (80044c8 <MX_TIM2_Init+0x104>)
 8004400:	2247      	movs	r2, #71	@ 0x47
 8004402:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004404:	4b30      	ldr	r3, [pc, #192]	@ (80044c8 <MX_TIM2_Init+0x104>)
 8004406:	2200      	movs	r2, #0
 8004408:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800440a:	4b2f      	ldr	r3, [pc, #188]	@ (80044c8 <MX_TIM2_Init+0x104>)
 800440c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004410:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004412:	4b2d      	ldr	r3, [pc, #180]	@ (80044c8 <MX_TIM2_Init+0x104>)
 8004414:	2200      	movs	r2, #0
 8004416:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004418:	4b2b      	ldr	r3, [pc, #172]	@ (80044c8 <MX_TIM2_Init+0x104>)
 800441a:	2200      	movs	r2, #0
 800441c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800441e:	482a      	ldr	r0, [pc, #168]	@ (80044c8 <MX_TIM2_Init+0x104>)
 8004420:	f003 fa40 	bl	80078a4 <HAL_TIM_Base_Init>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800442a:	f7ff fdc3 	bl	8003fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800442e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004432:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004434:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004438:	4619      	mov	r1, r3
 800443a:	4823      	ldr	r0, [pc, #140]	@ (80044c8 <MX_TIM2_Init+0x104>)
 800443c:	f003 ff40 	bl	80082c0 <HAL_TIM_ConfigClockSource>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004446:	f7ff fdb5 	bl	8003fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800444a:	481f      	ldr	r0, [pc, #124]	@ (80044c8 <MX_TIM2_Init+0x104>)
 800444c:	f003 fb29 	bl	8007aa2 <HAL_TIM_PWM_Init>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004456:	f7ff fdad 	bl	8003fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800445a:	2300      	movs	r3, #0
 800445c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800445e:	2300      	movs	r3, #0
 8004460:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004462:	f107 031c 	add.w	r3, r7, #28
 8004466:	4619      	mov	r1, r3
 8004468:	4817      	ldr	r0, [pc, #92]	@ (80044c8 <MX_TIM2_Init+0x104>)
 800446a:	f004 fbd9 	bl	8008c20 <HAL_TIMEx_MasterConfigSynchronization>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004474:	f7ff fd9e 	bl	8003fb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004478:	2360      	movs	r3, #96	@ 0x60
 800447a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 800447c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004480:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004482:	2300      	movs	r3, #0
 8004484:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004486:	2300      	movs	r3, #0
 8004488:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800448a:	463b      	mov	r3, r7
 800448c:	2200      	movs	r2, #0
 800448e:	4619      	mov	r1, r3
 8004490:	480d      	ldr	r0, [pc, #52]	@ (80044c8 <MX_TIM2_Init+0x104>)
 8004492:	f003 fe01 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800449c:	f7ff fd8a 	bl	8003fb4 <Error_Handler>
  }
  sConfigOC.Pulse = 10;
 80044a0:	230a      	movs	r3, #10
 80044a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80044a4:	463b      	mov	r3, r7
 80044a6:	2208      	movs	r2, #8
 80044a8:	4619      	mov	r1, r3
 80044aa:	4807      	ldr	r0, [pc, #28]	@ (80044c8 <MX_TIM2_Init+0x104>)
 80044ac:	f003 fdf4 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 80044b6:	f7ff fd7d 	bl	8003fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80044ba:	4803      	ldr	r0, [pc, #12]	@ (80044c8 <MX_TIM2_Init+0x104>)
 80044bc:	f000 fa20 	bl	8004900 <HAL_TIM_MspPostInit>

}
 80044c0:	bf00      	nop
 80044c2:	3738      	adds	r7, #56	@ 0x38
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	2000035c 	.word	0x2000035c

080044cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08e      	sub	sp, #56	@ 0x38
 80044d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	605a      	str	r2, [r3, #4]
 80044dc:	609a      	str	r2, [r3, #8]
 80044de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044e0:	f107 031c 	add.w	r3, r7, #28
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	605a      	str	r2, [r3, #4]
 80044ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044ec:	463b      	mov	r3, r7
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	605a      	str	r2, [r3, #4]
 80044f4:	609a      	str	r2, [r3, #8]
 80044f6:	60da      	str	r2, [r3, #12]
 80044f8:	611a      	str	r2, [r3, #16]
 80044fa:	615a      	str	r2, [r3, #20]
 80044fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80044fe:	4b33      	ldr	r3, [pc, #204]	@ (80045cc <MX_TIM3_Init+0x100>)
 8004500:	4a33      	ldr	r2, [pc, #204]	@ (80045d0 <MX_TIM3_Init+0x104>)
 8004502:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8004504:	4b31      	ldr	r3, [pc, #196]	@ (80045cc <MX_TIM3_Init+0x100>)
 8004506:	2247      	movs	r2, #71	@ 0x47
 8004508:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800450a:	4b30      	ldr	r3, [pc, #192]	@ (80045cc <MX_TIM3_Init+0x100>)
 800450c:	2200      	movs	r2, #0
 800450e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8004510:	4b2e      	ldr	r3, [pc, #184]	@ (80045cc <MX_TIM3_Init+0x100>)
 8004512:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004516:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004518:	4b2c      	ldr	r3, [pc, #176]	@ (80045cc <MX_TIM3_Init+0x100>)
 800451a:	2200      	movs	r2, #0
 800451c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800451e:	4b2b      	ldr	r3, [pc, #172]	@ (80045cc <MX_TIM3_Init+0x100>)
 8004520:	2200      	movs	r2, #0
 8004522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004524:	4829      	ldr	r0, [pc, #164]	@ (80045cc <MX_TIM3_Init+0x100>)
 8004526:	f003 f9bd 	bl	80078a4 <HAL_TIM_Base_Init>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004530:	f7ff fd40 	bl	8003fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004534:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004538:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800453a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800453e:	4619      	mov	r1, r3
 8004540:	4822      	ldr	r0, [pc, #136]	@ (80045cc <MX_TIM3_Init+0x100>)
 8004542:	f003 febd 	bl	80082c0 <HAL_TIM_ConfigClockSource>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800454c:	f7ff fd32 	bl	8003fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004550:	481e      	ldr	r0, [pc, #120]	@ (80045cc <MX_TIM3_Init+0x100>)
 8004552:	f003 faa6 	bl	8007aa2 <HAL_TIM_PWM_Init>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800455c:	f7ff fd2a 	bl	8003fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004560:	2300      	movs	r3, #0
 8004562:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004564:	2300      	movs	r3, #0
 8004566:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004568:	f107 031c 	add.w	r3, r7, #28
 800456c:	4619      	mov	r1, r3
 800456e:	4817      	ldr	r0, [pc, #92]	@ (80045cc <MX_TIM3_Init+0x100>)
 8004570:	f004 fb56 	bl	8008c20 <HAL_TIMEx_MasterConfigSynchronization>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800457a:	f7ff fd1b 	bl	8003fb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800457e:	2360      	movs	r3, #96	@ 0x60
 8004580:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8004582:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004586:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004588:	2300      	movs	r3, #0
 800458a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800458c:	2300      	movs	r3, #0
 800458e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004590:	463b      	mov	r3, r7
 8004592:	2200      	movs	r2, #0
 8004594:	4619      	mov	r1, r3
 8004596:	480d      	ldr	r0, [pc, #52]	@ (80045cc <MX_TIM3_Init+0x100>)
 8004598:	f003 fd7e 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80045a2:	f7ff fd07 	bl	8003fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80045a6:	463b      	mov	r3, r7
 80045a8:	2208      	movs	r2, #8
 80045aa:	4619      	mov	r1, r3
 80045ac:	4807      	ldr	r0, [pc, #28]	@ (80045cc <MX_TIM3_Init+0x100>)
 80045ae:	f003 fd73 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80045b8:	f7ff fcfc 	bl	8003fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80045bc:	4803      	ldr	r0, [pc, #12]	@ (80045cc <MX_TIM3_Init+0x100>)
 80045be:	f000 f99f 	bl	8004900 <HAL_TIM_MspPostInit>

}
 80045c2:	bf00      	nop
 80045c4:	3738      	adds	r7, #56	@ 0x38
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	200003a8 	.word	0x200003a8
 80045d0:	40000400 	.word	0x40000400

080045d4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08e      	sub	sp, #56	@ 0x38
 80045d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	605a      	str	r2, [r3, #4]
 80045e4:	609a      	str	r2, [r3, #8]
 80045e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045e8:	f107 031c 	add.w	r3, r7, #28
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	605a      	str	r2, [r3, #4]
 80045f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045f4:	463b      	mov	r3, r7
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	605a      	str	r2, [r3, #4]
 80045fc:	609a      	str	r2, [r3, #8]
 80045fe:	60da      	str	r2, [r3, #12]
 8004600:	611a      	str	r2, [r3, #16]
 8004602:	615a      	str	r2, [r3, #20]
 8004604:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004606:	4b34      	ldr	r3, [pc, #208]	@ (80046d8 <MX_TIM4_Init+0x104>)
 8004608:	4a34      	ldr	r2, [pc, #208]	@ (80046dc <MX_TIM4_Init+0x108>)
 800460a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 800460c:	4b32      	ldr	r3, [pc, #200]	@ (80046d8 <MX_TIM4_Init+0x104>)
 800460e:	2247      	movs	r2, #71	@ 0x47
 8004610:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004612:	4b31      	ldr	r3, [pc, #196]	@ (80046d8 <MX_TIM4_Init+0x104>)
 8004614:	2200      	movs	r2, #0
 8004616:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8004618:	4b2f      	ldr	r3, [pc, #188]	@ (80046d8 <MX_TIM4_Init+0x104>)
 800461a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800461e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004620:	4b2d      	ldr	r3, [pc, #180]	@ (80046d8 <MX_TIM4_Init+0x104>)
 8004622:	2200      	movs	r2, #0
 8004624:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004626:	4b2c      	ldr	r3, [pc, #176]	@ (80046d8 <MX_TIM4_Init+0x104>)
 8004628:	2200      	movs	r2, #0
 800462a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800462c:	482a      	ldr	r0, [pc, #168]	@ (80046d8 <MX_TIM4_Init+0x104>)
 800462e:	f003 f939 	bl	80078a4 <HAL_TIM_Base_Init>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8004638:	f7ff fcbc 	bl	8003fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800463c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004640:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004642:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004646:	4619      	mov	r1, r3
 8004648:	4823      	ldr	r0, [pc, #140]	@ (80046d8 <MX_TIM4_Init+0x104>)
 800464a:	f003 fe39 	bl	80082c0 <HAL_TIM_ConfigClockSource>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8004654:	f7ff fcae 	bl	8003fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004658:	481f      	ldr	r0, [pc, #124]	@ (80046d8 <MX_TIM4_Init+0x104>)
 800465a:	f003 fa22 	bl	8007aa2 <HAL_TIM_PWM_Init>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8004664:	f7ff fca6 	bl	8003fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004668:	2300      	movs	r3, #0
 800466a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800466c:	2300      	movs	r3, #0
 800466e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004670:	f107 031c 	add.w	r3, r7, #28
 8004674:	4619      	mov	r1, r3
 8004676:	4818      	ldr	r0, [pc, #96]	@ (80046d8 <MX_TIM4_Init+0x104>)
 8004678:	f004 fad2 	bl	8008c20 <HAL_TIMEx_MasterConfigSynchronization>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004682:	f7ff fc97 	bl	8003fb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004686:	2360      	movs	r3, #96	@ 0x60
 8004688:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 800468a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800468e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004690:	2300      	movs	r3, #0
 8004692:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004694:	2300      	movs	r3, #0
 8004696:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004698:	463b      	mov	r3, r7
 800469a:	2200      	movs	r2, #0
 800469c:	4619      	mov	r1, r3
 800469e:	480e      	ldr	r0, [pc, #56]	@ (80046d8 <MX_TIM4_Init+0x104>)
 80046a0:	f003 fcfa 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80046aa:	f7ff fc83 	bl	8003fb4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80046ae:	2300      	movs	r3, #0
 80046b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80046b2:	463b      	mov	r3, r7
 80046b4:	2208      	movs	r2, #8
 80046b6:	4619      	mov	r1, r3
 80046b8:	4807      	ldr	r0, [pc, #28]	@ (80046d8 <MX_TIM4_Init+0x104>)
 80046ba:	f003 fced 	bl	8008098 <HAL_TIM_PWM_ConfigChannel>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 80046c4:	f7ff fc76 	bl	8003fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80046c8:	4803      	ldr	r0, [pc, #12]	@ (80046d8 <MX_TIM4_Init+0x104>)
 80046ca:	f000 f919 	bl	8004900 <HAL_TIM_MspPostInit>

}
 80046ce:	bf00      	nop
 80046d0:	3738      	adds	r7, #56	@ 0x38
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	200003f4 	.word	0x200003f4
 80046dc:	40000800 	.word	0x40000800

080046e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b090      	sub	sp, #64	@ 0x40
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	605a      	str	r2, [r3, #4]
 80046f2:	609a      	str	r2, [r3, #8]
 80046f4:	60da      	str	r2, [r3, #12]
 80046f6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a77      	ldr	r2, [pc, #476]	@ (80048dc <HAL_TIM_Base_MspInit+0x1fc>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d129      	bne.n	8004756 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004702:	4b77      	ldr	r3, [pc, #476]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 8004704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004706:	4a76      	ldr	r2, [pc, #472]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	6453      	str	r3, [r2, #68]	@ 0x44
 800470e:	4b74      	ldr	r3, [pc, #464]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 8004710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004718:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800471a:	4b71      	ldr	r3, [pc, #452]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471e:	4a70      	ldr	r2, [pc, #448]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 8004720:	f043 0310 	orr.w	r3, r3, #16
 8004724:	6313      	str	r3, [r2, #48]	@ 0x30
 8004726:	4b6e      	ldr	r3, [pc, #440]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 8004728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472a:	f003 0310 	and.w	r3, r3, #16
 800472e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004732:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004736:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004738:	2302      	movs	r3, #2
 800473a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473c:	2300      	movs	r3, #0
 800473e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004740:	2300      	movs	r3, #0
 8004742:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004744:	2301      	movs	r3, #1
 8004746:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004748:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800474c:	4619      	mov	r1, r3
 800474e:	4865      	ldr	r0, [pc, #404]	@ (80048e4 <HAL_TIM_Base_MspInit+0x204>)
 8004750:	f000 fc26 	bl	8004fa0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004754:	e0bd      	b.n	80048d2 <HAL_TIM_Base_MspInit+0x1f2>
  else if(tim_baseHandle->Instance==TIM2)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800475e:	d130      	bne.n	80047c2 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004760:	4b5f      	ldr	r3, [pc, #380]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 8004762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004764:	4a5e      	ldr	r2, [pc, #376]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	6413      	str	r3, [r2, #64]	@ 0x40
 800476c:	4b5c      	ldr	r3, [pc, #368]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 800476e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	623b      	str	r3, [r7, #32]
 8004776:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004778:	4b59      	ldr	r3, [pc, #356]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 800477a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477c:	4a58      	ldr	r2, [pc, #352]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 800477e:	f043 0301 	orr.w	r3, r3, #1
 8004782:	6313      	str	r3, [r2, #48]	@ 0x30
 8004784:	4b56      	ldr	r3, [pc, #344]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 8004786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	61fb      	str	r3, [r7, #28]
 800478e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004790:	2308      	movs	r3, #8
 8004792:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004794:	2302      	movs	r3, #2
 8004796:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004798:	2300      	movs	r3, #0
 800479a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800479c:	2300      	movs	r3, #0
 800479e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80047a0:	2301      	movs	r3, #1
 80047a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80047a8:	4619      	mov	r1, r3
 80047aa:	484f      	ldr	r0, [pc, #316]	@ (80048e8 <HAL_TIM_Base_MspInit+0x208>)
 80047ac:	f000 fbf8 	bl	8004fa0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80047b0:	2200      	movs	r2, #0
 80047b2:	2100      	movs	r1, #0
 80047b4:	201c      	movs	r0, #28
 80047b6:	f000 fb9a 	bl	8004eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80047ba:	201c      	movs	r0, #28
 80047bc:	f000 fbb3 	bl	8004f26 <HAL_NVIC_EnableIRQ>
}
 80047c0:	e087      	b.n	80048d2 <HAL_TIM_Base_MspInit+0x1f2>
  else if(tim_baseHandle->Instance==TIM3)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a49      	ldr	r2, [pc, #292]	@ (80048ec <HAL_TIM_Base_MspInit+0x20c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d14c      	bne.n	8004866 <HAL_TIM_Base_MspInit+0x186>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80047cc:	4b44      	ldr	r3, [pc, #272]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 80047ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d0:	4a43      	ldr	r2, [pc, #268]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 80047d2:	f043 0302 	orr.w	r3, r3, #2
 80047d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80047d8:	4b41      	ldr	r3, [pc, #260]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 80047da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	61bb      	str	r3, [r7, #24]
 80047e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047e4:	4b3e      	ldr	r3, [pc, #248]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 80047e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e8:	4a3d      	ldr	r2, [pc, #244]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 80047ea:	f043 0302 	orr.w	r3, r3, #2
 80047ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80047f0:	4b3b      	ldr	r3, [pc, #236]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 80047f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	617b      	str	r3, [r7, #20]
 80047fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047fc:	4b38      	ldr	r3, [pc, #224]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 80047fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004800:	4a37      	ldr	r2, [pc, #220]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 8004802:	f043 0304 	orr.w	r3, r3, #4
 8004806:	6313      	str	r3, [r2, #48]	@ 0x30
 8004808:	4b35      	ldr	r3, [pc, #212]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 800480a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004814:	2302      	movs	r3, #2
 8004816:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004818:	2302      	movs	r3, #2
 800481a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481c:	2300      	movs	r3, #0
 800481e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004820:	2300      	movs	r3, #0
 8004822:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004824:	2302      	movs	r3, #2
 8004826:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004828:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800482c:	4619      	mov	r1, r3
 800482e:	4830      	ldr	r0, [pc, #192]	@ (80048f0 <HAL_TIM_Base_MspInit+0x210>)
 8004830:	f000 fbb6 	bl	8004fa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004834:	2380      	movs	r3, #128	@ 0x80
 8004836:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004838:	2302      	movs	r3, #2
 800483a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483c:	2300      	movs	r3, #0
 800483e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004840:	2300      	movs	r3, #0
 8004842:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004844:	2302      	movs	r3, #2
 8004846:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004848:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800484c:	4619      	mov	r1, r3
 800484e:	4829      	ldr	r0, [pc, #164]	@ (80048f4 <HAL_TIM_Base_MspInit+0x214>)
 8004850:	f000 fba6 	bl	8004fa0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004854:	2200      	movs	r2, #0
 8004856:	2100      	movs	r1, #0
 8004858:	201d      	movs	r0, #29
 800485a:	f000 fb48 	bl	8004eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800485e:	201d      	movs	r0, #29
 8004860:	f000 fb61 	bl	8004f26 <HAL_NVIC_EnableIRQ>
}
 8004864:	e035      	b.n	80048d2 <HAL_TIM_Base_MspInit+0x1f2>
  else if(tim_baseHandle->Instance==TIM4)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a23      	ldr	r2, [pc, #140]	@ (80048f8 <HAL_TIM_Base_MspInit+0x218>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d130      	bne.n	80048d2 <HAL_TIM_Base_MspInit+0x1f2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004870:	4b1b      	ldr	r3, [pc, #108]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 8004872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004874:	4a1a      	ldr	r2, [pc, #104]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 8004876:	f043 0304 	orr.w	r3, r3, #4
 800487a:	6413      	str	r3, [r2, #64]	@ 0x40
 800487c:	4b18      	ldr	r3, [pc, #96]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 800487e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004888:	4b15      	ldr	r3, [pc, #84]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 800488a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488c:	4a14      	ldr	r2, [pc, #80]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 800488e:	f043 0308 	orr.w	r3, r3, #8
 8004892:	6313      	str	r3, [r2, #48]	@ 0x30
 8004894:	4b12      	ldr	r3, [pc, #72]	@ (80048e0 <HAL_TIM_Base_MspInit+0x200>)
 8004896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	60bb      	str	r3, [r7, #8]
 800489e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80048a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80048a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a6:	2302      	movs	r3, #2
 80048a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048aa:	2300      	movs	r3, #0
 80048ac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ae:	2300      	movs	r3, #0
 80048b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80048b2:	2302      	movs	r3, #2
 80048b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80048ba:	4619      	mov	r1, r3
 80048bc:	480f      	ldr	r0, [pc, #60]	@ (80048fc <HAL_TIM_Base_MspInit+0x21c>)
 80048be:	f000 fb6f 	bl	8004fa0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80048c2:	2200      	movs	r2, #0
 80048c4:	2100      	movs	r1, #0
 80048c6:	201e      	movs	r0, #30
 80048c8:	f000 fb11 	bl	8004eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80048cc:	201e      	movs	r0, #30
 80048ce:	f000 fb2a 	bl	8004f26 <HAL_NVIC_EnableIRQ>
}
 80048d2:	bf00      	nop
 80048d4:	3740      	adds	r7, #64	@ 0x40
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40010000 	.word	0x40010000
 80048e0:	40023800 	.word	0x40023800
 80048e4:	40021000 	.word	0x40021000
 80048e8:	40020000 	.word	0x40020000
 80048ec:	40000400 	.word	0x40000400
 80048f0:	40020400 	.word	0x40020400
 80048f4:	40020800 	.word	0x40020800
 80048f8:	40000800 	.word	0x40000800
 80048fc:	40020c00 	.word	0x40020c00

08004900 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08e      	sub	sp, #56	@ 0x38
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004908:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	605a      	str	r2, [r3, #4]
 8004912:	609a      	str	r2, [r3, #8]
 8004914:	60da      	str	r2, [r3, #12]
 8004916:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a61      	ldr	r2, [pc, #388]	@ (8004aa4 <HAL_TIM_MspPostInit+0x1a4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d11d      	bne.n	800495e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004922:	4b61      	ldr	r3, [pc, #388]	@ (8004aa8 <HAL_TIM_MspPostInit+0x1a8>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004926:	4a60      	ldr	r2, [pc, #384]	@ (8004aa8 <HAL_TIM_MspPostInit+0x1a8>)
 8004928:	f043 0310 	orr.w	r3, r3, #16
 800492c:	6313      	str	r3, [r2, #48]	@ 0x30
 800492e:	4b5e      	ldr	r3, [pc, #376]	@ (8004aa8 <HAL_TIM_MspPostInit+0x1a8>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004932:	f003 0310 	and.w	r3, r3, #16
 8004936:	623b      	str	r3, [r7, #32]
 8004938:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800493a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800493e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004940:	2302      	movs	r3, #2
 8004942:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004944:	2300      	movs	r3, #0
 8004946:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004948:	2300      	movs	r3, #0
 800494a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800494c:	2301      	movs	r3, #1
 800494e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004950:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004954:	4619      	mov	r1, r3
 8004956:	4855      	ldr	r0, [pc, #340]	@ (8004aac <HAL_TIM_MspPostInit+0x1ac>)
 8004958:	f000 fb22 	bl	8004fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800495c:	e09e      	b.n	8004a9c <HAL_TIM_MspPostInit+0x19c>
  else if(timHandle->Instance==TIM2)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004966:	d139      	bne.n	80049dc <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004968:	4b4f      	ldr	r3, [pc, #316]	@ (8004aa8 <HAL_TIM_MspPostInit+0x1a8>)
 800496a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496c:	4a4e      	ldr	r2, [pc, #312]	@ (8004aa8 <HAL_TIM_MspPostInit+0x1a8>)
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	6313      	str	r3, [r2, #48]	@ 0x30
 8004974:	4b4c      	ldr	r3, [pc, #304]	@ (8004aa8 <HAL_TIM_MspPostInit+0x1a8>)
 8004976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004980:	4b49      	ldr	r3, [pc, #292]	@ (8004aa8 <HAL_TIM_MspPostInit+0x1a8>)
 8004982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004984:	4a48      	ldr	r2, [pc, #288]	@ (8004aa8 <HAL_TIM_MspPostInit+0x1a8>)
 8004986:	f043 0302 	orr.w	r3, r3, #2
 800498a:	6313      	str	r3, [r2, #48]	@ 0x30
 800498c:	4b46      	ldr	r3, [pc, #280]	@ (8004aa8 <HAL_TIM_MspPostInit+0x1a8>)
 800498e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	61bb      	str	r3, [r7, #24]
 8004996:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004998:	2301      	movs	r3, #1
 800499a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800499c:	2302      	movs	r3, #2
 800499e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a0:	2300      	movs	r3, #0
 80049a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049a4:	2300      	movs	r3, #0
 80049a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80049a8:	2301      	movs	r3, #1
 80049aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049b0:	4619      	mov	r1, r3
 80049b2:	483f      	ldr	r0, [pc, #252]	@ (8004ab0 <HAL_TIM_MspPostInit+0x1b0>)
 80049b4:	f000 faf4 	bl	8004fa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80049b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049be:	2302      	movs	r3, #2
 80049c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049c6:	2300      	movs	r3, #0
 80049c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80049ca:	2301      	movs	r3, #1
 80049cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049d2:	4619      	mov	r1, r3
 80049d4:	4837      	ldr	r0, [pc, #220]	@ (8004ab4 <HAL_TIM_MspPostInit+0x1b4>)
 80049d6:	f000 fae3 	bl	8004fa0 <HAL_GPIO_Init>
}
 80049da:	e05f      	b.n	8004a9c <HAL_TIM_MspPostInit+0x19c>
  else if(timHandle->Instance==TIM3)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a35      	ldr	r2, [pc, #212]	@ (8004ab8 <HAL_TIM_MspPostInit+0x1b8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d138      	bne.n	8004a58 <HAL_TIM_MspPostInit+0x158>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049e6:	4b30      	ldr	r3, [pc, #192]	@ (8004aa8 <HAL_TIM_MspPostInit+0x1a8>)
 80049e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ea:	4a2f      	ldr	r2, [pc, #188]	@ (8004aa8 <HAL_TIM_MspPostInit+0x1a8>)
 80049ec:	f043 0301 	orr.w	r3, r3, #1
 80049f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80049f2:	4b2d      	ldr	r3, [pc, #180]	@ (8004aa8 <HAL_TIM_MspPostInit+0x1a8>)
 80049f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049fe:	4b2a      	ldr	r3, [pc, #168]	@ (8004aa8 <HAL_TIM_MspPostInit+0x1a8>)
 8004a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a02:	4a29      	ldr	r2, [pc, #164]	@ (8004aa8 <HAL_TIM_MspPostInit+0x1a8>)
 8004a04:	f043 0302 	orr.w	r3, r3, #2
 8004a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a0a:	4b27      	ldr	r3, [pc, #156]	@ (8004aa8 <HAL_TIM_MspPostInit+0x1a8>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	613b      	str	r3, [r7, #16]
 8004a14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004a16:	2340      	movs	r3, #64	@ 0x40
 8004a18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a22:	2300      	movs	r3, #0
 8004a24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004a26:	2302      	movs	r3, #2
 8004a28:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a2e:	4619      	mov	r1, r3
 8004a30:	481f      	ldr	r0, [pc, #124]	@ (8004ab0 <HAL_TIM_MspPostInit+0x1b0>)
 8004a32:	f000 fab5 	bl	8004fa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004a36:	2301      	movs	r3, #1
 8004a38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a42:	2300      	movs	r3, #0
 8004a44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004a46:	2302      	movs	r3, #2
 8004a48:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4818      	ldr	r0, [pc, #96]	@ (8004ab4 <HAL_TIM_MspPostInit+0x1b4>)
 8004a52:	f000 faa5 	bl	8004fa0 <HAL_GPIO_Init>
}
 8004a56:	e021      	b.n	8004a9c <HAL_TIM_MspPostInit+0x19c>
  else if(timHandle->Instance==TIM4)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a17      	ldr	r2, [pc, #92]	@ (8004abc <HAL_TIM_MspPostInit+0x1bc>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d11c      	bne.n	8004a9c <HAL_TIM_MspPostInit+0x19c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a62:	4b11      	ldr	r3, [pc, #68]	@ (8004aa8 <HAL_TIM_MspPostInit+0x1a8>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a66:	4a10      	ldr	r2, [pc, #64]	@ (8004aa8 <HAL_TIM_MspPostInit+0x1a8>)
 8004a68:	f043 0308 	orr.w	r3, r3, #8
 8004a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa8 <HAL_TIM_MspPostInit+0x1a8>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8004a7a:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8004a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a80:	2302      	movs	r3, #2
 8004a82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a94:	4619      	mov	r1, r3
 8004a96:	480a      	ldr	r0, [pc, #40]	@ (8004ac0 <HAL_TIM_MspPostInit+0x1c0>)
 8004a98:	f000 fa82 	bl	8004fa0 <HAL_GPIO_Init>
}
 8004a9c:	bf00      	nop
 8004a9e:	3738      	adds	r7, #56	@ 0x38
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40010000 	.word	0x40010000
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	40020000 	.word	0x40020000
 8004ab4:	40020400 	.word	0x40020400
 8004ab8:	40000400 	.word	0x40000400
 8004abc:	40000800 	.word	0x40000800
 8004ac0:	40020c00 	.word	0x40020c00

08004ac4 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004ac8:	4b14      	ldr	r3, [pc, #80]	@ (8004b1c <MX_USART6_UART_Init+0x58>)
 8004aca:	4a15      	ldr	r2, [pc, #84]	@ (8004b20 <MX_USART6_UART_Init+0x5c>)
 8004acc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8004ace:	4b13      	ldr	r3, [pc, #76]	@ (8004b1c <MX_USART6_UART_Init+0x58>)
 8004ad0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004ad4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004ad6:	4b11      	ldr	r3, [pc, #68]	@ (8004b1c <MX_USART6_UART_Init+0x58>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004adc:	4b0f      	ldr	r3, [pc, #60]	@ (8004b1c <MX_USART6_UART_Init+0x58>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8004b1c <MX_USART6_UART_Init+0x58>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8004b1c <MX_USART6_UART_Init+0x58>)
 8004aea:	220c      	movs	r2, #12
 8004aec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004aee:	4b0b      	ldr	r3, [pc, #44]	@ (8004b1c <MX_USART6_UART_Init+0x58>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004af4:	4b09      	ldr	r3, [pc, #36]	@ (8004b1c <MX_USART6_UART_Init+0x58>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004afa:	4b08      	ldr	r3, [pc, #32]	@ (8004b1c <MX_USART6_UART_Init+0x58>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b00:	4b06      	ldr	r3, [pc, #24]	@ (8004b1c <MX_USART6_UART_Init+0x58>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004b06:	4805      	ldr	r0, [pc, #20]	@ (8004b1c <MX_USART6_UART_Init+0x58>)
 8004b08:	f004 f9b4 	bl	8008e74 <HAL_UART_Init>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8004b12:	f7ff fa4f 	bl	8003fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004b16:	bf00      	nop
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000440 	.word	0x20000440
 8004b20:	40011400 	.word	0x40011400

08004b24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b0aa      	sub	sp, #168	@ 0xa8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b2c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	605a      	str	r2, [r3, #4]
 8004b36:	609a      	str	r2, [r3, #8]
 8004b38:	60da      	str	r2, [r3, #12]
 8004b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b3c:	f107 0310 	add.w	r3, r7, #16
 8004b40:	2284      	movs	r2, #132	@ 0x84
 8004b42:	2100      	movs	r1, #0
 8004b44:	4618      	mov	r0, r3
 8004b46:	f005 f9a3 	bl	8009e90 <memset>
  if(uartHandle->Instance==USART6)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a22      	ldr	r2, [pc, #136]	@ (8004bd8 <HAL_UART_MspInit+0xb4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d13c      	bne.n	8004bce <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004b54:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b58:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b5e:	f107 0310 	add.w	r3, r7, #16
 8004b62:	4618      	mov	r0, r3
 8004b64:	f001 fa3a 	bl	8005fdc <HAL_RCCEx_PeriphCLKConfig>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004b6e:	f7ff fa21 	bl	8003fb4 <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8004b72:	4b1a      	ldr	r3, [pc, #104]	@ (8004bdc <HAL_UART_MspInit+0xb8>)
 8004b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b76:	4a19      	ldr	r2, [pc, #100]	@ (8004bdc <HAL_UART_MspInit+0xb8>)
 8004b78:	f043 0320 	orr.w	r3, r3, #32
 8004b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b7e:	4b17      	ldr	r3, [pc, #92]	@ (8004bdc <HAL_UART_MspInit+0xb8>)
 8004b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b82:	f003 0320 	and.w	r3, r3, #32
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004b8a:	4b14      	ldr	r3, [pc, #80]	@ (8004bdc <HAL_UART_MspInit+0xb8>)
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8e:	4a13      	ldr	r2, [pc, #76]	@ (8004bdc <HAL_UART_MspInit+0xb8>)
 8004b90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b96:	4b11      	ldr	r3, [pc, #68]	@ (8004bdc <HAL_UART_MspInit+0xb8>)
 8004b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b9e:	60bb      	str	r3, [r7, #8]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8004ba2:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8004ba6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004baa:	2302      	movs	r3, #2
 8004bac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004bbc:	2308      	movs	r3, #8
 8004bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004bc2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4805      	ldr	r0, [pc, #20]	@ (8004be0 <HAL_UART_MspInit+0xbc>)
 8004bca:	f000 f9e9 	bl	8004fa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004bce:	bf00      	nop
 8004bd0:	37a8      	adds	r7, #168	@ 0xa8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40011400 	.word	0x40011400
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	40021800 	.word	0x40021800

08004be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004be4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004c1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004be8:	480d      	ldr	r0, [pc, #52]	@ (8004c20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004bea:	490e      	ldr	r1, [pc, #56]	@ (8004c24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004bec:	4a0e      	ldr	r2, [pc, #56]	@ (8004c28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bf0:	e002      	b.n	8004bf8 <LoopCopyDataInit>

08004bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bf6:	3304      	adds	r3, #4

08004bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bfc:	d3f9      	bcc.n	8004bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bfe:	4a0b      	ldr	r2, [pc, #44]	@ (8004c2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004c00:	4c0b      	ldr	r4, [pc, #44]	@ (8004c30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c04:	e001      	b.n	8004c0a <LoopFillZerobss>

08004c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c08:	3204      	adds	r2, #4

08004c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c0c:	d3fb      	bcc.n	8004c06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004c0e:	f7ff fb1b 	bl	8004248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c12:	f005 f94b 	bl	8009eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c16:	f7fe f82d 	bl	8002c74 <main>
  bx  lr    
 8004c1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004c1c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c24:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8004c28:	0800ac48 	.word	0x0800ac48
  ldr r2, =_sbss
 8004c2c:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8004c30:	20000614 	.word	0x20000614

08004c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c34:	e7fe      	b.n	8004c34 <ADC_IRQHandler>

08004c36 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c3a:	2003      	movs	r0, #3
 8004c3c:	f000 f94c 	bl	8004ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c40:	2000      	movs	r0, #0
 8004c42:	f000 f805 	bl	8004c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c46:	f7ff fa45 	bl	80040d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c58:	4b12      	ldr	r3, [pc, #72]	@ (8004ca4 <HAL_InitTick+0x54>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	4b12      	ldr	r3, [pc, #72]	@ (8004ca8 <HAL_InitTick+0x58>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	4619      	mov	r1, r3
 8004c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 f967 	bl	8004f42 <HAL_SYSTICK_Config>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e00e      	b.n	8004c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b0f      	cmp	r3, #15
 8004c82:	d80a      	bhi.n	8004c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c84:	2200      	movs	r2, #0
 8004c86:	6879      	ldr	r1, [r7, #4]
 8004c88:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8c:	f000 f92f 	bl	8004eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c90:	4a06      	ldr	r2, [pc, #24]	@ (8004cac <HAL_InitTick+0x5c>)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	e000      	b.n	8004c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	20000128 	.word	0x20000128
 8004ca8:	20000130 	.word	0x20000130
 8004cac:	2000012c 	.word	0x2000012c

08004cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cb4:	4b06      	ldr	r3, [pc, #24]	@ (8004cd0 <HAL_IncTick+0x20>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	4b06      	ldr	r3, [pc, #24]	@ (8004cd4 <HAL_IncTick+0x24>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	4a04      	ldr	r2, [pc, #16]	@ (8004cd4 <HAL_IncTick+0x24>)
 8004cc2:	6013      	str	r3, [r2, #0]
}
 8004cc4:	bf00      	nop
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	20000130 	.word	0x20000130
 8004cd4:	200004c8 	.word	0x200004c8

08004cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  return uwTick;
 8004cdc:	4b03      	ldr	r3, [pc, #12]	@ (8004cec <HAL_GetTick+0x14>)
 8004cde:	681b      	ldr	r3, [r3, #0]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	200004c8 	.word	0x200004c8

08004cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004cf8:	f7ff ffee 	bl	8004cd8 <HAL_GetTick>
 8004cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d08:	d005      	beq.n	8004d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d34 <HAL_Delay+0x44>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d16:	bf00      	nop
 8004d18:	f7ff ffde 	bl	8004cd8 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d8f7      	bhi.n	8004d18 <HAL_Delay+0x28>
  {
  }
}
 8004d28:	bf00      	nop
 8004d2a:	bf00      	nop
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	20000130 	.word	0x20000130

08004d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d48:	4b0b      	ldr	r3, [pc, #44]	@ (8004d78 <__NVIC_SetPriorityGrouping+0x40>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d54:	4013      	ands	r3, r2
 8004d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004d60:	4b06      	ldr	r3, [pc, #24]	@ (8004d7c <__NVIC_SetPriorityGrouping+0x44>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d66:	4a04      	ldr	r2, [pc, #16]	@ (8004d78 <__NVIC_SetPriorityGrouping+0x40>)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	60d3      	str	r3, [r2, #12]
}
 8004d6c:	bf00      	nop
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	e000ed00 	.word	0xe000ed00
 8004d7c:	05fa0000 	.word	0x05fa0000

08004d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d84:	4b04      	ldr	r3, [pc, #16]	@ (8004d98 <__NVIC_GetPriorityGrouping+0x18>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	0a1b      	lsrs	r3, r3, #8
 8004d8a:	f003 0307 	and.w	r3, r3, #7
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	e000ed00 	.word	0xe000ed00

08004d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	db0b      	blt.n	8004dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	f003 021f 	and.w	r2, r3, #31
 8004db4:	4907      	ldr	r1, [pc, #28]	@ (8004dd4 <__NVIC_EnableIRQ+0x38>)
 8004db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	2001      	movs	r0, #1
 8004dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8004dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	e000e100 	.word	0xe000e100

08004dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	6039      	str	r1, [r7, #0]
 8004de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	db0a      	blt.n	8004e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	490c      	ldr	r1, [pc, #48]	@ (8004e24 <__NVIC_SetPriority+0x4c>)
 8004df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df6:	0112      	lsls	r2, r2, #4
 8004df8:	b2d2      	uxtb	r2, r2
 8004dfa:	440b      	add	r3, r1
 8004dfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e00:	e00a      	b.n	8004e18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	4908      	ldr	r1, [pc, #32]	@ (8004e28 <__NVIC_SetPriority+0x50>)
 8004e08:	79fb      	ldrb	r3, [r7, #7]
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	3b04      	subs	r3, #4
 8004e10:	0112      	lsls	r2, r2, #4
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	440b      	add	r3, r1
 8004e16:	761a      	strb	r2, [r3, #24]
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	e000e100 	.word	0xe000e100
 8004e28:	e000ed00 	.word	0xe000ed00

08004e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b089      	sub	sp, #36	@ 0x24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	f1c3 0307 	rsb	r3, r3, #7
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	bf28      	it	cs
 8004e4a:	2304      	movcs	r3, #4
 8004e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	3304      	adds	r3, #4
 8004e52:	2b06      	cmp	r3, #6
 8004e54:	d902      	bls.n	8004e5c <NVIC_EncodePriority+0x30>
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	3b03      	subs	r3, #3
 8004e5a:	e000      	b.n	8004e5e <NVIC_EncodePriority+0x32>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e60:	f04f 32ff 	mov.w	r2, #4294967295
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	43da      	mvns	r2, r3
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	401a      	ands	r2, r3
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e74:	f04f 31ff 	mov.w	r1, #4294967295
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e7e:	43d9      	mvns	r1, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e84:	4313      	orrs	r3, r2
         );
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3724      	adds	r7, #36	@ 0x24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
	...

08004e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ea4:	d301      	bcc.n	8004eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e00f      	b.n	8004eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8004ed4 <SysTick_Config+0x40>)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004eb2:	210f      	movs	r1, #15
 8004eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb8:	f7ff ff8e 	bl	8004dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ebc:	4b05      	ldr	r3, [pc, #20]	@ (8004ed4 <SysTick_Config+0x40>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ec2:	4b04      	ldr	r3, [pc, #16]	@ (8004ed4 <SysTick_Config+0x40>)
 8004ec4:	2207      	movs	r2, #7
 8004ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	e000e010 	.word	0xe000e010

08004ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7ff ff29 	bl	8004d38 <__NVIC_SetPriorityGrouping>
}
 8004ee6:	bf00      	nop
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b086      	sub	sp, #24
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	607a      	str	r2, [r7, #4]
 8004efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f00:	f7ff ff3e 	bl	8004d80 <__NVIC_GetPriorityGrouping>
 8004f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	6978      	ldr	r0, [r7, #20]
 8004f0c:	f7ff ff8e 	bl	8004e2c <NVIC_EncodePriority>
 8004f10:	4602      	mov	r2, r0
 8004f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f16:	4611      	mov	r1, r2
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff ff5d 	bl	8004dd8 <__NVIC_SetPriority>
}
 8004f1e:	bf00      	nop
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b082      	sub	sp, #8
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff ff31 	bl	8004d9c <__NVIC_EnableIRQ>
}
 8004f3a:	bf00      	nop
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b082      	sub	sp, #8
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff ffa2 	bl	8004e94 <SysTick_Config>
 8004f50:	4603      	mov	r3, r0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d004      	beq.n	8004f78 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2280      	movs	r2, #128	@ 0x80
 8004f72:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e00c      	b.n	8004f92 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2205      	movs	r2, #5
 8004f7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0201 	bic.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
	...

08004fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b089      	sub	sp, #36	@ 0x24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61fb      	str	r3, [r7, #28]
 8004fbe:	e175      	b.n	80052ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	f040 8164 	bne.w	80052a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d005      	beq.n	8004ff6 <HAL_GPIO_Init+0x56>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d130      	bne.n	8005058 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	2203      	movs	r2, #3
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	43db      	mvns	r3, r3
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	4013      	ands	r3, r2
 800500c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	fa02 f303 	lsl.w	r3, r2, r3
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	4313      	orrs	r3, r2
 800501e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800502c:	2201      	movs	r2, #1
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	fa02 f303 	lsl.w	r3, r2, r3
 8005034:	43db      	mvns	r3, r3
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	4013      	ands	r3, r2
 800503a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	091b      	lsrs	r3, r3, #4
 8005042:	f003 0201 	and.w	r2, r3, #1
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	4313      	orrs	r3, r2
 8005050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f003 0303 	and.w	r3, r3, #3
 8005060:	2b03      	cmp	r3, #3
 8005062:	d017      	beq.n	8005094 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	2203      	movs	r2, #3
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	43db      	mvns	r3, r3
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	4013      	ands	r3, r2
 800507a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4313      	orrs	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f003 0303 	and.w	r3, r3, #3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d123      	bne.n	80050e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	08da      	lsrs	r2, r3, #3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3208      	adds	r2, #8
 80050a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	220f      	movs	r2, #15
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	43db      	mvns	r3, r3
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	4013      	ands	r3, r2
 80050c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	f003 0307 	and.w	r3, r3, #7
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	08da      	lsrs	r2, r3, #3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3208      	adds	r2, #8
 80050e2:	69b9      	ldr	r1, [r7, #24]
 80050e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	2203      	movs	r2, #3
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	43db      	mvns	r3, r3
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	4013      	ands	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f003 0203 	and.w	r2, r3, #3
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	4313      	orrs	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 80be 	beq.w	80052a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800512a:	4b66      	ldr	r3, [pc, #408]	@ (80052c4 <HAL_GPIO_Init+0x324>)
 800512c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800512e:	4a65      	ldr	r2, [pc, #404]	@ (80052c4 <HAL_GPIO_Init+0x324>)
 8005130:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005134:	6453      	str	r3, [r2, #68]	@ 0x44
 8005136:	4b63      	ldr	r3, [pc, #396]	@ (80052c4 <HAL_GPIO_Init+0x324>)
 8005138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800513a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005142:	4a61      	ldr	r2, [pc, #388]	@ (80052c8 <HAL_GPIO_Init+0x328>)
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	089b      	lsrs	r3, r3, #2
 8005148:	3302      	adds	r3, #2
 800514a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800514e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	220f      	movs	r2, #15
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	43db      	mvns	r3, r3
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	4013      	ands	r3, r2
 8005164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a58      	ldr	r2, [pc, #352]	@ (80052cc <HAL_GPIO_Init+0x32c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d037      	beq.n	80051de <HAL_GPIO_Init+0x23e>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a57      	ldr	r2, [pc, #348]	@ (80052d0 <HAL_GPIO_Init+0x330>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d031      	beq.n	80051da <HAL_GPIO_Init+0x23a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a56      	ldr	r2, [pc, #344]	@ (80052d4 <HAL_GPIO_Init+0x334>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d02b      	beq.n	80051d6 <HAL_GPIO_Init+0x236>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a55      	ldr	r2, [pc, #340]	@ (80052d8 <HAL_GPIO_Init+0x338>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d025      	beq.n	80051d2 <HAL_GPIO_Init+0x232>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a54      	ldr	r2, [pc, #336]	@ (80052dc <HAL_GPIO_Init+0x33c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d01f      	beq.n	80051ce <HAL_GPIO_Init+0x22e>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a53      	ldr	r2, [pc, #332]	@ (80052e0 <HAL_GPIO_Init+0x340>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d019      	beq.n	80051ca <HAL_GPIO_Init+0x22a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a52      	ldr	r2, [pc, #328]	@ (80052e4 <HAL_GPIO_Init+0x344>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d013      	beq.n	80051c6 <HAL_GPIO_Init+0x226>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a51      	ldr	r2, [pc, #324]	@ (80052e8 <HAL_GPIO_Init+0x348>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00d      	beq.n	80051c2 <HAL_GPIO_Init+0x222>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a50      	ldr	r2, [pc, #320]	@ (80052ec <HAL_GPIO_Init+0x34c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d007      	beq.n	80051be <HAL_GPIO_Init+0x21e>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a4f      	ldr	r2, [pc, #316]	@ (80052f0 <HAL_GPIO_Init+0x350>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d101      	bne.n	80051ba <HAL_GPIO_Init+0x21a>
 80051b6:	2309      	movs	r3, #9
 80051b8:	e012      	b.n	80051e0 <HAL_GPIO_Init+0x240>
 80051ba:	230a      	movs	r3, #10
 80051bc:	e010      	b.n	80051e0 <HAL_GPIO_Init+0x240>
 80051be:	2308      	movs	r3, #8
 80051c0:	e00e      	b.n	80051e0 <HAL_GPIO_Init+0x240>
 80051c2:	2307      	movs	r3, #7
 80051c4:	e00c      	b.n	80051e0 <HAL_GPIO_Init+0x240>
 80051c6:	2306      	movs	r3, #6
 80051c8:	e00a      	b.n	80051e0 <HAL_GPIO_Init+0x240>
 80051ca:	2305      	movs	r3, #5
 80051cc:	e008      	b.n	80051e0 <HAL_GPIO_Init+0x240>
 80051ce:	2304      	movs	r3, #4
 80051d0:	e006      	b.n	80051e0 <HAL_GPIO_Init+0x240>
 80051d2:	2303      	movs	r3, #3
 80051d4:	e004      	b.n	80051e0 <HAL_GPIO_Init+0x240>
 80051d6:	2302      	movs	r3, #2
 80051d8:	e002      	b.n	80051e0 <HAL_GPIO_Init+0x240>
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <HAL_GPIO_Init+0x240>
 80051de:	2300      	movs	r3, #0
 80051e0:	69fa      	ldr	r2, [r7, #28]
 80051e2:	f002 0203 	and.w	r2, r2, #3
 80051e6:	0092      	lsls	r2, r2, #2
 80051e8:	4093      	lsls	r3, r2
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80051f0:	4935      	ldr	r1, [pc, #212]	@ (80052c8 <HAL_GPIO_Init+0x328>)
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	089b      	lsrs	r3, r3, #2
 80051f6:	3302      	adds	r3, #2
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051fe:	4b3d      	ldr	r3, [pc, #244]	@ (80052f4 <HAL_GPIO_Init+0x354>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	43db      	mvns	r3, r3
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	4013      	ands	r3, r2
 800520c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005222:	4a34      	ldr	r2, [pc, #208]	@ (80052f4 <HAL_GPIO_Init+0x354>)
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005228:	4b32      	ldr	r3, [pc, #200]	@ (80052f4 <HAL_GPIO_Init+0x354>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	43db      	mvns	r3, r3
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	4013      	ands	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	4313      	orrs	r3, r2
 800524a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800524c:	4a29      	ldr	r2, [pc, #164]	@ (80052f4 <HAL_GPIO_Init+0x354>)
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005252:	4b28      	ldr	r3, [pc, #160]	@ (80052f4 <HAL_GPIO_Init+0x354>)
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	43db      	mvns	r3, r3
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	4013      	ands	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005276:	4a1f      	ldr	r2, [pc, #124]	@ (80052f4 <HAL_GPIO_Init+0x354>)
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800527c:	4b1d      	ldr	r3, [pc, #116]	@ (80052f4 <HAL_GPIO_Init+0x354>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	43db      	mvns	r3, r3
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	4013      	ands	r3, r2
 800528a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052a0:	4a14      	ldr	r2, [pc, #80]	@ (80052f4 <HAL_GPIO_Init+0x354>)
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	3301      	adds	r3, #1
 80052aa:	61fb      	str	r3, [r7, #28]
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	2b0f      	cmp	r3, #15
 80052b0:	f67f ae86 	bls.w	8004fc0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop
 80052b8:	3724      	adds	r7, #36	@ 0x24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	40023800 	.word	0x40023800
 80052c8:	40013800 	.word	0x40013800
 80052cc:	40020000 	.word	0x40020000
 80052d0:	40020400 	.word	0x40020400
 80052d4:	40020800 	.word	0x40020800
 80052d8:	40020c00 	.word	0x40020c00
 80052dc:	40021000 	.word	0x40021000
 80052e0:	40021400 	.word	0x40021400
 80052e4:	40021800 	.word	0x40021800
 80052e8:	40021c00 	.word	0x40021c00
 80052ec:	40022000 	.word	0x40022000
 80052f0:	40022400 	.word	0x40022400
 80052f4:	40013c00 	.word	0x40013c00

080052f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	887b      	ldrh	r3, [r7, #2]
 800530a:	4013      	ands	r3, r2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005310:	2301      	movs	r3, #1
 8005312:	73fb      	strb	r3, [r7, #15]
 8005314:	e001      	b.n	800531a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005316:	2300      	movs	r3, #0
 8005318:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800531a:	7bfb      	ldrb	r3, [r7, #15]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	807b      	strh	r3, [r7, #2]
 8005334:	4613      	mov	r3, r2
 8005336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005338:	787b      	ldrb	r3, [r7, #1]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800533e:	887a      	ldrh	r2, [r7, #2]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005344:	e003      	b.n	800534e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005346:	887b      	ldrh	r3, [r7, #2]
 8005348:	041a      	lsls	r2, r3, #16
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	619a      	str	r2, [r3, #24]
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800535a:	b480      	push	{r7}
 800535c:	b085      	sub	sp, #20
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	460b      	mov	r3, r1
 8005364:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800536c:	887a      	ldrh	r2, [r7, #2]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4013      	ands	r3, r2
 8005372:	041a      	lsls	r2, r3, #16
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	43d9      	mvns	r1, r3
 8005378:	887b      	ldrh	r3, [r7, #2]
 800537a:	400b      	ands	r3, r1
 800537c:	431a      	orrs	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	619a      	str	r2, [r3, #24]
}
 8005382:	bf00      	nop
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
	...

08005390 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	4603      	mov	r3, r0
 8005398:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800539a:	4b08      	ldr	r3, [pc, #32]	@ (80053bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800539c:	695a      	ldr	r2, [r3, #20]
 800539e:	88fb      	ldrh	r3, [r7, #6]
 80053a0:	4013      	ands	r3, r2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d006      	beq.n	80053b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053a6:	4a05      	ldr	r2, [pc, #20]	@ (80053bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053a8:	88fb      	ldrh	r3, [r7, #6]
 80053aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053ac:	88fb      	ldrh	r3, [r7, #6]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 f806 	bl	80053c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80053b4:	bf00      	nop
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40013c00 	.word	0x40013c00

080053c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4603      	mov	r3, r0
 80053c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
	...

080053d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e07f      	b.n	80054ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7fd f842 	bl	8002488 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2224      	movs	r2, #36	@ 0x24
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0201 	bic.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005428:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005438:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d107      	bne.n	8005452 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800544e:	609a      	str	r2, [r3, #8]
 8005450:	e006      	b.n	8005460 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800545e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d104      	bne.n	8005472 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005470:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6859      	ldr	r1, [r3, #4]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	4b1d      	ldr	r3, [pc, #116]	@ (80054f4 <HAL_I2C_Init+0x11c>)
 800547e:	430b      	orrs	r3, r1
 8005480:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005490:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691a      	ldr	r2, [r3, #16]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	69d9      	ldr	r1, [r3, #28]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a1a      	ldr	r2, [r3, #32]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0201 	orr.w	r2, r2, #1
 80054ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2220      	movs	r2, #32
 80054d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	02008000 	.word	0x02008000

080054f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b20      	cmp	r3, #32
 800550c:	d138      	bne.n	8005580 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005514:	2b01      	cmp	r3, #1
 8005516:	d101      	bne.n	800551c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005518:	2302      	movs	r3, #2
 800551a:	e032      	b.n	8005582 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2224      	movs	r2, #36	@ 0x24
 8005528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0201 	bic.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800554a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6819      	ldr	r1, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0201 	orr.w	r2, r2, #1
 800556a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	e000      	b.n	8005582 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005580:	2302      	movs	r3, #2
  }
}
 8005582:	4618      	mov	r0, r3
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800558e:	b480      	push	{r7}
 8005590:	b085      	sub	sp, #20
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d139      	bne.n	8005618 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d101      	bne.n	80055b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80055ae:	2302      	movs	r3, #2
 80055b0:	e033      	b.n	800561a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2224      	movs	r2, #36	@ 0x24
 80055be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0201 	bic.w	r2, r2, #1
 80055d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80055e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	021b      	lsls	r3, r3, #8
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0201 	orr.w	r2, r2, #1
 8005602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005614:	2300      	movs	r3, #0
 8005616:	e000      	b.n	800561a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005618:	2302      	movs	r3, #2
  }
}
 800561a:	4618      	mov	r0, r3
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
	...

08005628 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800562c:	4b05      	ldr	r3, [pc, #20]	@ (8005644 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a04      	ldr	r2, [pc, #16]	@ (8005644 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005632:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005636:	6013      	str	r3, [r2, #0]
}
 8005638:	bf00      	nop
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40007000 	.word	0x40007000

08005648 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005650:	2300      	movs	r3, #0
 8005652:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e291      	b.n	8005b82 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 8087 	beq.w	800577a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800566c:	4b96      	ldr	r3, [pc, #600]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f003 030c 	and.w	r3, r3, #12
 8005674:	2b04      	cmp	r3, #4
 8005676:	d00c      	beq.n	8005692 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005678:	4b93      	ldr	r3, [pc, #588]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f003 030c 	and.w	r3, r3, #12
 8005680:	2b08      	cmp	r3, #8
 8005682:	d112      	bne.n	80056aa <HAL_RCC_OscConfig+0x62>
 8005684:	4b90      	ldr	r3, [pc, #576]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800568c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005690:	d10b      	bne.n	80056aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005692:	4b8d      	ldr	r3, [pc, #564]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d06c      	beq.n	8005778 <HAL_RCC_OscConfig+0x130>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d168      	bne.n	8005778 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e26b      	b.n	8005b82 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056b2:	d106      	bne.n	80056c2 <HAL_RCC_OscConfig+0x7a>
 80056b4:	4b84      	ldr	r3, [pc, #528]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a83      	ldr	r2, [pc, #524]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 80056ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	e02e      	b.n	8005720 <HAL_RCC_OscConfig+0xd8>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10c      	bne.n	80056e4 <HAL_RCC_OscConfig+0x9c>
 80056ca:	4b7f      	ldr	r3, [pc, #508]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a7e      	ldr	r2, [pc, #504]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 80056d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	4b7c      	ldr	r3, [pc, #496]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a7b      	ldr	r2, [pc, #492]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 80056dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	e01d      	b.n	8005720 <HAL_RCC_OscConfig+0xd8>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056ec:	d10c      	bne.n	8005708 <HAL_RCC_OscConfig+0xc0>
 80056ee:	4b76      	ldr	r3, [pc, #472]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a75      	ldr	r2, [pc, #468]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 80056f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	4b73      	ldr	r3, [pc, #460]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a72      	ldr	r2, [pc, #456]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 8005700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	e00b      	b.n	8005720 <HAL_RCC_OscConfig+0xd8>
 8005708:	4b6f      	ldr	r3, [pc, #444]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a6e      	ldr	r2, [pc, #440]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 800570e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	4b6c      	ldr	r3, [pc, #432]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a6b      	ldr	r2, [pc, #428]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 800571a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800571e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d013      	beq.n	8005750 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005728:	f7ff fad6 	bl	8004cd8 <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005730:	f7ff fad2 	bl	8004cd8 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b64      	cmp	r3, #100	@ 0x64
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e21f      	b.n	8005b82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005742:	4b61      	ldr	r3, [pc, #388]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0f0      	beq.n	8005730 <HAL_RCC_OscConfig+0xe8>
 800574e:	e014      	b.n	800577a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005750:	f7ff fac2 	bl	8004cd8 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005758:	f7ff fabe 	bl	8004cd8 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b64      	cmp	r3, #100	@ 0x64
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e20b      	b.n	8005b82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800576a:	4b57      	ldr	r3, [pc, #348]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1f0      	bne.n	8005758 <HAL_RCC_OscConfig+0x110>
 8005776:	e000      	b.n	800577a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d069      	beq.n	800585a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005786:	4b50      	ldr	r3, [pc, #320]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 030c 	and.w	r3, r3, #12
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00b      	beq.n	80057aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005792:	4b4d      	ldr	r3, [pc, #308]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 030c 	and.w	r3, r3, #12
 800579a:	2b08      	cmp	r3, #8
 800579c:	d11c      	bne.n	80057d8 <HAL_RCC_OscConfig+0x190>
 800579e:	4b4a      	ldr	r3, [pc, #296]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d116      	bne.n	80057d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057aa:	4b47      	ldr	r3, [pc, #284]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d005      	beq.n	80057c2 <HAL_RCC_OscConfig+0x17a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d001      	beq.n	80057c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e1df      	b.n	8005b82 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057c2:	4b41      	ldr	r3, [pc, #260]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	493d      	ldr	r1, [pc, #244]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057d6:	e040      	b.n	800585a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d023      	beq.n	8005828 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057e0:	4b39      	ldr	r3, [pc, #228]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a38      	ldr	r2, [pc, #224]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 80057e6:	f043 0301 	orr.w	r3, r3, #1
 80057ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ec:	f7ff fa74 	bl	8004cd8 <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057f2:	e008      	b.n	8005806 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057f4:	f7ff fa70 	bl	8004cd8 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e1bd      	b.n	8005b82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005806:	4b30      	ldr	r3, [pc, #192]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0f0      	beq.n	80057f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005812:	4b2d      	ldr	r3, [pc, #180]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	4929      	ldr	r1, [pc, #164]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 8005822:	4313      	orrs	r3, r2
 8005824:	600b      	str	r3, [r1, #0]
 8005826:	e018      	b.n	800585a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005828:	4b27      	ldr	r3, [pc, #156]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a26      	ldr	r2, [pc, #152]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 800582e:	f023 0301 	bic.w	r3, r3, #1
 8005832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005834:	f7ff fa50 	bl	8004cd8 <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800583c:	f7ff fa4c 	bl	8004cd8 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e199      	b.n	8005b82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800584e:	4b1e      	ldr	r3, [pc, #120]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1f0      	bne.n	800583c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d038      	beq.n	80058d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d019      	beq.n	80058a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800586e:	4b16      	ldr	r3, [pc, #88]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 8005870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005872:	4a15      	ldr	r2, [pc, #84]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 8005874:	f043 0301 	orr.w	r3, r3, #1
 8005878:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800587a:	f7ff fa2d 	bl	8004cd8 <HAL_GetTick>
 800587e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005880:	e008      	b.n	8005894 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005882:	f7ff fa29 	bl	8004cd8 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d901      	bls.n	8005894 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e176      	b.n	8005b82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005894:	4b0c      	ldr	r3, [pc, #48]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 8005896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0f0      	beq.n	8005882 <HAL_RCC_OscConfig+0x23a>
 80058a0:	e01a      	b.n	80058d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058a2:	4b09      	ldr	r3, [pc, #36]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 80058a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058a6:	4a08      	ldr	r2, [pc, #32]	@ (80058c8 <HAL_RCC_OscConfig+0x280>)
 80058a8:	f023 0301 	bic.w	r3, r3, #1
 80058ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ae:	f7ff fa13 	bl	8004cd8 <HAL_GetTick>
 80058b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058b4:	e00a      	b.n	80058cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058b6:	f7ff fa0f 	bl	8004cd8 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d903      	bls.n	80058cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e15c      	b.n	8005b82 <HAL_RCC_OscConfig+0x53a>
 80058c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058cc:	4b91      	ldr	r3, [pc, #580]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 80058ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1ee      	bne.n	80058b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 80a4 	beq.w	8005a2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058e6:	4b8b      	ldr	r3, [pc, #556]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 80058e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10d      	bne.n	800590e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80058f2:	4b88      	ldr	r3, [pc, #544]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 80058f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f6:	4a87      	ldr	r2, [pc, #540]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 80058f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80058fe:	4b85      	ldr	r3, [pc, #532]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 8005900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005906:	60bb      	str	r3, [r7, #8]
 8005908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800590a:	2301      	movs	r3, #1
 800590c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800590e:	4b82      	ldr	r3, [pc, #520]	@ (8005b18 <HAL_RCC_OscConfig+0x4d0>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005916:	2b00      	cmp	r3, #0
 8005918:	d118      	bne.n	800594c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800591a:	4b7f      	ldr	r3, [pc, #508]	@ (8005b18 <HAL_RCC_OscConfig+0x4d0>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a7e      	ldr	r2, [pc, #504]	@ (8005b18 <HAL_RCC_OscConfig+0x4d0>)
 8005920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005926:	f7ff f9d7 	bl	8004cd8 <HAL_GetTick>
 800592a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800592c:	e008      	b.n	8005940 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800592e:	f7ff f9d3 	bl	8004cd8 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b64      	cmp	r3, #100	@ 0x64
 800593a:	d901      	bls.n	8005940 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e120      	b.n	8005b82 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005940:	4b75      	ldr	r3, [pc, #468]	@ (8005b18 <HAL_RCC_OscConfig+0x4d0>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0f0      	beq.n	800592e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d106      	bne.n	8005962 <HAL_RCC_OscConfig+0x31a>
 8005954:	4b6f      	ldr	r3, [pc, #444]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 8005956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005958:	4a6e      	ldr	r2, [pc, #440]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 800595a:	f043 0301 	orr.w	r3, r3, #1
 800595e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005960:	e02d      	b.n	80059be <HAL_RCC_OscConfig+0x376>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10c      	bne.n	8005984 <HAL_RCC_OscConfig+0x33c>
 800596a:	4b6a      	ldr	r3, [pc, #424]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 800596c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800596e:	4a69      	ldr	r2, [pc, #420]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 8005970:	f023 0301 	bic.w	r3, r3, #1
 8005974:	6713      	str	r3, [r2, #112]	@ 0x70
 8005976:	4b67      	ldr	r3, [pc, #412]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 8005978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800597a:	4a66      	ldr	r2, [pc, #408]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 800597c:	f023 0304 	bic.w	r3, r3, #4
 8005980:	6713      	str	r3, [r2, #112]	@ 0x70
 8005982:	e01c      	b.n	80059be <HAL_RCC_OscConfig+0x376>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	2b05      	cmp	r3, #5
 800598a:	d10c      	bne.n	80059a6 <HAL_RCC_OscConfig+0x35e>
 800598c:	4b61      	ldr	r3, [pc, #388]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 800598e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005990:	4a60      	ldr	r2, [pc, #384]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 8005992:	f043 0304 	orr.w	r3, r3, #4
 8005996:	6713      	str	r3, [r2, #112]	@ 0x70
 8005998:	4b5e      	ldr	r3, [pc, #376]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 800599a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800599c:	4a5d      	ldr	r2, [pc, #372]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 800599e:	f043 0301 	orr.w	r3, r3, #1
 80059a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80059a4:	e00b      	b.n	80059be <HAL_RCC_OscConfig+0x376>
 80059a6:	4b5b      	ldr	r3, [pc, #364]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 80059a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059aa:	4a5a      	ldr	r2, [pc, #360]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 80059ac:	f023 0301 	bic.w	r3, r3, #1
 80059b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80059b2:	4b58      	ldr	r3, [pc, #352]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 80059b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059b6:	4a57      	ldr	r2, [pc, #348]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 80059b8:	f023 0304 	bic.w	r3, r3, #4
 80059bc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d015      	beq.n	80059f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c6:	f7ff f987 	bl	8004cd8 <HAL_GetTick>
 80059ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059cc:	e00a      	b.n	80059e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ce:	f7ff f983 	bl	8004cd8 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059dc:	4293      	cmp	r3, r2
 80059de:	d901      	bls.n	80059e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e0ce      	b.n	8005b82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e4:	4b4b      	ldr	r3, [pc, #300]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 80059e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d0ee      	beq.n	80059ce <HAL_RCC_OscConfig+0x386>
 80059f0:	e014      	b.n	8005a1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059f2:	f7ff f971 	bl	8004cd8 <HAL_GetTick>
 80059f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059f8:	e00a      	b.n	8005a10 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059fa:	f7ff f96d 	bl	8004cd8 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d901      	bls.n	8005a10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e0b8      	b.n	8005b82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a10:	4b40      	ldr	r3, [pc, #256]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 8005a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1ee      	bne.n	80059fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a1c:	7dfb      	ldrb	r3, [r7, #23]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d105      	bne.n	8005a2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a22:	4b3c      	ldr	r3, [pc, #240]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 8005a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a26:	4a3b      	ldr	r2, [pc, #236]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 8005a28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a2c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 80a4 	beq.w	8005b80 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a38:	4b36      	ldr	r3, [pc, #216]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 030c 	and.w	r3, r3, #12
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d06b      	beq.n	8005b1c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d149      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a4c:	4b31      	ldr	r3, [pc, #196]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a30      	ldr	r2, [pc, #192]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 8005a52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a58:	f7ff f93e 	bl	8004cd8 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a60:	f7ff f93a 	bl	8004cd8 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e087      	b.n	8005b82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a72:	4b28      	ldr	r3, [pc, #160]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1f0      	bne.n	8005a60 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69da      	ldr	r2, [r3, #28]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	431a      	orrs	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8c:	019b      	lsls	r3, r3, #6
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a94:	085b      	lsrs	r3, r3, #1
 8005a96:	3b01      	subs	r3, #1
 8005a98:	041b      	lsls	r3, r3, #16
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa0:	061b      	lsls	r3, r3, #24
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 8005aa6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005aaa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005aac:	4b19      	ldr	r3, [pc, #100]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a18      	ldr	r2, [pc, #96]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 8005ab2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab8:	f7ff f90e 	bl	8004cd8 <HAL_GetTick>
 8005abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005abe:	e008      	b.n	8005ad2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac0:	f7ff f90a 	bl	8004cd8 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e057      	b.n	8005b82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ad2:	4b10      	ldr	r3, [pc, #64]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0f0      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x478>
 8005ade:	e04f      	b.n	8005b80 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a0b      	ldr	r2, [pc, #44]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 8005ae6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aec:	f7ff f8f4 	bl	8004cd8 <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005af4:	f7ff f8f0 	bl	8004cd8 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e03d      	b.n	8005b82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b06:	4b03      	ldr	r3, [pc, #12]	@ (8005b14 <HAL_RCC_OscConfig+0x4cc>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1f0      	bne.n	8005af4 <HAL_RCC_OscConfig+0x4ac>
 8005b12:	e035      	b.n	8005b80 <HAL_RCC_OscConfig+0x538>
 8005b14:	40023800 	.word	0x40023800
 8005b18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005b8c <HAL_RCC_OscConfig+0x544>)
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d028      	beq.n	8005b7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d121      	bne.n	8005b7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d11a      	bne.n	8005b7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005b52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d111      	bne.n	8005b7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b62:	085b      	lsrs	r3, r3, #1
 8005b64:	3b01      	subs	r3, #1
 8005b66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d107      	bne.n	8005b7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d001      	beq.n	8005b80 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e000      	b.n	8005b82 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	40023800 	.word	0x40023800

08005b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e0d0      	b.n	8005d4a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ba8:	4b6a      	ldr	r3, [pc, #424]	@ (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 030f 	and.w	r3, r3, #15
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d910      	bls.n	8005bd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bb6:	4b67      	ldr	r3, [pc, #412]	@ (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f023 020f 	bic.w	r2, r3, #15
 8005bbe:	4965      	ldr	r1, [pc, #404]	@ (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bc6:	4b63      	ldr	r3, [pc, #396]	@ (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 030f 	and.w	r3, r3, #15
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d001      	beq.n	8005bd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e0b8      	b.n	8005d4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d020      	beq.n	8005c26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d005      	beq.n	8005bfc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bf0:	4b59      	ldr	r3, [pc, #356]	@ (8005d58 <HAL_RCC_ClockConfig+0x1c8>)
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	4a58      	ldr	r2, [pc, #352]	@ (8005d58 <HAL_RCC_ClockConfig+0x1c8>)
 8005bf6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005bfa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0308 	and.w	r3, r3, #8
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d005      	beq.n	8005c14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c08:	4b53      	ldr	r3, [pc, #332]	@ (8005d58 <HAL_RCC_ClockConfig+0x1c8>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	4a52      	ldr	r2, [pc, #328]	@ (8005d58 <HAL_RCC_ClockConfig+0x1c8>)
 8005c0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c14:	4b50      	ldr	r3, [pc, #320]	@ (8005d58 <HAL_RCC_ClockConfig+0x1c8>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	494d      	ldr	r1, [pc, #308]	@ (8005d58 <HAL_RCC_ClockConfig+0x1c8>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d040      	beq.n	8005cb4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d107      	bne.n	8005c4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c3a:	4b47      	ldr	r3, [pc, #284]	@ (8005d58 <HAL_RCC_ClockConfig+0x1c8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d115      	bne.n	8005c72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e07f      	b.n	8005d4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d107      	bne.n	8005c62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c52:	4b41      	ldr	r3, [pc, #260]	@ (8005d58 <HAL_RCC_ClockConfig+0x1c8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d109      	bne.n	8005c72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e073      	b.n	8005d4a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c62:	4b3d      	ldr	r3, [pc, #244]	@ (8005d58 <HAL_RCC_ClockConfig+0x1c8>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e06b      	b.n	8005d4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c72:	4b39      	ldr	r3, [pc, #228]	@ (8005d58 <HAL_RCC_ClockConfig+0x1c8>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f023 0203 	bic.w	r2, r3, #3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	4936      	ldr	r1, [pc, #216]	@ (8005d58 <HAL_RCC_ClockConfig+0x1c8>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c84:	f7ff f828 	bl	8004cd8 <HAL_GetTick>
 8005c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c8a:	e00a      	b.n	8005ca2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c8c:	f7ff f824 	bl	8004cd8 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e053      	b.n	8005d4a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8005d58 <HAL_RCC_ClockConfig+0x1c8>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 020c 	and.w	r2, r3, #12
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d1eb      	bne.n	8005c8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cb4:	4b27      	ldr	r3, [pc, #156]	@ (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 030f 	and.w	r3, r3, #15
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d210      	bcs.n	8005ce4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cc2:	4b24      	ldr	r3, [pc, #144]	@ (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f023 020f 	bic.w	r2, r3, #15
 8005cca:	4922      	ldr	r1, [pc, #136]	@ (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cd2:	4b20      	ldr	r3, [pc, #128]	@ (8005d54 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d001      	beq.n	8005ce4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e032      	b.n	8005d4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d008      	beq.n	8005d02 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cf0:	4b19      	ldr	r3, [pc, #100]	@ (8005d58 <HAL_RCC_ClockConfig+0x1c8>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	4916      	ldr	r1, [pc, #88]	@ (8005d58 <HAL_RCC_ClockConfig+0x1c8>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0308 	and.w	r3, r3, #8
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d009      	beq.n	8005d22 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d0e:	4b12      	ldr	r3, [pc, #72]	@ (8005d58 <HAL_RCC_ClockConfig+0x1c8>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	490e      	ldr	r1, [pc, #56]	@ (8005d58 <HAL_RCC_ClockConfig+0x1c8>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d22:	f000 f821 	bl	8005d68 <HAL_RCC_GetSysClockFreq>
 8005d26:	4602      	mov	r2, r0
 8005d28:	4b0b      	ldr	r3, [pc, #44]	@ (8005d58 <HAL_RCC_ClockConfig+0x1c8>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	091b      	lsrs	r3, r3, #4
 8005d2e:	f003 030f 	and.w	r3, r3, #15
 8005d32:	490a      	ldr	r1, [pc, #40]	@ (8005d5c <HAL_RCC_ClockConfig+0x1cc>)
 8005d34:	5ccb      	ldrb	r3, [r1, r3]
 8005d36:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3a:	4a09      	ldr	r2, [pc, #36]	@ (8005d60 <HAL_RCC_ClockConfig+0x1d0>)
 8005d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d3e:	4b09      	ldr	r3, [pc, #36]	@ (8005d64 <HAL_RCC_ClockConfig+0x1d4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fe ff84 	bl	8004c50 <HAL_InitTick>

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	40023c00 	.word	0x40023c00
 8005d58:	40023800 	.word	0x40023800
 8005d5c:	0800aaec 	.word	0x0800aaec
 8005d60:	20000128 	.word	0x20000128
 8005d64:	2000012c 	.word	0x2000012c

08005d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d6c:	b094      	sub	sp, #80	@ 0x50
 8005d6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005d70:	2300      	movs	r3, #0
 8005d72:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d74:	2300      	movs	r3, #0
 8005d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d78:	2300      	movs	r3, #0
 8005d7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d80:	4b79      	ldr	r3, [pc, #484]	@ (8005f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f003 030c 	and.w	r3, r3, #12
 8005d88:	2b08      	cmp	r3, #8
 8005d8a:	d00d      	beq.n	8005da8 <HAL_RCC_GetSysClockFreq+0x40>
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	f200 80e1 	bhi.w	8005f54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <HAL_RCC_GetSysClockFreq+0x34>
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	d003      	beq.n	8005da2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d9a:	e0db      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d9c:	4b73      	ldr	r3, [pc, #460]	@ (8005f6c <HAL_RCC_GetSysClockFreq+0x204>)
 8005d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005da0:	e0db      	b.n	8005f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005da2:	4b73      	ldr	r3, [pc, #460]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x208>)
 8005da4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005da6:	e0d8      	b.n	8005f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005da8:	4b6f      	ldr	r3, [pc, #444]	@ (8005f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005db0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005db2:	4b6d      	ldr	r3, [pc, #436]	@ (8005f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d063      	beq.n	8005e86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dbe:	4b6a      	ldr	r3, [pc, #424]	@ (8005f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	099b      	lsrs	r3, r3, #6
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005dda:	4622      	mov	r2, r4
 8005ddc:	462b      	mov	r3, r5
 8005dde:	f04f 0000 	mov.w	r0, #0
 8005de2:	f04f 0100 	mov.w	r1, #0
 8005de6:	0159      	lsls	r1, r3, #5
 8005de8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005dec:	0150      	lsls	r0, r2, #5
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	4621      	mov	r1, r4
 8005df4:	1a51      	subs	r1, r2, r1
 8005df6:	6139      	str	r1, [r7, #16]
 8005df8:	4629      	mov	r1, r5
 8005dfa:	eb63 0301 	sbc.w	r3, r3, r1
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	f04f 0200 	mov.w	r2, #0
 8005e04:	f04f 0300 	mov.w	r3, #0
 8005e08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e0c:	4659      	mov	r1, fp
 8005e0e:	018b      	lsls	r3, r1, #6
 8005e10:	4651      	mov	r1, sl
 8005e12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e16:	4651      	mov	r1, sl
 8005e18:	018a      	lsls	r2, r1, #6
 8005e1a:	4651      	mov	r1, sl
 8005e1c:	ebb2 0801 	subs.w	r8, r2, r1
 8005e20:	4659      	mov	r1, fp
 8005e22:	eb63 0901 	sbc.w	r9, r3, r1
 8005e26:	f04f 0200 	mov.w	r2, #0
 8005e2a:	f04f 0300 	mov.w	r3, #0
 8005e2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e3a:	4690      	mov	r8, r2
 8005e3c:	4699      	mov	r9, r3
 8005e3e:	4623      	mov	r3, r4
 8005e40:	eb18 0303 	adds.w	r3, r8, r3
 8005e44:	60bb      	str	r3, [r7, #8]
 8005e46:	462b      	mov	r3, r5
 8005e48:	eb49 0303 	adc.w	r3, r9, r3
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	f04f 0200 	mov.w	r2, #0
 8005e52:	f04f 0300 	mov.w	r3, #0
 8005e56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	024b      	lsls	r3, r1, #9
 8005e5e:	4621      	mov	r1, r4
 8005e60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e64:	4621      	mov	r1, r4
 8005e66:	024a      	lsls	r2, r1, #9
 8005e68:	4610      	mov	r0, r2
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e6e:	2200      	movs	r2, #0
 8005e70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e78:	f7fa ff00 	bl	8000c7c <__aeabi_uldivmod>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4613      	mov	r3, r2
 8005e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e84:	e058      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e86:	4b38      	ldr	r3, [pc, #224]	@ (8005f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	099b      	lsrs	r3, r3, #6
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	4618      	mov	r0, r3
 8005e90:	4611      	mov	r1, r2
 8005e92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e96:	623b      	str	r3, [r7, #32]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ea0:	4642      	mov	r2, r8
 8005ea2:	464b      	mov	r3, r9
 8005ea4:	f04f 0000 	mov.w	r0, #0
 8005ea8:	f04f 0100 	mov.w	r1, #0
 8005eac:	0159      	lsls	r1, r3, #5
 8005eae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005eb2:	0150      	lsls	r0, r2, #5
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4641      	mov	r1, r8
 8005eba:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ebe:	4649      	mov	r1, r9
 8005ec0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ec4:	f04f 0200 	mov.w	r2, #0
 8005ec8:	f04f 0300 	mov.w	r3, #0
 8005ecc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ed0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ed4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ed8:	ebb2 040a 	subs.w	r4, r2, sl
 8005edc:	eb63 050b 	sbc.w	r5, r3, fp
 8005ee0:	f04f 0200 	mov.w	r2, #0
 8005ee4:	f04f 0300 	mov.w	r3, #0
 8005ee8:	00eb      	lsls	r3, r5, #3
 8005eea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005eee:	00e2      	lsls	r2, r4, #3
 8005ef0:	4614      	mov	r4, r2
 8005ef2:	461d      	mov	r5, r3
 8005ef4:	4643      	mov	r3, r8
 8005ef6:	18e3      	adds	r3, r4, r3
 8005ef8:	603b      	str	r3, [r7, #0]
 8005efa:	464b      	mov	r3, r9
 8005efc:	eb45 0303 	adc.w	r3, r5, r3
 8005f00:	607b      	str	r3, [r7, #4]
 8005f02:	f04f 0200 	mov.w	r2, #0
 8005f06:	f04f 0300 	mov.w	r3, #0
 8005f0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f0e:	4629      	mov	r1, r5
 8005f10:	028b      	lsls	r3, r1, #10
 8005f12:	4621      	mov	r1, r4
 8005f14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f18:	4621      	mov	r1, r4
 8005f1a:	028a      	lsls	r2, r1, #10
 8005f1c:	4610      	mov	r0, r2
 8005f1e:	4619      	mov	r1, r3
 8005f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f22:	2200      	movs	r2, #0
 8005f24:	61bb      	str	r3, [r7, #24]
 8005f26:	61fa      	str	r2, [r7, #28]
 8005f28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f2c:	f7fa fea6 	bl	8000c7c <__aeabi_uldivmod>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4613      	mov	r3, r2
 8005f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005f38:	4b0b      	ldr	r3, [pc, #44]	@ (8005f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	0c1b      	lsrs	r3, r3, #16
 8005f3e:	f003 0303 	and.w	r3, r3, #3
 8005f42:	3301      	adds	r3, #1
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005f48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f52:	e002      	b.n	8005f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f54:	4b05      	ldr	r3, [pc, #20]	@ (8005f6c <HAL_RCC_GetSysClockFreq+0x204>)
 8005f56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3750      	adds	r7, #80	@ 0x50
 8005f60:	46bd      	mov	sp, r7
 8005f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f66:	bf00      	nop
 8005f68:	40023800 	.word	0x40023800
 8005f6c:	00f42400 	.word	0x00f42400
 8005f70:	007a1200 	.word	0x007a1200

08005f74 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f74:	b480      	push	{r7}
 8005f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f78:	4b03      	ldr	r3, [pc, #12]	@ (8005f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	20000128 	.word	0x20000128

08005f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f90:	f7ff fff0 	bl	8005f74 <HAL_RCC_GetHCLKFreq>
 8005f94:	4602      	mov	r2, r0
 8005f96:	4b05      	ldr	r3, [pc, #20]	@ (8005fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	0a9b      	lsrs	r3, r3, #10
 8005f9c:	f003 0307 	and.w	r3, r3, #7
 8005fa0:	4903      	ldr	r1, [pc, #12]	@ (8005fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fa2:	5ccb      	ldrb	r3, [r1, r3]
 8005fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	40023800 	.word	0x40023800
 8005fb0:	0800aafc 	.word	0x0800aafc

08005fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005fb8:	f7ff ffdc 	bl	8005f74 <HAL_RCC_GetHCLKFreq>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	4b05      	ldr	r3, [pc, #20]	@ (8005fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	0b5b      	lsrs	r3, r3, #13
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	4903      	ldr	r1, [pc, #12]	@ (8005fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fca:	5ccb      	ldrb	r3, [r1, r3]
 8005fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40023800 	.word	0x40023800
 8005fd8:	0800aafc 	.word	0x0800aafc

08005fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b088      	sub	sp, #32
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005fec:	2300      	movs	r3, #0
 8005fee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d012      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006004:	4b69      	ldr	r3, [pc, #420]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	4a68      	ldr	r2, [pc, #416]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800600a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800600e:	6093      	str	r3, [r2, #8]
 8006010:	4b66      	ldr	r3, [pc, #408]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006018:	4964      	ldr	r1, [pc, #400]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800601a:	4313      	orrs	r3, r2
 800601c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006026:	2301      	movs	r3, #1
 8006028:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d017      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006036:	4b5d      	ldr	r3, [pc, #372]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006038:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800603c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006044:	4959      	ldr	r1, [pc, #356]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006046:	4313      	orrs	r3, r2
 8006048:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006050:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006054:	d101      	bne.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006056:	2301      	movs	r3, #1
 8006058:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006062:	2301      	movs	r3, #1
 8006064:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d017      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006072:	4b4e      	ldr	r3, [pc, #312]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006074:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006078:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006080:	494a      	ldr	r1, [pc, #296]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006082:	4313      	orrs	r3, r2
 8006084:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006090:	d101      	bne.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006092:	2301      	movs	r3, #1
 8006094:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800609e:	2301      	movs	r3, #1
 80060a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80060ae:	2301      	movs	r3, #1
 80060b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0320 	and.w	r3, r3, #32
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 808b 	beq.w	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80060c0:	4b3a      	ldr	r3, [pc, #232]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c4:	4a39      	ldr	r2, [pc, #228]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80060cc:	4b37      	ldr	r3, [pc, #220]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060d4:	60bb      	str	r3, [r7, #8]
 80060d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80060d8:	4b35      	ldr	r3, [pc, #212]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a34      	ldr	r2, [pc, #208]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060e4:	f7fe fdf8 	bl	8004cd8 <HAL_GetTick>
 80060e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80060ea:	e008      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060ec:	f7fe fdf4 	bl	8004cd8 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b64      	cmp	r3, #100	@ 0x64
 80060f8:	d901      	bls.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e357      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80060fe:	4b2c      	ldr	r3, [pc, #176]	@ (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006106:	2b00      	cmp	r3, #0
 8006108:	d0f0      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800610a:	4b28      	ldr	r3, [pc, #160]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800610c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800610e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006112:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d035      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800611e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	429a      	cmp	r2, r3
 8006126:	d02e      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006128:	4b20      	ldr	r3, [pc, #128]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800612a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800612c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006130:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006132:	4b1e      	ldr	r3, [pc, #120]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006136:	4a1d      	ldr	r2, [pc, #116]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800613c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800613e:	4b1b      	ldr	r3, [pc, #108]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006142:	4a1a      	ldr	r2, [pc, #104]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006144:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006148:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800614a:	4a18      	ldr	r2, [pc, #96]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006150:	4b16      	ldr	r3, [pc, #88]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b01      	cmp	r3, #1
 800615a:	d114      	bne.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615c:	f7fe fdbc 	bl	8004cd8 <HAL_GetTick>
 8006160:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006162:	e00a      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006164:	f7fe fdb8 	bl	8004cd8 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006172:	4293      	cmp	r3, r2
 8006174:	d901      	bls.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e319      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800617a:	4b0c      	ldr	r3, [pc, #48]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800617c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d0ee      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800618a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800618e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006192:	d111      	bne.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006194:	4b05      	ldr	r3, [pc, #20]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80061a0:	4b04      	ldr	r3, [pc, #16]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80061a2:	400b      	ands	r3, r1
 80061a4:	4901      	ldr	r1, [pc, #4]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	608b      	str	r3, [r1, #8]
 80061aa:	e00b      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80061ac:	40023800 	.word	0x40023800
 80061b0:	40007000 	.word	0x40007000
 80061b4:	0ffffcff 	.word	0x0ffffcff
 80061b8:	4baa      	ldr	r3, [pc, #680]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	4aa9      	ldr	r2, [pc, #676]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061be:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80061c2:	6093      	str	r3, [r2, #8]
 80061c4:	4ba7      	ldr	r3, [pc, #668]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061d0:	49a4      	ldr	r1, [pc, #656]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0310 	and.w	r3, r3, #16
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d010      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061e2:	4ba0      	ldr	r3, [pc, #640]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061e8:	4a9e      	ldr	r2, [pc, #632]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80061f2:	4b9c      	ldr	r3, [pc, #624]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fc:	4999      	ldr	r1, [pc, #612]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00a      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006210:	4b94      	ldr	r3, [pc, #592]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006216:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800621e:	4991      	ldr	r1, [pc, #580]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006220:	4313      	orrs	r3, r2
 8006222:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00a      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006232:	4b8c      	ldr	r3, [pc, #560]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006238:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006240:	4988      	ldr	r1, [pc, #544]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006242:	4313      	orrs	r3, r2
 8006244:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00a      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006254:	4b83      	ldr	r3, [pc, #524]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800625a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006262:	4980      	ldr	r1, [pc, #512]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006264:	4313      	orrs	r3, r2
 8006266:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00a      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006276:	4b7b      	ldr	r3, [pc, #492]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800627c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006284:	4977      	ldr	r1, [pc, #476]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006286:	4313      	orrs	r3, r2
 8006288:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00a      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006298:	4b72      	ldr	r3, [pc, #456]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800629a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800629e:	f023 0203 	bic.w	r2, r3, #3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062a6:	496f      	ldr	r1, [pc, #444]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00a      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062ba:	4b6a      	ldr	r3, [pc, #424]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062c0:	f023 020c 	bic.w	r2, r3, #12
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062c8:	4966      	ldr	r1, [pc, #408]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00a      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062dc:	4b61      	ldr	r3, [pc, #388]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062e2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ea:	495e      	ldr	r1, [pc, #376]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00a      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062fe:	4b59      	ldr	r3, [pc, #356]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006304:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800630c:	4955      	ldr	r1, [pc, #340]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800630e:	4313      	orrs	r3, r2
 8006310:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00a      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006320:	4b50      	ldr	r3, [pc, #320]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006326:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800632e:	494d      	ldr	r1, [pc, #308]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006330:	4313      	orrs	r3, r2
 8006332:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00a      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006342:	4b48      	ldr	r3, [pc, #288]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006348:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006350:	4944      	ldr	r1, [pc, #272]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006352:	4313      	orrs	r3, r2
 8006354:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00a      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006364:	4b3f      	ldr	r3, [pc, #252]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800636a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006372:	493c      	ldr	r1, [pc, #240]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006374:	4313      	orrs	r3, r2
 8006376:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00a      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006386:	4b37      	ldr	r3, [pc, #220]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800638c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006394:	4933      	ldr	r1, [pc, #204]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006396:	4313      	orrs	r3, r2
 8006398:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80063a8:	4b2e      	ldr	r3, [pc, #184]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ae:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063b6:	492b      	ldr	r1, [pc, #172]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d011      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80063ca:	4b26      	ldr	r3, [pc, #152]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063d8:	4922      	ldr	r1, [pc, #136]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063e8:	d101      	bne.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80063ea:	2301      	movs	r3, #1
 80063ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0308 	and.w	r3, r3, #8
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80063fa:	2301      	movs	r3, #1
 80063fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00a      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800640a:	4b16      	ldr	r3, [pc, #88]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800640c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006410:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006418:	4912      	ldr	r1, [pc, #72]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800641a:	4313      	orrs	r3, r2
 800641c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00b      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800642c:	4b0d      	ldr	r3, [pc, #52]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800642e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006432:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800643c:	4909      	ldr	r1, [pc, #36]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800643e:	4313      	orrs	r3, r2
 8006440:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d006      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 80d9 	beq.w	800660a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006458:	4b02      	ldr	r3, [pc, #8]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a01      	ldr	r2, [pc, #4]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800645e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006462:	e001      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006464:	40023800 	.word	0x40023800
 8006468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800646a:	f7fe fc35 	bl	8004cd8 <HAL_GetTick>
 800646e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006470:	e008      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006472:	f7fe fc31 	bl	8004cd8 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b64      	cmp	r3, #100	@ 0x64
 800647e:	d901      	bls.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e194      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006484:	4b6c      	ldr	r3, [pc, #432]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1f0      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	2b00      	cmp	r3, #0
 800649a:	d021      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d11d      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80064a4:	4b64      	ldr	r3, [pc, #400]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064aa:	0c1b      	lsrs	r3, r3, #16
 80064ac:	f003 0303 	and.w	r3, r3, #3
 80064b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80064b2:	4b61      	ldr	r3, [pc, #388]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064b8:	0e1b      	lsrs	r3, r3, #24
 80064ba:	f003 030f 	and.w	r3, r3, #15
 80064be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	019a      	lsls	r2, r3, #6
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	041b      	lsls	r3, r3, #16
 80064ca:	431a      	orrs	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	061b      	lsls	r3, r3, #24
 80064d0:	431a      	orrs	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	071b      	lsls	r3, r3, #28
 80064d8:	4957      	ldr	r1, [pc, #348]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d004      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064f4:	d00a      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d02e      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006506:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800650a:	d129      	bne.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800650c:	4b4a      	ldr	r3, [pc, #296]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800650e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006512:	0c1b      	lsrs	r3, r3, #16
 8006514:	f003 0303 	and.w	r3, r3, #3
 8006518:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800651a:	4b47      	ldr	r3, [pc, #284]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800651c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006520:	0f1b      	lsrs	r3, r3, #28
 8006522:	f003 0307 	and.w	r3, r3, #7
 8006526:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	019a      	lsls	r2, r3, #6
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	041b      	lsls	r3, r3, #16
 8006532:	431a      	orrs	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	061b      	lsls	r3, r3, #24
 800653a:	431a      	orrs	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	071b      	lsls	r3, r3, #28
 8006540:	493d      	ldr	r1, [pc, #244]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006542:	4313      	orrs	r3, r2
 8006544:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006548:	4b3b      	ldr	r3, [pc, #236]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800654a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800654e:	f023 021f 	bic.w	r2, r3, #31
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006556:	3b01      	subs	r3, #1
 8006558:	4937      	ldr	r1, [pc, #220]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800655a:	4313      	orrs	r3, r2
 800655c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d01d      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800656c:	4b32      	ldr	r3, [pc, #200]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800656e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006572:	0e1b      	lsrs	r3, r3, #24
 8006574:	f003 030f 	and.w	r3, r3, #15
 8006578:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800657a:	4b2f      	ldr	r3, [pc, #188]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800657c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006580:	0f1b      	lsrs	r3, r3, #28
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	019a      	lsls	r2, r3, #6
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	041b      	lsls	r3, r3, #16
 8006594:	431a      	orrs	r2, r3
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	061b      	lsls	r3, r3, #24
 800659a:	431a      	orrs	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	071b      	lsls	r3, r3, #28
 80065a0:	4925      	ldr	r1, [pc, #148]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d011      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	019a      	lsls	r2, r3, #6
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	041b      	lsls	r3, r3, #16
 80065c0:	431a      	orrs	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	061b      	lsls	r3, r3, #24
 80065c8:	431a      	orrs	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	071b      	lsls	r3, r3, #28
 80065d0:	4919      	ldr	r1, [pc, #100]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80065d8:	4b17      	ldr	r3, [pc, #92]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a16      	ldr	r2, [pc, #88]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80065e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065e4:	f7fe fb78 	bl	8004cd8 <HAL_GetTick>
 80065e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065ea:	e008      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80065ec:	f7fe fb74 	bl	8004cd8 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b64      	cmp	r3, #100	@ 0x64
 80065f8:	d901      	bls.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e0d7      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0f0      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	2b01      	cmp	r3, #1
 800660e:	f040 80cd 	bne.w	80067ac <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006612:	4b09      	ldr	r3, [pc, #36]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a08      	ldr	r2, [pc, #32]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006618:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800661c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800661e:	f7fe fb5b 	bl	8004cd8 <HAL_GetTick>
 8006622:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006624:	e00a      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006626:	f7fe fb57 	bl	8004cd8 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	2b64      	cmp	r3, #100	@ 0x64
 8006632:	d903      	bls.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e0ba      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006638:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800663c:	4b5e      	ldr	r3, [pc, #376]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006644:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006648:	d0ed      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800665a:	2b00      	cmp	r3, #0
 800665c:	d009      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006666:	2b00      	cmp	r3, #0
 8006668:	d02e      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666e:	2b00      	cmp	r3, #0
 8006670:	d12a      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006672:	4b51      	ldr	r3, [pc, #324]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006678:	0c1b      	lsrs	r3, r3, #16
 800667a:	f003 0303 	and.w	r3, r3, #3
 800667e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006680:	4b4d      	ldr	r3, [pc, #308]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006686:	0f1b      	lsrs	r3, r3, #28
 8006688:	f003 0307 	and.w	r3, r3, #7
 800668c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	019a      	lsls	r2, r3, #6
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	041b      	lsls	r3, r3, #16
 8006698:	431a      	orrs	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	061b      	lsls	r3, r3, #24
 80066a0:	431a      	orrs	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	071b      	lsls	r3, r3, #28
 80066a6:	4944      	ldr	r1, [pc, #272]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80066ae:	4b42      	ldr	r3, [pc, #264]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066b4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066bc:	3b01      	subs	r3, #1
 80066be:	021b      	lsls	r3, r3, #8
 80066c0:	493d      	ldr	r1, [pc, #244]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d022      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066dc:	d11d      	bne.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80066de:	4b36      	ldr	r3, [pc, #216]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e4:	0e1b      	lsrs	r3, r3, #24
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80066ec:	4b32      	ldr	r3, [pc, #200]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066f2:	0f1b      	lsrs	r3, r3, #28
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	019a      	lsls	r2, r3, #6
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	041b      	lsls	r3, r3, #16
 8006706:	431a      	orrs	r2, r3
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	061b      	lsls	r3, r3, #24
 800670c:	431a      	orrs	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	071b      	lsls	r3, r3, #28
 8006712:	4929      	ldr	r1, [pc, #164]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006714:	4313      	orrs	r3, r2
 8006716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0308 	and.w	r3, r3, #8
 8006722:	2b00      	cmp	r3, #0
 8006724:	d028      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006726:	4b24      	ldr	r3, [pc, #144]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800672c:	0e1b      	lsrs	r3, r3, #24
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006734:	4b20      	ldr	r3, [pc, #128]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800673a:	0c1b      	lsrs	r3, r3, #16
 800673c:	f003 0303 	and.w	r3, r3, #3
 8006740:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	019a      	lsls	r2, r3, #6
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	041b      	lsls	r3, r3, #16
 800674c:	431a      	orrs	r2, r3
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	061b      	lsls	r3, r3, #24
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	071b      	lsls	r3, r3, #28
 800675a:	4917      	ldr	r1, [pc, #92]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800675c:	4313      	orrs	r3, r2
 800675e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006762:	4b15      	ldr	r3, [pc, #84]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006764:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006768:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006770:	4911      	ldr	r1, [pc, #68]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006772:	4313      	orrs	r3, r2
 8006774:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006778:	4b0f      	ldr	r3, [pc, #60]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a0e      	ldr	r2, [pc, #56]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800677e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006784:	f7fe faa8 	bl	8004cd8 <HAL_GetTick>
 8006788:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800678a:	e008      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800678c:	f7fe faa4 	bl	8004cd8 <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	2b64      	cmp	r3, #100	@ 0x64
 8006798:	d901      	bls.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e007      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800679e:	4b06      	ldr	r3, [pc, #24]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067aa:	d1ef      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3720      	adds	r7, #32
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	40023800 	.word	0x40023800

080067bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e09d      	b.n	800690a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d108      	bne.n	80067e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067de:	d009      	beq.n	80067f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	61da      	str	r2, [r3, #28]
 80067e6:	e005      	b.n	80067f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d106      	bne.n	8006814 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7fd fc14 	bl	800403c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2202      	movs	r2, #2
 8006818:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800682a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006834:	d902      	bls.n	800683c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006836:	2300      	movs	r3, #0
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	e002      	b.n	8006842 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800683c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006840:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800684a:	d007      	beq.n	800685c <HAL_SPI_Init+0xa0>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006854:	d002      	beq.n	800685c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800686c:	431a      	orrs	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	431a      	orrs	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800688a:	431a      	orrs	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006894:	431a      	orrs	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800689e:	ea42 0103 	orr.w	r1, r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	0c1b      	lsrs	r3, r3, #16
 80068b8:	f003 0204 	and.w	r2, r3, #4
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c0:	f003 0310 	and.w	r3, r3, #16
 80068c4:	431a      	orrs	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068ca:	f003 0308 	and.w	r3, r3, #8
 80068ce:	431a      	orrs	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80068d8:	ea42 0103 	orr.w	r1, r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69da      	ldr	r2, [r3, #28]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b088      	sub	sp, #32
 8006916:	af00      	add	r7, sp, #0
 8006918:	60f8      	str	r0, [r7, #12]
 800691a:	60b9      	str	r1, [r7, #8]
 800691c:	603b      	str	r3, [r7, #0]
 800691e:	4613      	mov	r3, r2
 8006920:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800692c:	2b01      	cmp	r3, #1
 800692e:	d101      	bne.n	8006934 <HAL_SPI_Transmit+0x22>
 8006930:	2302      	movs	r3, #2
 8006932:	e158      	b.n	8006be6 <HAL_SPI_Transmit+0x2d4>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800693c:	f7fe f9cc 	bl	8004cd8 <HAL_GetTick>
 8006940:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006942:	88fb      	ldrh	r3, [r7, #6]
 8006944:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b01      	cmp	r3, #1
 8006950:	d002      	beq.n	8006958 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006952:	2302      	movs	r3, #2
 8006954:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006956:	e13d      	b.n	8006bd4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d002      	beq.n	8006964 <HAL_SPI_Transmit+0x52>
 800695e:	88fb      	ldrh	r3, [r7, #6]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d102      	bne.n	800696a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006968:	e134      	b.n	8006bd4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2203      	movs	r2, #3
 800696e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	88fa      	ldrh	r2, [r7, #6]
 8006982:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	88fa      	ldrh	r2, [r7, #6]
 8006988:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069b4:	d10f      	bne.n	80069d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e0:	2b40      	cmp	r3, #64	@ 0x40
 80069e2:	d007      	beq.n	80069f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80069fc:	d94b      	bls.n	8006a96 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d002      	beq.n	8006a0c <HAL_SPI_Transmit+0xfa>
 8006a06:	8afb      	ldrh	r3, [r7, #22]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d13e      	bne.n	8006a8a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a10:	881a      	ldrh	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a1c:	1c9a      	adds	r2, r3, #2
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a30:	e02b      	b.n	8006a8a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d112      	bne.n	8006a66 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a44:	881a      	ldrh	r2, [r3, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a50:	1c9a      	adds	r2, r3, #2
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a64:	e011      	b.n	8006a8a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a66:	f7fe f937 	bl	8004cd8 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d803      	bhi.n	8006a7e <HAL_SPI_Transmit+0x16c>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7c:	d102      	bne.n	8006a84 <HAL_SPI_Transmit+0x172>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d102      	bne.n	8006a8a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a88:	e0a4      	b.n	8006bd4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1ce      	bne.n	8006a32 <HAL_SPI_Transmit+0x120>
 8006a94:	e07c      	b.n	8006b90 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <HAL_SPI_Transmit+0x192>
 8006a9e:	8afb      	ldrh	r3, [r7, #22]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d170      	bne.n	8006b86 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d912      	bls.n	8006ad4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab2:	881a      	ldrh	r2, [r3, #0]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006abe:	1c9a      	adds	r2, r3, #2
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	3b02      	subs	r3, #2
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ad2:	e058      	b.n	8006b86 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	330c      	adds	r3, #12
 8006ade:	7812      	ldrb	r2, [r2, #0]
 8006ae0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	3b01      	subs	r3, #1
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006afa:	e044      	b.n	8006b86 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d12b      	bne.n	8006b62 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d912      	bls.n	8006b3a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b18:	881a      	ldrh	r2, [r3, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b24:	1c9a      	adds	r2, r3, #2
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	3b02      	subs	r3, #2
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b38:	e025      	b.n	8006b86 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	330c      	adds	r3, #12
 8006b44:	7812      	ldrb	r2, [r2, #0]
 8006b46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4c:	1c5a      	adds	r2, r3, #1
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b60:	e011      	b.n	8006b86 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b62:	f7fe f8b9 	bl	8004cd8 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d803      	bhi.n	8006b7a <HAL_SPI_Transmit+0x268>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b78:	d102      	bne.n	8006b80 <HAL_SPI_Transmit+0x26e>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d102      	bne.n	8006b86 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b84:	e026      	b.n	8006bd4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1b5      	bne.n	8006afc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 fe1b 	bl	80077d0 <SPI_EndRxTxTransaction>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10a      	bne.n	8006bc4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bae:	2300      	movs	r3, #0
 8006bb0:	613b      	str	r3, [r7, #16]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	613b      	str	r3, [r7, #16]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	613b      	str	r3, [r7, #16]
 8006bc2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d002      	beq.n	8006bd2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	77fb      	strb	r3, [r7, #31]
 8006bd0:	e000      	b.n	8006bd4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006bd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006be4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3720      	adds	r7, #32
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b088      	sub	sp, #32
 8006bf2:	af02      	add	r7, sp, #8
 8006bf4:	60f8      	str	r0, [r7, #12]
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	603b      	str	r3, [r7, #0]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c0a:	d112      	bne.n	8006c32 <HAL_SPI_Receive+0x44>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10e      	bne.n	8006c32 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2204      	movs	r2, #4
 8006c18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006c1c:	88fa      	ldrh	r2, [r7, #6]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	9300      	str	r3, [sp, #0]
 8006c22:	4613      	mov	r3, r2
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	68b9      	ldr	r1, [r7, #8]
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 f910 	bl	8006e4e <HAL_SPI_TransmitReceive>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	e109      	b.n	8006e46 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d101      	bne.n	8006c40 <HAL_SPI_Receive+0x52>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e102      	b.n	8006e46 <HAL_SPI_Receive+0x258>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c48:	f7fe f846 	bl	8004cd8 <HAL_GetTick>
 8006c4c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d002      	beq.n	8006c60 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c5e:	e0e9      	b.n	8006e34 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d002      	beq.n	8006c6c <HAL_SPI_Receive+0x7e>
 8006c66:	88fb      	ldrh	r3, [r7, #6]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d102      	bne.n	8006c72 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c70:	e0e0      	b.n	8006e34 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2204      	movs	r2, #4
 8006c76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	88fa      	ldrh	r2, [r7, #6]
 8006c8a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	88fa      	ldrh	r2, [r7, #6]
 8006c92:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006cbc:	d908      	bls.n	8006cd0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006ccc:	605a      	str	r2, [r3, #4]
 8006cce:	e007      	b.n	8006ce0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006cde:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ce8:	d10f      	bne.n	8006d0a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cf8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006d08:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d14:	2b40      	cmp	r3, #64	@ 0x40
 8006d16:	d007      	beq.n	8006d28 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d26:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d30:	d867      	bhi.n	8006e02 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006d32:	e030      	b.n	8006d96 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d117      	bne.n	8006d72 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f103 020c 	add.w	r2, r3, #12
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d4e:	7812      	ldrb	r2, [r2, #0]
 8006d50:	b2d2      	uxtb	r2, r2
 8006d52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006d70:	e011      	b.n	8006d96 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d72:	f7fd ffb1 	bl	8004cd8 <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d803      	bhi.n	8006d8a <HAL_SPI_Receive+0x19c>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d88:	d102      	bne.n	8006d90 <HAL_SPI_Receive+0x1a2>
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d102      	bne.n	8006d96 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006d94:	e04e      	b.n	8006e34 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1c8      	bne.n	8006d34 <HAL_SPI_Receive+0x146>
 8006da2:	e034      	b.n	8006e0e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d115      	bne.n	8006dde <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68da      	ldr	r2, [r3, #12]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dbc:	b292      	uxth	r2, r2
 8006dbe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc4:	1c9a      	adds	r2, r3, #2
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006ddc:	e011      	b.n	8006e02 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dde:	f7fd ff7b 	bl	8004cd8 <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d803      	bhi.n	8006df6 <HAL_SPI_Receive+0x208>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df4:	d102      	bne.n	8006dfc <HAL_SPI_Receive+0x20e>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d102      	bne.n	8006e02 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006e00:	e018      	b.n	8006e34 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1ca      	bne.n	8006da4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f000 fc60 	bl	80076d8 <SPI_EndRxTransaction>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2220      	movs	r2, #32
 8006e22:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d002      	beq.n	8006e32 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	75fb      	strb	r3, [r7, #23]
 8006e30:	e000      	b.n	8006e34 <HAL_SPI_Receive+0x246>
  }

error :
 8006e32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b08a      	sub	sp, #40	@ 0x28
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	60f8      	str	r0, [r7, #12]
 8006e56:	60b9      	str	r1, [r7, #8]
 8006e58:	607a      	str	r2, [r7, #4]
 8006e5a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d101      	bne.n	8006e74 <HAL_SPI_TransmitReceive+0x26>
 8006e70:	2302      	movs	r3, #2
 8006e72:	e1fb      	b.n	800726c <HAL_SPI_TransmitReceive+0x41e>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e7c:	f7fd ff2c 	bl	8004cd8 <HAL_GetTick>
 8006e80:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e88:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006e90:	887b      	ldrh	r3, [r7, #2]
 8006e92:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006e94:	887b      	ldrh	r3, [r7, #2]
 8006e96:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e98:	7efb      	ldrb	r3, [r7, #27]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d00e      	beq.n	8006ebc <HAL_SPI_TransmitReceive+0x6e>
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ea4:	d106      	bne.n	8006eb4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d102      	bne.n	8006eb4 <HAL_SPI_TransmitReceive+0x66>
 8006eae:	7efb      	ldrb	r3, [r7, #27]
 8006eb0:	2b04      	cmp	r3, #4
 8006eb2:	d003      	beq.n	8006ebc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006eba:	e1cd      	b.n	8007258 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d005      	beq.n	8006ece <HAL_SPI_TransmitReceive+0x80>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d002      	beq.n	8006ece <HAL_SPI_TransmitReceive+0x80>
 8006ec8:	887b      	ldrh	r3, [r7, #2]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d103      	bne.n	8006ed6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006ed4:	e1c0      	b.n	8007258 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d003      	beq.n	8006eea <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2205      	movs	r2, #5
 8006ee6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	887a      	ldrh	r2, [r7, #2]
 8006efa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	887a      	ldrh	r2, [r7, #2]
 8006f02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	887a      	ldrh	r2, [r7, #2]
 8006f10:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	887a      	ldrh	r2, [r7, #2]
 8006f16:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006f2c:	d802      	bhi.n	8006f34 <HAL_SPI_TransmitReceive+0xe6>
 8006f2e:	8a3b      	ldrh	r3, [r7, #16]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d908      	bls.n	8006f46 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006f42:	605a      	str	r2, [r3, #4]
 8006f44:	e007      	b.n	8006f56 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f54:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f60:	2b40      	cmp	r3, #64	@ 0x40
 8006f62:	d007      	beq.n	8006f74 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006f7c:	d97c      	bls.n	8007078 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <HAL_SPI_TransmitReceive+0x13e>
 8006f86:	8a7b      	ldrh	r3, [r7, #18]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d169      	bne.n	8007060 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f90:	881a      	ldrh	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9c:	1c9a      	adds	r2, r3, #2
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fb0:	e056      	b.n	8007060 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f003 0302 	and.w	r3, r3, #2
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d11b      	bne.n	8006ff8 <HAL_SPI_TransmitReceive+0x1aa>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d016      	beq.n	8006ff8 <HAL_SPI_TransmitReceive+0x1aa>
 8006fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d113      	bne.n	8006ff8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd4:	881a      	ldrh	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe0:	1c9a      	adds	r2, r3, #2
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	3b01      	subs	r3, #1
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b01      	cmp	r3, #1
 8007004:	d11c      	bne.n	8007040 <HAL_SPI_TransmitReceive+0x1f2>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d016      	beq.n	8007040 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68da      	ldr	r2, [r3, #12]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701c:	b292      	uxth	r2, r2
 800701e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007024:	1c9a      	adds	r2, r3, #2
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007030:	b29b      	uxth	r3, r3
 8007032:	3b01      	subs	r3, #1
 8007034:	b29a      	uxth	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800703c:	2301      	movs	r3, #1
 800703e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007040:	f7fd fe4a 	bl	8004cd8 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800704c:	429a      	cmp	r2, r3
 800704e:	d807      	bhi.n	8007060 <HAL_SPI_TransmitReceive+0x212>
 8007050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007056:	d003      	beq.n	8007060 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 800705e:	e0fb      	b.n	8007258 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007064:	b29b      	uxth	r3, r3
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1a3      	bne.n	8006fb2 <HAL_SPI_TransmitReceive+0x164>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007070:	b29b      	uxth	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d19d      	bne.n	8006fb2 <HAL_SPI_TransmitReceive+0x164>
 8007076:	e0df      	b.n	8007238 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <HAL_SPI_TransmitReceive+0x23a>
 8007080:	8a7b      	ldrh	r3, [r7, #18]
 8007082:	2b01      	cmp	r3, #1
 8007084:	f040 80cb 	bne.w	800721e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800708c:	b29b      	uxth	r3, r3
 800708e:	2b01      	cmp	r3, #1
 8007090:	d912      	bls.n	80070b8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007096:	881a      	ldrh	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a2:	1c9a      	adds	r2, r3, #2
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	3b02      	subs	r3, #2
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80070b6:	e0b2      	b.n	800721e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	330c      	adds	r3, #12
 80070c2:	7812      	ldrb	r2, [r2, #0]
 80070c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ca:	1c5a      	adds	r2, r3, #1
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b29a      	uxth	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070de:	e09e      	b.n	800721e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d134      	bne.n	8007158 <HAL_SPI_TransmitReceive+0x30a>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d02f      	beq.n	8007158 <HAL_SPI_TransmitReceive+0x30a>
 80070f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d12c      	bne.n	8007158 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007102:	b29b      	uxth	r3, r3
 8007104:	2b01      	cmp	r3, #1
 8007106:	d912      	bls.n	800712e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800710c:	881a      	ldrh	r2, [r3, #0]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007118:	1c9a      	adds	r2, r3, #2
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007122:	b29b      	uxth	r3, r3
 8007124:	3b02      	subs	r3, #2
 8007126:	b29a      	uxth	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800712c:	e012      	b.n	8007154 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	330c      	adds	r3, #12
 8007138:	7812      	ldrb	r2, [r2, #0]
 800713a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007140:	1c5a      	adds	r2, r3, #1
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800714a:	b29b      	uxth	r3, r3
 800714c:	3b01      	subs	r3, #1
 800714e:	b29a      	uxth	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007154:	2300      	movs	r3, #0
 8007156:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b01      	cmp	r3, #1
 8007164:	d148      	bne.n	80071f8 <HAL_SPI_TransmitReceive+0x3aa>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800716c:	b29b      	uxth	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d042      	beq.n	80071f8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007178:	b29b      	uxth	r3, r3
 800717a:	2b01      	cmp	r3, #1
 800717c:	d923      	bls.n	80071c6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68da      	ldr	r2, [r3, #12]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007188:	b292      	uxth	r2, r2
 800718a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007190:	1c9a      	adds	r2, r3, #2
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800719c:	b29b      	uxth	r3, r3
 800719e:	3b02      	subs	r3, #2
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d81f      	bhi.n	80071f4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80071c2:	605a      	str	r2, [r3, #4]
 80071c4:	e016      	b.n	80071f4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f103 020c 	add.w	r2, r3, #12
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d2:	7812      	ldrb	r2, [r2, #0]
 80071d4:	b2d2      	uxtb	r2, r2
 80071d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071dc:	1c5a      	adds	r2, r3, #1
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	3b01      	subs	r3, #1
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80071f4:	2301      	movs	r3, #1
 80071f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80071f8:	f7fd fd6e 	bl	8004cd8 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007204:	429a      	cmp	r2, r3
 8007206:	d803      	bhi.n	8007210 <HAL_SPI_TransmitReceive+0x3c2>
 8007208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720e:	d102      	bne.n	8007216 <HAL_SPI_TransmitReceive+0x3c8>
 8007210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007212:	2b00      	cmp	r3, #0
 8007214:	d103      	bne.n	800721e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 800721c:	e01c      	b.n	8007258 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007222:	b29b      	uxth	r3, r3
 8007224:	2b00      	cmp	r3, #0
 8007226:	f47f af5b 	bne.w	80070e0 <HAL_SPI_TransmitReceive+0x292>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007230:	b29b      	uxth	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	f47f af54 	bne.w	80070e0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007238:	69fa      	ldr	r2, [r7, #28]
 800723a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f000 fac7 	bl	80077d0 <SPI_EndRxTxTransaction>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d006      	beq.n	8007256 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2220      	movs	r2, #32
 8007252:	661a      	str	r2, [r3, #96]	@ 0x60
 8007254:	e000      	b.n	8007258 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007256:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007268:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800726c:	4618      	mov	r0, r3
 800726e:	3728      	adds	r7, #40	@ 0x28
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b088      	sub	sp, #32
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10e      	bne.n	80072b4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800729c:	2b00      	cmp	r3, #0
 800729e:	d009      	beq.n	80072b4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d004      	beq.n	80072b4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	4798      	blx	r3
    return;
 80072b2:	e0ce      	b.n	8007452 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d009      	beq.n	80072d2 <HAL_SPI_IRQHandler+0x5e>
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d004      	beq.n	80072d2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	4798      	blx	r3
    return;
 80072d0:	e0bf      	b.n	8007452 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	f003 0320 	and.w	r3, r3, #32
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10a      	bne.n	80072f2 <HAL_SPI_IRQHandler+0x7e>
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d105      	bne.n	80072f2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 80b0 	beq.w	8007452 <HAL_SPI_IRQHandler+0x1de>
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	f003 0320 	and.w	r3, r3, #32
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 80aa 	beq.w	8007452 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007304:	2b00      	cmp	r3, #0
 8007306:	d023      	beq.n	8007350 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800730e:	b2db      	uxtb	r3, r3
 8007310:	2b03      	cmp	r3, #3
 8007312:	d011      	beq.n	8007338 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007318:	f043 0204 	orr.w	r2, r3, #4
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007320:	2300      	movs	r3, #0
 8007322:	617b      	str	r3, [r7, #20]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	617b      	str	r3, [r7, #20]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	617b      	str	r3, [r7, #20]
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	e00b      	b.n	8007350 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007338:	2300      	movs	r3, #0
 800733a:	613b      	str	r3, [r7, #16]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	613b      	str	r3, [r7, #16]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	613b      	str	r3, [r7, #16]
 800734c:	693b      	ldr	r3, [r7, #16]
        return;
 800734e:	e080      	b.n	8007452 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	f003 0320 	and.w	r3, r3, #32
 8007356:	2b00      	cmp	r3, #0
 8007358:	d014      	beq.n	8007384 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800735e:	f043 0201 	orr.w	r2, r3, #1
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007366:	2300      	movs	r3, #0
 8007368:	60fb      	str	r3, [r7, #12]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	60fb      	str	r3, [r7, #12]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00c      	beq.n	80073a8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007392:	f043 0208 	orr.w	r2, r3, #8
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800739a:	2300      	movs	r3, #0
 800739c:	60bb      	str	r3, [r7, #8]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	60bb      	str	r3, [r7, #8]
 80073a6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d04f      	beq.n	8007450 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80073be:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d104      	bne.n	80073dc <HAL_SPI_IRQHandler+0x168>
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d034      	beq.n	8007446 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f022 0203 	bic.w	r2, r2, #3
 80073ea:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d011      	beq.n	8007418 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073f8:	4a17      	ldr	r2, [pc, #92]	@ (8007458 <HAL_SPI_IRQHandler+0x1e4>)
 80073fa:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007400:	4618      	mov	r0, r3
 8007402:	f7fd fdaa 	bl	8004f5a <HAL_DMA_Abort_IT>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d005      	beq.n	8007418 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007410:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800741c:	2b00      	cmp	r3, #0
 800741e:	d016      	beq.n	800744e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007424:	4a0c      	ldr	r2, [pc, #48]	@ (8007458 <HAL_SPI_IRQHandler+0x1e4>)
 8007426:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800742c:	4618      	mov	r0, r3
 800742e:	f7fd fd94 	bl	8004f5a <HAL_DMA_Abort_IT>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00a      	beq.n	800744e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800743c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8007444:	e003      	b.n	800744e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f808 	bl	800745c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800744c:	e000      	b.n	8007450 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800744e:	bf00      	nop
    return;
 8007450:	bf00      	nop
  }
}
 8007452:	3720      	adds	r7, #32
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	08007471 	.word	0x08007471

0800745c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800747c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f7ff ffe5 	bl	800745c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007492:	bf00      	nop
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
	...

0800749c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b088      	sub	sp, #32
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	603b      	str	r3, [r7, #0]
 80074a8:	4613      	mov	r3, r2
 80074aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80074ac:	f7fd fc14 	bl	8004cd8 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b4:	1a9b      	subs	r3, r3, r2
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	4413      	add	r3, r2
 80074ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80074bc:	f7fd fc0c 	bl	8004cd8 <HAL_GetTick>
 80074c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80074c2:	4b39      	ldr	r3, [pc, #228]	@ (80075a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	015b      	lsls	r3, r3, #5
 80074c8:	0d1b      	lsrs	r3, r3, #20
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	fb02 f303 	mul.w	r3, r2, r3
 80074d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074d2:	e054      	b.n	800757e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074da:	d050      	beq.n	800757e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074dc:	f7fd fbfc 	bl	8004cd8 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	69fa      	ldr	r2, [r7, #28]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d902      	bls.n	80074f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d13d      	bne.n	800756e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007500:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800750a:	d111      	bne.n	8007530 <SPI_WaitFlagStateUntilTimeout+0x94>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007514:	d004      	beq.n	8007520 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800751e:	d107      	bne.n	8007530 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800752e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007538:	d10f      	bne.n	800755a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007558:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e017      	b.n	800759e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	3b01      	subs	r3, #1
 800757c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689a      	ldr	r2, [r3, #8]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	4013      	ands	r3, r2
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	429a      	cmp	r2, r3
 800758c:	bf0c      	ite	eq
 800758e:	2301      	moveq	r3, #1
 8007590:	2300      	movne	r3, #0
 8007592:	b2db      	uxtb	r3, r3
 8007594:	461a      	mov	r2, r3
 8007596:	79fb      	ldrb	r3, [r7, #7]
 8007598:	429a      	cmp	r2, r3
 800759a:	d19b      	bne.n	80074d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3720      	adds	r7, #32
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	20000128 	.word	0x20000128

080075ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b08a      	sub	sp, #40	@ 0x28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80075ba:	2300      	movs	r3, #0
 80075bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80075be:	f7fd fb8b 	bl	8004cd8 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c6:	1a9b      	subs	r3, r3, r2
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	4413      	add	r3, r2
 80075cc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80075ce:	f7fd fb83 	bl	8004cd8 <HAL_GetTick>
 80075d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	330c      	adds	r3, #12
 80075da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80075dc:	4b3d      	ldr	r3, [pc, #244]	@ (80076d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	4613      	mov	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	00da      	lsls	r2, r3, #3
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	0d1b      	lsrs	r3, r3, #20
 80075ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ee:	fb02 f303 	mul.w	r3, r2, r3
 80075f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80075f4:	e060      	b.n	80076b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80075fc:	d107      	bne.n	800760e <SPI_WaitFifoStateUntilTimeout+0x62>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d104      	bne.n	800760e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	b2db      	uxtb	r3, r3
 800760a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800760c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007614:	d050      	beq.n	80076b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007616:	f7fd fb5f 	bl	8004cd8 <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007622:	429a      	cmp	r2, r3
 8007624:	d902      	bls.n	800762c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007628:	2b00      	cmp	r3, #0
 800762a:	d13d      	bne.n	80076a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800763a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007644:	d111      	bne.n	800766a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800764e:	d004      	beq.n	800765a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007658:	d107      	bne.n	800766a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007668:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007672:	d10f      	bne.n	8007694 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007692:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e010      	b.n	80076ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d101      	bne.n	80076b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	3b01      	subs	r3, #1
 80076b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689a      	ldr	r2, [r3, #8]
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	4013      	ands	r3, r2
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d196      	bne.n	80075f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3728      	adds	r7, #40	@ 0x28
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	20000128 	.word	0x20000128

080076d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b088      	sub	sp, #32
 80076dc:	af02      	add	r7, sp, #8
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076ec:	d111      	bne.n	8007712 <SPI_EndRxTransaction+0x3a>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076f6:	d004      	beq.n	8007702 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007700:	d107      	bne.n	8007712 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007710:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800771a:	d112      	bne.n	8007742 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	2200      	movs	r2, #0
 8007724:	2180      	movs	r1, #128	@ 0x80
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f7ff feb8 	bl	800749c <SPI_WaitFlagStateUntilTimeout>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d021      	beq.n	8007776 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007736:	f043 0220 	orr.w	r2, r3, #32
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e03d      	b.n	80077be <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007742:	4b21      	ldr	r3, [pc, #132]	@ (80077c8 <SPI_EndRxTransaction+0xf0>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a21      	ldr	r2, [pc, #132]	@ (80077cc <SPI_EndRxTransaction+0xf4>)
 8007748:	fba2 2303 	umull	r2, r3, r2, r3
 800774c:	0d5b      	lsrs	r3, r3, #21
 800774e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007752:	fb02 f303 	mul.w	r3, r2, r3
 8007756:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00a      	beq.n	8007774 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	3b01      	subs	r3, #1
 8007762:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800776e:	2b80      	cmp	r3, #128	@ 0x80
 8007770:	d0f2      	beq.n	8007758 <SPI_EndRxTransaction+0x80>
 8007772:	e000      	b.n	8007776 <SPI_EndRxTransaction+0x9e>
        break;
 8007774:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800777e:	d11d      	bne.n	80077bc <SPI_EndRxTransaction+0xe4>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007788:	d004      	beq.n	8007794 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007792:	d113      	bne.n	80077bc <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2200      	movs	r2, #0
 800779c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f7ff ff03 	bl	80075ac <SPI_WaitFifoStateUntilTimeout>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d007      	beq.n	80077bc <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077b0:	f043 0220 	orr.w	r2, r3, #32
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e000      	b.n	80077be <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	20000128 	.word	0x20000128
 80077cc:	165e9f81 	.word	0x165e9f81

080077d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b088      	sub	sp, #32
 80077d4:	af02      	add	r7, sp, #8
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f7ff fedf 	bl	80075ac <SPI_WaitFifoStateUntilTimeout>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d007      	beq.n	8007804 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077f8:	f043 0220 	orr.w	r2, r3, #32
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e046      	b.n	8007892 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007804:	4b25      	ldr	r3, [pc, #148]	@ (800789c <SPI_EndRxTxTransaction+0xcc>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a25      	ldr	r2, [pc, #148]	@ (80078a0 <SPI_EndRxTxTransaction+0xd0>)
 800780a:	fba2 2303 	umull	r2, r3, r2, r3
 800780e:	0d5b      	lsrs	r3, r3, #21
 8007810:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007814:	fb02 f303 	mul.w	r3, r2, r3
 8007818:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007822:	d112      	bne.n	800784a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2200      	movs	r2, #0
 800782c:	2180      	movs	r1, #128	@ 0x80
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f7ff fe34 	bl	800749c <SPI_WaitFlagStateUntilTimeout>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d016      	beq.n	8007868 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800783e:	f043 0220 	orr.w	r2, r3, #32
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e023      	b.n	8007892 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00a      	beq.n	8007866 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	3b01      	subs	r3, #1
 8007854:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007860:	2b80      	cmp	r3, #128	@ 0x80
 8007862:	d0f2      	beq.n	800784a <SPI_EndRxTxTransaction+0x7a>
 8007864:	e000      	b.n	8007868 <SPI_EndRxTxTransaction+0x98>
        break;
 8007866:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	9300      	str	r3, [sp, #0]
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2200      	movs	r2, #0
 8007870:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f7ff fe99 	bl	80075ac <SPI_WaitFifoStateUntilTimeout>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d007      	beq.n	8007890 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007884:	f043 0220 	orr.w	r2, r3, #32
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e000      	b.n	8007892 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3718      	adds	r7, #24
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	20000128 	.word	0x20000128
 80078a0:	165e9f81 	.word	0x165e9f81

080078a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e049      	b.n	800794a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d106      	bne.n	80078d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7fc ff08 	bl	80046e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	3304      	adds	r3, #4
 80078e0:	4619      	mov	r1, r3
 80078e2:	4610      	mov	r0, r2
 80078e4:	f000 fdde 	bl	80084a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
	...

08007954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b01      	cmp	r3, #1
 8007966:	d001      	beq.n	800796c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e054      	b.n	8007a16 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2202      	movs	r2, #2
 8007970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68da      	ldr	r2, [r3, #12]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f042 0201 	orr.w	r2, r2, #1
 8007982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a26      	ldr	r2, [pc, #152]	@ (8007a24 <HAL_TIM_Base_Start_IT+0xd0>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d022      	beq.n	80079d4 <HAL_TIM_Base_Start_IT+0x80>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007996:	d01d      	beq.n	80079d4 <HAL_TIM_Base_Start_IT+0x80>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a22      	ldr	r2, [pc, #136]	@ (8007a28 <HAL_TIM_Base_Start_IT+0xd4>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d018      	beq.n	80079d4 <HAL_TIM_Base_Start_IT+0x80>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a21      	ldr	r2, [pc, #132]	@ (8007a2c <HAL_TIM_Base_Start_IT+0xd8>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d013      	beq.n	80079d4 <HAL_TIM_Base_Start_IT+0x80>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a1f      	ldr	r2, [pc, #124]	@ (8007a30 <HAL_TIM_Base_Start_IT+0xdc>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d00e      	beq.n	80079d4 <HAL_TIM_Base_Start_IT+0x80>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a1e      	ldr	r2, [pc, #120]	@ (8007a34 <HAL_TIM_Base_Start_IT+0xe0>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d009      	beq.n	80079d4 <HAL_TIM_Base_Start_IT+0x80>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007a38 <HAL_TIM_Base_Start_IT+0xe4>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d004      	beq.n	80079d4 <HAL_TIM_Base_Start_IT+0x80>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a1b      	ldr	r2, [pc, #108]	@ (8007a3c <HAL_TIM_Base_Start_IT+0xe8>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d115      	bne.n	8007a00 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	689a      	ldr	r2, [r3, #8]
 80079da:	4b19      	ldr	r3, [pc, #100]	@ (8007a40 <HAL_TIM_Base_Start_IT+0xec>)
 80079dc:	4013      	ands	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2b06      	cmp	r3, #6
 80079e4:	d015      	beq.n	8007a12 <HAL_TIM_Base_Start_IT+0xbe>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079ec:	d011      	beq.n	8007a12 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f042 0201 	orr.w	r2, r2, #1
 80079fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079fe:	e008      	b.n	8007a12 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f042 0201 	orr.w	r2, r2, #1
 8007a0e:	601a      	str	r2, [r3, #0]
 8007a10:	e000      	b.n	8007a14 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	40010000 	.word	0x40010000
 8007a28:	40000400 	.word	0x40000400
 8007a2c:	40000800 	.word	0x40000800
 8007a30:	40000c00 	.word	0x40000c00
 8007a34:	40010400 	.word	0x40010400
 8007a38:	40014000 	.word	0x40014000
 8007a3c:	40001800 	.word	0x40001800
 8007a40:	00010007 	.word	0x00010007

08007a44 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68da      	ldr	r2, [r3, #12]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f022 0201 	bic.w	r2, r2, #1
 8007a5a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6a1a      	ldr	r2, [r3, #32]
 8007a62:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007a66:	4013      	ands	r3, r2
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10f      	bne.n	8007a8c <HAL_TIM_Base_Stop_IT+0x48>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6a1a      	ldr	r2, [r3, #32]
 8007a72:	f240 4344 	movw	r3, #1092	@ 0x444
 8007a76:	4013      	ands	r3, r2
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d107      	bne.n	8007a8c <HAL_TIM_Base_Stop_IT+0x48>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 0201 	bic.w	r2, r2, #1
 8007a8a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b082      	sub	sp, #8
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e049      	b.n	8007b48 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d106      	bne.n	8007ace <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f841 	bl	8007b50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	3304      	adds	r3, #4
 8007ade:	4619      	mov	r1, r3
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	f000 fcdf 	bl	80084a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2201      	movs	r2, #1
 8007b22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d109      	bne.n	8007b88 <HAL_TIM_PWM_Start+0x24>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	bf14      	ite	ne
 8007b80:	2301      	movne	r3, #1
 8007b82:	2300      	moveq	r3, #0
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	e03c      	b.n	8007c02 <HAL_TIM_PWM_Start+0x9e>
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2b04      	cmp	r3, #4
 8007b8c:	d109      	bne.n	8007ba2 <HAL_TIM_PWM_Start+0x3e>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	bf14      	ite	ne
 8007b9a:	2301      	movne	r3, #1
 8007b9c:	2300      	moveq	r3, #0
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	e02f      	b.n	8007c02 <HAL_TIM_PWM_Start+0x9e>
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2b08      	cmp	r3, #8
 8007ba6:	d109      	bne.n	8007bbc <HAL_TIM_PWM_Start+0x58>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	bf14      	ite	ne
 8007bb4:	2301      	movne	r3, #1
 8007bb6:	2300      	moveq	r3, #0
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	e022      	b.n	8007c02 <HAL_TIM_PWM_Start+0x9e>
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	2b0c      	cmp	r3, #12
 8007bc0:	d109      	bne.n	8007bd6 <HAL_TIM_PWM_Start+0x72>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	bf14      	ite	ne
 8007bce:	2301      	movne	r3, #1
 8007bd0:	2300      	moveq	r3, #0
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	e015      	b.n	8007c02 <HAL_TIM_PWM_Start+0x9e>
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	2b10      	cmp	r3, #16
 8007bda:	d109      	bne.n	8007bf0 <HAL_TIM_PWM_Start+0x8c>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	bf14      	ite	ne
 8007be8:	2301      	movne	r3, #1
 8007bea:	2300      	moveq	r3, #0
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	e008      	b.n	8007c02 <HAL_TIM_PWM_Start+0x9e>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	bf14      	ite	ne
 8007bfc:	2301      	movne	r3, #1
 8007bfe:	2300      	moveq	r3, #0
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e092      	b.n	8007d30 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d104      	bne.n	8007c1a <HAL_TIM_PWM_Start+0xb6>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2202      	movs	r2, #2
 8007c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c18:	e023      	b.n	8007c62 <HAL_TIM_PWM_Start+0xfe>
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	2b04      	cmp	r3, #4
 8007c1e:	d104      	bne.n	8007c2a <HAL_TIM_PWM_Start+0xc6>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2202      	movs	r2, #2
 8007c24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c28:	e01b      	b.n	8007c62 <HAL_TIM_PWM_Start+0xfe>
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b08      	cmp	r3, #8
 8007c2e:	d104      	bne.n	8007c3a <HAL_TIM_PWM_Start+0xd6>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c38:	e013      	b.n	8007c62 <HAL_TIM_PWM_Start+0xfe>
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	2b0c      	cmp	r3, #12
 8007c3e:	d104      	bne.n	8007c4a <HAL_TIM_PWM_Start+0xe6>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2202      	movs	r2, #2
 8007c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c48:	e00b      	b.n	8007c62 <HAL_TIM_PWM_Start+0xfe>
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b10      	cmp	r3, #16
 8007c4e:	d104      	bne.n	8007c5a <HAL_TIM_PWM_Start+0xf6>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2202      	movs	r2, #2
 8007c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c58:	e003      	b.n	8007c62 <HAL_TIM_PWM_Start+0xfe>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2201      	movs	r2, #1
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 ffb2 	bl	8008bd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a30      	ldr	r2, [pc, #192]	@ (8007d38 <HAL_TIM_PWM_Start+0x1d4>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d004      	beq.n	8007c84 <HAL_TIM_PWM_Start+0x120>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a2f      	ldr	r2, [pc, #188]	@ (8007d3c <HAL_TIM_PWM_Start+0x1d8>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d101      	bne.n	8007c88 <HAL_TIM_PWM_Start+0x124>
 8007c84:	2301      	movs	r3, #1
 8007c86:	e000      	b.n	8007c8a <HAL_TIM_PWM_Start+0x126>
 8007c88:	2300      	movs	r3, #0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d007      	beq.n	8007c9e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c9c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a25      	ldr	r2, [pc, #148]	@ (8007d38 <HAL_TIM_PWM_Start+0x1d4>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d022      	beq.n	8007cee <HAL_TIM_PWM_Start+0x18a>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cb0:	d01d      	beq.n	8007cee <HAL_TIM_PWM_Start+0x18a>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a22      	ldr	r2, [pc, #136]	@ (8007d40 <HAL_TIM_PWM_Start+0x1dc>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d018      	beq.n	8007cee <HAL_TIM_PWM_Start+0x18a>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a20      	ldr	r2, [pc, #128]	@ (8007d44 <HAL_TIM_PWM_Start+0x1e0>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d013      	beq.n	8007cee <HAL_TIM_PWM_Start+0x18a>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a1f      	ldr	r2, [pc, #124]	@ (8007d48 <HAL_TIM_PWM_Start+0x1e4>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d00e      	beq.n	8007cee <HAL_TIM_PWM_Start+0x18a>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a19      	ldr	r2, [pc, #100]	@ (8007d3c <HAL_TIM_PWM_Start+0x1d8>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d009      	beq.n	8007cee <HAL_TIM_PWM_Start+0x18a>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a1b      	ldr	r2, [pc, #108]	@ (8007d4c <HAL_TIM_PWM_Start+0x1e8>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d004      	beq.n	8007cee <HAL_TIM_PWM_Start+0x18a>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a19      	ldr	r2, [pc, #100]	@ (8007d50 <HAL_TIM_PWM_Start+0x1ec>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d115      	bne.n	8007d1a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689a      	ldr	r2, [r3, #8]
 8007cf4:	4b17      	ldr	r3, [pc, #92]	@ (8007d54 <HAL_TIM_PWM_Start+0x1f0>)
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2b06      	cmp	r3, #6
 8007cfe:	d015      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x1c8>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d06:	d011      	beq.n	8007d2c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f042 0201 	orr.w	r2, r2, #1
 8007d16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d18:	e008      	b.n	8007d2c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f042 0201 	orr.w	r2, r2, #1
 8007d28:	601a      	str	r2, [r3, #0]
 8007d2a:	e000      	b.n	8007d2e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	40010000 	.word	0x40010000
 8007d3c:	40010400 	.word	0x40010400
 8007d40:	40000400 	.word	0x40000400
 8007d44:	40000800 	.word	0x40000800
 8007d48:	40000c00 	.word	0x40000c00
 8007d4c:	40014000 	.word	0x40014000
 8007d50:	40001800 	.word	0x40001800
 8007d54:	00010007 	.word	0x00010007

08007d58 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2200      	movs	r2, #0
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 ff32 	bl	8008bd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a36      	ldr	r2, [pc, #216]	@ (8007e50 <HAL_TIM_PWM_Stop+0xf8>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d004      	beq.n	8007d84 <HAL_TIM_PWM_Stop+0x2c>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a35      	ldr	r2, [pc, #212]	@ (8007e54 <HAL_TIM_PWM_Stop+0xfc>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d101      	bne.n	8007d88 <HAL_TIM_PWM_Stop+0x30>
 8007d84:	2301      	movs	r3, #1
 8007d86:	e000      	b.n	8007d8a <HAL_TIM_PWM_Stop+0x32>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d017      	beq.n	8007dbe <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	6a1a      	ldr	r2, [r3, #32]
 8007d94:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007d98:	4013      	ands	r3, r2
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10f      	bne.n	8007dbe <HAL_TIM_PWM_Stop+0x66>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	6a1a      	ldr	r2, [r3, #32]
 8007da4:	f240 4344 	movw	r3, #1092	@ 0x444
 8007da8:	4013      	ands	r3, r2
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d107      	bne.n	8007dbe <HAL_TIM_PWM_Stop+0x66>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007dbc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6a1a      	ldr	r2, [r3, #32]
 8007dc4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007dc8:	4013      	ands	r3, r2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10f      	bne.n	8007dee <HAL_TIM_PWM_Stop+0x96>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	6a1a      	ldr	r2, [r3, #32]
 8007dd4:	f240 4344 	movw	r3, #1092	@ 0x444
 8007dd8:	4013      	ands	r3, r2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d107      	bne.n	8007dee <HAL_TIM_PWM_Stop+0x96>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f022 0201 	bic.w	r2, r2, #1
 8007dec:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d104      	bne.n	8007dfe <HAL_TIM_PWM_Stop+0xa6>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dfc:	e023      	b.n	8007e46 <HAL_TIM_PWM_Stop+0xee>
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	2b04      	cmp	r3, #4
 8007e02:	d104      	bne.n	8007e0e <HAL_TIM_PWM_Stop+0xb6>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e0c:	e01b      	b.n	8007e46 <HAL_TIM_PWM_Stop+0xee>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	d104      	bne.n	8007e1e <HAL_TIM_PWM_Stop+0xc6>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e1c:	e013      	b.n	8007e46 <HAL_TIM_PWM_Stop+0xee>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b0c      	cmp	r3, #12
 8007e22:	d104      	bne.n	8007e2e <HAL_TIM_PWM_Stop+0xd6>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e2c:	e00b      	b.n	8007e46 <HAL_TIM_PWM_Stop+0xee>
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b10      	cmp	r3, #16
 8007e32:	d104      	bne.n	8007e3e <HAL_TIM_PWM_Stop+0xe6>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e3c:	e003      	b.n	8007e46 <HAL_TIM_PWM_Stop+0xee>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	40010000 	.word	0x40010000
 8007e54:	40010400 	.word	0x40010400

08007e58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d122      	bne.n	8007eb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d11b      	bne.n	8007eb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f06f 0202 	mvn.w	r2, #2
 8007e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	f003 0303 	and.w	r3, r3, #3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fae4 	bl	8008468 <HAL_TIM_IC_CaptureCallback>
 8007ea0:	e005      	b.n	8007eae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fad6 	bl	8008454 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fae7 	bl	800847c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	f003 0304 	and.w	r3, r3, #4
 8007ebe:	2b04      	cmp	r3, #4
 8007ec0:	d122      	bne.n	8007f08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	f003 0304 	and.w	r3, r3, #4
 8007ecc:	2b04      	cmp	r3, #4
 8007ece:	d11b      	bne.n	8007f08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f06f 0204 	mvn.w	r2, #4
 8007ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2202      	movs	r2, #2
 8007ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 faba 	bl	8008468 <HAL_TIM_IC_CaptureCallback>
 8007ef4:	e005      	b.n	8007f02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 faac 	bl	8008454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fabd 	bl	800847c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	f003 0308 	and.w	r3, r3, #8
 8007f12:	2b08      	cmp	r3, #8
 8007f14:	d122      	bne.n	8007f5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f003 0308 	and.w	r3, r3, #8
 8007f20:	2b08      	cmp	r3, #8
 8007f22:	d11b      	bne.n	8007f5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f06f 0208 	mvn.w	r2, #8
 8007f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2204      	movs	r2, #4
 8007f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	f003 0303 	and.w	r3, r3, #3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d003      	beq.n	8007f4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fa90 	bl	8008468 <HAL_TIM_IC_CaptureCallback>
 8007f48:	e005      	b.n	8007f56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fa82 	bl	8008454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fa93 	bl	800847c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	f003 0310 	and.w	r3, r3, #16
 8007f66:	2b10      	cmp	r3, #16
 8007f68:	d122      	bne.n	8007fb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	f003 0310 	and.w	r3, r3, #16
 8007f74:	2b10      	cmp	r3, #16
 8007f76:	d11b      	bne.n	8007fb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f06f 0210 	mvn.w	r2, #16
 8007f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2208      	movs	r2, #8
 8007f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	69db      	ldr	r3, [r3, #28]
 8007f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d003      	beq.n	8007f9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fa66 	bl	8008468 <HAL_TIM_IC_CaptureCallback>
 8007f9c:	e005      	b.n	8007faa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fa58 	bl	8008454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fa69 	bl	800847c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d10e      	bne.n	8007fdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	f003 0301 	and.w	r3, r3, #1
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d107      	bne.n	8007fdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f06f 0201 	mvn.w	r2, #1
 8007fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f7fa fe02 	bl	8002be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fe6:	2b80      	cmp	r3, #128	@ 0x80
 8007fe8:	d10e      	bne.n	8008008 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ff4:	2b80      	cmp	r3, #128	@ 0x80
 8007ff6:	d107      	bne.n	8008008 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 ff22 	bl	8008e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008012:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008016:	d10e      	bne.n	8008036 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008022:	2b80      	cmp	r3, #128	@ 0x80
 8008024:	d107      	bne.n	8008036 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800802e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 ff15 	bl	8008e60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008040:	2b40      	cmp	r3, #64	@ 0x40
 8008042:	d10e      	bne.n	8008062 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800804e:	2b40      	cmp	r3, #64	@ 0x40
 8008050:	d107      	bne.n	8008062 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800805a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fa17 	bl	8008490 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	f003 0320 	and.w	r3, r3, #32
 800806c:	2b20      	cmp	r3, #32
 800806e:	d10e      	bne.n	800808e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	f003 0320 	and.w	r3, r3, #32
 800807a:	2b20      	cmp	r3, #32
 800807c:	d107      	bne.n	800808e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f06f 0220 	mvn.w	r2, #32
 8008086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fed5 	bl	8008e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800808e:	bf00      	nop
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
	...

08008098 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d101      	bne.n	80080b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80080b2:	2302      	movs	r3, #2
 80080b4:	e0ff      	b.n	80082b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b14      	cmp	r3, #20
 80080c2:	f200 80f0 	bhi.w	80082a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80080c6:	a201      	add	r2, pc, #4	@ (adr r2, 80080cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80080c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080cc:	08008121 	.word	0x08008121
 80080d0:	080082a7 	.word	0x080082a7
 80080d4:	080082a7 	.word	0x080082a7
 80080d8:	080082a7 	.word	0x080082a7
 80080dc:	08008161 	.word	0x08008161
 80080e0:	080082a7 	.word	0x080082a7
 80080e4:	080082a7 	.word	0x080082a7
 80080e8:	080082a7 	.word	0x080082a7
 80080ec:	080081a3 	.word	0x080081a3
 80080f0:	080082a7 	.word	0x080082a7
 80080f4:	080082a7 	.word	0x080082a7
 80080f8:	080082a7 	.word	0x080082a7
 80080fc:	080081e3 	.word	0x080081e3
 8008100:	080082a7 	.word	0x080082a7
 8008104:	080082a7 	.word	0x080082a7
 8008108:	080082a7 	.word	0x080082a7
 800810c:	08008225 	.word	0x08008225
 8008110:	080082a7 	.word	0x080082a7
 8008114:	080082a7 	.word	0x080082a7
 8008118:	080082a7 	.word	0x080082a7
 800811c:	08008265 	.word	0x08008265
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68b9      	ldr	r1, [r7, #8]
 8008126:	4618      	mov	r0, r3
 8008128:	f000 fa5c 	bl	80085e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	699a      	ldr	r2, [r3, #24]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f042 0208 	orr.w	r2, r2, #8
 800813a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	699a      	ldr	r2, [r3, #24]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f022 0204 	bic.w	r2, r2, #4
 800814a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6999      	ldr	r1, [r3, #24]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	691a      	ldr	r2, [r3, #16]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	430a      	orrs	r2, r1
 800815c:	619a      	str	r2, [r3, #24]
      break;
 800815e:	e0a5      	b.n	80082ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68b9      	ldr	r1, [r7, #8]
 8008166:	4618      	mov	r0, r3
 8008168:	f000 faae 	bl	80086c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	699a      	ldr	r2, [r3, #24]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800817a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	699a      	ldr	r2, [r3, #24]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800818a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6999      	ldr	r1, [r3, #24]
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	021a      	lsls	r2, r3, #8
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	430a      	orrs	r2, r1
 800819e:	619a      	str	r2, [r3, #24]
      break;
 80081a0:	e084      	b.n	80082ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68b9      	ldr	r1, [r7, #8]
 80081a8:	4618      	mov	r0, r3
 80081aa:	f000 fb05 	bl	80087b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	69da      	ldr	r2, [r3, #28]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f042 0208 	orr.w	r2, r2, #8
 80081bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	69da      	ldr	r2, [r3, #28]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f022 0204 	bic.w	r2, r2, #4
 80081cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	69d9      	ldr	r1, [r3, #28]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	691a      	ldr	r2, [r3, #16]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	430a      	orrs	r2, r1
 80081de:	61da      	str	r2, [r3, #28]
      break;
 80081e0:	e064      	b.n	80082ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68b9      	ldr	r1, [r7, #8]
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 fb5b 	bl	80088a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	69da      	ldr	r2, [r3, #28]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	69da      	ldr	r2, [r3, #28]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800820c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	69d9      	ldr	r1, [r3, #28]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	021a      	lsls	r2, r3, #8
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	430a      	orrs	r2, r1
 8008220:	61da      	str	r2, [r3, #28]
      break;
 8008222:	e043      	b.n	80082ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68b9      	ldr	r1, [r7, #8]
 800822a:	4618      	mov	r0, r3
 800822c:	f000 fb92 	bl	8008954 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f042 0208 	orr.w	r2, r2, #8
 800823e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f022 0204 	bic.w	r2, r2, #4
 800824e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	691a      	ldr	r2, [r3, #16]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	430a      	orrs	r2, r1
 8008260:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008262:	e023      	b.n	80082ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68b9      	ldr	r1, [r7, #8]
 800826a:	4618      	mov	r0, r3
 800826c:	f000 fbc4 	bl	80089f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800827e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800828e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	021a      	lsls	r2, r3, #8
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	430a      	orrs	r2, r1
 80082a2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80082a4:	e002      	b.n	80082ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	75fb      	strb	r3, [r7, #23]
      break;
 80082aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80082b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop

080082c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d101      	bne.n	80082dc <HAL_TIM_ConfigClockSource+0x1c>
 80082d8:	2302      	movs	r3, #2
 80082da:	e0b4      	b.n	8008446 <HAL_TIM_ConfigClockSource+0x186>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2202      	movs	r2, #2
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	4b56      	ldr	r3, [pc, #344]	@ (8008450 <HAL_TIM_ConfigClockSource+0x190>)
 80082f8:	4013      	ands	r3, r2
 80082fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008302:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008314:	d03e      	beq.n	8008394 <HAL_TIM_ConfigClockSource+0xd4>
 8008316:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800831a:	f200 8087 	bhi.w	800842c <HAL_TIM_ConfigClockSource+0x16c>
 800831e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008322:	f000 8086 	beq.w	8008432 <HAL_TIM_ConfigClockSource+0x172>
 8008326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800832a:	d87f      	bhi.n	800842c <HAL_TIM_ConfigClockSource+0x16c>
 800832c:	2b70      	cmp	r3, #112	@ 0x70
 800832e:	d01a      	beq.n	8008366 <HAL_TIM_ConfigClockSource+0xa6>
 8008330:	2b70      	cmp	r3, #112	@ 0x70
 8008332:	d87b      	bhi.n	800842c <HAL_TIM_ConfigClockSource+0x16c>
 8008334:	2b60      	cmp	r3, #96	@ 0x60
 8008336:	d050      	beq.n	80083da <HAL_TIM_ConfigClockSource+0x11a>
 8008338:	2b60      	cmp	r3, #96	@ 0x60
 800833a:	d877      	bhi.n	800842c <HAL_TIM_ConfigClockSource+0x16c>
 800833c:	2b50      	cmp	r3, #80	@ 0x50
 800833e:	d03c      	beq.n	80083ba <HAL_TIM_ConfigClockSource+0xfa>
 8008340:	2b50      	cmp	r3, #80	@ 0x50
 8008342:	d873      	bhi.n	800842c <HAL_TIM_ConfigClockSource+0x16c>
 8008344:	2b40      	cmp	r3, #64	@ 0x40
 8008346:	d058      	beq.n	80083fa <HAL_TIM_ConfigClockSource+0x13a>
 8008348:	2b40      	cmp	r3, #64	@ 0x40
 800834a:	d86f      	bhi.n	800842c <HAL_TIM_ConfigClockSource+0x16c>
 800834c:	2b30      	cmp	r3, #48	@ 0x30
 800834e:	d064      	beq.n	800841a <HAL_TIM_ConfigClockSource+0x15a>
 8008350:	2b30      	cmp	r3, #48	@ 0x30
 8008352:	d86b      	bhi.n	800842c <HAL_TIM_ConfigClockSource+0x16c>
 8008354:	2b20      	cmp	r3, #32
 8008356:	d060      	beq.n	800841a <HAL_TIM_ConfigClockSource+0x15a>
 8008358:	2b20      	cmp	r3, #32
 800835a:	d867      	bhi.n	800842c <HAL_TIM_ConfigClockSource+0x16c>
 800835c:	2b00      	cmp	r3, #0
 800835e:	d05c      	beq.n	800841a <HAL_TIM_ConfigClockSource+0x15a>
 8008360:	2b10      	cmp	r3, #16
 8008362:	d05a      	beq.n	800841a <HAL_TIM_ConfigClockSource+0x15a>
 8008364:	e062      	b.n	800842c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008376:	f000 fc0d 	bl	8008b94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008388:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	609a      	str	r2, [r3, #8]
      break;
 8008392:	e04f      	b.n	8008434 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083a4:	f000 fbf6 	bl	8008b94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	689a      	ldr	r2, [r3, #8]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80083b6:	609a      	str	r2, [r3, #8]
      break;
 80083b8:	e03c      	b.n	8008434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083c6:	461a      	mov	r2, r3
 80083c8:	f000 fb6a 	bl	8008aa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2150      	movs	r1, #80	@ 0x50
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 fbc3 	bl	8008b5e <TIM_ITRx_SetConfig>
      break;
 80083d8:	e02c      	b.n	8008434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80083e6:	461a      	mov	r2, r3
 80083e8:	f000 fb89 	bl	8008afe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2160      	movs	r1, #96	@ 0x60
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 fbb3 	bl	8008b5e <TIM_ITRx_SetConfig>
      break;
 80083f8:	e01c      	b.n	8008434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008406:	461a      	mov	r2, r3
 8008408:	f000 fb4a 	bl	8008aa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2140      	movs	r1, #64	@ 0x40
 8008412:	4618      	mov	r0, r3
 8008414:	f000 fba3 	bl	8008b5e <TIM_ITRx_SetConfig>
      break;
 8008418:	e00c      	b.n	8008434 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4619      	mov	r1, r3
 8008424:	4610      	mov	r0, r2
 8008426:	f000 fb9a 	bl	8008b5e <TIM_ITRx_SetConfig>
      break;
 800842a:	e003      	b.n	8008434 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	73fb      	strb	r3, [r7, #15]
      break;
 8008430:	e000      	b.n	8008434 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008432:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008444:	7bfb      	ldrb	r3, [r7, #15]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	fffeff88 	.word	0xfffeff88

08008454 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008470:	bf00      	nop
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a40      	ldr	r2, [pc, #256]	@ (80085b8 <TIM_Base_SetConfig+0x114>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d013      	beq.n	80084e4 <TIM_Base_SetConfig+0x40>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084c2:	d00f      	beq.n	80084e4 <TIM_Base_SetConfig+0x40>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a3d      	ldr	r2, [pc, #244]	@ (80085bc <TIM_Base_SetConfig+0x118>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d00b      	beq.n	80084e4 <TIM_Base_SetConfig+0x40>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a3c      	ldr	r2, [pc, #240]	@ (80085c0 <TIM_Base_SetConfig+0x11c>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d007      	beq.n	80084e4 <TIM_Base_SetConfig+0x40>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a3b      	ldr	r2, [pc, #236]	@ (80085c4 <TIM_Base_SetConfig+0x120>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d003      	beq.n	80084e4 <TIM_Base_SetConfig+0x40>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a3a      	ldr	r2, [pc, #232]	@ (80085c8 <TIM_Base_SetConfig+0x124>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d108      	bne.n	80084f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a2f      	ldr	r2, [pc, #188]	@ (80085b8 <TIM_Base_SetConfig+0x114>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d02b      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008504:	d027      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a2c      	ldr	r2, [pc, #176]	@ (80085bc <TIM_Base_SetConfig+0x118>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d023      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a2b      	ldr	r2, [pc, #172]	@ (80085c0 <TIM_Base_SetConfig+0x11c>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d01f      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a2a      	ldr	r2, [pc, #168]	@ (80085c4 <TIM_Base_SetConfig+0x120>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d01b      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a29      	ldr	r2, [pc, #164]	@ (80085c8 <TIM_Base_SetConfig+0x124>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d017      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a28      	ldr	r2, [pc, #160]	@ (80085cc <TIM_Base_SetConfig+0x128>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d013      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a27      	ldr	r2, [pc, #156]	@ (80085d0 <TIM_Base_SetConfig+0x12c>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d00f      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a26      	ldr	r2, [pc, #152]	@ (80085d4 <TIM_Base_SetConfig+0x130>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d00b      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a25      	ldr	r2, [pc, #148]	@ (80085d8 <TIM_Base_SetConfig+0x134>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d007      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a24      	ldr	r2, [pc, #144]	@ (80085dc <TIM_Base_SetConfig+0x138>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d003      	beq.n	8008556 <TIM_Base_SetConfig+0xb2>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a23      	ldr	r2, [pc, #140]	@ (80085e0 <TIM_Base_SetConfig+0x13c>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d108      	bne.n	8008568 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800855c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	4313      	orrs	r3, r2
 8008566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	4313      	orrs	r3, r2
 8008574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	689a      	ldr	r2, [r3, #8]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a0a      	ldr	r2, [pc, #40]	@ (80085b8 <TIM_Base_SetConfig+0x114>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d003      	beq.n	800859c <TIM_Base_SetConfig+0xf8>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a0c      	ldr	r2, [pc, #48]	@ (80085c8 <TIM_Base_SetConfig+0x124>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d103      	bne.n	80085a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	691a      	ldr	r2, [r3, #16]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	615a      	str	r2, [r3, #20]
}
 80085aa:	bf00      	nop
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	40010000 	.word	0x40010000
 80085bc:	40000400 	.word	0x40000400
 80085c0:	40000800 	.word	0x40000800
 80085c4:	40000c00 	.word	0x40000c00
 80085c8:	40010400 	.word	0x40010400
 80085cc:	40014000 	.word	0x40014000
 80085d0:	40014400 	.word	0x40014400
 80085d4:	40014800 	.word	0x40014800
 80085d8:	40001800 	.word	0x40001800
 80085dc:	40001c00 	.word	0x40001c00
 80085e0:	40002000 	.word	0x40002000

080085e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b087      	sub	sp, #28
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	f023 0201 	bic.w	r2, r3, #1
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	699b      	ldr	r3, [r3, #24]
 800860a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	4b2b      	ldr	r3, [pc, #172]	@ (80086bc <TIM_OC1_SetConfig+0xd8>)
 8008610:	4013      	ands	r3, r2
 8008612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f023 0303 	bic.w	r3, r3, #3
 800861a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	4313      	orrs	r3, r2
 8008624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	f023 0302 	bic.w	r3, r3, #2
 800862c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	697a      	ldr	r2, [r7, #20]
 8008634:	4313      	orrs	r3, r2
 8008636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a21      	ldr	r2, [pc, #132]	@ (80086c0 <TIM_OC1_SetConfig+0xdc>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d003      	beq.n	8008648 <TIM_OC1_SetConfig+0x64>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a20      	ldr	r2, [pc, #128]	@ (80086c4 <TIM_OC1_SetConfig+0xe0>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d10c      	bne.n	8008662 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	f023 0308 	bic.w	r3, r3, #8
 800864e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	4313      	orrs	r3, r2
 8008658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f023 0304 	bic.w	r3, r3, #4
 8008660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a16      	ldr	r2, [pc, #88]	@ (80086c0 <TIM_OC1_SetConfig+0xdc>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d003      	beq.n	8008672 <TIM_OC1_SetConfig+0x8e>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a15      	ldr	r2, [pc, #84]	@ (80086c4 <TIM_OC1_SetConfig+0xe0>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d111      	bne.n	8008696 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	4313      	orrs	r3, r2
 800868a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	693a      	ldr	r2, [r7, #16]
 8008692:	4313      	orrs	r3, r2
 8008694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	693a      	ldr	r2, [r7, #16]
 800869a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	685a      	ldr	r2, [r3, #4]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	621a      	str	r2, [r3, #32]
}
 80086b0:	bf00      	nop
 80086b2:	371c      	adds	r7, #28
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	fffeff8f 	.word	0xfffeff8f
 80086c0:	40010000 	.word	0x40010000
 80086c4:	40010400 	.word	0x40010400

080086c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b087      	sub	sp, #28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	f023 0210 	bic.w	r2, r3, #16
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	4b2e      	ldr	r3, [pc, #184]	@ (80087ac <TIM_OC2_SetConfig+0xe4>)
 80086f4:	4013      	ands	r3, r2
 80086f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	021b      	lsls	r3, r3, #8
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	4313      	orrs	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	f023 0320 	bic.w	r3, r3, #32
 8008712:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	011b      	lsls	r3, r3, #4
 800871a:	697a      	ldr	r2, [r7, #20]
 800871c:	4313      	orrs	r3, r2
 800871e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a23      	ldr	r2, [pc, #140]	@ (80087b0 <TIM_OC2_SetConfig+0xe8>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d003      	beq.n	8008730 <TIM_OC2_SetConfig+0x68>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a22      	ldr	r2, [pc, #136]	@ (80087b4 <TIM_OC2_SetConfig+0xec>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d10d      	bne.n	800874c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	011b      	lsls	r3, r3, #4
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	4313      	orrs	r3, r2
 8008742:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800874a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a18      	ldr	r2, [pc, #96]	@ (80087b0 <TIM_OC2_SetConfig+0xe8>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d003      	beq.n	800875c <TIM_OC2_SetConfig+0x94>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a17      	ldr	r2, [pc, #92]	@ (80087b4 <TIM_OC2_SetConfig+0xec>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d113      	bne.n	8008784 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008762:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800876a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	4313      	orrs	r3, r2
 8008776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	4313      	orrs	r3, r2
 8008782:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	685a      	ldr	r2, [r3, #4]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	621a      	str	r2, [r3, #32]
}
 800879e:	bf00      	nop
 80087a0:	371c      	adds	r7, #28
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	feff8fff 	.word	0xfeff8fff
 80087b0:	40010000 	.word	0x40010000
 80087b4:	40010400 	.word	0x40010400

080087b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	4b2d      	ldr	r3, [pc, #180]	@ (8008898 <TIM_OC3_SetConfig+0xe0>)
 80087e4:	4013      	ands	r3, r2
 80087e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f023 0303 	bic.w	r3, r3, #3
 80087ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	021b      	lsls	r3, r3, #8
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	4313      	orrs	r3, r2
 800880c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a22      	ldr	r2, [pc, #136]	@ (800889c <TIM_OC3_SetConfig+0xe4>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d003      	beq.n	800881e <TIM_OC3_SetConfig+0x66>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a21      	ldr	r2, [pc, #132]	@ (80088a0 <TIM_OC3_SetConfig+0xe8>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d10d      	bne.n	800883a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008824:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	021b      	lsls	r3, r3, #8
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	4313      	orrs	r3, r2
 8008830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a17      	ldr	r2, [pc, #92]	@ (800889c <TIM_OC3_SetConfig+0xe4>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d003      	beq.n	800884a <TIM_OC3_SetConfig+0x92>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a16      	ldr	r2, [pc, #88]	@ (80088a0 <TIM_OC3_SetConfig+0xe8>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d113      	bne.n	8008872 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	011b      	lsls	r3, r3, #4
 8008860:	693a      	ldr	r2, [r7, #16]
 8008862:	4313      	orrs	r3, r2
 8008864:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	011b      	lsls	r3, r3, #4
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	4313      	orrs	r3, r2
 8008870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	685a      	ldr	r2, [r3, #4]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	697a      	ldr	r2, [r7, #20]
 800888a:	621a      	str	r2, [r3, #32]
}
 800888c:	bf00      	nop
 800888e:	371c      	adds	r7, #28
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	fffeff8f 	.word	0xfffeff8f
 800889c:	40010000 	.word	0x40010000
 80088a0:	40010400 	.word	0x40010400

080088a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b087      	sub	sp, #28
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a1b      	ldr	r3, [r3, #32]
 80088be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	69db      	ldr	r3, [r3, #28]
 80088ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008948 <TIM_OC4_SetConfig+0xa4>)
 80088d0:	4013      	ands	r3, r2
 80088d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	021b      	lsls	r3, r3, #8
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80088ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	031b      	lsls	r3, r3, #12
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a13      	ldr	r2, [pc, #76]	@ (800894c <TIM_OC4_SetConfig+0xa8>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d003      	beq.n	800890c <TIM_OC4_SetConfig+0x68>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a12      	ldr	r2, [pc, #72]	@ (8008950 <TIM_OC4_SetConfig+0xac>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d109      	bne.n	8008920 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008912:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	695b      	ldr	r3, [r3, #20]
 8008918:	019b      	lsls	r3, r3, #6
 800891a:	697a      	ldr	r2, [r7, #20]
 800891c:	4313      	orrs	r3, r2
 800891e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	697a      	ldr	r2, [r7, #20]
 8008924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	621a      	str	r2, [r3, #32]
}
 800893a:	bf00      	nop
 800893c:	371c      	adds	r7, #28
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	feff8fff 	.word	0xfeff8fff
 800894c:	40010000 	.word	0x40010000
 8008950:	40010400 	.word	0x40010400

08008954 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008954:	b480      	push	{r7}
 8008956:	b087      	sub	sp, #28
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a1b      	ldr	r3, [r3, #32]
 8008962:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a1b      	ldr	r3, [r3, #32]
 800896e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800897a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	4b1b      	ldr	r3, [pc, #108]	@ (80089ec <TIM_OC5_SetConfig+0x98>)
 8008980:	4013      	ands	r3, r2
 8008982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	4313      	orrs	r3, r2
 800898c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008994:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	041b      	lsls	r3, r3, #16
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	4313      	orrs	r3, r2
 80089a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a12      	ldr	r2, [pc, #72]	@ (80089f0 <TIM_OC5_SetConfig+0x9c>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d003      	beq.n	80089b2 <TIM_OC5_SetConfig+0x5e>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a11      	ldr	r2, [pc, #68]	@ (80089f4 <TIM_OC5_SetConfig+0xa0>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d109      	bne.n	80089c6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	021b      	lsls	r3, r3, #8
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	685a      	ldr	r2, [r3, #4]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	693a      	ldr	r2, [r7, #16]
 80089de:	621a      	str	r2, [r3, #32]
}
 80089e0:	bf00      	nop
 80089e2:	371c      	adds	r7, #28
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr
 80089ec:	fffeff8f 	.word	0xfffeff8f
 80089f0:	40010000 	.word	0x40010000
 80089f4:	40010400 	.word	0x40010400

080089f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b087      	sub	sp, #28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	4b1c      	ldr	r3, [pc, #112]	@ (8008a94 <TIM_OC6_SetConfig+0x9c>)
 8008a24:	4013      	ands	r3, r2
 8008a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	021b      	lsls	r3, r3, #8
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008a3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	051b      	lsls	r3, r3, #20
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a13      	ldr	r2, [pc, #76]	@ (8008a98 <TIM_OC6_SetConfig+0xa0>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d003      	beq.n	8008a58 <TIM_OC6_SetConfig+0x60>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a12      	ldr	r2, [pc, #72]	@ (8008a9c <TIM_OC6_SetConfig+0xa4>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d109      	bne.n	8008a6c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	029b      	lsls	r3, r3, #10
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	693a      	ldr	r2, [r7, #16]
 8008a84:	621a      	str	r2, [r3, #32]
}
 8008a86:	bf00      	nop
 8008a88:	371c      	adds	r7, #28
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	feff8fff 	.word	0xfeff8fff
 8008a98:	40010000 	.word	0x40010000
 8008a9c:	40010400 	.word	0x40010400

08008aa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b087      	sub	sp, #28
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6a1b      	ldr	r3, [r3, #32]
 8008ab0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6a1b      	ldr	r3, [r3, #32]
 8008ab6:	f023 0201 	bic.w	r2, r3, #1
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	011b      	lsls	r3, r3, #4
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	f023 030a 	bic.w	r3, r3, #10
 8008adc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ade:	697a      	ldr	r2, [r7, #20]
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	621a      	str	r2, [r3, #32]
}
 8008af2:	bf00      	nop
 8008af4:	371c      	adds	r7, #28
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b087      	sub	sp, #28
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	60f8      	str	r0, [r7, #12]
 8008b06:	60b9      	str	r1, [r7, #8]
 8008b08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	f023 0210 	bic.w	r2, r3, #16
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6a1b      	ldr	r3, [r3, #32]
 8008b20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008b28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	031b      	lsls	r3, r3, #12
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008b3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	011b      	lsls	r3, r3, #4
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	621a      	str	r2, [r3, #32]
}
 8008b52:	bf00      	nop
 8008b54:	371c      	adds	r7, #28
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b085      	sub	sp, #20
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b76:	683a      	ldr	r2, [r7, #0]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	f043 0307 	orr.w	r3, r3, #7
 8008b80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	609a      	str	r2, [r3, #8]
}
 8008b88:	bf00      	nop
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
 8008ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008bae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	021a      	lsls	r2, r3, #8
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	431a      	orrs	r2, r3
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	697a      	ldr	r2, [r7, #20]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	697a      	ldr	r2, [r7, #20]
 8008bc6:	609a      	str	r2, [r3, #8]
}
 8008bc8:	bf00      	nop
 8008bca:	371c      	adds	r7, #28
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b087      	sub	sp, #28
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	f003 031f 	and.w	r3, r3, #31
 8008be6:	2201      	movs	r2, #1
 8008be8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6a1a      	ldr	r2, [r3, #32]
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	43db      	mvns	r3, r3
 8008bf6:	401a      	ands	r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6a1a      	ldr	r2, [r3, #32]
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	f003 031f 	and.w	r3, r3, #31
 8008c06:	6879      	ldr	r1, [r7, #4]
 8008c08:	fa01 f303 	lsl.w	r3, r1, r3
 8008c0c:	431a      	orrs	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	621a      	str	r2, [r3, #32]
}
 8008c12:	bf00      	nop
 8008c14:	371c      	adds	r7, #28
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
	...

08008c20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d101      	bne.n	8008c38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c34:	2302      	movs	r3, #2
 8008c36:	e06d      	b.n	8008d14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2202      	movs	r2, #2
 8008c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a30      	ldr	r2, [pc, #192]	@ (8008d20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d004      	beq.n	8008c6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a2f      	ldr	r2, [pc, #188]	@ (8008d24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d108      	bne.n	8008c7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008c72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a20      	ldr	r2, [pc, #128]	@ (8008d20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d022      	beq.n	8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008caa:	d01d      	beq.n	8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8008d28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d018      	beq.n	8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a1c      	ldr	r2, [pc, #112]	@ (8008d2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d013      	beq.n	8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8008d30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d00e      	beq.n	8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a15      	ldr	r2, [pc, #84]	@ (8008d24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d009      	beq.n	8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a16      	ldr	r2, [pc, #88]	@ (8008d34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d004      	beq.n	8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a15      	ldr	r2, [pc, #84]	@ (8008d38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d10c      	bne.n	8008d02 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	40010000 	.word	0x40010000
 8008d24:	40010400 	.word	0x40010400
 8008d28:	40000400 	.word	0x40000400
 8008d2c:	40000800 	.word	0x40000800
 8008d30:	40000c00 	.word	0x40000c00
 8008d34:	40014000 	.word	0x40014000
 8008d38:	40001800 	.word	0x40001800

08008d3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d101      	bne.n	8008d58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008d54:	2302      	movs	r3, #2
 8008d56:	e065      	b.n	8008e24 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	041b      	lsls	r3, r3, #16
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a16      	ldr	r2, [pc, #88]	@ (8008e30 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d004      	beq.n	8008de6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a14      	ldr	r2, [pc, #80]	@ (8008e34 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d115      	bne.n	8008e12 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df0:	051b      	lsls	r3, r3, #20
 8008df2:	4313      	orrs	r3, r2
 8008df4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	69db      	ldr	r3, [r3, #28]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	40010000 	.word	0x40010000
 8008e34:	40010400 	.word	0x40010400

08008e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e68:	bf00      	nop
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d101      	bne.n	8008e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e040      	b.n	8008f08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d106      	bne.n	8008e9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f7fb fe44 	bl	8004b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2224      	movs	r2, #36	@ 0x24
 8008ea0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f022 0201 	bic.w	r2, r2, #1
 8008eb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f900 	bl	80090b8 <UART_SetConfig>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d101      	bne.n	8008ec2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e022      	b.n	8008f08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d002      	beq.n	8008ed0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 fb58 	bl	8009580 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008ede:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	689a      	ldr	r2, [r3, #8]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008eee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f042 0201 	orr.w	r2, r2, #1
 8008efe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fbdf 	bl	80096c4 <UART_CheckIdleState>
 8008f06:	4603      	mov	r3, r0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b08a      	sub	sp, #40	@ 0x28
 8008f14:	af02      	add	r7, sp, #8
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	603b      	str	r3, [r7, #0]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f24:	2b20      	cmp	r3, #32
 8008f26:	d171      	bne.n	800900c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d002      	beq.n	8008f34 <HAL_UART_Transmit+0x24>
 8008f2e:	88fb      	ldrh	r3, [r7, #6]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d101      	bne.n	8008f38 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e06a      	b.n	800900e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2221      	movs	r2, #33	@ 0x21
 8008f44:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f46:	f7fb fec7 	bl	8004cd8 <HAL_GetTick>
 8008f4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	88fa      	ldrh	r2, [r7, #6]
 8008f50:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	88fa      	ldrh	r2, [r7, #6]
 8008f58:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f64:	d108      	bne.n	8008f78 <HAL_UART_Transmit+0x68>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d104      	bne.n	8008f78 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	61bb      	str	r3, [r7, #24]
 8008f76:	e003      	b.n	8008f80 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008f80:	e02c      	b.n	8008fdc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	2180      	movs	r1, #128	@ 0x80
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f000 fbd0 	bl	8009732 <UART_WaitOnFlagUntilTimeout>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d001      	beq.n	8008f9c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	e038      	b.n	800900e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10b      	bne.n	8008fba <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	881b      	ldrh	r3, [r3, #0]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fb0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	3302      	adds	r3, #2
 8008fb6:	61bb      	str	r3, [r7, #24]
 8008fb8:	e007      	b.n	8008fca <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	781a      	ldrb	r2, [r3, #0]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d1cc      	bne.n	8008f82 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	2140      	movs	r1, #64	@ 0x40
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f000 fb9d 	bl	8009732 <UART_WaitOnFlagUntilTimeout>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8008ffe:	2303      	movs	r3, #3
 8009000:	e005      	b.n	800900e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2220      	movs	r2, #32
 8009006:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009008:	2300      	movs	r3, #0
 800900a:	e000      	b.n	800900e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800900c:	2302      	movs	r3, #2
  }
}
 800900e:	4618      	mov	r0, r3
 8009010:	3720      	adds	r7, #32
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b08a      	sub	sp, #40	@ 0x28
 800901a:	af00      	add	r7, sp, #0
 800901c:	60f8      	str	r0, [r7, #12]
 800901e:	60b9      	str	r1, [r7, #8]
 8009020:	4613      	mov	r3, r2
 8009022:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800902a:	2b20      	cmp	r3, #32
 800902c:	d132      	bne.n	8009094 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d002      	beq.n	800903a <HAL_UART_Receive_IT+0x24>
 8009034:	88fb      	ldrh	r3, [r7, #6]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d101      	bne.n	800903e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	e02b      	b.n	8009096 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d018      	beq.n	8009084 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	e853 3f00 	ldrex	r3, [r3]
 800905e:	613b      	str	r3, [r7, #16]
   return(result);
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009066:	627b      	str	r3, [r7, #36]	@ 0x24
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	461a      	mov	r2, r3
 800906e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009070:	623b      	str	r3, [r7, #32]
 8009072:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009074:	69f9      	ldr	r1, [r7, #28]
 8009076:	6a3a      	ldr	r2, [r7, #32]
 8009078:	e841 2300 	strex	r3, r2, [r1]
 800907c:	61bb      	str	r3, [r7, #24]
   return(result);
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1e6      	bne.n	8009052 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009084:	88fb      	ldrh	r3, [r7, #6]
 8009086:	461a      	mov	r2, r3
 8009088:	68b9      	ldr	r1, [r7, #8]
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f000 fc18 	bl	80098c0 <UART_Start_Receive_IT>
 8009090:	4603      	mov	r3, r0
 8009092:	e000      	b.n	8009096 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009094:	2302      	movs	r3, #2
  }
}
 8009096:	4618      	mov	r0, r3
 8009098:	3728      	adds	r7, #40	@ 0x28
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800909e:	b480      	push	{r7}
 80090a0:	b083      	sub	sp, #12
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	460b      	mov	r3, r1
 80090a8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80090aa:	bf00      	nop
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
	...

080090b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b088      	sub	sp, #32
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	689a      	ldr	r2, [r3, #8]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	431a      	orrs	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	695b      	ldr	r3, [r3, #20]
 80090d2:	431a      	orrs	r2, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	69db      	ldr	r3, [r3, #28]
 80090d8:	4313      	orrs	r3, r2
 80090da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	4ba6      	ldr	r3, [pc, #664]	@ (800937c <UART_SetConfig+0x2c4>)
 80090e4:	4013      	ands	r3, r2
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	6812      	ldr	r2, [r2, #0]
 80090ea:	6979      	ldr	r1, [r7, #20]
 80090ec:	430b      	orrs	r3, r1
 80090ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	68da      	ldr	r2, [r3, #12]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	430a      	orrs	r2, r1
 8009104:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	699b      	ldr	r3, [r3, #24]
 800910a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6a1b      	ldr	r3, [r3, #32]
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	4313      	orrs	r3, r2
 8009114:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	697a      	ldr	r2, [r7, #20]
 8009126:	430a      	orrs	r2, r1
 8009128:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a94      	ldr	r2, [pc, #592]	@ (8009380 <UART_SetConfig+0x2c8>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d120      	bne.n	8009176 <UART_SetConfig+0xbe>
 8009134:	4b93      	ldr	r3, [pc, #588]	@ (8009384 <UART_SetConfig+0x2cc>)
 8009136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800913a:	f003 0303 	and.w	r3, r3, #3
 800913e:	2b03      	cmp	r3, #3
 8009140:	d816      	bhi.n	8009170 <UART_SetConfig+0xb8>
 8009142:	a201      	add	r2, pc, #4	@ (adr r2, 8009148 <UART_SetConfig+0x90>)
 8009144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009148:	08009159 	.word	0x08009159
 800914c:	08009165 	.word	0x08009165
 8009150:	0800915f 	.word	0x0800915f
 8009154:	0800916b 	.word	0x0800916b
 8009158:	2301      	movs	r3, #1
 800915a:	77fb      	strb	r3, [r7, #31]
 800915c:	e150      	b.n	8009400 <UART_SetConfig+0x348>
 800915e:	2302      	movs	r3, #2
 8009160:	77fb      	strb	r3, [r7, #31]
 8009162:	e14d      	b.n	8009400 <UART_SetConfig+0x348>
 8009164:	2304      	movs	r3, #4
 8009166:	77fb      	strb	r3, [r7, #31]
 8009168:	e14a      	b.n	8009400 <UART_SetConfig+0x348>
 800916a:	2308      	movs	r3, #8
 800916c:	77fb      	strb	r3, [r7, #31]
 800916e:	e147      	b.n	8009400 <UART_SetConfig+0x348>
 8009170:	2310      	movs	r3, #16
 8009172:	77fb      	strb	r3, [r7, #31]
 8009174:	e144      	b.n	8009400 <UART_SetConfig+0x348>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a83      	ldr	r2, [pc, #524]	@ (8009388 <UART_SetConfig+0x2d0>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d132      	bne.n	80091e6 <UART_SetConfig+0x12e>
 8009180:	4b80      	ldr	r3, [pc, #512]	@ (8009384 <UART_SetConfig+0x2cc>)
 8009182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009186:	f003 030c 	and.w	r3, r3, #12
 800918a:	2b0c      	cmp	r3, #12
 800918c:	d828      	bhi.n	80091e0 <UART_SetConfig+0x128>
 800918e:	a201      	add	r2, pc, #4	@ (adr r2, 8009194 <UART_SetConfig+0xdc>)
 8009190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009194:	080091c9 	.word	0x080091c9
 8009198:	080091e1 	.word	0x080091e1
 800919c:	080091e1 	.word	0x080091e1
 80091a0:	080091e1 	.word	0x080091e1
 80091a4:	080091d5 	.word	0x080091d5
 80091a8:	080091e1 	.word	0x080091e1
 80091ac:	080091e1 	.word	0x080091e1
 80091b0:	080091e1 	.word	0x080091e1
 80091b4:	080091cf 	.word	0x080091cf
 80091b8:	080091e1 	.word	0x080091e1
 80091bc:	080091e1 	.word	0x080091e1
 80091c0:	080091e1 	.word	0x080091e1
 80091c4:	080091db 	.word	0x080091db
 80091c8:	2300      	movs	r3, #0
 80091ca:	77fb      	strb	r3, [r7, #31]
 80091cc:	e118      	b.n	8009400 <UART_SetConfig+0x348>
 80091ce:	2302      	movs	r3, #2
 80091d0:	77fb      	strb	r3, [r7, #31]
 80091d2:	e115      	b.n	8009400 <UART_SetConfig+0x348>
 80091d4:	2304      	movs	r3, #4
 80091d6:	77fb      	strb	r3, [r7, #31]
 80091d8:	e112      	b.n	8009400 <UART_SetConfig+0x348>
 80091da:	2308      	movs	r3, #8
 80091dc:	77fb      	strb	r3, [r7, #31]
 80091de:	e10f      	b.n	8009400 <UART_SetConfig+0x348>
 80091e0:	2310      	movs	r3, #16
 80091e2:	77fb      	strb	r3, [r7, #31]
 80091e4:	e10c      	b.n	8009400 <UART_SetConfig+0x348>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a68      	ldr	r2, [pc, #416]	@ (800938c <UART_SetConfig+0x2d4>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d120      	bne.n	8009232 <UART_SetConfig+0x17a>
 80091f0:	4b64      	ldr	r3, [pc, #400]	@ (8009384 <UART_SetConfig+0x2cc>)
 80091f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091f6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80091fa:	2b30      	cmp	r3, #48	@ 0x30
 80091fc:	d013      	beq.n	8009226 <UART_SetConfig+0x16e>
 80091fe:	2b30      	cmp	r3, #48	@ 0x30
 8009200:	d814      	bhi.n	800922c <UART_SetConfig+0x174>
 8009202:	2b20      	cmp	r3, #32
 8009204:	d009      	beq.n	800921a <UART_SetConfig+0x162>
 8009206:	2b20      	cmp	r3, #32
 8009208:	d810      	bhi.n	800922c <UART_SetConfig+0x174>
 800920a:	2b00      	cmp	r3, #0
 800920c:	d002      	beq.n	8009214 <UART_SetConfig+0x15c>
 800920e:	2b10      	cmp	r3, #16
 8009210:	d006      	beq.n	8009220 <UART_SetConfig+0x168>
 8009212:	e00b      	b.n	800922c <UART_SetConfig+0x174>
 8009214:	2300      	movs	r3, #0
 8009216:	77fb      	strb	r3, [r7, #31]
 8009218:	e0f2      	b.n	8009400 <UART_SetConfig+0x348>
 800921a:	2302      	movs	r3, #2
 800921c:	77fb      	strb	r3, [r7, #31]
 800921e:	e0ef      	b.n	8009400 <UART_SetConfig+0x348>
 8009220:	2304      	movs	r3, #4
 8009222:	77fb      	strb	r3, [r7, #31]
 8009224:	e0ec      	b.n	8009400 <UART_SetConfig+0x348>
 8009226:	2308      	movs	r3, #8
 8009228:	77fb      	strb	r3, [r7, #31]
 800922a:	e0e9      	b.n	8009400 <UART_SetConfig+0x348>
 800922c:	2310      	movs	r3, #16
 800922e:	77fb      	strb	r3, [r7, #31]
 8009230:	e0e6      	b.n	8009400 <UART_SetConfig+0x348>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a56      	ldr	r2, [pc, #344]	@ (8009390 <UART_SetConfig+0x2d8>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d120      	bne.n	800927e <UART_SetConfig+0x1c6>
 800923c:	4b51      	ldr	r3, [pc, #324]	@ (8009384 <UART_SetConfig+0x2cc>)
 800923e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009242:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009246:	2bc0      	cmp	r3, #192	@ 0xc0
 8009248:	d013      	beq.n	8009272 <UART_SetConfig+0x1ba>
 800924a:	2bc0      	cmp	r3, #192	@ 0xc0
 800924c:	d814      	bhi.n	8009278 <UART_SetConfig+0x1c0>
 800924e:	2b80      	cmp	r3, #128	@ 0x80
 8009250:	d009      	beq.n	8009266 <UART_SetConfig+0x1ae>
 8009252:	2b80      	cmp	r3, #128	@ 0x80
 8009254:	d810      	bhi.n	8009278 <UART_SetConfig+0x1c0>
 8009256:	2b00      	cmp	r3, #0
 8009258:	d002      	beq.n	8009260 <UART_SetConfig+0x1a8>
 800925a:	2b40      	cmp	r3, #64	@ 0x40
 800925c:	d006      	beq.n	800926c <UART_SetConfig+0x1b4>
 800925e:	e00b      	b.n	8009278 <UART_SetConfig+0x1c0>
 8009260:	2300      	movs	r3, #0
 8009262:	77fb      	strb	r3, [r7, #31]
 8009264:	e0cc      	b.n	8009400 <UART_SetConfig+0x348>
 8009266:	2302      	movs	r3, #2
 8009268:	77fb      	strb	r3, [r7, #31]
 800926a:	e0c9      	b.n	8009400 <UART_SetConfig+0x348>
 800926c:	2304      	movs	r3, #4
 800926e:	77fb      	strb	r3, [r7, #31]
 8009270:	e0c6      	b.n	8009400 <UART_SetConfig+0x348>
 8009272:	2308      	movs	r3, #8
 8009274:	77fb      	strb	r3, [r7, #31]
 8009276:	e0c3      	b.n	8009400 <UART_SetConfig+0x348>
 8009278:	2310      	movs	r3, #16
 800927a:	77fb      	strb	r3, [r7, #31]
 800927c:	e0c0      	b.n	8009400 <UART_SetConfig+0x348>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a44      	ldr	r2, [pc, #272]	@ (8009394 <UART_SetConfig+0x2dc>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d125      	bne.n	80092d4 <UART_SetConfig+0x21c>
 8009288:	4b3e      	ldr	r3, [pc, #248]	@ (8009384 <UART_SetConfig+0x2cc>)
 800928a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800928e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009292:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009296:	d017      	beq.n	80092c8 <UART_SetConfig+0x210>
 8009298:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800929c:	d817      	bhi.n	80092ce <UART_SetConfig+0x216>
 800929e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092a2:	d00b      	beq.n	80092bc <UART_SetConfig+0x204>
 80092a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092a8:	d811      	bhi.n	80092ce <UART_SetConfig+0x216>
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d003      	beq.n	80092b6 <UART_SetConfig+0x1fe>
 80092ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092b2:	d006      	beq.n	80092c2 <UART_SetConfig+0x20a>
 80092b4:	e00b      	b.n	80092ce <UART_SetConfig+0x216>
 80092b6:	2300      	movs	r3, #0
 80092b8:	77fb      	strb	r3, [r7, #31]
 80092ba:	e0a1      	b.n	8009400 <UART_SetConfig+0x348>
 80092bc:	2302      	movs	r3, #2
 80092be:	77fb      	strb	r3, [r7, #31]
 80092c0:	e09e      	b.n	8009400 <UART_SetConfig+0x348>
 80092c2:	2304      	movs	r3, #4
 80092c4:	77fb      	strb	r3, [r7, #31]
 80092c6:	e09b      	b.n	8009400 <UART_SetConfig+0x348>
 80092c8:	2308      	movs	r3, #8
 80092ca:	77fb      	strb	r3, [r7, #31]
 80092cc:	e098      	b.n	8009400 <UART_SetConfig+0x348>
 80092ce:	2310      	movs	r3, #16
 80092d0:	77fb      	strb	r3, [r7, #31]
 80092d2:	e095      	b.n	8009400 <UART_SetConfig+0x348>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a2f      	ldr	r2, [pc, #188]	@ (8009398 <UART_SetConfig+0x2e0>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d125      	bne.n	800932a <UART_SetConfig+0x272>
 80092de:	4b29      	ldr	r3, [pc, #164]	@ (8009384 <UART_SetConfig+0x2cc>)
 80092e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80092e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80092ec:	d017      	beq.n	800931e <UART_SetConfig+0x266>
 80092ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80092f2:	d817      	bhi.n	8009324 <UART_SetConfig+0x26c>
 80092f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092f8:	d00b      	beq.n	8009312 <UART_SetConfig+0x25a>
 80092fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092fe:	d811      	bhi.n	8009324 <UART_SetConfig+0x26c>
 8009300:	2b00      	cmp	r3, #0
 8009302:	d003      	beq.n	800930c <UART_SetConfig+0x254>
 8009304:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009308:	d006      	beq.n	8009318 <UART_SetConfig+0x260>
 800930a:	e00b      	b.n	8009324 <UART_SetConfig+0x26c>
 800930c:	2301      	movs	r3, #1
 800930e:	77fb      	strb	r3, [r7, #31]
 8009310:	e076      	b.n	8009400 <UART_SetConfig+0x348>
 8009312:	2302      	movs	r3, #2
 8009314:	77fb      	strb	r3, [r7, #31]
 8009316:	e073      	b.n	8009400 <UART_SetConfig+0x348>
 8009318:	2304      	movs	r3, #4
 800931a:	77fb      	strb	r3, [r7, #31]
 800931c:	e070      	b.n	8009400 <UART_SetConfig+0x348>
 800931e:	2308      	movs	r3, #8
 8009320:	77fb      	strb	r3, [r7, #31]
 8009322:	e06d      	b.n	8009400 <UART_SetConfig+0x348>
 8009324:	2310      	movs	r3, #16
 8009326:	77fb      	strb	r3, [r7, #31]
 8009328:	e06a      	b.n	8009400 <UART_SetConfig+0x348>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a1b      	ldr	r2, [pc, #108]	@ (800939c <UART_SetConfig+0x2e4>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d138      	bne.n	80093a6 <UART_SetConfig+0x2ee>
 8009334:	4b13      	ldr	r3, [pc, #76]	@ (8009384 <UART_SetConfig+0x2cc>)
 8009336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800933a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800933e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009342:	d017      	beq.n	8009374 <UART_SetConfig+0x2bc>
 8009344:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009348:	d82a      	bhi.n	80093a0 <UART_SetConfig+0x2e8>
 800934a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800934e:	d00b      	beq.n	8009368 <UART_SetConfig+0x2b0>
 8009350:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009354:	d824      	bhi.n	80093a0 <UART_SetConfig+0x2e8>
 8009356:	2b00      	cmp	r3, #0
 8009358:	d003      	beq.n	8009362 <UART_SetConfig+0x2aa>
 800935a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800935e:	d006      	beq.n	800936e <UART_SetConfig+0x2b6>
 8009360:	e01e      	b.n	80093a0 <UART_SetConfig+0x2e8>
 8009362:	2300      	movs	r3, #0
 8009364:	77fb      	strb	r3, [r7, #31]
 8009366:	e04b      	b.n	8009400 <UART_SetConfig+0x348>
 8009368:	2302      	movs	r3, #2
 800936a:	77fb      	strb	r3, [r7, #31]
 800936c:	e048      	b.n	8009400 <UART_SetConfig+0x348>
 800936e:	2304      	movs	r3, #4
 8009370:	77fb      	strb	r3, [r7, #31]
 8009372:	e045      	b.n	8009400 <UART_SetConfig+0x348>
 8009374:	2308      	movs	r3, #8
 8009376:	77fb      	strb	r3, [r7, #31]
 8009378:	e042      	b.n	8009400 <UART_SetConfig+0x348>
 800937a:	bf00      	nop
 800937c:	efff69f3 	.word	0xefff69f3
 8009380:	40011000 	.word	0x40011000
 8009384:	40023800 	.word	0x40023800
 8009388:	40004400 	.word	0x40004400
 800938c:	40004800 	.word	0x40004800
 8009390:	40004c00 	.word	0x40004c00
 8009394:	40005000 	.word	0x40005000
 8009398:	40011400 	.word	0x40011400
 800939c:	40007800 	.word	0x40007800
 80093a0:	2310      	movs	r3, #16
 80093a2:	77fb      	strb	r3, [r7, #31]
 80093a4:	e02c      	b.n	8009400 <UART_SetConfig+0x348>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a72      	ldr	r2, [pc, #456]	@ (8009574 <UART_SetConfig+0x4bc>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d125      	bne.n	80093fc <UART_SetConfig+0x344>
 80093b0:	4b71      	ldr	r3, [pc, #452]	@ (8009578 <UART_SetConfig+0x4c0>)
 80093b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093b6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80093ba:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80093be:	d017      	beq.n	80093f0 <UART_SetConfig+0x338>
 80093c0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80093c4:	d817      	bhi.n	80093f6 <UART_SetConfig+0x33e>
 80093c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093ca:	d00b      	beq.n	80093e4 <UART_SetConfig+0x32c>
 80093cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093d0:	d811      	bhi.n	80093f6 <UART_SetConfig+0x33e>
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d003      	beq.n	80093de <UART_SetConfig+0x326>
 80093d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80093da:	d006      	beq.n	80093ea <UART_SetConfig+0x332>
 80093dc:	e00b      	b.n	80093f6 <UART_SetConfig+0x33e>
 80093de:	2300      	movs	r3, #0
 80093e0:	77fb      	strb	r3, [r7, #31]
 80093e2:	e00d      	b.n	8009400 <UART_SetConfig+0x348>
 80093e4:	2302      	movs	r3, #2
 80093e6:	77fb      	strb	r3, [r7, #31]
 80093e8:	e00a      	b.n	8009400 <UART_SetConfig+0x348>
 80093ea:	2304      	movs	r3, #4
 80093ec:	77fb      	strb	r3, [r7, #31]
 80093ee:	e007      	b.n	8009400 <UART_SetConfig+0x348>
 80093f0:	2308      	movs	r3, #8
 80093f2:	77fb      	strb	r3, [r7, #31]
 80093f4:	e004      	b.n	8009400 <UART_SetConfig+0x348>
 80093f6:	2310      	movs	r3, #16
 80093f8:	77fb      	strb	r3, [r7, #31]
 80093fa:	e001      	b.n	8009400 <UART_SetConfig+0x348>
 80093fc:	2310      	movs	r3, #16
 80093fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	69db      	ldr	r3, [r3, #28]
 8009404:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009408:	d15b      	bne.n	80094c2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800940a:	7ffb      	ldrb	r3, [r7, #31]
 800940c:	2b08      	cmp	r3, #8
 800940e:	d828      	bhi.n	8009462 <UART_SetConfig+0x3aa>
 8009410:	a201      	add	r2, pc, #4	@ (adr r2, 8009418 <UART_SetConfig+0x360>)
 8009412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009416:	bf00      	nop
 8009418:	0800943d 	.word	0x0800943d
 800941c:	08009445 	.word	0x08009445
 8009420:	0800944d 	.word	0x0800944d
 8009424:	08009463 	.word	0x08009463
 8009428:	08009453 	.word	0x08009453
 800942c:	08009463 	.word	0x08009463
 8009430:	08009463 	.word	0x08009463
 8009434:	08009463 	.word	0x08009463
 8009438:	0800945b 	.word	0x0800945b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800943c:	f7fc fda6 	bl	8005f8c <HAL_RCC_GetPCLK1Freq>
 8009440:	61b8      	str	r0, [r7, #24]
        break;
 8009442:	e013      	b.n	800946c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009444:	f7fc fdb6 	bl	8005fb4 <HAL_RCC_GetPCLK2Freq>
 8009448:	61b8      	str	r0, [r7, #24]
        break;
 800944a:	e00f      	b.n	800946c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800944c:	4b4b      	ldr	r3, [pc, #300]	@ (800957c <UART_SetConfig+0x4c4>)
 800944e:	61bb      	str	r3, [r7, #24]
        break;
 8009450:	e00c      	b.n	800946c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009452:	f7fc fc89 	bl	8005d68 <HAL_RCC_GetSysClockFreq>
 8009456:	61b8      	str	r0, [r7, #24]
        break;
 8009458:	e008      	b.n	800946c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800945a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800945e:	61bb      	str	r3, [r7, #24]
        break;
 8009460:	e004      	b.n	800946c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009462:	2300      	movs	r3, #0
 8009464:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	77bb      	strb	r3, [r7, #30]
        break;
 800946a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d074      	beq.n	800955c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	005a      	lsls	r2, r3, #1
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	085b      	lsrs	r3, r3, #1
 800947c:	441a      	add	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	fbb2 f3f3 	udiv	r3, r2, r3
 8009486:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	2b0f      	cmp	r3, #15
 800948c:	d916      	bls.n	80094bc <UART_SetConfig+0x404>
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009494:	d212      	bcs.n	80094bc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	b29b      	uxth	r3, r3
 800949a:	f023 030f 	bic.w	r3, r3, #15
 800949e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	085b      	lsrs	r3, r3, #1
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	f003 0307 	and.w	r3, r3, #7
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	89fb      	ldrh	r3, [r7, #14]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	89fa      	ldrh	r2, [r7, #14]
 80094b8:	60da      	str	r2, [r3, #12]
 80094ba:	e04f      	b.n	800955c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	77bb      	strb	r3, [r7, #30]
 80094c0:	e04c      	b.n	800955c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80094c2:	7ffb      	ldrb	r3, [r7, #31]
 80094c4:	2b08      	cmp	r3, #8
 80094c6:	d828      	bhi.n	800951a <UART_SetConfig+0x462>
 80094c8:	a201      	add	r2, pc, #4	@ (adr r2, 80094d0 <UART_SetConfig+0x418>)
 80094ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ce:	bf00      	nop
 80094d0:	080094f5 	.word	0x080094f5
 80094d4:	080094fd 	.word	0x080094fd
 80094d8:	08009505 	.word	0x08009505
 80094dc:	0800951b 	.word	0x0800951b
 80094e0:	0800950b 	.word	0x0800950b
 80094e4:	0800951b 	.word	0x0800951b
 80094e8:	0800951b 	.word	0x0800951b
 80094ec:	0800951b 	.word	0x0800951b
 80094f0:	08009513 	.word	0x08009513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094f4:	f7fc fd4a 	bl	8005f8c <HAL_RCC_GetPCLK1Freq>
 80094f8:	61b8      	str	r0, [r7, #24]
        break;
 80094fa:	e013      	b.n	8009524 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094fc:	f7fc fd5a 	bl	8005fb4 <HAL_RCC_GetPCLK2Freq>
 8009500:	61b8      	str	r0, [r7, #24]
        break;
 8009502:	e00f      	b.n	8009524 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009504:	4b1d      	ldr	r3, [pc, #116]	@ (800957c <UART_SetConfig+0x4c4>)
 8009506:	61bb      	str	r3, [r7, #24]
        break;
 8009508:	e00c      	b.n	8009524 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800950a:	f7fc fc2d 	bl	8005d68 <HAL_RCC_GetSysClockFreq>
 800950e:	61b8      	str	r0, [r7, #24]
        break;
 8009510:	e008      	b.n	8009524 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009512:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009516:	61bb      	str	r3, [r7, #24]
        break;
 8009518:	e004      	b.n	8009524 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800951a:	2300      	movs	r3, #0
 800951c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	77bb      	strb	r3, [r7, #30]
        break;
 8009522:	bf00      	nop
    }

    if (pclk != 0U)
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d018      	beq.n	800955c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	085a      	lsrs	r2, r3, #1
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	441a      	add	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	fbb2 f3f3 	udiv	r3, r2, r3
 800953c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	2b0f      	cmp	r3, #15
 8009542:	d909      	bls.n	8009558 <UART_SetConfig+0x4a0>
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800954a:	d205      	bcs.n	8009558 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	b29a      	uxth	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	60da      	str	r2, [r3, #12]
 8009556:	e001      	b.n	800955c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009568:	7fbb      	ldrb	r3, [r7, #30]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3720      	adds	r7, #32
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	40007c00 	.word	0x40007c00
 8009578:	40023800 	.word	0x40023800
 800957c:	00f42400 	.word	0x00f42400

08009580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00a      	beq.n	80095aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	430a      	orrs	r2, r1
 80095a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ae:	f003 0302 	and.w	r3, r3, #2
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00a      	beq.n	80095cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	430a      	orrs	r2, r1
 80095ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d0:	f003 0304 	and.w	r3, r3, #4
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00a      	beq.n	80095ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	430a      	orrs	r2, r1
 80095ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095f2:	f003 0308 	and.w	r3, r3, #8
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00a      	beq.n	8009610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	430a      	orrs	r2, r1
 800960e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009614:	f003 0310 	and.w	r3, r3, #16
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00a      	beq.n	8009632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	430a      	orrs	r2, r1
 8009630:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009636:	f003 0320 	and.w	r3, r3, #32
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00a      	beq.n	8009654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	430a      	orrs	r2, r1
 8009652:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800965c:	2b00      	cmp	r3, #0
 800965e:	d01a      	beq.n	8009696 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	430a      	orrs	r2, r1
 8009674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800967a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800967e:	d10a      	bne.n	8009696 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	430a      	orrs	r2, r1
 8009694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800969a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00a      	beq.n	80096b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	605a      	str	r2, [r3, #4]
  }
}
 80096b8:	bf00      	nop
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af02      	add	r7, sp, #8
 80096ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80096d4:	f7fb fb00 	bl	8004cd8 <HAL_GetTick>
 80096d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 0308 	and.w	r3, r3, #8
 80096e4:	2b08      	cmp	r3, #8
 80096e6:	d10e      	bne.n	8009706 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f81b 	bl	8009732 <UART_WaitOnFlagUntilTimeout>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009702:	2303      	movs	r3, #3
 8009704:	e011      	b.n	800972a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2220      	movs	r2, #32
 800970a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2220      	movs	r2, #32
 8009710:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b09c      	sub	sp, #112	@ 0x70
 8009736:	af00      	add	r7, sp, #0
 8009738:	60f8      	str	r0, [r7, #12]
 800973a:	60b9      	str	r1, [r7, #8]
 800973c:	603b      	str	r3, [r7, #0]
 800973e:	4613      	mov	r3, r2
 8009740:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009742:	e0a7      	b.n	8009894 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009744:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800974a:	f000 80a3 	beq.w	8009894 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800974e:	f7fb fac3 	bl	8004cd8 <HAL_GetTick>
 8009752:	4602      	mov	r2, r0
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800975a:	429a      	cmp	r2, r3
 800975c:	d302      	bcc.n	8009764 <UART_WaitOnFlagUntilTimeout+0x32>
 800975e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009760:	2b00      	cmp	r3, #0
 8009762:	d13f      	bne.n	80097e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800976c:	e853 3f00 	ldrex	r3, [r3]
 8009770:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009774:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009778:	667b      	str	r3, [r7, #100]	@ 0x64
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	461a      	mov	r2, r3
 8009780:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009782:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009784:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009786:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009788:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800978a:	e841 2300 	strex	r3, r2, [r1]
 800978e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1e6      	bne.n	8009764 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	3308      	adds	r3, #8
 800979c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097a0:	e853 3f00 	ldrex	r3, [r3]
 80097a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a8:	f023 0301 	bic.w	r3, r3, #1
 80097ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	3308      	adds	r3, #8
 80097b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80097b6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80097b8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80097bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097be:	e841 2300 	strex	r3, r2, [r1]
 80097c2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80097c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1e5      	bne.n	8009796 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2220      	movs	r2, #32
 80097ce:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2220      	movs	r2, #32
 80097d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80097e0:	2303      	movs	r3, #3
 80097e2:	e068      	b.n	80098b6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 0304 	and.w	r3, r3, #4
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d050      	beq.n	8009894 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	69db      	ldr	r3, [r3, #28]
 80097f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009800:	d148      	bne.n	8009894 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800980a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009814:	e853 3f00 	ldrex	r3, [r3]
 8009818:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800981a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800981c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009820:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	461a      	mov	r2, r3
 8009828:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800982a:	637b      	str	r3, [r7, #52]	@ 0x34
 800982c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009830:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009832:	e841 2300 	strex	r3, r2, [r1]
 8009836:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1e6      	bne.n	800980c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3308      	adds	r3, #8
 8009844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	e853 3f00 	ldrex	r3, [r3]
 800984c:	613b      	str	r3, [r7, #16]
   return(result);
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	f023 0301 	bic.w	r3, r3, #1
 8009854:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	3308      	adds	r3, #8
 800985c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800985e:	623a      	str	r2, [r7, #32]
 8009860:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009862:	69f9      	ldr	r1, [r7, #28]
 8009864:	6a3a      	ldr	r2, [r7, #32]
 8009866:	e841 2300 	strex	r3, r2, [r1]
 800986a:	61bb      	str	r3, [r7, #24]
   return(result);
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1e5      	bne.n	800983e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2220      	movs	r2, #32
 8009876:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2220      	movs	r2, #32
 800987c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2220      	movs	r2, #32
 8009884:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2200      	movs	r2, #0
 800988c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009890:	2303      	movs	r3, #3
 8009892:	e010      	b.n	80098b6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	69da      	ldr	r2, [r3, #28]
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	4013      	ands	r3, r2
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	bf0c      	ite	eq
 80098a4:	2301      	moveq	r3, #1
 80098a6:	2300      	movne	r3, #0
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	461a      	mov	r2, r3
 80098ac:	79fb      	ldrb	r3, [r7, #7]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	f43f af48 	beq.w	8009744 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3770      	adds	r7, #112	@ 0x70
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
	...

080098c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b097      	sub	sp, #92	@ 0x5c
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	4613      	mov	r3, r2
 80098cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	68ba      	ldr	r2, [r7, #8]
 80098d2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	88fa      	ldrh	r2, [r7, #6]
 80098d8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	88fa      	ldrh	r2, [r7, #6]
 80098e0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2200      	movs	r2, #0
 80098e8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098f2:	d10e      	bne.n	8009912 <UART_Start_Receive_IT+0x52>
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d105      	bne.n	8009908 <UART_Start_Receive_IT+0x48>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009902:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009906:	e02d      	b.n	8009964 <UART_Start_Receive_IT+0xa4>
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	22ff      	movs	r2, #255	@ 0xff
 800990c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009910:	e028      	b.n	8009964 <UART_Start_Receive_IT+0xa4>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10d      	bne.n	8009936 <UART_Start_Receive_IT+0x76>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d104      	bne.n	800992c <UART_Start_Receive_IT+0x6c>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	22ff      	movs	r2, #255	@ 0xff
 8009926:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800992a:	e01b      	b.n	8009964 <UART_Start_Receive_IT+0xa4>
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	227f      	movs	r2, #127	@ 0x7f
 8009930:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009934:	e016      	b.n	8009964 <UART_Start_Receive_IT+0xa4>
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800993e:	d10d      	bne.n	800995c <UART_Start_Receive_IT+0x9c>
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d104      	bne.n	8009952 <UART_Start_Receive_IT+0x92>
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	227f      	movs	r2, #127	@ 0x7f
 800994c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009950:	e008      	b.n	8009964 <UART_Start_Receive_IT+0xa4>
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	223f      	movs	r2, #63	@ 0x3f
 8009956:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800995a:	e003      	b.n	8009964 <UART_Start_Receive_IT+0xa4>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2200      	movs	r2, #0
 8009968:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2222      	movs	r2, #34	@ 0x22
 8009970:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	3308      	adds	r3, #8
 800997a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800997e:	e853 3f00 	ldrex	r3, [r3]
 8009982:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009986:	f043 0301 	orr.w	r3, r3, #1
 800998a:	657b      	str	r3, [r7, #84]	@ 0x54
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3308      	adds	r3, #8
 8009992:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009994:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009996:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009998:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800999a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800999c:	e841 2300 	strex	r3, r2, [r1]
 80099a0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80099a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1e5      	bne.n	8009974 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099b0:	d107      	bne.n	80099c2 <UART_Start_Receive_IT+0x102>
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d103      	bne.n	80099c2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	4a21      	ldr	r2, [pc, #132]	@ (8009a44 <UART_Start_Receive_IT+0x184>)
 80099be:	669a      	str	r2, [r3, #104]	@ 0x68
 80099c0:	e002      	b.n	80099c8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	4a20      	ldr	r2, [pc, #128]	@ (8009a48 <UART_Start_Receive_IT+0x188>)
 80099c6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d019      	beq.n	8009a04 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d8:	e853 3f00 	ldrex	r3, [r3]
 80099dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80099e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	461a      	mov	r2, r3
 80099ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80099f0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80099f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80099f6:	e841 2300 	strex	r3, r2, [r1]
 80099fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80099fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1e6      	bne.n	80099d0 <UART_Start_Receive_IT+0x110>
 8009a02:	e018      	b.n	8009a36 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	e853 3f00 	ldrex	r3, [r3]
 8009a10:	613b      	str	r3, [r7, #16]
   return(result);
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	f043 0320 	orr.w	r3, r3, #32
 8009a18:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a22:	623b      	str	r3, [r7, #32]
 8009a24:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a26:	69f9      	ldr	r1, [r7, #28]
 8009a28:	6a3a      	ldr	r2, [r7, #32]
 8009a2a:	e841 2300 	strex	r3, r2, [r1]
 8009a2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1e6      	bne.n	8009a04 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	375c      	adds	r7, #92	@ 0x5c
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	08009bb3 	.word	0x08009bb3
 8009a48:	08009a4d 	.word	0x08009a4d

08009a4c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b096      	sub	sp, #88	@ 0x58
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a5a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a64:	2b22      	cmp	r3, #34	@ 0x22
 8009a66:	f040 8098 	bne.w	8009b9a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a70:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a74:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8009a78:	b2d9      	uxtb	r1, r3
 8009a7a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009a7e:	b2da      	uxtb	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a84:	400a      	ands	r2, r1
 8009a86:	b2d2      	uxtb	r2, r2
 8009a88:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a8e:	1c5a      	adds	r2, r3, #1
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	b29a      	uxth	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d17b      	bne.n	8009baa <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aba:	e853 3f00 	ldrex	r3, [r3]
 8009abe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ac2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ac6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	461a      	mov	r2, r3
 8009ace:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ad0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ad2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ad6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ad8:	e841 2300 	strex	r3, r2, [r1]
 8009adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1e6      	bne.n	8009ab2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	3308      	adds	r3, #8
 8009aea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aee:	e853 3f00 	ldrex	r3, [r3]
 8009af2:	623b      	str	r3, [r7, #32]
   return(result);
 8009af4:	6a3b      	ldr	r3, [r7, #32]
 8009af6:	f023 0301 	bic.w	r3, r3, #1
 8009afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	3308      	adds	r3, #8
 8009b02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009b04:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b0c:	e841 2300 	strex	r3, r2, [r1]
 8009b10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1e5      	bne.n	8009ae4 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2220      	movs	r2, #32
 8009b1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d12e      	bne.n	8009b92 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	e853 3f00 	ldrex	r3, [r3]
 8009b46:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f023 0310 	bic.w	r3, r3, #16
 8009b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	461a      	mov	r2, r3
 8009b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b58:	61fb      	str	r3, [r7, #28]
 8009b5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5c:	69b9      	ldr	r1, [r7, #24]
 8009b5e:	69fa      	ldr	r2, [r7, #28]
 8009b60:	e841 2300 	strex	r3, r2, [r1]
 8009b64:	617b      	str	r3, [r7, #20]
   return(result);
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1e6      	bne.n	8009b3a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	69db      	ldr	r3, [r3, #28]
 8009b72:	f003 0310 	and.w	r3, r3, #16
 8009b76:	2b10      	cmp	r3, #16
 8009b78:	d103      	bne.n	8009b82 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2210      	movs	r2, #16
 8009b80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7ff fa87 	bl	800909e <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b90:	e00b      	b.n	8009baa <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7f8 fffa 	bl	8002b8c <HAL_UART_RxCpltCallback>
}
 8009b98:	e007      	b.n	8009baa <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	699a      	ldr	r2, [r3, #24]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f042 0208 	orr.w	r2, r2, #8
 8009ba8:	619a      	str	r2, [r3, #24]
}
 8009baa:	bf00      	nop
 8009bac:	3758      	adds	r7, #88	@ 0x58
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b096      	sub	sp, #88	@ 0x58
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009bc0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bca:	2b22      	cmp	r3, #34	@ 0x22
 8009bcc:	f040 8098 	bne.w	8009d00 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd6:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bde:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009be0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8009be4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009be8:	4013      	ands	r3, r2
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bee:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bf4:	1c9a      	adds	r2, r3, #2
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	3b01      	subs	r3, #1
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d17b      	bne.n	8009d10 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c20:	e853 3f00 	ldrex	r3, [r3]
 8009c24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	461a      	mov	r2, r3
 8009c34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c36:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c38:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c3e:	e841 2300 	strex	r3, r2, [r1]
 8009c42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1e6      	bne.n	8009c18 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	3308      	adds	r3, #8
 8009c50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c52:	6a3b      	ldr	r3, [r7, #32]
 8009c54:	e853 3f00 	ldrex	r3, [r3]
 8009c58:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	f023 0301 	bic.w	r3, r3, #1
 8009c60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	3308      	adds	r3, #8
 8009c68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c72:	e841 2300 	strex	r3, r2, [r1]
 8009c76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1e5      	bne.n	8009c4a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2220      	movs	r2, #32
 8009c82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d12e      	bne.n	8009cf8 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	e853 3f00 	ldrex	r3, [r3]
 8009cac:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	f023 0310 	bic.w	r3, r3, #16
 8009cb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	461a      	mov	r2, r3
 8009cbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cbe:	61bb      	str	r3, [r7, #24]
 8009cc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc2:	6979      	ldr	r1, [r7, #20]
 8009cc4:	69ba      	ldr	r2, [r7, #24]
 8009cc6:	e841 2300 	strex	r3, r2, [r1]
 8009cca:	613b      	str	r3, [r7, #16]
   return(result);
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d1e6      	bne.n	8009ca0 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	69db      	ldr	r3, [r3, #28]
 8009cd8:	f003 0310 	and.w	r3, r3, #16
 8009cdc:	2b10      	cmp	r3, #16
 8009cde:	d103      	bne.n	8009ce8 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2210      	movs	r2, #16
 8009ce6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f7ff f9d4 	bl	800909e <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009cf6:	e00b      	b.n	8009d10 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7f8 ff47 	bl	8002b8c <HAL_UART_RxCpltCallback>
}
 8009cfe:	e007      	b.n	8009d10 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	699a      	ldr	r2, [r3, #24]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f042 0208 	orr.w	r2, r2, #8
 8009d0e:	619a      	str	r2, [r3, #24]
}
 8009d10:	bf00      	nop
 8009d12:	3758      	adds	r7, #88	@ 0x58
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <atoi>:
 8009d18:	220a      	movs	r2, #10
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	f000 b87a 	b.w	8009e14 <strtol>

08009d20 <_strtol_l.constprop.0>:
 8009d20:	2b24      	cmp	r3, #36	@ 0x24
 8009d22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d26:	4686      	mov	lr, r0
 8009d28:	4690      	mov	r8, r2
 8009d2a:	d801      	bhi.n	8009d30 <_strtol_l.constprop.0+0x10>
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d106      	bne.n	8009d3e <_strtol_l.constprop.0+0x1e>
 8009d30:	f000 f8b6 	bl	8009ea0 <__errno>
 8009d34:	2316      	movs	r3, #22
 8009d36:	6003      	str	r3, [r0, #0]
 8009d38:	2000      	movs	r0, #0
 8009d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d3e:	4834      	ldr	r0, [pc, #208]	@ (8009e10 <_strtol_l.constprop.0+0xf0>)
 8009d40:	460d      	mov	r5, r1
 8009d42:	462a      	mov	r2, r5
 8009d44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d48:	5d06      	ldrb	r6, [r0, r4]
 8009d4a:	f016 0608 	ands.w	r6, r6, #8
 8009d4e:	d1f8      	bne.n	8009d42 <_strtol_l.constprop.0+0x22>
 8009d50:	2c2d      	cmp	r4, #45	@ 0x2d
 8009d52:	d12d      	bne.n	8009db0 <_strtol_l.constprop.0+0x90>
 8009d54:	782c      	ldrb	r4, [r5, #0]
 8009d56:	2601      	movs	r6, #1
 8009d58:	1c95      	adds	r5, r2, #2
 8009d5a:	f033 0210 	bics.w	r2, r3, #16
 8009d5e:	d109      	bne.n	8009d74 <_strtol_l.constprop.0+0x54>
 8009d60:	2c30      	cmp	r4, #48	@ 0x30
 8009d62:	d12a      	bne.n	8009dba <_strtol_l.constprop.0+0x9a>
 8009d64:	782a      	ldrb	r2, [r5, #0]
 8009d66:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009d6a:	2a58      	cmp	r2, #88	@ 0x58
 8009d6c:	d125      	bne.n	8009dba <_strtol_l.constprop.0+0x9a>
 8009d6e:	786c      	ldrb	r4, [r5, #1]
 8009d70:	2310      	movs	r3, #16
 8009d72:	3502      	adds	r5, #2
 8009d74:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009d78:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	fbbc f9f3 	udiv	r9, ip, r3
 8009d82:	4610      	mov	r0, r2
 8009d84:	fb03 ca19 	mls	sl, r3, r9, ip
 8009d88:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009d8c:	2f09      	cmp	r7, #9
 8009d8e:	d81b      	bhi.n	8009dc8 <_strtol_l.constprop.0+0xa8>
 8009d90:	463c      	mov	r4, r7
 8009d92:	42a3      	cmp	r3, r4
 8009d94:	dd27      	ble.n	8009de6 <_strtol_l.constprop.0+0xc6>
 8009d96:	1c57      	adds	r7, r2, #1
 8009d98:	d007      	beq.n	8009daa <_strtol_l.constprop.0+0x8a>
 8009d9a:	4581      	cmp	r9, r0
 8009d9c:	d320      	bcc.n	8009de0 <_strtol_l.constprop.0+0xc0>
 8009d9e:	d101      	bne.n	8009da4 <_strtol_l.constprop.0+0x84>
 8009da0:	45a2      	cmp	sl, r4
 8009da2:	db1d      	blt.n	8009de0 <_strtol_l.constprop.0+0xc0>
 8009da4:	fb00 4003 	mla	r0, r0, r3, r4
 8009da8:	2201      	movs	r2, #1
 8009daa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009dae:	e7eb      	b.n	8009d88 <_strtol_l.constprop.0+0x68>
 8009db0:	2c2b      	cmp	r4, #43	@ 0x2b
 8009db2:	bf04      	itt	eq
 8009db4:	782c      	ldrbeq	r4, [r5, #0]
 8009db6:	1c95      	addeq	r5, r2, #2
 8009db8:	e7cf      	b.n	8009d5a <_strtol_l.constprop.0+0x3a>
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d1da      	bne.n	8009d74 <_strtol_l.constprop.0+0x54>
 8009dbe:	2c30      	cmp	r4, #48	@ 0x30
 8009dc0:	bf0c      	ite	eq
 8009dc2:	2308      	moveq	r3, #8
 8009dc4:	230a      	movne	r3, #10
 8009dc6:	e7d5      	b.n	8009d74 <_strtol_l.constprop.0+0x54>
 8009dc8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009dcc:	2f19      	cmp	r7, #25
 8009dce:	d801      	bhi.n	8009dd4 <_strtol_l.constprop.0+0xb4>
 8009dd0:	3c37      	subs	r4, #55	@ 0x37
 8009dd2:	e7de      	b.n	8009d92 <_strtol_l.constprop.0+0x72>
 8009dd4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009dd8:	2f19      	cmp	r7, #25
 8009dda:	d804      	bhi.n	8009de6 <_strtol_l.constprop.0+0xc6>
 8009ddc:	3c57      	subs	r4, #87	@ 0x57
 8009dde:	e7d8      	b.n	8009d92 <_strtol_l.constprop.0+0x72>
 8009de0:	f04f 32ff 	mov.w	r2, #4294967295
 8009de4:	e7e1      	b.n	8009daa <_strtol_l.constprop.0+0x8a>
 8009de6:	1c53      	adds	r3, r2, #1
 8009de8:	d108      	bne.n	8009dfc <_strtol_l.constprop.0+0xdc>
 8009dea:	2322      	movs	r3, #34	@ 0x22
 8009dec:	f8ce 3000 	str.w	r3, [lr]
 8009df0:	4660      	mov	r0, ip
 8009df2:	f1b8 0f00 	cmp.w	r8, #0
 8009df6:	d0a0      	beq.n	8009d3a <_strtol_l.constprop.0+0x1a>
 8009df8:	1e69      	subs	r1, r5, #1
 8009dfa:	e006      	b.n	8009e0a <_strtol_l.constprop.0+0xea>
 8009dfc:	b106      	cbz	r6, 8009e00 <_strtol_l.constprop.0+0xe0>
 8009dfe:	4240      	negs	r0, r0
 8009e00:	f1b8 0f00 	cmp.w	r8, #0
 8009e04:	d099      	beq.n	8009d3a <_strtol_l.constprop.0+0x1a>
 8009e06:	2a00      	cmp	r2, #0
 8009e08:	d1f6      	bne.n	8009df8 <_strtol_l.constprop.0+0xd8>
 8009e0a:	f8c8 1000 	str.w	r1, [r8]
 8009e0e:	e794      	b.n	8009d3a <_strtol_l.constprop.0+0x1a>
 8009e10:	0800ab05 	.word	0x0800ab05

08009e14 <strtol>:
 8009e14:	4613      	mov	r3, r2
 8009e16:	460a      	mov	r2, r1
 8009e18:	4601      	mov	r1, r0
 8009e1a:	4802      	ldr	r0, [pc, #8]	@ (8009e24 <strtol+0x10>)
 8009e1c:	6800      	ldr	r0, [r0, #0]
 8009e1e:	f7ff bf7f 	b.w	8009d20 <_strtol_l.constprop.0>
 8009e22:	bf00      	nop
 8009e24:	20000134 	.word	0x20000134

08009e28 <sniprintf>:
 8009e28:	b40c      	push	{r2, r3}
 8009e2a:	b530      	push	{r4, r5, lr}
 8009e2c:	4b17      	ldr	r3, [pc, #92]	@ (8009e8c <sniprintf+0x64>)
 8009e2e:	1e0c      	subs	r4, r1, #0
 8009e30:	681d      	ldr	r5, [r3, #0]
 8009e32:	b09d      	sub	sp, #116	@ 0x74
 8009e34:	da08      	bge.n	8009e48 <sniprintf+0x20>
 8009e36:	238b      	movs	r3, #139	@ 0x8b
 8009e38:	602b      	str	r3, [r5, #0]
 8009e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e3e:	b01d      	add	sp, #116	@ 0x74
 8009e40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e44:	b002      	add	sp, #8
 8009e46:	4770      	bx	lr
 8009e48:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009e4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009e50:	bf14      	ite	ne
 8009e52:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009e56:	4623      	moveq	r3, r4
 8009e58:	9304      	str	r3, [sp, #16]
 8009e5a:	9307      	str	r3, [sp, #28]
 8009e5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009e60:	9002      	str	r0, [sp, #8]
 8009e62:	9006      	str	r0, [sp, #24]
 8009e64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009e68:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009e6a:	ab21      	add	r3, sp, #132	@ 0x84
 8009e6c:	a902      	add	r1, sp, #8
 8009e6e:	4628      	mov	r0, r5
 8009e70:	9301      	str	r3, [sp, #4]
 8009e72:	f000 f995 	bl	800a1a0 <_svfiprintf_r>
 8009e76:	1c43      	adds	r3, r0, #1
 8009e78:	bfbc      	itt	lt
 8009e7a:	238b      	movlt	r3, #139	@ 0x8b
 8009e7c:	602b      	strlt	r3, [r5, #0]
 8009e7e:	2c00      	cmp	r4, #0
 8009e80:	d0dd      	beq.n	8009e3e <sniprintf+0x16>
 8009e82:	9b02      	ldr	r3, [sp, #8]
 8009e84:	2200      	movs	r2, #0
 8009e86:	701a      	strb	r2, [r3, #0]
 8009e88:	e7d9      	b.n	8009e3e <sniprintf+0x16>
 8009e8a:	bf00      	nop
 8009e8c:	20000134 	.word	0x20000134

08009e90 <memset>:
 8009e90:	4402      	add	r2, r0
 8009e92:	4603      	mov	r3, r0
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d100      	bne.n	8009e9a <memset+0xa>
 8009e98:	4770      	bx	lr
 8009e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8009e9e:	e7f9      	b.n	8009e94 <memset+0x4>

08009ea0 <__errno>:
 8009ea0:	4b01      	ldr	r3, [pc, #4]	@ (8009ea8 <__errno+0x8>)
 8009ea2:	6818      	ldr	r0, [r3, #0]
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop
 8009ea8:	20000134 	.word	0x20000134

08009eac <__libc_init_array>:
 8009eac:	b570      	push	{r4, r5, r6, lr}
 8009eae:	4d0d      	ldr	r5, [pc, #52]	@ (8009ee4 <__libc_init_array+0x38>)
 8009eb0:	4c0d      	ldr	r4, [pc, #52]	@ (8009ee8 <__libc_init_array+0x3c>)
 8009eb2:	1b64      	subs	r4, r4, r5
 8009eb4:	10a4      	asrs	r4, r4, #2
 8009eb6:	2600      	movs	r6, #0
 8009eb8:	42a6      	cmp	r6, r4
 8009eba:	d109      	bne.n	8009ed0 <__libc_init_array+0x24>
 8009ebc:	4d0b      	ldr	r5, [pc, #44]	@ (8009eec <__libc_init_array+0x40>)
 8009ebe:	4c0c      	ldr	r4, [pc, #48]	@ (8009ef0 <__libc_init_array+0x44>)
 8009ec0:	f000 fce2 	bl	800a888 <_init>
 8009ec4:	1b64      	subs	r4, r4, r5
 8009ec6:	10a4      	asrs	r4, r4, #2
 8009ec8:	2600      	movs	r6, #0
 8009eca:	42a6      	cmp	r6, r4
 8009ecc:	d105      	bne.n	8009eda <__libc_init_array+0x2e>
 8009ece:	bd70      	pop	{r4, r5, r6, pc}
 8009ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ed4:	4798      	blx	r3
 8009ed6:	3601      	adds	r6, #1
 8009ed8:	e7ee      	b.n	8009eb8 <__libc_init_array+0xc>
 8009eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ede:	4798      	blx	r3
 8009ee0:	3601      	adds	r6, #1
 8009ee2:	e7f2      	b.n	8009eca <__libc_init_array+0x1e>
 8009ee4:	0800ac40 	.word	0x0800ac40
 8009ee8:	0800ac40 	.word	0x0800ac40
 8009eec:	0800ac40 	.word	0x0800ac40
 8009ef0:	0800ac44 	.word	0x0800ac44

08009ef4 <__retarget_lock_acquire_recursive>:
 8009ef4:	4770      	bx	lr

08009ef6 <__retarget_lock_release_recursive>:
 8009ef6:	4770      	bx	lr

08009ef8 <_free_r>:
 8009ef8:	b538      	push	{r3, r4, r5, lr}
 8009efa:	4605      	mov	r5, r0
 8009efc:	2900      	cmp	r1, #0
 8009efe:	d041      	beq.n	8009f84 <_free_r+0x8c>
 8009f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f04:	1f0c      	subs	r4, r1, #4
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	bfb8      	it	lt
 8009f0a:	18e4      	addlt	r4, r4, r3
 8009f0c:	f000 f8e0 	bl	800a0d0 <__malloc_lock>
 8009f10:	4a1d      	ldr	r2, [pc, #116]	@ (8009f88 <_free_r+0x90>)
 8009f12:	6813      	ldr	r3, [r2, #0]
 8009f14:	b933      	cbnz	r3, 8009f24 <_free_r+0x2c>
 8009f16:	6063      	str	r3, [r4, #4]
 8009f18:	6014      	str	r4, [r2, #0]
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f20:	f000 b8dc 	b.w	800a0dc <__malloc_unlock>
 8009f24:	42a3      	cmp	r3, r4
 8009f26:	d908      	bls.n	8009f3a <_free_r+0x42>
 8009f28:	6820      	ldr	r0, [r4, #0]
 8009f2a:	1821      	adds	r1, r4, r0
 8009f2c:	428b      	cmp	r3, r1
 8009f2e:	bf01      	itttt	eq
 8009f30:	6819      	ldreq	r1, [r3, #0]
 8009f32:	685b      	ldreq	r3, [r3, #4]
 8009f34:	1809      	addeq	r1, r1, r0
 8009f36:	6021      	streq	r1, [r4, #0]
 8009f38:	e7ed      	b.n	8009f16 <_free_r+0x1e>
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	b10b      	cbz	r3, 8009f44 <_free_r+0x4c>
 8009f40:	42a3      	cmp	r3, r4
 8009f42:	d9fa      	bls.n	8009f3a <_free_r+0x42>
 8009f44:	6811      	ldr	r1, [r2, #0]
 8009f46:	1850      	adds	r0, r2, r1
 8009f48:	42a0      	cmp	r0, r4
 8009f4a:	d10b      	bne.n	8009f64 <_free_r+0x6c>
 8009f4c:	6820      	ldr	r0, [r4, #0]
 8009f4e:	4401      	add	r1, r0
 8009f50:	1850      	adds	r0, r2, r1
 8009f52:	4283      	cmp	r3, r0
 8009f54:	6011      	str	r1, [r2, #0]
 8009f56:	d1e0      	bne.n	8009f1a <_free_r+0x22>
 8009f58:	6818      	ldr	r0, [r3, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	6053      	str	r3, [r2, #4]
 8009f5e:	4408      	add	r0, r1
 8009f60:	6010      	str	r0, [r2, #0]
 8009f62:	e7da      	b.n	8009f1a <_free_r+0x22>
 8009f64:	d902      	bls.n	8009f6c <_free_r+0x74>
 8009f66:	230c      	movs	r3, #12
 8009f68:	602b      	str	r3, [r5, #0]
 8009f6a:	e7d6      	b.n	8009f1a <_free_r+0x22>
 8009f6c:	6820      	ldr	r0, [r4, #0]
 8009f6e:	1821      	adds	r1, r4, r0
 8009f70:	428b      	cmp	r3, r1
 8009f72:	bf04      	itt	eq
 8009f74:	6819      	ldreq	r1, [r3, #0]
 8009f76:	685b      	ldreq	r3, [r3, #4]
 8009f78:	6063      	str	r3, [r4, #4]
 8009f7a:	bf04      	itt	eq
 8009f7c:	1809      	addeq	r1, r1, r0
 8009f7e:	6021      	streq	r1, [r4, #0]
 8009f80:	6054      	str	r4, [r2, #4]
 8009f82:	e7ca      	b.n	8009f1a <_free_r+0x22>
 8009f84:	bd38      	pop	{r3, r4, r5, pc}
 8009f86:	bf00      	nop
 8009f88:	20000610 	.word	0x20000610

08009f8c <sbrk_aligned>:
 8009f8c:	b570      	push	{r4, r5, r6, lr}
 8009f8e:	4e0f      	ldr	r6, [pc, #60]	@ (8009fcc <sbrk_aligned+0x40>)
 8009f90:	460c      	mov	r4, r1
 8009f92:	6831      	ldr	r1, [r6, #0]
 8009f94:	4605      	mov	r5, r0
 8009f96:	b911      	cbnz	r1, 8009f9e <sbrk_aligned+0x12>
 8009f98:	f000 fba6 	bl	800a6e8 <_sbrk_r>
 8009f9c:	6030      	str	r0, [r6, #0]
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	f000 fba1 	bl	800a6e8 <_sbrk_r>
 8009fa6:	1c43      	adds	r3, r0, #1
 8009fa8:	d103      	bne.n	8009fb2 <sbrk_aligned+0x26>
 8009faa:	f04f 34ff 	mov.w	r4, #4294967295
 8009fae:	4620      	mov	r0, r4
 8009fb0:	bd70      	pop	{r4, r5, r6, pc}
 8009fb2:	1cc4      	adds	r4, r0, #3
 8009fb4:	f024 0403 	bic.w	r4, r4, #3
 8009fb8:	42a0      	cmp	r0, r4
 8009fba:	d0f8      	beq.n	8009fae <sbrk_aligned+0x22>
 8009fbc:	1a21      	subs	r1, r4, r0
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	f000 fb92 	bl	800a6e8 <_sbrk_r>
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	d1f2      	bne.n	8009fae <sbrk_aligned+0x22>
 8009fc8:	e7ef      	b.n	8009faa <sbrk_aligned+0x1e>
 8009fca:	bf00      	nop
 8009fcc:	2000060c 	.word	0x2000060c

08009fd0 <_malloc_r>:
 8009fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fd4:	1ccd      	adds	r5, r1, #3
 8009fd6:	f025 0503 	bic.w	r5, r5, #3
 8009fda:	3508      	adds	r5, #8
 8009fdc:	2d0c      	cmp	r5, #12
 8009fde:	bf38      	it	cc
 8009fe0:	250c      	movcc	r5, #12
 8009fe2:	2d00      	cmp	r5, #0
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	db01      	blt.n	8009fec <_malloc_r+0x1c>
 8009fe8:	42a9      	cmp	r1, r5
 8009fea:	d904      	bls.n	8009ff6 <_malloc_r+0x26>
 8009fec:	230c      	movs	r3, #12
 8009fee:	6033      	str	r3, [r6, #0]
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ff6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a0cc <_malloc_r+0xfc>
 8009ffa:	f000 f869 	bl	800a0d0 <__malloc_lock>
 8009ffe:	f8d8 3000 	ldr.w	r3, [r8]
 800a002:	461c      	mov	r4, r3
 800a004:	bb44      	cbnz	r4, 800a058 <_malloc_r+0x88>
 800a006:	4629      	mov	r1, r5
 800a008:	4630      	mov	r0, r6
 800a00a:	f7ff ffbf 	bl	8009f8c <sbrk_aligned>
 800a00e:	1c43      	adds	r3, r0, #1
 800a010:	4604      	mov	r4, r0
 800a012:	d158      	bne.n	800a0c6 <_malloc_r+0xf6>
 800a014:	f8d8 4000 	ldr.w	r4, [r8]
 800a018:	4627      	mov	r7, r4
 800a01a:	2f00      	cmp	r7, #0
 800a01c:	d143      	bne.n	800a0a6 <_malloc_r+0xd6>
 800a01e:	2c00      	cmp	r4, #0
 800a020:	d04b      	beq.n	800a0ba <_malloc_r+0xea>
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	4639      	mov	r1, r7
 800a026:	4630      	mov	r0, r6
 800a028:	eb04 0903 	add.w	r9, r4, r3
 800a02c:	f000 fb5c 	bl	800a6e8 <_sbrk_r>
 800a030:	4581      	cmp	r9, r0
 800a032:	d142      	bne.n	800a0ba <_malloc_r+0xea>
 800a034:	6821      	ldr	r1, [r4, #0]
 800a036:	1a6d      	subs	r5, r5, r1
 800a038:	4629      	mov	r1, r5
 800a03a:	4630      	mov	r0, r6
 800a03c:	f7ff ffa6 	bl	8009f8c <sbrk_aligned>
 800a040:	3001      	adds	r0, #1
 800a042:	d03a      	beq.n	800a0ba <_malloc_r+0xea>
 800a044:	6823      	ldr	r3, [r4, #0]
 800a046:	442b      	add	r3, r5
 800a048:	6023      	str	r3, [r4, #0]
 800a04a:	f8d8 3000 	ldr.w	r3, [r8]
 800a04e:	685a      	ldr	r2, [r3, #4]
 800a050:	bb62      	cbnz	r2, 800a0ac <_malloc_r+0xdc>
 800a052:	f8c8 7000 	str.w	r7, [r8]
 800a056:	e00f      	b.n	800a078 <_malloc_r+0xa8>
 800a058:	6822      	ldr	r2, [r4, #0]
 800a05a:	1b52      	subs	r2, r2, r5
 800a05c:	d420      	bmi.n	800a0a0 <_malloc_r+0xd0>
 800a05e:	2a0b      	cmp	r2, #11
 800a060:	d917      	bls.n	800a092 <_malloc_r+0xc2>
 800a062:	1961      	adds	r1, r4, r5
 800a064:	42a3      	cmp	r3, r4
 800a066:	6025      	str	r5, [r4, #0]
 800a068:	bf18      	it	ne
 800a06a:	6059      	strne	r1, [r3, #4]
 800a06c:	6863      	ldr	r3, [r4, #4]
 800a06e:	bf08      	it	eq
 800a070:	f8c8 1000 	streq.w	r1, [r8]
 800a074:	5162      	str	r2, [r4, r5]
 800a076:	604b      	str	r3, [r1, #4]
 800a078:	4630      	mov	r0, r6
 800a07a:	f000 f82f 	bl	800a0dc <__malloc_unlock>
 800a07e:	f104 000b 	add.w	r0, r4, #11
 800a082:	1d23      	adds	r3, r4, #4
 800a084:	f020 0007 	bic.w	r0, r0, #7
 800a088:	1ac2      	subs	r2, r0, r3
 800a08a:	bf1c      	itt	ne
 800a08c:	1a1b      	subne	r3, r3, r0
 800a08e:	50a3      	strne	r3, [r4, r2]
 800a090:	e7af      	b.n	8009ff2 <_malloc_r+0x22>
 800a092:	6862      	ldr	r2, [r4, #4]
 800a094:	42a3      	cmp	r3, r4
 800a096:	bf0c      	ite	eq
 800a098:	f8c8 2000 	streq.w	r2, [r8]
 800a09c:	605a      	strne	r2, [r3, #4]
 800a09e:	e7eb      	b.n	800a078 <_malloc_r+0xa8>
 800a0a0:	4623      	mov	r3, r4
 800a0a2:	6864      	ldr	r4, [r4, #4]
 800a0a4:	e7ae      	b.n	800a004 <_malloc_r+0x34>
 800a0a6:	463c      	mov	r4, r7
 800a0a8:	687f      	ldr	r7, [r7, #4]
 800a0aa:	e7b6      	b.n	800a01a <_malloc_r+0x4a>
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	42a3      	cmp	r3, r4
 800a0b2:	d1fb      	bne.n	800a0ac <_malloc_r+0xdc>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	6053      	str	r3, [r2, #4]
 800a0b8:	e7de      	b.n	800a078 <_malloc_r+0xa8>
 800a0ba:	230c      	movs	r3, #12
 800a0bc:	6033      	str	r3, [r6, #0]
 800a0be:	4630      	mov	r0, r6
 800a0c0:	f000 f80c 	bl	800a0dc <__malloc_unlock>
 800a0c4:	e794      	b.n	8009ff0 <_malloc_r+0x20>
 800a0c6:	6005      	str	r5, [r0, #0]
 800a0c8:	e7d6      	b.n	800a078 <_malloc_r+0xa8>
 800a0ca:	bf00      	nop
 800a0cc:	20000610 	.word	0x20000610

0800a0d0 <__malloc_lock>:
 800a0d0:	4801      	ldr	r0, [pc, #4]	@ (800a0d8 <__malloc_lock+0x8>)
 800a0d2:	f7ff bf0f 	b.w	8009ef4 <__retarget_lock_acquire_recursive>
 800a0d6:	bf00      	nop
 800a0d8:	20000608 	.word	0x20000608

0800a0dc <__malloc_unlock>:
 800a0dc:	4801      	ldr	r0, [pc, #4]	@ (800a0e4 <__malloc_unlock+0x8>)
 800a0de:	f7ff bf0a 	b.w	8009ef6 <__retarget_lock_release_recursive>
 800a0e2:	bf00      	nop
 800a0e4:	20000608 	.word	0x20000608

0800a0e8 <__ssputs_r>:
 800a0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0ec:	688e      	ldr	r6, [r1, #8]
 800a0ee:	461f      	mov	r7, r3
 800a0f0:	42be      	cmp	r6, r7
 800a0f2:	680b      	ldr	r3, [r1, #0]
 800a0f4:	4682      	mov	sl, r0
 800a0f6:	460c      	mov	r4, r1
 800a0f8:	4690      	mov	r8, r2
 800a0fa:	d82d      	bhi.n	800a158 <__ssputs_r+0x70>
 800a0fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a100:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a104:	d026      	beq.n	800a154 <__ssputs_r+0x6c>
 800a106:	6965      	ldr	r5, [r4, #20]
 800a108:	6909      	ldr	r1, [r1, #16]
 800a10a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a10e:	eba3 0901 	sub.w	r9, r3, r1
 800a112:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a116:	1c7b      	adds	r3, r7, #1
 800a118:	444b      	add	r3, r9
 800a11a:	106d      	asrs	r5, r5, #1
 800a11c:	429d      	cmp	r5, r3
 800a11e:	bf38      	it	cc
 800a120:	461d      	movcc	r5, r3
 800a122:	0553      	lsls	r3, r2, #21
 800a124:	d527      	bpl.n	800a176 <__ssputs_r+0x8e>
 800a126:	4629      	mov	r1, r5
 800a128:	f7ff ff52 	bl	8009fd0 <_malloc_r>
 800a12c:	4606      	mov	r6, r0
 800a12e:	b360      	cbz	r0, 800a18a <__ssputs_r+0xa2>
 800a130:	6921      	ldr	r1, [r4, #16]
 800a132:	464a      	mov	r2, r9
 800a134:	f000 fae8 	bl	800a708 <memcpy>
 800a138:	89a3      	ldrh	r3, [r4, #12]
 800a13a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a13e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a142:	81a3      	strh	r3, [r4, #12]
 800a144:	6126      	str	r6, [r4, #16]
 800a146:	6165      	str	r5, [r4, #20]
 800a148:	444e      	add	r6, r9
 800a14a:	eba5 0509 	sub.w	r5, r5, r9
 800a14e:	6026      	str	r6, [r4, #0]
 800a150:	60a5      	str	r5, [r4, #8]
 800a152:	463e      	mov	r6, r7
 800a154:	42be      	cmp	r6, r7
 800a156:	d900      	bls.n	800a15a <__ssputs_r+0x72>
 800a158:	463e      	mov	r6, r7
 800a15a:	6820      	ldr	r0, [r4, #0]
 800a15c:	4632      	mov	r2, r6
 800a15e:	4641      	mov	r1, r8
 800a160:	f000 faa8 	bl	800a6b4 <memmove>
 800a164:	68a3      	ldr	r3, [r4, #8]
 800a166:	1b9b      	subs	r3, r3, r6
 800a168:	60a3      	str	r3, [r4, #8]
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	4433      	add	r3, r6
 800a16e:	6023      	str	r3, [r4, #0]
 800a170:	2000      	movs	r0, #0
 800a172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a176:	462a      	mov	r2, r5
 800a178:	f000 fad4 	bl	800a724 <_realloc_r>
 800a17c:	4606      	mov	r6, r0
 800a17e:	2800      	cmp	r0, #0
 800a180:	d1e0      	bne.n	800a144 <__ssputs_r+0x5c>
 800a182:	6921      	ldr	r1, [r4, #16]
 800a184:	4650      	mov	r0, sl
 800a186:	f7ff feb7 	bl	8009ef8 <_free_r>
 800a18a:	230c      	movs	r3, #12
 800a18c:	f8ca 3000 	str.w	r3, [sl]
 800a190:	89a3      	ldrh	r3, [r4, #12]
 800a192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a196:	81a3      	strh	r3, [r4, #12]
 800a198:	f04f 30ff 	mov.w	r0, #4294967295
 800a19c:	e7e9      	b.n	800a172 <__ssputs_r+0x8a>
	...

0800a1a0 <_svfiprintf_r>:
 800a1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a4:	4698      	mov	r8, r3
 800a1a6:	898b      	ldrh	r3, [r1, #12]
 800a1a8:	061b      	lsls	r3, r3, #24
 800a1aa:	b09d      	sub	sp, #116	@ 0x74
 800a1ac:	4607      	mov	r7, r0
 800a1ae:	460d      	mov	r5, r1
 800a1b0:	4614      	mov	r4, r2
 800a1b2:	d510      	bpl.n	800a1d6 <_svfiprintf_r+0x36>
 800a1b4:	690b      	ldr	r3, [r1, #16]
 800a1b6:	b973      	cbnz	r3, 800a1d6 <_svfiprintf_r+0x36>
 800a1b8:	2140      	movs	r1, #64	@ 0x40
 800a1ba:	f7ff ff09 	bl	8009fd0 <_malloc_r>
 800a1be:	6028      	str	r0, [r5, #0]
 800a1c0:	6128      	str	r0, [r5, #16]
 800a1c2:	b930      	cbnz	r0, 800a1d2 <_svfiprintf_r+0x32>
 800a1c4:	230c      	movs	r3, #12
 800a1c6:	603b      	str	r3, [r7, #0]
 800a1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1cc:	b01d      	add	sp, #116	@ 0x74
 800a1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d2:	2340      	movs	r3, #64	@ 0x40
 800a1d4:	616b      	str	r3, [r5, #20]
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1da:	2320      	movs	r3, #32
 800a1dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1e4:	2330      	movs	r3, #48	@ 0x30
 800a1e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a384 <_svfiprintf_r+0x1e4>
 800a1ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1ee:	f04f 0901 	mov.w	r9, #1
 800a1f2:	4623      	mov	r3, r4
 800a1f4:	469a      	mov	sl, r3
 800a1f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1fa:	b10a      	cbz	r2, 800a200 <_svfiprintf_r+0x60>
 800a1fc:	2a25      	cmp	r2, #37	@ 0x25
 800a1fe:	d1f9      	bne.n	800a1f4 <_svfiprintf_r+0x54>
 800a200:	ebba 0b04 	subs.w	fp, sl, r4
 800a204:	d00b      	beq.n	800a21e <_svfiprintf_r+0x7e>
 800a206:	465b      	mov	r3, fp
 800a208:	4622      	mov	r2, r4
 800a20a:	4629      	mov	r1, r5
 800a20c:	4638      	mov	r0, r7
 800a20e:	f7ff ff6b 	bl	800a0e8 <__ssputs_r>
 800a212:	3001      	adds	r0, #1
 800a214:	f000 80a7 	beq.w	800a366 <_svfiprintf_r+0x1c6>
 800a218:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a21a:	445a      	add	r2, fp
 800a21c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a21e:	f89a 3000 	ldrb.w	r3, [sl]
 800a222:	2b00      	cmp	r3, #0
 800a224:	f000 809f 	beq.w	800a366 <_svfiprintf_r+0x1c6>
 800a228:	2300      	movs	r3, #0
 800a22a:	f04f 32ff 	mov.w	r2, #4294967295
 800a22e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a232:	f10a 0a01 	add.w	sl, sl, #1
 800a236:	9304      	str	r3, [sp, #16]
 800a238:	9307      	str	r3, [sp, #28]
 800a23a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a23e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a240:	4654      	mov	r4, sl
 800a242:	2205      	movs	r2, #5
 800a244:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a248:	484e      	ldr	r0, [pc, #312]	@ (800a384 <_svfiprintf_r+0x1e4>)
 800a24a:	f7f5 fff9 	bl	8000240 <memchr>
 800a24e:	9a04      	ldr	r2, [sp, #16]
 800a250:	b9d8      	cbnz	r0, 800a28a <_svfiprintf_r+0xea>
 800a252:	06d0      	lsls	r0, r2, #27
 800a254:	bf44      	itt	mi
 800a256:	2320      	movmi	r3, #32
 800a258:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a25c:	0711      	lsls	r1, r2, #28
 800a25e:	bf44      	itt	mi
 800a260:	232b      	movmi	r3, #43	@ 0x2b
 800a262:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a266:	f89a 3000 	ldrb.w	r3, [sl]
 800a26a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a26c:	d015      	beq.n	800a29a <_svfiprintf_r+0xfa>
 800a26e:	9a07      	ldr	r2, [sp, #28]
 800a270:	4654      	mov	r4, sl
 800a272:	2000      	movs	r0, #0
 800a274:	f04f 0c0a 	mov.w	ip, #10
 800a278:	4621      	mov	r1, r4
 800a27a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a27e:	3b30      	subs	r3, #48	@ 0x30
 800a280:	2b09      	cmp	r3, #9
 800a282:	d94b      	bls.n	800a31c <_svfiprintf_r+0x17c>
 800a284:	b1b0      	cbz	r0, 800a2b4 <_svfiprintf_r+0x114>
 800a286:	9207      	str	r2, [sp, #28]
 800a288:	e014      	b.n	800a2b4 <_svfiprintf_r+0x114>
 800a28a:	eba0 0308 	sub.w	r3, r0, r8
 800a28e:	fa09 f303 	lsl.w	r3, r9, r3
 800a292:	4313      	orrs	r3, r2
 800a294:	9304      	str	r3, [sp, #16]
 800a296:	46a2      	mov	sl, r4
 800a298:	e7d2      	b.n	800a240 <_svfiprintf_r+0xa0>
 800a29a:	9b03      	ldr	r3, [sp, #12]
 800a29c:	1d19      	adds	r1, r3, #4
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	9103      	str	r1, [sp, #12]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	bfbb      	ittet	lt
 800a2a6:	425b      	neglt	r3, r3
 800a2a8:	f042 0202 	orrlt.w	r2, r2, #2
 800a2ac:	9307      	strge	r3, [sp, #28]
 800a2ae:	9307      	strlt	r3, [sp, #28]
 800a2b0:	bfb8      	it	lt
 800a2b2:	9204      	strlt	r2, [sp, #16]
 800a2b4:	7823      	ldrb	r3, [r4, #0]
 800a2b6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2b8:	d10a      	bne.n	800a2d0 <_svfiprintf_r+0x130>
 800a2ba:	7863      	ldrb	r3, [r4, #1]
 800a2bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2be:	d132      	bne.n	800a326 <_svfiprintf_r+0x186>
 800a2c0:	9b03      	ldr	r3, [sp, #12]
 800a2c2:	1d1a      	adds	r2, r3, #4
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	9203      	str	r2, [sp, #12]
 800a2c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2cc:	3402      	adds	r4, #2
 800a2ce:	9305      	str	r3, [sp, #20]
 800a2d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a394 <_svfiprintf_r+0x1f4>
 800a2d4:	7821      	ldrb	r1, [r4, #0]
 800a2d6:	2203      	movs	r2, #3
 800a2d8:	4650      	mov	r0, sl
 800a2da:	f7f5 ffb1 	bl	8000240 <memchr>
 800a2de:	b138      	cbz	r0, 800a2f0 <_svfiprintf_r+0x150>
 800a2e0:	9b04      	ldr	r3, [sp, #16]
 800a2e2:	eba0 000a 	sub.w	r0, r0, sl
 800a2e6:	2240      	movs	r2, #64	@ 0x40
 800a2e8:	4082      	lsls	r2, r0
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	3401      	adds	r4, #1
 800a2ee:	9304      	str	r3, [sp, #16]
 800a2f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f4:	4824      	ldr	r0, [pc, #144]	@ (800a388 <_svfiprintf_r+0x1e8>)
 800a2f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2fa:	2206      	movs	r2, #6
 800a2fc:	f7f5 ffa0 	bl	8000240 <memchr>
 800a300:	2800      	cmp	r0, #0
 800a302:	d036      	beq.n	800a372 <_svfiprintf_r+0x1d2>
 800a304:	4b21      	ldr	r3, [pc, #132]	@ (800a38c <_svfiprintf_r+0x1ec>)
 800a306:	bb1b      	cbnz	r3, 800a350 <_svfiprintf_r+0x1b0>
 800a308:	9b03      	ldr	r3, [sp, #12]
 800a30a:	3307      	adds	r3, #7
 800a30c:	f023 0307 	bic.w	r3, r3, #7
 800a310:	3308      	adds	r3, #8
 800a312:	9303      	str	r3, [sp, #12]
 800a314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a316:	4433      	add	r3, r6
 800a318:	9309      	str	r3, [sp, #36]	@ 0x24
 800a31a:	e76a      	b.n	800a1f2 <_svfiprintf_r+0x52>
 800a31c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a320:	460c      	mov	r4, r1
 800a322:	2001      	movs	r0, #1
 800a324:	e7a8      	b.n	800a278 <_svfiprintf_r+0xd8>
 800a326:	2300      	movs	r3, #0
 800a328:	3401      	adds	r4, #1
 800a32a:	9305      	str	r3, [sp, #20]
 800a32c:	4619      	mov	r1, r3
 800a32e:	f04f 0c0a 	mov.w	ip, #10
 800a332:	4620      	mov	r0, r4
 800a334:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a338:	3a30      	subs	r2, #48	@ 0x30
 800a33a:	2a09      	cmp	r2, #9
 800a33c:	d903      	bls.n	800a346 <_svfiprintf_r+0x1a6>
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d0c6      	beq.n	800a2d0 <_svfiprintf_r+0x130>
 800a342:	9105      	str	r1, [sp, #20]
 800a344:	e7c4      	b.n	800a2d0 <_svfiprintf_r+0x130>
 800a346:	fb0c 2101 	mla	r1, ip, r1, r2
 800a34a:	4604      	mov	r4, r0
 800a34c:	2301      	movs	r3, #1
 800a34e:	e7f0      	b.n	800a332 <_svfiprintf_r+0x192>
 800a350:	ab03      	add	r3, sp, #12
 800a352:	9300      	str	r3, [sp, #0]
 800a354:	462a      	mov	r2, r5
 800a356:	4b0e      	ldr	r3, [pc, #56]	@ (800a390 <_svfiprintf_r+0x1f0>)
 800a358:	a904      	add	r1, sp, #16
 800a35a:	4638      	mov	r0, r7
 800a35c:	f3af 8000 	nop.w
 800a360:	1c42      	adds	r2, r0, #1
 800a362:	4606      	mov	r6, r0
 800a364:	d1d6      	bne.n	800a314 <_svfiprintf_r+0x174>
 800a366:	89ab      	ldrh	r3, [r5, #12]
 800a368:	065b      	lsls	r3, r3, #25
 800a36a:	f53f af2d 	bmi.w	800a1c8 <_svfiprintf_r+0x28>
 800a36e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a370:	e72c      	b.n	800a1cc <_svfiprintf_r+0x2c>
 800a372:	ab03      	add	r3, sp, #12
 800a374:	9300      	str	r3, [sp, #0]
 800a376:	462a      	mov	r2, r5
 800a378:	4b05      	ldr	r3, [pc, #20]	@ (800a390 <_svfiprintf_r+0x1f0>)
 800a37a:	a904      	add	r1, sp, #16
 800a37c:	4638      	mov	r0, r7
 800a37e:	f000 f879 	bl	800a474 <_printf_i>
 800a382:	e7ed      	b.n	800a360 <_svfiprintf_r+0x1c0>
 800a384:	0800ac05 	.word	0x0800ac05
 800a388:	0800ac0f 	.word	0x0800ac0f
 800a38c:	00000000 	.word	0x00000000
 800a390:	0800a0e9 	.word	0x0800a0e9
 800a394:	0800ac0b 	.word	0x0800ac0b

0800a398 <_printf_common>:
 800a398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a39c:	4616      	mov	r6, r2
 800a39e:	4698      	mov	r8, r3
 800a3a0:	688a      	ldr	r2, [r1, #8]
 800a3a2:	690b      	ldr	r3, [r1, #16]
 800a3a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	bfb8      	it	lt
 800a3ac:	4613      	movlt	r3, r2
 800a3ae:	6033      	str	r3, [r6, #0]
 800a3b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a3b4:	4607      	mov	r7, r0
 800a3b6:	460c      	mov	r4, r1
 800a3b8:	b10a      	cbz	r2, 800a3be <_printf_common+0x26>
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	6033      	str	r3, [r6, #0]
 800a3be:	6823      	ldr	r3, [r4, #0]
 800a3c0:	0699      	lsls	r1, r3, #26
 800a3c2:	bf42      	ittt	mi
 800a3c4:	6833      	ldrmi	r3, [r6, #0]
 800a3c6:	3302      	addmi	r3, #2
 800a3c8:	6033      	strmi	r3, [r6, #0]
 800a3ca:	6825      	ldr	r5, [r4, #0]
 800a3cc:	f015 0506 	ands.w	r5, r5, #6
 800a3d0:	d106      	bne.n	800a3e0 <_printf_common+0x48>
 800a3d2:	f104 0a19 	add.w	sl, r4, #25
 800a3d6:	68e3      	ldr	r3, [r4, #12]
 800a3d8:	6832      	ldr	r2, [r6, #0]
 800a3da:	1a9b      	subs	r3, r3, r2
 800a3dc:	42ab      	cmp	r3, r5
 800a3de:	dc26      	bgt.n	800a42e <_printf_common+0x96>
 800a3e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a3e4:	6822      	ldr	r2, [r4, #0]
 800a3e6:	3b00      	subs	r3, #0
 800a3e8:	bf18      	it	ne
 800a3ea:	2301      	movne	r3, #1
 800a3ec:	0692      	lsls	r2, r2, #26
 800a3ee:	d42b      	bmi.n	800a448 <_printf_common+0xb0>
 800a3f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a3f4:	4641      	mov	r1, r8
 800a3f6:	4638      	mov	r0, r7
 800a3f8:	47c8      	blx	r9
 800a3fa:	3001      	adds	r0, #1
 800a3fc:	d01e      	beq.n	800a43c <_printf_common+0xa4>
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	6922      	ldr	r2, [r4, #16]
 800a402:	f003 0306 	and.w	r3, r3, #6
 800a406:	2b04      	cmp	r3, #4
 800a408:	bf02      	ittt	eq
 800a40a:	68e5      	ldreq	r5, [r4, #12]
 800a40c:	6833      	ldreq	r3, [r6, #0]
 800a40e:	1aed      	subeq	r5, r5, r3
 800a410:	68a3      	ldr	r3, [r4, #8]
 800a412:	bf0c      	ite	eq
 800a414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a418:	2500      	movne	r5, #0
 800a41a:	4293      	cmp	r3, r2
 800a41c:	bfc4      	itt	gt
 800a41e:	1a9b      	subgt	r3, r3, r2
 800a420:	18ed      	addgt	r5, r5, r3
 800a422:	2600      	movs	r6, #0
 800a424:	341a      	adds	r4, #26
 800a426:	42b5      	cmp	r5, r6
 800a428:	d11a      	bne.n	800a460 <_printf_common+0xc8>
 800a42a:	2000      	movs	r0, #0
 800a42c:	e008      	b.n	800a440 <_printf_common+0xa8>
 800a42e:	2301      	movs	r3, #1
 800a430:	4652      	mov	r2, sl
 800a432:	4641      	mov	r1, r8
 800a434:	4638      	mov	r0, r7
 800a436:	47c8      	blx	r9
 800a438:	3001      	adds	r0, #1
 800a43a:	d103      	bne.n	800a444 <_printf_common+0xac>
 800a43c:	f04f 30ff 	mov.w	r0, #4294967295
 800a440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a444:	3501      	adds	r5, #1
 800a446:	e7c6      	b.n	800a3d6 <_printf_common+0x3e>
 800a448:	18e1      	adds	r1, r4, r3
 800a44a:	1c5a      	adds	r2, r3, #1
 800a44c:	2030      	movs	r0, #48	@ 0x30
 800a44e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a452:	4422      	add	r2, r4
 800a454:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a458:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a45c:	3302      	adds	r3, #2
 800a45e:	e7c7      	b.n	800a3f0 <_printf_common+0x58>
 800a460:	2301      	movs	r3, #1
 800a462:	4622      	mov	r2, r4
 800a464:	4641      	mov	r1, r8
 800a466:	4638      	mov	r0, r7
 800a468:	47c8      	blx	r9
 800a46a:	3001      	adds	r0, #1
 800a46c:	d0e6      	beq.n	800a43c <_printf_common+0xa4>
 800a46e:	3601      	adds	r6, #1
 800a470:	e7d9      	b.n	800a426 <_printf_common+0x8e>
	...

0800a474 <_printf_i>:
 800a474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a478:	7e0f      	ldrb	r7, [r1, #24]
 800a47a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a47c:	2f78      	cmp	r7, #120	@ 0x78
 800a47e:	4691      	mov	r9, r2
 800a480:	4680      	mov	r8, r0
 800a482:	460c      	mov	r4, r1
 800a484:	469a      	mov	sl, r3
 800a486:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a48a:	d807      	bhi.n	800a49c <_printf_i+0x28>
 800a48c:	2f62      	cmp	r7, #98	@ 0x62
 800a48e:	d80a      	bhi.n	800a4a6 <_printf_i+0x32>
 800a490:	2f00      	cmp	r7, #0
 800a492:	f000 80d2 	beq.w	800a63a <_printf_i+0x1c6>
 800a496:	2f58      	cmp	r7, #88	@ 0x58
 800a498:	f000 80b9 	beq.w	800a60e <_printf_i+0x19a>
 800a49c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a4a4:	e03a      	b.n	800a51c <_printf_i+0xa8>
 800a4a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a4aa:	2b15      	cmp	r3, #21
 800a4ac:	d8f6      	bhi.n	800a49c <_printf_i+0x28>
 800a4ae:	a101      	add	r1, pc, #4	@ (adr r1, 800a4b4 <_printf_i+0x40>)
 800a4b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4b4:	0800a50d 	.word	0x0800a50d
 800a4b8:	0800a521 	.word	0x0800a521
 800a4bc:	0800a49d 	.word	0x0800a49d
 800a4c0:	0800a49d 	.word	0x0800a49d
 800a4c4:	0800a49d 	.word	0x0800a49d
 800a4c8:	0800a49d 	.word	0x0800a49d
 800a4cc:	0800a521 	.word	0x0800a521
 800a4d0:	0800a49d 	.word	0x0800a49d
 800a4d4:	0800a49d 	.word	0x0800a49d
 800a4d8:	0800a49d 	.word	0x0800a49d
 800a4dc:	0800a49d 	.word	0x0800a49d
 800a4e0:	0800a621 	.word	0x0800a621
 800a4e4:	0800a54b 	.word	0x0800a54b
 800a4e8:	0800a5db 	.word	0x0800a5db
 800a4ec:	0800a49d 	.word	0x0800a49d
 800a4f0:	0800a49d 	.word	0x0800a49d
 800a4f4:	0800a643 	.word	0x0800a643
 800a4f8:	0800a49d 	.word	0x0800a49d
 800a4fc:	0800a54b 	.word	0x0800a54b
 800a500:	0800a49d 	.word	0x0800a49d
 800a504:	0800a49d 	.word	0x0800a49d
 800a508:	0800a5e3 	.word	0x0800a5e3
 800a50c:	6833      	ldr	r3, [r6, #0]
 800a50e:	1d1a      	adds	r2, r3, #4
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	6032      	str	r2, [r6, #0]
 800a514:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a518:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a51c:	2301      	movs	r3, #1
 800a51e:	e09d      	b.n	800a65c <_printf_i+0x1e8>
 800a520:	6833      	ldr	r3, [r6, #0]
 800a522:	6820      	ldr	r0, [r4, #0]
 800a524:	1d19      	adds	r1, r3, #4
 800a526:	6031      	str	r1, [r6, #0]
 800a528:	0606      	lsls	r6, r0, #24
 800a52a:	d501      	bpl.n	800a530 <_printf_i+0xbc>
 800a52c:	681d      	ldr	r5, [r3, #0]
 800a52e:	e003      	b.n	800a538 <_printf_i+0xc4>
 800a530:	0645      	lsls	r5, r0, #25
 800a532:	d5fb      	bpl.n	800a52c <_printf_i+0xb8>
 800a534:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a538:	2d00      	cmp	r5, #0
 800a53a:	da03      	bge.n	800a544 <_printf_i+0xd0>
 800a53c:	232d      	movs	r3, #45	@ 0x2d
 800a53e:	426d      	negs	r5, r5
 800a540:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a544:	4859      	ldr	r0, [pc, #356]	@ (800a6ac <_printf_i+0x238>)
 800a546:	230a      	movs	r3, #10
 800a548:	e011      	b.n	800a56e <_printf_i+0xfa>
 800a54a:	6821      	ldr	r1, [r4, #0]
 800a54c:	6833      	ldr	r3, [r6, #0]
 800a54e:	0608      	lsls	r0, r1, #24
 800a550:	f853 5b04 	ldr.w	r5, [r3], #4
 800a554:	d402      	bmi.n	800a55c <_printf_i+0xe8>
 800a556:	0649      	lsls	r1, r1, #25
 800a558:	bf48      	it	mi
 800a55a:	b2ad      	uxthmi	r5, r5
 800a55c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a55e:	4853      	ldr	r0, [pc, #332]	@ (800a6ac <_printf_i+0x238>)
 800a560:	6033      	str	r3, [r6, #0]
 800a562:	bf14      	ite	ne
 800a564:	230a      	movne	r3, #10
 800a566:	2308      	moveq	r3, #8
 800a568:	2100      	movs	r1, #0
 800a56a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a56e:	6866      	ldr	r6, [r4, #4]
 800a570:	60a6      	str	r6, [r4, #8]
 800a572:	2e00      	cmp	r6, #0
 800a574:	bfa2      	ittt	ge
 800a576:	6821      	ldrge	r1, [r4, #0]
 800a578:	f021 0104 	bicge.w	r1, r1, #4
 800a57c:	6021      	strge	r1, [r4, #0]
 800a57e:	b90d      	cbnz	r5, 800a584 <_printf_i+0x110>
 800a580:	2e00      	cmp	r6, #0
 800a582:	d04b      	beq.n	800a61c <_printf_i+0x1a8>
 800a584:	4616      	mov	r6, r2
 800a586:	fbb5 f1f3 	udiv	r1, r5, r3
 800a58a:	fb03 5711 	mls	r7, r3, r1, r5
 800a58e:	5dc7      	ldrb	r7, [r0, r7]
 800a590:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a594:	462f      	mov	r7, r5
 800a596:	42bb      	cmp	r3, r7
 800a598:	460d      	mov	r5, r1
 800a59a:	d9f4      	bls.n	800a586 <_printf_i+0x112>
 800a59c:	2b08      	cmp	r3, #8
 800a59e:	d10b      	bne.n	800a5b8 <_printf_i+0x144>
 800a5a0:	6823      	ldr	r3, [r4, #0]
 800a5a2:	07df      	lsls	r7, r3, #31
 800a5a4:	d508      	bpl.n	800a5b8 <_printf_i+0x144>
 800a5a6:	6923      	ldr	r3, [r4, #16]
 800a5a8:	6861      	ldr	r1, [r4, #4]
 800a5aa:	4299      	cmp	r1, r3
 800a5ac:	bfde      	ittt	le
 800a5ae:	2330      	movle	r3, #48	@ 0x30
 800a5b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a5b8:	1b92      	subs	r2, r2, r6
 800a5ba:	6122      	str	r2, [r4, #16]
 800a5bc:	f8cd a000 	str.w	sl, [sp]
 800a5c0:	464b      	mov	r3, r9
 800a5c2:	aa03      	add	r2, sp, #12
 800a5c4:	4621      	mov	r1, r4
 800a5c6:	4640      	mov	r0, r8
 800a5c8:	f7ff fee6 	bl	800a398 <_printf_common>
 800a5cc:	3001      	adds	r0, #1
 800a5ce:	d14a      	bne.n	800a666 <_printf_i+0x1f2>
 800a5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d4:	b004      	add	sp, #16
 800a5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5da:	6823      	ldr	r3, [r4, #0]
 800a5dc:	f043 0320 	orr.w	r3, r3, #32
 800a5e0:	6023      	str	r3, [r4, #0]
 800a5e2:	4833      	ldr	r0, [pc, #204]	@ (800a6b0 <_printf_i+0x23c>)
 800a5e4:	2778      	movs	r7, #120	@ 0x78
 800a5e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a5ea:	6823      	ldr	r3, [r4, #0]
 800a5ec:	6831      	ldr	r1, [r6, #0]
 800a5ee:	061f      	lsls	r7, r3, #24
 800a5f0:	f851 5b04 	ldr.w	r5, [r1], #4
 800a5f4:	d402      	bmi.n	800a5fc <_printf_i+0x188>
 800a5f6:	065f      	lsls	r7, r3, #25
 800a5f8:	bf48      	it	mi
 800a5fa:	b2ad      	uxthmi	r5, r5
 800a5fc:	6031      	str	r1, [r6, #0]
 800a5fe:	07d9      	lsls	r1, r3, #31
 800a600:	bf44      	itt	mi
 800a602:	f043 0320 	orrmi.w	r3, r3, #32
 800a606:	6023      	strmi	r3, [r4, #0]
 800a608:	b11d      	cbz	r5, 800a612 <_printf_i+0x19e>
 800a60a:	2310      	movs	r3, #16
 800a60c:	e7ac      	b.n	800a568 <_printf_i+0xf4>
 800a60e:	4827      	ldr	r0, [pc, #156]	@ (800a6ac <_printf_i+0x238>)
 800a610:	e7e9      	b.n	800a5e6 <_printf_i+0x172>
 800a612:	6823      	ldr	r3, [r4, #0]
 800a614:	f023 0320 	bic.w	r3, r3, #32
 800a618:	6023      	str	r3, [r4, #0]
 800a61a:	e7f6      	b.n	800a60a <_printf_i+0x196>
 800a61c:	4616      	mov	r6, r2
 800a61e:	e7bd      	b.n	800a59c <_printf_i+0x128>
 800a620:	6833      	ldr	r3, [r6, #0]
 800a622:	6825      	ldr	r5, [r4, #0]
 800a624:	6961      	ldr	r1, [r4, #20]
 800a626:	1d18      	adds	r0, r3, #4
 800a628:	6030      	str	r0, [r6, #0]
 800a62a:	062e      	lsls	r6, r5, #24
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	d501      	bpl.n	800a634 <_printf_i+0x1c0>
 800a630:	6019      	str	r1, [r3, #0]
 800a632:	e002      	b.n	800a63a <_printf_i+0x1c6>
 800a634:	0668      	lsls	r0, r5, #25
 800a636:	d5fb      	bpl.n	800a630 <_printf_i+0x1bc>
 800a638:	8019      	strh	r1, [r3, #0]
 800a63a:	2300      	movs	r3, #0
 800a63c:	6123      	str	r3, [r4, #16]
 800a63e:	4616      	mov	r6, r2
 800a640:	e7bc      	b.n	800a5bc <_printf_i+0x148>
 800a642:	6833      	ldr	r3, [r6, #0]
 800a644:	1d1a      	adds	r2, r3, #4
 800a646:	6032      	str	r2, [r6, #0]
 800a648:	681e      	ldr	r6, [r3, #0]
 800a64a:	6862      	ldr	r2, [r4, #4]
 800a64c:	2100      	movs	r1, #0
 800a64e:	4630      	mov	r0, r6
 800a650:	f7f5 fdf6 	bl	8000240 <memchr>
 800a654:	b108      	cbz	r0, 800a65a <_printf_i+0x1e6>
 800a656:	1b80      	subs	r0, r0, r6
 800a658:	6060      	str	r0, [r4, #4]
 800a65a:	6863      	ldr	r3, [r4, #4]
 800a65c:	6123      	str	r3, [r4, #16]
 800a65e:	2300      	movs	r3, #0
 800a660:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a664:	e7aa      	b.n	800a5bc <_printf_i+0x148>
 800a666:	6923      	ldr	r3, [r4, #16]
 800a668:	4632      	mov	r2, r6
 800a66a:	4649      	mov	r1, r9
 800a66c:	4640      	mov	r0, r8
 800a66e:	47d0      	blx	sl
 800a670:	3001      	adds	r0, #1
 800a672:	d0ad      	beq.n	800a5d0 <_printf_i+0x15c>
 800a674:	6823      	ldr	r3, [r4, #0]
 800a676:	079b      	lsls	r3, r3, #30
 800a678:	d413      	bmi.n	800a6a2 <_printf_i+0x22e>
 800a67a:	68e0      	ldr	r0, [r4, #12]
 800a67c:	9b03      	ldr	r3, [sp, #12]
 800a67e:	4298      	cmp	r0, r3
 800a680:	bfb8      	it	lt
 800a682:	4618      	movlt	r0, r3
 800a684:	e7a6      	b.n	800a5d4 <_printf_i+0x160>
 800a686:	2301      	movs	r3, #1
 800a688:	4632      	mov	r2, r6
 800a68a:	4649      	mov	r1, r9
 800a68c:	4640      	mov	r0, r8
 800a68e:	47d0      	blx	sl
 800a690:	3001      	adds	r0, #1
 800a692:	d09d      	beq.n	800a5d0 <_printf_i+0x15c>
 800a694:	3501      	adds	r5, #1
 800a696:	68e3      	ldr	r3, [r4, #12]
 800a698:	9903      	ldr	r1, [sp, #12]
 800a69a:	1a5b      	subs	r3, r3, r1
 800a69c:	42ab      	cmp	r3, r5
 800a69e:	dcf2      	bgt.n	800a686 <_printf_i+0x212>
 800a6a0:	e7eb      	b.n	800a67a <_printf_i+0x206>
 800a6a2:	2500      	movs	r5, #0
 800a6a4:	f104 0619 	add.w	r6, r4, #25
 800a6a8:	e7f5      	b.n	800a696 <_printf_i+0x222>
 800a6aa:	bf00      	nop
 800a6ac:	0800ac16 	.word	0x0800ac16
 800a6b0:	0800ac27 	.word	0x0800ac27

0800a6b4 <memmove>:
 800a6b4:	4288      	cmp	r0, r1
 800a6b6:	b510      	push	{r4, lr}
 800a6b8:	eb01 0402 	add.w	r4, r1, r2
 800a6bc:	d902      	bls.n	800a6c4 <memmove+0x10>
 800a6be:	4284      	cmp	r4, r0
 800a6c0:	4623      	mov	r3, r4
 800a6c2:	d807      	bhi.n	800a6d4 <memmove+0x20>
 800a6c4:	1e43      	subs	r3, r0, #1
 800a6c6:	42a1      	cmp	r1, r4
 800a6c8:	d008      	beq.n	800a6dc <memmove+0x28>
 800a6ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6d2:	e7f8      	b.n	800a6c6 <memmove+0x12>
 800a6d4:	4402      	add	r2, r0
 800a6d6:	4601      	mov	r1, r0
 800a6d8:	428a      	cmp	r2, r1
 800a6da:	d100      	bne.n	800a6de <memmove+0x2a>
 800a6dc:	bd10      	pop	{r4, pc}
 800a6de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6e6:	e7f7      	b.n	800a6d8 <memmove+0x24>

0800a6e8 <_sbrk_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	4d06      	ldr	r5, [pc, #24]	@ (800a704 <_sbrk_r+0x1c>)
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	4608      	mov	r0, r1
 800a6f2:	602b      	str	r3, [r5, #0]
 800a6f4:	f7f9 fd72 	bl	80041dc <_sbrk>
 800a6f8:	1c43      	adds	r3, r0, #1
 800a6fa:	d102      	bne.n	800a702 <_sbrk_r+0x1a>
 800a6fc:	682b      	ldr	r3, [r5, #0]
 800a6fe:	b103      	cbz	r3, 800a702 <_sbrk_r+0x1a>
 800a700:	6023      	str	r3, [r4, #0]
 800a702:	bd38      	pop	{r3, r4, r5, pc}
 800a704:	20000604 	.word	0x20000604

0800a708 <memcpy>:
 800a708:	440a      	add	r2, r1
 800a70a:	4291      	cmp	r1, r2
 800a70c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a710:	d100      	bne.n	800a714 <memcpy+0xc>
 800a712:	4770      	bx	lr
 800a714:	b510      	push	{r4, lr}
 800a716:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a71a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a71e:	4291      	cmp	r1, r2
 800a720:	d1f9      	bne.n	800a716 <memcpy+0xe>
 800a722:	bd10      	pop	{r4, pc}

0800a724 <_realloc_r>:
 800a724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a728:	4680      	mov	r8, r0
 800a72a:	4615      	mov	r5, r2
 800a72c:	460c      	mov	r4, r1
 800a72e:	b921      	cbnz	r1, 800a73a <_realloc_r+0x16>
 800a730:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a734:	4611      	mov	r1, r2
 800a736:	f7ff bc4b 	b.w	8009fd0 <_malloc_r>
 800a73a:	b92a      	cbnz	r2, 800a748 <_realloc_r+0x24>
 800a73c:	f7ff fbdc 	bl	8009ef8 <_free_r>
 800a740:	2400      	movs	r4, #0
 800a742:	4620      	mov	r0, r4
 800a744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a748:	f000 f81a 	bl	800a780 <_malloc_usable_size_r>
 800a74c:	4285      	cmp	r5, r0
 800a74e:	4606      	mov	r6, r0
 800a750:	d802      	bhi.n	800a758 <_realloc_r+0x34>
 800a752:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a756:	d8f4      	bhi.n	800a742 <_realloc_r+0x1e>
 800a758:	4629      	mov	r1, r5
 800a75a:	4640      	mov	r0, r8
 800a75c:	f7ff fc38 	bl	8009fd0 <_malloc_r>
 800a760:	4607      	mov	r7, r0
 800a762:	2800      	cmp	r0, #0
 800a764:	d0ec      	beq.n	800a740 <_realloc_r+0x1c>
 800a766:	42b5      	cmp	r5, r6
 800a768:	462a      	mov	r2, r5
 800a76a:	4621      	mov	r1, r4
 800a76c:	bf28      	it	cs
 800a76e:	4632      	movcs	r2, r6
 800a770:	f7ff ffca 	bl	800a708 <memcpy>
 800a774:	4621      	mov	r1, r4
 800a776:	4640      	mov	r0, r8
 800a778:	f7ff fbbe 	bl	8009ef8 <_free_r>
 800a77c:	463c      	mov	r4, r7
 800a77e:	e7e0      	b.n	800a742 <_realloc_r+0x1e>

0800a780 <_malloc_usable_size_r>:
 800a780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a784:	1f18      	subs	r0, r3, #4
 800a786:	2b00      	cmp	r3, #0
 800a788:	bfbc      	itt	lt
 800a78a:	580b      	ldrlt	r3, [r1, r0]
 800a78c:	18c0      	addlt	r0, r0, r3
 800a78e:	4770      	bx	lr

0800a790 <floor>:
 800a790:	ec51 0b10 	vmov	r0, r1, d0
 800a794:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a79c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800a7a0:	2e13      	cmp	r6, #19
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	4605      	mov	r5, r0
 800a7a6:	4680      	mov	r8, r0
 800a7a8:	dc34      	bgt.n	800a814 <floor+0x84>
 800a7aa:	2e00      	cmp	r6, #0
 800a7ac:	da17      	bge.n	800a7de <floor+0x4e>
 800a7ae:	a332      	add	r3, pc, #200	@ (adr r3, 800a878 <floor+0xe8>)
 800a7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b4:	f7f5 fd9a 	bl	80002ec <__adddf3>
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	f7f6 f9dc 	bl	8000b78 <__aeabi_dcmpgt>
 800a7c0:	b150      	cbz	r0, 800a7d8 <floor+0x48>
 800a7c2:	2c00      	cmp	r4, #0
 800a7c4:	da55      	bge.n	800a872 <floor+0xe2>
 800a7c6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a7ca:	432c      	orrs	r4, r5
 800a7cc:	2500      	movs	r5, #0
 800a7ce:	42ac      	cmp	r4, r5
 800a7d0:	4c2b      	ldr	r4, [pc, #172]	@ (800a880 <floor+0xf0>)
 800a7d2:	bf08      	it	eq
 800a7d4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a7d8:	4621      	mov	r1, r4
 800a7da:	4628      	mov	r0, r5
 800a7dc:	e023      	b.n	800a826 <floor+0x96>
 800a7de:	4f29      	ldr	r7, [pc, #164]	@ (800a884 <floor+0xf4>)
 800a7e0:	4137      	asrs	r7, r6
 800a7e2:	ea01 0307 	and.w	r3, r1, r7
 800a7e6:	4303      	orrs	r3, r0
 800a7e8:	d01d      	beq.n	800a826 <floor+0x96>
 800a7ea:	a323      	add	r3, pc, #140	@ (adr r3, 800a878 <floor+0xe8>)
 800a7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f0:	f7f5 fd7c 	bl	80002ec <__adddf3>
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	f7f6 f9be 	bl	8000b78 <__aeabi_dcmpgt>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	d0eb      	beq.n	800a7d8 <floor+0x48>
 800a800:	2c00      	cmp	r4, #0
 800a802:	bfbe      	ittt	lt
 800a804:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a808:	4133      	asrlt	r3, r6
 800a80a:	18e4      	addlt	r4, r4, r3
 800a80c:	ea24 0407 	bic.w	r4, r4, r7
 800a810:	2500      	movs	r5, #0
 800a812:	e7e1      	b.n	800a7d8 <floor+0x48>
 800a814:	2e33      	cmp	r6, #51	@ 0x33
 800a816:	dd0a      	ble.n	800a82e <floor+0x9e>
 800a818:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a81c:	d103      	bne.n	800a826 <floor+0x96>
 800a81e:	4602      	mov	r2, r0
 800a820:	460b      	mov	r3, r1
 800a822:	f7f5 fd63 	bl	80002ec <__adddf3>
 800a826:	ec41 0b10 	vmov	d0, r0, r1
 800a82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a82e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800a832:	f04f 37ff 	mov.w	r7, #4294967295
 800a836:	40df      	lsrs	r7, r3
 800a838:	4207      	tst	r7, r0
 800a83a:	d0f4      	beq.n	800a826 <floor+0x96>
 800a83c:	a30e      	add	r3, pc, #56	@ (adr r3, 800a878 <floor+0xe8>)
 800a83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a842:	f7f5 fd53 	bl	80002ec <__adddf3>
 800a846:	2200      	movs	r2, #0
 800a848:	2300      	movs	r3, #0
 800a84a:	f7f6 f995 	bl	8000b78 <__aeabi_dcmpgt>
 800a84e:	2800      	cmp	r0, #0
 800a850:	d0c2      	beq.n	800a7d8 <floor+0x48>
 800a852:	2c00      	cmp	r4, #0
 800a854:	da0a      	bge.n	800a86c <floor+0xdc>
 800a856:	2e14      	cmp	r6, #20
 800a858:	d101      	bne.n	800a85e <floor+0xce>
 800a85a:	3401      	adds	r4, #1
 800a85c:	e006      	b.n	800a86c <floor+0xdc>
 800a85e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a862:	2301      	movs	r3, #1
 800a864:	40b3      	lsls	r3, r6
 800a866:	441d      	add	r5, r3
 800a868:	4545      	cmp	r5, r8
 800a86a:	d3f6      	bcc.n	800a85a <floor+0xca>
 800a86c:	ea25 0507 	bic.w	r5, r5, r7
 800a870:	e7b2      	b.n	800a7d8 <floor+0x48>
 800a872:	2500      	movs	r5, #0
 800a874:	462c      	mov	r4, r5
 800a876:	e7af      	b.n	800a7d8 <floor+0x48>
 800a878:	8800759c 	.word	0x8800759c
 800a87c:	7e37e43c 	.word	0x7e37e43c
 800a880:	bff00000 	.word	0xbff00000
 800a884:	000fffff 	.word	0x000fffff

0800a888 <_init>:
 800a888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a88a:	bf00      	nop
 800a88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a88e:	bc08      	pop	{r3}
 800a890:	469e      	mov	lr, r3
 800a892:	4770      	bx	lr

0800a894 <_fini>:
 800a894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a896:	bf00      	nop
 800a898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a89a:	bc08      	pop	{r3}
 800a89c:	469e      	mov	lr, r3
 800a89e:	4770      	bx	lr
