
smarthome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fec  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080041b4  080041b4  000141b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004294  08004294  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08004294  08004294  00014294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800429c  0800429c  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800429c  0800429c  0001429c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042a0  080042a0  000142a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  080042a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  200000b4  08004358  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08004358  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b5f9  00000000  00000000  00020127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ea6  00000000  00000000  0002b720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b20  00000000  00000000  0002d5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000883  00000000  00000000  0002e0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000029b8  00000000  00000000  0002e96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dba3  00000000  00000000  00031323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eaf85  00000000  00000000  0003eec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002cfc  00000000  00000000  00129e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0012cb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000b4 	.word	0x200000b4
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800419c 	.word	0x0800419c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000b8 	.word	0x200000b8
 8000204:	0800419c 	.word	0x0800419c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08c      	sub	sp, #48	; 0x30
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 031c 	add.w	r3, r7, #28
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	4ba2      	ldr	r3, [pc, #648]	; (80007a4 <MX_GPIO_Init+0x2a0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4aa1      	ldr	r2, [pc, #644]	; (80007a4 <MX_GPIO_Init+0x2a0>)
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b9f      	ldr	r3, [pc, #636]	; (80007a4 <MX_GPIO_Init+0x2a0>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	61bb      	str	r3, [r7, #24]
 8000530:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000532:	4b9c      	ldr	r3, [pc, #624]	; (80007a4 <MX_GPIO_Init+0x2a0>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a9b      	ldr	r2, [pc, #620]	; (80007a4 <MX_GPIO_Init+0x2a0>)
 8000538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b99      	ldr	r3, [pc, #612]	; (80007a4 <MX_GPIO_Init+0x2a0>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000546:	617b      	str	r3, [r7, #20]
 8000548:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	4b96      	ldr	r3, [pc, #600]	; (80007a4 <MX_GPIO_Init+0x2a0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a95      	ldr	r2, [pc, #596]	; (80007a4 <MX_GPIO_Init+0x2a0>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b93      	ldr	r3, [pc, #588]	; (80007a4 <MX_GPIO_Init+0x2a0>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b90      	ldr	r3, [pc, #576]	; (80007a4 <MX_GPIO_Init+0x2a0>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a8f      	ldr	r2, [pc, #572]	; (80007a4 <MX_GPIO_Init+0x2a0>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b8d      	ldr	r3, [pc, #564]	; (80007a4 <MX_GPIO_Init+0x2a0>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800057a:	4b8a      	ldr	r3, [pc, #552]	; (80007a4 <MX_GPIO_Init+0x2a0>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a89      	ldr	r2, [pc, #548]	; (80007a4 <MX_GPIO_Init+0x2a0>)
 8000580:	f043 0310 	orr.w	r3, r3, #16
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b87      	ldr	r3, [pc, #540]	; (80007a4 <MX_GPIO_Init+0x2a0>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0310 	and.w	r3, r3, #16
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000592:	4b84      	ldr	r3, [pc, #528]	; (80007a4 <MX_GPIO_Init+0x2a0>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a83      	ldr	r2, [pc, #524]	; (80007a4 <MX_GPIO_Init+0x2a0>)
 8000598:	f043 0308 	orr.w	r3, r3, #8
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b81      	ldr	r3, [pc, #516]	; (80007a4 <MX_GPIO_Init+0x2a0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0308 	and.w	r3, r3, #8
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005aa:	4b7e      	ldr	r3, [pc, #504]	; (80007a4 <MX_GPIO_Init+0x2a0>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a7d      	ldr	r2, [pc, #500]	; (80007a4 <MX_GPIO_Init+0x2a0>)
 80005b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b7b      	ldr	r3, [pc, #492]	; (80007a4 <MX_GPIO_Init+0x2a0>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Alarm_LED_GPIO_Port, Alarm_LED_Pin, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005c8:	4877      	ldr	r0, [pc, #476]	; (80007a8 <MX_GPIO_Init+0x2a4>)
 80005ca:	f001 fe81 	bl	80022d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2140      	movs	r1, #64	; 0x40
 80005d2:	4876      	ldr	r0, [pc, #472]	; (80007ac <MX_GPIO_Init+0x2a8>)
 80005d4:	f001 fe7c 	bl	80022d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2180      	movs	r1, #128	; 0x80
 80005dc:	4874      	ldr	r0, [pc, #464]	; (80007b0 <MX_GPIO_Init+0x2ac>)
 80005de:	f001 fe77 	bl	80022d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	4619      	mov	r1, r3
 80005f8:	486e      	ldr	r0, [pc, #440]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 80005fa:	f001 fca5 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80005fe:	2332      	movs	r3, #50	; 0x32
 8000600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000602:	2302      	movs	r3, #2
 8000604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060a:	2303      	movs	r3, #3
 800060c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800060e:	230b      	movs	r3, #11
 8000610:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000612:	f107 031c 	add.w	r3, r7, #28
 8000616:	4619      	mov	r1, r3
 8000618:	4866      	ldr	r0, [pc, #408]	; (80007b4 <MX_GPIO_Init+0x2b0>)
 800061a:	f001 fc95 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800061e:	2386      	movs	r3, #134	; 0x86
 8000620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000622:	2302      	movs	r3, #2
 8000624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800062a:	2303      	movs	r3, #3
 800062c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800062e:	230b      	movs	r3, #11
 8000630:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	4619      	mov	r1, r3
 8000638:	485f      	ldr	r0, [pc, #380]	; (80007b8 <MX_GPIO_Init+0x2b4>)
 800063a:	f001 fc85 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800063e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000650:	2301      	movs	r3, #1
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4619      	mov	r1, r3
 800065a:	4853      	ldr	r0, [pc, #332]	; (80007a8 <MX_GPIO_Init+0x2a4>)
 800065c:	f001 fc74 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PIR_Livingroom_Pin|PIR_Garage_Pin|PIR_Kitchen_Pin;
 8000660:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000666:	2300      	movs	r3, #0
 8000668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	4619      	mov	r1, r3
 8000674:	484c      	ldr	r0, [pc, #304]	; (80007a8 <MX_GPIO_Init+0x2a4>)
 8000676:	f001 fc67 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Alarm_LED_Pin;
 800067a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800067e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Alarm_LED_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4619      	mov	r1, r3
 8000692:	4845      	ldr	r0, [pc, #276]	; (80007a8 <MX_GPIO_Init+0x2a4>)
 8000694:	f001 fc58 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000698:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	2302      	movs	r3, #2
 80006a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a6:	2303      	movs	r3, #3
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006aa:	230b      	movs	r3, #11
 80006ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	4619      	mov	r1, r3
 80006b4:	483e      	ldr	r0, [pc, #248]	; (80007b0 <MX_GPIO_Init+0x2ac>)
 80006b6:	f001 fc47 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80006ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c0:	2302      	movs	r3, #2
 80006c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c8:	2303      	movs	r3, #3
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006cc:	2307      	movs	r3, #7
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	4619      	mov	r1, r3
 80006d6:	4839      	ldr	r0, [pc, #228]	; (80007bc <MX_GPIO_Init+0x2b8>)
 80006d8:	f001 fc36 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006dc:	2340      	movs	r3, #64	; 0x40
 80006de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4619      	mov	r1, r3
 80006f2:	482e      	ldr	r0, [pc, #184]	; (80007ac <MX_GPIO_Init+0x2a8>)
 80006f4:	f001 fc28 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006f8:	2380      	movs	r3, #128	; 0x80
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fc:	2300      	movs	r3, #0
 80006fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	4828      	ldr	r0, [pc, #160]	; (80007ac <MX_GPIO_Init+0x2a8>)
 800070c:	f001 fc1c 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000710:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	2302      	movs	r3, #2
 8000718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071e:	2303      	movs	r3, #3
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000722:	230a      	movs	r3, #10
 8000724:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	4619      	mov	r1, r3
 800072c:	4822      	ldr	r0, [pc, #136]	; (80007b8 <MX_GPIO_Init+0x2b4>)
 800072e:	f001 fc0b 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000732:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4619      	mov	r1, r3
 8000746:	481c      	ldr	r0, [pc, #112]	; (80007b8 <MX_GPIO_Init+0x2b4>)
 8000748:	f001 fbfe 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800074c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	2302      	movs	r3, #2
 8000754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075a:	2303      	movs	r3, #3
 800075c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800075e:	230b      	movs	r3, #11
 8000760:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4810      	ldr	r0, [pc, #64]	; (80007ac <MX_GPIO_Init+0x2a8>)
 800076a:	f001 fbed 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800076e:	2380      	movs	r3, #128	; 0x80
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	480a      	ldr	r0, [pc, #40]	; (80007b0 <MX_GPIO_Init+0x2ac>)
 8000786:	f001 fbdf 	bl	8001f48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	2028      	movs	r0, #40	; 0x28
 8000790:	f001 fba3 	bl	8001eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000794:	2028      	movs	r0, #40	; 0x28
 8000796:	f001 fbbc 	bl	8001f12 <HAL_NVIC_EnableIRQ>

}
 800079a:	bf00      	nop
 800079c:	3730      	adds	r7, #48	; 0x30
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40021800 	.word	0x40021800
 80007b0:	40020400 	.word	0x40020400
 80007b4:	40020800 	.word	0x40020800
 80007b8:	40020000 	.word	0x40020000
 80007bc:	40020c00 	.word	0x40020c00

080007c0 <keypad_config>:

const char Rows[4]={R1, R2, R3, R4};
const char Cols[4]={C1, C2, C3, C4};

void keypad_config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  if (KEYPAD_4x4_GPIO == GPIOA) __HAL_RCC_GPIOA_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOB) __HAL_RCC_GPIOB_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOC) __HAL_RCC_GPIOC_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOD) __HAL_RCC_GPIOD_CLK_ENABLE(); else
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <keypad_config+0x60>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <keypad_config+0x60>)
 80007cc:	f043 0308 	orr.w	r3, r3, #8
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <keypad_config+0x60>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  if (KEYPAD_4x4_GPIO == GPIOE) __HAL_RCC_GPIOE_CLK_ENABLE();


  GPIO_InitStruct.Pin = R1 | R2 | R3 | R4;
 80007de:	230f      	movs	r3, #15
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEYPAD_4x4_GPIO, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	480b      	ldr	r0, [pc, #44]	; (8000824 <keypad_config+0x64>)
 80007f6:	f001 fba7 	bl	8001f48 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = C1 | C2 | C3 | C4;
 80007fa:	23f0      	movs	r3, #240	; 0xf0
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000802:	2302      	movs	r3, #2
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEYPAD_4x4_GPIO, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <keypad_config+0x64>)
 8000812:	f001 fb99 	bl	8001f48 <HAL_GPIO_Init>

}
 8000816:	bf00      	nop
 8000818:	3728      	adds	r7, #40	; 0x28
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40020c00 	.word	0x40020c00

08000828 <keypad_readkey>:

char keypad_readkey(void)
{ //returns ASCII code of a pressed key
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
  unsigned char r, c;
  char pressedKey=0x00;
 800082e:	2300      	movs	r3, #0
 8000830:	717b      	strb	r3, [r7, #5]

  r=0;
 8000832:	2300      	movs	r3, #0
 8000834:	71fb      	strb	r3, [r7, #7]
  while (r<4) {
 8000836:	e030      	b.n	800089a <keypad_readkey+0x72>
    HAL_GPIO_WritePin(KEYPAD_4x4_GPIO, Rows[r], GPIO_PIN_SET);        //activate row
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	4a1c      	ldr	r2, [pc, #112]	; (80008ac <keypad_readkey+0x84>)
 800083c:	5cd3      	ldrb	r3, [r2, r3]
 800083e:	b29b      	uxth	r3, r3
 8000840:	2201      	movs	r2, #1
 8000842:	4619      	mov	r1, r3
 8000844:	481a      	ldr	r0, [pc, #104]	; (80008b0 <keypad_readkey+0x88>)
 8000846:	f001 fd43 	bl	80022d0 <HAL_GPIO_WritePin>
    c=0;
 800084a:	2300      	movs	r3, #0
 800084c:	71bb      	strb	r3, [r7, #6]
    while (c<4) {
 800084e:	e015      	b.n	800087c <keypad_readkey+0x54>
      if (HAL_GPIO_ReadPin(KEYPAD_4x4_GPIO, Cols[c])==GPIO_PIN_SET){  //check columns
 8000850:	79bb      	ldrb	r3, [r7, #6]
 8000852:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <keypad_readkey+0x8c>)
 8000854:	5cd3      	ldrb	r3, [r2, r3]
 8000856:	b29b      	uxth	r3, r3
 8000858:	4619      	mov	r1, r3
 800085a:	4815      	ldr	r0, [pc, #84]	; (80008b0 <keypad_readkey+0x88>)
 800085c:	f001 fd20 	bl	80022a0 <HAL_GPIO_ReadPin>
 8000860:	4603      	mov	r3, r0
 8000862:	2b01      	cmp	r3, #1
 8000864:	d107      	bne.n	8000876 <keypad_readkey+0x4e>
        pressedKey=KeyMap[r][c];                                   //if column active - find key value
 8000866:	79fa      	ldrb	r2, [r7, #7]
 8000868:	79bb      	ldrb	r3, [r7, #6]
 800086a:	4913      	ldr	r1, [pc, #76]	; (80008b8 <keypad_readkey+0x90>)
 800086c:	0092      	lsls	r2, r2, #2
 800086e:	440a      	add	r2, r1
 8000870:	4413      	add	r3, r2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	717b      	strb	r3, [r7, #5]
      }
      c++;
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	3301      	adds	r3, #1
 800087a:	71bb      	strb	r3, [r7, #6]
    while (c<4) {
 800087c:	79bb      	ldrb	r3, [r7, #6]
 800087e:	2b03      	cmp	r3, #3
 8000880:	d9e6      	bls.n	8000850 <keypad_readkey+0x28>
    }
    HAL_GPIO_WritePin(KEYPAD_4x4_GPIO, Rows[r], GPIO_PIN_RESET);      //deactivate row
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	4a09      	ldr	r2, [pc, #36]	; (80008ac <keypad_readkey+0x84>)
 8000886:	5cd3      	ldrb	r3, [r2, r3]
 8000888:	b29b      	uxth	r3, r3
 800088a:	2200      	movs	r2, #0
 800088c:	4619      	mov	r1, r3
 800088e:	4808      	ldr	r0, [pc, #32]	; (80008b0 <keypad_readkey+0x88>)
 8000890:	f001 fd1e 	bl	80022d0 <HAL_GPIO_WritePin>
    r++;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	3301      	adds	r3, #1
 8000898:	71fb      	strb	r3, [r7, #7]
  while (r<4) {
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b03      	cmp	r3, #3
 800089e:	d9cb      	bls.n	8000838 <keypad_readkey+0x10>
  }
  return pressedKey;                                               //return ASCII key value
 80008a0:	797b      	ldrb	r3, [r7, #5]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	0800427c 	.word	0x0800427c
 80008b0:	40020c00 	.word	0x40020c00
 80008b4:	08004280 	.word	0x08004280
 80008b8:	0800426c 	.word	0x0800426c

080008bc <LCD_WriteNibble>:

GPIO_InitTypeDef GPIO_InitStruct;

//-----------------------------------------------------------------------------
void LCD_WriteNibble(char nibbleToWrite)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008cc:	4818      	ldr	r0, [pc, #96]	; (8000930 <LCD_WriteNibble+0x74>)
 80008ce:	f001 fcff 	bl	80022d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D4, (GPIO_PinState)(nibbleToWrite & 0x01));
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	461a      	mov	r2, r3
 80008dc:	2108      	movs	r1, #8
 80008de:	4814      	ldr	r0, [pc, #80]	; (8000930 <LCD_WriteNibble+0x74>)
 80008e0:	f001 fcf6 	bl	80022d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D5, (GPIO_PinState)(nibbleToWrite & 0x02));
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	461a      	mov	r2, r3
 80008ee:	2104      	movs	r1, #4
 80008f0:	480f      	ldr	r0, [pc, #60]	; (8000930 <LCD_WriteNibble+0x74>)
 80008f2:	f001 fced 	bl	80022d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D6, (GPIO_PinState)(nibbleToWrite & 0x04));
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	f003 0304 	and.w	r3, r3, #4
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	461a      	mov	r2, r3
 8000900:	2140      	movs	r1, #64	; 0x40
 8000902:	480b      	ldr	r0, [pc, #44]	; (8000930 <LCD_WriteNibble+0x74>)
 8000904:	f001 fce4 	bl	80022d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D7, (GPIO_PinState)(nibbleToWrite & 0x08));
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	f003 0308 	and.w	r3, r3, #8
 800090e:	b2db      	uxtb	r3, r3
 8000910:	461a      	mov	r2, r3
 8000912:	2101      	movs	r1, #1
 8000914:	4806      	ldr	r0, [pc, #24]	; (8000930 <LCD_WriteNibble+0x74>)
 8000916:	f001 fcdb 	bl	80022d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000920:	4803      	ldr	r0, [pc, #12]	; (8000930 <LCD_WriteNibble+0x74>)
 8000922:	f001 fcd5 	bl	80022d0 <HAL_GPIO_WritePin>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40020800 	.word	0x40020800

08000934 <LCD_ReadNibble>:


//-----------------------------------------------------------------------------
unsigned char LCD_ReadNibble(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
  unsigned char tmp = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_SET);
 800093e:	2201      	movs	r2, #1
 8000940:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000944:	481e      	ldr	r0, [pc, #120]	; (80009c0 <LCD_ReadNibble+0x8c>)
 8000946:	f001 fcc3 	bl	80022d0 <HAL_GPIO_WritePin>
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D4) << 0);
 800094a:	2108      	movs	r1, #8
 800094c:	481c      	ldr	r0, [pc, #112]	; (80009c0 <LCD_ReadNibble+0x8c>)
 800094e:	f001 fca7 	bl	80022a0 <HAL_GPIO_ReadPin>
 8000952:	4603      	mov	r3, r0
 8000954:	b25a      	sxtb	r2, r3
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	4313      	orrs	r3, r2
 800095c:	b25b      	sxtb	r3, r3
 800095e:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D5) << 1);
 8000960:	2104      	movs	r1, #4
 8000962:	4817      	ldr	r0, [pc, #92]	; (80009c0 <LCD_ReadNibble+0x8c>)
 8000964:	f001 fc9c 	bl	80022a0 <HAL_GPIO_ReadPin>
 8000968:	4603      	mov	r3, r0
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	b25a      	sxtb	r2, r3
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	4313      	orrs	r3, r2
 8000974:	b25b      	sxtb	r3, r3
 8000976:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D6) << 2);
 8000978:	2140      	movs	r1, #64	; 0x40
 800097a:	4811      	ldr	r0, [pc, #68]	; (80009c0 <LCD_ReadNibble+0x8c>)
 800097c:	f001 fc90 	bl	80022a0 <HAL_GPIO_ReadPin>
 8000980:	4603      	mov	r3, r0
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	b25a      	sxtb	r2, r3
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	4313      	orrs	r3, r2
 800098c:	b25b      	sxtb	r3, r3
 800098e:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D7) << 3);
 8000990:	2101      	movs	r1, #1
 8000992:	480b      	ldr	r0, [pc, #44]	; (80009c0 <LCD_ReadNibble+0x8c>)
 8000994:	f001 fc84 	bl	80022a0 <HAL_GPIO_ReadPin>
 8000998:	4603      	mov	r3, r0
 800099a:	00db      	lsls	r3, r3, #3
 800099c:	b25a      	sxtb	r2, r3
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	b25b      	sxtb	r3, r3
 80009a6:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ae:	4804      	ldr	r0, [pc, #16]	; (80009c0 <LCD_ReadNibble+0x8c>)
 80009b0:	f001 fc8e 	bl	80022d0 <HAL_GPIO_WritePin>
  return tmp;
 80009b4:	79fb      	ldrb	r3, [r7, #7]
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40020800 	.word	0x40020800

080009c4 <LCD_ReadStatus>:


//-----------------------------------------------------------------------------
unsigned char LCD_ReadStatus(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
  unsigned char status = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	71fb      	strb	r3, [r7, #7]
  
  GPIO_InitStruct.Pin =  LCD_D4 | LCD_D5 | LCD_D6 | LCD_D7;
 80009ce:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <LCD_ReadStatus+0x90>)
 80009d0:	224d      	movs	r2, #77	; 0x4d
 80009d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <LCD_ReadStatus+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009da:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <LCD_ReadStatus+0x90>)
 80009dc:	2201      	movs	r2, #1
 80009de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <LCD_ReadStatus+0x90>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e6:	491b      	ldr	r1, [pc, #108]	; (8000a54 <LCD_ReadStatus+0x90>)
 80009e8:	481b      	ldr	r0, [pc, #108]	; (8000a58 <LCD_ReadStatus+0x94>)
 80009ea:	f001 faad 	bl	8001f48 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW, GPIO_PIN_SET);
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f4:	4818      	ldr	r0, [pc, #96]	; (8000a58 <LCD_ReadStatus+0x94>)
 80009f6:	f001 fc6b 	bl	80022d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RS, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a00:	4815      	ldr	r0, [pc, #84]	; (8000a58 <LCD_ReadStatus+0x94>)
 8000a02:	f001 fc65 	bl	80022d0 <HAL_GPIO_WritePin>
  
  status |= (LCD_ReadNibble() << 4);
 8000a06:	f7ff ff95 	bl	8000934 <LCD_ReadNibble>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	011b      	lsls	r3, r3, #4
 8000a0e:	b25a      	sxtb	r2, r3
 8000a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	b25b      	sxtb	r3, r3
 8000a18:	71fb      	strb	r3, [r7, #7]
  status |= LCD_ReadNibble();
 8000a1a:	f7ff ff8b 	bl	8000934 <LCD_ReadNibble>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	461a      	mov	r2, r3
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	71fb      	strb	r3, [r7, #7]
  

  GPIO_InitStruct.Pin = LCD_D4|LCD_D5|LCD_D6|LCD_D7;
 8000a28:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <LCD_ReadStatus+0x90>)
 8000a2a:	224d      	movs	r2, #77	; 0x4d
 8000a2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <LCD_ReadStatus+0x90>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <LCD_ReadStatus+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <LCD_ReadStatus+0x90>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a40:	4904      	ldr	r1, [pc, #16]	; (8000a54 <LCD_ReadStatus+0x90>)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <LCD_ReadStatus+0x94>)
 8000a44:	f001 fa80 	bl	8001f48 <HAL_GPIO_Init>

  return status;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000d0 	.word	0x200000d0
 8000a58:	40020800 	.word	0x40020800

08000a5c <LCD_WriteData>:


//-----------------------------------------------------------------------------
void LCD_WriteData(char dataToWrite)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a6c:	4810      	ldr	r0, [pc, #64]	; (8000ab0 <LCD_WriteData+0x54>)
 8000a6e:	f001 fc2f 	bl	80022d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RS, GPIO_PIN_SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a78:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <LCD_WriteData+0x54>)
 8000a7a:	f001 fc29 	bl	80022d0 <HAL_GPIO_WritePin>
  
  LCD_WriteNibble(dataToWrite >> 4);
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	091b      	lsrs	r3, r3, #4
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff19 	bl	80008bc <LCD_WriteNibble>
  LCD_WriteNibble(dataToWrite & 0x0F);
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ff12 	bl	80008bc <LCD_WriteNibble>
  
  while(LCD_ReadStatus() & 0x80);
 8000a98:	bf00      	nop
 8000a9a:	f7ff ff93 	bl	80009c4 <LCD_ReadStatus>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	b25b      	sxtb	r3, r3
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	dbf9      	blt.n	8000a9a <LCD_WriteData+0x3e>
}
 8000aa6:	bf00      	nop
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40020800 	.word	0x40020800

08000ab4 <LCD_WriteCommand>:


//-----------------------------------------------------------------------------
void LCD_WriteCommand(char commandToWrite)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW | LCD_RS, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000ac4:	480d      	ldr	r0, [pc, #52]	; (8000afc <LCD_WriteCommand+0x48>)
 8000ac6:	f001 fc03 	bl	80022d0 <HAL_GPIO_WritePin>
  LCD_WriteNibble(commandToWrite >> 4);
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	091b      	lsrs	r3, r3, #4
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fef3 	bl	80008bc <LCD_WriteNibble>
  LCD_WriteNibble(commandToWrite & 0x0F);
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	f003 030f 	and.w	r3, r3, #15
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff feec 	bl	80008bc <LCD_WriteNibble>
  
  while(LCD_ReadStatus() & 0x80);
 8000ae4:	bf00      	nop
 8000ae6:	f7ff ff6d 	bl	80009c4 <LCD_ReadStatus>
 8000aea:	4603      	mov	r3, r0
 8000aec:	b25b      	sxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	dbf9      	blt.n	8000ae6 <LCD_WriteCommand+0x32>
}
 8000af2:	bf00      	nop
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40020800 	.word	0x40020800

08000b00 <LCD_WriteText>:


//-----------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  while(*text)
 8000b08:	e006      	b.n	8000b18 <LCD_WriteText+0x18>
    LCD_WriteData(*text++);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	1c5a      	adds	r2, r3, #1
 8000b0e:	607a      	str	r2, [r7, #4]
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ffa2 	bl	8000a5c <LCD_WriteData>
  while(*text)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d1f4      	bne.n	8000b0a <LCD_WriteText+0xa>
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <LCD_GoTo>:


//-----------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	460a      	mov	r2, r1
 8000b34:	71fb      	strb	r3, [r7, #7]
 8000b36:	4613      	mov	r3, r2
 8000b38:	71bb      	strb	r3, [r7, #6]
  LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 8000b3a:	79bb      	ldrb	r3, [r7, #6]
 8000b3c:	019b      	lsls	r3, r3, #6
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	4413      	add	r3, r2
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	b25b      	sxtb	r3, r3
 8000b48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b4c:	b25b      	sxtb	r3, r3
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ffaf 	bl	8000ab4 <LCD_WriteCommand>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <LCD_WriteTextXY>:


//-----------------------------------------------------------------------------
void LCD_WriteTextXY(char * text, unsigned char x, unsigned char y)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	460b      	mov	r3, r1
 8000b68:	70fb      	strb	r3, [r7, #3]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	70bb      	strb	r3, [r7, #2]
  LCD_GoTo(x,y);
 8000b6e:	78ba      	ldrb	r2, [r7, #2]
 8000b70:	78fb      	ldrb	r3, [r7, #3]
 8000b72:	4611      	mov	r1, r2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ffd8 	bl	8000b2a <LCD_GoTo>
  while(*text)
 8000b7a:	e006      	b.n	8000b8a <LCD_WriteTextXY+0x2c>
    LCD_WriteData(*text++);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff69 	bl	8000a5c <LCD_WriteData>
  while(*text)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1f4      	bne.n	8000b7c <LCD_WriteTextXY+0x1e>
}
 8000b92:	bf00      	nop
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <LCD_Initialize>:
}


//-----------------------------------------------------------------------------
void LCD_Initialize(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
  volatile unsigned char i = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	77fb      	strb	r3, [r7, #31]
  volatile unsigned int delayCnt = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
  
  if (LCD_GPIO == GPIOA) __HAL_RCC_GPIOA_CLK_ENABLE(); else
  if (LCD_GPIO == GPIOB) __HAL_RCC_GPIOB_CLK_ENABLE(); else
  if (LCD_GPIO == GPIOC) __HAL_RCC_GPIOC_CLK_ENABLE(); else
 8000baa:	4b34      	ldr	r3, [pc, #208]	; (8000c7c <LCD_Initialize+0xe0>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a33      	ldr	r2, [pc, #204]	; (8000c7c <LCD_Initialize+0xe0>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b31      	ldr	r3, [pc, #196]	; (8000c7c <LCD_Initialize+0xe0>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  if (LCD_GPIO == GPIOD) __HAL_RCC_GPIOD_CLK_ENABLE(); else
  if (LCD_GPIO == GPIOE) __HAL_RCC_GPIOE_CLK_ENABLE();


  GPIO_InitStruct.Pin = LCD_D4|LCD_D5|LCD_D6|LCD_D7|LCD_RS|LCD_RW|LCD_EN;
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <LCD_Initialize+0xe4>)
 8000bc4:	f641 424d 	movw	r2, #7245	; 0x1c4d
 8000bc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	4b2d      	ldr	r3, [pc, #180]	; (8000c80 <LCD_Initialize+0xe4>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	4b2b      	ldr	r3, [pc, #172]	; (8000c80 <LCD_Initialize+0xe4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000bd6:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <LCD_Initialize+0xe4>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_GPIO, &GPIO_InitStruct);
 8000bdc:	4928      	ldr	r1, [pc, #160]	; (8000c80 <LCD_Initialize+0xe4>)
 8000bde:	4829      	ldr	r0, [pc, #164]	; (8000c84 <LCD_Initialize+0xe8>)
 8000be0:	f001 f9b2 	bl	8001f48 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RS | LCD_EN | LCD_RW, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000bea:	4826      	ldr	r0, [pc, #152]	; (8000c84 <LCD_Initialize+0xe8>)
 8000bec:	f001 fb70 	bl	80022d0 <HAL_GPIO_WritePin>
  

  for(delayCnt = 0; delayCnt < 300000; delayCnt++);
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61bb      	str	r3, [r7, #24]
 8000bf4:	e002      	b.n	8000bfc <LCD_Initialize+0x60>
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	4a22      	ldr	r2, [pc, #136]	; (8000c88 <LCD_Initialize+0xec>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d9f8      	bls.n	8000bf6 <LCD_Initialize+0x5a>

  for(i = 0; i < 3; i++) {
 8000c04:	2300      	movs	r3, #0
 8000c06:	77fb      	strb	r3, [r7, #31]
 8000c08:	e012      	b.n	8000c30 <LCD_Initialize+0x94>
    LCD_WriteNibble(0x03);            
 8000c0a:	2003      	movs	r0, #3
 8000c0c:	f7ff fe56 	bl	80008bc <LCD_WriteNibble>
    for(delayCnt = 0; delayCnt < 30000; delayCnt++);
 8000c10:	2300      	movs	r3, #0
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	e002      	b.n	8000c1c <LCD_Initialize+0x80>
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	61bb      	str	r3, [r7, #24]
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	f247 522f 	movw	r2, #29999	; 0x752f
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d9f7      	bls.n	8000c16 <LCD_Initialize+0x7a>
  for(i = 0; i < 3; i++) {
 8000c26:	7ffb      	ldrb	r3, [r7, #31]
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	77fb      	strb	r3, [r7, #31]
 8000c30:	7ffb      	ldrb	r3, [r7, #31]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d9e8      	bls.n	8000c0a <LCD_Initialize+0x6e>
  }
  
  LCD_WriteNibble(0x02);             
 8000c38:	2002      	movs	r0, #2
 8000c3a:	f7ff fe3f 	bl	80008bc <LCD_WriteNibble>
  
  for(delayCnt = 0; delayCnt < 6000; delayCnt++);
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61bb      	str	r3, [r7, #24]
 8000c42:	e002      	b.n	8000c4a <LCD_Initialize+0xae>
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	3301      	adds	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	f241 726f 	movw	r2, #5999	; 0x176f
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d9f7      	bls.n	8000c44 <LCD_Initialize+0xa8>
     
  LCD_WriteCommand(HD44780_FUNCTION_SET | 
 8000c54:	2028      	movs	r0, #40	; 0x28
 8000c56:	f7ff ff2d 	bl	8000ab4 <LCD_WriteCommand>
                   HD44780_FONT5x7 | 
                   HD44780_TWO_LINE | 
                   HD44780_4_BIT);
  
  LCD_WriteCommand(HD44780_DISPLAY_ONOFF | 
 8000c5a:	2008      	movs	r0, #8
 8000c5c:	f7ff ff2a 	bl	8000ab4 <LCD_WriteCommand>
                   HD44780_DISPLAY_OFF); 
  
  LCD_WriteCommand(HD44780_CLEAR); 
 8000c60:	2001      	movs	r0, #1
 8000c62:	f7ff ff27 	bl	8000ab4 <LCD_WriteCommand>
  
  LCD_WriteCommand(HD44780_ENTRY_MODE | 
 8000c66:	2006      	movs	r0, #6
 8000c68:	f7ff ff24 	bl	8000ab4 <LCD_WriteCommand>
                   HD44780_EM_SHIFT_CURSOR | 
                   HD44780_EM_INCREMENT);
  
  LCD_WriteCommand(HD44780_DISPLAY_ONOFF | 
 8000c6c:	200c      	movs	r0, #12
 8000c6e:	f7ff ff21 	bl	8000ab4 <LCD_WriteCommand>
                   HD44780_DISPLAY_ON |
                   HD44780_CURSOR_OFF | 
                   HD44780_CURSOR_NOBLINK);
}
 8000c72:	bf00      	nop
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	200000d0 	.word	0x200000d0
 8000c84:	40020800 	.word	0x40020800
 8000c88:	000493df 	.word	0x000493df

08000c8c <move_menu>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void move_menu(char *a[])
  {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	symbol[0] = keypad_readkey();
 8000c94:	f7ff fdc8 	bl	8000828 <keypad_readkey>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <move_menu+0xb8>)
 8000c9e:	701a      	strb	r2, [r3, #0]
	  if (symbol[0] == 'B' && (position<max_pos)) {
 8000ca0:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <move_menu+0xb8>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b42      	cmp	r3, #66	; 0x42
 8000ca6:	d10e      	bne.n	8000cc6 <move_menu+0x3a>
 8000ca8:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <move_menu+0xbc>)
 8000caa:	781a      	ldrb	r2, [r3, #0]
 8000cac:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <move_menu+0xc0>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d208      	bcs.n	8000cc6 <move_menu+0x3a>
	  	   	  position++;
 8000cb4:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <move_menu+0xbc>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <move_menu+0xbc>)
 8000cbe:	701a      	strb	r2, [r3, #0]
	  	   	  refreshLCD=true;
 8000cc0:	4b23      	ldr	r3, [pc, #140]	; (8000d50 <move_menu+0xc4>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
	  	   	}

	  	   	if (symbol[0] == 'A' && (position>1)) {
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <move_menu+0xb8>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b41      	cmp	r3, #65	; 0x41
 8000ccc:	d10c      	bne.n	8000ce8 <move_menu+0x5c>
 8000cce:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <move_menu+0xbc>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d908      	bls.n	8000ce8 <move_menu+0x5c>
	  	   	  position--;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <move_menu+0xbc>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <move_menu+0xbc>)
 8000ce0:	701a      	strb	r2, [r3, #0]
	  	   	  refreshLCD=true;
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <move_menu+0xc4>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
	  	   	}
	  	  if (refreshLCD){                           //Odswiezanie LCD tylko przy zmiane zawartosci - usuwa problem "migotania" LCD
 8000ce8:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <move_menu+0xc4>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d024      	beq.n	8000d3a <move_menu+0xae>
	   	  LCD_WriteCommand(HD44780_CLEAR);
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f7ff fedf 	bl	8000ab4 <LCD_WriteCommand>
	   	  LCD_WriteText("->");
 8000cf6:	4817      	ldr	r0, [pc, #92]	; (8000d54 <move_menu+0xc8>)
 8000cf8:	f7ff ff02 	bl	8000b00 <LCD_WriteText>
	   	  LCD_WriteText(a[position-1]);
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <move_menu+0xbc>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000d06:	4413      	add	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fef5 	bl	8000b00 <LCD_WriteText>
	   	  if (position<4){
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <move_menu+0xbc>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b03      	cmp	r3, #3
 8000d1c:	d80a      	bhi.n	8000d34 <move_menu+0xa8>
	   		LCD_WriteTextXY(a[position-1+1],2,1);
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <move_menu+0xbc>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	4413      	add	r3, r2
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff15 	bl	8000b5e <LCD_WriteTextXY>
	   	  }
	   	  refreshLCD=false;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <move_menu+0xc4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
	   	}
  }
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200000e4 	.word	0x200000e4
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	20000001 	.word	0x20000001
 8000d50:	200000e6 	.word	0x200000e6
 8000d54:	08004220 	.word	0x08004220

08000d58 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if(htim == &htim2)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a1a      	ldr	r2, [pc, #104]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d12d      	bne.n	8000dc4 <HAL_TIM_PeriodElapsedCallback+0x6c>
  {
	  if((PIR_Garage == true || PIR_Kitchen == true || PIR_Livingroom == true) && alarm == true){ PIR_detected = true, alarmLED = true;}
 8000d68:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d107      	bne.n	8000d80 <HAL_TIM_PeriodElapsedCallback+0x28>
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d103      	bne.n	8000d80 <HAL_TIM_PeriodElapsedCallback+0x28>
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d009      	beq.n	8000d94 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d005      	beq.n	8000d94 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	701a      	strb	r2, [r3, #0]

	  if(alarmLED == true && PIR_detected == true)
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00d      	beq.n	8000db8 <HAL_TIM_PeriodElapsedCallback+0x60>
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d009      	beq.n	8000db8 <HAL_TIM_PeriodElapsedCallback+0x60>
		  {HAL_GPIO_TogglePin(Alarm_LED_GPIO_Port, Alarm_LED_Pin);
 8000da4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da8:	480f      	ldr	r0, [pc, #60]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000daa:	f001 faaa 	bl	8002302 <HAL_GPIO_TogglePin>
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);}
 8000dae:	2108      	movs	r1, #8
 8000db0:	4806      	ldr	r0, [pc, #24]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000db2:	f002 f8bd 	bl	8002f30 <HAL_TIM_PWM_Start>
				  HAL_GPIO_WritePin(Alarm_LED_GPIO_Port, Alarm_LED_Pin, GPIO_PIN_RESET);
				  };


  }
}
 8000db6:	e005      	b.n	8000dc4 <HAL_TIM_PeriodElapsedCallback+0x6c>
				  HAL_GPIO_WritePin(Alarm_LED_GPIO_Port, Alarm_LED_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dbe:	480a      	ldr	r0, [pc, #40]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000dc0:	f001 fa86 	bl	80022d0 <HAL_GPIO_WritePin>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200000f0 	.word	0x200000f0
 8000dd0:	200000e9 	.word	0x200000e9
 8000dd4:	200000eb 	.word	0x200000eb
 8000dd8:	200000ea 	.word	0x200000ea
 8000ddc:	200000e7 	.word	0x200000e7
 8000de0:	200000ec 	.word	0x200000ec
 8000de4:	200000e8 	.word	0x200000e8
 8000de8:	40021000 	.word	0x40021000

08000dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df0:	f000 ff17 	bl	8001c22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df4:	f000 fb04 	bl	8001400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df8:	f7ff fb84 	bl	8000504 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000dfc:	f000 fbe0 	bl	80015c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e00:	f000 fc62 	bl	80016c8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e04:	f000 fce4 	bl	80017d0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //LOAD CONFIG
  //alarm_config();
  keypad_config();
 8000e08:	f7ff fcda 	bl	80007c0 <keypad_config>
  LCD_Initialize();
 8000e0c:	f7ff fec6 	bl	8000b9c <LCD_Initialize>
 //TIMERS AND INTERRUPTS
  HAL_TIM_Base_Start_IT(&htim2);
 8000e10:	489e      	ldr	r0, [pc, #632]	; (800108c <main+0x2a0>)
 8000e12:	f001 ffb3 	bl	8002d7c <HAL_TIM_Base_Start_IT>
  //START SCREEN
  LCD_WriteCommand(HD44780_CLEAR);
 8000e16:	2001      	movs	r0, #1
 8000e18:	f7ff fe4c 	bl	8000ab4 <LCD_WriteCommand>
  LCD_WriteText("Welcome to");
 8000e1c:	489c      	ldr	r0, [pc, #624]	; (8001090 <main+0x2a4>)
 8000e1e:	f7ff fe6f 	bl	8000b00 <LCD_WriteText>
  LCD_WriteTextXY("Smarthome system",0,1);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2100      	movs	r1, #0
 8000e26:	489b      	ldr	r0, [pc, #620]	; (8001094 <main+0x2a8>)
 8000e28:	f7ff fe99 	bl	8000b5e <LCD_WriteTextXY>
  HAL_Delay(3000);
 8000e2c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e30:	f000 ff54 	bl	8001cdc <HAL_Delay>
  refreshLCD = true;
 8000e34:	4b98      	ldr	r3, [pc, #608]	; (8001098 <main+0x2ac>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //if(HAL_GPIO_ReadPin(PIR_Garage_GPIO_Port, PIR_Garage_Pin) == GPIO_PIN_SET){PIR_Garage = true;}
	  	//  else {PIR_Garage = false;};
	  if(HAL_GPIO_ReadPin(PIR_Kitchen_GPIO_Port, PIR_Kitchen_Pin) == GPIO_PIN_SET){PIR_Kitchen = true;}
 8000e3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e3e:	4897      	ldr	r0, [pc, #604]	; (800109c <main+0x2b0>)
 8000e40:	f001 fa2e 	bl	80022a0 <HAL_GPIO_ReadPin>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d103      	bne.n	8000e52 <main+0x66>
 8000e4a:	4b95      	ldr	r3, [pc, #596]	; (80010a0 <main+0x2b4>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
 8000e50:	e002      	b.n	8000e58 <main+0x6c>
	  	  else {PIR_Kitchen = false;};
 8000e52:	4b93      	ldr	r3, [pc, #588]	; (80010a0 <main+0x2b4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(PIR_Livingroom_GPIO_Port, PIR_Livingroom_Pin) == GPIO_PIN_SET){PIR_Livingroom = true;}
 8000e58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e5c:	488f      	ldr	r0, [pc, #572]	; (800109c <main+0x2b0>)
 8000e5e:	f001 fa1f 	bl	80022a0 <HAL_GPIO_ReadPin>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d103      	bne.n	8000e70 <main+0x84>
 8000e68:	4b8e      	ldr	r3, [pc, #568]	; (80010a4 <main+0x2b8>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]
 8000e6e:	e002      	b.n	8000e76 <main+0x8a>
	  	  else{PIR_Livingroom = false;};
 8000e70:	4b8c      	ldr	r3, [pc, #560]	; (80010a4 <main+0x2b8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
	  move_menu(act_menu);
 8000e76:	4b8c      	ldr	r3, [pc, #560]	; (80010a8 <main+0x2bc>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff ff06 	bl	8000c8c <move_menu>
 	if (symbol[0] == '*' && act_menu == mainmenu){
 8000e80:	4b8a      	ldr	r3, [pc, #552]	; (80010ac <main+0x2c0>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b2a      	cmp	r3, #42	; 0x2a
 8000e86:	d14a      	bne.n	8000f1e <main+0x132>
 8000e88:	4b87      	ldr	r3, [pc, #540]	; (80010a8 <main+0x2bc>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a88      	ldr	r2, [pc, #544]	; (80010b0 <main+0x2c4>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d145      	bne.n	8000f1e <main+0x132>
 		refreshLCD = true;
 8000e92:	4b81      	ldr	r3, [pc, #516]	; (8001098 <main+0x2ac>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	701a      	strb	r2, [r3, #0]
 	  switch (position){
 8000e98:	4b86      	ldr	r3, [pc, #536]	; (80010b4 <main+0x2c8>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	d832      	bhi.n	8000f08 <main+0x11c>
 8000ea2:	a201      	add	r2, pc, #4	; (adr r2, 8000ea8 <main+0xbc>)
 8000ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea8:	08000eb9 	.word	0x08000eb9
 8000eac:	08000ecd 	.word	0x08000ecd
 8000eb0:	08000ee1 	.word	0x08000ee1
 8000eb4:	08000ef5 	.word	0x08000ef5
 		case 1: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8000eb8:	4b7b      	ldr	r3, [pc, #492]	; (80010a8 <main+0x2bc>)
 8000eba:	4a7f      	ldr	r2, [pc, #508]	; (80010b8 <main+0x2cc>)
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	4b7d      	ldr	r3, [pc, #500]	; (80010b4 <main+0x2c8>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
 8000ec4:	4b7d      	ldr	r3, [pc, #500]	; (80010bc <main+0x2d0>)
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	701a      	strb	r2, [r3, #0]
 8000eca:	e027      	b.n	8000f1c <main+0x130>
 		case 2: act_menu = menuLivingroom, position = 1, max_pos = 2; break;
 8000ecc:	4b76      	ldr	r3, [pc, #472]	; (80010a8 <main+0x2bc>)
 8000ece:	4a7c      	ldr	r2, [pc, #496]	; (80010c0 <main+0x2d4>)
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	4b78      	ldr	r3, [pc, #480]	; (80010b4 <main+0x2c8>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]
 8000ed8:	4b78      	ldr	r3, [pc, #480]	; (80010bc <main+0x2d0>)
 8000eda:	2202      	movs	r2, #2
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	e01d      	b.n	8000f1c <main+0x130>
 		case 3: act_menu = menuGarage, position = 1, max_pos = 1; break;
 8000ee0:	4b71      	ldr	r3, [pc, #452]	; (80010a8 <main+0x2bc>)
 8000ee2:	4a78      	ldr	r2, [pc, #480]	; (80010c4 <main+0x2d8>)
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	4b73      	ldr	r3, [pc, #460]	; (80010b4 <main+0x2c8>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	701a      	strb	r2, [r3, #0]
 8000eec:	4b73      	ldr	r3, [pc, #460]	; (80010bc <main+0x2d0>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	701a      	strb	r2, [r3, #0]
 8000ef2:	e013      	b.n	8000f1c <main+0x130>
 		case 4: act_menu = menuAlarm, position = 1, max_pos = 2; break;
 8000ef4:	4b6c      	ldr	r3, [pc, #432]	; (80010a8 <main+0x2bc>)
 8000ef6:	4a74      	ldr	r2, [pc, #464]	; (80010c8 <main+0x2dc>)
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	4b6e      	ldr	r3, [pc, #440]	; (80010b4 <main+0x2c8>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	4b6e      	ldr	r3, [pc, #440]	; (80010bc <main+0x2d0>)
 8000f02:	2202      	movs	r2, #2
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	e009      	b.n	8000f1c <main+0x130>
 		default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8000f08:	4b67      	ldr	r3, [pc, #412]	; (80010a8 <main+0x2bc>)
 8000f0a:	4a6b      	ldr	r2, [pc, #428]	; (80010b8 <main+0x2cc>)
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	4b69      	ldr	r3, [pc, #420]	; (80010b4 <main+0x2c8>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
 8000f14:	4b69      	ldr	r3, [pc, #420]	; (80010bc <main+0x2d0>)
 8000f16:	2202      	movs	r2, #2
 8000f18:	701a      	strb	r2, [r3, #0]
 8000f1a:	bf00      	nop
 	  switch (position){
 8000f1c:	e24c      	b.n	80013b8 <main+0x5cc>
 	  	  }
 	}
 		else if(symbol[0] == '*' && act_menu == menuAlarm){
 8000f1e:	4b63      	ldr	r3, [pc, #396]	; (80010ac <main+0x2c0>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b2a      	cmp	r3, #42	; 0x2a
 8000f24:	d141      	bne.n	8000faa <main+0x1be>
 8000f26:	4b60      	ldr	r3, [pc, #384]	; (80010a8 <main+0x2bc>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a67      	ldr	r2, [pc, #412]	; (80010c8 <main+0x2dc>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d13c      	bne.n	8000faa <main+0x1be>
 	 		refreshLCD = true;
 8000f30:	4b59      	ldr	r3, [pc, #356]	; (8001098 <main+0x2ac>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
 	 	  switch (position){
 8000f36:	4b5f      	ldr	r3, [pc, #380]	; (80010b4 <main+0x2c8>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d002      	beq.n	8000f44 <main+0x158>
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d00f      	beq.n	8000f62 <main+0x176>
 8000f42:	e027      	b.n	8000f94 <main+0x1a8>
 	 		case 1: alarm = true;
 8000f44:	4b61      	ldr	r3, [pc, #388]	; (80010cc <main+0x2e0>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
 	 				LCD_WriteCommand(HD44780_CLEAR);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f7ff fdb2 	bl	8000ab4 <LCD_WriteCommand>
 	 				LCD_WriteText("Alarm");
 8000f50:	485f      	ldr	r0, [pc, #380]	; (80010d0 <main+0x2e4>)
 8000f52:	f7ff fdd5 	bl	8000b00 <LCD_WriteText>
 	 				LCD_WriteTextXY("turned on",0,1);
 8000f56:	2201      	movs	r2, #1
 8000f58:	2100      	movs	r1, #0
 8000f5a:	485e      	ldr	r0, [pc, #376]	; (80010d4 <main+0x2e8>)
 8000f5c:	f7ff fdff 	bl	8000b5e <LCD_WriteTextXY>
 	 				break;
 8000f60:	e022      	b.n	8000fa8 <main+0x1bc>
 	 		case 2: alarm = false;
 8000f62:	4b5a      	ldr	r3, [pc, #360]	; (80010cc <main+0x2e0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
 	 				PIR_detected = false;
 8000f68:	4b5b      	ldr	r3, [pc, #364]	; (80010d8 <main+0x2ec>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
 	 				alarmLED = false;
 8000f6e:	4b5b      	ldr	r3, [pc, #364]	; (80010dc <main+0x2f0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
 	 				LCD_WriteCommand(HD44780_CLEAR);
 8000f74:	2001      	movs	r0, #1
 8000f76:	f7ff fd9d 	bl	8000ab4 <LCD_WriteCommand>
		 	 		LCD_WriteText("Alarm");
 8000f7a:	4855      	ldr	r0, [pc, #340]	; (80010d0 <main+0x2e4>)
 8000f7c:	f7ff fdc0 	bl	8000b00 <LCD_WriteText>
		 	 		LCD_WriteTextXY("turned off",0,1);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2100      	movs	r1, #0
 8000f84:	4856      	ldr	r0, [pc, #344]	; (80010e0 <main+0x2f4>)
 8000f86:	f7ff fdea 	bl	8000b5e <LCD_WriteTextXY>
		 	 		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8000f8a:	2108      	movs	r1, #8
 8000f8c:	483f      	ldr	r0, [pc, #252]	; (800108c <main+0x2a0>)
 8000f8e:	f002 f8c9 	bl	8003124 <HAL_TIM_PWM_Stop>
		 	 		break;
 8000f92:	e009      	b.n	8000fa8 <main+0x1bc>
 	 		default: act_menu = menuAlarm, position = 1, max_pos = 2; break;
 8000f94:	4b44      	ldr	r3, [pc, #272]	; (80010a8 <main+0x2bc>)
 8000f96:	4a4c      	ldr	r2, [pc, #304]	; (80010c8 <main+0x2dc>)
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	4b46      	ldr	r3, [pc, #280]	; (80010b4 <main+0x2c8>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
 8000fa0:	4b46      	ldr	r3, [pc, #280]	; (80010bc <main+0x2d0>)
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	701a      	strb	r2, [r3, #0]
 8000fa6:	bf00      	nop
 	 	  switch (position){
 8000fa8:	e206      	b.n	80013b8 <main+0x5cc>
 	 	  	  }
 	 	}
 		else if(symbol[0] == '*' && act_menu == menuKitchen){
 8000faa:	4b40      	ldr	r3, [pc, #256]	; (80010ac <main+0x2c0>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b2a      	cmp	r3, #42	; 0x2a
 8000fb0:	d12d      	bne.n	800100e <main+0x222>
 8000fb2:	4b3d      	ldr	r3, [pc, #244]	; (80010a8 <main+0x2bc>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a40      	ldr	r2, [pc, #256]	; (80010b8 <main+0x2cc>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d128      	bne.n	800100e <main+0x222>
 		 		 	 		refreshLCD = true;
 8000fbc:	4b36      	ldr	r3, [pc, #216]	; (8001098 <main+0x2ac>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
 		 		 	 	  switch (position){
 8000fc2:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <main+0x2c8>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d002      	beq.n	8000fd0 <main+0x1e4>
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d00a      	beq.n	8000fe4 <main+0x1f8>
 8000fce:	e013      	b.n	8000ff8 <main+0x20c>
 		 		 	 	  	  	case 1: act_menu = menuKitchenTemperature, position = 1, max_pos = 2; break;
 8000fd0:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <main+0x2bc>)
 8000fd2:	4a44      	ldr	r2, [pc, #272]	; (80010e4 <main+0x2f8>)
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	4b37      	ldr	r3, [pc, #220]	; (80010b4 <main+0x2c8>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
 8000fdc:	4b37      	ldr	r3, [pc, #220]	; (80010bc <main+0x2d0>)
 8000fde:	2202      	movs	r2, #2
 8000fe0:	701a      	strb	r2, [r3, #0]
 8000fe2:	e013      	b.n	800100c <main+0x220>
 		 		 	 	 		case 2: act_menu = menuKitchenLighting, position = 1, max_pos = 2; break;
 8000fe4:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <main+0x2bc>)
 8000fe6:	4a40      	ldr	r2, [pc, #256]	; (80010e8 <main+0x2fc>)
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	4b32      	ldr	r3, [pc, #200]	; (80010b4 <main+0x2c8>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	701a      	strb	r2, [r3, #0]
 8000ff0:	4b32      	ldr	r3, [pc, #200]	; (80010bc <main+0x2d0>)
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	701a      	strb	r2, [r3, #0]
 8000ff6:	e009      	b.n	800100c <main+0x220>
 		 		 	 		default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8000ff8:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <main+0x2bc>)
 8000ffa:	4a2f      	ldr	r2, [pc, #188]	; (80010b8 <main+0x2cc>)
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <main+0x2c8>)
 8001000:	2201      	movs	r2, #1
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <main+0x2d0>)
 8001006:	2202      	movs	r2, #2
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	bf00      	nop
 		 		 	 	  switch (position){
 800100c:	e1d4      	b.n	80013b8 <main+0x5cc>
 		 		 	 	  	  }
 		 		 	 	}
 		else if(symbol[0] == '*' && act_menu == menuKitchenLighting){
 800100e:	4b27      	ldr	r3, [pc, #156]	; (80010ac <main+0x2c0>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b2a      	cmp	r3, #42	; 0x2a
 8001014:	d16e      	bne.n	80010f4 <main+0x308>
 8001016:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <main+0x2bc>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a33      	ldr	r2, [pc, #204]	; (80010e8 <main+0x2fc>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d169      	bne.n	80010f4 <main+0x308>
 		 	 		refreshLCD = true;
 8001020:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <main+0x2ac>)
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 8001026:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <main+0x2c8>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d002      	beq.n	8001034 <main+0x248>
 800102e:	2b02      	cmp	r3, #2
 8001030:	d010      	beq.n	8001054 <main+0x268>
 8001032:	e01f      	b.n	8001074 <main+0x288>
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 8001034:	2001      	movs	r0, #1
 8001036:	f7ff fd3d 	bl	8000ab4 <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 800103a:	482c      	ldr	r0, [pc, #176]	; (80010ec <main+0x300>)
 800103c:	f7ff fd60 	bl	8000b00 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 8001040:	2201      	movs	r2, #1
 8001042:	2100      	movs	r1, #0
 8001044:	4823      	ldr	r0, [pc, #140]	; (80010d4 <main+0x2e8>)
 8001046:	f7ff fd8a 	bl	8000b5e <LCD_WriteTextXY>
 		 	 				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800104a:	2108      	movs	r1, #8
 800104c:	4828      	ldr	r0, [pc, #160]	; (80010f0 <main+0x304>)
 800104e:	f001 ff6f 	bl	8002f30 <HAL_TIM_PWM_Start>
 		 	 				break;
 8001052:	e019      	b.n	8001088 <main+0x29c>
 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 8001054:	2001      	movs	r0, #1
 8001056:	f7ff fd2d 	bl	8000ab4 <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 800105a:	4824      	ldr	r0, [pc, #144]	; (80010ec <main+0x300>)
 800105c:	f7ff fd50 	bl	8000b00 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 8001060:	2201      	movs	r2, #1
 8001062:	2100      	movs	r1, #0
 8001064:	481e      	ldr	r0, [pc, #120]	; (80010e0 <main+0x2f4>)
 8001066:	f7ff fd7a 	bl	8000b5e <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 800106a:	2108      	movs	r1, #8
 800106c:	4820      	ldr	r0, [pc, #128]	; (80010f0 <main+0x304>)
 800106e:	f002 f859 	bl	8003124 <HAL_TIM_PWM_Stop>
 				 	 		break;
 8001072:	e009      	b.n	8001088 <main+0x29c>
 		 	 		default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <main+0x2bc>)
 8001076:	4a10      	ldr	r2, [pc, #64]	; (80010b8 <main+0x2cc>)
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <main+0x2c8>)
 800107c:	2201      	movs	r2, #1
 800107e:	701a      	strb	r2, [r3, #0]
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <main+0x2d0>)
 8001082:	2202      	movs	r2, #2
 8001084:	701a      	strb	r2, [r3, #0]
 8001086:	bf00      	nop
 		 	 	  switch (position){
 8001088:	e196      	b.n	80013b8 <main+0x5cc>
 800108a:	bf00      	nop
 800108c:	200000f0 	.word	0x200000f0
 8001090:	08004224 	.word	0x08004224
 8001094:	08004230 	.word	0x08004230
 8001098:	200000e6 	.word	0x200000e6
 800109c:	40021000 	.word	0x40021000
 80010a0:	200000eb 	.word	0x200000eb
 80010a4:	200000ea 	.word	0x200000ea
 80010a8:	200000a4 	.word	0x200000a4
 80010ac:	200000e4 	.word	0x200000e4
 80010b0:	20000004 	.word	0x20000004
 80010b4:	20000000 	.word	0x20000000
 80010b8:	20000014 	.word	0x20000014
 80010bc:	20000001 	.word	0x20000001
 80010c0:	20000044 	.word	0x20000044
 80010c4:	20000074 	.word	0x20000074
 80010c8:	20000094 	.word	0x20000094
 80010cc:	200000e7 	.word	0x200000e7
 80010d0:	08004244 	.word	0x08004244
 80010d4:	0800424c 	.word	0x0800424c
 80010d8:	200000ec 	.word	0x200000ec
 80010dc:	200000e8 	.word	0x200000e8
 80010e0:	08004258 	.word	0x08004258
 80010e4:	20000034 	.word	0x20000034
 80010e8:	20000024 	.word	0x20000024
 80010ec:	08004264 	.word	0x08004264
 80010f0:	2000013c 	.word	0x2000013c
 		 	 	  	  }
 		 	 	}
 			else if(symbol[0] == '*' && act_menu == menuKitchenTemperature){
 80010f4:	4b99      	ldr	r3, [pc, #612]	; (800135c <main+0x570>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b2a      	cmp	r3, #42	; 0x2a
 80010fa:	d131      	bne.n	8001160 <main+0x374>
 80010fc:	4b98      	ldr	r3, [pc, #608]	; (8001360 <main+0x574>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a98      	ldr	r2, [pc, #608]	; (8001364 <main+0x578>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d12c      	bne.n	8001160 <main+0x374>
 			 		 	 		refreshLCD = true;
 8001106:	4b98      	ldr	r3, [pc, #608]	; (8001368 <main+0x57c>)
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
 			 		 	 	  switch (position){
 800110c:	4b97      	ldr	r3, [pc, #604]	; (800136c <main+0x580>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d002      	beq.n	800111a <main+0x32e>
 8001114:	2b02      	cmp	r3, #2
 8001116:	d00c      	beq.n	8001132 <main+0x346>
 8001118:	e017      	b.n	800114a <main+0x35e>
 			 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 800111a:	2001      	movs	r0, #1
 800111c:	f7ff fcca 	bl	8000ab4 <LCD_WriteCommand>
 			 		 	 				LCD_WriteText("");
 8001120:	4893      	ldr	r0, [pc, #588]	; (8001370 <main+0x584>)
 8001122:	f7ff fced 	bl	8000b00 <LCD_WriteText>
 			 		 	 				LCD_WriteTextXY("",0,1);
 8001126:	2201      	movs	r2, #1
 8001128:	2100      	movs	r1, #0
 800112a:	4891      	ldr	r0, [pc, #580]	; (8001370 <main+0x584>)
 800112c:	f7ff fd17 	bl	8000b5e <LCD_WriteTextXY>
 			 		 	 				break;
 8001130:	e015      	b.n	800115e <main+0x372>
 			 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 8001132:	2001      	movs	r0, #1
 8001134:	f7ff fcbe 	bl	8000ab4 <LCD_WriteCommand>
 			 				 	 		LCD_WriteText("");
 8001138:	488d      	ldr	r0, [pc, #564]	; (8001370 <main+0x584>)
 800113a:	f7ff fce1 	bl	8000b00 <LCD_WriteText>
 			 				 	 		LCD_WriteTextXY("",0,1);; break;
 800113e:	2201      	movs	r2, #1
 8001140:	2100      	movs	r1, #0
 8001142:	488b      	ldr	r0, [pc, #556]	; (8001370 <main+0x584>)
 8001144:	f7ff fd0b 	bl	8000b5e <LCD_WriteTextXY>
 8001148:	e009      	b.n	800115e <main+0x372>
 			 		 	 		default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 800114a:	4b85      	ldr	r3, [pc, #532]	; (8001360 <main+0x574>)
 800114c:	4a89      	ldr	r2, [pc, #548]	; (8001374 <main+0x588>)
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	4b86      	ldr	r3, [pc, #536]	; (800136c <main+0x580>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
 8001156:	4b88      	ldr	r3, [pc, #544]	; (8001378 <main+0x58c>)
 8001158:	2202      	movs	r2, #2
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	bf00      	nop
 			 		 	 	  switch (position){
 800115e:	e12b      	b.n	80013b8 <main+0x5cc>
 			 		 	 	  	  }
 			 		 	 	}
 			else if(symbol[0] == '*' && act_menu == menuLivingroom){
 8001160:	4b7e      	ldr	r3, [pc, #504]	; (800135c <main+0x570>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b2a      	cmp	r3, #42	; 0x2a
 8001166:	d12d      	bne.n	80011c4 <main+0x3d8>
 8001168:	4b7d      	ldr	r3, [pc, #500]	; (8001360 <main+0x574>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a83      	ldr	r2, [pc, #524]	; (800137c <main+0x590>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d128      	bne.n	80011c4 <main+0x3d8>
 		 		 	 		refreshLCD = true;
 8001172:	4b7d      	ldr	r3, [pc, #500]	; (8001368 <main+0x57c>)
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
 		 		 	 	  switch (position){
 8001178:	4b7c      	ldr	r3, [pc, #496]	; (800136c <main+0x580>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d002      	beq.n	8001186 <main+0x39a>
 8001180:	2b02      	cmp	r3, #2
 8001182:	d00a      	beq.n	800119a <main+0x3ae>
 8001184:	e013      	b.n	80011ae <main+0x3c2>
 		 		 	 	  	  	case 1: act_menu = menuLivingroomTemperature, position = 1, max_pos = 2; break;
 8001186:	4b76      	ldr	r3, [pc, #472]	; (8001360 <main+0x574>)
 8001188:	4a7d      	ldr	r2, [pc, #500]	; (8001380 <main+0x594>)
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	4b77      	ldr	r3, [pc, #476]	; (800136c <main+0x580>)
 800118e:	2201      	movs	r2, #1
 8001190:	701a      	strb	r2, [r3, #0]
 8001192:	4b79      	ldr	r3, [pc, #484]	; (8001378 <main+0x58c>)
 8001194:	2202      	movs	r2, #2
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	e013      	b.n	80011c2 <main+0x3d6>
 		 		 	 	 		case 2: act_menu = menuLivingroomLighting, position = 1, max_pos = 2; break;
 800119a:	4b71      	ldr	r3, [pc, #452]	; (8001360 <main+0x574>)
 800119c:	4a79      	ldr	r2, [pc, #484]	; (8001384 <main+0x598>)
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	4b72      	ldr	r3, [pc, #456]	; (800136c <main+0x580>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
 80011a6:	4b74      	ldr	r3, [pc, #464]	; (8001378 <main+0x58c>)
 80011a8:	2202      	movs	r2, #2
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e009      	b.n	80011c2 <main+0x3d6>
 		 		 	 		default: act_menu = menuLivingroom, position = 1, max_pos = 2; break;
 80011ae:	4b6c      	ldr	r3, [pc, #432]	; (8001360 <main+0x574>)
 80011b0:	4a72      	ldr	r2, [pc, #456]	; (800137c <main+0x590>)
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	4b6d      	ldr	r3, [pc, #436]	; (800136c <main+0x580>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	4b6f      	ldr	r3, [pc, #444]	; (8001378 <main+0x58c>)
 80011bc:	2202      	movs	r2, #2
 80011be:	701a      	strb	r2, [r3, #0]
 80011c0:	bf00      	nop
 		 		 	 	  switch (position){
 80011c2:	e0f9      	b.n	80013b8 <main+0x5cc>
 		 		 	 	  	  }
 		 		 	 	}
 		else if(symbol[0] == '*' && act_menu == menuLivingroomLighting){
 80011c4:	4b65      	ldr	r3, [pc, #404]	; (800135c <main+0x570>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b2a      	cmp	r3, #42	; 0x2a
 80011ca:	d139      	bne.n	8001240 <main+0x454>
 80011cc:	4b64      	ldr	r3, [pc, #400]	; (8001360 <main+0x574>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a6c      	ldr	r2, [pc, #432]	; (8001384 <main+0x598>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d134      	bne.n	8001240 <main+0x454>
 		 	 		refreshLCD = true;
 80011d6:	4b64      	ldr	r3, [pc, #400]	; (8001368 <main+0x57c>)
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 80011dc:	4b63      	ldr	r3, [pc, #396]	; (800136c <main+0x580>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d002      	beq.n	80011ea <main+0x3fe>
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d010      	beq.n	800120a <main+0x41e>
 80011e8:	e01f      	b.n	800122a <main+0x43e>
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 80011ea:	2001      	movs	r0, #1
 80011ec:	f7ff fc62 	bl	8000ab4 <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 80011f0:	4865      	ldr	r0, [pc, #404]	; (8001388 <main+0x59c>)
 80011f2:	f7ff fc85 	bl	8000b00 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 80011f6:	2201      	movs	r2, #1
 80011f8:	2100      	movs	r1, #0
 80011fa:	4864      	ldr	r0, [pc, #400]	; (800138c <main+0x5a0>)
 80011fc:	f7ff fcaf 	bl	8000b5e <LCD_WriteTextXY>
 		 	 				HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001200:	2100      	movs	r1, #0
 8001202:	4863      	ldr	r0, [pc, #396]	; (8001390 <main+0x5a4>)
 8001204:	f001 fe94 	bl	8002f30 <HAL_TIM_PWM_Start>
 		 	 				break;
 8001208:	e019      	b.n	800123e <main+0x452>
 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 800120a:	2001      	movs	r0, #1
 800120c:	f7ff fc52 	bl	8000ab4 <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 8001210:	485d      	ldr	r0, [pc, #372]	; (8001388 <main+0x59c>)
 8001212:	f7ff fc75 	bl	8000b00 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 8001216:	2201      	movs	r2, #1
 8001218:	2100      	movs	r1, #0
 800121a:	485e      	ldr	r0, [pc, #376]	; (8001394 <main+0x5a8>)
 800121c:	f7ff fc9f 	bl	8000b5e <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001220:	2100      	movs	r1, #0
 8001222:	485b      	ldr	r0, [pc, #364]	; (8001390 <main+0x5a4>)
 8001224:	f001 ff7e 	bl	8003124 <HAL_TIM_PWM_Stop>
 				 	 		break;
 8001228:	e009      	b.n	800123e <main+0x452>
 		 	 		default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 800122a:	4b4d      	ldr	r3, [pc, #308]	; (8001360 <main+0x574>)
 800122c:	4a51      	ldr	r2, [pc, #324]	; (8001374 <main+0x588>)
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	4b4e      	ldr	r3, [pc, #312]	; (800136c <main+0x580>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
 8001236:	4b50      	ldr	r3, [pc, #320]	; (8001378 <main+0x58c>)
 8001238:	2202      	movs	r2, #2
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	bf00      	nop
 		 	 	  switch (position){
 800123e:	e0bb      	b.n	80013b8 <main+0x5cc>
 		 	 	  	  }
 		 	 	}
 			else if(symbol[0] == '*' && act_menu == menuLivingroomTemperature){
 8001240:	4b46      	ldr	r3, [pc, #280]	; (800135c <main+0x570>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b2a      	cmp	r3, #42	; 0x2a
 8001246:	d131      	bne.n	80012ac <main+0x4c0>
 8001248:	4b45      	ldr	r3, [pc, #276]	; (8001360 <main+0x574>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a4c      	ldr	r2, [pc, #304]	; (8001380 <main+0x594>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d12c      	bne.n	80012ac <main+0x4c0>
 			 		 	 		refreshLCD = true;
 8001252:	4b45      	ldr	r3, [pc, #276]	; (8001368 <main+0x57c>)
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
 			 		 	 	  switch (position){
 8001258:	4b44      	ldr	r3, [pc, #272]	; (800136c <main+0x580>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d002      	beq.n	8001266 <main+0x47a>
 8001260:	2b02      	cmp	r3, #2
 8001262:	d00c      	beq.n	800127e <main+0x492>
 8001264:	e017      	b.n	8001296 <main+0x4aa>
 			 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 8001266:	2001      	movs	r0, #1
 8001268:	f7ff fc24 	bl	8000ab4 <LCD_WriteCommand>
 			 		 	 				LCD_WriteText("");
 800126c:	4840      	ldr	r0, [pc, #256]	; (8001370 <main+0x584>)
 800126e:	f7ff fc47 	bl	8000b00 <LCD_WriteText>
 			 		 	 				LCD_WriteTextXY("",0,1);
 8001272:	2201      	movs	r2, #1
 8001274:	2100      	movs	r1, #0
 8001276:	483e      	ldr	r0, [pc, #248]	; (8001370 <main+0x584>)
 8001278:	f7ff fc71 	bl	8000b5e <LCD_WriteTextXY>
 			 		 	 				break;
 800127c:	e015      	b.n	80012aa <main+0x4be>
 			 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 800127e:	2001      	movs	r0, #1
 8001280:	f7ff fc18 	bl	8000ab4 <LCD_WriteCommand>
 			 				 	 		LCD_WriteText("");
 8001284:	483a      	ldr	r0, [pc, #232]	; (8001370 <main+0x584>)
 8001286:	f7ff fc3b 	bl	8000b00 <LCD_WriteText>
 			 				 	 		LCD_WriteTextXY("",0,1);; break;
 800128a:	2201      	movs	r2, #1
 800128c:	2100      	movs	r1, #0
 800128e:	4838      	ldr	r0, [pc, #224]	; (8001370 <main+0x584>)
 8001290:	f7ff fc65 	bl	8000b5e <LCD_WriteTextXY>
 8001294:	e009      	b.n	80012aa <main+0x4be>
 			 		 	 		default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8001296:	4b32      	ldr	r3, [pc, #200]	; (8001360 <main+0x574>)
 8001298:	4a36      	ldr	r2, [pc, #216]	; (8001374 <main+0x588>)
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	4b33      	ldr	r3, [pc, #204]	; (800136c <main+0x580>)
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
 80012a2:	4b35      	ldr	r3, [pc, #212]	; (8001378 <main+0x58c>)
 80012a4:	2202      	movs	r2, #2
 80012a6:	701a      	strb	r2, [r3, #0]
 80012a8:	bf00      	nop
 			 		 	 	  switch (position){
 80012aa:	e085      	b.n	80013b8 <main+0x5cc>
 			 		 	 	  	  }
 			 		 	 	}
 			else if(symbol[0] == '*' && act_menu == menuGarage){
 80012ac:	4b2b      	ldr	r3, [pc, #172]	; (800135c <main+0x570>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b2a      	cmp	r3, #42	; 0x2a
 80012b2:	d120      	bne.n	80012f6 <main+0x50a>
 80012b4:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <main+0x574>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a37      	ldr	r2, [pc, #220]	; (8001398 <main+0x5ac>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d11b      	bne.n	80012f6 <main+0x50a>
 		 		 	 		refreshLCD = true;
 80012be:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <main+0x57c>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	701a      	strb	r2, [r3, #0]
 		 		 	 	  switch (position){
 80012c4:	4b29      	ldr	r3, [pc, #164]	; (800136c <main+0x580>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d109      	bne.n	80012e0 <main+0x4f4>
 		 		 	 	  	  	case 1: act_menu = menuGarageLighting, position = 1, max_pos = 2; break;
 80012cc:	4b24      	ldr	r3, [pc, #144]	; (8001360 <main+0x574>)
 80012ce:	4a33      	ldr	r2, [pc, #204]	; (800139c <main+0x5b0>)
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <main+0x580>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	4b27      	ldr	r3, [pc, #156]	; (8001378 <main+0x58c>)
 80012da:	2202      	movs	r2, #2
 80012dc:	701a      	strb	r2, [r3, #0]
 80012de:	e009      	b.n	80012f4 <main+0x508>
 		 		 	 		default: act_menu = menuGarage, position = 1, max_pos = 1; break;
 80012e0:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <main+0x574>)
 80012e2:	4a2d      	ldr	r2, [pc, #180]	; (8001398 <main+0x5ac>)
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	4b21      	ldr	r3, [pc, #132]	; (800136c <main+0x580>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	701a      	strb	r2, [r3, #0]
 80012ec:	4b22      	ldr	r3, [pc, #136]	; (8001378 <main+0x58c>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	bf00      	nop
 		 		 	 	  switch (position){
 80012f4:	e060      	b.n	80013b8 <main+0x5cc>
 		 		 	 	  	  }
 		 		 	 	}
 			else if(symbol[0] == '*' && act_menu == menuGarageLighting){
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <main+0x570>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b2a      	cmp	r3, #42	; 0x2a
 80012fc:	d15c      	bne.n	80013b8 <main+0x5cc>
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <main+0x574>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a26      	ldr	r2, [pc, #152]	; (800139c <main+0x5b0>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d157      	bne.n	80013b8 <main+0x5cc>
 		 	 		refreshLCD = true;
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <main+0x57c>)
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <main+0x580>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d002      	beq.n	800131c <main+0x530>
 8001316:	2b02      	cmp	r3, #2
 8001318:	d010      	beq.n	800133c <main+0x550>
 800131a:	e043      	b.n	80013a4 <main+0x5b8>
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 800131c:	2001      	movs	r0, #1
 800131e:	f7ff fbc9 	bl	8000ab4 <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 8001322:	4819      	ldr	r0, [pc, #100]	; (8001388 <main+0x59c>)
 8001324:	f7ff fbec 	bl	8000b00 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 8001328:	2201      	movs	r2, #1
 800132a:	2100      	movs	r1, #0
 800132c:	4817      	ldr	r0, [pc, #92]	; (800138c <main+0x5a0>)
 800132e:	f7ff fc16 	bl	8000b5e <LCD_WriteTextXY>
 		 	 				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001332:	2100      	movs	r1, #0
 8001334:	481a      	ldr	r0, [pc, #104]	; (80013a0 <main+0x5b4>)
 8001336:	f001 fdfb 	bl	8002f30 <HAL_TIM_PWM_Start>
 		 	 				break;
 800133a:	e03d      	b.n	80013b8 <main+0x5cc>
 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 800133c:	2001      	movs	r0, #1
 800133e:	f7ff fbb9 	bl	8000ab4 <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 8001342:	4811      	ldr	r0, [pc, #68]	; (8001388 <main+0x59c>)
 8001344:	f7ff fbdc 	bl	8000b00 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 8001348:	2201      	movs	r2, #1
 800134a:	2100      	movs	r1, #0
 800134c:	4811      	ldr	r0, [pc, #68]	; (8001394 <main+0x5a8>)
 800134e:	f7ff fc06 	bl	8000b5e <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001352:	2100      	movs	r1, #0
 8001354:	4812      	ldr	r0, [pc, #72]	; (80013a0 <main+0x5b4>)
 8001356:	f001 fee5 	bl	8003124 <HAL_TIM_PWM_Stop>
 				 	 		break;
 800135a:	e02d      	b.n	80013b8 <main+0x5cc>
 800135c:	200000e4 	.word	0x200000e4
 8001360:	200000a4 	.word	0x200000a4
 8001364:	20000034 	.word	0x20000034
 8001368:	200000e6 	.word	0x200000e6
 800136c:	20000000 	.word	0x20000000
 8001370:	08004200 	.word	0x08004200
 8001374:	20000014 	.word	0x20000014
 8001378:	20000001 	.word	0x20000001
 800137c:	20000044 	.word	0x20000044
 8001380:	20000064 	.word	0x20000064
 8001384:	20000054 	.word	0x20000054
 8001388:	08004264 	.word	0x08004264
 800138c:	0800424c 	.word	0x0800424c
 8001390:	20000188 	.word	0x20000188
 8001394:	08004258 	.word	0x08004258
 8001398:	20000074 	.word	0x20000074
 800139c:	20000084 	.word	0x20000084
 80013a0:	200000f0 	.word	0x200000f0
 		 	 		default: act_menu = menuGarageLighting, position = 1, max_pos = 2; break;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <main+0x5f8>)
 80013a6:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <main+0x5fc>)
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <main+0x600>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	701a      	strb	r2, [r3, #0]
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <main+0x604>)
 80013b2:	2202      	movs	r2, #2
 80013b4:	701a      	strb	r2, [r3, #0]
 80013b6:	bf00      	nop
 		 	 	  	  }
 		 	 	}

 	if (symbol[0] == '#')
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <main+0x608>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b23      	cmp	r3, #35	; 0x23
 80013be:	d10b      	bne.n	80013d8 <main+0x5ec>
 	{
 		refreshLCD = true;
 80013c0:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <main+0x60c>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
 		act_menu = mainmenu;
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <main+0x5f8>)
 80013c8:	4a0c      	ldr	r2, [pc, #48]	; (80013fc <main+0x610>)
 80013ca:	601a      	str	r2, [r3, #0]
 		position = 1;
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <main+0x600>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
 		max_pos = 4;
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <main+0x604>)
 80013d4:	2204      	movs	r2, #4
 80013d6:	701a      	strb	r2, [r3, #0]
 	}

 	HAL_Delay(500);
 80013d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013dc:	f000 fc7e 	bl	8001cdc <HAL_Delay>
	  if(HAL_GPIO_ReadPin(PIR_Kitchen_GPIO_Port, PIR_Kitchen_Pin) == GPIO_PIN_SET){PIR_Kitchen = true;}
 80013e0:	e52b      	b.n	8000e3a <main+0x4e>
 80013e2:	bf00      	nop
 80013e4:	200000a4 	.word	0x200000a4
 80013e8:	20000084 	.word	0x20000084
 80013ec:	20000000 	.word	0x20000000
 80013f0:	20000001 	.word	0x20000001
 80013f4:	200000e4 	.word	0x200000e4
 80013f8:	200000e6 	.word	0x200000e6
 80013fc:	20000004 	.word	0x20000004

08001400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b094      	sub	sp, #80	; 0x50
 8001404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001406:	f107 0320 	add.w	r3, r7, #32
 800140a:	2230      	movs	r2, #48	; 0x30
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f002 fe98 	bl	8004144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001424:	f000 ffac 	bl	8002380 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001428:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <SystemClock_Config+0xc8>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	4a26      	ldr	r2, [pc, #152]	; (80014c8 <SystemClock_Config+0xc8>)
 800142e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001432:	6413      	str	r3, [r2, #64]	; 0x40
 8001434:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <SystemClock_Config+0xc8>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <SystemClock_Config+0xcc>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001448:	4a20      	ldr	r2, [pc, #128]	; (80014cc <SystemClock_Config+0xcc>)
 800144a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <SystemClock_Config+0xcc>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800145c:	2302      	movs	r3, #2
 800145e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001460:	2301      	movs	r3, #1
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001464:	2310      	movs	r3, #16
 8001466:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001468:	2302      	movs	r3, #2
 800146a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800146c:	2300      	movs	r3, #0
 800146e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001470:	2308      	movs	r3, #8
 8001472:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001474:	2348      	movs	r3, #72	; 0x48
 8001476:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001478:	2302      	movs	r3, #2
 800147a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800147c:	2303      	movs	r3, #3
 800147e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001480:	f107 0320 	add.w	r3, r7, #32
 8001484:	4618      	mov	r0, r3
 8001486:	f000 ff8b 	bl	80023a0 <HAL_RCC_OscConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001490:	f000 f81e 	bl	80014d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001494:	230f      	movs	r3, #15
 8001496:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001498:	2302      	movs	r3, #2
 800149a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014aa:	f107 030c 	add.w	r3, r7, #12
 80014ae:	2102      	movs	r1, #2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f001 fa19 	bl	80028e8 <HAL_RCC_ClockConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014bc:	f000 f808 	bl	80014d0 <Error_Handler>
  }
}
 80014c0:	bf00      	nop
 80014c2:	3750      	adds	r7, #80	; 0x50
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40007000 	.word	0x40007000

080014d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d4:	b672      	cpsid	i
}
 80014d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <Error_Handler+0x8>
	...

080014dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_MspInit+0x44>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <HAL_MspInit+0x44>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ec:	6413      	str	r3, [r2, #64]	; 0x40
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_MspInit+0x44>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_MspInit+0x44>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	4a08      	ldr	r2, [pc, #32]	; (8001520 <HAL_MspInit+0x44>)
 8001500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001504:	6453      	str	r3, [r2, #68]	; 0x44
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_MspInit+0x44>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001528:	e7fe      	b.n	8001528 <NMI_Handler+0x4>

0800152a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <HardFault_Handler+0x4>

08001530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <MemManage_Handler+0x4>

08001536 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <UsageFault_Handler+0x4>

08001542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001570:	f000 fb94 	bl	8001c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}

08001578 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <TIM2_IRQHandler+0x10>)
 800157e:	f001 fe51 	bl	8003224 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200000f0 	.word	0x200000f0

0800158c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001590:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001594:	f000 fed0 	bl	8002338 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <SystemInit+0x20>)
 80015a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a6:	4a05      	ldr	r2, [pc, #20]	; (80015bc <SystemInit+0x20>)
 80015a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08e      	sub	sp, #56	; 0x38
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e0:	463b      	mov	r3, r7
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]
 80015ee:	615a      	str	r2, [r3, #20]
 80015f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015f2:	4b34      	ldr	r3, [pc, #208]	; (80016c4 <MX_TIM2_Init+0x104>)
 80015f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80015fa:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <MX_TIM2_Init+0x104>)
 80015fc:	2247      	movs	r2, #71	; 0x47
 80015fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001600:	4b30      	ldr	r3, [pc, #192]	; (80016c4 <MX_TIM2_Init+0x104>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001606:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <MX_TIM2_Init+0x104>)
 8001608:	f240 32e7 	movw	r2, #999	; 0x3e7
 800160c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160e:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <MX_TIM2_Init+0x104>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001614:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <MX_TIM2_Init+0x104>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800161a:	482a      	ldr	r0, [pc, #168]	; (80016c4 <MX_TIM2_Init+0x104>)
 800161c:	f001 fb56 	bl	8002ccc <HAL_TIM_Base_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001626:	f7ff ff53 	bl	80014d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800162a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001630:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001634:	4619      	mov	r1, r3
 8001636:	4823      	ldr	r0, [pc, #140]	; (80016c4 <MX_TIM2_Init+0x104>)
 8001638:	f002 f828 	bl	800368c <HAL_TIM_ConfigClockSource>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001642:	f7ff ff45 	bl	80014d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001646:	481f      	ldr	r0, [pc, #124]	; (80016c4 <MX_TIM2_Init+0x104>)
 8001648:	f001 fc10 	bl	8002e6c <HAL_TIM_PWM_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001652:	f7ff ff3d 	bl	80014d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	4619      	mov	r1, r3
 8001664:	4817      	ldr	r0, [pc, #92]	; (80016c4 <MX_TIM2_Init+0x104>)
 8001666:	f002 fcc1 	bl	8003fec <HAL_TIMEx_MasterConfigSynchronization>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001670:	f7ff ff2e 	bl	80014d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001674:	2360      	movs	r3, #96	; 0x60
 8001676:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8001678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001686:	463b      	mov	r3, r7
 8001688:	2200      	movs	r2, #0
 800168a:	4619      	mov	r1, r3
 800168c:	480d      	ldr	r0, [pc, #52]	; (80016c4 <MX_TIM2_Init+0x104>)
 800168e:	f001 fee9 	bl	8003464 <HAL_TIM_PWM_ConfigChannel>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001698:	f7ff ff1a 	bl	80014d0 <Error_Handler>
  }
  sConfigOC.Pulse = 10;
 800169c:	230a      	movs	r3, #10
 800169e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016a0:	463b      	mov	r3, r7
 80016a2:	2208      	movs	r2, #8
 80016a4:	4619      	mov	r1, r3
 80016a6:	4807      	ldr	r0, [pc, #28]	; (80016c4 <MX_TIM2_Init+0x104>)
 80016a8:	f001 fedc 	bl	8003464 <HAL_TIM_PWM_ConfigChannel>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 80016b2:	f7ff ff0d 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016b6:	4803      	ldr	r0, [pc, #12]	; (80016c4 <MX_TIM2_Init+0x104>)
 80016b8:	f000 f9ce 	bl	8001a58 <HAL_TIM_MspPostInit>

}
 80016bc:	bf00      	nop
 80016be:	3738      	adds	r7, #56	; 0x38
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	200000f0 	.word	0x200000f0

080016c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08e      	sub	sp, #56	; 0x38
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e8:	463b      	mov	r3, r7
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]
 80016f6:	615a      	str	r2, [r3, #20]
 80016f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016fa:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <MX_TIM3_Init+0x100>)
 80016fc:	4a33      	ldr	r2, [pc, #204]	; (80017cc <MX_TIM3_Init+0x104>)
 80016fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001700:	4b31      	ldr	r3, [pc, #196]	; (80017c8 <MX_TIM3_Init+0x100>)
 8001702:	2247      	movs	r2, #71	; 0x47
 8001704:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001706:	4b30      	ldr	r3, [pc, #192]	; (80017c8 <MX_TIM3_Init+0x100>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800170c:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <MX_TIM3_Init+0x100>)
 800170e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001712:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001714:	4b2c      	ldr	r3, [pc, #176]	; (80017c8 <MX_TIM3_Init+0x100>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800171a:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <MX_TIM3_Init+0x100>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001720:	4829      	ldr	r0, [pc, #164]	; (80017c8 <MX_TIM3_Init+0x100>)
 8001722:	f001 fad3 	bl	8002ccc <HAL_TIM_Base_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800172c:	f7ff fed0 	bl	80014d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800173a:	4619      	mov	r1, r3
 800173c:	4822      	ldr	r0, [pc, #136]	; (80017c8 <MX_TIM3_Init+0x100>)
 800173e:	f001 ffa5 	bl	800368c <HAL_TIM_ConfigClockSource>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001748:	f7ff fec2 	bl	80014d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800174c:	481e      	ldr	r0, [pc, #120]	; (80017c8 <MX_TIM3_Init+0x100>)
 800174e:	f001 fb8d 	bl	8002e6c <HAL_TIM_PWM_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001758:	f7ff feba 	bl	80014d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	4619      	mov	r1, r3
 800176a:	4817      	ldr	r0, [pc, #92]	; (80017c8 <MX_TIM3_Init+0x100>)
 800176c:	f002 fc3e 	bl	8003fec <HAL_TIMEx_MasterConfigSynchronization>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001776:	f7ff feab 	bl	80014d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800177a:	2360      	movs	r3, #96	; 0x60
 800177c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 800177e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001782:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800178c:	463b      	mov	r3, r7
 800178e:	2200      	movs	r2, #0
 8001790:	4619      	mov	r1, r3
 8001792:	480d      	ldr	r0, [pc, #52]	; (80017c8 <MX_TIM3_Init+0x100>)
 8001794:	f001 fe66 	bl	8003464 <HAL_TIM_PWM_ConfigChannel>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800179e:	f7ff fe97 	bl	80014d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017a2:	463b      	mov	r3, r7
 80017a4:	2208      	movs	r2, #8
 80017a6:	4619      	mov	r1, r3
 80017a8:	4807      	ldr	r0, [pc, #28]	; (80017c8 <MX_TIM3_Init+0x100>)
 80017aa:	f001 fe5b 	bl	8003464 <HAL_TIM_PWM_ConfigChannel>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80017b4:	f7ff fe8c 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017b8:	4803      	ldr	r0, [pc, #12]	; (80017c8 <MX_TIM3_Init+0x100>)
 80017ba:	f000 f94d 	bl	8001a58 <HAL_TIM_MspPostInit>

}
 80017be:	bf00      	nop
 80017c0:	3738      	adds	r7, #56	; 0x38
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	2000013c 	.word	0x2000013c
 80017cc:	40000400 	.word	0x40000400

080017d0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08e      	sub	sp, #56	; 0x38
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e4:	f107 031c 	add.w	r3, r7, #28
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f0:	463b      	mov	r3, r7
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]
 80017fe:	615a      	str	r2, [r3, #20]
 8001800:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001802:	4b2d      	ldr	r3, [pc, #180]	; (80018b8 <MX_TIM4_Init+0xe8>)
 8001804:	4a2d      	ldr	r2, [pc, #180]	; (80018bc <MX_TIM4_Init+0xec>)
 8001806:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001808:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <MX_TIM4_Init+0xe8>)
 800180a:	2247      	movs	r2, #71	; 0x47
 800180c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180e:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <MX_TIM4_Init+0xe8>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001814:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <MX_TIM4_Init+0xe8>)
 8001816:	f240 32e7 	movw	r2, #999	; 0x3e7
 800181a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181c:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <MX_TIM4_Init+0xe8>)
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001822:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <MX_TIM4_Init+0xe8>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001828:	4823      	ldr	r0, [pc, #140]	; (80018b8 <MX_TIM4_Init+0xe8>)
 800182a:	f001 fa4f 	bl	8002ccc <HAL_TIM_Base_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001834:	f7ff fe4c 	bl	80014d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800183e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001842:	4619      	mov	r1, r3
 8001844:	481c      	ldr	r0, [pc, #112]	; (80018b8 <MX_TIM4_Init+0xe8>)
 8001846:	f001 ff21 	bl	800368c <HAL_TIM_ConfigClockSource>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001850:	f7ff fe3e 	bl	80014d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001854:	4818      	ldr	r0, [pc, #96]	; (80018b8 <MX_TIM4_Init+0xe8>)
 8001856:	f001 fb09 	bl	8002e6c <HAL_TIM_PWM_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001860:	f7ff fe36 	bl	80014d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800186c:	f107 031c 	add.w	r3, r7, #28
 8001870:	4619      	mov	r1, r3
 8001872:	4811      	ldr	r0, [pc, #68]	; (80018b8 <MX_TIM4_Init+0xe8>)
 8001874:	f002 fbba 	bl	8003fec <HAL_TIMEx_MasterConfigSynchronization>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800187e:	f7ff fe27 	bl	80014d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001882:	2360      	movs	r3, #96	; 0x60
 8001884:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8001886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001894:	463b      	mov	r3, r7
 8001896:	2200      	movs	r2, #0
 8001898:	4619      	mov	r1, r3
 800189a:	4807      	ldr	r0, [pc, #28]	; (80018b8 <MX_TIM4_Init+0xe8>)
 800189c:	f001 fde2 	bl	8003464 <HAL_TIM_PWM_ConfigChannel>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80018a6:	f7ff fe13 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80018aa:	4803      	ldr	r0, [pc, #12]	; (80018b8 <MX_TIM4_Init+0xe8>)
 80018ac:	f000 f8d4 	bl	8001a58 <HAL_TIM_MspPostInit>

}
 80018b0:	bf00      	nop
 80018b2:	3738      	adds	r7, #56	; 0x38
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000188 	.word	0x20000188
 80018bc:	40000800 	.word	0x40000800

080018c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08e      	sub	sp, #56	; 0x38
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e0:	d130      	bne.n	8001944 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018e2:	4b56      	ldr	r3, [pc, #344]	; (8001a3c <HAL_TIM_Base_MspInit+0x17c>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	4a55      	ldr	r2, [pc, #340]	; (8001a3c <HAL_TIM_Base_MspInit+0x17c>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6413      	str	r3, [r2, #64]	; 0x40
 80018ee:	4b53      	ldr	r3, [pc, #332]	; (8001a3c <HAL_TIM_Base_MspInit+0x17c>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	623b      	str	r3, [r7, #32]
 80018f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	4b50      	ldr	r3, [pc, #320]	; (8001a3c <HAL_TIM_Base_MspInit+0x17c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a4f      	ldr	r2, [pc, #316]	; (8001a3c <HAL_TIM_Base_MspInit+0x17c>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b4d      	ldr	r3, [pc, #308]	; (8001a3c <HAL_TIM_Base_MspInit+0x17c>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	61fb      	str	r3, [r7, #28]
 8001910:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001912:	2308      	movs	r3, #8
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001922:	2301      	movs	r3, #1
 8001924:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192a:	4619      	mov	r1, r3
 800192c:	4844      	ldr	r0, [pc, #272]	; (8001a40 <HAL_TIM_Base_MspInit+0x180>)
 800192e:	f000 fb0b 	bl	8001f48 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	201c      	movs	r0, #28
 8001938:	f000 facf 	bl	8001eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800193c:	201c      	movs	r0, #28
 800193e:	f000 fae8 	bl	8001f12 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001942:	e077      	b.n	8001a34 <HAL_TIM_Base_MspInit+0x174>
  else if(tim_baseHandle->Instance==TIM3)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a3e      	ldr	r2, [pc, #248]	; (8001a44 <HAL_TIM_Base_MspInit+0x184>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d144      	bne.n	80019d8 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800194e:	4b3b      	ldr	r3, [pc, #236]	; (8001a3c <HAL_TIM_Base_MspInit+0x17c>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	4a3a      	ldr	r2, [pc, #232]	; (8001a3c <HAL_TIM_Base_MspInit+0x17c>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	6413      	str	r3, [r2, #64]	; 0x40
 800195a:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <HAL_TIM_Base_MspInit+0x17c>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	61bb      	str	r3, [r7, #24]
 8001964:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001966:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <HAL_TIM_Base_MspInit+0x17c>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a34      	ldr	r2, [pc, #208]	; (8001a3c <HAL_TIM_Base_MspInit+0x17c>)
 800196c:	f043 0302 	orr.w	r3, r3, #2
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <HAL_TIM_Base_MspInit+0x17c>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800197e:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <HAL_TIM_Base_MspInit+0x17c>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a2e      	ldr	r2, [pc, #184]	; (8001a3c <HAL_TIM_Base_MspInit+0x17c>)
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <HAL_TIM_Base_MspInit+0x17c>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001996:	2302      	movs	r3, #2
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019a6:	2302      	movs	r3, #2
 80019a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ae:	4619      	mov	r1, r3
 80019b0:	4825      	ldr	r0, [pc, #148]	; (8001a48 <HAL_TIM_Base_MspInit+0x188>)
 80019b2:	f000 fac9 	bl	8001f48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019c6:	2302      	movs	r3, #2
 80019c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ce:	4619      	mov	r1, r3
 80019d0:	481e      	ldr	r0, [pc, #120]	; (8001a4c <HAL_TIM_Base_MspInit+0x18c>)
 80019d2:	f000 fab9 	bl	8001f48 <HAL_GPIO_Init>
}
 80019d6:	e02d      	b.n	8001a34 <HAL_TIM_Base_MspInit+0x174>
  else if(tim_baseHandle->Instance==TIM4)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a1c      	ldr	r2, [pc, #112]	; (8001a50 <HAL_TIM_Base_MspInit+0x190>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d128      	bne.n	8001a34 <HAL_TIM_Base_MspInit+0x174>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019e2:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <HAL_TIM_Base_MspInit+0x17c>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	4a15      	ldr	r2, [pc, #84]	; (8001a3c <HAL_TIM_Base_MspInit+0x17c>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	6413      	str	r3, [r2, #64]	; 0x40
 80019ee:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <HAL_TIM_Base_MspInit+0x17c>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <HAL_TIM_Base_MspInit+0x17c>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a0f      	ldr	r2, [pc, #60]	; (8001a3c <HAL_TIM_Base_MspInit+0x17c>)
 8001a00:	f043 0308 	orr.w	r3, r3, #8
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <HAL_TIM_Base_MspInit+0x17c>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001a12:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a24:	2302      	movs	r3, #2
 8001a26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4809      	ldr	r0, [pc, #36]	; (8001a54 <HAL_TIM_Base_MspInit+0x194>)
 8001a30:	f000 fa8a 	bl	8001f48 <HAL_GPIO_Init>
}
 8001a34:	bf00      	nop
 8001a36:	3738      	adds	r7, #56	; 0x38
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40000400 	.word	0x40000400
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40020800 	.word	0x40020800
 8001a50:	40000800 	.word	0x40000800
 8001a54:	40020c00 	.word	0x40020c00

08001a58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08c      	sub	sp, #48	; 0x30
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a78:	d139      	bne.n	8001aee <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7a:	4b4f      	ldr	r3, [pc, #316]	; (8001bb8 <HAL_TIM_MspPostInit+0x160>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a4e      	ldr	r2, [pc, #312]	; (8001bb8 <HAL_TIM_MspPostInit+0x160>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b4c      	ldr	r3, [pc, #304]	; (8001bb8 <HAL_TIM_MspPostInit+0x160>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	61bb      	str	r3, [r7, #24]
 8001a90:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a92:	4b49      	ldr	r3, [pc, #292]	; (8001bb8 <HAL_TIM_MspPostInit+0x160>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a48      	ldr	r2, [pc, #288]	; (8001bb8 <HAL_TIM_MspPostInit+0x160>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b46      	ldr	r3, [pc, #280]	; (8001bb8 <HAL_TIM_MspPostInit+0x160>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aba:	2301      	movs	r3, #1
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f107 031c 	add.w	r3, r7, #28
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	483d      	ldr	r0, [pc, #244]	; (8001bbc <HAL_TIM_MspPostInit+0x164>)
 8001ac6:	f000 fa3f 	bl	8001f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001adc:	2301      	movs	r3, #1
 8001ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4836      	ldr	r0, [pc, #216]	; (8001bc0 <HAL_TIM_MspPostInit+0x168>)
 8001ae8:	f000 fa2e 	bl	8001f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001aec:	e05f      	b.n	8001bae <HAL_TIM_MspPostInit+0x156>
  else if(timHandle->Instance==TIM3)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a34      	ldr	r2, [pc, #208]	; (8001bc4 <HAL_TIM_MspPostInit+0x16c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d138      	bne.n	8001b6a <HAL_TIM_MspPostInit+0x112>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af8:	4b2f      	ldr	r3, [pc, #188]	; (8001bb8 <HAL_TIM_MspPostInit+0x160>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	4a2e      	ldr	r2, [pc, #184]	; (8001bb8 <HAL_TIM_MspPostInit+0x160>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6313      	str	r3, [r2, #48]	; 0x30
 8001b04:	4b2c      	ldr	r3, [pc, #176]	; (8001bb8 <HAL_TIM_MspPostInit+0x160>)
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b10:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <HAL_TIM_MspPostInit+0x160>)
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	4a28      	ldr	r2, [pc, #160]	; (8001bb8 <HAL_TIM_MspPostInit+0x160>)
 8001b16:	f043 0302 	orr.w	r3, r3, #2
 8001b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1c:	4b26      	ldr	r3, [pc, #152]	; (8001bb8 <HAL_TIM_MspPostInit+0x160>)
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b28:	2340      	movs	r3, #64	; 0x40
 8001b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	4619      	mov	r1, r3
 8001b42:	481e      	ldr	r0, [pc, #120]	; (8001bbc <HAL_TIM_MspPostInit+0x164>)
 8001b44:	f000 fa00 	bl	8001f48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	4619      	mov	r1, r3
 8001b62:	4817      	ldr	r0, [pc, #92]	; (8001bc0 <HAL_TIM_MspPostInit+0x168>)
 8001b64:	f000 f9f0 	bl	8001f48 <HAL_GPIO_Init>
}
 8001b68:	e021      	b.n	8001bae <HAL_TIM_MspPostInit+0x156>
  else if(timHandle->Instance==TIM4)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a16      	ldr	r2, [pc, #88]	; (8001bc8 <HAL_TIM_MspPostInit+0x170>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d11c      	bne.n	8001bae <HAL_TIM_MspPostInit+0x156>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b74:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <HAL_TIM_MspPostInit+0x160>)
 8001b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b78:	4a0f      	ldr	r2, [pc, #60]	; (8001bb8 <HAL_TIM_MspPostInit+0x160>)
 8001b7a:	f043 0308 	orr.w	r3, r3, #8
 8001b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b80:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <HAL_TIM_MspPostInit+0x160>)
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4808      	ldr	r0, [pc, #32]	; (8001bcc <HAL_TIM_MspPostInit+0x174>)
 8001baa:	f000 f9cd 	bl	8001f48 <HAL_GPIO_Init>
}
 8001bae:	bf00      	nop
 8001bb0:	3730      	adds	r7, #48	; 0x30
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	40020400 	.word	0x40020400
 8001bc4:	40000400 	.word	0x40000400
 8001bc8:	40000800 	.word	0x40000800
 8001bcc:	40020c00 	.word	0x40020c00

08001bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bd4:	480d      	ldr	r0, [pc, #52]	; (8001c0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bd6:	490e      	ldr	r1, [pc, #56]	; (8001c10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bd8:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bdc:	e002      	b.n	8001be4 <LoopCopyDataInit>

08001bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be2:	3304      	adds	r3, #4

08001be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be8:	d3f9      	bcc.n	8001bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bea:	4a0b      	ldr	r2, [pc, #44]	; (8001c18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bec:	4c0b      	ldr	r4, [pc, #44]	; (8001c1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf0:	e001      	b.n	8001bf6 <LoopFillZerobss>

08001bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf4:	3204      	adds	r2, #4

08001bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf8:	d3fb      	bcc.n	8001bf2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bfa:	f7ff fccf 	bl	800159c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bfe:	f002 faa9 	bl	8004154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c02:	f7ff f8f3 	bl	8000dec <main>
  bx  lr    
 8001c06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c08:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c10:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001c14:	080042a4 	.word	0x080042a4
  ldr r2, =_sbss
 8001c18:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001c1c:	200001d8 	.word	0x200001d8

08001c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c20:	e7fe      	b.n	8001c20 <ADC_IRQHandler>

08001c22 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c26:	2003      	movs	r0, #3
 8001c28:	f000 f94c 	bl	8001ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f000 f805 	bl	8001c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c32:	f7ff fc53 	bl	80014dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_InitTick+0x54>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_InitTick+0x58>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 f967 	bl	8001f2e <HAL_SYSTICK_Config>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00e      	b.n	8001c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b0f      	cmp	r3, #15
 8001c6e:	d80a      	bhi.n	8001c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c70:	2200      	movs	r2, #0
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f000 f92f 	bl	8001eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c7c:	4a06      	ldr	r2, [pc, #24]	; (8001c98 <HAL_InitTick+0x5c>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e000      	b.n	8001c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	200000a8 	.word	0x200000a8
 8001c94:	200000b0 	.word	0x200000b0
 8001c98:	200000ac 	.word	0x200000ac

08001c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_IncTick+0x20>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_IncTick+0x24>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <HAL_IncTick+0x24>)
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	200000b0 	.word	0x200000b0
 8001cc0:	200001d4 	.word	0x200001d4

08001cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <HAL_GetTick+0x14>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	200001d4 	.word	0x200001d4

08001cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce4:	f7ff ffee 	bl	8001cc4 <HAL_GetTick>
 8001ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf4:	d005      	beq.n	8001d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_Delay+0x44>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d02:	bf00      	nop
 8001d04:	f7ff ffde 	bl	8001cc4 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d8f7      	bhi.n	8001d04 <HAL_Delay+0x28>
  {
  }
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200000b0 	.word	0x200000b0

08001d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <__NVIC_SetPriorityGrouping+0x40>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d40:	4013      	ands	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d52:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <__NVIC_SetPriorityGrouping+0x40>)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	60d3      	str	r3, [r2, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00
 8001d68:	05fa0000 	.word	0x05fa0000

08001d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <__NVIC_GetPriorityGrouping+0x18>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	f003 0307 	and.w	r3, r3, #7
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	db0b      	blt.n	8001db2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	f003 021f 	and.w	r2, r3, #31
 8001da0:	4907      	ldr	r1, [pc, #28]	; (8001dc0 <__NVIC_EnableIRQ+0x38>)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	2001      	movs	r0, #1
 8001daa:	fa00 f202 	lsl.w	r2, r0, r2
 8001dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000e100 	.word	0xe000e100

08001dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	db0a      	blt.n	8001dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	490c      	ldr	r1, [pc, #48]	; (8001e10 <__NVIC_SetPriority+0x4c>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	0112      	lsls	r2, r2, #4
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	440b      	add	r3, r1
 8001de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dec:	e00a      	b.n	8001e04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4908      	ldr	r1, [pc, #32]	; (8001e14 <__NVIC_SetPriority+0x50>)
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	3b04      	subs	r3, #4
 8001dfc:	0112      	lsls	r2, r2, #4
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	440b      	add	r3, r1
 8001e02:	761a      	strb	r2, [r3, #24]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000e100 	.word	0xe000e100
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f1c3 0307 	rsb	r3, r3, #7
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	bf28      	it	cs
 8001e36:	2304      	movcs	r3, #4
 8001e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d902      	bls.n	8001e48 <NVIC_EncodePriority+0x30>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3b03      	subs	r3, #3
 8001e46:	e000      	b.n	8001e4a <NVIC_EncodePriority+0x32>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43da      	mvns	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e60:	f04f 31ff 	mov.w	r1, #4294967295
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43d9      	mvns	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	4313      	orrs	r3, r2
         );
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3724      	adds	r7, #36	; 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e90:	d301      	bcc.n	8001e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00f      	b.n	8001eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <SysTick_Config+0x40>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9e:	210f      	movs	r1, #15
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea4:	f7ff ff8e 	bl	8001dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <SysTick_Config+0x40>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <SysTick_Config+0x40>)
 8001eb0:	2207      	movs	r2, #7
 8001eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	e000e010 	.word	0xe000e010

08001ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ff29 	bl	8001d24 <__NVIC_SetPriorityGrouping>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eec:	f7ff ff3e 	bl	8001d6c <__NVIC_GetPriorityGrouping>
 8001ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	6978      	ldr	r0, [r7, #20]
 8001ef8:	f7ff ff8e 	bl	8001e18 <NVIC_EncodePriority>
 8001efc:	4602      	mov	r2, r0
 8001efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff5d 	bl	8001dc4 <__NVIC_SetPriority>
}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff31 	bl	8001d88 <__NVIC_EnableIRQ>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ffa2 	bl	8001e80 <SysTick_Config>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	e175      	b.n	8002254 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001f68:	2201      	movs	r2, #1
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	f040 8164 	bne.w	800224e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d005      	beq.n	8001f9e <HAL_GPIO_Init+0x56>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d130      	bne.n	8002000 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	2203      	movs	r2, #3
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	f003 0201 	and.w	r2, r3, #1
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	2b03      	cmp	r3, #3
 800200a:	d017      	beq.n	800203c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	2203      	movs	r2, #3
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d123      	bne.n	8002090 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	08da      	lsrs	r2, r3, #3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3208      	adds	r2, #8
 8002050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	220f      	movs	r2, #15
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	691a      	ldr	r2, [r3, #16]
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	08da      	lsrs	r2, r3, #3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3208      	adds	r2, #8
 800208a:	69b9      	ldr	r1, [r7, #24]
 800208c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	2203      	movs	r2, #3
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0203 	and.w	r2, r3, #3
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 80be 	beq.w	800224e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d2:	4b66      	ldr	r3, [pc, #408]	; (800226c <HAL_GPIO_Init+0x324>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	4a65      	ldr	r2, [pc, #404]	; (800226c <HAL_GPIO_Init+0x324>)
 80020d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020dc:	6453      	str	r3, [r2, #68]	; 0x44
 80020de:	4b63      	ldr	r3, [pc, #396]	; (800226c <HAL_GPIO_Init+0x324>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80020ea:	4a61      	ldr	r2, [pc, #388]	; (8002270 <HAL_GPIO_Init+0x328>)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	3302      	adds	r3, #2
 80020f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	220f      	movs	r2, #15
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a58      	ldr	r2, [pc, #352]	; (8002274 <HAL_GPIO_Init+0x32c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d037      	beq.n	8002186 <HAL_GPIO_Init+0x23e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a57      	ldr	r2, [pc, #348]	; (8002278 <HAL_GPIO_Init+0x330>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d031      	beq.n	8002182 <HAL_GPIO_Init+0x23a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a56      	ldr	r2, [pc, #344]	; (800227c <HAL_GPIO_Init+0x334>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d02b      	beq.n	800217e <HAL_GPIO_Init+0x236>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a55      	ldr	r2, [pc, #340]	; (8002280 <HAL_GPIO_Init+0x338>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d025      	beq.n	800217a <HAL_GPIO_Init+0x232>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a54      	ldr	r2, [pc, #336]	; (8002284 <HAL_GPIO_Init+0x33c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d01f      	beq.n	8002176 <HAL_GPIO_Init+0x22e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a53      	ldr	r2, [pc, #332]	; (8002288 <HAL_GPIO_Init+0x340>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d019      	beq.n	8002172 <HAL_GPIO_Init+0x22a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a52      	ldr	r2, [pc, #328]	; (800228c <HAL_GPIO_Init+0x344>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <HAL_GPIO_Init+0x226>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a51      	ldr	r2, [pc, #324]	; (8002290 <HAL_GPIO_Init+0x348>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00d      	beq.n	800216a <HAL_GPIO_Init+0x222>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a50      	ldr	r2, [pc, #320]	; (8002294 <HAL_GPIO_Init+0x34c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d007      	beq.n	8002166 <HAL_GPIO_Init+0x21e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a4f      	ldr	r2, [pc, #316]	; (8002298 <HAL_GPIO_Init+0x350>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d101      	bne.n	8002162 <HAL_GPIO_Init+0x21a>
 800215e:	2309      	movs	r3, #9
 8002160:	e012      	b.n	8002188 <HAL_GPIO_Init+0x240>
 8002162:	230a      	movs	r3, #10
 8002164:	e010      	b.n	8002188 <HAL_GPIO_Init+0x240>
 8002166:	2308      	movs	r3, #8
 8002168:	e00e      	b.n	8002188 <HAL_GPIO_Init+0x240>
 800216a:	2307      	movs	r3, #7
 800216c:	e00c      	b.n	8002188 <HAL_GPIO_Init+0x240>
 800216e:	2306      	movs	r3, #6
 8002170:	e00a      	b.n	8002188 <HAL_GPIO_Init+0x240>
 8002172:	2305      	movs	r3, #5
 8002174:	e008      	b.n	8002188 <HAL_GPIO_Init+0x240>
 8002176:	2304      	movs	r3, #4
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x240>
 800217a:	2303      	movs	r3, #3
 800217c:	e004      	b.n	8002188 <HAL_GPIO_Init+0x240>
 800217e:	2302      	movs	r3, #2
 8002180:	e002      	b.n	8002188 <HAL_GPIO_Init+0x240>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_GPIO_Init+0x240>
 8002186:	2300      	movs	r3, #0
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	f002 0203 	and.w	r2, r2, #3
 800218e:	0092      	lsls	r2, r2, #2
 8002190:	4093      	lsls	r3, r2
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002198:	4935      	ldr	r1, [pc, #212]	; (8002270 <HAL_GPIO_Init+0x328>)
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	3302      	adds	r3, #2
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021a6:	4b3d      	ldr	r3, [pc, #244]	; (800229c <HAL_GPIO_Init+0x354>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ca:	4a34      	ldr	r2, [pc, #208]	; (800229c <HAL_GPIO_Init+0x354>)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021d0:	4b32      	ldr	r3, [pc, #200]	; (800229c <HAL_GPIO_Init+0x354>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021f4:	4a29      	ldr	r2, [pc, #164]	; (800229c <HAL_GPIO_Init+0x354>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021fa:	4b28      	ldr	r3, [pc, #160]	; (800229c <HAL_GPIO_Init+0x354>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800221e:	4a1f      	ldr	r2, [pc, #124]	; (800229c <HAL_GPIO_Init+0x354>)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002224:	4b1d      	ldr	r3, [pc, #116]	; (800229c <HAL_GPIO_Init+0x354>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002248:	4a14      	ldr	r2, [pc, #80]	; (800229c <HAL_GPIO_Init+0x354>)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3301      	adds	r3, #1
 8002252:	61fb      	str	r3, [r7, #28]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	2b0f      	cmp	r3, #15
 8002258:	f67f ae86 	bls.w	8001f68 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	3724      	adds	r7, #36	; 0x24
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800
 8002270:	40013800 	.word	0x40013800
 8002274:	40020000 	.word	0x40020000
 8002278:	40020400 	.word	0x40020400
 800227c:	40020800 	.word	0x40020800
 8002280:	40020c00 	.word	0x40020c00
 8002284:	40021000 	.word	0x40021000
 8002288:	40021400 	.word	0x40021400
 800228c:	40021800 	.word	0x40021800
 8002290:	40021c00 	.word	0x40021c00
 8002294:	40022000 	.word	0x40022000
 8002298:	40022400 	.word	0x40022400
 800229c:	40013c00 	.word	0x40013c00

080022a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	887b      	ldrh	r3, [r7, #2]
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
 80022bc:	e001      	b.n	80022c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	807b      	strh	r3, [r7, #2]
 80022dc:	4613      	mov	r3, r2
 80022de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022e0:	787b      	ldrb	r3, [r7, #1]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022e6:	887a      	ldrh	r2, [r7, #2]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80022ec:	e003      	b.n	80022f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80022ee:	887b      	ldrh	r3, [r7, #2]
 80022f0:	041a      	lsls	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	619a      	str	r2, [r3, #24]
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002302:	b480      	push	{r7}
 8002304:	b085      	sub	sp, #20
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002314:	887a      	ldrh	r2, [r7, #2]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4013      	ands	r3, r2
 800231a:	041a      	lsls	r2, r3, #16
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	43d9      	mvns	r1, r3
 8002320:	887b      	ldrh	r3, [r7, #2]
 8002322:	400b      	ands	r3, r1
 8002324:	431a      	orrs	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002344:	695a      	ldr	r2, [r3, #20]
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	4013      	ands	r3, r2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d006      	beq.n	800235c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800234e:	4a05      	ldr	r2, [pc, #20]	; (8002364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002350:	88fb      	ldrh	r3, [r7, #6]
 8002352:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002354:	88fb      	ldrh	r3, [r7, #6]
 8002356:	4618      	mov	r0, r3
 8002358:	f000 f806 	bl	8002368 <HAL_GPIO_EXTI_Callback>
  }
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40013c00 	.word	0x40013c00

08002368 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a04      	ldr	r2, [pc, #16]	; (800239c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800238a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238e:	6013      	str	r3, [r2, #0]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40007000 	.word	0x40007000

080023a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80023a8:	2300      	movs	r3, #0
 80023aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e291      	b.n	80028da <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 8087 	beq.w	80024d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023c4:	4b96      	ldr	r3, [pc, #600]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 030c 	and.w	r3, r3, #12
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d00c      	beq.n	80023ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023d0:	4b93      	ldr	r3, [pc, #588]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d112      	bne.n	8002402 <HAL_RCC_OscConfig+0x62>
 80023dc:	4b90      	ldr	r3, [pc, #576]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023e8:	d10b      	bne.n	8002402 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ea:	4b8d      	ldr	r3, [pc, #564]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d06c      	beq.n	80024d0 <HAL_RCC_OscConfig+0x130>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d168      	bne.n	80024d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e26b      	b.n	80028da <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800240a:	d106      	bne.n	800241a <HAL_RCC_OscConfig+0x7a>
 800240c:	4b84      	ldr	r3, [pc, #528]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a83      	ldr	r2, [pc, #524]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	e02e      	b.n	8002478 <HAL_RCC_OscConfig+0xd8>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0x9c>
 8002422:	4b7f      	ldr	r3, [pc, #508]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a7e      	ldr	r2, [pc, #504]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b7c      	ldr	r3, [pc, #496]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a7b      	ldr	r2, [pc, #492]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	e01d      	b.n	8002478 <HAL_RCC_OscConfig+0xd8>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0xc0>
 8002446:	4b76      	ldr	r3, [pc, #472]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a75      	ldr	r2, [pc, #468]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 800244c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	4b73      	ldr	r3, [pc, #460]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a72      	ldr	r2, [pc, #456]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e00b      	b.n	8002478 <HAL_RCC_OscConfig+0xd8>
 8002460:	4b6f      	ldr	r3, [pc, #444]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a6e      	ldr	r2, [pc, #440]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	4b6c      	ldr	r3, [pc, #432]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a6b      	ldr	r2, [pc, #428]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d013      	beq.n	80024a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7ff fc20 	bl	8001cc4 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002488:	f7ff fc1c 	bl	8001cc4 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b64      	cmp	r3, #100	; 0x64
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e21f      	b.n	80028da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249a:	4b61      	ldr	r3, [pc, #388]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0xe8>
 80024a6:	e014      	b.n	80024d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7ff fc0c 	bl	8001cc4 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b0:	f7ff fc08 	bl	8001cc4 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	; 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e20b      	b.n	80028da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c2:	4b57      	ldr	r3, [pc, #348]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x110>
 80024ce:	e000      	b.n	80024d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d069      	beq.n	80025b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024de:	4b50      	ldr	r3, [pc, #320]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 030c 	and.w	r3, r3, #12
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00b      	beq.n	8002502 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ea:	4b4d      	ldr	r3, [pc, #308]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d11c      	bne.n	8002530 <HAL_RCC_OscConfig+0x190>
 80024f6:	4b4a      	ldr	r3, [pc, #296]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d116      	bne.n	8002530 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002502:	4b47      	ldr	r3, [pc, #284]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_RCC_OscConfig+0x17a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d001      	beq.n	800251a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e1df      	b.n	80028da <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251a:	4b41      	ldr	r3, [pc, #260]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	493d      	ldr	r1, [pc, #244]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252e:	e040      	b.n	80025b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d023      	beq.n	8002580 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002538:	4b39      	ldr	r3, [pc, #228]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a38      	ldr	r2, [pc, #224]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7ff fbbe 	bl	8001cc4 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254c:	f7ff fbba 	bl	8001cc4 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e1bd      	b.n	80028da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255e:	4b30      	ldr	r3, [pc, #192]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256a:	4b2d      	ldr	r3, [pc, #180]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4929      	ldr	r1, [pc, #164]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]
 800257e:	e018      	b.n	80025b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002580:	4b27      	ldr	r3, [pc, #156]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a26      	ldr	r2, [pc, #152]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002586:	f023 0301 	bic.w	r3, r3, #1
 800258a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7ff fb9a 	bl	8001cc4 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002594:	f7ff fb96 	bl	8001cc4 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e199      	b.n	80028da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a6:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d038      	beq.n	8002630 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d019      	beq.n	80025fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c6:	4b16      	ldr	r3, [pc, #88]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80025c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ca:	4a15      	ldr	r2, [pc, #84]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d2:	f7ff fb77 	bl	8001cc4 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025da:	f7ff fb73 	bl	8001cc4 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e176      	b.n	80028da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80025ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x23a>
 80025f8:	e01a      	b.n	8002630 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 80025fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025fe:	4a08      	ldr	r2, [pc, #32]	; (8002620 <HAL_RCC_OscConfig+0x280>)
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002606:	f7ff fb5d 	bl	8001cc4 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260c:	e00a      	b.n	8002624 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800260e:	f7ff fb59 	bl	8001cc4 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d903      	bls.n	8002624 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e15c      	b.n	80028da <HAL_RCC_OscConfig+0x53a>
 8002620:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002624:	4b91      	ldr	r3, [pc, #580]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 8002626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1ee      	bne.n	800260e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80a4 	beq.w	8002786 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800263e:	4b8b      	ldr	r3, [pc, #556]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10d      	bne.n	8002666 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800264a:	4b88      	ldr	r3, [pc, #544]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	4a87      	ldr	r2, [pc, #540]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002654:	6413      	str	r3, [r2, #64]	; 0x40
 8002656:	4b85      	ldr	r3, [pc, #532]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002662:	2301      	movs	r3, #1
 8002664:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002666:	4b82      	ldr	r3, [pc, #520]	; (8002870 <HAL_RCC_OscConfig+0x4d0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d118      	bne.n	80026a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002672:	4b7f      	ldr	r3, [pc, #508]	; (8002870 <HAL_RCC_OscConfig+0x4d0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a7e      	ldr	r2, [pc, #504]	; (8002870 <HAL_RCC_OscConfig+0x4d0>)
 8002678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267e:	f7ff fb21 	bl	8001cc4 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002686:	f7ff fb1d 	bl	8001cc4 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b64      	cmp	r3, #100	; 0x64
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e120      	b.n	80028da <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002698:	4b75      	ldr	r3, [pc, #468]	; (8002870 <HAL_RCC_OscConfig+0x4d0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_OscConfig+0x31a>
 80026ac:	4b6f      	ldr	r3, [pc, #444]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	4a6e      	ldr	r2, [pc, #440]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6713      	str	r3, [r2, #112]	; 0x70
 80026b8:	e02d      	b.n	8002716 <HAL_RCC_OscConfig+0x376>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10c      	bne.n	80026dc <HAL_RCC_OscConfig+0x33c>
 80026c2:	4b6a      	ldr	r3, [pc, #424]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 80026c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c6:	4a69      	ldr	r2, [pc, #420]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 80026c8:	f023 0301 	bic.w	r3, r3, #1
 80026cc:	6713      	str	r3, [r2, #112]	; 0x70
 80026ce:	4b67      	ldr	r3, [pc, #412]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d2:	4a66      	ldr	r2, [pc, #408]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 80026d4:	f023 0304 	bic.w	r3, r3, #4
 80026d8:	6713      	str	r3, [r2, #112]	; 0x70
 80026da:	e01c      	b.n	8002716 <HAL_RCC_OscConfig+0x376>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b05      	cmp	r3, #5
 80026e2:	d10c      	bne.n	80026fe <HAL_RCC_OscConfig+0x35e>
 80026e4:	4b61      	ldr	r3, [pc, #388]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	4a60      	ldr	r2, [pc, #384]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 80026ea:	f043 0304 	orr.w	r3, r3, #4
 80026ee:	6713      	str	r3, [r2, #112]	; 0x70
 80026f0:	4b5e      	ldr	r3, [pc, #376]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f4:	4a5d      	ldr	r2, [pc, #372]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6713      	str	r3, [r2, #112]	; 0x70
 80026fc:	e00b      	b.n	8002716 <HAL_RCC_OscConfig+0x376>
 80026fe:	4b5b      	ldr	r3, [pc, #364]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002702:	4a5a      	ldr	r2, [pc, #360]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	6713      	str	r3, [r2, #112]	; 0x70
 800270a:	4b58      	ldr	r3, [pc, #352]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270e:	4a57      	ldr	r2, [pc, #348]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 8002710:	f023 0304 	bic.w	r3, r3, #4
 8002714:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d015      	beq.n	800274a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271e:	f7ff fad1 	bl	8001cc4 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002724:	e00a      	b.n	800273c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002726:	f7ff facd 	bl	8001cc4 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	f241 3288 	movw	r2, #5000	; 0x1388
 8002734:	4293      	cmp	r3, r2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e0ce      	b.n	80028da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273c:	4b4b      	ldr	r3, [pc, #300]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0ee      	beq.n	8002726 <HAL_RCC_OscConfig+0x386>
 8002748:	e014      	b.n	8002774 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274a:	f7ff fabb 	bl	8001cc4 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002750:	e00a      	b.n	8002768 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002752:	f7ff fab7 	bl	8001cc4 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e0b8      	b.n	80028da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002768:	4b40      	ldr	r3, [pc, #256]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1ee      	bne.n	8002752 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002774:	7dfb      	ldrb	r3, [r7, #23]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d105      	bne.n	8002786 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277a:	4b3c      	ldr	r3, [pc, #240]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a3b      	ldr	r2, [pc, #236]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 8002780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80a4 	beq.w	80028d8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002790:	4b36      	ldr	r3, [pc, #216]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b08      	cmp	r3, #8
 800279a:	d06b      	beq.n	8002874 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d149      	bne.n	8002838 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a4:	4b31      	ldr	r3, [pc, #196]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a30      	ldr	r2, [pc, #192]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 80027aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7ff fa88 	bl	8001cc4 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b8:	f7ff fa84 	bl	8001cc4 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e087      	b.n	80028da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ca:	4b28      	ldr	r3, [pc, #160]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69da      	ldr	r2, [r3, #28]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	019b      	lsls	r3, r3, #6
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	085b      	lsrs	r3, r3, #1
 80027ee:	3b01      	subs	r3, #1
 80027f0:	041b      	lsls	r3, r3, #16
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	061b      	lsls	r3, r3, #24
 80027fa:	4313      	orrs	r3, r2
 80027fc:	4a1b      	ldr	r2, [pc, #108]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 80027fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002802:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002804:	4b19      	ldr	r3, [pc, #100]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a18      	ldr	r2, [pc, #96]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 800280a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800280e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002810:	f7ff fa58 	bl	8001cc4 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002818:	f7ff fa54 	bl	8001cc4 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e057      	b.n	80028da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x478>
 8002836:	e04f      	b.n	80028d8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0b      	ldr	r2, [pc, #44]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 800283e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7ff fa3e 	bl	8001cc4 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284c:	f7ff fa3a 	bl	8001cc4 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e03d      	b.n	80028da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285e:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_RCC_OscConfig+0x4cc>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x4ac>
 800286a:	e035      	b.n	80028d8 <HAL_RCC_OscConfig+0x538>
 800286c:	40023800 	.word	0x40023800
 8002870:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002874:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <HAL_RCC_OscConfig+0x544>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d028      	beq.n	80028d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d121      	bne.n	80028d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d11a      	bne.n	80028d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028a4:	4013      	ands	r3, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d111      	bne.n	80028d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	3b01      	subs	r3, #1
 80028be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d107      	bne.n	80028d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800

080028e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0d0      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002900:	4b6a      	ldr	r3, [pc, #424]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 030f 	and.w	r3, r3, #15
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d910      	bls.n	8002930 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290e:	4b67      	ldr	r3, [pc, #412]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 020f 	bic.w	r2, r3, #15
 8002916:	4965      	ldr	r1, [pc, #404]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291e:	4b63      	ldr	r3, [pc, #396]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d001      	beq.n	8002930 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0b8      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d020      	beq.n	800297e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002948:	4b59      	ldr	r3, [pc, #356]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4a58      	ldr	r2, [pc, #352]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800294e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002952:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002960:	4b53      	ldr	r3, [pc, #332]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	4a52      	ldr	r2, [pc, #328]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002966:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800296a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800296c:	4b50      	ldr	r3, [pc, #320]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	494d      	ldr	r1, [pc, #308]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800297a:	4313      	orrs	r3, r2
 800297c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d040      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002992:	4b47      	ldr	r3, [pc, #284]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d115      	bne.n	80029ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e07f      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029aa:	4b41      	ldr	r3, [pc, #260]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e073      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ba:	4b3d      	ldr	r3, [pc, #244]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e06b      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ca:	4b39      	ldr	r3, [pc, #228]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f023 0203 	bic.w	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4936      	ldr	r1, [pc, #216]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029dc:	f7ff f972 	bl	8001cc4 <HAL_GetTick>
 80029e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	e00a      	b.n	80029fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e4:	f7ff f96e 	bl	8001cc4 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e053      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	4b2d      	ldr	r3, [pc, #180]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 020c 	and.w	r2, r3, #12
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d1eb      	bne.n	80029e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a0c:	4b27      	ldr	r3, [pc, #156]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d210      	bcs.n	8002a3c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1a:	4b24      	ldr	r3, [pc, #144]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 020f 	bic.w	r2, r3, #15
 8002a22:	4922      	ldr	r1, [pc, #136]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2a:	4b20      	ldr	r3, [pc, #128]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e032      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a48:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4916      	ldr	r1, [pc, #88]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a66:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	490e      	ldr	r1, [pc, #56]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a7a:	f000 f821 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	091b      	lsrs	r3, r3, #4
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	490a      	ldr	r1, [pc, #40]	; (8002ab4 <HAL_RCC_ClockConfig+0x1cc>)
 8002a8c:	5ccb      	ldrb	r3, [r1, r3]
 8002a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a92:	4a09      	ldr	r2, [pc, #36]	; (8002ab8 <HAL_RCC_ClockConfig+0x1d0>)
 8002a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a96:	4b09      	ldr	r3, [pc, #36]	; (8002abc <HAL_RCC_ClockConfig+0x1d4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff f8ce 	bl	8001c3c <HAL_InitTick>

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40023c00 	.word	0x40023c00
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	08004284 	.word	0x08004284
 8002ab8:	200000a8 	.word	0x200000a8
 8002abc:	200000ac 	.word	0x200000ac

08002ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ac4:	b094      	sub	sp, #80	; 0x50
 8002ac6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	647b      	str	r3, [r7, #68]	; 0x44
 8002acc:	2300      	movs	r3, #0
 8002ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ad8:	4b79      	ldr	r3, [pc, #484]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 030c 	and.w	r3, r3, #12
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d00d      	beq.n	8002b00 <HAL_RCC_GetSysClockFreq+0x40>
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	f200 80e1 	bhi.w	8002cac <HAL_RCC_GetSysClockFreq+0x1ec>
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0x34>
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d003      	beq.n	8002afa <HAL_RCC_GetSysClockFreq+0x3a>
 8002af2:	e0db      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002af4:	4b73      	ldr	r3, [pc, #460]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002af6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002af8:	e0db      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002afa:	4b73      	ldr	r3, [pc, #460]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002afc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002afe:	e0d8      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b00:	4b6f      	ldr	r3, [pc, #444]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b08:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b0a:	4b6d      	ldr	r3, [pc, #436]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d063      	beq.n	8002bde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b16:	4b6a      	ldr	r3, [pc, #424]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	099b      	lsrs	r3, r3, #6
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b28:	633b      	str	r3, [r7, #48]	; 0x30
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b32:	4622      	mov	r2, r4
 8002b34:	462b      	mov	r3, r5
 8002b36:	f04f 0000 	mov.w	r0, #0
 8002b3a:	f04f 0100 	mov.w	r1, #0
 8002b3e:	0159      	lsls	r1, r3, #5
 8002b40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b44:	0150      	lsls	r0, r2, #5
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	1a51      	subs	r1, r2, r1
 8002b4e:	6139      	str	r1, [r7, #16]
 8002b50:	4629      	mov	r1, r5
 8002b52:	eb63 0301 	sbc.w	r3, r3, r1
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b64:	4659      	mov	r1, fp
 8002b66:	018b      	lsls	r3, r1, #6
 8002b68:	4651      	mov	r1, sl
 8002b6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b6e:	4651      	mov	r1, sl
 8002b70:	018a      	lsls	r2, r1, #6
 8002b72:	4651      	mov	r1, sl
 8002b74:	ebb2 0801 	subs.w	r8, r2, r1
 8002b78:	4659      	mov	r1, fp
 8002b7a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b92:	4690      	mov	r8, r2
 8002b94:	4699      	mov	r9, r3
 8002b96:	4623      	mov	r3, r4
 8002b98:	eb18 0303 	adds.w	r3, r8, r3
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	462b      	mov	r3, r5
 8002ba0:	eb49 0303 	adc.w	r3, r9, r3
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	024b      	lsls	r3, r1, #9
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	024a      	lsls	r2, r1, #9
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bd0:	f7fd fb1a 	bl	8000208 <__aeabi_uldivmod>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4613      	mov	r3, r2
 8002bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bdc:	e058      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bde:	4b38      	ldr	r3, [pc, #224]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	099b      	lsrs	r3, r3, #6
 8002be4:	2200      	movs	r2, #0
 8002be6:	4618      	mov	r0, r3
 8002be8:	4611      	mov	r1, r2
 8002bea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bee:	623b      	str	r3, [r7, #32]
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bf8:	4642      	mov	r2, r8
 8002bfa:	464b      	mov	r3, r9
 8002bfc:	f04f 0000 	mov.w	r0, #0
 8002c00:	f04f 0100 	mov.w	r1, #0
 8002c04:	0159      	lsls	r1, r3, #5
 8002c06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c0a:	0150      	lsls	r0, r2, #5
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4641      	mov	r1, r8
 8002c12:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c16:	4649      	mov	r1, r9
 8002c18:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c30:	ebb2 040a 	subs.w	r4, r2, sl
 8002c34:	eb63 050b 	sbc.w	r5, r3, fp
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	00eb      	lsls	r3, r5, #3
 8002c42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c46:	00e2      	lsls	r2, r4, #3
 8002c48:	4614      	mov	r4, r2
 8002c4a:	461d      	mov	r5, r3
 8002c4c:	4643      	mov	r3, r8
 8002c4e:	18e3      	adds	r3, r4, r3
 8002c50:	603b      	str	r3, [r7, #0]
 8002c52:	464b      	mov	r3, r9
 8002c54:	eb45 0303 	adc.w	r3, r5, r3
 8002c58:	607b      	str	r3, [r7, #4]
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c66:	4629      	mov	r1, r5
 8002c68:	028b      	lsls	r3, r1, #10
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c70:	4621      	mov	r1, r4
 8002c72:	028a      	lsls	r2, r1, #10
 8002c74:	4610      	mov	r0, r2
 8002c76:	4619      	mov	r1, r3
 8002c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	61fa      	str	r2, [r7, #28]
 8002c80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c84:	f7fd fac0 	bl	8000208 <__aeabi_uldivmod>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	0c1b      	lsrs	r3, r3, #16
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002ca0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002caa:	e002      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cac:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3750      	adds	r7, #80	; 0x50
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	00f42400 	.word	0x00f42400
 8002cc8:	007a1200 	.word	0x007a1200

08002ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e049      	b.n	8002d72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe fde4 	bl	80018c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3304      	adds	r3, #4
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	f000 fdb0 	bl	8003870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d001      	beq.n	8002d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e054      	b.n	8002e3e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a26      	ldr	r2, [pc, #152]	; (8002e4c <HAL_TIM_Base_Start_IT+0xd0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d022      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x80>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbe:	d01d      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x80>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a22      	ldr	r2, [pc, #136]	; (8002e50 <HAL_TIM_Base_Start_IT+0xd4>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d018      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x80>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a21      	ldr	r2, [pc, #132]	; (8002e54 <HAL_TIM_Base_Start_IT+0xd8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d013      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x80>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1f      	ldr	r2, [pc, #124]	; (8002e58 <HAL_TIM_Base_Start_IT+0xdc>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00e      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x80>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1e      	ldr	r2, [pc, #120]	; (8002e5c <HAL_TIM_Base_Start_IT+0xe0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d009      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x80>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a1c      	ldr	r2, [pc, #112]	; (8002e60 <HAL_TIM_Base_Start_IT+0xe4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x80>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a1b      	ldr	r2, [pc, #108]	; (8002e64 <HAL_TIM_Base_Start_IT+0xe8>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d115      	bne.n	8002e28 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <HAL_TIM_Base_Start_IT+0xec>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b06      	cmp	r3, #6
 8002e0c:	d015      	beq.n	8002e3a <HAL_TIM_Base_Start_IT+0xbe>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e14:	d011      	beq.n	8002e3a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0201 	orr.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e26:	e008      	b.n	8002e3a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	e000      	b.n	8002e3c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40010000 	.word	0x40010000
 8002e50:	40000400 	.word	0x40000400
 8002e54:	40000800 	.word	0x40000800
 8002e58:	40000c00 	.word	0x40000c00
 8002e5c:	40010400 	.word	0x40010400
 8002e60:	40014000 	.word	0x40014000
 8002e64:	40001800 	.word	0x40001800
 8002e68:	00010007 	.word	0x00010007

08002e6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e049      	b.n	8002f12 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f841 	bl	8002f1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4610      	mov	r0, r2
 8002eac:	f000 fce0 	bl	8003870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
	...

08002f30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d109      	bne.n	8002f54 <HAL_TIM_PWM_Start+0x24>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	bf14      	ite	ne
 8002f4c:	2301      	movne	r3, #1
 8002f4e:	2300      	moveq	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	e03c      	b.n	8002fce <HAL_TIM_PWM_Start+0x9e>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d109      	bne.n	8002f6e <HAL_TIM_PWM_Start+0x3e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	bf14      	ite	ne
 8002f66:	2301      	movne	r3, #1
 8002f68:	2300      	moveq	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	e02f      	b.n	8002fce <HAL_TIM_PWM_Start+0x9e>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d109      	bne.n	8002f88 <HAL_TIM_PWM_Start+0x58>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	bf14      	ite	ne
 8002f80:	2301      	movne	r3, #1
 8002f82:	2300      	moveq	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	e022      	b.n	8002fce <HAL_TIM_PWM_Start+0x9e>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2b0c      	cmp	r3, #12
 8002f8c:	d109      	bne.n	8002fa2 <HAL_TIM_PWM_Start+0x72>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	bf14      	ite	ne
 8002f9a:	2301      	movne	r3, #1
 8002f9c:	2300      	moveq	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	e015      	b.n	8002fce <HAL_TIM_PWM_Start+0x9e>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b10      	cmp	r3, #16
 8002fa6:	d109      	bne.n	8002fbc <HAL_TIM_PWM_Start+0x8c>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	bf14      	ite	ne
 8002fb4:	2301      	movne	r3, #1
 8002fb6:	2300      	moveq	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	e008      	b.n	8002fce <HAL_TIM_PWM_Start+0x9e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	bf14      	ite	ne
 8002fc8:	2301      	movne	r3, #1
 8002fca:	2300      	moveq	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e092      	b.n	80030fc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d104      	bne.n	8002fe6 <HAL_TIM_PWM_Start+0xb6>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe4:	e023      	b.n	800302e <HAL_TIM_PWM_Start+0xfe>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d104      	bne.n	8002ff6 <HAL_TIM_PWM_Start+0xc6>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ff4:	e01b      	b.n	800302e <HAL_TIM_PWM_Start+0xfe>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d104      	bne.n	8003006 <HAL_TIM_PWM_Start+0xd6>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003004:	e013      	b.n	800302e <HAL_TIM_PWM_Start+0xfe>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b0c      	cmp	r3, #12
 800300a:	d104      	bne.n	8003016 <HAL_TIM_PWM_Start+0xe6>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003014:	e00b      	b.n	800302e <HAL_TIM_PWM_Start+0xfe>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b10      	cmp	r3, #16
 800301a:	d104      	bne.n	8003026 <HAL_TIM_PWM_Start+0xf6>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003024:	e003      	b.n	800302e <HAL_TIM_PWM_Start+0xfe>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2202      	movs	r2, #2
 800302a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2201      	movs	r2, #1
 8003034:	6839      	ldr	r1, [r7, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f000 ffb2 	bl	8003fa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a30      	ldr	r2, [pc, #192]	; (8003104 <HAL_TIM_PWM_Start+0x1d4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d004      	beq.n	8003050 <HAL_TIM_PWM_Start+0x120>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a2f      	ldr	r2, [pc, #188]	; (8003108 <HAL_TIM_PWM_Start+0x1d8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d101      	bne.n	8003054 <HAL_TIM_PWM_Start+0x124>
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <HAL_TIM_PWM_Start+0x126>
 8003054:	2300      	movs	r3, #0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003068:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a25      	ldr	r2, [pc, #148]	; (8003104 <HAL_TIM_PWM_Start+0x1d4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d022      	beq.n	80030ba <HAL_TIM_PWM_Start+0x18a>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307c:	d01d      	beq.n	80030ba <HAL_TIM_PWM_Start+0x18a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a22      	ldr	r2, [pc, #136]	; (800310c <HAL_TIM_PWM_Start+0x1dc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d018      	beq.n	80030ba <HAL_TIM_PWM_Start+0x18a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a20      	ldr	r2, [pc, #128]	; (8003110 <HAL_TIM_PWM_Start+0x1e0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d013      	beq.n	80030ba <HAL_TIM_PWM_Start+0x18a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1f      	ldr	r2, [pc, #124]	; (8003114 <HAL_TIM_PWM_Start+0x1e4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d00e      	beq.n	80030ba <HAL_TIM_PWM_Start+0x18a>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a19      	ldr	r2, [pc, #100]	; (8003108 <HAL_TIM_PWM_Start+0x1d8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d009      	beq.n	80030ba <HAL_TIM_PWM_Start+0x18a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1b      	ldr	r2, [pc, #108]	; (8003118 <HAL_TIM_PWM_Start+0x1e8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d004      	beq.n	80030ba <HAL_TIM_PWM_Start+0x18a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a19      	ldr	r2, [pc, #100]	; (800311c <HAL_TIM_PWM_Start+0x1ec>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d115      	bne.n	80030e6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	4b17      	ldr	r3, [pc, #92]	; (8003120 <HAL_TIM_PWM_Start+0x1f0>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2b06      	cmp	r3, #6
 80030ca:	d015      	beq.n	80030f8 <HAL_TIM_PWM_Start+0x1c8>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d2:	d011      	beq.n	80030f8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e4:	e008      	b.n	80030f8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0201 	orr.w	r2, r2, #1
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	e000      	b.n	80030fa <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40010000 	.word	0x40010000
 8003108:	40010400 	.word	0x40010400
 800310c:	40000400 	.word	0x40000400
 8003110:	40000800 	.word	0x40000800
 8003114:	40000c00 	.word	0x40000c00
 8003118:	40014000 	.word	0x40014000
 800311c:	40001800 	.word	0x40001800
 8003120:	00010007 	.word	0x00010007

08003124 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2200      	movs	r2, #0
 8003134:	6839      	ldr	r1, [r7, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f000 ff32 	bl	8003fa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a36      	ldr	r2, [pc, #216]	; (800321c <HAL_TIM_PWM_Stop+0xf8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d004      	beq.n	8003150 <HAL_TIM_PWM_Stop+0x2c>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a35      	ldr	r2, [pc, #212]	; (8003220 <HAL_TIM_PWM_Stop+0xfc>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d101      	bne.n	8003154 <HAL_TIM_PWM_Stop+0x30>
 8003150:	2301      	movs	r3, #1
 8003152:	e000      	b.n	8003156 <HAL_TIM_PWM_Stop+0x32>
 8003154:	2300      	movs	r3, #0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d017      	beq.n	800318a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6a1a      	ldr	r2, [r3, #32]
 8003160:	f241 1311 	movw	r3, #4369	; 0x1111
 8003164:	4013      	ands	r3, r2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10f      	bne.n	800318a <HAL_TIM_PWM_Stop+0x66>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6a1a      	ldr	r2, [r3, #32]
 8003170:	f240 4344 	movw	r3, #1092	; 0x444
 8003174:	4013      	ands	r3, r2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d107      	bne.n	800318a <HAL_TIM_PWM_Stop+0x66>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003188:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6a1a      	ldr	r2, [r3, #32]
 8003190:	f241 1311 	movw	r3, #4369	; 0x1111
 8003194:	4013      	ands	r3, r2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10f      	bne.n	80031ba <HAL_TIM_PWM_Stop+0x96>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6a1a      	ldr	r2, [r3, #32]
 80031a0:	f240 4344 	movw	r3, #1092	; 0x444
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d107      	bne.n	80031ba <HAL_TIM_PWM_Stop+0x96>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0201 	bic.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d104      	bne.n	80031ca <HAL_TIM_PWM_Stop+0xa6>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031c8:	e023      	b.n	8003212 <HAL_TIM_PWM_Stop+0xee>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d104      	bne.n	80031da <HAL_TIM_PWM_Stop+0xb6>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031d8:	e01b      	b.n	8003212 <HAL_TIM_PWM_Stop+0xee>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d104      	bne.n	80031ea <HAL_TIM_PWM_Stop+0xc6>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031e8:	e013      	b.n	8003212 <HAL_TIM_PWM_Stop+0xee>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b0c      	cmp	r3, #12
 80031ee:	d104      	bne.n	80031fa <HAL_TIM_PWM_Stop+0xd6>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031f8:	e00b      	b.n	8003212 <HAL_TIM_PWM_Stop+0xee>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b10      	cmp	r3, #16
 80031fe:	d104      	bne.n	800320a <HAL_TIM_PWM_Stop+0xe6>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003208:	e003      	b.n	8003212 <HAL_TIM_PWM_Stop+0xee>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40010000 	.word	0x40010000
 8003220:	40010400 	.word	0x40010400

08003224 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b02      	cmp	r3, #2
 8003238:	d122      	bne.n	8003280 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b02      	cmp	r3, #2
 8003246:	d11b      	bne.n	8003280 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0202 	mvn.w	r2, #2
 8003250:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 fae4 	bl	8003834 <HAL_TIM_IC_CaptureCallback>
 800326c:	e005      	b.n	800327a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fad6 	bl	8003820 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 fae7 	bl	8003848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b04      	cmp	r3, #4
 800328c:	d122      	bne.n	80032d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b04      	cmp	r3, #4
 800329a:	d11b      	bne.n	80032d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0204 	mvn.w	r2, #4
 80032a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2202      	movs	r2, #2
 80032aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 faba 	bl	8003834 <HAL_TIM_IC_CaptureCallback>
 80032c0:	e005      	b.n	80032ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 faac 	bl	8003820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 fabd 	bl	8003848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d122      	bne.n	8003328 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d11b      	bne.n	8003328 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0208 	mvn.w	r2, #8
 80032f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2204      	movs	r2, #4
 80032fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 fa90 	bl	8003834 <HAL_TIM_IC_CaptureCallback>
 8003314:	e005      	b.n	8003322 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fa82 	bl	8003820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 fa93 	bl	8003848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f003 0310 	and.w	r3, r3, #16
 8003332:	2b10      	cmp	r3, #16
 8003334:	d122      	bne.n	800337c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b10      	cmp	r3, #16
 8003342:	d11b      	bne.n	800337c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f06f 0210 	mvn.w	r2, #16
 800334c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2208      	movs	r2, #8
 8003352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fa66 	bl	8003834 <HAL_TIM_IC_CaptureCallback>
 8003368:	e005      	b.n	8003376 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fa58 	bl	8003820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fa69 	bl	8003848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b01      	cmp	r3, #1
 8003388:	d10e      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b01      	cmp	r3, #1
 8003396:	d107      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0201 	mvn.w	r2, #1
 80033a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fd fcd8 	bl	8000d58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b2:	2b80      	cmp	r3, #128	; 0x80
 80033b4:	d10e      	bne.n	80033d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c0:	2b80      	cmp	r3, #128	; 0x80
 80033c2:	d107      	bne.n	80033d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 fea4 	bl	800411c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e2:	d10e      	bne.n	8003402 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ee:	2b80      	cmp	r3, #128	; 0x80
 80033f0:	d107      	bne.n	8003402 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 fe97 	bl	8004130 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340c:	2b40      	cmp	r3, #64	; 0x40
 800340e:	d10e      	bne.n	800342e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341a:	2b40      	cmp	r3, #64	; 0x40
 800341c:	d107      	bne.n	800342e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fa17 	bl	800385c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b20      	cmp	r3, #32
 800343a:	d10e      	bne.n	800345a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b20      	cmp	r3, #32
 8003448:	d107      	bne.n	800345a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f06f 0220 	mvn.w	r2, #32
 8003452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fe57 	bl	8004108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800347e:	2302      	movs	r3, #2
 8003480:	e0ff      	b.n	8003682 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b14      	cmp	r3, #20
 800348e:	f200 80f0 	bhi.w	8003672 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003492:	a201      	add	r2, pc, #4	; (adr r2, 8003498 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003498:	080034ed 	.word	0x080034ed
 800349c:	08003673 	.word	0x08003673
 80034a0:	08003673 	.word	0x08003673
 80034a4:	08003673 	.word	0x08003673
 80034a8:	0800352d 	.word	0x0800352d
 80034ac:	08003673 	.word	0x08003673
 80034b0:	08003673 	.word	0x08003673
 80034b4:	08003673 	.word	0x08003673
 80034b8:	0800356f 	.word	0x0800356f
 80034bc:	08003673 	.word	0x08003673
 80034c0:	08003673 	.word	0x08003673
 80034c4:	08003673 	.word	0x08003673
 80034c8:	080035af 	.word	0x080035af
 80034cc:	08003673 	.word	0x08003673
 80034d0:	08003673 	.word	0x08003673
 80034d4:	08003673 	.word	0x08003673
 80034d8:	080035f1 	.word	0x080035f1
 80034dc:	08003673 	.word	0x08003673
 80034e0:	08003673 	.word	0x08003673
 80034e4:	08003673 	.word	0x08003673
 80034e8:	08003631 	.word	0x08003631
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fa5c 	bl	80039b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699a      	ldr	r2, [r3, #24]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0208 	orr.w	r2, r2, #8
 8003506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0204 	bic.w	r2, r2, #4
 8003516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6999      	ldr	r1, [r3, #24]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	691a      	ldr	r2, [r3, #16]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	619a      	str	r2, [r3, #24]
      break;
 800352a:	e0a5      	b.n	8003678 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 faae 	bl	8003a94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6999      	ldr	r1, [r3, #24]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	021a      	lsls	r2, r3, #8
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	619a      	str	r2, [r3, #24]
      break;
 800356c:	e084      	b.n	8003678 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68b9      	ldr	r1, [r7, #8]
 8003574:	4618      	mov	r0, r3
 8003576:	f000 fb05 	bl	8003b84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	69da      	ldr	r2, [r3, #28]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0208 	orr.w	r2, r2, #8
 8003588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69da      	ldr	r2, [r3, #28]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0204 	bic.w	r2, r2, #4
 8003598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69d9      	ldr	r1, [r3, #28]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	61da      	str	r2, [r3, #28]
      break;
 80035ac:	e064      	b.n	8003678 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68b9      	ldr	r1, [r7, #8]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fb5b 	bl	8003c70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69da      	ldr	r2, [r3, #28]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69da      	ldr	r2, [r3, #28]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69d9      	ldr	r1, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	021a      	lsls	r2, r3, #8
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	61da      	str	r2, [r3, #28]
      break;
 80035ee:	e043      	b.n	8003678 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fb92 	bl	8003d20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0208 	orr.w	r2, r2, #8
 800360a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0204 	bic.w	r2, r2, #4
 800361a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	691a      	ldr	r2, [r3, #16]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800362e:	e023      	b.n	8003678 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fbc4 	bl	8003dc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800364a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800365a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	021a      	lsls	r2, r3, #8
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003670:	e002      	b.n	8003678 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	75fb      	strb	r3, [r7, #23]
      break;
 8003676:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003680:	7dfb      	ldrb	r3, [r7, #23]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop

0800368c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_TIM_ConfigClockSource+0x1c>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e0b4      	b.n	8003812 <HAL_TIM_ConfigClockSource+0x186>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	4b56      	ldr	r3, [pc, #344]	; (800381c <HAL_TIM_ConfigClockSource+0x190>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036e0:	d03e      	beq.n	8003760 <HAL_TIM_ConfigClockSource+0xd4>
 80036e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036e6:	f200 8087 	bhi.w	80037f8 <HAL_TIM_ConfigClockSource+0x16c>
 80036ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ee:	f000 8086 	beq.w	80037fe <HAL_TIM_ConfigClockSource+0x172>
 80036f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f6:	d87f      	bhi.n	80037f8 <HAL_TIM_ConfigClockSource+0x16c>
 80036f8:	2b70      	cmp	r3, #112	; 0x70
 80036fa:	d01a      	beq.n	8003732 <HAL_TIM_ConfigClockSource+0xa6>
 80036fc:	2b70      	cmp	r3, #112	; 0x70
 80036fe:	d87b      	bhi.n	80037f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003700:	2b60      	cmp	r3, #96	; 0x60
 8003702:	d050      	beq.n	80037a6 <HAL_TIM_ConfigClockSource+0x11a>
 8003704:	2b60      	cmp	r3, #96	; 0x60
 8003706:	d877      	bhi.n	80037f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003708:	2b50      	cmp	r3, #80	; 0x50
 800370a:	d03c      	beq.n	8003786 <HAL_TIM_ConfigClockSource+0xfa>
 800370c:	2b50      	cmp	r3, #80	; 0x50
 800370e:	d873      	bhi.n	80037f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003710:	2b40      	cmp	r3, #64	; 0x40
 8003712:	d058      	beq.n	80037c6 <HAL_TIM_ConfigClockSource+0x13a>
 8003714:	2b40      	cmp	r3, #64	; 0x40
 8003716:	d86f      	bhi.n	80037f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003718:	2b30      	cmp	r3, #48	; 0x30
 800371a:	d064      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0x15a>
 800371c:	2b30      	cmp	r3, #48	; 0x30
 800371e:	d86b      	bhi.n	80037f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003720:	2b20      	cmp	r3, #32
 8003722:	d060      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003724:	2b20      	cmp	r3, #32
 8003726:	d867      	bhi.n	80037f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003728:	2b00      	cmp	r3, #0
 800372a:	d05c      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0x15a>
 800372c:	2b10      	cmp	r3, #16
 800372e:	d05a      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003730:	e062      	b.n	80037f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003742:	f000 fc0d 	bl	8003f60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003754:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	609a      	str	r2, [r3, #8]
      break;
 800375e:	e04f      	b.n	8003800 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003770:	f000 fbf6 	bl	8003f60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003782:	609a      	str	r2, [r3, #8]
      break;
 8003784:	e03c      	b.n	8003800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003792:	461a      	mov	r2, r3
 8003794:	f000 fb6a 	bl	8003e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2150      	movs	r1, #80	; 0x50
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 fbc3 	bl	8003f2a <TIM_ITRx_SetConfig>
      break;
 80037a4:	e02c      	b.n	8003800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037b2:	461a      	mov	r2, r3
 80037b4:	f000 fb89 	bl	8003eca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2160      	movs	r1, #96	; 0x60
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fbb3 	bl	8003f2a <TIM_ITRx_SetConfig>
      break;
 80037c4:	e01c      	b.n	8003800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037d2:	461a      	mov	r2, r3
 80037d4:	f000 fb4a 	bl	8003e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2140      	movs	r1, #64	; 0x40
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fba3 	bl	8003f2a <TIM_ITRx_SetConfig>
      break;
 80037e4:	e00c      	b.n	8003800 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4619      	mov	r1, r3
 80037f0:	4610      	mov	r0, r2
 80037f2:	f000 fb9a 	bl	8003f2a <TIM_ITRx_SetConfig>
      break;
 80037f6:	e003      	b.n	8003800 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
      break;
 80037fc:	e000      	b.n	8003800 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003810:	7bfb      	ldrb	r3, [r7, #15]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	fffeff88 	.word	0xfffeff88

08003820 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a40      	ldr	r2, [pc, #256]	; (8003984 <TIM_Base_SetConfig+0x114>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d013      	beq.n	80038b0 <TIM_Base_SetConfig+0x40>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388e:	d00f      	beq.n	80038b0 <TIM_Base_SetConfig+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a3d      	ldr	r2, [pc, #244]	; (8003988 <TIM_Base_SetConfig+0x118>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00b      	beq.n	80038b0 <TIM_Base_SetConfig+0x40>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a3c      	ldr	r2, [pc, #240]	; (800398c <TIM_Base_SetConfig+0x11c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d007      	beq.n	80038b0 <TIM_Base_SetConfig+0x40>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a3b      	ldr	r2, [pc, #236]	; (8003990 <TIM_Base_SetConfig+0x120>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d003      	beq.n	80038b0 <TIM_Base_SetConfig+0x40>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a3a      	ldr	r2, [pc, #232]	; (8003994 <TIM_Base_SetConfig+0x124>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d108      	bne.n	80038c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a2f      	ldr	r2, [pc, #188]	; (8003984 <TIM_Base_SetConfig+0x114>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d02b      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d0:	d027      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a2c      	ldr	r2, [pc, #176]	; (8003988 <TIM_Base_SetConfig+0x118>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d023      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a2b      	ldr	r2, [pc, #172]	; (800398c <TIM_Base_SetConfig+0x11c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d01f      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a2a      	ldr	r2, [pc, #168]	; (8003990 <TIM_Base_SetConfig+0x120>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d01b      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a29      	ldr	r2, [pc, #164]	; (8003994 <TIM_Base_SetConfig+0x124>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d017      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a28      	ldr	r2, [pc, #160]	; (8003998 <TIM_Base_SetConfig+0x128>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a27      	ldr	r2, [pc, #156]	; (800399c <TIM_Base_SetConfig+0x12c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00f      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a26      	ldr	r2, [pc, #152]	; (80039a0 <TIM_Base_SetConfig+0x130>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00b      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a25      	ldr	r2, [pc, #148]	; (80039a4 <TIM_Base_SetConfig+0x134>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d007      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a24      	ldr	r2, [pc, #144]	; (80039a8 <TIM_Base_SetConfig+0x138>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d003      	beq.n	8003922 <TIM_Base_SetConfig+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a23      	ldr	r2, [pc, #140]	; (80039ac <TIM_Base_SetConfig+0x13c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d108      	bne.n	8003934 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4313      	orrs	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a0a      	ldr	r2, [pc, #40]	; (8003984 <TIM_Base_SetConfig+0x114>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d003      	beq.n	8003968 <TIM_Base_SetConfig+0xf8>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a0c      	ldr	r2, [pc, #48]	; (8003994 <TIM_Base_SetConfig+0x124>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d103      	bne.n	8003970 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	615a      	str	r2, [r3, #20]
}
 8003976:	bf00      	nop
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40010000 	.word	0x40010000
 8003988:	40000400 	.word	0x40000400
 800398c:	40000800 	.word	0x40000800
 8003990:	40000c00 	.word	0x40000c00
 8003994:	40010400 	.word	0x40010400
 8003998:	40014000 	.word	0x40014000
 800399c:	40014400 	.word	0x40014400
 80039a0:	40014800 	.word	0x40014800
 80039a4:	40001800 	.word	0x40001800
 80039a8:	40001c00 	.word	0x40001c00
 80039ac:	40002000 	.word	0x40002000

080039b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	f023 0201 	bic.w	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4b2b      	ldr	r3, [pc, #172]	; (8003a88 <TIM_OC1_SetConfig+0xd8>)
 80039dc:	4013      	ands	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0303 	bic.w	r3, r3, #3
 80039e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f023 0302 	bic.w	r3, r3, #2
 80039f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a21      	ldr	r2, [pc, #132]	; (8003a8c <TIM_OC1_SetConfig+0xdc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d003      	beq.n	8003a14 <TIM_OC1_SetConfig+0x64>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a20      	ldr	r2, [pc, #128]	; (8003a90 <TIM_OC1_SetConfig+0xe0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d10c      	bne.n	8003a2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f023 0308 	bic.w	r3, r3, #8
 8003a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f023 0304 	bic.w	r3, r3, #4
 8003a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a16      	ldr	r2, [pc, #88]	; (8003a8c <TIM_OC1_SetConfig+0xdc>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d003      	beq.n	8003a3e <TIM_OC1_SetConfig+0x8e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a15      	ldr	r2, [pc, #84]	; (8003a90 <TIM_OC1_SetConfig+0xe0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d111      	bne.n	8003a62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	621a      	str	r2, [r3, #32]
}
 8003a7c:	bf00      	nop
 8003a7e:	371c      	adds	r7, #28
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	fffeff8f 	.word	0xfffeff8f
 8003a8c:	40010000 	.word	0x40010000
 8003a90:	40010400 	.word	0x40010400

08003a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	f023 0210 	bic.w	r2, r3, #16
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4b2e      	ldr	r3, [pc, #184]	; (8003b78 <TIM_OC2_SetConfig+0xe4>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	021b      	lsls	r3, r3, #8
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f023 0320 	bic.w	r3, r3, #32
 8003ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a23      	ldr	r2, [pc, #140]	; (8003b7c <TIM_OC2_SetConfig+0xe8>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d003      	beq.n	8003afc <TIM_OC2_SetConfig+0x68>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a22      	ldr	r2, [pc, #136]	; (8003b80 <TIM_OC2_SetConfig+0xec>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d10d      	bne.n	8003b18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a18      	ldr	r2, [pc, #96]	; (8003b7c <TIM_OC2_SetConfig+0xe8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d003      	beq.n	8003b28 <TIM_OC2_SetConfig+0x94>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a17      	ldr	r2, [pc, #92]	; (8003b80 <TIM_OC2_SetConfig+0xec>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d113      	bne.n	8003b50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	621a      	str	r2, [r3, #32]
}
 8003b6a:	bf00      	nop
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	feff8fff 	.word	0xfeff8fff
 8003b7c:	40010000 	.word	0x40010000
 8003b80:	40010400 	.word	0x40010400

08003b84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4b2d      	ldr	r3, [pc, #180]	; (8003c64 <TIM_OC3_SetConfig+0xe0>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0303 	bic.w	r3, r3, #3
 8003bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	021b      	lsls	r3, r3, #8
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a22      	ldr	r2, [pc, #136]	; (8003c68 <TIM_OC3_SetConfig+0xe4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d003      	beq.n	8003bea <TIM_OC3_SetConfig+0x66>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a21      	ldr	r2, [pc, #132]	; (8003c6c <TIM_OC3_SetConfig+0xe8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d10d      	bne.n	8003c06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a17      	ldr	r2, [pc, #92]	; (8003c68 <TIM_OC3_SetConfig+0xe4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d003      	beq.n	8003c16 <TIM_OC3_SetConfig+0x92>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a16      	ldr	r2, [pc, #88]	; (8003c6c <TIM_OC3_SetConfig+0xe8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d113      	bne.n	8003c3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	621a      	str	r2, [r3, #32]
}
 8003c58:	bf00      	nop
 8003c5a:	371c      	adds	r7, #28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	fffeff8f 	.word	0xfffeff8f
 8003c68:	40010000 	.word	0x40010000
 8003c6c:	40010400 	.word	0x40010400

08003c70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4b1e      	ldr	r3, [pc, #120]	; (8003d14 <TIM_OC4_SetConfig+0xa4>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	021b      	lsls	r3, r3, #8
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	031b      	lsls	r3, r3, #12
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a13      	ldr	r2, [pc, #76]	; (8003d18 <TIM_OC4_SetConfig+0xa8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d003      	beq.n	8003cd8 <TIM_OC4_SetConfig+0x68>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a12      	ldr	r2, [pc, #72]	; (8003d1c <TIM_OC4_SetConfig+0xac>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d109      	bne.n	8003cec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	019b      	lsls	r3, r3, #6
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	621a      	str	r2, [r3, #32]
}
 8003d06:	bf00      	nop
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	feff8fff 	.word	0xfeff8fff
 8003d18:	40010000 	.word	0x40010000
 8003d1c:	40010400 	.word	0x40010400

08003d20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4b1b      	ldr	r3, [pc, #108]	; (8003db8 <TIM_OC5_SetConfig+0x98>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003d60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	041b      	lsls	r3, r3, #16
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a12      	ldr	r2, [pc, #72]	; (8003dbc <TIM_OC5_SetConfig+0x9c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d003      	beq.n	8003d7e <TIM_OC5_SetConfig+0x5e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a11      	ldr	r2, [pc, #68]	; (8003dc0 <TIM_OC5_SetConfig+0xa0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d109      	bne.n	8003d92 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	621a      	str	r2, [r3, #32]
}
 8003dac:	bf00      	nop
 8003dae:	371c      	adds	r7, #28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	fffeff8f 	.word	0xfffeff8f
 8003dbc:	40010000 	.word	0x40010000
 8003dc0:	40010400 	.word	0x40010400

08003dc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4b1c      	ldr	r3, [pc, #112]	; (8003e60 <TIM_OC6_SetConfig+0x9c>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	051b      	lsls	r3, r3, #20
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a13      	ldr	r2, [pc, #76]	; (8003e64 <TIM_OC6_SetConfig+0xa0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d003      	beq.n	8003e24 <TIM_OC6_SetConfig+0x60>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a12      	ldr	r2, [pc, #72]	; (8003e68 <TIM_OC6_SetConfig+0xa4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d109      	bne.n	8003e38 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	029b      	lsls	r3, r3, #10
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	621a      	str	r2, [r3, #32]
}
 8003e52:	bf00      	nop
 8003e54:	371c      	adds	r7, #28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	feff8fff 	.word	0xfeff8fff
 8003e64:	40010000 	.word	0x40010000
 8003e68:	40010400 	.word	0x40010400

08003e6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	f023 0201 	bic.w	r2, r3, #1
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f023 030a 	bic.w	r3, r3, #10
 8003ea8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	621a      	str	r2, [r3, #32]
}
 8003ebe:	bf00      	nop
 8003ec0:	371c      	adds	r7, #28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b087      	sub	sp, #28
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	f023 0210 	bic.w	r2, r3, #16
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ef4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	031b      	lsls	r3, r3, #12
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	621a      	str	r2, [r3, #32]
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b085      	sub	sp, #20
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f043 0307 	orr.w	r3, r3, #7
 8003f4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	609a      	str	r2, [r3, #8]
}
 8003f54:	bf00      	nop
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
 8003f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	021a      	lsls	r2, r3, #8
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	609a      	str	r2, [r3, #8]
}
 8003f94:	bf00      	nop
 8003f96:	371c      	adds	r7, #28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a1a      	ldr	r2, [r3, #32]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a1a      	ldr	r2, [r3, #32]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f003 031f 	and.w	r3, r3, #31
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	621a      	str	r2, [r3, #32]
}
 8003fde:	bf00      	nop
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
	...

08003fec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004000:	2302      	movs	r3, #2
 8004002:	e06d      	b.n	80040e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a30      	ldr	r2, [pc, #192]	; (80040ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d004      	beq.n	8004038 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a2f      	ldr	r2, [pc, #188]	; (80040f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d108      	bne.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800403e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004050:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4313      	orrs	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a20      	ldr	r2, [pc, #128]	; (80040ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d022      	beq.n	80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004076:	d01d      	beq.n	80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a1d      	ldr	r2, [pc, #116]	; (80040f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d018      	beq.n	80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a1c      	ldr	r2, [pc, #112]	; (80040f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d013      	beq.n	80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a1a      	ldr	r2, [pc, #104]	; (80040fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00e      	beq.n	80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a15      	ldr	r2, [pc, #84]	; (80040f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d009      	beq.n	80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a16      	ldr	r2, [pc, #88]	; (8004100 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d004      	beq.n	80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a15      	ldr	r2, [pc, #84]	; (8004104 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d10c      	bne.n	80040ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	40010000 	.word	0x40010000
 80040f0:	40010400 	.word	0x40010400
 80040f4:	40000400 	.word	0x40000400
 80040f8:	40000800 	.word	0x40000800
 80040fc:	40000c00 	.word	0x40000c00
 8004100:	40014000 	.word	0x40014000
 8004104:	40001800 	.word	0x40001800

08004108 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <memset>:
 8004144:	4402      	add	r2, r0
 8004146:	4603      	mov	r3, r0
 8004148:	4293      	cmp	r3, r2
 800414a:	d100      	bne.n	800414e <memset+0xa>
 800414c:	4770      	bx	lr
 800414e:	f803 1b01 	strb.w	r1, [r3], #1
 8004152:	e7f9      	b.n	8004148 <memset+0x4>

08004154 <__libc_init_array>:
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	4d0d      	ldr	r5, [pc, #52]	; (800418c <__libc_init_array+0x38>)
 8004158:	4c0d      	ldr	r4, [pc, #52]	; (8004190 <__libc_init_array+0x3c>)
 800415a:	1b64      	subs	r4, r4, r5
 800415c:	10a4      	asrs	r4, r4, #2
 800415e:	2600      	movs	r6, #0
 8004160:	42a6      	cmp	r6, r4
 8004162:	d109      	bne.n	8004178 <__libc_init_array+0x24>
 8004164:	4d0b      	ldr	r5, [pc, #44]	; (8004194 <__libc_init_array+0x40>)
 8004166:	4c0c      	ldr	r4, [pc, #48]	; (8004198 <__libc_init_array+0x44>)
 8004168:	f000 f818 	bl	800419c <_init>
 800416c:	1b64      	subs	r4, r4, r5
 800416e:	10a4      	asrs	r4, r4, #2
 8004170:	2600      	movs	r6, #0
 8004172:	42a6      	cmp	r6, r4
 8004174:	d105      	bne.n	8004182 <__libc_init_array+0x2e>
 8004176:	bd70      	pop	{r4, r5, r6, pc}
 8004178:	f855 3b04 	ldr.w	r3, [r5], #4
 800417c:	4798      	blx	r3
 800417e:	3601      	adds	r6, #1
 8004180:	e7ee      	b.n	8004160 <__libc_init_array+0xc>
 8004182:	f855 3b04 	ldr.w	r3, [r5], #4
 8004186:	4798      	blx	r3
 8004188:	3601      	adds	r6, #1
 800418a:	e7f2      	b.n	8004172 <__libc_init_array+0x1e>
 800418c:	0800429c 	.word	0x0800429c
 8004190:	0800429c 	.word	0x0800429c
 8004194:	0800429c 	.word	0x0800429c
 8004198:	080042a0 	.word	0x080042a0

0800419c <_init>:
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419e:	bf00      	nop
 80041a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a2:	bc08      	pop	{r3}
 80041a4:	469e      	mov	lr, r3
 80041a6:	4770      	bx	lr

080041a8 <_fini>:
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	bf00      	nop
 80041ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ae:	bc08      	pop	{r3}
 80041b0:	469e      	mov	lr, r3
 80041b2:	4770      	bx	lr
