
smarthome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008320  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  080084f0  080084f0  000094f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087d0  080087d0  0000a164  2**0
                  CONTENTS
  4 .ARM          00000008  080087d0  080087d0  000097d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087d8  080087d8  0000a164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087d8  080087d8  000097d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087dc  080087dc  000097dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  080087e0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  20000168  08008944  0000a168  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  08008944  0000a50c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010737  00000000  00000000  0000a194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b88  00000000  00000000  0001a8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  0001d458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba0  00000000  00000000  0001e370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003eeb  00000000  00000000  0001ef10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013681  00000000  00000000  00022dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0438  00000000  00000000  0003647c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001268b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004568  00000000  00000000  001268f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0012ae60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000168 	.word	0x20000168
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080084d8 	.word	0x080084d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000016c 	.word	0x2000016c
 800020c:	080084d8 	.word	0x080084d8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b96a 	b.w	8000f38 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9d08      	ldr	r5, [sp, #32]
 8000c82:	460c      	mov	r4, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14e      	bne.n	8000d26 <__udivmoddi4+0xaa>
 8000c88:	4694      	mov	ip, r2
 8000c8a:	458c      	cmp	ip, r1
 8000c8c:	4686      	mov	lr, r0
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	d962      	bls.n	8000d5a <__udivmoddi4+0xde>
 8000c94:	b14a      	cbz	r2, 8000caa <__udivmoddi4+0x2e>
 8000c96:	f1c2 0320 	rsb	r3, r2, #32
 8000c9a:	4091      	lsls	r1, r2
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca4:	4319      	orrs	r1, r3
 8000ca6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000caa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cae:	fa1f f68c 	uxth.w	r6, ip
 8000cb2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cba:	fb07 1114 	mls	r1, r7, r4, r1
 8000cbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc2:	fb04 f106 	mul.w	r1, r4, r6
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	d90a      	bls.n	8000ce0 <__udivmoddi4+0x64>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cd2:	f080 8112 	bcs.w	8000efa <__udivmoddi4+0x27e>
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	f240 810f 	bls.w	8000efa <__udivmoddi4+0x27e>
 8000cdc:	3c02      	subs	r4, #2
 8000cde:	4463      	add	r3, ip
 8000ce0:	1a59      	subs	r1, r3, r1
 8000ce2:	fa1f f38e 	uxth.w	r3, lr
 8000ce6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cea:	fb07 1110 	mls	r1, r7, r0, r1
 8000cee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf2:	fb00 f606 	mul.w	r6, r0, r6
 8000cf6:	429e      	cmp	r6, r3
 8000cf8:	d90a      	bls.n	8000d10 <__udivmoddi4+0x94>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d02:	f080 80fc 	bcs.w	8000efe <__udivmoddi4+0x282>
 8000d06:	429e      	cmp	r6, r3
 8000d08:	f240 80f9 	bls.w	8000efe <__udivmoddi4+0x282>
 8000d0c:	4463      	add	r3, ip
 8000d0e:	3802      	subs	r0, #2
 8000d10:	1b9b      	subs	r3, r3, r6
 8000d12:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d16:	2100      	movs	r1, #0
 8000d18:	b11d      	cbz	r5, 8000d22 <__udivmoddi4+0xa6>
 8000d1a:	40d3      	lsrs	r3, r2
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d905      	bls.n	8000d36 <__udivmoddi4+0xba>
 8000d2a:	b10d      	cbz	r5, 8000d30 <__udivmoddi4+0xb4>
 8000d2c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d30:	2100      	movs	r1, #0
 8000d32:	4608      	mov	r0, r1
 8000d34:	e7f5      	b.n	8000d22 <__udivmoddi4+0xa6>
 8000d36:	fab3 f183 	clz	r1, r3
 8000d3a:	2900      	cmp	r1, #0
 8000d3c:	d146      	bne.n	8000dcc <__udivmoddi4+0x150>
 8000d3e:	42a3      	cmp	r3, r4
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xcc>
 8000d42:	4290      	cmp	r0, r2
 8000d44:	f0c0 80f0 	bcc.w	8000f28 <__udivmoddi4+0x2ac>
 8000d48:	1a86      	subs	r6, r0, r2
 8000d4a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	2d00      	cmp	r5, #0
 8000d52:	d0e6      	beq.n	8000d22 <__udivmoddi4+0xa6>
 8000d54:	e9c5 6300 	strd	r6, r3, [r5]
 8000d58:	e7e3      	b.n	8000d22 <__udivmoddi4+0xa6>
 8000d5a:	2a00      	cmp	r2, #0
 8000d5c:	f040 8090 	bne.w	8000e80 <__udivmoddi4+0x204>
 8000d60:	eba1 040c 	sub.w	r4, r1, ip
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	fa1f f78c 	uxth.w	r7, ip
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d76:	fb08 4416 	mls	r4, r8, r6, r4
 8000d7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7e:	fb07 f006 	mul.w	r0, r7, r6
 8000d82:	4298      	cmp	r0, r3
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x11c>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x11a>
 8000d90:	4298      	cmp	r0, r3
 8000d92:	f200 80cd 	bhi.w	8000f30 <__udivmoddi4+0x2b4>
 8000d96:	4626      	mov	r6, r4
 8000d98:	1a1c      	subs	r4, r3, r0
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000da2:	fb08 4410 	mls	r4, r8, r0, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb00 f707 	mul.w	r7, r0, r7
 8000dae:	429f      	cmp	r7, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x148>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x146>
 8000dbc:	429f      	cmp	r7, r3
 8000dbe:	f200 80b0 	bhi.w	8000f22 <__udivmoddi4+0x2a6>
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	1bdb      	subs	r3, r3, r7
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0x9c>
 8000dcc:	f1c1 0620 	rsb	r6, r1, #32
 8000dd0:	408b      	lsls	r3, r1
 8000dd2:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd6:	431f      	orrs	r7, r3
 8000dd8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ddc:	fa04 f301 	lsl.w	r3, r4, r1
 8000de0:	ea43 030c 	orr.w	r3, r3, ip
 8000de4:	40f4      	lsrs	r4, r6
 8000de6:	fa00 f801 	lsl.w	r8, r0, r1
 8000dea:	0c38      	lsrs	r0, r7, #16
 8000dec:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000df0:	fbb4 fef0 	udiv	lr, r4, r0
 8000df4:	fa1f fc87 	uxth.w	ip, r7
 8000df8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dfc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e00:	fb0e f90c 	mul.w	r9, lr, ip
 8000e04:	45a1      	cmp	r9, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	d90a      	bls.n	8000e22 <__udivmoddi4+0x1a6>
 8000e0c:	193c      	adds	r4, r7, r4
 8000e0e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e12:	f080 8084 	bcs.w	8000f1e <__udivmoddi4+0x2a2>
 8000e16:	45a1      	cmp	r9, r4
 8000e18:	f240 8081 	bls.w	8000f1e <__udivmoddi4+0x2a2>
 8000e1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e20:	443c      	add	r4, r7
 8000e22:	eba4 0409 	sub.w	r4, r4, r9
 8000e26:	fa1f f983 	uxth.w	r9, r3
 8000e2a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e32:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e36:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e3a:	45a4      	cmp	ip, r4
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x1d2>
 8000e3e:	193c      	adds	r4, r7, r4
 8000e40:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e44:	d267      	bcs.n	8000f16 <__udivmoddi4+0x29a>
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d965      	bls.n	8000f16 <__udivmoddi4+0x29a>
 8000e4a:	3b02      	subs	r3, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e52:	fba0 9302 	umull	r9, r3, r0, r2
 8000e56:	eba4 040c 	sub.w	r4, r4, ip
 8000e5a:	429c      	cmp	r4, r3
 8000e5c:	46ce      	mov	lr, r9
 8000e5e:	469c      	mov	ip, r3
 8000e60:	d351      	bcc.n	8000f06 <__udivmoddi4+0x28a>
 8000e62:	d04e      	beq.n	8000f02 <__udivmoddi4+0x286>
 8000e64:	b155      	cbz	r5, 8000e7c <__udivmoddi4+0x200>
 8000e66:	ebb8 030e 	subs.w	r3, r8, lr
 8000e6a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e72:	40cb      	lsrs	r3, r1
 8000e74:	431e      	orrs	r6, r3
 8000e76:	40cc      	lsrs	r4, r1
 8000e78:	e9c5 6400 	strd	r6, r4, [r5]
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	e750      	b.n	8000d22 <__udivmoddi4+0xa6>
 8000e80:	f1c2 0320 	rsb	r3, r2, #32
 8000e84:	fa20 f103 	lsr.w	r1, r0, r3
 8000e88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e8c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e90:	4094      	lsls	r4, r2
 8000e92:	430c      	orrs	r4, r1
 8000e94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e98:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e9c:	fa1f f78c 	uxth.w	r7, ip
 8000ea0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea8:	0c23      	lsrs	r3, r4, #16
 8000eaa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eae:	fb00 f107 	mul.w	r1, r0, r7
 8000eb2:	4299      	cmp	r1, r3
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x24c>
 8000eb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eba:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ebe:	d22c      	bcs.n	8000f1a <__udivmoddi4+0x29e>
 8000ec0:	4299      	cmp	r1, r3
 8000ec2:	d92a      	bls.n	8000f1a <__udivmoddi4+0x29e>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	1a5b      	subs	r3, r3, r1
 8000eca:	b2a4      	uxth	r4, r4
 8000ecc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ed0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed8:	fb01 f307 	mul.w	r3, r1, r7
 8000edc:	42a3      	cmp	r3, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x276>
 8000ee0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee8:	d213      	bcs.n	8000f12 <__udivmoddi4+0x296>
 8000eea:	42a3      	cmp	r3, r4
 8000eec:	d911      	bls.n	8000f12 <__udivmoddi4+0x296>
 8000eee:	3902      	subs	r1, #2
 8000ef0:	4464      	add	r4, ip
 8000ef2:	1ae4      	subs	r4, r4, r3
 8000ef4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef8:	e739      	b.n	8000d6e <__udivmoddi4+0xf2>
 8000efa:	4604      	mov	r4, r0
 8000efc:	e6f0      	b.n	8000ce0 <__udivmoddi4+0x64>
 8000efe:	4608      	mov	r0, r1
 8000f00:	e706      	b.n	8000d10 <__udivmoddi4+0x94>
 8000f02:	45c8      	cmp	r8, r9
 8000f04:	d2ae      	bcs.n	8000e64 <__udivmoddi4+0x1e8>
 8000f06:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f0a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0e:	3801      	subs	r0, #1
 8000f10:	e7a8      	b.n	8000e64 <__udivmoddi4+0x1e8>
 8000f12:	4631      	mov	r1, r6
 8000f14:	e7ed      	b.n	8000ef2 <__udivmoddi4+0x276>
 8000f16:	4603      	mov	r3, r0
 8000f18:	e799      	b.n	8000e4e <__udivmoddi4+0x1d2>
 8000f1a:	4630      	mov	r0, r6
 8000f1c:	e7d4      	b.n	8000ec8 <__udivmoddi4+0x24c>
 8000f1e:	46d6      	mov	lr, sl
 8000f20:	e77f      	b.n	8000e22 <__udivmoddi4+0x1a6>
 8000f22:	4463      	add	r3, ip
 8000f24:	3802      	subs	r0, #2
 8000f26:	e74d      	b.n	8000dc4 <__udivmoddi4+0x148>
 8000f28:	4606      	mov	r6, r0
 8000f2a:	4623      	mov	r3, r4
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	e70f      	b.n	8000d50 <__udivmoddi4+0xd4>
 8000f30:	3e02      	subs	r6, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	e730      	b.n	8000d98 <__udivmoddi4+0x11c>
 8000f36:	bf00      	nop

08000f38 <__aeabi_idiv0>:
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f000 fa47 	bl	80013d8 <null_ptr_check>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8000f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d117      	bne.n	8000f86 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	20d0      	movs	r0, #208	@ 0xd0
 8000f5e:	f000 f818 	bl	8000f92 <bmp2_get_regs>
 8000f62:	4603      	mov	r3, r0
 8000f64:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10b      	bne.n	8000f86 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b58      	cmp	r3, #88	@ 0x58
 8000f74:	d105      	bne.n	8000f82 <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 fa79 	bl	800146e <get_calib_param>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e001      	b.n	8000f86 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8000f82:	23fc      	movs	r3, #252	@ 0xfc
 8000f84:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000f92:	b590      	push	{r4, r7, lr}
 8000f94:	b087      	sub	sp, #28
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000fa2:	6838      	ldr	r0, [r7, #0]
 8000fa4:	f000 fa18 	bl	80013d8 <null_ptr_check>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8000fac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d11e      	bne.n	8000ff2 <bmp2_get_regs+0x60>
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d01b      	beq.n	8000ff2 <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	785b      	ldrb	r3, [r3, #1]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d103      	bne.n	8000fca <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fc8:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	68dc      	ldr	r4, [r3, #12]
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	7bf8      	ldrb	r0, [r7, #15]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	68b9      	ldr	r1, [r7, #8]
 8000fd8:	47a0      	blx	r4
 8000fda:	4603      	mov	r3, r0
 8000fdc:	461a      	mov	r2, r3
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d004      	beq.n	8000ff6 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 8000fec:	23fe      	movs	r3, #254	@ 0xfe
 8000fee:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000ff0:	e001      	b.n	8000ff6 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000ff2:	23ff      	movs	r3, #255	@ 0xff
 8000ff4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000ff6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	371c      	adds	r7, #28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd90      	pop	{r4, r7, pc}

08001002 <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8001002:	b590      	push	{r4, r7, lr}
 8001004:	b08b      	sub	sp, #44	@ 0x2c
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b04      	cmp	r3, #4
 8001014:	d901      	bls.n	800101a <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8001016:	2304      	movs	r3, #4
 8001018:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 800101a:	6838      	ldr	r0, [r7, #0]
 800101c:	f000 f9dc 	bl	80013d8 <null_ptr_check>
 8001020:	4603      	mov	r3, r0
 8001022:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001026:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800102a:	2b00      	cmp	r3, #0
 800102c:	d150      	bne.n	80010d0 <bmp2_set_regs+0xce>
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d04d      	beq.n	80010d0 <bmp2_set_regs+0xce>
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d04a      	beq.n	80010d0 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d043      	beq.n	80010c8 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	785b      	ldrb	r3, [r3, #1]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d114      	bne.n	8001078 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800104e:	2300      	movs	r3, #0
 8001050:	77fb      	strb	r3, [r7, #31]
 8001052:	e00d      	b.n	8001070 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 8001054:	7ffb      	ldrb	r3, [r7, #31]
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	4413      	add	r3, r2
 800105a:	781a      	ldrb	r2, [r3, #0]
 800105c:	7ffb      	ldrb	r3, [r7, #31]
 800105e:	68f9      	ldr	r1, [r7, #12]
 8001060:	440b      	add	r3, r1
 8001062:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800106a:	7ffb      	ldrb	r3, [r7, #31]
 800106c:	3301      	adds	r3, #1
 800106e:	77fb      	strb	r3, [r7, #31]
 8001070:	7ffb      	ldrb	r3, [r7, #31]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8ed      	bhi.n	8001054 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d90b      	bls.n	8001096 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 800107e:	f107 0114 	add.w	r1, r7, #20
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f000 f9c6 	bl	8001418 <interleave_data>
                temp_len = ((len * 2) - 1);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	3b01      	subs	r3, #1
 8001092:	623b      	str	r3, [r7, #32]
 8001094:	e001      	b.n	800109a <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	691c      	ldr	r4, [r3, #16]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	7818      	ldrb	r0, [r3, #0]
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f107 0114 	add.w	r1, r7, #20
 80010aa:	6a3a      	ldr	r2, [r7, #32]
 80010ac:	47a0      	blx	r4
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00b      	beq.n	80010d8 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 80010c0:	23fe      	movs	r3, #254	@ 0xfe
 80010c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 80010c6:	e007      	b.n	80010d8 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 80010c8:	23fd      	movs	r3, #253	@ 0xfd
 80010ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 80010ce:	e003      	b.n	80010d8 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80010d0:	23ff      	movs	r3, #255	@ 0xff
 80010d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80010d6:	e000      	b.n	80010da <bmp2_set_regs+0xd8>
        if (len > 0)
 80010d8:	bf00      	nop
    }

    return rslt;
 80010da:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80010de:	4618      	mov	r0, r3
 80010e0:	372c      	adds	r7, #44	@ 0x2c
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd90      	pop	{r4, r7, pc}

080010e6 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b084      	sub	sp, #16
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 80010ee:	23e0      	movs	r3, #224	@ 0xe0
 80010f0:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 80010f2:	23b6      	movs	r3, #182	@ 0xb6
 80010f4:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80010f6:	f107 010d 	add.w	r1, r7, #13
 80010fa:	f107 000e 	add.w	r0, r7, #14
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2201      	movs	r2, #1
 8001102:	f7ff ff7e 	bl	8001002 <bmp2_set_regs>
 8001106:	4603      	mov	r3, r0
 8001108:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800110a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b084      	sub	sp, #16
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001120:	2300      	movs	r3, #0
 8001122:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d02d      	beq.n	8001186 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 800112a:	f107 010c 	add.w	r1, r7, #12
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	2202      	movs	r2, #2
 8001132:	20f4      	movs	r0, #244	@ 0xf4
 8001134:	f7ff ff2d 	bl	8000f92 <bmp2_get_regs>
 8001138:	4603      	mov	r3, r0
 800113a:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 800113c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d122      	bne.n	800118a <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8001144:	7b3b      	ldrb	r3, [r7, #12]
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	b2da      	uxtb	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 800114e:	7b3b      	ldrb	r3, [r7, #12]
 8001150:	109b      	asrs	r3, r3, #2
 8001152:	b2db      	uxtb	r3, r3
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	b2da      	uxtb	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 800115e:	7b7b      	ldrb	r3, [r7, #13]
 8001160:	095b      	lsrs	r3, r3, #5
 8001162:	b2da      	uxtb	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 8001168:	7b7b      	ldrb	r3, [r7, #13]
 800116a:	109b      	asrs	r3, r3, #2
 800116c:	b2db      	uxtb	r3, r3
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	b2da      	uxtb	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 8001178:	7b7b      	ldrb	r3, [r7, #13]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	b2da      	uxtb	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	715a      	strb	r2, [r3, #5]
 8001184:	e001      	b.n	800118a <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001186:	23ff      	movs	r3, #255	@ 0xff
 8001188:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	2000      	movs	r0, #0
 80011a6:	f000 f9fd 	bl	80015a4 <conf_sensor>
 80011aa:	4603      	mov	r3, r0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d01b      	beq.n	80011fc <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 80011c4:	f107 010e 	add.w	r1, r7, #14
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	2201      	movs	r2, #1
 80011cc:	20f3      	movs	r0, #243	@ 0xf3
 80011ce:	f7ff fee0 	bl	8000f92 <bmp2_get_regs>
 80011d2:	4603      	mov	r3, r0
 80011d4:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d110      	bne.n	8001200 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 80011de:	7bbb      	ldrb	r3, [r7, #14]
 80011e0:	10db      	asrs	r3, r3, #3
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 80011ee:	7bbb      	ldrb	r3, [r7, #14]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	705a      	strb	r2, [r3, #1]
 80011fa:	e001      	b.n	8001200 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80011fc:	23ff      	movs	r3, #255	@ 0xff
 80011fe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001200:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	68b9      	ldr	r1, [r7, #8]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 f9bf 	bl	80015a4 <conf_sensor>
 8001226:	4603      	mov	r3, r0
 8001228:	75fb      	strb	r3, [r7, #23]

    return rslt;
 800122a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	2300      	movs	r3, #0
 8001246:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001248:	f107 0308 	add.w	r3, r7, #8
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d024      	beq.n	80012a2 <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8001258:	f107 0110 	add.w	r1, r7, #16
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2206      	movs	r2, #6
 8001260:	20f7      	movs	r0, #247	@ 0xf7
 8001262:	f7ff fe96 	bl	8000f92 <bmp2_get_regs>
 8001266:	4603      	mov	r3, r0
 8001268:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 800126a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d119      	bne.n	80012a6 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 8001272:	f107 0208 	add.w	r2, r7, #8
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f000 fab9 	bl	80017f4 <parse_sensor_data>
 8001282:	4603      	mov	r3, r0
 8001284:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001286:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10b      	bne.n	80012a6 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f80b 	bl	80012b2 <bmp2_compensate_data>
 800129c:	4603      	mov	r3, r0
 800129e:	75fb      	strb	r3, [r7, #23]
 80012a0:	e001      	b.n	80012a6 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012a2:	23ff      	movs	r3, #255	@ 0xff
 80012a4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b086      	sub	sp, #24
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	60f8      	str	r0, [r7, #12]
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 f88a 	bl	80013d8 <null_ptr_check>
 80012c4:	4603      	mov	r3, r0
 80012c6:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 80012c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d129      	bne.n	8001324 <bmp2_compensate_data+0x72>
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d026      	beq.n	8001324 <bmp2_compensate_data+0x72>
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d023      	beq.n	8001324 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	f04f 0300 	mov.w	r3, #0
 80012e6:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 80012ea:	68b9      	ldr	r1, [r7, #8]
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	3308      	adds	r3, #8
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	68f9      	ldr	r1, [r7, #12]
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fabb 	bl	800187c <compensate_temperature>
 8001306:	4603      	mov	r3, r0
 8001308:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 800130a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d10a      	bne.n	8001328 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	68f9      	ldr	r1, [r7, #12]
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fba5 	bl	8001a68 <compensate_pressure>
 800131e:	4603      	mov	r3, r0
 8001320:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 8001322:	e001      	b.n	8001328 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001324:	23ff      	movs	r3, #255	@ 0xff
 8001326:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001328:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001334:	b5b0      	push	{r4, r5, r7, lr}
 8001336:	b092      	sub	sp, #72	@ 0x48
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 8001340:	4b23      	ldr	r3, [pc, #140]	@ (80013d0 <bmp2_compute_meas_time+0x9c>)
 8001342:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001346:	461d      	mov	r5, r3
 8001348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800134a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800134c:	682b      	ldr	r3, [r5, #0]
 800134e:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 8001350:	4b20      	ldr	r3, [pc, #128]	@ (80013d4 <bmp2_compute_meas_time+0xa0>)
 8001352:	f107 0410 	add.w	r4, r7, #16
 8001356:	461d      	mov	r5, r3
 8001358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001360:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 f837 	bl	80013d8 <null_ptr_check>
 800136a:	4603      	mov	r3, r0
 800136c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 8001370:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8001374:	2b00      	cmp	r3, #0
 8001376:	d122      	bne.n	80013be <bmp2_compute_meas_time+0x8a>
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d01f      	beq.n	80013be <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	7e1b      	ldrb	r3, [r3, #24]
 8001382:	2b03      	cmp	r3, #3
 8001384:	d111      	bne.n	80013aa <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	78db      	ldrb	r3, [r3, #3]
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	3348      	adds	r3, #72	@ 0x48
 800138e:	443b      	add	r3, r7
 8001390:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	789b      	ldrb	r3, [r3, #2]
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	3348      	adds	r3, #72	@ 0x48
 800139c:	443b      	add	r3, r7
 800139e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80013a2:	441a      	add	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013a8:	e00c      	b.n	80013c4 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	78db      	ldrb	r3, [r3, #3]
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	3348      	adds	r3, #72	@ 0x48
 80013b2:	443b      	add	r3, r7
 80013b4:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013bc:	e002      	b.n	80013c4 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80013be:	23ff      	movs	r3, #255	@ 0xff
 80013c0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 80013c4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3748      	adds	r7, #72	@ 0x48
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bdb0      	pop	{r4, r5, r7, pc}
 80013d0:	080084f0 	.word	0x080084f0
 80013d4:	08008504 	.word	0x08008504

080013d8 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <null_ptr_check+0x26>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d007      	beq.n	80013fe <null_ptr_check+0x26>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <null_ptr_check+0x26>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d102      	bne.n	8001404 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 80013fe:	23ff      	movs	r3, #255	@ 0xff
 8001400:	73fb      	strb	r3, [r7, #15]
 8001402:	e001      	b.n	8001408 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001408:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001418:	b480      	push	{r7}
 800141a:	b087      	sub	sp, #28
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
 8001424:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001426:	2301      	movs	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	e015      	b.n	8001458 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	441a      	add	r2, r3
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	3b01      	subs	r3, #1
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	440b      	add	r3, r1
 800143c:	7812      	ldrb	r2, [r2, #0]
 800143e:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	441a      	add	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	68b9      	ldr	r1, [r7, #8]
 800144c:	440b      	add	r3, r1
 800144e:	7812      	ldrb	r2, [r2, #0]
 8001450:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	3301      	adds	r3, #1
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	429a      	cmp	r2, r3
 800145e:	d3e5      	bcc.n	800142c <interleave_data+0x14>
    }
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	371c      	adds	r7, #28
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b08a      	sub	sp, #40	@ 0x28
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	f107 0310 	add.w	r3, r7, #16
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]
 800148a:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 800148c:	f107 010c 	add.w	r1, r7, #12
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2219      	movs	r2, #25
 8001494:	2088      	movs	r0, #136	@ 0x88
 8001496:	f7ff fd7c 	bl	8000f92 <bmp2_get_regs>
 800149a:	4603      	mov	r3, r0
 800149c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMP2_OK)
 80014a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d177      	bne.n	8001598 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 80014a8:	7b7b      	ldrb	r3, [r7, #13]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	b21a      	sxth	r2, r3
 80014ae:	7b3b      	ldrb	r3, [r7, #12]
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	b21a      	sxth	r2, r3
 80014c2:	7bbb      	ldrb	r3, [r7, #14]
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	4313      	orrs	r3, r2
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 80014ce:	7c7b      	ldrb	r3, [r7, #17]
 80014d0:	021b      	lsls	r3, r3, #8
 80014d2:	b21a      	sxth	r2, r3
 80014d4:	7c3b      	ldrb	r3, [r7, #16]
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	4313      	orrs	r3, r2
 80014da:	b21a      	sxth	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 80014e0:	7cfb      	ldrb	r3, [r7, #19]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	7cbb      	ldrb	r3, [r7, #18]
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	845a      	strh	r2, [r3, #34]	@ 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 80014f4:	7d7b      	ldrb	r3, [r7, #21]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	7d3b      	ldrb	r3, [r7, #20]
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	4313      	orrs	r3, r2
 8001500:	b21a      	sxth	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8001506:	7dfb      	ldrb	r3, [r7, #23]
 8001508:	021b      	lsls	r3, r3, #8
 800150a:	b21a      	sxth	r2, r3
 800150c:	7dbb      	ldrb	r3, [r7, #22]
 800150e:	b21b      	sxth	r3, r3
 8001510:	4313      	orrs	r3, r2
 8001512:	b21a      	sxth	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001518:	7e7b      	ldrb	r3, [r7, #25]
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	b21a      	sxth	r2, r3
 800151e:	7e3b      	ldrb	r3, [r7, #24]
 8001520:	b21b      	sxth	r3, r3
 8001522:	4313      	orrs	r3, r2
 8001524:	b21a      	sxth	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	851a      	strh	r2, [r3, #40]	@ 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 800152a:	7efb      	ldrb	r3, [r7, #27]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	b21a      	sxth	r2, r3
 8001530:	7ebb      	ldrb	r3, [r7, #26]
 8001532:	b21b      	sxth	r3, r3
 8001534:	4313      	orrs	r3, r2
 8001536:	b21a      	sxth	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 800153c:	7f7b      	ldrb	r3, [r7, #29]
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	b21a      	sxth	r2, r3
 8001542:	7f3b      	ldrb	r3, [r7, #28]
 8001544:	b21b      	sxth	r3, r3
 8001546:	4313      	orrs	r3, r2
 8001548:	b21a      	sxth	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 800154e:	7ffb      	ldrb	r3, [r7, #31]
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	b21a      	sxth	r2, r3
 8001554:	7fbb      	ldrb	r3, [r7, #30]
 8001556:	b21b      	sxth	r3, r3
 8001558:	4313      	orrs	r3, r2
 800155a:	b21a      	sxth	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	85da      	strh	r2, [r3, #46]	@ 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8001560:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	b21a      	sxth	r2, r3
 8001568:	f897 3020 	ldrb.w	r3, [r7, #32]
 800156c:	b21b      	sxth	r3, r3
 800156e:	4313      	orrs	r3, r2
 8001570:	b21a      	sxth	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 8001576:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	b21a      	sxth	r2, r3
 800157e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001582:	b21b      	sxth	r3, r3
 8001584:	4313      	orrs	r3, r2
 8001586:	b21a      	sxth	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 800158c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001590:	b25a      	sxtb	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    return rslt;
 8001598:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800159c:	4618      	mov	r0, r3
 800159e:	3728      	adds	r7, #40	@ 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80015b2:	2300      	movs	r3, #0
 80015b4:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 80015b6:	f24f 53f4 	movw	r3, #62964	@ 0xf5f4
 80015ba:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d074      	beq.n	80016ac <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80015c2:	f107 0114 	add.w	r1, r7, #20
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2202      	movs	r2, #2
 80015ca:	20f4      	movs	r0, #244	@ 0xf4
 80015cc:	f7ff fce1 	bl	8000f92 <bmp2_get_regs>
 80015d0:	4603      	mov	r3, r0
 80015d2:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80015d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d169      	bne.n	80016b0 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fd82 	bl	80010e6 <bmp2_soft_reset>
 80015e2:	4603      	mov	r3, r0
 80015e4:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80015e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d160      	bne.n	80016b0 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	68b9      	ldr	r1, [r7, #8]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 f861 	bl	80016bc <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 80015fa:	7d7b      	ldrb	r3, [r7, #21]
 80015fc:	b25b      	sxtb	r3, r3
 80015fe:	f003 031f 	and.w	r3, r3, #31
 8001602:	b25a      	sxtb	r2, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	789b      	ldrb	r3, [r3, #2]
 8001608:	015b      	lsls	r3, r3, #5
 800160a:	b25b      	sxtb	r3, r3
 800160c:	4313      	orrs	r3, r2
 800160e:	b25b      	sxtb	r3, r3
 8001610:	b2db      	uxtb	r3, r3
 8001612:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001614:	7d7b      	ldrb	r3, [r7, #21]
 8001616:	b25b      	sxtb	r3, r3
 8001618:	f023 031c 	bic.w	r3, r3, #28
 800161c:	b25a      	sxtb	r2, r3
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	791b      	ldrb	r3, [r3, #4]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	b25b      	sxtb	r3, r3
 8001626:	f003 031c 	and.w	r3, r3, #28
 800162a:	b25b      	sxtb	r3, r3
 800162c:	4313      	orrs	r3, r2
 800162e:	b25b      	sxtb	r3, r3
 8001630:	b2db      	uxtb	r3, r3
 8001632:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001634:	7d7b      	ldrb	r3, [r7, #21]
 8001636:	b25b      	sxtb	r3, r3
 8001638:	f023 0301 	bic.w	r3, r3, #1
 800163c:	b25a      	sxtb	r2, r3
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	795b      	ldrb	r3, [r3, #5]
 8001642:	b25b      	sxtb	r3, r3
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	b25b      	sxtb	r3, r3
 800164a:	4313      	orrs	r3, r2
 800164c:	b25b      	sxtb	r3, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 8001652:	f107 0114 	add.w	r1, r7, #20
 8001656:	f107 0010 	add.w	r0, r7, #16
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2202      	movs	r2, #2
 800165e:	f7ff fcd0 	bl	8001002 <bmp2_set_regs>
 8001662:	4603      	mov	r3, r0
 8001664:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 8001666:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d120      	bne.n	80016b0 <conf_sensor+0x10c>
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d01d      	beq.n	80016b0 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 800167a:	7d3b      	ldrb	r3, [r7, #20]
 800167c:	b25b      	sxtb	r3, r3
 800167e:	f023 0303 	bic.w	r3, r3, #3
 8001682:	b25a      	sxtb	r2, r3
 8001684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	b25b      	sxtb	r3, r3
 800168e:	4313      	orrs	r3, r2
 8001690:	b25b      	sxtb	r3, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 8001696:	f107 0114 	add.w	r1, r7, #20
 800169a:	f107 0010 	add.w	r0, r7, #16
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f7ff fcae 	bl	8001002 <bmp2_set_regs>
 80016a6:	4603      	mov	r3, r0
 80016a8:	75fb      	strb	r3, [r7, #23]
 80016aa:	e001      	b.n	80016b0 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80016ac:	23ff      	movs	r3, #255	@ 0xff
 80016ae:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80016b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	78db      	ldrb	r3, [r3, #3]
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	f200 808b 	bhi.w	80017e6 <set_os_mode+0x12a>
 80016d0:	a201      	add	r2, pc, #4	@ (adr r2, 80016d8 <set_os_mode+0x1c>)
 80016d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d6:	bf00      	nop
 80016d8:	080016ed 	.word	0x080016ed
 80016dc:	0800171f 	.word	0x0800171f
 80016e0:	08001751 	.word	0x08001751
 80016e4:	08001783 	.word	0x08001783
 80016e8:	080017b5 	.word	0x080017b5
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	f043 0320 	orr.w	r3, r3, #32
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b25b      	sxtb	r3, r3
 800170a:	f023 031c 	bic.w	r3, r3, #28
 800170e:	b25b      	sxtb	r3, r3
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	b25b      	sxtb	r3, r3
 8001716:	b2da      	uxtb	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	701a      	strb	r2, [r3, #0]
            break;
 800171c:	e064      	b.n	80017e8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	b25b      	sxtb	r3, r3
 8001724:	f003 031f 	and.w	r3, r3, #31
 8001728:	b25b      	sxtb	r3, r3
 800172a:	f043 0320 	orr.w	r3, r3, #32
 800172e:	b25b      	sxtb	r3, r3
 8001730:	b2da      	uxtb	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	b25b      	sxtb	r3, r3
 800173c:	f023 031c 	bic.w	r3, r3, #28
 8001740:	b25b      	sxtb	r3, r3
 8001742:	f043 0308 	orr.w	r3, r3, #8
 8001746:	b25b      	sxtb	r3, r3
 8001748:	b2da      	uxtb	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	701a      	strb	r2, [r3, #0]
            break;
 800174e:	e04b      	b.n	80017e8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b25b      	sxtb	r3, r3
 8001756:	f003 031f 	and.w	r3, r3, #31
 800175a:	b25b      	sxtb	r3, r3
 800175c:	f043 0320 	orr.w	r3, r3, #32
 8001760:	b25b      	sxtb	r3, r3
 8001762:	b2da      	uxtb	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	b25b      	sxtb	r3, r3
 800176e:	f023 031c 	bic.w	r3, r3, #28
 8001772:	b25b      	sxtb	r3, r3
 8001774:	f043 030c 	orr.w	r3, r3, #12
 8001778:	b25b      	sxtb	r3, r3
 800177a:	b2da      	uxtb	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	701a      	strb	r2, [r3, #0]
            break;
 8001780:	e032      	b.n	80017e8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b25b      	sxtb	r3, r3
 8001788:	f003 031f 	and.w	r3, r3, #31
 800178c:	b25b      	sxtb	r3, r3
 800178e:	f043 0320 	orr.w	r3, r3, #32
 8001792:	b25b      	sxtb	r3, r3
 8001794:	b2da      	uxtb	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b25b      	sxtb	r3, r3
 80017a0:	f023 031c 	bic.w	r3, r3, #28
 80017a4:	b25b      	sxtb	r3, r3
 80017a6:	f043 0310 	orr.w	r3, r3, #16
 80017aa:	b25b      	sxtb	r3, r3
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	701a      	strb	r2, [r3, #0]
            break;
 80017b2:	e019      	b.n	80017e8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b25b      	sxtb	r3, r3
 80017ba:	f003 031f 	and.w	r3, r3, #31
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	f023 031c 	bic.w	r3, r3, #28
 80017d6:	b25b      	sxtb	r3, r3
 80017d8:	f043 0314 	orr.w	r3, r3, #20
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	701a      	strb	r2, [r3, #0]
            break;
 80017e4:	e000      	b.n	80017e8 <set_os_mode+0x12c>
        default:
            break;
 80017e6:	bf00      	nop
    }
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	031b      	lsls	r3, r3, #12
 8001804:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3301      	adds	r3, #1
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3302      	adds	r3, #2
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	091b      	lsrs	r3, r3, #4
 8001818:	b2db      	uxtb	r3, r3
 800181a:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	431a      	orrs	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	431a      	orrs	r2, r3
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3303      	adds	r3, #3
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	031b      	lsls	r3, r3, #12
 8001832:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3304      	adds	r3, #4
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3305      	adds	r3, #5
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	b2db      	uxtb	r3, r3
 8001848:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	431a      	orrs	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	461a      	mov	r2, r3
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4619      	mov	r1, r3
 8001864:	4610      	mov	r0, r2
 8001866:	f000 fae3 	bl	8001e30 <st_check_boundaries>
 800186a:	4603      	mov	r3, r0
 800186c:	72fb      	strb	r3, [r7, #11]

    return rslt;
 800186e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 800187c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001880:	b08c      	sub	sp, #48	@ 0x30
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fe5d 	bl	8000554 <__aeabi_i2d>
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	4b6c      	ldr	r3, [pc, #432]	@ (8001a50 <compensate_temperature+0x1d4>)
 80018a0:	f7fe ffec 	bl	800087c <__aeabi_ddiv>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4614      	mov	r4, r2
 80018aa:	461d      	mov	r5, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	8b9b      	ldrh	r3, [r3, #28]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fe3f 	bl	8000534 <__aeabi_ui2d>
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	4b66      	ldr	r3, [pc, #408]	@ (8001a54 <compensate_temperature+0x1d8>)
 80018bc:	f7fe ffde 	bl	800087c <__aeabi_ddiv>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4620      	mov	r0, r4
 80018c6:	4629      	mov	r1, r5
 80018c8:	f7fe fcf6 	bl	80002b8 <__aeabi_dsub>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4614      	mov	r4, r2
 80018d2:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fe3a 	bl	8000554 <__aeabi_i2d>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80018e4:	4620      	mov	r0, r4
 80018e6:	4629      	mov	r1, r5
 80018e8:	f7fe fe9e 	bl	8000628 <__aeabi_dmul>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fe2b 	bl	8000554 <__aeabi_i2d>
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001906:	f7fe ffb9 	bl	800087c <__aeabi_ddiv>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4614      	mov	r4, r2
 8001910:	461d      	mov	r5, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	8b9b      	ldrh	r3, [r3, #28]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fe0c 	bl	8000534 <__aeabi_ui2d>
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	4b4d      	ldr	r3, [pc, #308]	@ (8001a58 <compensate_temperature+0x1dc>)
 8001922:	f7fe ffab 	bl	800087c <__aeabi_ddiv>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4620      	mov	r0, r4
 800192c:	4629      	mov	r1, r5
 800192e:	f7fe fcc3 	bl	80002b8 <__aeabi_dsub>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4614      	mov	r4, r2
 8001938:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fe08 	bl	8000554 <__aeabi_i2d>
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800194c:	f7fe ff96 	bl	800087c <__aeabi_ddiv>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4690      	mov	r8, r2
 8001956:	4699      	mov	r9, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	8b9b      	ldrh	r3, [r3, #28]
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fde9 	bl	8000534 <__aeabi_ui2d>
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	4b3c      	ldr	r3, [pc, #240]	@ (8001a58 <compensate_temperature+0x1dc>)
 8001968:	f7fe ff88 	bl	800087c <__aeabi_ddiv>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4640      	mov	r0, r8
 8001972:	4649      	mov	r1, r9
 8001974:	f7fe fca0 	bl	80002b8 <__aeabi_dsub>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 800197c:	4620      	mov	r0, r4
 800197e:	4629      	mov	r1, r5
 8001980:	f7fe fe52 	bl	8000628 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4614      	mov	r4, r2
 800198a:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fdde 	bl	8000554 <__aeabi_i2d>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
    var2 =
 800199c:	4620      	mov	r0, r4
 800199e:	4629      	mov	r1, r5
 80019a0:	f7fe fe42 	bl	8000628 <__aeabi_dmul>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 80019ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019b4:	f7fe fc82 	bl	80002bc <__adddf3>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	f7ff f8cc 	bl	8000b5c <__aeabi_d2iz>
 80019c4:	4602      	mov	r2, r0
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	639a      	str	r2, [r3, #56]	@ 0x38
    temperature = (var1 + var2) / 5120.0;
 80019ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019d2:	f7fe fc73 	bl	80002bc <__adddf3>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a5c <compensate_temperature+0x1e0>)
 80019e4:	f7fe ff4a 	bl	800087c <__aeabi_ddiv>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a60 <compensate_temperature+0x1e4>)
 80019f6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80019fa:	f7ff f887 	bl	8000b0c <__aeabi_dcmplt>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d007      	beq.n	8001a14 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <compensate_temperature+0x1e4>)
 8001a0a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <compensate_temperature+0x1e8>)
 8001a1a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a1e:	f7ff f893 	bl	8000b48 <__aeabi_dcmpgt>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d007      	beq.n	8001a38 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a64 <compensate_temperature+0x1e8>)
 8001a2e:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    (*comp_temperature) = temperature;
 8001a38:	68f9      	ldr	r1, [r7, #12]
 8001a3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a3e:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001a42:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3730      	adds	r7, #48	@ 0x30
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a50:	40d00000 	.word	0x40d00000
 8001a54:	40900000 	.word	0x40900000
 8001a58:	40c00000 	.word	0x40c00000
 8001a5c:	40b40000 	.word	0x40b40000
 8001a60:	c0440000 	.word	0xc0440000
 8001a64:	40554000 	.word	0x40554000

08001a68 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001a68:	b5b0      	push	{r4, r5, r7, lr}
 8001a6a:	b08c      	sub	sp, #48	@ 0x30
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	f04f 0300 	mov.w	r3, #0
 8001a82:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd62 	bl	8000554 <__aeabi_i2d>
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a98:	f7fe fef0 	bl	800087c <__aeabi_ddiv>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	4bcb      	ldr	r3, [pc, #812]	@ (8001dd8 <compensate_pressure+0x370>)
 8001aaa:	f7fe fc05 	bl	80002b8 <__aeabi_dsub>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001ab6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001abe:	f7fe fdb3 	bl	8000628 <__aeabi_dmul>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4614      	mov	r4, r2
 8001ac8:	461d      	mov	r5, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fd3f 	bl	8000554 <__aeabi_i2d>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4620      	mov	r0, r4
 8001adc:	4629      	mov	r1, r5
 8001ade:	f7fe fda3 	bl	8000628 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	4bbb      	ldr	r3, [pc, #748]	@ (8001ddc <compensate_pressure+0x374>)
 8001af0:	f7fe fec4 	bl	800087c <__aeabi_ddiv>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fd26 	bl	8000554 <__aeabi_i2d>
 8001b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b0c:	f7fe fd8c 	bl	8000628 <__aeabi_dmul>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	f7fe fbce 	bl	80002bc <__adddf3>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b28:	f7fe fbc8 	bl	80002bc <__adddf3>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	4ba9      	ldr	r3, [pc, #676]	@ (8001de0 <compensate_pressure+0x378>)
 8001b3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b3e:	f7fe fe9d 	bl	800087c <__aeabi_ddiv>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4614      	mov	r4, r2
 8001b48:	461d      	mov	r5, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fcff 	bl	8000554 <__aeabi_i2d>
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	4ba2      	ldr	r3, [pc, #648]	@ (8001de4 <compensate_pressure+0x37c>)
 8001b5c:	f7fe fd64 	bl	8000628 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4620      	mov	r0, r4
 8001b66:	4629      	mov	r1, r5
 8001b68:	f7fe fba8 	bl	80002bc <__adddf3>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fcea 	bl	8000554 <__aeabi_i2d>
 8001b80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b84:	f7fe fd50 	bl	8000628 <__aeabi_dmul>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b94:	f7fe fd48 	bl	8000628 <__aeabi_dmul>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	4b90      	ldr	r3, [pc, #576]	@ (8001de8 <compensate_pressure+0x380>)
 8001ba6:	f7fe fe69 	bl	800087c <__aeabi_ddiv>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4614      	mov	r4, r2
 8001bb0:	461d      	mov	r5, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fccb 	bl	8000554 <__aeabi_i2d>
 8001bbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bc2:	f7fe fd31 	bl	8000628 <__aeabi_dmul>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4620      	mov	r0, r4
 8001bcc:	4629      	mov	r1, r5
 8001bce:	f7fe fb75 	bl	80002bc <__adddf3>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	4b82      	ldr	r3, [pc, #520]	@ (8001de8 <compensate_pressure+0x380>)
 8001be0:	f7fe fe4c 	bl	800087c <__aeabi_ddiv>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	4b7a      	ldr	r3, [pc, #488]	@ (8001ddc <compensate_pressure+0x374>)
 8001bf2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bf6:	f7fe fe41 	bl	800087c <__aeabi_ddiv>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4619      	mov	r1, r3
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	4b79      	ldr	r3, [pc, #484]	@ (8001dec <compensate_pressure+0x384>)
 8001c08:	f7fe fb58 	bl	80002bc <__adddf3>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4614      	mov	r4, r2
 8001c12:	461d      	mov	r5, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc8b 	bl	8000534 <__aeabi_ui2d>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4620      	mov	r0, r4
 8001c24:	4629      	mov	r1, r5
 8001c26:	f7fe fcff 	bl	8000628 <__aeabi_dmul>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c3e:	f7fe ff65 	bl	8000b0c <__aeabi_dcmplt>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10b      	bne.n	8001c60 <compensate_pressure+0x1f8>
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c54:	f7fe ff78 	bl	8000b48 <__aeabi_dcmpgt>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 80de 	beq.w	8001e1c <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fc65 	bl	8000534 <__aeabi_ui2d>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	f04f 0000 	mov.w	r0, #0
 8001c72:	495f      	ldr	r1, [pc, #380]	@ (8001df0 <compensate_pressure+0x388>)
 8001c74:	f7fe fb20 	bl	80002b8 <__aeabi_dsub>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	4b5b      	ldr	r3, [pc, #364]	@ (8001df4 <compensate_pressure+0x38c>)
 8001c86:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c8a:	f7fe fdf7 	bl	800087c <__aeabi_ddiv>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c96:	f7fe fb0f 	bl	80002b8 <__aeabi_dsub>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	a347      	add	r3, pc, #284	@ (adr r3, 8001dc0 <compensate_pressure+0x358>)
 8001ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca8:	f7fe fcbe 	bl	8000628 <__aeabi_dmul>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cb8:	f7fe fde0 	bl	800087c <__aeabi_ddiv>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fc42 	bl	8000554 <__aeabi_i2d>
 8001cd0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cd4:	f7fe fca8 	bl	8000628 <__aeabi_dmul>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ce4:	f7fe fca0 	bl	8000628 <__aeabi_dmul>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	4b40      	ldr	r3, [pc, #256]	@ (8001df8 <compensate_pressure+0x390>)
 8001cf6:	f7fe fdc1 	bl	800087c <__aeabi_ddiv>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fc23 	bl	8000554 <__aeabi_i2d>
 8001d0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d12:	f7fe fc89 	bl	8000628 <__aeabi_dmul>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	4b2e      	ldr	r3, [pc, #184]	@ (8001ddc <compensate_pressure+0x374>)
 8001d24:	f7fe fdaa 	bl	800087c <__aeabi_ddiv>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001d30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d34:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d38:	f7fe fac0 	bl	80002bc <__adddf3>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4614      	mov	r4, r2
 8001d42:	461d      	mov	r5, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fc02 	bl	8000554 <__aeabi_i2d>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4620      	mov	r0, r4
 8001d56:	4629      	mov	r1, r5
 8001d58:	f7fe fab0 	bl	80002bc <__adddf3>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	4b24      	ldr	r3, [pc, #144]	@ (8001dfc <compensate_pressure+0x394>)
 8001d6a:	f7fe fd87 	bl	800087c <__aeabi_ddiv>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d76:	f7fe faa1 	bl	80002bc <__adddf3>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001d82:	a311      	add	r3, pc, #68	@ (adr r3, 8001dc8 <compensate_pressure+0x360>)
 8001d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d88:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d8c:	f7fe febe 	bl	8000b0c <__aeabi_dcmplt>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d007      	beq.n	8001da6 <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001d96:	a30c      	add	r3, pc, #48	@ (adr r3, 8001dc8 <compensate_pressure+0x360>)
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001da0:	2303      	movs	r3, #3
 8001da2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001da6:	a30a      	add	r3, pc, #40	@ (adr r3, 8001dd0 <compensate_pressure+0x368>)
 8001da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001db0:	f7fe feca 	bl	8000b48 <__aeabi_dcmpgt>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	e022      	b.n	8001e00 <compensate_pressure+0x398>
 8001dba:	bf00      	nop
 8001dbc:	f3af 8000 	nop.w
 8001dc0:	00000000 	.word	0x00000000
 8001dc4:	40b86a00 	.word	0x40b86a00
 8001dc8:	00000000 	.word	0x00000000
 8001dcc:	40dd4c00 	.word	0x40dd4c00
 8001dd0:	00000000 	.word	0x00000000
 8001dd4:	40fadb00 	.word	0x40fadb00
 8001dd8:	40ef4000 	.word	0x40ef4000
 8001ddc:	40e00000 	.word	0x40e00000
 8001de0:	40100000 	.word	0x40100000
 8001de4:	40f00000 	.word	0x40f00000
 8001de8:	41200000 	.word	0x41200000
 8001dec:	3ff00000 	.word	0x3ff00000
 8001df0:	41300000 	.word	0x41300000
 8001df4:	40b00000 	.word	0x40b00000
 8001df8:	41e00000 	.word	0x41e00000
 8001dfc:	40300000 	.word	0x40300000
 8001e00:	d007      	beq.n	8001e12 <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001e02:	a309      	add	r3, pc, #36	@ (adr r3, 8001e28 <compensate_pressure+0x3c0>)
 8001e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e08:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        (*comp_pressure) = pressure;
 8001e12:	68f9      	ldr	r1, [r7, #12]
 8001e14:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e18:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001e1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3730      	adds	r7, #48	@ 0x30
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bdb0      	pop	{r4, r5, r7, pc}
 8001e28:	00000000 	.word	0x00000000
 8001e2c:	40fadb00 	.word	0x40fadb00

08001e30 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	db03      	blt.n	8001e4c <st_check_boundaries+0x1c>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	4a1c      	ldr	r2, [pc, #112]	@ (8001eb8 <st_check_boundaries+0x88>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	dd09      	ble.n	8001e60 <st_check_boundaries+0x30>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	db06      	blt.n	8001e60 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a18      	ldr	r2, [pc, #96]	@ (8001eb8 <st_check_boundaries+0x88>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	dc02      	bgt.n	8001e60 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001e5a:	23fa      	movs	r3, #250	@ 0xfa
 8001e5c:	73fb      	strb	r3, [r7, #15]
 8001e5e:	e023      	b.n	8001ea8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	db03      	blt.n	8001e6e <st_check_boundaries+0x3e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a13      	ldr	r2, [pc, #76]	@ (8001eb8 <st_check_boundaries+0x88>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	dd09      	ble.n	8001e82 <st_check_boundaries+0x52>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	db06      	blt.n	8001e82 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	4a10      	ldr	r2, [pc, #64]	@ (8001eb8 <st_check_boundaries+0x88>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	dc02      	bgt.n	8001e82 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001e7c:	23fb      	movs	r3, #251	@ 0xfb
 8001e7e:	73fb      	strb	r3, [r7, #15]
 8001e80:	e012      	b.n	8001ea8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	db03      	blt.n	8001e90 <st_check_boundaries+0x60>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb8 <st_check_boundaries+0x88>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	dd09      	ble.n	8001ea4 <st_check_boundaries+0x74>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db03      	blt.n	8001e9e <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a07      	ldr	r2, [pc, #28]	@ (8001eb8 <st_check_boundaries+0x88>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	dd02      	ble.n	8001ea4 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001e9e:	23f9      	movs	r3, #249	@ 0xf9
 8001ea0:	73fb      	strb	r3, [r7, #15]
 8001ea2:	e001      	b.n	8001ea8 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	000ffff0 	.word	0x000ffff0

08001ebc <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff f839 	bl	8000f3c <bmp2_init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001ece:	f107 0308 	add.w	r3, r7, #8
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff f91e 	bl	8001116 <bmp2_get_config>
 8001eda:	4603      	mov	r3, r0
 8001edc:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001eea:	f107 0308 	add.w	r3, r7, #8
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff f950 	bl	8001196 <bmp2_set_config>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001efa:	f107 0308 	add.w	r3, r7, #8
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	4619      	mov	r1, r3
 8001f02:	2003      	movs	r0, #3
 8001f04:	f7ff f982 	bl	800120c <bmp2_set_power_mode>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001f0c:	f107 0108 	add.w	r1, r7, #8
 8001f10:	f107 0310 	add.w	r3, r7, #16
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fa0c 	bl	8001334 <bmp2_compute_meas_time>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001f20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	4603      	mov	r3, r0
 8001f3a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001f40:	2300      	movs	r3, #0
 8001f42:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	6858      	ldr	r0, [r3, #4]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	891b      	ldrh	r3, [r3, #8]
 8001f50:	2200      	movs	r2, #0
 8001f52:	4619      	mov	r1, r3
 8001f54:	f002 fd2a 	bl	80049ac <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	f107 010f 	add.w	r1, r7, #15
 8001f60:	2305      	movs	r3, #5
 8001f62:	2201      	movs	r2, #1
 8001f64:	f003 facb 	bl	80054fe <HAL_SPI_Transmit>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	6818      	ldr	r0, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	2305      	movs	r3, #5
 8001f76:	68b9      	ldr	r1, [r7, #8]
 8001f78:	f003 fc2f 	bl	80057da <HAL_SPI_Receive>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	461a      	mov	r2, r3
 8001f80:	7dbb      	ldrb	r3, [r7, #22]
 8001f82:	4413      	add	r3, r2
 8001f84:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	6858      	ldr	r0, [r3, #4]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	891b      	ldrh	r3, [r3, #8]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4619      	mov	r1, r3
 8001f92:	f002 fd0b 	bl	80049ac <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8001f96:	7dbb      	ldrb	r3, [r7, #22]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <bmp2_spi_read+0x74>
    iError = -1;
 8001f9c:	23ff      	movs	r3, #255	@ 0xff
 8001f9e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8001fa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	4603      	mov	r3, r0
 8001fba:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	6858      	ldr	r0, [r3, #4]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	891b      	ldrh	r3, [r3, #8]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f002 fcea 	bl	80049ac <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	f107 010f 	add.w	r1, r7, #15
 8001fe0:	2305      	movs	r3, #5
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f003 fa8b 	bl	80054fe <HAL_SPI_Transmit>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	2305      	movs	r3, #5
 8001ff6:	68b9      	ldr	r1, [r7, #8]
 8001ff8:	f003 fa81 	bl	80054fe <HAL_SPI_Transmit>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	461a      	mov	r2, r3
 8002000:	7dbb      	ldrb	r3, [r7, #22]
 8002002:	4413      	add	r3, r2
 8002004:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	6858      	ldr	r0, [r3, #4]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	891b      	ldrh	r3, [r3, #8]
 800200e:	2201      	movs	r2, #1
 8002010:	4619      	mov	r1, r3
 8002012:	f002 fccb 	bl	80049ac <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002016:	7dbb      	ldrb	r3, [r7, #22]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <bmp2_spi_write+0x74>
    iError = -1;
 800201c:	23ff      	movs	r3, #255	@ 0xff
 800201e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002020:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a05      	ldr	r2, [pc, #20]	@ (8002050 <bmp2_delay_us+0x24>)
 800203a:	fba2 2303 	umull	r2, r3, r2, r3
 800203e:	099b      	lsrs	r3, r3, #6
 8002040:	4618      	mov	r0, r3
 8002042:	f002 f997 	bl	8004374 <HAL_Delay>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	10624dd3 	.word	0x10624dd3

08002054 <BMP2_ReadData>:
 *  @retval 0 -> Success.
 *  @retval <0 -> Failure.
 *
 */
int8_t BMP2_ReadData(struct bmp2_dev *dev, double* press, double* temp)
{
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b08b      	sub	sp, #44	@ 0x2c
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 8002060:	23ff      	movs	r3, #255	@ 0xff
 8002062:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  struct bmp2_status status;
  struct bmp2_data comp_data;
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	899b      	ldrh	r3, [r3, #12]
 800206c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 8002070:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002074:	68f9      	ldr	r1, [r7, #12]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff f89c 	bl	80011b4 <bmp2_get_status>
 800207c:	4603      	mov	r3, r0
 800207e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 8002082:	f107 0310 	add.w	r3, r7, #16
 8002086:	68f9      	ldr	r1, [r7, #12]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff f8d4 	bl	8001236 <bmp2_get_sensor_data>
 800208e:	4603      	mov	r3, r0
 8002090:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    *temp = comp_data.temperature;
 8002094:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	e9c1 2300 	strd	r2, r3, [r1]
    *press = comp_data.pressure / 100.0;
 800209e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002118 <BMP2_ReadData+0xc4>)
 80020a8:	f7fe fbe8 	bl	800087c <__aeabi_ddiv>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	e9c1 2300 	strd	r2, r3, [r1]
    try--;
 80020b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	3b01      	subs	r3, #1
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 80020c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <BMP2_ReadData+0x80>
 80020cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	dccd      	bgt.n	8002070 <BMP2_ReadData+0x1c>

  /* Save reading result in sensor handler */
  BMP2_GET_PRESS(dev) = *press;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020da:	68f9      	ldr	r1, [r7, #12]
 80020dc:	684c      	ldr	r4, [r1, #4]
 80020de:	4610      	mov	r0, r2
 80020e0:	4619      	mov	r1, r3
 80020e2:	f7fe fd63 	bl	8000bac <__aeabi_d2f>
 80020e6:	4603      	mov	r3, r0
 80020e8:	6163      	str	r3, [r4, #20]
  BMP2_GET_TEMP(dev) = *temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f0:	68f9      	ldr	r1, [r7, #12]
 80020f2:	684c      	ldr	r4, [r1, #4]
 80020f4:	4610      	mov	r0, r2
 80020f6:	4619      	mov	r1, r3
 80020f8:	f7fe fd58 	bl	8000bac <__aeabi_d2f>
 80020fc:	4603      	mov	r3, r0
 80020fe:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002108:	729a      	strb	r2, [r3, #10]

  return rslt;
 800210a:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
}
 800210e:	4618      	mov	r0, r3
 8002110:	372c      	adds	r7, #44	@ 0x2c
 8002112:	46bd      	mov	sp, r7
 8002114:	bd90      	pop	{r4, r7, pc}
 8002116:	bf00      	nop
 8002118:	40590000 	.word	0x40590000

0800211c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08e      	sub	sp, #56	@ 0x38
 8002120:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	60da      	str	r2, [r3, #12]
 8002130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002132:	4ba8      	ldr	r3, [pc, #672]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	4aa7      	ldr	r2, [pc, #668]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 8002138:	f043 0310 	orr.w	r3, r3, #16
 800213c:	6313      	str	r3, [r2, #48]	@ 0x30
 800213e:	4ba5      	ldr	r3, [pc, #660]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	623b      	str	r3, [r7, #32]
 8002148:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800214a:	4ba2      	ldr	r3, [pc, #648]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	4aa1      	ldr	r2, [pc, #644]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 8002150:	f043 0304 	orr.w	r3, r3, #4
 8002154:	6313      	str	r3, [r2, #48]	@ 0x30
 8002156:	4b9f      	ldr	r3, [pc, #636]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	61fb      	str	r3, [r7, #28]
 8002160:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002162:	4b9c      	ldr	r3, [pc, #624]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	4a9b      	ldr	r2, [pc, #620]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 8002168:	f043 0320 	orr.w	r3, r3, #32
 800216c:	6313      	str	r3, [r2, #48]	@ 0x30
 800216e:	4b99      	ldr	r3, [pc, #612]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	f003 0320 	and.w	r3, r3, #32
 8002176:	61bb      	str	r3, [r7, #24]
 8002178:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800217a:	4b96      	ldr	r3, [pc, #600]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	4a95      	ldr	r2, [pc, #596]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 8002180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002184:	6313      	str	r3, [r2, #48]	@ 0x30
 8002186:	4b93      	ldr	r3, [pc, #588]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	4b90      	ldr	r3, [pc, #576]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	4a8f      	ldr	r2, [pc, #572]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6313      	str	r3, [r2, #48]	@ 0x30
 800219e:	4b8d      	ldr	r3, [pc, #564]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021aa:	4b8a      	ldr	r3, [pc, #552]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ae:	4a89      	ldr	r2, [pc, #548]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 80021b0:	f043 0302 	orr.w	r3, r3, #2
 80021b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b6:	4b87      	ldr	r3, [pc, #540]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021c2:	4b84      	ldr	r3, [pc, #528]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	4a83      	ldr	r2, [pc, #524]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 80021c8:	f043 0308 	orr.w	r3, r3, #8
 80021cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ce:	4b81      	ldr	r3, [pc, #516]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021da:	4b7e      	ldr	r3, [pc, #504]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	4a7d      	ldr	r2, [pc, #500]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 80021e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e6:	4b7b      	ldr	r3, [pc, #492]	@ (80023d4 <MX_GPIO_Init+0x2b8>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ee:	607b      	str	r3, [r7, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP2_CSB_Pin|Alarm_LED_Pin, GPIO_PIN_RESET);
 80021f2:	2200      	movs	r2, #0
 80021f4:	f248 0110 	movw	r1, #32784	@ 0x8010
 80021f8:	4877      	ldr	r0, [pc, #476]	@ (80023d8 <MX_GPIO_Init+0x2bc>)
 80021fa:	f002 fbd7 	bl	80049ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80021fe:	2200      	movs	r2, #0
 8002200:	2140      	movs	r1, #64	@ 0x40
 8002202:	4876      	ldr	r0, [pc, #472]	@ (80023dc <MX_GPIO_Init+0x2c0>)
 8002204:	f002 fbd2 	bl	80049ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002208:	2200      	movs	r2, #0
 800220a:	2180      	movs	r1, #128	@ 0x80
 800220c:	4874      	ldr	r0, [pc, #464]	@ (80023e0 <MX_GPIO_Init+0x2c4>)
 800220e:	f002 fbcd 	bl	80049ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BMP2_CSB_Pin|Alarm_LED_Pin;
 8002212:	f248 0310 	movw	r3, #32784	@ 0x8010
 8002216:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002218:	2301      	movs	r3, #1
 800221a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002220:	2300      	movs	r3, #0
 8002222:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002224:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002228:	4619      	mov	r1, r3
 800222a:	486b      	ldr	r0, [pc, #428]	@ (80023d8 <MX_GPIO_Init+0x2bc>)
 800222c:	f002 f9fa 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002230:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002234:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002236:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800223a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002240:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002244:	4619      	mov	r1, r3
 8002246:	4867      	ldr	r0, [pc, #412]	@ (80023e4 <MX_GPIO_Init+0x2c8>)
 8002248:	f002 f9ec 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800224c:	2332      	movs	r3, #50	@ 0x32
 800224e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002258:	2303      	movs	r3, #3
 800225a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800225c:	230b      	movs	r3, #11
 800225e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002260:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002264:	4619      	mov	r1, r3
 8002266:	485f      	ldr	r0, [pc, #380]	@ (80023e4 <MX_GPIO_Init+0x2c8>)
 8002268:	f002 f9dc 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800226c:	2386      	movs	r3, #134	@ 0x86
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002278:	2303      	movs	r3, #3
 800227a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800227c:	230b      	movs	r3, #11
 800227e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002280:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002284:	4619      	mov	r1, r3
 8002286:	4858      	ldr	r0, [pc, #352]	@ (80023e8 <MX_GPIO_Init+0x2cc>)
 8002288:	f002 f9cc 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800228c:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002290:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229a:	2300      	movs	r3, #0
 800229c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800229e:	2301      	movs	r3, #1
 80022a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022a6:	4619      	mov	r1, r3
 80022a8:	484b      	ldr	r0, [pc, #300]	@ (80023d8 <MX_GPIO_Init+0x2bc>)
 80022aa:	f002 f9bb 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PIR_Livingroom_Pin|PIR_Garage_Pin|PIR_Kitchen_Pin;
 80022ae:	f44f 43a8 	mov.w	r3, #21504	@ 0x5400
 80022b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022c0:	4619      	mov	r1, r3
 80022c2:	4845      	ldr	r0, [pc, #276]	@ (80023d8 <MX_GPIO_Init+0x2bc>)
 80022c4:	f002 f9ae 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80022c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d6:	2303      	movs	r3, #3
 80022d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022da:	230b      	movs	r3, #11
 80022dc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80022de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022e2:	4619      	mov	r1, r3
 80022e4:	483e      	ldr	r0, [pc, #248]	@ (80023e0 <MX_GPIO_Init+0x2c4>)
 80022e6:	f002 f99d 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80022ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f0:	2302      	movs	r3, #2
 80022f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022f4:	2301      	movs	r3, #1
 80022f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f8:	2303      	movs	r3, #3
 80022fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022fc:	2307      	movs	r3, #7
 80022fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002300:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002304:	4619      	mov	r1, r3
 8002306:	4839      	ldr	r0, [pc, #228]	@ (80023ec <MX_GPIO_Init+0x2d0>)
 8002308:	f002 f98c 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800230c:	2340      	movs	r3, #64	@ 0x40
 800230e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002310:	2301      	movs	r3, #1
 8002312:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002318:	2300      	movs	r3, #0
 800231a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800231c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002320:	4619      	mov	r1, r3
 8002322:	482e      	ldr	r0, [pc, #184]	@ (80023dc <MX_GPIO_Init+0x2c0>)
 8002324:	f002 f97e 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002328:	2380      	movs	r3, #128	@ 0x80
 800232a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800232c:	2300      	movs	r3, #0
 800232e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002338:	4619      	mov	r1, r3
 800233a:	4828      	ldr	r0, [pc, #160]	@ (80023dc <MX_GPIO_Init+0x2c0>)
 800233c:	f002 f972 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002340:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002344:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234e:	2303      	movs	r3, #3
 8002350:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002352:	230a      	movs	r3, #10
 8002354:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002356:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800235a:	4619      	mov	r1, r3
 800235c:	4822      	ldr	r0, [pc, #136]	@ (80023e8 <MX_GPIO_Init+0x2cc>)
 800235e:	f002 f961 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002362:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002366:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002368:	2300      	movs	r3, #0
 800236a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002370:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002374:	4619      	mov	r1, r3
 8002376:	481c      	ldr	r0, [pc, #112]	@ (80023e8 <MX_GPIO_Init+0x2cc>)
 8002378:	f002 f954 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800237c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002380:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002382:	2302      	movs	r3, #2
 8002384:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238a:	2303      	movs	r3, #3
 800238c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800238e:	230b      	movs	r3, #11
 8002390:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002396:	4619      	mov	r1, r3
 8002398:	4810      	ldr	r0, [pc, #64]	@ (80023dc <MX_GPIO_Init+0x2c0>)
 800239a:	f002 f943 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800239e:	2380      	movs	r3, #128	@ 0x80
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a2:	2301      	movs	r3, #1
 80023a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023aa:	2300      	movs	r3, #0
 80023ac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80023ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023b2:	4619      	mov	r1, r3
 80023b4:	480a      	ldr	r0, [pc, #40]	@ (80023e0 <MX_GPIO_Init+0x2c4>)
 80023b6:	f002 f935 	bl	8004624 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2100      	movs	r1, #0
 80023be:	2028      	movs	r0, #40	@ 0x28
 80023c0:	f002 f8d7 	bl	8004572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023c4:	2028      	movs	r0, #40	@ 0x28
 80023c6:	f002 f8f0 	bl	80045aa <HAL_NVIC_EnableIRQ>

}
 80023ca:	bf00      	nop
 80023cc:	3738      	adds	r7, #56	@ 0x38
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40021800 	.word	0x40021800
 80023e0:	40020400 	.word	0x40020400
 80023e4:	40020800 	.word	0x40020800
 80023e8:	40020000 	.word	0x40020000
 80023ec:	40020c00 	.word	0x40020c00

080023f0 <keypad_config>:

const char Rows[4]={R1, R2, R3, R4};
const char Cols[4]={C1, C2, C3, C4};

void keypad_config(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	@ 0x28
 80023f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  if (KEYPAD_4x4_GPIO == GPIOA) __HAL_RCC_GPIOA_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOB) __HAL_RCC_GPIOB_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOC) __HAL_RCC_GPIOC_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOD) __HAL_RCC_GPIOD_CLK_ENABLE(); else
 80023f6:	4b16      	ldr	r3, [pc, #88]	@ (8002450 <keypad_config+0x60>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	4a15      	ldr	r2, [pc, #84]	@ (8002450 <keypad_config+0x60>)
 80023fc:	f043 0308 	orr.w	r3, r3, #8
 8002400:	6313      	str	r3, [r2, #48]	@ 0x30
 8002402:	4b13      	ldr	r3, [pc, #76]	@ (8002450 <keypad_config+0x60>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
  if (KEYPAD_4x4_GPIO == GPIOE) __HAL_RCC_GPIOE_CLK_ENABLE();


  GPIO_InitStruct.Pin = R1 | R2 | R3 | R4;
 800240e:	230f      	movs	r3, #15
 8002410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002412:	2301      	movs	r3, #1
 8002414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241a:	2300      	movs	r3, #0
 800241c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEYPAD_4x4_GPIO, &GPIO_InitStruct);
 800241e:	f107 0314 	add.w	r3, r7, #20
 8002422:	4619      	mov	r1, r3
 8002424:	480b      	ldr	r0, [pc, #44]	@ (8002454 <keypad_config+0x64>)
 8002426:	f002 f8fd 	bl	8004624 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = C1 | C2 | C3 | C4;
 800242a:	23f0      	movs	r3, #240	@ 0xf0
 800242c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002432:	2302      	movs	r3, #2
 8002434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002436:	2300      	movs	r3, #0
 8002438:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEYPAD_4x4_GPIO, &GPIO_InitStruct);
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4619      	mov	r1, r3
 8002440:	4804      	ldr	r0, [pc, #16]	@ (8002454 <keypad_config+0x64>)
 8002442:	f002 f8ef 	bl	8004624 <HAL_GPIO_Init>

}
 8002446:	bf00      	nop
 8002448:	3728      	adds	r7, #40	@ 0x28
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800
 8002454:	40020c00 	.word	0x40020c00

08002458 <keypad_readkey>:

char keypad_readkey(void)
{ //returns ASCII code of a pressed key
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
  unsigned char r, c;
  char pressedKey=0x00;
 800245e:	2300      	movs	r3, #0
 8002460:	717b      	strb	r3, [r7, #5]

  r=0;
 8002462:	2300      	movs	r3, #0
 8002464:	71fb      	strb	r3, [r7, #7]
  while (r<4) {
 8002466:	e02d      	b.n	80024c4 <keypad_readkey+0x6c>
    HAL_GPIO_WritePin(KEYPAD_4x4_GPIO, Rows[r], GPIO_PIN_SET);        //activate row
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	4a1a      	ldr	r2, [pc, #104]	@ (80024d4 <keypad_readkey+0x7c>)
 800246c:	5cd3      	ldrb	r3, [r2, r3]
 800246e:	2201      	movs	r2, #1
 8002470:	4619      	mov	r1, r3
 8002472:	4819      	ldr	r0, [pc, #100]	@ (80024d8 <keypad_readkey+0x80>)
 8002474:	f002 fa9a 	bl	80049ac <HAL_GPIO_WritePin>
    c=0;
 8002478:	2300      	movs	r3, #0
 800247a:	71bb      	strb	r3, [r7, #6]
    while (c<4) {
 800247c:	e014      	b.n	80024a8 <keypad_readkey+0x50>
      if (HAL_GPIO_ReadPin(KEYPAD_4x4_GPIO, Cols[c])==GPIO_PIN_SET){  //check columns
 800247e:	79bb      	ldrb	r3, [r7, #6]
 8002480:	4a16      	ldr	r2, [pc, #88]	@ (80024dc <keypad_readkey+0x84>)
 8002482:	5cd3      	ldrb	r3, [r2, r3]
 8002484:	4619      	mov	r1, r3
 8002486:	4814      	ldr	r0, [pc, #80]	@ (80024d8 <keypad_readkey+0x80>)
 8002488:	f002 fa78 	bl	800497c <HAL_GPIO_ReadPin>
 800248c:	4603      	mov	r3, r0
 800248e:	2b01      	cmp	r3, #1
 8002490:	d107      	bne.n	80024a2 <keypad_readkey+0x4a>
        pressedKey=KeyMap[r][c];                                   //if column active - find key value
 8002492:	79fa      	ldrb	r2, [r7, #7]
 8002494:	79bb      	ldrb	r3, [r7, #6]
 8002496:	4912      	ldr	r1, [pc, #72]	@ (80024e0 <keypad_readkey+0x88>)
 8002498:	0092      	lsls	r2, r2, #2
 800249a:	440a      	add	r2, r1
 800249c:	4413      	add	r3, r2
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	717b      	strb	r3, [r7, #5]
      }
      c++;
 80024a2:	79bb      	ldrb	r3, [r7, #6]
 80024a4:	3301      	adds	r3, #1
 80024a6:	71bb      	strb	r3, [r7, #6]
    while (c<4) {
 80024a8:	79bb      	ldrb	r3, [r7, #6]
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d9e7      	bls.n	800247e <keypad_readkey+0x26>
    }
    HAL_GPIO_WritePin(KEYPAD_4x4_GPIO, Rows[r], GPIO_PIN_RESET);      //deactivate row
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	4a08      	ldr	r2, [pc, #32]	@ (80024d4 <keypad_readkey+0x7c>)
 80024b2:	5cd3      	ldrb	r3, [r2, r3]
 80024b4:	2200      	movs	r2, #0
 80024b6:	4619      	mov	r1, r3
 80024b8:	4807      	ldr	r0, [pc, #28]	@ (80024d8 <keypad_readkey+0x80>)
 80024ba:	f002 fa77 	bl	80049ac <HAL_GPIO_WritePin>
    r++;
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	3301      	adds	r3, #1
 80024c2:	71fb      	strb	r3, [r7, #7]
  while (r<4) {
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d9ce      	bls.n	8002468 <keypad_readkey+0x10>
  }
  return pressedKey;                                               //return ASCII key value
 80024ca:	797b      	ldrb	r3, [r7, #5]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	08008684 	.word	0x08008684
 80024d8:	40020c00 	.word	0x40020c00
 80024dc:	08008688 	.word	0x08008688
 80024e0:	08008674 	.word	0x08008674

080024e4 <LCD_WriteNibble>:

GPIO_InitTypeDef GPIO_InitStruct;

//-----------------------------------------------------------------------------
void LCD_WriteNibble(char nibbleToWrite)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_SET);
 80024ee:	2201      	movs	r2, #1
 80024f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80024f4:	4818      	ldr	r0, [pc, #96]	@ (8002558 <LCD_WriteNibble+0x74>)
 80024f6:	f002 fa59 	bl	80049ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D4, (GPIO_PinState)(nibbleToWrite & 0x01));
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	b2db      	uxtb	r3, r3
 8002502:	461a      	mov	r2, r3
 8002504:	2108      	movs	r1, #8
 8002506:	4814      	ldr	r0, [pc, #80]	@ (8002558 <LCD_WriteNibble+0x74>)
 8002508:	f002 fa50 	bl	80049ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D5, (GPIO_PinState)(nibbleToWrite & 0x02));
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	b2db      	uxtb	r3, r3
 8002514:	461a      	mov	r2, r3
 8002516:	2104      	movs	r1, #4
 8002518:	480f      	ldr	r0, [pc, #60]	@ (8002558 <LCD_WriteNibble+0x74>)
 800251a:	f002 fa47 	bl	80049ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D6, (GPIO_PinState)(nibbleToWrite & 0x04));
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	b2db      	uxtb	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	2140      	movs	r1, #64	@ 0x40
 800252a:	480b      	ldr	r0, [pc, #44]	@ (8002558 <LCD_WriteNibble+0x74>)
 800252c:	f002 fa3e 	bl	80049ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D7, (GPIO_PinState)(nibbleToWrite & 0x08));
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	b2db      	uxtb	r3, r3
 8002538:	461a      	mov	r2, r3
 800253a:	2101      	movs	r1, #1
 800253c:	4806      	ldr	r0, [pc, #24]	@ (8002558 <LCD_WriteNibble+0x74>)
 800253e:	f002 fa35 	bl	80049ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_RESET);
 8002542:	2200      	movs	r2, #0
 8002544:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002548:	4803      	ldr	r0, [pc, #12]	@ (8002558 <LCD_WriteNibble+0x74>)
 800254a:	f002 fa2f 	bl	80049ac <HAL_GPIO_WritePin>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40020800 	.word	0x40020800

0800255c <LCD_ReadNibble>:


//-----------------------------------------------------------------------------
unsigned char LCD_ReadNibble(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
  unsigned char tmp = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_SET);
 8002566:	2201      	movs	r2, #1
 8002568:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800256c:	481e      	ldr	r0, [pc, #120]	@ (80025e8 <LCD_ReadNibble+0x8c>)
 800256e:	f002 fa1d 	bl	80049ac <HAL_GPIO_WritePin>
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D4) << 0);
 8002572:	2108      	movs	r1, #8
 8002574:	481c      	ldr	r0, [pc, #112]	@ (80025e8 <LCD_ReadNibble+0x8c>)
 8002576:	f002 fa01 	bl	800497c <HAL_GPIO_ReadPin>
 800257a:	4603      	mov	r3, r0
 800257c:	b25a      	sxtb	r2, r3
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	4313      	orrs	r3, r2
 8002584:	b25b      	sxtb	r3, r3
 8002586:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D5) << 1);
 8002588:	2104      	movs	r1, #4
 800258a:	4817      	ldr	r0, [pc, #92]	@ (80025e8 <LCD_ReadNibble+0x8c>)
 800258c:	f002 f9f6 	bl	800497c <HAL_GPIO_ReadPin>
 8002590:	4603      	mov	r3, r0
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	b25a      	sxtb	r2, r3
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	4313      	orrs	r3, r2
 800259c:	b25b      	sxtb	r3, r3
 800259e:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D6) << 2);
 80025a0:	2140      	movs	r1, #64	@ 0x40
 80025a2:	4811      	ldr	r0, [pc, #68]	@ (80025e8 <LCD_ReadNibble+0x8c>)
 80025a4:	f002 f9ea 	bl	800497c <HAL_GPIO_ReadPin>
 80025a8:	4603      	mov	r3, r0
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	b25a      	sxtb	r2, r3
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	b25b      	sxtb	r3, r3
 80025b6:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D7) << 3);
 80025b8:	2101      	movs	r1, #1
 80025ba:	480b      	ldr	r0, [pc, #44]	@ (80025e8 <LCD_ReadNibble+0x8c>)
 80025bc:	f002 f9de 	bl	800497c <HAL_GPIO_ReadPin>
 80025c0:	4603      	mov	r3, r0
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	b25a      	sxtb	r2, r3
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	b25b      	sxtb	r3, r3
 80025ce:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_RESET);
 80025d0:	2200      	movs	r2, #0
 80025d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025d6:	4804      	ldr	r0, [pc, #16]	@ (80025e8 <LCD_ReadNibble+0x8c>)
 80025d8:	f002 f9e8 	bl	80049ac <HAL_GPIO_WritePin>
  return tmp;
 80025dc:	79fb      	ldrb	r3, [r7, #7]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40020800 	.word	0x40020800

080025ec <LCD_ReadStatus>:


//-----------------------------------------------------------------------------
unsigned char LCD_ReadStatus(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
  unsigned char status = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	71fb      	strb	r3, [r7, #7]
  
  GPIO_InitStruct.Pin =  LCD_D4 | LCD_D5 | LCD_D6 | LCD_D7;
 80025f6:	4b21      	ldr	r3, [pc, #132]	@ (800267c <LCD_ReadStatus+0x90>)
 80025f8:	224d      	movs	r2, #77	@ 0x4d
 80025fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025fc:	4b1f      	ldr	r3, [pc, #124]	@ (800267c <LCD_ReadStatus+0x90>)
 80025fe:	2200      	movs	r2, #0
 8002600:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002602:	4b1e      	ldr	r3, [pc, #120]	@ (800267c <LCD_ReadStatus+0x90>)
 8002604:	2201      	movs	r2, #1
 8002606:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002608:	4b1c      	ldr	r3, [pc, #112]	@ (800267c <LCD_ReadStatus+0x90>)
 800260a:	2201      	movs	r2, #1
 800260c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800260e:	491b      	ldr	r1, [pc, #108]	@ (800267c <LCD_ReadStatus+0x90>)
 8002610:	481b      	ldr	r0, [pc, #108]	@ (8002680 <LCD_ReadStatus+0x94>)
 8002612:	f002 f807 	bl	8004624 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW, GPIO_PIN_SET);
 8002616:	2201      	movs	r2, #1
 8002618:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800261c:	4818      	ldr	r0, [pc, #96]	@ (8002680 <LCD_ReadStatus+0x94>)
 800261e:	f002 f9c5 	bl	80049ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RS, GPIO_PIN_RESET);
 8002622:	2200      	movs	r2, #0
 8002624:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002628:	4815      	ldr	r0, [pc, #84]	@ (8002680 <LCD_ReadStatus+0x94>)
 800262a:	f002 f9bf 	bl	80049ac <HAL_GPIO_WritePin>
  
  status |= (LCD_ReadNibble() << 4);
 800262e:	f7ff ff95 	bl	800255c <LCD_ReadNibble>
 8002632:	4603      	mov	r3, r0
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	b25a      	sxtb	r2, r3
 8002638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263c:	4313      	orrs	r3, r2
 800263e:	b25b      	sxtb	r3, r3
 8002640:	71fb      	strb	r3, [r7, #7]
  status |= LCD_ReadNibble();
 8002642:	f7ff ff8b 	bl	800255c <LCD_ReadNibble>
 8002646:	4603      	mov	r3, r0
 8002648:	461a      	mov	r2, r3
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	4313      	orrs	r3, r2
 800264e:	71fb      	strb	r3, [r7, #7]
  

  GPIO_InitStruct.Pin = LCD_D4|LCD_D5|LCD_D6|LCD_D7;
 8002650:	4b0a      	ldr	r3, [pc, #40]	@ (800267c <LCD_ReadStatus+0x90>)
 8002652:	224d      	movs	r2, #77	@ 0x4d
 8002654:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002656:	4b09      	ldr	r3, [pc, #36]	@ (800267c <LCD_ReadStatus+0x90>)
 8002658:	2201      	movs	r2, #1
 800265a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	4b07      	ldr	r3, [pc, #28]	@ (800267c <LCD_ReadStatus+0x90>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002662:	4b06      	ldr	r3, [pc, #24]	@ (800267c <LCD_ReadStatus+0x90>)
 8002664:	2201      	movs	r2, #1
 8002666:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002668:	4904      	ldr	r1, [pc, #16]	@ (800267c <LCD_ReadStatus+0x90>)
 800266a:	4805      	ldr	r0, [pc, #20]	@ (8002680 <LCD_ReadStatus+0x94>)
 800266c:	f001 ffda 	bl	8004624 <HAL_GPIO_Init>

  return status;
 8002670:	79fb      	ldrb	r3, [r7, #7]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000184 	.word	0x20000184
 8002680:	40020800 	.word	0x40020800

08002684 <LCD_WriteData>:


//-----------------------------------------------------------------------------
void LCD_WriteData(char dataToWrite)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW, GPIO_PIN_RESET);
 800268e:	2200      	movs	r2, #0
 8002690:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002694:	4810      	ldr	r0, [pc, #64]	@ (80026d8 <LCD_WriteData+0x54>)
 8002696:	f002 f989 	bl	80049ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RS, GPIO_PIN_SET);
 800269a:	2201      	movs	r2, #1
 800269c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80026a0:	480d      	ldr	r0, [pc, #52]	@ (80026d8 <LCD_WriteData+0x54>)
 80026a2:	f002 f983 	bl	80049ac <HAL_GPIO_WritePin>
  
  LCD_WriteNibble(dataToWrite >> 4);
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff19 	bl	80024e4 <LCD_WriteNibble>
  LCD_WriteNibble(dataToWrite & 0x0F);
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ff12 	bl	80024e4 <LCD_WriteNibble>
  
  while(LCD_ReadStatus() & 0x80);
 80026c0:	bf00      	nop
 80026c2:	f7ff ff93 	bl	80025ec <LCD_ReadStatus>
 80026c6:	4603      	mov	r3, r0
 80026c8:	b25b      	sxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	dbf9      	blt.n	80026c2 <LCD_WriteData+0x3e>
}
 80026ce:	bf00      	nop
 80026d0:	bf00      	nop
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40020800 	.word	0x40020800

080026dc <LCD_WriteCommand>:


//-----------------------------------------------------------------------------
void LCD_WriteCommand(char commandToWrite)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW | LCD_RS, GPIO_PIN_RESET);
 80026e6:	2200      	movs	r2, #0
 80026e8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80026ec:	480d      	ldr	r0, [pc, #52]	@ (8002724 <LCD_WriteCommand+0x48>)
 80026ee:	f002 f95d 	bl	80049ac <HAL_GPIO_WritePin>
  LCD_WriteNibble(commandToWrite >> 4);
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fef3 	bl	80024e4 <LCD_WriteNibble>
  LCD_WriteNibble(commandToWrite & 0x0F);
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	f003 030f 	and.w	r3, r3, #15
 8002704:	b2db      	uxtb	r3, r3
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff feec 	bl	80024e4 <LCD_WriteNibble>
  
  while(LCD_ReadStatus() & 0x80);
 800270c:	bf00      	nop
 800270e:	f7ff ff6d 	bl	80025ec <LCD_ReadStatus>
 8002712:	4603      	mov	r3, r0
 8002714:	b25b      	sxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	dbf9      	blt.n	800270e <LCD_WriteCommand+0x32>
}
 800271a:	bf00      	nop
 800271c:	bf00      	nop
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40020800 	.word	0x40020800

08002728 <LCD_WriteText>:


//-----------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  while(*text)
 8002730:	e006      	b.n	8002740 <LCD_WriteText+0x18>
    LCD_WriteData(*text++);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff ffa2 	bl	8002684 <LCD_WriteData>
  while(*text)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f4      	bne.n	8002732 <LCD_WriteText+0xa>
}
 8002748:	bf00      	nop
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <LCD_GoTo>:


//-----------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	460a      	mov	r2, r1
 800275c:	71fb      	strb	r3, [r7, #7]
 800275e:	4613      	mov	r3, r2
 8002760:	71bb      	strb	r3, [r7, #6]
  LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 8002762:	79bb      	ldrb	r3, [r7, #6]
 8002764:	019b      	lsls	r3, r3, #6
 8002766:	b2da      	uxtb	r2, r3
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	4413      	add	r3, r2
 800276c:	b2db      	uxtb	r3, r3
 800276e:	b25b      	sxtb	r3, r3
 8002770:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002774:	b25b      	sxtb	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ffaf 	bl	80026dc <LCD_WriteCommand>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <LCD_WriteTextXY>:


//-----------------------------------------------------------------------------
void LCD_WriteTextXY(char * text, unsigned char x, unsigned char y)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	460b      	mov	r3, r1
 8002790:	70fb      	strb	r3, [r7, #3]
 8002792:	4613      	mov	r3, r2
 8002794:	70bb      	strb	r3, [r7, #2]
  LCD_GoTo(x,y);
 8002796:	78ba      	ldrb	r2, [r7, #2]
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ffd8 	bl	8002752 <LCD_GoTo>
  while(*text)
 80027a2:	e006      	b.n	80027b2 <LCD_WriteTextXY+0x2c>
    LCD_WriteData(*text++);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff69 	bl	8002684 <LCD_WriteData>
  while(*text)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f4      	bne.n	80027a4 <LCD_WriteTextXY+0x1e>
}
 80027ba:	bf00      	nop
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <LCD_Initialize>:
}


//-----------------------------------------------------------------------------
void LCD_Initialize(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0
  volatile unsigned char i = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	77fb      	strb	r3, [r7, #31]
  volatile unsigned int delayCnt = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61bb      	str	r3, [r7, #24]
  
  if (LCD_GPIO == GPIOA) __HAL_RCC_GPIOA_CLK_ENABLE(); else
  if (LCD_GPIO == GPIOB) __HAL_RCC_GPIOB_CLK_ENABLE(); else
  if (LCD_GPIO == GPIOC) __HAL_RCC_GPIOC_CLK_ENABLE(); else
 80027d2:	4b34      	ldr	r3, [pc, #208]	@ (80028a4 <LCD_Initialize+0xe0>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	4a33      	ldr	r2, [pc, #204]	@ (80028a4 <LCD_Initialize+0xe0>)
 80027d8:	f043 0304 	orr.w	r3, r3, #4
 80027dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027de:	4b31      	ldr	r3, [pc, #196]	@ (80028a4 <LCD_Initialize+0xe0>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
  if (LCD_GPIO == GPIOD) __HAL_RCC_GPIOD_CLK_ENABLE(); else
  if (LCD_GPIO == GPIOE) __HAL_RCC_GPIOE_CLK_ENABLE();


  GPIO_InitStruct.Pin = LCD_D4|LCD_D5|LCD_D6|LCD_D7|LCD_RS|LCD_RW|LCD_EN;
 80027ea:	4b2f      	ldr	r3, [pc, #188]	@ (80028a8 <LCD_Initialize+0xe4>)
 80027ec:	f641 424d 	movw	r2, #7245	@ 0x1c4d
 80027f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f2:	4b2d      	ldr	r3, [pc, #180]	@ (80028a8 <LCD_Initialize+0xe4>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	4b2b      	ldr	r3, [pc, #172]	@ (80028a8 <LCD_Initialize+0xe4>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80027fe:	4b2a      	ldr	r3, [pc, #168]	@ (80028a8 <LCD_Initialize+0xe4>)
 8002800:	2201      	movs	r2, #1
 8002802:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_GPIO, &GPIO_InitStruct);
 8002804:	4928      	ldr	r1, [pc, #160]	@ (80028a8 <LCD_Initialize+0xe4>)
 8002806:	4829      	ldr	r0, [pc, #164]	@ (80028ac <LCD_Initialize+0xe8>)
 8002808:	f001 ff0c 	bl	8004624 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RS | LCD_EN | LCD_RW, GPIO_PIN_RESET);
 800280c:	2200      	movs	r2, #0
 800280e:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8002812:	4826      	ldr	r0, [pc, #152]	@ (80028ac <LCD_Initialize+0xe8>)
 8002814:	f002 f8ca 	bl	80049ac <HAL_GPIO_WritePin>
  

  for(delayCnt = 0; delayCnt < 300000; delayCnt++);
 8002818:	2300      	movs	r3, #0
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	e002      	b.n	8002824 <LCD_Initialize+0x60>
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	3301      	adds	r3, #1
 8002822:	61bb      	str	r3, [r7, #24]
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	4a22      	ldr	r2, [pc, #136]	@ (80028b0 <LCD_Initialize+0xec>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d9f8      	bls.n	800281e <LCD_Initialize+0x5a>

  for(i = 0; i < 3; i++) {
 800282c:	2300      	movs	r3, #0
 800282e:	77fb      	strb	r3, [r7, #31]
 8002830:	e012      	b.n	8002858 <LCD_Initialize+0x94>
    LCD_WriteNibble(0x03);            
 8002832:	2003      	movs	r0, #3
 8002834:	f7ff fe56 	bl	80024e4 <LCD_WriteNibble>
    for(delayCnt = 0; delayCnt < 30000; delayCnt++);
 8002838:	2300      	movs	r3, #0
 800283a:	61bb      	str	r3, [r7, #24]
 800283c:	e002      	b.n	8002844 <LCD_Initialize+0x80>
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	3301      	adds	r3, #1
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	f247 522f 	movw	r2, #29999	@ 0x752f
 800284a:	4293      	cmp	r3, r2
 800284c:	d9f7      	bls.n	800283e <LCD_Initialize+0x7a>
  for(i = 0; i < 3; i++) {
 800284e:	7ffb      	ldrb	r3, [r7, #31]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	3301      	adds	r3, #1
 8002854:	b2db      	uxtb	r3, r3
 8002856:	77fb      	strb	r3, [r7, #31]
 8002858:	7ffb      	ldrb	r3, [r7, #31]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d9e8      	bls.n	8002832 <LCD_Initialize+0x6e>
  }
  
  LCD_WriteNibble(0x02);             
 8002860:	2002      	movs	r0, #2
 8002862:	f7ff fe3f 	bl	80024e4 <LCD_WriteNibble>
  
  for(delayCnt = 0; delayCnt < 6000; delayCnt++);
 8002866:	2300      	movs	r3, #0
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	e002      	b.n	8002872 <LCD_Initialize+0xae>
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	3301      	adds	r3, #1
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	f241 726f 	movw	r2, #5999	@ 0x176f
 8002878:	4293      	cmp	r3, r2
 800287a:	d9f7      	bls.n	800286c <LCD_Initialize+0xa8>
     
  LCD_WriteCommand(HD44780_FUNCTION_SET | 
 800287c:	2028      	movs	r0, #40	@ 0x28
 800287e:	f7ff ff2d 	bl	80026dc <LCD_WriteCommand>
                   HD44780_FONT5x7 | 
                   HD44780_TWO_LINE | 
                   HD44780_4_BIT);
  
  LCD_WriteCommand(HD44780_DISPLAY_ONOFF | 
 8002882:	2008      	movs	r0, #8
 8002884:	f7ff ff2a 	bl	80026dc <LCD_WriteCommand>
                   HD44780_DISPLAY_OFF); 
  
  LCD_WriteCommand(HD44780_CLEAR); 
 8002888:	2001      	movs	r0, #1
 800288a:	f7ff ff27 	bl	80026dc <LCD_WriteCommand>
  
  LCD_WriteCommand(HD44780_ENTRY_MODE | 
 800288e:	2006      	movs	r0, #6
 8002890:	f7ff ff24 	bl	80026dc <LCD_WriteCommand>
                   HD44780_EM_SHIFT_CURSOR | 
                   HD44780_EM_INCREMENT);
  
  LCD_WriteCommand(HD44780_DISPLAY_ONOFF | 
 8002894:	200c      	movs	r0, #12
 8002896:	f7ff ff21 	bl	80026dc <LCD_WriteCommand>
                   HD44780_DISPLAY_ON |
                   HD44780_CURSOR_OFF | 
                   HD44780_CURSOR_NOBLINK);
}
 800289a:	bf00      	nop
 800289c:	3720      	adds	r7, #32
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800
 80028a8:	20000184 	.word	0x20000184
 80028ac:	40020800 	.word	0x40020800
 80028b0:	000493df 	.word	0x000493df

080028b4 <move_menu>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void move_menu(char *a[])
  {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	symbol[0] = keypad_readkey();
 80028bc:	f7ff fdcc 	bl	8002458 <keypad_readkey>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461a      	mov	r2, r3
 80028c4:	4b29      	ldr	r3, [pc, #164]	@ (800296c <move_menu+0xb8>)
 80028c6:	701a      	strb	r2, [r3, #0]
	  if (symbol[0] == 'B' && (position<max_pos)) {
 80028c8:	4b28      	ldr	r3, [pc, #160]	@ (800296c <move_menu+0xb8>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b42      	cmp	r3, #66	@ 0x42
 80028ce:	d10e      	bne.n	80028ee <move_menu+0x3a>
 80028d0:	4b27      	ldr	r3, [pc, #156]	@ (8002970 <move_menu+0xbc>)
 80028d2:	781a      	ldrb	r2, [r3, #0]
 80028d4:	4b27      	ldr	r3, [pc, #156]	@ (8002974 <move_menu+0xc0>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d208      	bcs.n	80028ee <move_menu+0x3a>
	  	   	  position++;
 80028dc:	4b24      	ldr	r3, [pc, #144]	@ (8002970 <move_menu+0xbc>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	3301      	adds	r3, #1
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	4b22      	ldr	r3, [pc, #136]	@ (8002970 <move_menu+0xbc>)
 80028e6:	701a      	strb	r2, [r3, #0]
	  	   	  refreshLCD=true;
 80028e8:	4b23      	ldr	r3, [pc, #140]	@ (8002978 <move_menu+0xc4>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	701a      	strb	r2, [r3, #0]
	  	   	}

	  	   	if (symbol[0] == 'A' && (position>1)) {
 80028ee:	4b1f      	ldr	r3, [pc, #124]	@ (800296c <move_menu+0xb8>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b41      	cmp	r3, #65	@ 0x41
 80028f4:	d10c      	bne.n	8002910 <move_menu+0x5c>
 80028f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002970 <move_menu+0xbc>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d908      	bls.n	8002910 <move_menu+0x5c>
	  	   	  position--;
 80028fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002970 <move_menu+0xbc>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	3b01      	subs	r3, #1
 8002904:	b2da      	uxtb	r2, r3
 8002906:	4b1a      	ldr	r3, [pc, #104]	@ (8002970 <move_menu+0xbc>)
 8002908:	701a      	strb	r2, [r3, #0]
	  	   	  refreshLCD=true;
 800290a:	4b1b      	ldr	r3, [pc, #108]	@ (8002978 <move_menu+0xc4>)
 800290c:	2201      	movs	r2, #1
 800290e:	701a      	strb	r2, [r3, #0]
	  	   	}
	  	  if (refreshLCD){                           //Odswiezanie LCD tylko przy zmiane zawartosci - usuwa problem "migotania" LCD
 8002910:	4b19      	ldr	r3, [pc, #100]	@ (8002978 <move_menu+0xc4>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d024      	beq.n	8002962 <move_menu+0xae>
	   	  LCD_WriteCommand(HD44780_CLEAR);
 8002918:	2001      	movs	r0, #1
 800291a:	f7ff fedf 	bl	80026dc <LCD_WriteCommand>
	   	  LCD_WriteText("->");
 800291e:	4817      	ldr	r0, [pc, #92]	@ (800297c <move_menu+0xc8>)
 8002920:	f7ff ff02 	bl	8002728 <LCD_WriteText>
	   	  LCD_WriteText(a[position-1]);
 8002924:	4b12      	ldr	r3, [pc, #72]	@ (8002970 <move_menu+0xbc>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	4413      	add	r3, r2
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fef5 	bl	8002728 <LCD_WriteText>
	   	  if (position<4){
 800293e:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <move_menu+0xbc>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b03      	cmp	r3, #3
 8002944:	d80a      	bhi.n	800295c <move_menu+0xa8>
	   		LCD_WriteTextXY(a[position-1+1],2,1);
 8002946:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <move_menu+0xbc>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	4413      	add	r3, r2
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2201      	movs	r2, #1
 8002954:	2102      	movs	r1, #2
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff ff15 	bl	8002786 <LCD_WriteTextXY>
	   	  }
	   	  refreshLCD=false;
 800295c:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <move_menu+0xc4>)
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]
	   	}
  }
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000198 	.word	0x20000198
 8002970:	20000054 	.word	0x20000054
 8002974:	20000055 	.word	0x20000055
 8002978:	200001d6 	.word	0x200001d6
 800297c:	080085c4 	.word	0x080085c4

08002980 <roundToTwoDecimals>:

double roundToTwoDecimals(double value) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	ed87 0b00 	vstr	d0, [r7]
	return floor(value * 100.0 + 0.5) / 100.0;
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	4b15      	ldr	r3, [pc, #84]	@ (80029e4 <roundToTwoDecimals+0x64>)
 8002990:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002994:	f7fd fe48 	bl	8000628 <__aeabi_dmul>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4610      	mov	r0, r2
 800299e:	4619      	mov	r1, r3
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	4b10      	ldr	r3, [pc, #64]	@ (80029e8 <roundToTwoDecimals+0x68>)
 80029a6:	f7fd fc89 	bl	80002bc <__adddf3>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	ec43 2b17 	vmov	d7, r2, r3
 80029b2:	eeb0 0a47 	vmov.f32	s0, s14
 80029b6:	eef0 0a67 	vmov.f32	s1, s15
 80029ba:	f005 fd11 	bl	80083e0 <floor>
 80029be:	ec51 0b10 	vmov	r0, r1, d0
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	4b07      	ldr	r3, [pc, #28]	@ (80029e4 <roundToTwoDecimals+0x64>)
 80029c8:	f7fd ff58 	bl	800087c <__aeabi_ddiv>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	ec43 2b17 	vmov	d7, r2, r3
}
 80029d4:	eeb0 0a47 	vmov.f32	s0, s14
 80029d8:	eef0 0a67 	vmov.f32	s1, s15
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40590000 	.word	0x40590000
 80029e8:	3fe00000 	.word	0x3fe00000

080029ec <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  if(htim == &htim2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002a60 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d12d      	bne.n	8002a58 <HAL_TIM_PeriodElapsedCallback+0x6c>
  {
	  if((PIR_Garage == true || PIR_Kitchen == true || PIR_Livingroom == true) && alarm == true)
 80029fc:	4b19      	ldr	r3, [pc, #100]	@ (8002a64 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d107      	bne.n	8002a14 <HAL_TIM_PeriodElapsedCallback+0x28>
 8002a04:	4b18      	ldr	r3, [pc, #96]	@ (8002a68 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d103      	bne.n	8002a14 <HAL_TIM_PeriodElapsedCallback+0x28>
 8002a0c:	4b17      	ldr	r3, [pc, #92]	@ (8002a6c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d009      	beq.n	8002a28 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8002a14:	4b16      	ldr	r3, [pc, #88]	@ (8002a70 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_TIM_PeriodElapsedCallback+0x3c>
	  {
		  PIR_detected = true, alarmLED = true;
 8002a1c:	4b15      	ldr	r3, [pc, #84]	@ (8002a74 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	701a      	strb	r2, [r3, #0]
 8002a22:	4b15      	ldr	r3, [pc, #84]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
	  }

	  if(alarmLED == true && PIR_detected == true)
 8002a28:	4b13      	ldr	r3, [pc, #76]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00d      	beq.n	8002a4c <HAL_TIM_PeriodElapsedCallback+0x60>
 8002a30:	4b10      	ldr	r3, [pc, #64]	@ (8002a74 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d009      	beq.n	8002a4c <HAL_TIM_PeriodElapsedCallback+0x60>
	  {
		  HAL_GPIO_TogglePin(Alarm_LED_GPIO_Port, Alarm_LED_Pin);
 8002a38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a3c:	480f      	ldr	r0, [pc, #60]	@ (8002a7c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002a3e:	f001 ffce 	bl	80049de <HAL_GPIO_TogglePin>
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002a42:	2108      	movs	r1, #8
 8002a44:	4806      	ldr	r0, [pc, #24]	@ (8002a60 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002a46:	f003 fe83 	bl	8006750 <HAL_TIM_PWM_Start>
	  else
	  {
		  HAL_GPIO_WritePin(Alarm_LED_GPIO_Port, Alarm_LED_Pin, GPIO_PIN_RESET);
	  };
  }
}
 8002a4a:	e005      	b.n	8002a58 <HAL_TIM_PeriodElapsedCallback+0x6c>
		  HAL_GPIO_WritePin(Alarm_LED_GPIO_Port, Alarm_LED_Pin, GPIO_PIN_RESET);
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a52:	480a      	ldr	r0, [pc, #40]	@ (8002a7c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002a54:	f001 ffaa 	bl	80049ac <HAL_GPIO_WritePin>
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	200002dc 	.word	0x200002dc
 8002a64:	200001d9 	.word	0x200001d9
 8002a68:	200001db 	.word	0x200001db
 8002a6c:	200001da 	.word	0x200001da
 8002a70:	200001d7 	.word	0x200001d7
 8002a74:	200001dc 	.word	0x200001dc
 8002a78:	200001d8 	.word	0x200001d8
 8002a7c:	40021000 	.word	0x40021000

08002a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a80:	b5b0      	push	{r4, r5, r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a86:	f001 fc18 	bl	80042ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a8a:	f000 fe81 	bl	8003790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a8e:	f7ff fb45 	bl	800211c <MX_GPIO_Init>
  MX_TIM2_Init();
 8002a92:	f001 f8c3 	bl	8003c1c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002a96:	f001 f945 	bl	8003d24 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002a9a:	f001 f9c7 	bl	8003e2c <MX_TIM4_Init>
  MX_SPI4_Init();
 8002a9e:	f000 fee5 	bl	800386c <MX_SPI4_Init>
  MX_SPI5_Init();
 8002aa2:	f000 ff21 	bl	80038e8 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  //LOAD CONFIG
  //alarm_config();
  keypad_config();
 8002aa6:	f7ff fca3 	bl	80023f0 <keypad_config>
  LCD_Initialize();
 8002aaa:	f7ff fe8b 	bl	80027c4 <LCD_Initialize>
 //TIMERS AND INTERRUPTS
  HAL_TIM_Base_Start_IT(&htim2);
 8002aae:	48ac      	ldr	r0, [pc, #688]	@ (8002d60 <main+0x2e0>)
 8002ab0:	f003 fd46 	bl	8006540 <HAL_TIM_Base_Start_IT>
  BMP2_Init(&bmp2dev);
 8002ab4:	48ab      	ldr	r0, [pc, #684]	@ (8002d64 <main+0x2e4>)
 8002ab6:	f7ff fa01 	bl	8001ebc <BMP2_Init>
  //START SCREEN
  LCD_WriteCommand(HD44780_CLEAR);
 8002aba:	2001      	movs	r0, #1
 8002abc:	f7ff fe0e 	bl	80026dc <LCD_WriteCommand>
  LCD_WriteText("Welcome to");
 8002ac0:	48a9      	ldr	r0, [pc, #676]	@ (8002d68 <main+0x2e8>)
 8002ac2:	f7ff fe31 	bl	8002728 <LCD_WriteText>
  LCD_WriteTextXY("Smarthome system",0,1);
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	2100      	movs	r1, #0
 8002aca:	48a8      	ldr	r0, [pc, #672]	@ (8002d6c <main+0x2ec>)
 8002acc:	f7ff fe5b 	bl	8002786 <LCD_WriteTextXY>
  HAL_Delay(3000);
 8002ad0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002ad4:	f001 fc4e 	bl	8004374 <HAL_Delay>
  refreshLCD = true;
 8002ad8:	4ba5      	ldr	r3, [pc, #660]	@ (8002d70 <main+0x2f0>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(PIR_Garage_GPIO_Port, PIR_Garage_Pin) == GPIO_PIN_SET){PIR_Garage = true;}
 8002ade:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ae2:	48a4      	ldr	r0, [pc, #656]	@ (8002d74 <main+0x2f4>)
 8002ae4:	f001 ff4a 	bl	800497c <HAL_GPIO_ReadPin>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d103      	bne.n	8002af6 <main+0x76>
 8002aee:	4ba2      	ldr	r3, [pc, #648]	@ (8002d78 <main+0x2f8>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	701a      	strb	r2, [r3, #0]
 8002af4:	e002      	b.n	8002afc <main+0x7c>
	  	  else {PIR_Garage = false;};
 8002af6:	4ba0      	ldr	r3, [pc, #640]	@ (8002d78 <main+0x2f8>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(PIR_Kitchen_GPIO_Port, PIR_Kitchen_Pin) == GPIO_PIN_SET){PIR_Kitchen = true;}
 8002afc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002b00:	489c      	ldr	r0, [pc, #624]	@ (8002d74 <main+0x2f4>)
 8002b02:	f001 ff3b 	bl	800497c <HAL_GPIO_ReadPin>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d103      	bne.n	8002b14 <main+0x94>
 8002b0c:	4b9b      	ldr	r3, [pc, #620]	@ (8002d7c <main+0x2fc>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	701a      	strb	r2, [r3, #0]
 8002b12:	e002      	b.n	8002b1a <main+0x9a>
	  	  else {PIR_Kitchen = false;};
 8002b14:	4b99      	ldr	r3, [pc, #612]	@ (8002d7c <main+0x2fc>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(PIR_Livingroom_GPIO_Port, PIR_Livingroom_Pin) == GPIO_PIN_SET){PIR_Livingroom = true;}
 8002b1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002b1e:	4895      	ldr	r0, [pc, #596]	@ (8002d74 <main+0x2f4>)
 8002b20:	f001 ff2c 	bl	800497c <HAL_GPIO_ReadPin>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d103      	bne.n	8002b32 <main+0xb2>
 8002b2a:	4b95      	ldr	r3, [pc, #596]	@ (8002d80 <main+0x300>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	701a      	strb	r2, [r3, #0]
 8002b30:	e002      	b.n	8002b38 <main+0xb8>
	  	  else{PIR_Livingroom = false;};
 8002b32:	4b93      	ldr	r3, [pc, #588]	@ (8002d80 <main+0x300>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
	  move_menu(act_menu);
 8002b38:	4b92      	ldr	r3, [pc, #584]	@ (8002d84 <main+0x304>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff feb9 	bl	80028b4 <move_menu>
 	if (symbol[0] == '*' && act_menu == mainmenu){
 8002b42:	4b91      	ldr	r3, [pc, #580]	@ (8002d88 <main+0x308>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b48:	f040 80af 	bne.w	8002caa <main+0x22a>
 8002b4c:	4b8d      	ldr	r3, [pc, #564]	@ (8002d84 <main+0x304>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a8e      	ldr	r2, [pc, #568]	@ (8002d8c <main+0x30c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	f040 80a9 	bne.w	8002caa <main+0x22a>
 		refreshLCD = true;
 8002b58:	4b85      	ldr	r3, [pc, #532]	@ (8002d70 <main+0x2f0>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	701a      	strb	r2, [r3, #0]
 		switch (position){
 8002b5e:	4b8c      	ldr	r3, [pc, #560]	@ (8002d90 <main+0x310>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	f200 8094 	bhi.w	8002c92 <main+0x212>
 8002b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b70 <main+0xf0>)
 8002b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b70:	08002b81 	.word	0x08002b81
 8002b74:	08002b95 	.word	0x08002b95
 8002b78:	08002ba9 	.word	0x08002ba9
 8002b7c:	08002bbd 	.word	0x08002bbd
			case 1: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8002b80:	4b80      	ldr	r3, [pc, #512]	@ (8002d84 <main+0x304>)
 8002b82:	4a84      	ldr	r2, [pc, #528]	@ (8002d94 <main+0x314>)
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	4b82      	ldr	r3, [pc, #520]	@ (8002d90 <main+0x310>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	701a      	strb	r2, [r3, #0]
 8002b8c:	4b82      	ldr	r3, [pc, #520]	@ (8002d98 <main+0x318>)
 8002b8e:	2202      	movs	r2, #2
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	e088      	b.n	8002ca6 <main+0x226>
			case 2: act_menu = menuLivingroom, position = 1, max_pos = 2; break;
 8002b94:	4b7b      	ldr	r3, [pc, #492]	@ (8002d84 <main+0x304>)
 8002b96:	4a81      	ldr	r2, [pc, #516]	@ (8002d9c <main+0x31c>)
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	4b7d      	ldr	r3, [pc, #500]	@ (8002d90 <main+0x310>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	701a      	strb	r2, [r3, #0]
 8002ba0:	4b7d      	ldr	r3, [pc, #500]	@ (8002d98 <main+0x318>)
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	701a      	strb	r2, [r3, #0]
 8002ba6:	e07e      	b.n	8002ca6 <main+0x226>
			case 3: act_menu = menuGarage, position = 1, max_pos = 1; break;
 8002ba8:	4b76      	ldr	r3, [pc, #472]	@ (8002d84 <main+0x304>)
 8002baa:	4a7d      	ldr	r2, [pc, #500]	@ (8002da0 <main+0x320>)
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	4b78      	ldr	r3, [pc, #480]	@ (8002d90 <main+0x310>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
 8002bb4:	4b78      	ldr	r3, [pc, #480]	@ (8002d98 <main+0x318>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	701a      	strb	r2, [r3, #0]
 8002bba:	e074      	b.n	8002ca6 <main+0x226>
			case 4:
					i = 0;
 8002bbc:	4b79      	ldr	r3, [pc, #484]	@ (8002da4 <main+0x324>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
					HAL_Delay(200);
 8002bc2:	20c8      	movs	r0, #200	@ 0xc8
 8002bc4:	f001 fbd6 	bl	8004374 <HAL_Delay>
					memset(buff, 0, sizeof(buff));
 8002bc8:	2205      	movs	r2, #5
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4876      	ldr	r0, [pc, #472]	@ (8002da8 <main+0x328>)
 8002bce:	f004 ff85 	bl	8007adc <memset>
					LCD_WriteCommand(HD44780_CLEAR);
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	f7ff fd82 	bl	80026dc <LCD_WriteCommand>
					LCD_WriteText("Write PIN");
 8002bd8:	4874      	ldr	r0, [pc, #464]	@ (8002dac <main+0x32c>)
 8002bda:	f7ff fda5 	bl	8002728 <LCD_WriteText>
					while(1) {
						refreshLCD = true;
 8002bde:	4b64      	ldr	r3, [pc, #400]	@ (8002d70 <main+0x2f0>)
 8002be0:	2201      	movs	r2, #1
 8002be2:	701a      	strb	r2, [r3, #0]
						symbol[0] = keypad_readkey();
 8002be4:	f7ff fc38 	bl	8002458 <keypad_readkey>
 8002be8:	4603      	mov	r3, r0
 8002bea:	461a      	mov	r2, r3
 8002bec:	4b66      	ldr	r3, [pc, #408]	@ (8002d88 <main+0x308>)
 8002bee:	701a      	strb	r2, [r3, #0]
						if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 8002bf0:	4b65      	ldr	r3, [pc, #404]	@ (8002d88 <main+0x308>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b2f      	cmp	r3, #47	@ 0x2f
 8002bf6:	d922      	bls.n	8002c3e <main+0x1be>
 8002bf8:	4b63      	ldr	r3, [pc, #396]	@ (8002d88 <main+0x308>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b39      	cmp	r3, #57	@ 0x39
 8002bfe:	d81e      	bhi.n	8002c3e <main+0x1be>
 8002c00:	4b68      	ldr	r3, [pc, #416]	@ (8002da4 <main+0x324>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d81a      	bhi.n	8002c3e <main+0x1be>
							buff[i] = symbol[0];
 8002c08:	4b66      	ldr	r3, [pc, #408]	@ (8002da4 <main+0x324>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a5e      	ldr	r2, [pc, #376]	@ (8002d88 <main+0x308>)
 8002c0e:	7811      	ldrb	r1, [r2, #0]
 8002c10:	4a65      	ldr	r2, [pc, #404]	@ (8002da8 <main+0x328>)
 8002c12:	54d1      	strb	r1, [r2, r3]
							i++;
 8002c14:	4b63      	ldr	r3, [pc, #396]	@ (8002da4 <main+0x324>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	4a62      	ldr	r2, [pc, #392]	@ (8002da4 <main+0x324>)
 8002c1c:	6013      	str	r3, [r2, #0]
							buff[i] = '\0';
 8002c1e:	4b61      	ldr	r3, [pc, #388]	@ (8002da4 <main+0x324>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a61      	ldr	r2, [pc, #388]	@ (8002da8 <main+0x328>)
 8002c24:	2100      	movs	r1, #0
 8002c26:	54d1      	strb	r1, [r2, r3]
							LCD_WriteCommand(HD44780_CLEAR);
 8002c28:	2001      	movs	r0, #1
 8002c2a:	f7ff fd57 	bl	80026dc <LCD_WriteCommand>
							LCD_WriteText("PIN: ");
 8002c2e:	4860      	ldr	r0, [pc, #384]	@ (8002db0 <main+0x330>)
 8002c30:	f7ff fd7a 	bl	8002728 <LCD_WriteText>
							LCD_WriteTextXY(buff, 0, 1);
 8002c34:	2201      	movs	r2, #1
 8002c36:	2100      	movs	r1, #0
 8002c38:	485b      	ldr	r0, [pc, #364]	@ (8002da8 <main+0x328>)
 8002c3a:	f7ff fda4 	bl	8002786 <LCD_WriteTextXY>
						}
						HAL_Delay(300);
 8002c3e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002c42:	f001 fb97 	bl	8004374 <HAL_Delay>
						symbol[0] = keypad_readkey();
 8002c46:	f7ff fc07 	bl	8002458 <keypad_readkey>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4b4e      	ldr	r3, [pc, #312]	@ (8002d88 <main+0x308>)
 8002c50:	701a      	strb	r2, [r3, #0]
						if(symbol[0] == '*') {
 8002c52:	4b4d      	ldr	r3, [pc, #308]	@ (8002d88 <main+0x308>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c58:	d115      	bne.n	8002c86 <main+0x206>
							pinKey = atoi(buff);
 8002c5a:	4853      	ldr	r0, [pc, #332]	@ (8002da8 <main+0x328>)
 8002c5c:	f004 fe82 	bl	8007964 <atoi>
 8002c60:	4603      	mov	r3, r0
 8002c62:	4a54      	ldr	r2, [pc, #336]	@ (8002db4 <main+0x334>)
 8002c64:	6013      	str	r3, [r2, #0]
							if(pinKey == 1234) {
 8002c66:	4b53      	ldr	r3, [pc, #332]	@ (8002db4 <main+0x334>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d10d      	bne.n	8002c8e <main+0x20e>
								act_menu = menuAlarm, position = 1, max_pos = 2; break;
 8002c72:	4b44      	ldr	r3, [pc, #272]	@ (8002d84 <main+0x304>)
 8002c74:	4a50      	ldr	r2, [pc, #320]	@ (8002db8 <main+0x338>)
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	4b45      	ldr	r3, [pc, #276]	@ (8002d90 <main+0x310>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	4b46      	ldr	r3, [pc, #280]	@ (8002d98 <main+0x318>)
 8002c80:	2202      	movs	r2, #2
 8002c82:	701a      	strb	r2, [r3, #0]
 8002c84:	e004      	b.n	8002c90 <main+0x210>
							}
							break;
						}
						HAL_Delay(100);
 8002c86:	2064      	movs	r0, #100	@ 0x64
 8002c88:	f001 fb74 	bl	8004374 <HAL_Delay>
						refreshLCD = true;
 8002c8c:	e7a7      	b.n	8002bde <main+0x15e>
							break;
 8002c8e:	bf00      	nop
					}
					break;
 8002c90:	e009      	b.n	8002ca6 <main+0x226>
			default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8002c92:	4b3c      	ldr	r3, [pc, #240]	@ (8002d84 <main+0x304>)
 8002c94:	4a3f      	ldr	r2, [pc, #252]	@ (8002d94 <main+0x314>)
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	4b3d      	ldr	r3, [pc, #244]	@ (8002d90 <main+0x310>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d98 <main+0x318>)
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	701a      	strb	r2, [r3, #0]
 8002ca4:	bf00      	nop
 		switch (position){
 8002ca6:	f000 bd40 	b.w	800372a <main+0xcaa>
 		}
 	}
 	else if(symbol[0] == '*' && act_menu == menuAlarm){
 8002caa:	4b37      	ldr	r3, [pc, #220]	@ (8002d88 <main+0x308>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b2a      	cmp	r3, #42	@ 0x2a
 8002cb0:	f040 809c 	bne.w	8002dec <main+0x36c>
 8002cb4:	4b33      	ldr	r3, [pc, #204]	@ (8002d84 <main+0x304>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a3f      	ldr	r2, [pc, #252]	@ (8002db8 <main+0x338>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	f040 8096 	bne.w	8002dec <main+0x36c>
 		refreshLCD = true;
 8002cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d70 <main+0x2f0>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	701a      	strb	r2, [r3, #0]
 		switch (position){
 8002cc6:	4b32      	ldr	r3, [pc, #200]	@ (8002d90 <main+0x310>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d002      	beq.n	8002cd4 <main+0x254>
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d021      	beq.n	8002d16 <main+0x296>
 8002cd2:	e07f      	b.n	8002dd4 <main+0x354>
			case 1: alarm = true;
 8002cd4:	4b39      	ldr	r3, [pc, #228]	@ (8002dbc <main+0x33c>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	701a      	strb	r2, [r3, #0]
				PIR_detected = false;
 8002cda:	4b39      	ldr	r3, [pc, #228]	@ (8002dc0 <main+0x340>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
				alarmLED = false;
 8002ce0:	4b38      	ldr	r3, [pc, #224]	@ (8002dc4 <main+0x344>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]
				LCD_WriteCommand(HD44780_CLEAR);
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	f7ff fcf8 	bl	80026dc <LCD_WriteCommand>
				LCD_WriteText("Alarm");
 8002cec:	4836      	ldr	r0, [pc, #216]	@ (8002dc8 <main+0x348>)
 8002cee:	f7ff fd1b 	bl	8002728 <LCD_WriteText>
				LCD_WriteTextXY("turned on",0,1);
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	4835      	ldr	r0, [pc, #212]	@ (8002dcc <main+0x34c>)
 8002cf8:	f7ff fd45 	bl	8002786 <LCD_WriteTextXY>
				HAL_TIM_Base_Start_IT(&htim2);
 8002cfc:	4818      	ldr	r0, [pc, #96]	@ (8002d60 <main+0x2e0>)
 8002cfe:	f003 fc1f 	bl	8006540 <HAL_TIM_Base_Start_IT>
				act_menu = mainmenu, position = 1, max_pos = 4;
 8002d02:	4b20      	ldr	r3, [pc, #128]	@ (8002d84 <main+0x304>)
 8002d04:	4a21      	ldr	r2, [pc, #132]	@ (8002d8c <main+0x30c>)
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	4b21      	ldr	r3, [pc, #132]	@ (8002d90 <main+0x310>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	701a      	strb	r2, [r3, #0]
 8002d0e:	4b22      	ldr	r3, [pc, #136]	@ (8002d98 <main+0x318>)
 8002d10:	2204      	movs	r2, #4
 8002d12:	701a      	strb	r2, [r3, #0]
				break;
 8002d14:	e068      	b.n	8002de8 <main+0x368>

 	 		case 2: alarm = false;
 8002d16:	4b29      	ldr	r3, [pc, #164]	@ (8002dbc <main+0x33c>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
				PIR_detected = false;
 8002d1c:	4b28      	ldr	r3, [pc, #160]	@ (8002dc0 <main+0x340>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
				alarmLED = false;
 8002d22:	4b28      	ldr	r3, [pc, #160]	@ (8002dc4 <main+0x344>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]
				LCD_WriteCommand(HD44780_CLEAR);
 8002d28:	2001      	movs	r0, #1
 8002d2a:	f7ff fcd7 	bl	80026dc <LCD_WriteCommand>
				LCD_WriteText("Alarm");
 8002d2e:	4826      	ldr	r0, [pc, #152]	@ (8002dc8 <main+0x348>)
 8002d30:	f7ff fcfa 	bl	8002728 <LCD_WriteText>
				LCD_WriteTextXY("turned off",0,1);
 8002d34:	2201      	movs	r2, #1
 8002d36:	2100      	movs	r1, #0
 8002d38:	4825      	ldr	r0, [pc, #148]	@ (8002dd0 <main+0x350>)
 8002d3a:	f7ff fd24 	bl	8002786 <LCD_WriteTextXY>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002d3e:	2108      	movs	r1, #8
 8002d40:	4807      	ldr	r0, [pc, #28]	@ (8002d60 <main+0x2e0>)
 8002d42:	f003 fdff 	bl	8006944 <HAL_TIM_PWM_Stop>
				HAL_TIM_Base_Stop_IT(&htim2);
 8002d46:	4806      	ldr	r0, [pc, #24]	@ (8002d60 <main+0x2e0>)
 8002d48:	f003 fc72 	bl	8006630 <HAL_TIM_Base_Stop_IT>
				act_menu = mainmenu, position = 1, max_pos = 4;
 8002d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d84 <main+0x304>)
 8002d4e:	4a0f      	ldr	r2, [pc, #60]	@ (8002d8c <main+0x30c>)
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	4b0f      	ldr	r3, [pc, #60]	@ (8002d90 <main+0x310>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]
 8002d58:	4b0f      	ldr	r3, [pc, #60]	@ (8002d98 <main+0x318>)
 8002d5a:	2204      	movs	r2, #4
 8002d5c:	701a      	strb	r2, [r3, #0]
				break;
 8002d5e:	e043      	b.n	8002de8 <main+0x368>
 8002d60:	200002dc 	.word	0x200002dc
 8002d64:	20000018 	.word	0x20000018
 8002d68:	080085c8 	.word	0x080085c8
 8002d6c:	080085d4 	.word	0x080085d4
 8002d70:	200001d6 	.word	0x200001d6
 8002d74:	40021000 	.word	0x40021000
 8002d78:	200001d9 	.word	0x200001d9
 8002d7c:	200001db 	.word	0x200001db
 8002d80:	200001da 	.word	0x200001da
 8002d84:	200000f8 	.word	0x200000f8
 8002d88:	20000198 	.word	0x20000198
 8002d8c:	20000058 	.word	0x20000058
 8002d90:	20000054 	.word	0x20000054
 8002d94:	20000068 	.word	0x20000068
 8002d98:	20000055 	.word	0x20000055
 8002d9c:	20000098 	.word	0x20000098
 8002da0:	200000c8 	.word	0x200000c8
 8002da4:	200001e0 	.word	0x200001e0
 8002da8:	2000019c 	.word	0x2000019c
 8002dac:	080085e8 	.word	0x080085e8
 8002db0:	080085f4 	.word	0x080085f4
 8002db4:	200001e8 	.word	0x200001e8
 8002db8:	200000e8 	.word	0x200000e8
 8002dbc:	200001d7 	.word	0x200001d7
 8002dc0:	200001dc 	.word	0x200001dc
 8002dc4:	200001d8 	.word	0x200001d8
 8002dc8:	080085fc 	.word	0x080085fc
 8002dcc:	08008604 	.word	0x08008604
 8002dd0:	08008610 	.word	0x08008610

 	 		default: act_menu = menuAlarm, position = 1, max_pos = 2; break;
 8002dd4:	4b90      	ldr	r3, [pc, #576]	@ (8003018 <main+0x598>)
 8002dd6:	4a91      	ldr	r2, [pc, #580]	@ (800301c <main+0x59c>)
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	4b91      	ldr	r3, [pc, #580]	@ (8003020 <main+0x5a0>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
 8002de0:	4b90      	ldr	r3, [pc, #576]	@ (8003024 <main+0x5a4>)
 8002de2:	2202      	movs	r2, #2
 8002de4:	701a      	strb	r2, [r3, #0]
 8002de6:	bf00      	nop
 		switch (position){
 8002de8:	f000 bc9f 	b.w	800372a <main+0xcaa>
 		}
 	}
	else if(symbol[0] == '*' && act_menu == menuKitchen){
 8002dec:	4b8e      	ldr	r3, [pc, #568]	@ (8003028 <main+0x5a8>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002df2:	d12e      	bne.n	8002e52 <main+0x3d2>
 8002df4:	4b88      	ldr	r3, [pc, #544]	@ (8003018 <main+0x598>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a8c      	ldr	r2, [pc, #560]	@ (800302c <main+0x5ac>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d129      	bne.n	8002e52 <main+0x3d2>
		refreshLCD = true;
 8002dfe:	4b8c      	ldr	r3, [pc, #560]	@ (8003030 <main+0x5b0>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	701a      	strb	r2, [r3, #0]
		switch (position){
 8002e04:	4b86      	ldr	r3, [pc, #536]	@ (8003020 <main+0x5a0>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d002      	beq.n	8002e12 <main+0x392>
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d00a      	beq.n	8002e26 <main+0x3a6>
 8002e10:	e013      	b.n	8002e3a <main+0x3ba>
			case 1: act_menu = menuKitchenTemperature, position = 1, max_pos = 2; break;
 8002e12:	4b81      	ldr	r3, [pc, #516]	@ (8003018 <main+0x598>)
 8002e14:	4a87      	ldr	r2, [pc, #540]	@ (8003034 <main+0x5b4>)
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	4b81      	ldr	r3, [pc, #516]	@ (8003020 <main+0x5a0>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	4b81      	ldr	r3, [pc, #516]	@ (8003024 <main+0x5a4>)
 8002e20:	2202      	movs	r2, #2
 8002e22:	701a      	strb	r2, [r3, #0]
 8002e24:	e013      	b.n	8002e4e <main+0x3ce>
			case 2: act_menu = menuKitchenLighting, position = 1, max_pos = 3; break;
 8002e26:	4b7c      	ldr	r3, [pc, #496]	@ (8003018 <main+0x598>)
 8002e28:	4a83      	ldr	r2, [pc, #524]	@ (8003038 <main+0x5b8>)
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	4b7c      	ldr	r3, [pc, #496]	@ (8003020 <main+0x5a0>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	701a      	strb	r2, [r3, #0]
 8002e32:	4b7c      	ldr	r3, [pc, #496]	@ (8003024 <main+0x5a4>)
 8002e34:	2203      	movs	r2, #3
 8002e36:	701a      	strb	r2, [r3, #0]
 8002e38:	e009      	b.n	8002e4e <main+0x3ce>
			default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8002e3a:	4b77      	ldr	r3, [pc, #476]	@ (8003018 <main+0x598>)
 8002e3c:	4a7b      	ldr	r2, [pc, #492]	@ (800302c <main+0x5ac>)
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	4b77      	ldr	r3, [pc, #476]	@ (8003020 <main+0x5a0>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	701a      	strb	r2, [r3, #0]
 8002e46:	4b77      	ldr	r3, [pc, #476]	@ (8003024 <main+0x5a4>)
 8002e48:	2202      	movs	r2, #2
 8002e4a:	701a      	strb	r2, [r3, #0]
 8002e4c:	bf00      	nop
		switch (position){
 8002e4e:	f000 bc6c 	b.w	800372a <main+0xcaa>
		}
	}
	else if(symbol[0] == '*' && act_menu == menuKitchenLighting){
 8002e52:	4b75      	ldr	r3, [pc, #468]	@ (8003028 <main+0x5a8>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e58:	f040 80bb 	bne.w	8002fd2 <main+0x552>
 8002e5c:	4b6e      	ldr	r3, [pc, #440]	@ (8003018 <main+0x598>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a75      	ldr	r2, [pc, #468]	@ (8003038 <main+0x5b8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	f040 80b5 	bne.w	8002fd2 <main+0x552>
 		 	 		refreshLCD = true;
 8002e68:	4b71      	ldr	r3, [pc, #452]	@ (8003030 <main+0x5b0>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 8002e6e:	4b6c      	ldr	r3, [pc, #432]	@ (8003020 <main+0x5a0>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d02c      	beq.n	8002ed0 <main+0x450>
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	f300 80a0 	bgt.w	8002fbc <main+0x53c>
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d002      	beq.n	8002e86 <main+0x406>
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d015      	beq.n	8002eb0 <main+0x430>
 8002e84:	e09a      	b.n	8002fbc <main+0x53c>
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 8002e86:	2001      	movs	r0, #1
 8002e88:	f7ff fc28 	bl	80026dc <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 8002e8c:	486b      	ldr	r0, [pc, #428]	@ (800303c <main+0x5bc>)
 8002e8e:	f7ff fc4b 	bl	8002728 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 8002e92:	2201      	movs	r2, #1
 8002e94:	2100      	movs	r1, #0
 8002e96:	486a      	ldr	r0, [pc, #424]	@ (8003040 <main+0x5c0>)
 8002e98:	f7ff fc75 	bl	8002786 <LCD_WriteTextXY>
 		 	 				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, brightnessKitchen);
 8002e9c:	4b69      	ldr	r3, [pc, #420]	@ (8003044 <main+0x5c4>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4b69      	ldr	r3, [pc, #420]	@ (8003048 <main+0x5c8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	63da      	str	r2, [r3, #60]	@ 0x3c
 		 	 				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002ea6:	2108      	movs	r1, #8
 8002ea8:	4867      	ldr	r0, [pc, #412]	@ (8003048 <main+0x5c8>)
 8002eaa:	f003 fc51 	bl	8006750 <HAL_TIM_PWM_Start>
 		 	 				break;
 8002eae:	e08f      	b.n	8002fd0 <main+0x550>

 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	f7ff fc13 	bl	80026dc <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 8002eb6:	4861      	ldr	r0, [pc, #388]	@ (800303c <main+0x5bc>)
 8002eb8:	f7ff fc36 	bl	8002728 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4862      	ldr	r0, [pc, #392]	@ (800304c <main+0x5cc>)
 8002ec2:	f7ff fc60 	bl	8002786 <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8002ec6:	2108      	movs	r1, #8
 8002ec8:	485f      	ldr	r0, [pc, #380]	@ (8003048 <main+0x5c8>)
 8002eca:	f003 fd3b 	bl	8006944 <HAL_TIM_PWM_Stop>
 				 	 		break;
 8002ece:	e07f      	b.n	8002fd0 <main+0x550>

 		 	 		case 3:
							i = 0;
 8002ed0:	4b5f      	ldr	r3, [pc, #380]	@ (8003050 <main+0x5d0>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
							HAL_Delay(200);
 8002ed6:	20c8      	movs	r0, #200	@ 0xc8
 8002ed8:	f001 fa4c 	bl	8004374 <HAL_Delay>
							memset(buff, 0, sizeof(buff));
 8002edc:	2205      	movs	r2, #5
 8002ede:	2100      	movs	r1, #0
 8002ee0:	485c      	ldr	r0, [pc, #368]	@ (8003054 <main+0x5d4>)
 8002ee2:	f004 fdfb 	bl	8007adc <memset>
							LCD_WriteCommand(HD44780_CLEAR);
 8002ee6:	2001      	movs	r0, #1
 8002ee8:	f7ff fbf8 	bl	80026dc <LCD_WriteCommand>
							LCD_WriteText("Write Bright");
 8002eec:	485a      	ldr	r0, [pc, #360]	@ (8003058 <main+0x5d8>)
 8002eee:	f7ff fc1b 	bl	8002728 <LCD_WriteText>
							while(1) {
								refreshLCD = true;
 8002ef2:	4b4f      	ldr	r3, [pc, #316]	@ (8003030 <main+0x5b0>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	701a      	strb	r2, [r3, #0]
								symbol[0] = keypad_readkey();
 8002ef8:	f7ff faae 	bl	8002458 <keypad_readkey>
 8002efc:	4603      	mov	r3, r0
 8002efe:	461a      	mov	r2, r3
 8002f00:	4b49      	ldr	r3, [pc, #292]	@ (8003028 <main+0x5a8>)
 8002f02:	701a      	strb	r2, [r3, #0]
								if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 8002f04:	4b48      	ldr	r3, [pc, #288]	@ (8003028 <main+0x5a8>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b2f      	cmp	r3, #47	@ 0x2f
 8002f0a:	d922      	bls.n	8002f52 <main+0x4d2>
 8002f0c:	4b46      	ldr	r3, [pc, #280]	@ (8003028 <main+0x5a8>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b39      	cmp	r3, #57	@ 0x39
 8002f12:	d81e      	bhi.n	8002f52 <main+0x4d2>
 8002f14:	4b4e      	ldr	r3, [pc, #312]	@ (8003050 <main+0x5d0>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d81a      	bhi.n	8002f52 <main+0x4d2>
									buff[i] = symbol[0];
 8002f1c:	4b4c      	ldr	r3, [pc, #304]	@ (8003050 <main+0x5d0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a41      	ldr	r2, [pc, #260]	@ (8003028 <main+0x5a8>)
 8002f22:	7811      	ldrb	r1, [r2, #0]
 8002f24:	4a4b      	ldr	r2, [pc, #300]	@ (8003054 <main+0x5d4>)
 8002f26:	54d1      	strb	r1, [r2, r3]
									i++;
 8002f28:	4b49      	ldr	r3, [pc, #292]	@ (8003050 <main+0x5d0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	4a48      	ldr	r2, [pc, #288]	@ (8003050 <main+0x5d0>)
 8002f30:	6013      	str	r3, [r2, #0]
									buff[i] = '\0';
 8002f32:	4b47      	ldr	r3, [pc, #284]	@ (8003050 <main+0x5d0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a47      	ldr	r2, [pc, #284]	@ (8003054 <main+0x5d4>)
 8002f38:	2100      	movs	r1, #0
 8002f3a:	54d1      	strb	r1, [r2, r3]
									LCD_WriteCommand(HD44780_CLEAR);
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	f7ff fbcd 	bl	80026dc <LCD_WriteCommand>
									LCD_WriteText("Brightness: ");
 8002f42:	4846      	ldr	r0, [pc, #280]	@ (800305c <main+0x5dc>)
 8002f44:	f7ff fbf0 	bl	8002728 <LCD_WriteText>
									LCD_WriteTextXY(buff, 0, 1);
 8002f48:	2201      	movs	r2, #1
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	4841      	ldr	r0, [pc, #260]	@ (8003054 <main+0x5d4>)
 8002f4e:	f7ff fc1a 	bl	8002786 <LCD_WriteTextXY>
								}
								HAL_Delay(200);
 8002f52:	20c8      	movs	r0, #200	@ 0xc8
 8002f54:	f001 fa0e 	bl	8004374 <HAL_Delay>
								symbol[0] = keypad_readkey();
 8002f58:	f7ff fa7e 	bl	8002458 <keypad_readkey>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b31      	ldr	r3, [pc, #196]	@ (8003028 <main+0x5a8>)
 8002f62:	701a      	strb	r2, [r3, #0]
								if(symbol[0] == '*') {
 8002f64:	4b30      	ldr	r3, [pc, #192]	@ (8003028 <main+0x5a8>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f6a:	d123      	bne.n	8002fb4 <main+0x534>
									brightnessKitchen = atoi(buff)*10;
 8002f6c:	4839      	ldr	r0, [pc, #228]	@ (8003054 <main+0x5d4>)
 8002f6e:	f004 fcf9 	bl	8007964 <atoi>
 8002f72:	4602      	mov	r2, r0
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b31      	ldr	r3, [pc, #196]	@ (8003044 <main+0x5c4>)
 8002f80:	601a      	str	r2, [r3, #0]
									if(brightnessKitchen >= 1000) {
 8002f82:	4b30      	ldr	r3, [pc, #192]	@ (8003044 <main+0x5c4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f8a:	db03      	blt.n	8002f94 <main+0x514>
										brightnessKitchen = 999;
 8002f8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003044 <main+0x5c4>)
 8002f8e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002f92:	601a      	str	r2, [r3, #0]
									}
								   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, brightnessKitchen);
 8002f94:	4b2b      	ldr	r3, [pc, #172]	@ (8003044 <main+0x5c4>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b2b      	ldr	r3, [pc, #172]	@ (8003048 <main+0x5c8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	63da      	str	r2, [r3, #60]	@ 0x3c
									act_menu = menuKitchenLighting;
 8002f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003018 <main+0x598>)
 8002fa0:	4a25      	ldr	r2, [pc, #148]	@ (8003038 <main+0x5b8>)
 8002fa2:	601a      	str	r2, [r3, #0]
									position = 1;
 8002fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8003020 <main+0x5a0>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]
									max_pos = 3;
 8002faa:	4b1e      	ldr	r3, [pc, #120]	@ (8003024 <main+0x5a4>)
 8002fac:	2203      	movs	r2, #3
 8002fae:	701a      	strb	r2, [r3, #0]
									break;
 8002fb0:	bf00      	nop
								}
								HAL_Delay(100);
							}
							break;
 8002fb2:	e00d      	b.n	8002fd0 <main+0x550>
								HAL_Delay(100);
 8002fb4:	2064      	movs	r0, #100	@ 0x64
 8002fb6:	f001 f9dd 	bl	8004374 <HAL_Delay>
								refreshLCD = true;
 8002fba:	e79a      	b.n	8002ef2 <main+0x472>
 		 	 		default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8002fbc:	4b16      	ldr	r3, [pc, #88]	@ (8003018 <main+0x598>)
 8002fbe:	4a1b      	ldr	r2, [pc, #108]	@ (800302c <main+0x5ac>)
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	4b17      	ldr	r3, [pc, #92]	@ (8003020 <main+0x5a0>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	701a      	strb	r2, [r3, #0]
 8002fc8:	4b16      	ldr	r3, [pc, #88]	@ (8003024 <main+0x5a4>)
 8002fca:	2202      	movs	r2, #2
 8002fcc:	701a      	strb	r2, [r3, #0]
 8002fce:	bf00      	nop
 		 	 	  switch (position){
 8002fd0:	e3ab      	b.n	800372a <main+0xcaa>
 		 	 	  	  }
	}
	else if(symbol[0] == '*' && act_menu == menuKitchenTemperature){
 8002fd2:	4b15      	ldr	r3, [pc, #84]	@ (8003028 <main+0x5a8>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fd8:	f040 8129 	bne.w	800322e <main+0x7ae>
 8002fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8003018 <main+0x598>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a14      	ldr	r2, [pc, #80]	@ (8003034 <main+0x5b4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	f040 8123 	bne.w	800322e <main+0x7ae>
		refreshLCD = true;
 8002fe8:	4b11      	ldr	r3, [pc, #68]	@ (8003030 <main+0x5b0>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	701a      	strb	r2, [r3, #0]
		temp = 0.0f;
 8002fee:	491c      	ldr	r1, [pc, #112]	@ (8003060 <main+0x5e0>)
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	e9c1 2300 	strd	r2, r3, [r1]
		switch (position){
 8002ffc:	4b08      	ldr	r3, [pc, #32]	@ (8003020 <main+0x5a0>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b03      	cmp	r3, #3
 8003002:	f000 8098 	beq.w	8003136 <main+0x6b6>
 8003006:	2b03      	cmp	r3, #3
 8003008:	f300 8106 	bgt.w	8003218 <main+0x798>
 800300c:	2b01      	cmp	r3, #1
 800300e:	d029      	beq.n	8003064 <main+0x5e4>
 8003010:	2b02      	cmp	r3, #2
 8003012:	f000 8084 	beq.w	800311e <main+0x69e>
 8003016:	e0ff      	b.n	8003218 <main+0x798>
 8003018:	200000f8 	.word	0x200000f8
 800301c:	200000e8 	.word	0x200000e8
 8003020:	20000054 	.word	0x20000054
 8003024:	20000055 	.word	0x20000055
 8003028:	20000198 	.word	0x20000198
 800302c:	20000068 	.word	0x20000068
 8003030:	200001d6 	.word	0x200001d6
 8003034:	20000088 	.word	0x20000088
 8003038:	20000078 	.word	0x20000078
 800303c:	0800861c 	.word	0x0800861c
 8003040:	08008604 	.word	0x08008604
 8003044:	20000100 	.word	0x20000100
 8003048:	20000328 	.word	0x20000328
 800304c:	08008610 	.word	0x08008610
 8003050:	200001e0 	.word	0x200001e0
 8003054:	2000019c 	.word	0x2000019c
 8003058:	08008624 	.word	0x08008624
 800305c:	08008634 	.word	0x08008634
 8003060:	200001f8 	.word	0x200001f8
			case 1:
					while(1) {
						HAL_Delay(100);
 8003064:	2064      	movs	r0, #100	@ 0x64
 8003066:	f001 f985 	bl	8004374 <HAL_Delay>
						BMP2_ReadData(&bmp2dev, &press, &temp);
 800306a:	4aa9      	ldr	r2, [pc, #676]	@ (8003310 <main+0x890>)
 800306c:	49a9      	ldr	r1, [pc, #676]	@ (8003314 <main+0x894>)
 800306e:	48aa      	ldr	r0, [pc, #680]	@ (8003318 <main+0x898>)
 8003070:	f7fe fff0 	bl	8002054 <BMP2_ReadData>
						roundedValue = roundToTwoDecimals(temp);
 8003074:	4ba6      	ldr	r3, [pc, #664]	@ (8003310 <main+0x890>)
 8003076:	ed93 7b00 	vldr	d7, [r3]
 800307a:	eeb0 0a47 	vmov.f32	s0, s14
 800307e:	eef0 0a67 	vmov.f32	s1, s15
 8003082:	f7ff fc7d 	bl	8002980 <roundToTwoDecimals>
 8003086:	eeb0 7a40 	vmov.f32	s14, s0
 800308a:	eef0 7a60 	vmov.f32	s15, s1
 800308e:	4ba3      	ldr	r3, [pc, #652]	@ (800331c <main+0x89c>)
 8003090:	ed83 7b00 	vstr	d7, [r3]
						intPart = (int)roundedValue;
 8003094:	4ba1      	ldr	r3, [pc, #644]	@ (800331c <main+0x89c>)
 8003096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309a:	4610      	mov	r0, r2
 800309c:	4619      	mov	r1, r3
 800309e:	f7fd fd5d 	bl	8000b5c <__aeabi_d2iz>
 80030a2:	4603      	mov	r3, r0
 80030a4:	4a9e      	ldr	r2, [pc, #632]	@ (8003320 <main+0x8a0>)
 80030a6:	6013      	str	r3, [r2, #0]
						fracPart = (int)((roundedValue - intPart) * 100);
 80030a8:	4b9c      	ldr	r3, [pc, #624]	@ (800331c <main+0x89c>)
 80030aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80030ae:	4b9c      	ldr	r3, [pc, #624]	@ (8003320 <main+0x8a0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd fa4e 	bl	8000554 <__aeabi_i2d>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4620      	mov	r0, r4
 80030be:	4629      	mov	r1, r5
 80030c0:	f7fd f8fa 	bl	80002b8 <__aeabi_dsub>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4610      	mov	r0, r2
 80030ca:	4619      	mov	r1, r3
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	4b94      	ldr	r3, [pc, #592]	@ (8003324 <main+0x8a4>)
 80030d2:	f7fd faa9 	bl	8000628 <__aeabi_dmul>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	4610      	mov	r0, r2
 80030dc:	4619      	mov	r1, r3
 80030de:	f7fd fd3d 	bl	8000b5c <__aeabi_d2iz>
 80030e2:	4603      	mov	r3, r0
 80030e4:	4a90      	ldr	r2, [pc, #576]	@ (8003328 <main+0x8a8>)
 80030e6:	6013      	str	r3, [r2, #0]
						snprintf(result, sizeof(result), "Temp: %d.%04d", intPart, abs(fracPart));
 80030e8:	4b8d      	ldr	r3, [pc, #564]	@ (8003320 <main+0x8a0>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b8e      	ldr	r3, [pc, #568]	@ (8003328 <main+0x8a8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bfb8      	it	lt
 80030f4:	425b      	neglt	r3, r3
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	4613      	mov	r3, r2
 80030fa:	4a8c      	ldr	r2, [pc, #560]	@ (800332c <main+0x8ac>)
 80030fc:	2132      	movs	r1, #50	@ 0x32
 80030fe:	488c      	ldr	r0, [pc, #560]	@ (8003330 <main+0x8b0>)
 8003100:	f004 fcb8 	bl	8007a74 <sniprintf>
						LCD_WriteCommand(HD44780_CLEAR);
 8003104:	2001      	movs	r0, #1
 8003106:	f7ff fae9 	bl	80026dc <LCD_WriteCommand>
						LCD_WriteText(result);
 800310a:	4889      	ldr	r0, [pc, #548]	@ (8003330 <main+0x8b0>)
 800310c:	f7ff fb0c 	bl	8002728 <LCD_WriteText>
						i++;
 8003110:	4b88      	ldr	r3, [pc, #544]	@ (8003334 <main+0x8b4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3301      	adds	r3, #1
 8003116:	4a87      	ldr	r2, [pc, #540]	@ (8003334 <main+0x8b4>)
 8003118:	6013      	str	r3, [r2, #0]
					while(1) {
 800311a:	bf00      	nop
 800311c:	e7a2      	b.n	8003064 <main+0x5e4>
					}
					break;

			case 2: LCD_WriteCommand(HD44780_CLEAR);
 800311e:	2001      	movs	r0, #1
 8003120:	f7ff fadc 	bl	80026dc <LCD_WriteCommand>
					LCD_WriteText("grzanie off");
 8003124:	4884      	ldr	r0, [pc, #528]	@ (8003338 <main+0x8b8>)
 8003126:	f7ff faff 	bl	8002728 <LCD_WriteText>
					LCD_WriteTextXY("",0,1); break;
 800312a:	2201      	movs	r2, #1
 800312c:	2100      	movs	r1, #0
 800312e:	4883      	ldr	r0, [pc, #524]	@ (800333c <main+0x8bc>)
 8003130:	f7ff fb29 	bl	8002786 <LCD_WriteTextXY>
 8003134:	e07a      	b.n	800322c <main+0x7ac>
			case 3:
					i = 0;
 8003136:	4b7f      	ldr	r3, [pc, #508]	@ (8003334 <main+0x8b4>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
					HAL_Delay(200);
 800313c:	20c8      	movs	r0, #200	@ 0xc8
 800313e:	f001 f919 	bl	8004374 <HAL_Delay>
					memset(buff, 0, sizeof(buff));
 8003142:	2205      	movs	r2, #5
 8003144:	2100      	movs	r1, #0
 8003146:	487e      	ldr	r0, [pc, #504]	@ (8003340 <main+0x8c0>)
 8003148:	f004 fcc8 	bl	8007adc <memset>
					LCD_WriteCommand(HD44780_CLEAR);
 800314c:	2001      	movs	r0, #1
 800314e:	f7ff fac5 	bl	80026dc <LCD_WriteCommand>
					LCD_WriteText("Write Temp");
 8003152:	487c      	ldr	r0, [pc, #496]	@ (8003344 <main+0x8c4>)
 8003154:	f7ff fae8 	bl	8002728 <LCD_WriteText>
					while(1) {
						refreshLCD = true;
 8003158:	4b7b      	ldr	r3, [pc, #492]	@ (8003348 <main+0x8c8>)
 800315a:	2201      	movs	r2, #1
 800315c:	701a      	strb	r2, [r3, #0]
						symbol[0] = keypad_readkey();
 800315e:	f7ff f97b 	bl	8002458 <keypad_readkey>
 8003162:	4603      	mov	r3, r0
 8003164:	461a      	mov	r2, r3
 8003166:	4b79      	ldr	r3, [pc, #484]	@ (800334c <main+0x8cc>)
 8003168:	701a      	strb	r2, [r3, #0]
						if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 800316a:	4b78      	ldr	r3, [pc, #480]	@ (800334c <main+0x8cc>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b2f      	cmp	r3, #47	@ 0x2f
 8003170:	d922      	bls.n	80031b8 <main+0x738>
 8003172:	4b76      	ldr	r3, [pc, #472]	@ (800334c <main+0x8cc>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b39      	cmp	r3, #57	@ 0x39
 8003178:	d81e      	bhi.n	80031b8 <main+0x738>
 800317a:	4b6e      	ldr	r3, [pc, #440]	@ (8003334 <main+0x8b4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b03      	cmp	r3, #3
 8003180:	d81a      	bhi.n	80031b8 <main+0x738>
							buff[i] = symbol[0];
 8003182:	4b6c      	ldr	r3, [pc, #432]	@ (8003334 <main+0x8b4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a71      	ldr	r2, [pc, #452]	@ (800334c <main+0x8cc>)
 8003188:	7811      	ldrb	r1, [r2, #0]
 800318a:	4a6d      	ldr	r2, [pc, #436]	@ (8003340 <main+0x8c0>)
 800318c:	54d1      	strb	r1, [r2, r3]
							i++;
 800318e:	4b69      	ldr	r3, [pc, #420]	@ (8003334 <main+0x8b4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	3301      	adds	r3, #1
 8003194:	4a67      	ldr	r2, [pc, #412]	@ (8003334 <main+0x8b4>)
 8003196:	6013      	str	r3, [r2, #0]
							buff[i] = '\0';
 8003198:	4b66      	ldr	r3, [pc, #408]	@ (8003334 <main+0x8b4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a68      	ldr	r2, [pc, #416]	@ (8003340 <main+0x8c0>)
 800319e:	2100      	movs	r1, #0
 80031a0:	54d1      	strb	r1, [r2, r3]
							LCD_WriteCommand(HD44780_CLEAR);
 80031a2:	2001      	movs	r0, #1
 80031a4:	f7ff fa9a 	bl	80026dc <LCD_WriteCommand>
							LCD_WriteText("Temp: ");
 80031a8:	4869      	ldr	r0, [pc, #420]	@ (8003350 <main+0x8d0>)
 80031aa:	f7ff fabd 	bl	8002728 <LCD_WriteText>
							LCD_WriteTextXY(buff, 0, 1);
 80031ae:	2201      	movs	r2, #1
 80031b0:	2100      	movs	r1, #0
 80031b2:	4863      	ldr	r0, [pc, #396]	@ (8003340 <main+0x8c0>)
 80031b4:	f7ff fae7 	bl	8002786 <LCD_WriteTextXY>
						}
						HAL_Delay(200);
 80031b8:	20c8      	movs	r0, #200	@ 0xc8
 80031ba:	f001 f8db 	bl	8004374 <HAL_Delay>
						symbol[0] = keypad_readkey();
 80031be:	f7ff f94b 	bl	8002458 <keypad_readkey>
 80031c2:	4603      	mov	r3, r0
 80031c4:	461a      	mov	r2, r3
 80031c6:	4b61      	ldr	r3, [pc, #388]	@ (800334c <main+0x8cc>)
 80031c8:	701a      	strb	r2, [r3, #0]
						if(symbol[0] == '*') {
 80031ca:	4b60      	ldr	r3, [pc, #384]	@ (800334c <main+0x8cc>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80031d0:	d11e      	bne.n	8003210 <main+0x790>
							tempKitchen = atoi(buff)*10;
 80031d2:	485b      	ldr	r0, [pc, #364]	@ (8003340 <main+0x8c0>)
 80031d4:	f004 fbc6 	bl	8007964 <atoi>
 80031d8:	4602      	mov	r2, r0
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	461a      	mov	r2, r3
 80031e4:	4b5b      	ldr	r3, [pc, #364]	@ (8003354 <main+0x8d4>)
 80031e6:	601a      	str	r2, [r3, #0]
							if(tempKitchen >= 1000) {
 80031e8:	4b5a      	ldr	r3, [pc, #360]	@ (8003354 <main+0x8d4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031f0:	db03      	blt.n	80031fa <main+0x77a>
								tempKitchen = 999;
 80031f2:	4b58      	ldr	r3, [pc, #352]	@ (8003354 <main+0x8d4>)
 80031f4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80031f8:	601a      	str	r2, [r3, #0]
							}
							act_menu = menuKitchenLighting;
 80031fa:	4b57      	ldr	r3, [pc, #348]	@ (8003358 <main+0x8d8>)
 80031fc:	4a57      	ldr	r2, [pc, #348]	@ (800335c <main+0x8dc>)
 80031fe:	601a      	str	r2, [r3, #0]
							position = 1;
 8003200:	4b57      	ldr	r3, [pc, #348]	@ (8003360 <main+0x8e0>)
 8003202:	2201      	movs	r2, #1
 8003204:	701a      	strb	r2, [r3, #0]
							max_pos = 3;
 8003206:	4b57      	ldr	r3, [pc, #348]	@ (8003364 <main+0x8e4>)
 8003208:	2203      	movs	r2, #3
 800320a:	701a      	strb	r2, [r3, #0]
							break;
 800320c:	bf00      	nop
						}
						HAL_Delay(100);
					}
					break;
 800320e:	e00d      	b.n	800322c <main+0x7ac>
						HAL_Delay(100);
 8003210:	2064      	movs	r0, #100	@ 0x64
 8003212:	f001 f8af 	bl	8004374 <HAL_Delay>
						refreshLCD = true;
 8003216:	e79f      	b.n	8003158 <main+0x6d8>
			default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8003218:	4b4f      	ldr	r3, [pc, #316]	@ (8003358 <main+0x8d8>)
 800321a:	4a53      	ldr	r2, [pc, #332]	@ (8003368 <main+0x8e8>)
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	4b50      	ldr	r3, [pc, #320]	@ (8003360 <main+0x8e0>)
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
 8003224:	4b4f      	ldr	r3, [pc, #316]	@ (8003364 <main+0x8e4>)
 8003226:	2202      	movs	r2, #2
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	bf00      	nop
		switch (position){
 800322c:	e27d      	b.n	800372a <main+0xcaa>
		}
	}
	else if(symbol[0] == '*' && act_menu == menuLivingroom){
 800322e:	4b47      	ldr	r3, [pc, #284]	@ (800334c <main+0x8cc>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b2a      	cmp	r3, #42	@ 0x2a
 8003234:	d12d      	bne.n	8003292 <main+0x812>
 8003236:	4b48      	ldr	r3, [pc, #288]	@ (8003358 <main+0x8d8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a4c      	ldr	r2, [pc, #304]	@ (800336c <main+0x8ec>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d128      	bne.n	8003292 <main+0x812>
					refreshLCD = true;
 8003240:	4b41      	ldr	r3, [pc, #260]	@ (8003348 <main+0x8c8>)
 8003242:	2201      	movs	r2, #1
 8003244:	701a      	strb	r2, [r3, #0]
				  switch (position){
 8003246:	4b46      	ldr	r3, [pc, #280]	@ (8003360 <main+0x8e0>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d002      	beq.n	8003254 <main+0x7d4>
 800324e:	2b02      	cmp	r3, #2
 8003250:	d00a      	beq.n	8003268 <main+0x7e8>
 8003252:	e013      	b.n	800327c <main+0x7fc>
						case 1: act_menu = menuLivingroomTemperature, position = 1, max_pos = 2; break;
 8003254:	4b40      	ldr	r3, [pc, #256]	@ (8003358 <main+0x8d8>)
 8003256:	4a46      	ldr	r2, [pc, #280]	@ (8003370 <main+0x8f0>)
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	4b41      	ldr	r3, [pc, #260]	@ (8003360 <main+0x8e0>)
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
 8003260:	4b40      	ldr	r3, [pc, #256]	@ (8003364 <main+0x8e4>)
 8003262:	2202      	movs	r2, #2
 8003264:	701a      	strb	r2, [r3, #0]
 8003266:	e013      	b.n	8003290 <main+0x810>
						case 2: act_menu = menuLivingroomLighting, position = 1, max_pos = 3; break;
 8003268:	4b3b      	ldr	r3, [pc, #236]	@ (8003358 <main+0x8d8>)
 800326a:	4a42      	ldr	r2, [pc, #264]	@ (8003374 <main+0x8f4>)
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	4b3c      	ldr	r3, [pc, #240]	@ (8003360 <main+0x8e0>)
 8003270:	2201      	movs	r2, #1
 8003272:	701a      	strb	r2, [r3, #0]
 8003274:	4b3b      	ldr	r3, [pc, #236]	@ (8003364 <main+0x8e4>)
 8003276:	2203      	movs	r2, #3
 8003278:	701a      	strb	r2, [r3, #0]
 800327a:	e009      	b.n	8003290 <main+0x810>
					default: act_menu = menuLivingroom, position = 1, max_pos = 2; break;
 800327c:	4b36      	ldr	r3, [pc, #216]	@ (8003358 <main+0x8d8>)
 800327e:	4a3b      	ldr	r2, [pc, #236]	@ (800336c <main+0x8ec>)
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	4b37      	ldr	r3, [pc, #220]	@ (8003360 <main+0x8e0>)
 8003284:	2201      	movs	r2, #1
 8003286:	701a      	strb	r2, [r3, #0]
 8003288:	4b36      	ldr	r3, [pc, #216]	@ (8003364 <main+0x8e4>)
 800328a:	2202      	movs	r2, #2
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	bf00      	nop
				  switch (position){
 8003290:	e24b      	b.n	800372a <main+0xcaa>
					  }
	}
	else if(symbol[0] == '*' && act_menu == menuLivingroomLighting){
 8003292:	4b2e      	ldr	r3, [pc, #184]	@ (800334c <main+0x8cc>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b2a      	cmp	r3, #42	@ 0x2a
 8003298:	f040 80fc 	bne.w	8003494 <main+0xa14>
 800329c:	4b2e      	ldr	r3, [pc, #184]	@ (8003358 <main+0x8d8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a34      	ldr	r2, [pc, #208]	@ (8003374 <main+0x8f4>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	f040 80f6 	bne.w	8003494 <main+0xa14>
 		 	 		refreshLCD = true;
 80032a8:	4b27      	ldr	r3, [pc, #156]	@ (8003348 <main+0x8c8>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 80032ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003360 <main+0x8e0>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d06a      	beq.n	800338c <main+0x90c>
 80032b6:	2b03      	cmp	r3, #3
 80032b8:	f300 80e1 	bgt.w	800347e <main+0x9fe>
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d002      	beq.n	80032c6 <main+0x846>
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d015      	beq.n	80032f0 <main+0x870>
 80032c4:	e0db      	b.n	800347e <main+0x9fe>
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 80032c6:	2001      	movs	r0, #1
 80032c8:	f7ff fa08 	bl	80026dc <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 80032cc:	482a      	ldr	r0, [pc, #168]	@ (8003378 <main+0x8f8>)
 80032ce:	f7ff fa2b 	bl	8002728 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 80032d2:	2201      	movs	r2, #1
 80032d4:	2100      	movs	r1, #0
 80032d6:	4829      	ldr	r0, [pc, #164]	@ (800337c <main+0x8fc>)
 80032d8:	f7ff fa55 	bl	8002786 <LCD_WriteTextXY>
 		 	 				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 80032dc:	4b28      	ldr	r3, [pc, #160]	@ (8003380 <main+0x900>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4b28      	ldr	r3, [pc, #160]	@ (8003384 <main+0x904>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	635a      	str	r2, [r3, #52]	@ 0x34
							HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80032e6:	2100      	movs	r1, #0
 80032e8:	4826      	ldr	r0, [pc, #152]	@ (8003384 <main+0x904>)
 80032ea:	f003 fa31 	bl	8006750 <HAL_TIM_PWM_Start>
 		 	 				break;
 80032ee:	e0d0      	b.n	8003492 <main+0xa12>

 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 80032f0:	2001      	movs	r0, #1
 80032f2:	f7ff f9f3 	bl	80026dc <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 80032f6:	4820      	ldr	r0, [pc, #128]	@ (8003378 <main+0x8f8>)
 80032f8:	f7ff fa16 	bl	8002728 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 80032fc:	2201      	movs	r2, #1
 80032fe:	2100      	movs	r1, #0
 8003300:	4821      	ldr	r0, [pc, #132]	@ (8003388 <main+0x908>)
 8003302:	f7ff fa40 	bl	8002786 <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8003306:	2100      	movs	r1, #0
 8003308:	481e      	ldr	r0, [pc, #120]	@ (8003384 <main+0x904>)
 800330a:	f003 fb1b 	bl	8006944 <HAL_TIM_PWM_Stop>
 				 	 		break;
 800330e:	e0c0      	b.n	8003492 <main+0xa12>
 8003310:	200001f8 	.word	0x200001f8
 8003314:	20000200 	.word	0x20000200
 8003318:	20000018 	.word	0x20000018
 800331c:	20000208 	.word	0x20000208
 8003320:	200001ec 	.word	0x200001ec
 8003324:	40590000 	.word	0x40590000
 8003328:	200001f0 	.word	0x200001f0
 800332c:	08008644 	.word	0x08008644
 8003330:	200001a4 	.word	0x200001a4
 8003334:	200001e0 	.word	0x200001e0
 8003338:	08008654 	.word	0x08008654
 800333c:	08008570 	.word	0x08008570
 8003340:	2000019c 	.word	0x2000019c
 8003344:	08008660 	.word	0x08008660
 8003348:	200001d6 	.word	0x200001d6
 800334c:	20000198 	.word	0x20000198
 8003350:	0800866c 	.word	0x0800866c
 8003354:	200001e4 	.word	0x200001e4
 8003358:	200000f8 	.word	0x200000f8
 800335c:	20000078 	.word	0x20000078
 8003360:	20000054 	.word	0x20000054
 8003364:	20000055 	.word	0x20000055
 8003368:	20000068 	.word	0x20000068
 800336c:	20000098 	.word	0x20000098
 8003370:	200000b8 	.word	0x200000b8
 8003374:	200000a8 	.word	0x200000a8
 8003378:	0800861c 	.word	0x0800861c
 800337c:	08008604 	.word	0x08008604
 8003380:	200000fc 	.word	0x200000fc
 8003384:	20000374 	.word	0x20000374
 8003388:	08008610 	.word	0x08008610
 		 	 		case 3:
							i = 0;
 800338c:	4b8e      	ldr	r3, [pc, #568]	@ (80035c8 <main+0xb48>)
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]
							refreshLCD = true;
 8003392:	4b8e      	ldr	r3, [pc, #568]	@ (80035cc <main+0xb4c>)
 8003394:	2201      	movs	r2, #1
 8003396:	701a      	strb	r2, [r3, #0]
							HAL_Delay(200);
 8003398:	20c8      	movs	r0, #200	@ 0xc8
 800339a:	f000 ffeb 	bl	8004374 <HAL_Delay>
							memset(buff, 0, sizeof(buff));
 800339e:	2205      	movs	r2, #5
 80033a0:	2100      	movs	r1, #0
 80033a2:	488b      	ldr	r0, [pc, #556]	@ (80035d0 <main+0xb50>)
 80033a4:	f004 fb9a 	bl	8007adc <memset>
							LCD_WriteCommand(HD44780_CLEAR);
 80033a8:	2001      	movs	r0, #1
 80033aa:	f7ff f997 	bl	80026dc <LCD_WriteCommand>
							LCD_WriteText("Write Bright");
 80033ae:	4889      	ldr	r0, [pc, #548]	@ (80035d4 <main+0xb54>)
 80033b0:	f7ff f9ba 	bl	8002728 <LCD_WriteText>
							while(1) {
								refreshLCD = true;
 80033b4:	4b85      	ldr	r3, [pc, #532]	@ (80035cc <main+0xb4c>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	701a      	strb	r2, [r3, #0]
								symbol[0] = keypad_readkey();
 80033ba:	f7ff f84d 	bl	8002458 <keypad_readkey>
 80033be:	4603      	mov	r3, r0
 80033c0:	461a      	mov	r2, r3
 80033c2:	4b85      	ldr	r3, [pc, #532]	@ (80035d8 <main+0xb58>)
 80033c4:	701a      	strb	r2, [r3, #0]
								if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 80033c6:	4b84      	ldr	r3, [pc, #528]	@ (80035d8 <main+0xb58>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b2f      	cmp	r3, #47	@ 0x2f
 80033cc:	d922      	bls.n	8003414 <main+0x994>
 80033ce:	4b82      	ldr	r3, [pc, #520]	@ (80035d8 <main+0xb58>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b39      	cmp	r3, #57	@ 0x39
 80033d4:	d81e      	bhi.n	8003414 <main+0x994>
 80033d6:	4b7c      	ldr	r3, [pc, #496]	@ (80035c8 <main+0xb48>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d81a      	bhi.n	8003414 <main+0x994>
									buff[i] = symbol[0];
 80033de:	4b7a      	ldr	r3, [pc, #488]	@ (80035c8 <main+0xb48>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a7d      	ldr	r2, [pc, #500]	@ (80035d8 <main+0xb58>)
 80033e4:	7811      	ldrb	r1, [r2, #0]
 80033e6:	4a7a      	ldr	r2, [pc, #488]	@ (80035d0 <main+0xb50>)
 80033e8:	54d1      	strb	r1, [r2, r3]
									i++;
 80033ea:	4b77      	ldr	r3, [pc, #476]	@ (80035c8 <main+0xb48>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3301      	adds	r3, #1
 80033f0:	4a75      	ldr	r2, [pc, #468]	@ (80035c8 <main+0xb48>)
 80033f2:	6013      	str	r3, [r2, #0]
									buff[i] = '\0';
 80033f4:	4b74      	ldr	r3, [pc, #464]	@ (80035c8 <main+0xb48>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a75      	ldr	r2, [pc, #468]	@ (80035d0 <main+0xb50>)
 80033fa:	2100      	movs	r1, #0
 80033fc:	54d1      	strb	r1, [r2, r3]
									LCD_WriteCommand(HD44780_CLEAR);
 80033fe:	2001      	movs	r0, #1
 8003400:	f7ff f96c 	bl	80026dc <LCD_WriteCommand>
									LCD_WriteText("Brightness: ");
 8003404:	4875      	ldr	r0, [pc, #468]	@ (80035dc <main+0xb5c>)
 8003406:	f7ff f98f 	bl	8002728 <LCD_WriteText>
									LCD_WriteTextXY(buff, 0, 1);
 800340a:	2201      	movs	r2, #1
 800340c:	2100      	movs	r1, #0
 800340e:	4870      	ldr	r0, [pc, #448]	@ (80035d0 <main+0xb50>)
 8003410:	f7ff f9b9 	bl	8002786 <LCD_WriteTextXY>
								}
								HAL_Delay(200);
 8003414:	20c8      	movs	r0, #200	@ 0xc8
 8003416:	f000 ffad 	bl	8004374 <HAL_Delay>
								symbol[0] = keypad_readkey();
 800341a:	f7ff f81d 	bl	8002458 <keypad_readkey>
 800341e:	4603      	mov	r3, r0
 8003420:	461a      	mov	r2, r3
 8003422:	4b6d      	ldr	r3, [pc, #436]	@ (80035d8 <main+0xb58>)
 8003424:	701a      	strb	r2, [r3, #0]
								if(symbol[0] == '*') {
 8003426:	4b6c      	ldr	r3, [pc, #432]	@ (80035d8 <main+0xb58>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b2a      	cmp	r3, #42	@ 0x2a
 800342c:	d123      	bne.n	8003476 <main+0x9f6>
									brightnessLivingroom = atoi(buff)*10;
 800342e:	4868      	ldr	r0, [pc, #416]	@ (80035d0 <main+0xb50>)
 8003430:	f004 fa98 	bl	8007964 <atoi>
 8003434:	4602      	mov	r2, r0
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	461a      	mov	r2, r3
 8003440:	4b67      	ldr	r3, [pc, #412]	@ (80035e0 <main+0xb60>)
 8003442:	601a      	str	r2, [r3, #0]
									if(brightnessLivingroom >= 1000) {
 8003444:	4b66      	ldr	r3, [pc, #408]	@ (80035e0 <main+0xb60>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800344c:	db03      	blt.n	8003456 <main+0x9d6>
										brightnessLivingroom = 999;
 800344e:	4b64      	ldr	r3, [pc, #400]	@ (80035e0 <main+0xb60>)
 8003450:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003454:	601a      	str	r2, [r3, #0]
									}
								   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 8003456:	4b62      	ldr	r3, [pc, #392]	@ (80035e0 <main+0xb60>)
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	4b62      	ldr	r3, [pc, #392]	@ (80035e4 <main+0xb64>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	635a      	str	r2, [r3, #52]	@ 0x34
									act_menu = menuLivingroomLighting;
 8003460:	4b61      	ldr	r3, [pc, #388]	@ (80035e8 <main+0xb68>)
 8003462:	4a62      	ldr	r2, [pc, #392]	@ (80035ec <main+0xb6c>)
 8003464:	601a      	str	r2, [r3, #0]
									position = 1;
 8003466:	4b62      	ldr	r3, [pc, #392]	@ (80035f0 <main+0xb70>)
 8003468:	2201      	movs	r2, #1
 800346a:	701a      	strb	r2, [r3, #0]
									max_pos = 3;
 800346c:	4b61      	ldr	r3, [pc, #388]	@ (80035f4 <main+0xb74>)
 800346e:	2203      	movs	r2, #3
 8003470:	701a      	strb	r2, [r3, #0]
									break;
 8003472:	bf00      	nop
								}
								HAL_Delay(100);
							}
							break;
 8003474:	e00d      	b.n	8003492 <main+0xa12>
								HAL_Delay(100);
 8003476:	2064      	movs	r0, #100	@ 0x64
 8003478:	f000 ff7c 	bl	8004374 <HAL_Delay>
								refreshLCD = true;
 800347c:	e79a      	b.n	80033b4 <main+0x934>
 		 	 		default: act_menu = menuLivingroom, position = 1, max_pos = 2; break;
 800347e:	4b5a      	ldr	r3, [pc, #360]	@ (80035e8 <main+0xb68>)
 8003480:	4a5d      	ldr	r2, [pc, #372]	@ (80035f8 <main+0xb78>)
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	4b5a      	ldr	r3, [pc, #360]	@ (80035f0 <main+0xb70>)
 8003486:	2201      	movs	r2, #1
 8003488:	701a      	strb	r2, [r3, #0]
 800348a:	4b5a      	ldr	r3, [pc, #360]	@ (80035f4 <main+0xb74>)
 800348c:	2202      	movs	r2, #2
 800348e:	701a      	strb	r2, [r3, #0]
 8003490:	bf00      	nop
 		 	 	  switch (position){
 8003492:	e14a      	b.n	800372a <main+0xcaa>
 		 	 	  	  }
 		 	 	}
 			else if(symbol[0] == '*' && act_menu == menuLivingroomTemperature){
 8003494:	4b50      	ldr	r3, [pc, #320]	@ (80035d8 <main+0xb58>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b2a      	cmp	r3, #42	@ 0x2a
 800349a:	d131      	bne.n	8003500 <main+0xa80>
 800349c:	4b52      	ldr	r3, [pc, #328]	@ (80035e8 <main+0xb68>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a56      	ldr	r2, [pc, #344]	@ (80035fc <main+0xb7c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d12c      	bne.n	8003500 <main+0xa80>
 			 		 	 		refreshLCD = true;
 80034a6:	4b49      	ldr	r3, [pc, #292]	@ (80035cc <main+0xb4c>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	701a      	strb	r2, [r3, #0]
 			 		 	 	  switch (position){
 80034ac:	4b50      	ldr	r3, [pc, #320]	@ (80035f0 <main+0xb70>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d002      	beq.n	80034ba <main+0xa3a>
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d00c      	beq.n	80034d2 <main+0xa52>
 80034b8:	e017      	b.n	80034ea <main+0xa6a>
 			 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 80034ba:	2001      	movs	r0, #1
 80034bc:	f7ff f90e 	bl	80026dc <LCD_WriteCommand>
 			 		 	 				LCD_WriteText("");
 80034c0:	484f      	ldr	r0, [pc, #316]	@ (8003600 <main+0xb80>)
 80034c2:	f7ff f931 	bl	8002728 <LCD_WriteText>
 			 		 	 				LCD_WriteTextXY("",0,1);
 80034c6:	2201      	movs	r2, #1
 80034c8:	2100      	movs	r1, #0
 80034ca:	484d      	ldr	r0, [pc, #308]	@ (8003600 <main+0xb80>)
 80034cc:	f7ff f95b 	bl	8002786 <LCD_WriteTextXY>
 			 		 	 				break;
 80034d0:	e015      	b.n	80034fe <main+0xa7e>
 			 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 80034d2:	2001      	movs	r0, #1
 80034d4:	f7ff f902 	bl	80026dc <LCD_WriteCommand>
 			 				 	 		LCD_WriteText("");
 80034d8:	4849      	ldr	r0, [pc, #292]	@ (8003600 <main+0xb80>)
 80034da:	f7ff f925 	bl	8002728 <LCD_WriteText>
 			 				 	 		LCD_WriteTextXY("",0,1);; break;
 80034de:	2201      	movs	r2, #1
 80034e0:	2100      	movs	r1, #0
 80034e2:	4847      	ldr	r0, [pc, #284]	@ (8003600 <main+0xb80>)
 80034e4:	f7ff f94f 	bl	8002786 <LCD_WriteTextXY>
 80034e8:	e009      	b.n	80034fe <main+0xa7e>
 			 		 	 		default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 80034ea:	4b3f      	ldr	r3, [pc, #252]	@ (80035e8 <main+0xb68>)
 80034ec:	4a45      	ldr	r2, [pc, #276]	@ (8003604 <main+0xb84>)
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	4b3f      	ldr	r3, [pc, #252]	@ (80035f0 <main+0xb70>)
 80034f2:	2201      	movs	r2, #1
 80034f4:	701a      	strb	r2, [r3, #0]
 80034f6:	4b3f      	ldr	r3, [pc, #252]	@ (80035f4 <main+0xb74>)
 80034f8:	2202      	movs	r2, #2
 80034fa:	701a      	strb	r2, [r3, #0]
 80034fc:	bf00      	nop
 			 		 	 	  switch (position){
 80034fe:	e114      	b.n	800372a <main+0xcaa>
 			 		 	 	  	  }
 			 		 	 	}
 			else if(symbol[0] == '*' && act_menu == menuGarage){
 8003500:	4b35      	ldr	r3, [pc, #212]	@ (80035d8 <main+0xb58>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b2a      	cmp	r3, #42	@ 0x2a
 8003506:	d120      	bne.n	800354a <main+0xaca>
 8003508:	4b37      	ldr	r3, [pc, #220]	@ (80035e8 <main+0xb68>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a3e      	ldr	r2, [pc, #248]	@ (8003608 <main+0xb88>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d11b      	bne.n	800354a <main+0xaca>
 		 		 	 		refreshLCD = true;
 8003512:	4b2e      	ldr	r3, [pc, #184]	@ (80035cc <main+0xb4c>)
 8003514:	2201      	movs	r2, #1
 8003516:	701a      	strb	r2, [r3, #0]
 		 		 	 	  switch (position){
 8003518:	4b35      	ldr	r3, [pc, #212]	@ (80035f0 <main+0xb70>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d109      	bne.n	8003534 <main+0xab4>
 		 		 	 	  	  	case 1: act_menu = menuGarageLighting, position = 1, max_pos = 3; break;
 8003520:	4b31      	ldr	r3, [pc, #196]	@ (80035e8 <main+0xb68>)
 8003522:	4a3a      	ldr	r2, [pc, #232]	@ (800360c <main+0xb8c>)
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	4b32      	ldr	r3, [pc, #200]	@ (80035f0 <main+0xb70>)
 8003528:	2201      	movs	r2, #1
 800352a:	701a      	strb	r2, [r3, #0]
 800352c:	4b31      	ldr	r3, [pc, #196]	@ (80035f4 <main+0xb74>)
 800352e:	2203      	movs	r2, #3
 8003530:	701a      	strb	r2, [r3, #0]
 8003532:	e009      	b.n	8003548 <main+0xac8>
 		 		 	 		default: act_menu = menuGarage, position = 1, max_pos = 1; break;
 8003534:	4b2c      	ldr	r3, [pc, #176]	@ (80035e8 <main+0xb68>)
 8003536:	4a34      	ldr	r2, [pc, #208]	@ (8003608 <main+0xb88>)
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	4b2d      	ldr	r3, [pc, #180]	@ (80035f0 <main+0xb70>)
 800353c:	2201      	movs	r2, #1
 800353e:	701a      	strb	r2, [r3, #0]
 8003540:	4b2c      	ldr	r3, [pc, #176]	@ (80035f4 <main+0xb74>)
 8003542:	2201      	movs	r2, #1
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	bf00      	nop
 		 		 	 	  switch (position){
 8003548:	e0ef      	b.n	800372a <main+0xcaa>
 		 		 	 	  	  }
 		 		 	 	}
 			else if(symbol[0] == '*' && act_menu == menuGarageLighting){
 800354a:	4b23      	ldr	r3, [pc, #140]	@ (80035d8 <main+0xb58>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003550:	f040 80eb 	bne.w	800372a <main+0xcaa>
 8003554:	4b24      	ldr	r3, [pc, #144]	@ (80035e8 <main+0xb68>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a2c      	ldr	r2, [pc, #176]	@ (800360c <main+0xb8c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	f040 80e5 	bne.w	800372a <main+0xcaa>
 		 	 		refreshLCD = true;
 8003560:	4b1a      	ldr	r3, [pc, #104]	@ (80035cc <main+0xb4c>)
 8003562:	2201      	movs	r2, #1
 8003564:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 8003566:	4b22      	ldr	r3, [pc, #136]	@ (80035f0 <main+0xb70>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b03      	cmp	r3, #3
 800356c:	d05a      	beq.n	8003624 <main+0xba4>
 800356e:	2b03      	cmp	r3, #3
 8003570:	f300 80d1 	bgt.w	8003716 <main+0xc96>
 8003574:	2b01      	cmp	r3, #1
 8003576:	d002      	beq.n	800357e <main+0xafe>
 8003578:	2b02      	cmp	r3, #2
 800357a:	d015      	beq.n	80035a8 <main+0xb28>
 800357c:	e0cb      	b.n	8003716 <main+0xc96>
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 800357e:	2001      	movs	r0, #1
 8003580:	f7ff f8ac 	bl	80026dc <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 8003584:	4822      	ldr	r0, [pc, #136]	@ (8003610 <main+0xb90>)
 8003586:	f7ff f8cf 	bl	8002728 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 800358a:	2201      	movs	r2, #1
 800358c:	2100      	movs	r1, #0
 800358e:	4821      	ldr	r0, [pc, #132]	@ (8003614 <main+0xb94>)
 8003590:	f7ff f8f9 	bl	8002786 <LCD_WriteTextXY>
 		 	 				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 8003594:	4b20      	ldr	r3, [pc, #128]	@ (8003618 <main+0xb98>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	4b20      	ldr	r3, [pc, #128]	@ (800361c <main+0xb9c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	635a      	str	r2, [r3, #52]	@ 0x34
 		 	 				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800359e:	2100      	movs	r1, #0
 80035a0:	481e      	ldr	r0, [pc, #120]	@ (800361c <main+0xb9c>)
 80035a2:	f003 f8d5 	bl	8006750 <HAL_TIM_PWM_Start>
 		 	 				break;
 80035a6:	e0c0      	b.n	800372a <main+0xcaa>

 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 80035a8:	2001      	movs	r0, #1
 80035aa:	f7ff f897 	bl	80026dc <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 80035ae:	4818      	ldr	r0, [pc, #96]	@ (8003610 <main+0xb90>)
 80035b0:	f7ff f8ba 	bl	8002728 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 80035b4:	2201      	movs	r2, #1
 80035b6:	2100      	movs	r1, #0
 80035b8:	4819      	ldr	r0, [pc, #100]	@ (8003620 <main+0xba0>)
 80035ba:	f7ff f8e4 	bl	8002786 <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80035be:	2100      	movs	r1, #0
 80035c0:	4816      	ldr	r0, [pc, #88]	@ (800361c <main+0xb9c>)
 80035c2:	f003 f9bf 	bl	8006944 <HAL_TIM_PWM_Stop>
 				 	 		break;
 80035c6:	e0b0      	b.n	800372a <main+0xcaa>
 80035c8:	200001e0 	.word	0x200001e0
 80035cc:	200001d6 	.word	0x200001d6
 80035d0:	2000019c 	.word	0x2000019c
 80035d4:	08008624 	.word	0x08008624
 80035d8:	20000198 	.word	0x20000198
 80035dc:	08008634 	.word	0x08008634
 80035e0:	200000fc 	.word	0x200000fc
 80035e4:	20000374 	.word	0x20000374
 80035e8:	200000f8 	.word	0x200000f8
 80035ec:	200000a8 	.word	0x200000a8
 80035f0:	20000054 	.word	0x20000054
 80035f4:	20000055 	.word	0x20000055
 80035f8:	20000098 	.word	0x20000098
 80035fc:	200000b8 	.word	0x200000b8
 8003600:	08008570 	.word	0x08008570
 8003604:	20000068 	.word	0x20000068
 8003608:	200000c8 	.word	0x200000c8
 800360c:	200000d8 	.word	0x200000d8
 8003610:	0800861c 	.word	0x0800861c
 8003614:	08008604 	.word	0x08008604
 8003618:	20000104 	.word	0x20000104
 800361c:	200002dc 	.word	0x200002dc
 8003620:	08008610 	.word	0x08008610

 		 	 		case 3:
							i = 0;
 8003624:	4b4c      	ldr	r3, [pc, #304]	@ (8003758 <main+0xcd8>)
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]
							refreshLCD = true;
 800362a:	4b4c      	ldr	r3, [pc, #304]	@ (800375c <main+0xcdc>)
 800362c:	2201      	movs	r2, #1
 800362e:	701a      	strb	r2, [r3, #0]
							HAL_Delay(200);
 8003630:	20c8      	movs	r0, #200	@ 0xc8
 8003632:	f000 fe9f 	bl	8004374 <HAL_Delay>
							memset(buff, 0, sizeof(buff));
 8003636:	2205      	movs	r2, #5
 8003638:	2100      	movs	r1, #0
 800363a:	4849      	ldr	r0, [pc, #292]	@ (8003760 <main+0xce0>)
 800363c:	f004 fa4e 	bl	8007adc <memset>
							LCD_WriteCommand(HD44780_CLEAR);
 8003640:	2001      	movs	r0, #1
 8003642:	f7ff f84b 	bl	80026dc <LCD_WriteCommand>
							LCD_WriteText("Write Bright");
 8003646:	4847      	ldr	r0, [pc, #284]	@ (8003764 <main+0xce4>)
 8003648:	f7ff f86e 	bl	8002728 <LCD_WriteText>
							while(1) {
								refreshLCD = true;
 800364c:	4b43      	ldr	r3, [pc, #268]	@ (800375c <main+0xcdc>)
 800364e:	2201      	movs	r2, #1
 8003650:	701a      	strb	r2, [r3, #0]
								symbol[0] = keypad_readkey();
 8003652:	f7fe ff01 	bl	8002458 <keypad_readkey>
 8003656:	4603      	mov	r3, r0
 8003658:	461a      	mov	r2, r3
 800365a:	4b43      	ldr	r3, [pc, #268]	@ (8003768 <main+0xce8>)
 800365c:	701a      	strb	r2, [r3, #0]
								if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 800365e:	4b42      	ldr	r3, [pc, #264]	@ (8003768 <main+0xce8>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b2f      	cmp	r3, #47	@ 0x2f
 8003664:	d922      	bls.n	80036ac <main+0xc2c>
 8003666:	4b40      	ldr	r3, [pc, #256]	@ (8003768 <main+0xce8>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b39      	cmp	r3, #57	@ 0x39
 800366c:	d81e      	bhi.n	80036ac <main+0xc2c>
 800366e:	4b3a      	ldr	r3, [pc, #232]	@ (8003758 <main+0xcd8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b03      	cmp	r3, #3
 8003674:	d81a      	bhi.n	80036ac <main+0xc2c>
									buff[i] = symbol[0];
 8003676:	4b38      	ldr	r3, [pc, #224]	@ (8003758 <main+0xcd8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a3b      	ldr	r2, [pc, #236]	@ (8003768 <main+0xce8>)
 800367c:	7811      	ldrb	r1, [r2, #0]
 800367e:	4a38      	ldr	r2, [pc, #224]	@ (8003760 <main+0xce0>)
 8003680:	54d1      	strb	r1, [r2, r3]
									i++;
 8003682:	4b35      	ldr	r3, [pc, #212]	@ (8003758 <main+0xcd8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3301      	adds	r3, #1
 8003688:	4a33      	ldr	r2, [pc, #204]	@ (8003758 <main+0xcd8>)
 800368a:	6013      	str	r3, [r2, #0]
									buff[i] = '\0';
 800368c:	4b32      	ldr	r3, [pc, #200]	@ (8003758 <main+0xcd8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a33      	ldr	r2, [pc, #204]	@ (8003760 <main+0xce0>)
 8003692:	2100      	movs	r1, #0
 8003694:	54d1      	strb	r1, [r2, r3]
									LCD_WriteCommand(HD44780_CLEAR);
 8003696:	2001      	movs	r0, #1
 8003698:	f7ff f820 	bl	80026dc <LCD_WriteCommand>
									LCD_WriteText("Brightness: ");
 800369c:	4833      	ldr	r0, [pc, #204]	@ (800376c <main+0xcec>)
 800369e:	f7ff f843 	bl	8002728 <LCD_WriteText>
									LCD_WriteTextXY(buff, 0, 1);
 80036a2:	2201      	movs	r2, #1
 80036a4:	2100      	movs	r1, #0
 80036a6:	482e      	ldr	r0, [pc, #184]	@ (8003760 <main+0xce0>)
 80036a8:	f7ff f86d 	bl	8002786 <LCD_WriteTextXY>
								}
								HAL_Delay(200);
 80036ac:	20c8      	movs	r0, #200	@ 0xc8
 80036ae:	f000 fe61 	bl	8004374 <HAL_Delay>
								symbol[0] = keypad_readkey();
 80036b2:	f7fe fed1 	bl	8002458 <keypad_readkey>
 80036b6:	4603      	mov	r3, r0
 80036b8:	461a      	mov	r2, r3
 80036ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003768 <main+0xce8>)
 80036bc:	701a      	strb	r2, [r3, #0]
								if(symbol[0] == '*') {
 80036be:	4b2a      	ldr	r3, [pc, #168]	@ (8003768 <main+0xce8>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80036c4:	d123      	bne.n	800370e <main+0xc8e>
									brightnessGarage = atoi(buff)*10;
 80036c6:	4826      	ldr	r0, [pc, #152]	@ (8003760 <main+0xce0>)
 80036c8:	f004 f94c 	bl	8007964 <atoi>
 80036cc:	4602      	mov	r2, r0
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	461a      	mov	r2, r3
 80036d8:	4b25      	ldr	r3, [pc, #148]	@ (8003770 <main+0xcf0>)
 80036da:	601a      	str	r2, [r3, #0]
									if(brightnessGarage >= 1000) {
 80036dc:	4b24      	ldr	r3, [pc, #144]	@ (8003770 <main+0xcf0>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036e4:	db03      	blt.n	80036ee <main+0xc6e>
										brightnessGarage = 999;
 80036e6:	4b22      	ldr	r3, [pc, #136]	@ (8003770 <main+0xcf0>)
 80036e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80036ec:	601a      	str	r2, [r3, #0]
									}
								   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 80036ee:	4b20      	ldr	r3, [pc, #128]	@ (8003770 <main+0xcf0>)
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	4b20      	ldr	r3, [pc, #128]	@ (8003774 <main+0xcf4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	635a      	str	r2, [r3, #52]	@ 0x34
									act_menu = menuGarageLighting;
 80036f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003778 <main+0xcf8>)
 80036fa:	4a20      	ldr	r2, [pc, #128]	@ (800377c <main+0xcfc>)
 80036fc:	601a      	str	r2, [r3, #0]
									position = 1;
 80036fe:	4b20      	ldr	r3, [pc, #128]	@ (8003780 <main+0xd00>)
 8003700:	2201      	movs	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]
									max_pos = 3;
 8003704:	4b1f      	ldr	r3, [pc, #124]	@ (8003784 <main+0xd04>)
 8003706:	2203      	movs	r2, #3
 8003708:	701a      	strb	r2, [r3, #0]
									break;
 800370a:	bf00      	nop
								}
								HAL_Delay(100);
							}
							break;
 800370c:	e00d      	b.n	800372a <main+0xcaa>
								HAL_Delay(100);
 800370e:	2064      	movs	r0, #100	@ 0x64
 8003710:	f000 fe30 	bl	8004374 <HAL_Delay>
								refreshLCD = true;
 8003714:	e79a      	b.n	800364c <main+0xbcc>
 		 	 		default: act_menu = menuGarage, position = 1, max_pos = 2; break;
 8003716:	4b18      	ldr	r3, [pc, #96]	@ (8003778 <main+0xcf8>)
 8003718:	4a1b      	ldr	r2, [pc, #108]	@ (8003788 <main+0xd08>)
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	4b18      	ldr	r3, [pc, #96]	@ (8003780 <main+0xd00>)
 800371e:	2201      	movs	r2, #1
 8003720:	701a      	strb	r2, [r3, #0]
 8003722:	4b18      	ldr	r3, [pc, #96]	@ (8003784 <main+0xd04>)
 8003724:	2202      	movs	r2, #2
 8003726:	701a      	strb	r2, [r3, #0]
 8003728:	bf00      	nop
 		 	 	  	  }
 		 	 	}

 	if (symbol[0] == '#')
 800372a:	4b0f      	ldr	r3, [pc, #60]	@ (8003768 <main+0xce8>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b23      	cmp	r3, #35	@ 0x23
 8003730:	d10b      	bne.n	800374a <main+0xcca>
 	{
 		refreshLCD = true;
 8003732:	4b0a      	ldr	r3, [pc, #40]	@ (800375c <main+0xcdc>)
 8003734:	2201      	movs	r2, #1
 8003736:	701a      	strb	r2, [r3, #0]
 		act_menu = mainmenu;
 8003738:	4b0f      	ldr	r3, [pc, #60]	@ (8003778 <main+0xcf8>)
 800373a:	4a14      	ldr	r2, [pc, #80]	@ (800378c <main+0xd0c>)
 800373c:	601a      	str	r2, [r3, #0]
 		position = 1;
 800373e:	4b10      	ldr	r3, [pc, #64]	@ (8003780 <main+0xd00>)
 8003740:	2201      	movs	r2, #1
 8003742:	701a      	strb	r2, [r3, #0]
 		max_pos = 4;
 8003744:	4b0f      	ldr	r3, [pc, #60]	@ (8003784 <main+0xd04>)
 8003746:	2204      	movs	r2, #4
 8003748:	701a      	strb	r2, [r3, #0]
 	}

 	HAL_Delay(500);
 800374a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800374e:	f000 fe11 	bl	8004374 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(PIR_Garage_GPIO_Port, PIR_Garage_Pin) == GPIO_PIN_SET){PIR_Garage = true;}
 8003752:	f7ff b9c4 	b.w	8002ade <main+0x5e>
 8003756:	bf00      	nop
 8003758:	200001e0 	.word	0x200001e0
 800375c:	200001d6 	.word	0x200001d6
 8003760:	2000019c 	.word	0x2000019c
 8003764:	08008624 	.word	0x08008624
 8003768:	20000198 	.word	0x20000198
 800376c:	08008634 	.word	0x08008634
 8003770:	20000104 	.word	0x20000104
 8003774:	200002dc 	.word	0x200002dc
 8003778:	200000f8 	.word	0x200000f8
 800377c:	200000d8 	.word	0x200000d8
 8003780:	20000054 	.word	0x20000054
 8003784:	20000055 	.word	0x20000055
 8003788:	200000c8 	.word	0x200000c8
 800378c:	20000058 	.word	0x20000058

08003790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b094      	sub	sp, #80	@ 0x50
 8003794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003796:	f107 0320 	add.w	r3, r7, #32
 800379a:	2230      	movs	r2, #48	@ 0x30
 800379c:	2100      	movs	r1, #0
 800379e:	4618      	mov	r0, r3
 80037a0:	f004 f99c 	bl	8007adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037a4:	f107 030c 	add.w	r3, r7, #12
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	605a      	str	r2, [r3, #4]
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	60da      	str	r2, [r3, #12]
 80037b2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80037b4:	f001 f952 	bl	8004a5c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037b8:	4b27      	ldr	r3, [pc, #156]	@ (8003858 <SystemClock_Config+0xc8>)
 80037ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037bc:	4a26      	ldr	r2, [pc, #152]	@ (8003858 <SystemClock_Config+0xc8>)
 80037be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80037c4:	4b24      	ldr	r3, [pc, #144]	@ (8003858 <SystemClock_Config+0xc8>)
 80037c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80037d0:	4b22      	ldr	r3, [pc, #136]	@ (800385c <SystemClock_Config+0xcc>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80037d8:	4a20      	ldr	r2, [pc, #128]	@ (800385c <SystemClock_Config+0xcc>)
 80037da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	4b1e      	ldr	r3, [pc, #120]	@ (800385c <SystemClock_Config+0xcc>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80037e8:	607b      	str	r3, [r7, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80037ec:	2302      	movs	r3, #2
 80037ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037f0:	2301      	movs	r3, #1
 80037f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037f4:	2310      	movs	r3, #16
 80037f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037f8:	2302      	movs	r3, #2
 80037fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037fc:	2300      	movs	r3, #0
 80037fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003800:	2308      	movs	r3, #8
 8003802:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003804:	2348      	movs	r3, #72	@ 0x48
 8003806:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003808:	2302      	movs	r3, #2
 800380a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800380c:	2303      	movs	r3, #3
 800380e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003810:	f107 0320 	add.w	r3, r7, #32
 8003814:	4618      	mov	r0, r3
 8003816:	f001 f931 	bl	8004a7c <HAL_RCC_OscConfig>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003820:	f000 f81e 	bl	8003860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003824:	230f      	movs	r3, #15
 8003826:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003828:	2302      	movs	r3, #2
 800382a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003830:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003834:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003836:	2300      	movs	r3, #0
 8003838:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800383a:	f107 030c 	add.w	r3, r7, #12
 800383e:	2102      	movs	r1, #2
 8003840:	4618      	mov	r0, r3
 8003842:	f001 fbbf 	bl	8004fc4 <HAL_RCC_ClockConfig>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800384c:	f000 f808 	bl	8003860 <Error_Handler>
  }
}
 8003850:	bf00      	nop
 8003852:	3750      	adds	r7, #80	@ 0x50
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40023800 	.word	0x40023800
 800385c:	40007000 	.word	0x40007000

08003860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003864:	b672      	cpsid	i
}
 8003866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003868:	bf00      	nop
 800386a:	e7fd      	b.n	8003868 <Error_Handler+0x8>

0800386c <MX_SPI4_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8003870:	4b1b      	ldr	r3, [pc, #108]	@ (80038e0 <MX_SPI4_Init+0x74>)
 8003872:	4a1c      	ldr	r2, [pc, #112]	@ (80038e4 <MX_SPI4_Init+0x78>)
 8003874:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003876:	4b1a      	ldr	r3, [pc, #104]	@ (80038e0 <MX_SPI4_Init+0x74>)
 8003878:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800387c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800387e:	4b18      	ldr	r3, [pc, #96]	@ (80038e0 <MX_SPI4_Init+0x74>)
 8003880:	2200      	movs	r2, #0
 8003882:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003884:	4b16      	ldr	r3, [pc, #88]	@ (80038e0 <MX_SPI4_Init+0x74>)
 8003886:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800388a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800388c:	4b14      	ldr	r3, [pc, #80]	@ (80038e0 <MX_SPI4_Init+0x74>)
 800388e:	2202      	movs	r2, #2
 8003890:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003892:	4b13      	ldr	r3, [pc, #76]	@ (80038e0 <MX_SPI4_Init+0x74>)
 8003894:	2201      	movs	r2, #1
 8003896:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003898:	4b11      	ldr	r3, [pc, #68]	@ (80038e0 <MX_SPI4_Init+0x74>)
 800389a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800389e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80038a0:	4b0f      	ldr	r3, [pc, #60]	@ (80038e0 <MX_SPI4_Init+0x74>)
 80038a2:	2210      	movs	r2, #16
 80038a4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038a6:	4b0e      	ldr	r3, [pc, #56]	@ (80038e0 <MX_SPI4_Init+0x74>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80038ac:	4b0c      	ldr	r3, [pc, #48]	@ (80038e0 <MX_SPI4_Init+0x74>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038b2:	4b0b      	ldr	r3, [pc, #44]	@ (80038e0 <MX_SPI4_Init+0x74>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 80038b8:	4b09      	ldr	r3, [pc, #36]	@ (80038e0 <MX_SPI4_Init+0x74>)
 80038ba:	2207      	movs	r2, #7
 80038bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80038be:	4b08      	ldr	r3, [pc, #32]	@ (80038e0 <MX_SPI4_Init+0x74>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80038c4:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <MX_SPI4_Init+0x74>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80038ca:	4805      	ldr	r0, [pc, #20]	@ (80038e0 <MX_SPI4_Init+0x74>)
 80038cc:	f001 fd6c 	bl	80053a8 <HAL_SPI_Init>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80038d6:	f7ff ffc3 	bl	8003860 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20000210 	.word	0x20000210
 80038e4:	40013400 	.word	0x40013400

080038e8 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80038ec:	4b1b      	ldr	r3, [pc, #108]	@ (800395c <MX_SPI5_Init+0x74>)
 80038ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003960 <MX_SPI5_Init+0x78>)
 80038f0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80038f2:	4b1a      	ldr	r3, [pc, #104]	@ (800395c <MX_SPI5_Init+0x74>)
 80038f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80038f8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80038fa:	4b18      	ldr	r3, [pc, #96]	@ (800395c <MX_SPI5_Init+0x74>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003900:	4b16      	ldr	r3, [pc, #88]	@ (800395c <MX_SPI5_Init+0x74>)
 8003902:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003906:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003908:	4b14      	ldr	r3, [pc, #80]	@ (800395c <MX_SPI5_Init+0x74>)
 800390a:	2202      	movs	r2, #2
 800390c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 800390e:	4b13      	ldr	r3, [pc, #76]	@ (800395c <MX_SPI5_Init+0x74>)
 8003910:	2201      	movs	r2, #1
 8003912:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003914:	4b11      	ldr	r3, [pc, #68]	@ (800395c <MX_SPI5_Init+0x74>)
 8003916:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800391a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800391c:	4b0f      	ldr	r3, [pc, #60]	@ (800395c <MX_SPI5_Init+0x74>)
 800391e:	2210      	movs	r2, #16
 8003920:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003922:	4b0e      	ldr	r3, [pc, #56]	@ (800395c <MX_SPI5_Init+0x74>)
 8003924:	2200      	movs	r2, #0
 8003926:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003928:	4b0c      	ldr	r3, [pc, #48]	@ (800395c <MX_SPI5_Init+0x74>)
 800392a:	2200      	movs	r2, #0
 800392c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800392e:	4b0b      	ldr	r3, [pc, #44]	@ (800395c <MX_SPI5_Init+0x74>)
 8003930:	2200      	movs	r2, #0
 8003932:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 7;
 8003934:	4b09      	ldr	r3, [pc, #36]	@ (800395c <MX_SPI5_Init+0x74>)
 8003936:	2207      	movs	r2, #7
 8003938:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800393a:	4b08      	ldr	r3, [pc, #32]	@ (800395c <MX_SPI5_Init+0x74>)
 800393c:	2200      	movs	r2, #0
 800393e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003940:	4b06      	ldr	r3, [pc, #24]	@ (800395c <MX_SPI5_Init+0x74>)
 8003942:	2200      	movs	r2, #0
 8003944:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003946:	4805      	ldr	r0, [pc, #20]	@ (800395c <MX_SPI5_Init+0x74>)
 8003948:	f001 fd2e 	bl	80053a8 <HAL_SPI_Init>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8003952:	f7ff ff85 	bl	8003860 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003956:	bf00      	nop
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20000274 	.word	0x20000274
 8003960:	40015000 	.word	0x40015000

08003964 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08c      	sub	sp, #48	@ 0x30
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396c:	f107 031c 	add.w	r3, r7, #28
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	60da      	str	r2, [r3, #12]
 800397a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a36      	ldr	r2, [pc, #216]	@ (8003a5c <HAL_SPI_MspInit+0xf8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d130      	bne.n	80039e8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003986:	4b36      	ldr	r3, [pc, #216]	@ (8003a60 <HAL_SPI_MspInit+0xfc>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398a:	4a35      	ldr	r2, [pc, #212]	@ (8003a60 <HAL_SPI_MspInit+0xfc>)
 800398c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003990:	6453      	str	r3, [r2, #68]	@ 0x44
 8003992:	4b33      	ldr	r3, [pc, #204]	@ (8003a60 <HAL_SPI_MspInit+0xfc>)
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800399e:	4b30      	ldr	r3, [pc, #192]	@ (8003a60 <HAL_SPI_MspInit+0xfc>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a2:	4a2f      	ldr	r2, [pc, #188]	@ (8003a60 <HAL_SPI_MspInit+0xfc>)
 80039a4:	f043 0310 	orr.w	r3, r3, #16
 80039a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003a60 <HAL_SPI_MspInit+0xfc>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ae:	f003 0310 	and.w	r3, r3, #16
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80039b6:	2364      	movs	r3, #100	@ 0x64
 80039b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ba:	2302      	movs	r3, #2
 80039bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c2:	2303      	movs	r3, #3
 80039c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80039c6:	2305      	movs	r3, #5
 80039c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039ca:	f107 031c 	add.w	r3, r7, #28
 80039ce:	4619      	mov	r1, r3
 80039d0:	4824      	ldr	r0, [pc, #144]	@ (8003a64 <HAL_SPI_MspInit+0x100>)
 80039d2:	f000 fe27 	bl	8004624 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80039d6:	2200      	movs	r2, #0
 80039d8:	2100      	movs	r1, #0
 80039da:	2054      	movs	r0, #84	@ 0x54
 80039dc:	f000 fdc9 	bl	8004572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80039e0:	2054      	movs	r0, #84	@ 0x54
 80039e2:	f000 fde2 	bl	80045aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80039e6:	e035      	b.n	8003a54 <HAL_SPI_MspInit+0xf0>
  else if(spiHandle->Instance==SPI5)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a1e      	ldr	r2, [pc, #120]	@ (8003a68 <HAL_SPI_MspInit+0x104>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d130      	bne.n	8003a54 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80039f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a60 <HAL_SPI_MspInit+0xfc>)
 80039f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003a60 <HAL_SPI_MspInit+0xfc>)
 80039f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80039fe:	4b18      	ldr	r3, [pc, #96]	@ (8003a60 <HAL_SPI_MspInit+0xfc>)
 8003a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a06:	613b      	str	r3, [r7, #16]
 8003a08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a0a:	4b15      	ldr	r3, [pc, #84]	@ (8003a60 <HAL_SPI_MspInit+0xfc>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0e:	4a14      	ldr	r2, [pc, #80]	@ (8003a60 <HAL_SPI_MspInit+0xfc>)
 8003a10:	f043 0320 	orr.w	r3, r3, #32
 8003a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a16:	4b12      	ldr	r3, [pc, #72]	@ (8003a60 <HAL_SPI_MspInit+0xfc>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003a22:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a30:	2303      	movs	r3, #3
 8003a32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003a34:	2305      	movs	r3, #5
 8003a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003a38:	f107 031c 	add.w	r3, r7, #28
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	480b      	ldr	r0, [pc, #44]	@ (8003a6c <HAL_SPI_MspInit+0x108>)
 8003a40:	f000 fdf0 	bl	8004624 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 8003a44:	2200      	movs	r2, #0
 8003a46:	2100      	movs	r1, #0
 8003a48:	2055      	movs	r0, #85	@ 0x55
 8003a4a:	f000 fd92 	bl	8004572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8003a4e:	2055      	movs	r0, #85	@ 0x55
 8003a50:	f000 fdab 	bl	80045aa <HAL_NVIC_EnableIRQ>
}
 8003a54:	bf00      	nop
 8003a56:	3730      	adds	r7, #48	@ 0x30
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40013400 	.word	0x40013400
 8003a60:	40023800 	.word	0x40023800
 8003a64:	40021000 	.word	0x40021000
 8003a68:	40015000 	.word	0x40015000
 8003a6c:	40021400 	.word	0x40021400

08003a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a76:	4b0f      	ldr	r3, [pc, #60]	@ (8003ab4 <HAL_MspInit+0x44>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7a:	4a0e      	ldr	r2, [pc, #56]	@ (8003ab4 <HAL_MspInit+0x44>)
 8003a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a80:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a82:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab4 <HAL_MspInit+0x44>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a8a:	607b      	str	r3, [r7, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a8e:	4b09      	ldr	r3, [pc, #36]	@ (8003ab4 <HAL_MspInit+0x44>)
 8003a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a92:	4a08      	ldr	r2, [pc, #32]	@ (8003ab4 <HAL_MspInit+0x44>)
 8003a94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a9a:	4b06      	ldr	r3, [pc, #24]	@ (8003ab4 <HAL_MspInit+0x44>)
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40023800 	.word	0x40023800

08003ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003abc:	bf00      	nop
 8003abe:	e7fd      	b.n	8003abc <NMI_Handler+0x4>

08003ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ac4:	bf00      	nop
 8003ac6:	e7fd      	b.n	8003ac4 <HardFault_Handler+0x4>

08003ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003acc:	bf00      	nop
 8003ace:	e7fd      	b.n	8003acc <MemManage_Handler+0x4>

08003ad0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ad4:	bf00      	nop
 8003ad6:	e7fd      	b.n	8003ad4 <BusFault_Handler+0x4>

08003ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003adc:	bf00      	nop
 8003ade:	e7fd      	b.n	8003adc <UsageFault_Handler+0x4>

08003ae0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ae4:	bf00      	nop
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aee:	b480      	push	{r7}
 8003af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b00:	bf00      	nop
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b0e:	f000 fc11 	bl	8004334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b12:	bf00      	nop
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b1c:	4802      	ldr	r0, [pc, #8]	@ (8003b28 <TIM2_IRQHandler+0x10>)
 8003b1e:	f002 ff91 	bl	8006a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b22:	bf00      	nop
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	200002dc 	.word	0x200002dc

08003b2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b30:	4802      	ldr	r0, [pc, #8]	@ (8003b3c <TIM3_IRQHandler+0x10>)
 8003b32:	f002 ff87 	bl	8006a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20000328 	.word	0x20000328

08003b40 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003b44:	4802      	ldr	r0, [pc, #8]	@ (8003b50 <TIM4_IRQHandler+0x10>)
 8003b46:	f002 ff7d 	bl	8006a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000374 	.word	0x20000374

08003b54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8003b58:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003b5c:	f000 ff5a 	bl	8004a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b60:	bf00      	nop
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8003b68:	4802      	ldr	r0, [pc, #8]	@ (8003b74 <SPI4_IRQHandler+0x10>)
 8003b6a:	f002 f979 	bl	8005e60 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000210 	.word	0x20000210

08003b78 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8003b7c:	4802      	ldr	r0, [pc, #8]	@ (8003b88 <SPI5_IRQHandler+0x10>)
 8003b7e:	f002 f96f 	bl	8005e60 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20000274 	.word	0x20000274

08003b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b94:	4a14      	ldr	r2, [pc, #80]	@ (8003be8 <_sbrk+0x5c>)
 8003b96:	4b15      	ldr	r3, [pc, #84]	@ (8003bec <_sbrk+0x60>)
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ba0:	4b13      	ldr	r3, [pc, #76]	@ (8003bf0 <_sbrk+0x64>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d102      	bne.n	8003bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ba8:	4b11      	ldr	r3, [pc, #68]	@ (8003bf0 <_sbrk+0x64>)
 8003baa:	4a12      	ldr	r2, [pc, #72]	@ (8003bf4 <_sbrk+0x68>)
 8003bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bae:	4b10      	ldr	r3, [pc, #64]	@ (8003bf0 <_sbrk+0x64>)
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d207      	bcs.n	8003bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bbc:	f003 ff96 	bl	8007aec <__errno>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	220c      	movs	r2, #12
 8003bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bca:	e009      	b.n	8003be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bcc:	4b08      	ldr	r3, [pc, #32]	@ (8003bf0 <_sbrk+0x64>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bd2:	4b07      	ldr	r3, [pc, #28]	@ (8003bf0 <_sbrk+0x64>)
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	4a05      	ldr	r2, [pc, #20]	@ (8003bf0 <_sbrk+0x64>)
 8003bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bde:	68fb      	ldr	r3, [r7, #12]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	20050000 	.word	0x20050000
 8003bec:	00000400 	.word	0x00000400
 8003bf0:	200002d8 	.word	0x200002d8
 8003bf4:	20000510 	.word	0x20000510

08003bf8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bfc:	4b06      	ldr	r3, [pc, #24]	@ (8003c18 <SystemInit+0x20>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c02:	4a05      	ldr	r2, [pc, #20]	@ (8003c18 <SystemInit+0x20>)
 8003c04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c0c:	bf00      	nop
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	e000ed00 	.word	0xe000ed00

08003c1c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08e      	sub	sp, #56	@ 0x38
 8003c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	605a      	str	r2, [r3, #4]
 8003c2c:	609a      	str	r2, [r3, #8]
 8003c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c30:	f107 031c 	add.w	r3, r7, #28
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	605a      	str	r2, [r3, #4]
 8003c3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c3c:	463b      	mov	r3, r7
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	605a      	str	r2, [r3, #4]
 8003c44:	609a      	str	r2, [r3, #8]
 8003c46:	60da      	str	r2, [r3, #12]
 8003c48:	611a      	str	r2, [r3, #16]
 8003c4a:	615a      	str	r2, [r3, #20]
 8003c4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c4e:	4b34      	ldr	r3, [pc, #208]	@ (8003d20 <MX_TIM2_Init+0x104>)
 8003c50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003c54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8003c56:	4b32      	ldr	r3, [pc, #200]	@ (8003d20 <MX_TIM2_Init+0x104>)
 8003c58:	2247      	movs	r2, #71	@ 0x47
 8003c5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c5c:	4b30      	ldr	r3, [pc, #192]	@ (8003d20 <MX_TIM2_Init+0x104>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003c62:	4b2f      	ldr	r3, [pc, #188]	@ (8003d20 <MX_TIM2_Init+0x104>)
 8003c64:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003c68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8003d20 <MX_TIM2_Init+0x104>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c70:	4b2b      	ldr	r3, [pc, #172]	@ (8003d20 <MX_TIM2_Init+0x104>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c76:	482a      	ldr	r0, [pc, #168]	@ (8003d20 <MX_TIM2_Init+0x104>)
 8003c78:	f002 fc0a 	bl	8006490 <HAL_TIM_Base_Init>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003c82:	f7ff fded 	bl	8003860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c90:	4619      	mov	r1, r3
 8003c92:	4823      	ldr	r0, [pc, #140]	@ (8003d20 <MX_TIM2_Init+0x104>)
 8003c94:	f003 f90a 	bl	8006eac <HAL_TIM_ConfigClockSource>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003c9e:	f7ff fddf 	bl	8003860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003ca2:	481f      	ldr	r0, [pc, #124]	@ (8003d20 <MX_TIM2_Init+0x104>)
 8003ca4:	f002 fcf3 	bl	800668e <HAL_TIM_PWM_Init>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003cae:	f7ff fdd7 	bl	8003860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003cba:	f107 031c 	add.w	r3, r7, #28
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4817      	ldr	r0, [pc, #92]	@ (8003d20 <MX_TIM2_Init+0x104>)
 8003cc2:	f003 fda3 	bl	800780c <HAL_TIMEx_MasterConfigSynchronization>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003ccc:	f7ff fdc8 	bl	8003860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cd0:	2360      	movs	r3, #96	@ 0x60
 8003cd2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8003cd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cd8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ce2:	463b      	mov	r3, r7
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	480d      	ldr	r0, [pc, #52]	@ (8003d20 <MX_TIM2_Init+0x104>)
 8003cea:	f002 ffcb 	bl	8006c84 <HAL_TIM_PWM_ConfigChannel>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003cf4:	f7ff fdb4 	bl	8003860 <Error_Handler>
  }
  sConfigOC.Pulse = 10;
 8003cf8:	230a      	movs	r3, #10
 8003cfa:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003cfc:	463b      	mov	r3, r7
 8003cfe:	2208      	movs	r2, #8
 8003d00:	4619      	mov	r1, r3
 8003d02:	4807      	ldr	r0, [pc, #28]	@ (8003d20 <MX_TIM2_Init+0x104>)
 8003d04:	f002 ffbe 	bl	8006c84 <HAL_TIM_PWM_ConfigChannel>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8003d0e:	f7ff fda7 	bl	8003860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003d12:	4803      	ldr	r0, [pc, #12]	@ (8003d20 <MX_TIM2_Init+0x104>)
 8003d14:	f000 f9ec 	bl	80040f0 <HAL_TIM_MspPostInit>

}
 8003d18:	bf00      	nop
 8003d1a:	3738      	adds	r7, #56	@ 0x38
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	200002dc 	.word	0x200002dc

08003d24 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08e      	sub	sp, #56	@ 0x38
 8003d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	605a      	str	r2, [r3, #4]
 8003d34:	609a      	str	r2, [r3, #8]
 8003d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d38:	f107 031c 	add.w	r3, r7, #28
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d44:	463b      	mov	r3, r7
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	605a      	str	r2, [r3, #4]
 8003d4c:	609a      	str	r2, [r3, #8]
 8003d4e:	60da      	str	r2, [r3, #12]
 8003d50:	611a      	str	r2, [r3, #16]
 8003d52:	615a      	str	r2, [r3, #20]
 8003d54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003d56:	4b33      	ldr	r3, [pc, #204]	@ (8003e24 <MX_TIM3_Init+0x100>)
 8003d58:	4a33      	ldr	r2, [pc, #204]	@ (8003e28 <MX_TIM3_Init+0x104>)
 8003d5a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8003d5c:	4b31      	ldr	r3, [pc, #196]	@ (8003e24 <MX_TIM3_Init+0x100>)
 8003d5e:	2247      	movs	r2, #71	@ 0x47
 8003d60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d62:	4b30      	ldr	r3, [pc, #192]	@ (8003e24 <MX_TIM3_Init+0x100>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8003d68:	4b2e      	ldr	r3, [pc, #184]	@ (8003e24 <MX_TIM3_Init+0x100>)
 8003d6a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003d6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d70:	4b2c      	ldr	r3, [pc, #176]	@ (8003e24 <MX_TIM3_Init+0x100>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d76:	4b2b      	ldr	r3, [pc, #172]	@ (8003e24 <MX_TIM3_Init+0x100>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003d7c:	4829      	ldr	r0, [pc, #164]	@ (8003e24 <MX_TIM3_Init+0x100>)
 8003d7e:	f002 fb87 	bl	8006490 <HAL_TIM_Base_Init>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003d88:	f7ff fd6a 	bl	8003860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003d92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d96:	4619      	mov	r1, r3
 8003d98:	4822      	ldr	r0, [pc, #136]	@ (8003e24 <MX_TIM3_Init+0x100>)
 8003d9a:	f003 f887 	bl	8006eac <HAL_TIM_ConfigClockSource>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003da4:	f7ff fd5c 	bl	8003860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003da8:	481e      	ldr	r0, [pc, #120]	@ (8003e24 <MX_TIM3_Init+0x100>)
 8003daa:	f002 fc70 	bl	800668e <HAL_TIM_PWM_Init>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003db4:	f7ff fd54 	bl	8003860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003dc0:	f107 031c 	add.w	r3, r7, #28
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4817      	ldr	r0, [pc, #92]	@ (8003e24 <MX_TIM3_Init+0x100>)
 8003dc8:	f003 fd20 	bl	800780c <HAL_TIMEx_MasterConfigSynchronization>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003dd2:	f7ff fd45 	bl	8003860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003dd6:	2360      	movs	r3, #96	@ 0x60
 8003dd8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8003dda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dde:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003de0:	2300      	movs	r3, #0
 8003de2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003de4:	2300      	movs	r3, #0
 8003de6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003de8:	463b      	mov	r3, r7
 8003dea:	2200      	movs	r2, #0
 8003dec:	4619      	mov	r1, r3
 8003dee:	480d      	ldr	r0, [pc, #52]	@ (8003e24 <MX_TIM3_Init+0x100>)
 8003df0:	f002 ff48 	bl	8006c84 <HAL_TIM_PWM_ConfigChannel>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8003dfa:	f7ff fd31 	bl	8003860 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003dfe:	463b      	mov	r3, r7
 8003e00:	2208      	movs	r2, #8
 8003e02:	4619      	mov	r1, r3
 8003e04:	4807      	ldr	r0, [pc, #28]	@ (8003e24 <MX_TIM3_Init+0x100>)
 8003e06:	f002 ff3d 	bl	8006c84 <HAL_TIM_PWM_ConfigChannel>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8003e10:	f7ff fd26 	bl	8003860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003e14:	4803      	ldr	r0, [pc, #12]	@ (8003e24 <MX_TIM3_Init+0x100>)
 8003e16:	f000 f96b 	bl	80040f0 <HAL_TIM_MspPostInit>

}
 8003e1a:	bf00      	nop
 8003e1c:	3738      	adds	r7, #56	@ 0x38
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000328 	.word	0x20000328
 8003e28:	40000400 	.word	0x40000400

08003e2c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08e      	sub	sp, #56	@ 0x38
 8003e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	605a      	str	r2, [r3, #4]
 8003e3c:	609a      	str	r2, [r3, #8]
 8003e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e40:	f107 031c 	add.w	r3, r7, #28
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	605a      	str	r2, [r3, #4]
 8003e4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e4c:	463b      	mov	r3, r7
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	605a      	str	r2, [r3, #4]
 8003e54:	609a      	str	r2, [r3, #8]
 8003e56:	60da      	str	r2, [r3, #12]
 8003e58:	611a      	str	r2, [r3, #16]
 8003e5a:	615a      	str	r2, [r3, #20]
 8003e5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003e5e:	4b34      	ldr	r3, [pc, #208]	@ (8003f30 <MX_TIM4_Init+0x104>)
 8003e60:	4a34      	ldr	r2, [pc, #208]	@ (8003f34 <MX_TIM4_Init+0x108>)
 8003e62:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8003e64:	4b32      	ldr	r3, [pc, #200]	@ (8003f30 <MX_TIM4_Init+0x104>)
 8003e66:	2247      	movs	r2, #71	@ 0x47
 8003e68:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e6a:	4b31      	ldr	r3, [pc, #196]	@ (8003f30 <MX_TIM4_Init+0x104>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8003e70:	4b2f      	ldr	r3, [pc, #188]	@ (8003f30 <MX_TIM4_Init+0x104>)
 8003e72:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003e76:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e78:	4b2d      	ldr	r3, [pc, #180]	@ (8003f30 <MX_TIM4_Init+0x104>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e7e:	4b2c      	ldr	r3, [pc, #176]	@ (8003f30 <MX_TIM4_Init+0x104>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003e84:	482a      	ldr	r0, [pc, #168]	@ (8003f30 <MX_TIM4_Init+0x104>)
 8003e86:	f002 fb03 	bl	8006490 <HAL_TIM_Base_Init>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003e90:	f7ff fce6 	bl	8003860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e98:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003e9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4823      	ldr	r0, [pc, #140]	@ (8003f30 <MX_TIM4_Init+0x104>)
 8003ea2:	f003 f803 	bl	8006eac <HAL_TIM_ConfigClockSource>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003eac:	f7ff fcd8 	bl	8003860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003eb0:	481f      	ldr	r0, [pc, #124]	@ (8003f30 <MX_TIM4_Init+0x104>)
 8003eb2:	f002 fbec 	bl	800668e <HAL_TIM_PWM_Init>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003ebc:	f7ff fcd0 	bl	8003860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003ec8:	f107 031c 	add.w	r3, r7, #28
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4818      	ldr	r0, [pc, #96]	@ (8003f30 <MX_TIM4_Init+0x104>)
 8003ed0:	f003 fc9c 	bl	800780c <HAL_TIMEx_MasterConfigSynchronization>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003eda:	f7ff fcc1 	bl	8003860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ede:	2360      	movs	r3, #96	@ 0x60
 8003ee0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8003ee2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ee6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003eec:	2300      	movs	r3, #0
 8003eee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ef0:	463b      	mov	r3, r7
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	480e      	ldr	r0, [pc, #56]	@ (8003f30 <MX_TIM4_Init+0x104>)
 8003ef8:	f002 fec4 	bl	8006c84 <HAL_TIM_PWM_ConfigChannel>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8003f02:	f7ff fcad 	bl	8003860 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003f06:	2300      	movs	r3, #0
 8003f08:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f0a:	463b      	mov	r3, r7
 8003f0c:	2208      	movs	r2, #8
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4807      	ldr	r0, [pc, #28]	@ (8003f30 <MX_TIM4_Init+0x104>)
 8003f12:	f002 feb7 	bl	8006c84 <HAL_TIM_PWM_ConfigChannel>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8003f1c:	f7ff fca0 	bl	8003860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003f20:	4803      	ldr	r0, [pc, #12]	@ (8003f30 <MX_TIM4_Init+0x104>)
 8003f22:	f000 f8e5 	bl	80040f0 <HAL_TIM_MspPostInit>

}
 8003f26:	bf00      	nop
 8003f28:	3738      	adds	r7, #56	@ 0x38
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20000374 	.word	0x20000374
 8003f34:	40000800 	.word	0x40000800

08003f38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08e      	sub	sp, #56	@ 0x38
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	605a      	str	r2, [r3, #4]
 8003f4a:	609a      	str	r2, [r3, #8]
 8003f4c:	60da      	str	r2, [r3, #12]
 8003f4e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f58:	d130      	bne.n	8003fbc <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f5a:	4b5e      	ldr	r3, [pc, #376]	@ (80040d4 <HAL_TIM_Base_MspInit+0x19c>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5e:	4a5d      	ldr	r2, [pc, #372]	@ (80040d4 <HAL_TIM_Base_MspInit+0x19c>)
 8003f60:	f043 0301 	orr.w	r3, r3, #1
 8003f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f66:	4b5b      	ldr	r3, [pc, #364]	@ (80040d4 <HAL_TIM_Base_MspInit+0x19c>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	623b      	str	r3, [r7, #32]
 8003f70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f72:	4b58      	ldr	r3, [pc, #352]	@ (80040d4 <HAL_TIM_Base_MspInit+0x19c>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f76:	4a57      	ldr	r2, [pc, #348]	@ (80040d4 <HAL_TIM_Base_MspInit+0x19c>)
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f7e:	4b55      	ldr	r3, [pc, #340]	@ (80040d4 <HAL_TIM_Base_MspInit+0x19c>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	61fb      	str	r3, [r7, #28]
 8003f88:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003f8a:	2308      	movs	r3, #8
 8003f8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f96:	2300      	movs	r3, #0
 8003f98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	484c      	ldr	r0, [pc, #304]	@ (80040d8 <HAL_TIM_Base_MspInit+0x1a0>)
 8003fa6:	f000 fb3d 	bl	8004624 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003faa:	2200      	movs	r2, #0
 8003fac:	2100      	movs	r1, #0
 8003fae:	201c      	movs	r0, #28
 8003fb0:	f000 fadf 	bl	8004572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003fb4:	201c      	movs	r0, #28
 8003fb6:	f000 faf8 	bl	80045aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003fba:	e087      	b.n	80040cc <HAL_TIM_Base_MspInit+0x194>
  else if(tim_baseHandle->Instance==TIM3)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a46      	ldr	r2, [pc, #280]	@ (80040dc <HAL_TIM_Base_MspInit+0x1a4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d14c      	bne.n	8004060 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fc6:	4b43      	ldr	r3, [pc, #268]	@ (80040d4 <HAL_TIM_Base_MspInit+0x19c>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fca:	4a42      	ldr	r2, [pc, #264]	@ (80040d4 <HAL_TIM_Base_MspInit+0x19c>)
 8003fcc:	f043 0302 	orr.w	r3, r3, #2
 8003fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fd2:	4b40      	ldr	r3, [pc, #256]	@ (80040d4 <HAL_TIM_Base_MspInit+0x19c>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	61bb      	str	r3, [r7, #24]
 8003fdc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fde:	4b3d      	ldr	r3, [pc, #244]	@ (80040d4 <HAL_TIM_Base_MspInit+0x19c>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe2:	4a3c      	ldr	r2, [pc, #240]	@ (80040d4 <HAL_TIM_Base_MspInit+0x19c>)
 8003fe4:	f043 0302 	orr.w	r3, r3, #2
 8003fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fea:	4b3a      	ldr	r3, [pc, #232]	@ (80040d4 <HAL_TIM_Base_MspInit+0x19c>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	617b      	str	r3, [r7, #20]
 8003ff4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ff6:	4b37      	ldr	r3, [pc, #220]	@ (80040d4 <HAL_TIM_Base_MspInit+0x19c>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffa:	4a36      	ldr	r2, [pc, #216]	@ (80040d4 <HAL_TIM_Base_MspInit+0x19c>)
 8003ffc:	f043 0304 	orr.w	r3, r3, #4
 8004000:	6313      	str	r3, [r2, #48]	@ 0x30
 8004002:	4b34      	ldr	r3, [pc, #208]	@ (80040d4 <HAL_TIM_Base_MspInit+0x19c>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800400e:	2302      	movs	r3, #2
 8004010:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004012:	2302      	movs	r3, #2
 8004014:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004016:	2300      	movs	r3, #0
 8004018:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800401a:	2300      	movs	r3, #0
 800401c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800401e:	2302      	movs	r3, #2
 8004020:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004026:	4619      	mov	r1, r3
 8004028:	482d      	ldr	r0, [pc, #180]	@ (80040e0 <HAL_TIM_Base_MspInit+0x1a8>)
 800402a:	f000 fafb 	bl	8004624 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800402e:	2380      	movs	r3, #128	@ 0x80
 8004030:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004032:	2302      	movs	r3, #2
 8004034:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004036:	2300      	movs	r3, #0
 8004038:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800403a:	2300      	movs	r3, #0
 800403c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800403e:	2302      	movs	r3, #2
 8004040:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004042:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004046:	4619      	mov	r1, r3
 8004048:	4826      	ldr	r0, [pc, #152]	@ (80040e4 <HAL_TIM_Base_MspInit+0x1ac>)
 800404a:	f000 faeb 	bl	8004624 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800404e:	2200      	movs	r2, #0
 8004050:	2100      	movs	r1, #0
 8004052:	201d      	movs	r0, #29
 8004054:	f000 fa8d 	bl	8004572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004058:	201d      	movs	r0, #29
 800405a:	f000 faa6 	bl	80045aa <HAL_NVIC_EnableIRQ>
}
 800405e:	e035      	b.n	80040cc <HAL_TIM_Base_MspInit+0x194>
  else if(tim_baseHandle->Instance==TIM4)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a20      	ldr	r2, [pc, #128]	@ (80040e8 <HAL_TIM_Base_MspInit+0x1b0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d130      	bne.n	80040cc <HAL_TIM_Base_MspInit+0x194>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800406a:	4b1a      	ldr	r3, [pc, #104]	@ (80040d4 <HAL_TIM_Base_MspInit+0x19c>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406e:	4a19      	ldr	r2, [pc, #100]	@ (80040d4 <HAL_TIM_Base_MspInit+0x19c>)
 8004070:	f043 0304 	orr.w	r3, r3, #4
 8004074:	6413      	str	r3, [r2, #64]	@ 0x40
 8004076:	4b17      	ldr	r3, [pc, #92]	@ (80040d4 <HAL_TIM_Base_MspInit+0x19c>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004082:	4b14      	ldr	r3, [pc, #80]	@ (80040d4 <HAL_TIM_Base_MspInit+0x19c>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004086:	4a13      	ldr	r2, [pc, #76]	@ (80040d4 <HAL_TIM_Base_MspInit+0x19c>)
 8004088:	f043 0308 	orr.w	r3, r3, #8
 800408c:	6313      	str	r3, [r2, #48]	@ 0x30
 800408e:	4b11      	ldr	r3, [pc, #68]	@ (80040d4 <HAL_TIM_Base_MspInit+0x19c>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	60bb      	str	r3, [r7, #8]
 8004098:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800409a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800409e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a0:	2302      	movs	r3, #2
 80040a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a8:	2300      	movs	r3, #0
 80040aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80040ac:	2302      	movs	r3, #2
 80040ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040b4:	4619      	mov	r1, r3
 80040b6:	480d      	ldr	r0, [pc, #52]	@ (80040ec <HAL_TIM_Base_MspInit+0x1b4>)
 80040b8:	f000 fab4 	bl	8004624 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80040bc:	2200      	movs	r2, #0
 80040be:	2100      	movs	r1, #0
 80040c0:	201e      	movs	r0, #30
 80040c2:	f000 fa56 	bl	8004572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80040c6:	201e      	movs	r0, #30
 80040c8:	f000 fa6f 	bl	80045aa <HAL_NVIC_EnableIRQ>
}
 80040cc:	bf00      	nop
 80040ce:	3738      	adds	r7, #56	@ 0x38
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40023800 	.word	0x40023800
 80040d8:	40020000 	.word	0x40020000
 80040dc:	40000400 	.word	0x40000400
 80040e0:	40020400 	.word	0x40020400
 80040e4:	40020800 	.word	0x40020800
 80040e8:	40000800 	.word	0x40000800
 80040ec:	40020c00 	.word	0x40020c00

080040f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08c      	sub	sp, #48	@ 0x30
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f8:	f107 031c 	add.w	r3, r7, #28
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	605a      	str	r2, [r3, #4]
 8004102:	609a      	str	r2, [r3, #8]
 8004104:	60da      	str	r2, [r3, #12]
 8004106:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004110:	d139      	bne.n	8004186 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004112:	4b4f      	ldr	r3, [pc, #316]	@ (8004250 <HAL_TIM_MspPostInit+0x160>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004116:	4a4e      	ldr	r2, [pc, #312]	@ (8004250 <HAL_TIM_MspPostInit+0x160>)
 8004118:	f043 0301 	orr.w	r3, r3, #1
 800411c:	6313      	str	r3, [r2, #48]	@ 0x30
 800411e:	4b4c      	ldr	r3, [pc, #304]	@ (8004250 <HAL_TIM_MspPostInit+0x160>)
 8004120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	61bb      	str	r3, [r7, #24]
 8004128:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800412a:	4b49      	ldr	r3, [pc, #292]	@ (8004250 <HAL_TIM_MspPostInit+0x160>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412e:	4a48      	ldr	r2, [pc, #288]	@ (8004250 <HAL_TIM_MspPostInit+0x160>)
 8004130:	f043 0302 	orr.w	r3, r3, #2
 8004134:	6313      	str	r3, [r2, #48]	@ 0x30
 8004136:	4b46      	ldr	r3, [pc, #280]	@ (8004250 <HAL_TIM_MspPostInit+0x160>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004142:	2301      	movs	r3, #1
 8004144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004146:	2302      	movs	r3, #2
 8004148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414a:	2300      	movs	r3, #0
 800414c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800414e:	2300      	movs	r3, #0
 8004150:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004152:	2301      	movs	r3, #1
 8004154:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004156:	f107 031c 	add.w	r3, r7, #28
 800415a:	4619      	mov	r1, r3
 800415c:	483d      	ldr	r0, [pc, #244]	@ (8004254 <HAL_TIM_MspPostInit+0x164>)
 800415e:	f000 fa61 	bl	8004624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004162:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004168:	2302      	movs	r3, #2
 800416a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416c:	2300      	movs	r3, #0
 800416e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004170:	2300      	movs	r3, #0
 8004172:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004174:	2301      	movs	r3, #1
 8004176:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004178:	f107 031c 	add.w	r3, r7, #28
 800417c:	4619      	mov	r1, r3
 800417e:	4836      	ldr	r0, [pc, #216]	@ (8004258 <HAL_TIM_MspPostInit+0x168>)
 8004180:	f000 fa50 	bl	8004624 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004184:	e05f      	b.n	8004246 <HAL_TIM_MspPostInit+0x156>
  else if(timHandle->Instance==TIM3)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a34      	ldr	r2, [pc, #208]	@ (800425c <HAL_TIM_MspPostInit+0x16c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d138      	bne.n	8004202 <HAL_TIM_MspPostInit+0x112>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004190:	4b2f      	ldr	r3, [pc, #188]	@ (8004250 <HAL_TIM_MspPostInit+0x160>)
 8004192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004194:	4a2e      	ldr	r2, [pc, #184]	@ (8004250 <HAL_TIM_MspPostInit+0x160>)
 8004196:	f043 0301 	orr.w	r3, r3, #1
 800419a:	6313      	str	r3, [r2, #48]	@ 0x30
 800419c:	4b2c      	ldr	r3, [pc, #176]	@ (8004250 <HAL_TIM_MspPostInit+0x160>)
 800419e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041a8:	4b29      	ldr	r3, [pc, #164]	@ (8004250 <HAL_TIM_MspPostInit+0x160>)
 80041aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ac:	4a28      	ldr	r2, [pc, #160]	@ (8004250 <HAL_TIM_MspPostInit+0x160>)
 80041ae:	f043 0302 	orr.w	r3, r3, #2
 80041b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80041b4:	4b26      	ldr	r3, [pc, #152]	@ (8004250 <HAL_TIM_MspPostInit+0x160>)
 80041b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80041c0:	2340      	movs	r3, #64	@ 0x40
 80041c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c4:	2302      	movs	r3, #2
 80041c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c8:	2300      	movs	r3, #0
 80041ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041cc:	2300      	movs	r3, #0
 80041ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80041d0:	2302      	movs	r3, #2
 80041d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041d4:	f107 031c 	add.w	r3, r7, #28
 80041d8:	4619      	mov	r1, r3
 80041da:	481e      	ldr	r0, [pc, #120]	@ (8004254 <HAL_TIM_MspPostInit+0x164>)
 80041dc:	f000 fa22 	bl	8004624 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80041e0:	2301      	movs	r3, #1
 80041e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e4:	2302      	movs	r3, #2
 80041e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ec:	2300      	movs	r3, #0
 80041ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80041f0:	2302      	movs	r3, #2
 80041f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041f4:	f107 031c 	add.w	r3, r7, #28
 80041f8:	4619      	mov	r1, r3
 80041fa:	4817      	ldr	r0, [pc, #92]	@ (8004258 <HAL_TIM_MspPostInit+0x168>)
 80041fc:	f000 fa12 	bl	8004624 <HAL_GPIO_Init>
}
 8004200:	e021      	b.n	8004246 <HAL_TIM_MspPostInit+0x156>
  else if(timHandle->Instance==TIM4)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a16      	ldr	r2, [pc, #88]	@ (8004260 <HAL_TIM_MspPostInit+0x170>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d11c      	bne.n	8004246 <HAL_TIM_MspPostInit+0x156>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800420c:	4b10      	ldr	r3, [pc, #64]	@ (8004250 <HAL_TIM_MspPostInit+0x160>)
 800420e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004210:	4a0f      	ldr	r2, [pc, #60]	@ (8004250 <HAL_TIM_MspPostInit+0x160>)
 8004212:	f043 0308 	orr.w	r3, r3, #8
 8004216:	6313      	str	r3, [r2, #48]	@ 0x30
 8004218:	4b0d      	ldr	r3, [pc, #52]	@ (8004250 <HAL_TIM_MspPostInit+0x160>)
 800421a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8004224:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8004228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800422a:	2302      	movs	r3, #2
 800422c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422e:	2300      	movs	r3, #0
 8004230:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004232:	2300      	movs	r3, #0
 8004234:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004236:	2302      	movs	r3, #2
 8004238:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800423a:	f107 031c 	add.w	r3, r7, #28
 800423e:	4619      	mov	r1, r3
 8004240:	4808      	ldr	r0, [pc, #32]	@ (8004264 <HAL_TIM_MspPostInit+0x174>)
 8004242:	f000 f9ef 	bl	8004624 <HAL_GPIO_Init>
}
 8004246:	bf00      	nop
 8004248:	3730      	adds	r7, #48	@ 0x30
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40023800 	.word	0x40023800
 8004254:	40020000 	.word	0x40020000
 8004258:	40020400 	.word	0x40020400
 800425c:	40000400 	.word	0x40000400
 8004260:	40000800 	.word	0x40000800
 8004264:	40020c00 	.word	0x40020c00

08004268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004268:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80042a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800426c:	480d      	ldr	r0, [pc, #52]	@ (80042a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800426e:	490e      	ldr	r1, [pc, #56]	@ (80042a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004270:	4a0e      	ldr	r2, [pc, #56]	@ (80042ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004274:	e002      	b.n	800427c <LoopCopyDataInit>

08004276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800427a:	3304      	adds	r3, #4

0800427c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800427c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800427e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004280:	d3f9      	bcc.n	8004276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004282:	4a0b      	ldr	r2, [pc, #44]	@ (80042b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004284:	4c0b      	ldr	r4, [pc, #44]	@ (80042b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004288:	e001      	b.n	800428e <LoopFillZerobss>

0800428a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800428a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800428c:	3204      	adds	r2, #4

0800428e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800428e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004290:	d3fb      	bcc.n	800428a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004292:	f7ff fcb1 	bl	8003bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004296:	f003 fc2f 	bl	8007af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800429a:	f7fe fbf1 	bl	8002a80 <main>
  bx  lr    
 800429e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80042a0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80042a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042a8:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80042ac:	080087e0 	.word	0x080087e0
  ldr r2, =_sbss
 80042b0:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80042b4:	2000050c 	.word	0x2000050c

080042b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042b8:	e7fe      	b.n	80042b8 <ADC_IRQHandler>

080042ba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042be:	2003      	movs	r0, #3
 80042c0:	f000 f94c 	bl	800455c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042c4:	2000      	movs	r0, #0
 80042c6:	f000 f805 	bl	80042d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042ca:	f7ff fbd1 	bl	8003a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042dc:	4b12      	ldr	r3, [pc, #72]	@ (8004328 <HAL_InitTick+0x54>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	4b12      	ldr	r3, [pc, #72]	@ (800432c <HAL_InitTick+0x58>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	4619      	mov	r1, r3
 80042e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80042ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80042ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f967 	bl	80045c6 <HAL_SYSTICK_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e00e      	b.n	8004320 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b0f      	cmp	r3, #15
 8004306:	d80a      	bhi.n	800431e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004308:	2200      	movs	r2, #0
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	f04f 30ff 	mov.w	r0, #4294967295
 8004310:	f000 f92f 	bl	8004572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004314:	4a06      	ldr	r2, [pc, #24]	@ (8004330 <HAL_InitTick+0x5c>)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
 800431c:	e000      	b.n	8004320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
}
 8004320:	4618      	mov	r0, r3
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20000108 	.word	0x20000108
 800432c:	20000110 	.word	0x20000110
 8004330:	2000010c 	.word	0x2000010c

08004334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004338:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <HAL_IncTick+0x20>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	461a      	mov	r2, r3
 800433e:	4b06      	ldr	r3, [pc, #24]	@ (8004358 <HAL_IncTick+0x24>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4413      	add	r3, r2
 8004344:	4a04      	ldr	r2, [pc, #16]	@ (8004358 <HAL_IncTick+0x24>)
 8004346:	6013      	str	r3, [r2, #0]
}
 8004348:	bf00      	nop
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	20000110 	.word	0x20000110
 8004358:	200003c0 	.word	0x200003c0

0800435c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  return uwTick;
 8004360:	4b03      	ldr	r3, [pc, #12]	@ (8004370 <HAL_GetTick+0x14>)
 8004362:	681b      	ldr	r3, [r3, #0]
}
 8004364:	4618      	mov	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	200003c0 	.word	0x200003c0

08004374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800437c:	f7ff ffee 	bl	800435c <HAL_GetTick>
 8004380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438c:	d005      	beq.n	800439a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800438e:	4b0a      	ldr	r3, [pc, #40]	@ (80043b8 <HAL_Delay+0x44>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4413      	add	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800439a:	bf00      	nop
 800439c:	f7ff ffde 	bl	800435c <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d8f7      	bhi.n	800439c <HAL_Delay+0x28>
  {
  }
}
 80043ac:	bf00      	nop
 80043ae:	bf00      	nop
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000110 	.word	0x20000110

080043bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043cc:	4b0b      	ldr	r3, [pc, #44]	@ (80043fc <__NVIC_SetPriorityGrouping+0x40>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80043d8:	4013      	ands	r3, r2
 80043da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80043e4:	4b06      	ldr	r3, [pc, #24]	@ (8004400 <__NVIC_SetPriorityGrouping+0x44>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043ea:	4a04      	ldr	r2, [pc, #16]	@ (80043fc <__NVIC_SetPriorityGrouping+0x40>)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	60d3      	str	r3, [r2, #12]
}
 80043f0:	bf00      	nop
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	e000ed00 	.word	0xe000ed00
 8004400:	05fa0000 	.word	0x05fa0000

08004404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004408:	4b04      	ldr	r3, [pc, #16]	@ (800441c <__NVIC_GetPriorityGrouping+0x18>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	0a1b      	lsrs	r3, r3, #8
 800440e:	f003 0307 	and.w	r3, r3, #7
}
 8004412:	4618      	mov	r0, r3
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	e000ed00 	.word	0xe000ed00

08004420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800442a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442e:	2b00      	cmp	r3, #0
 8004430:	db0b      	blt.n	800444a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004432:	79fb      	ldrb	r3, [r7, #7]
 8004434:	f003 021f 	and.w	r2, r3, #31
 8004438:	4907      	ldr	r1, [pc, #28]	@ (8004458 <__NVIC_EnableIRQ+0x38>)
 800443a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	2001      	movs	r0, #1
 8004442:	fa00 f202 	lsl.w	r2, r0, r2
 8004446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	e000e100 	.word	0xe000e100

0800445c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	4603      	mov	r3, r0
 8004464:	6039      	str	r1, [r7, #0]
 8004466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446c:	2b00      	cmp	r3, #0
 800446e:	db0a      	blt.n	8004486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	b2da      	uxtb	r2, r3
 8004474:	490c      	ldr	r1, [pc, #48]	@ (80044a8 <__NVIC_SetPriority+0x4c>)
 8004476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447a:	0112      	lsls	r2, r2, #4
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	440b      	add	r3, r1
 8004480:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004484:	e00a      	b.n	800449c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	b2da      	uxtb	r2, r3
 800448a:	4908      	ldr	r1, [pc, #32]	@ (80044ac <__NVIC_SetPriority+0x50>)
 800448c:	79fb      	ldrb	r3, [r7, #7]
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	3b04      	subs	r3, #4
 8004494:	0112      	lsls	r2, r2, #4
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	440b      	add	r3, r1
 800449a:	761a      	strb	r2, [r3, #24]
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	e000e100 	.word	0xe000e100
 80044ac:	e000ed00 	.word	0xe000ed00

080044b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b089      	sub	sp, #36	@ 0x24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f1c3 0307 	rsb	r3, r3, #7
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	bf28      	it	cs
 80044ce:	2304      	movcs	r3, #4
 80044d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	3304      	adds	r3, #4
 80044d6:	2b06      	cmp	r3, #6
 80044d8:	d902      	bls.n	80044e0 <NVIC_EncodePriority+0x30>
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	3b03      	subs	r3, #3
 80044de:	e000      	b.n	80044e2 <NVIC_EncodePriority+0x32>
 80044e0:	2300      	movs	r3, #0
 80044e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044e4:	f04f 32ff 	mov.w	r2, #4294967295
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	43da      	mvns	r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	401a      	ands	r2, r3
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044f8:	f04f 31ff 	mov.w	r1, #4294967295
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004502:	43d9      	mvns	r1, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004508:	4313      	orrs	r3, r2
         );
}
 800450a:	4618      	mov	r0, r3
 800450c:	3724      	adds	r7, #36	@ 0x24
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
	...

08004518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3b01      	subs	r3, #1
 8004524:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004528:	d301      	bcc.n	800452e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800452a:	2301      	movs	r3, #1
 800452c:	e00f      	b.n	800454e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800452e:	4a0a      	ldr	r2, [pc, #40]	@ (8004558 <SysTick_Config+0x40>)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3b01      	subs	r3, #1
 8004534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004536:	210f      	movs	r1, #15
 8004538:	f04f 30ff 	mov.w	r0, #4294967295
 800453c:	f7ff ff8e 	bl	800445c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004540:	4b05      	ldr	r3, [pc, #20]	@ (8004558 <SysTick_Config+0x40>)
 8004542:	2200      	movs	r2, #0
 8004544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004546:	4b04      	ldr	r3, [pc, #16]	@ (8004558 <SysTick_Config+0x40>)
 8004548:	2207      	movs	r2, #7
 800454a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	e000e010 	.word	0xe000e010

0800455c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff ff29 	bl	80043bc <__NVIC_SetPriorityGrouping>
}
 800456a:	bf00      	nop
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004572:	b580      	push	{r7, lr}
 8004574:	b086      	sub	sp, #24
 8004576:	af00      	add	r7, sp, #0
 8004578:	4603      	mov	r3, r0
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
 800457e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004584:	f7ff ff3e 	bl	8004404 <__NVIC_GetPriorityGrouping>
 8004588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	68b9      	ldr	r1, [r7, #8]
 800458e:	6978      	ldr	r0, [r7, #20]
 8004590:	f7ff ff8e 	bl	80044b0 <NVIC_EncodePriority>
 8004594:	4602      	mov	r2, r0
 8004596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800459a:	4611      	mov	r1, r2
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff ff5d 	bl	800445c <__NVIC_SetPriority>
}
 80045a2:	bf00      	nop
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b082      	sub	sp, #8
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	4603      	mov	r3, r0
 80045b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff ff31 	bl	8004420 <__NVIC_EnableIRQ>
}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7ff ffa2 	bl	8004518 <SysTick_Config>
 80045d4:	4603      	mov	r3, r0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d004      	beq.n	80045fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2280      	movs	r2, #128	@ 0x80
 80045f6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e00c      	b.n	8004616 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2205      	movs	r2, #5
 8004600:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0201 	bic.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004624:	b480      	push	{r7}
 8004626:	b089      	sub	sp, #36	@ 0x24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800462e:	2300      	movs	r3, #0
 8004630:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004636:	2300      	movs	r3, #0
 8004638:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800463a:	2300      	movs	r3, #0
 800463c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800463e:	2300      	movs	r3, #0
 8004640:	61fb      	str	r3, [r7, #28]
 8004642:	e175      	b.n	8004930 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004644:	2201      	movs	r2, #1
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4013      	ands	r3, r2
 8004656:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	429a      	cmp	r2, r3
 800465e:	f040 8164 	bne.w	800492a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f003 0303 	and.w	r3, r3, #3
 800466a:	2b01      	cmp	r3, #1
 800466c:	d005      	beq.n	800467a <HAL_GPIO_Init+0x56>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d130      	bne.n	80046dc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	2203      	movs	r2, #3
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	43db      	mvns	r3, r3
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	4013      	ands	r3, r2
 8004690:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046b0:	2201      	movs	r2, #1
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	43db      	mvns	r3, r3
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	4013      	ands	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	091b      	lsrs	r3, r3, #4
 80046c6:	f003 0201 	and.w	r2, r3, #1
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f003 0303 	and.w	r3, r3, #3
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d017      	beq.n	8004718 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	2203      	movs	r2, #3
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	43db      	mvns	r3, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4013      	ands	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4313      	orrs	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f003 0303 	and.w	r3, r3, #3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d123      	bne.n	800476c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	08da      	lsrs	r2, r3, #3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3208      	adds	r2, #8
 800472c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	220f      	movs	r2, #15
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	43db      	mvns	r3, r3
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4013      	ands	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	691a      	ldr	r2, [r3, #16]
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4313      	orrs	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	08da      	lsrs	r2, r3, #3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3208      	adds	r2, #8
 8004766:	69b9      	ldr	r1, [r7, #24]
 8004768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	2203      	movs	r2, #3
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	43db      	mvns	r3, r3
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	4013      	ands	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f003 0203 	and.w	r2, r3, #3
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	4313      	orrs	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 80be 	beq.w	800492a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ae:	4b66      	ldr	r3, [pc, #408]	@ (8004948 <HAL_GPIO_Init+0x324>)
 80047b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b2:	4a65      	ldr	r2, [pc, #404]	@ (8004948 <HAL_GPIO_Init+0x324>)
 80047b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80047ba:	4b63      	ldr	r3, [pc, #396]	@ (8004948 <HAL_GPIO_Init+0x324>)
 80047bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80047c6:	4a61      	ldr	r2, [pc, #388]	@ (800494c <HAL_GPIO_Init+0x328>)
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	089b      	lsrs	r3, r3, #2
 80047cc:	3302      	adds	r3, #2
 80047ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	220f      	movs	r2, #15
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43db      	mvns	r3, r3
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	4013      	ands	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a58      	ldr	r2, [pc, #352]	@ (8004950 <HAL_GPIO_Init+0x32c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d037      	beq.n	8004862 <HAL_GPIO_Init+0x23e>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a57      	ldr	r2, [pc, #348]	@ (8004954 <HAL_GPIO_Init+0x330>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d031      	beq.n	800485e <HAL_GPIO_Init+0x23a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a56      	ldr	r2, [pc, #344]	@ (8004958 <HAL_GPIO_Init+0x334>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d02b      	beq.n	800485a <HAL_GPIO_Init+0x236>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a55      	ldr	r2, [pc, #340]	@ (800495c <HAL_GPIO_Init+0x338>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d025      	beq.n	8004856 <HAL_GPIO_Init+0x232>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a54      	ldr	r2, [pc, #336]	@ (8004960 <HAL_GPIO_Init+0x33c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d01f      	beq.n	8004852 <HAL_GPIO_Init+0x22e>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a53      	ldr	r2, [pc, #332]	@ (8004964 <HAL_GPIO_Init+0x340>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d019      	beq.n	800484e <HAL_GPIO_Init+0x22a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a52      	ldr	r2, [pc, #328]	@ (8004968 <HAL_GPIO_Init+0x344>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d013      	beq.n	800484a <HAL_GPIO_Init+0x226>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a51      	ldr	r2, [pc, #324]	@ (800496c <HAL_GPIO_Init+0x348>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00d      	beq.n	8004846 <HAL_GPIO_Init+0x222>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a50      	ldr	r2, [pc, #320]	@ (8004970 <HAL_GPIO_Init+0x34c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d007      	beq.n	8004842 <HAL_GPIO_Init+0x21e>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a4f      	ldr	r2, [pc, #316]	@ (8004974 <HAL_GPIO_Init+0x350>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d101      	bne.n	800483e <HAL_GPIO_Init+0x21a>
 800483a:	2309      	movs	r3, #9
 800483c:	e012      	b.n	8004864 <HAL_GPIO_Init+0x240>
 800483e:	230a      	movs	r3, #10
 8004840:	e010      	b.n	8004864 <HAL_GPIO_Init+0x240>
 8004842:	2308      	movs	r3, #8
 8004844:	e00e      	b.n	8004864 <HAL_GPIO_Init+0x240>
 8004846:	2307      	movs	r3, #7
 8004848:	e00c      	b.n	8004864 <HAL_GPIO_Init+0x240>
 800484a:	2306      	movs	r3, #6
 800484c:	e00a      	b.n	8004864 <HAL_GPIO_Init+0x240>
 800484e:	2305      	movs	r3, #5
 8004850:	e008      	b.n	8004864 <HAL_GPIO_Init+0x240>
 8004852:	2304      	movs	r3, #4
 8004854:	e006      	b.n	8004864 <HAL_GPIO_Init+0x240>
 8004856:	2303      	movs	r3, #3
 8004858:	e004      	b.n	8004864 <HAL_GPIO_Init+0x240>
 800485a:	2302      	movs	r3, #2
 800485c:	e002      	b.n	8004864 <HAL_GPIO_Init+0x240>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <HAL_GPIO_Init+0x240>
 8004862:	2300      	movs	r3, #0
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	f002 0203 	and.w	r2, r2, #3
 800486a:	0092      	lsls	r2, r2, #2
 800486c:	4093      	lsls	r3, r2
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	4313      	orrs	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004874:	4935      	ldr	r1, [pc, #212]	@ (800494c <HAL_GPIO_Init+0x328>)
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	089b      	lsrs	r3, r3, #2
 800487a:	3302      	adds	r3, #2
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004882:	4b3d      	ldr	r3, [pc, #244]	@ (8004978 <HAL_GPIO_Init+0x354>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	43db      	mvns	r3, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4013      	ands	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048a6:	4a34      	ldr	r2, [pc, #208]	@ (8004978 <HAL_GPIO_Init+0x354>)
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048ac:	4b32      	ldr	r3, [pc, #200]	@ (8004978 <HAL_GPIO_Init+0x354>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	43db      	mvns	r3, r3
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	4013      	ands	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048d0:	4a29      	ldr	r2, [pc, #164]	@ (8004978 <HAL_GPIO_Init+0x354>)
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048d6:	4b28      	ldr	r3, [pc, #160]	@ (8004978 <HAL_GPIO_Init+0x354>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	43db      	mvns	r3, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4013      	ands	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004978 <HAL_GPIO_Init+0x354>)
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004900:	4b1d      	ldr	r3, [pc, #116]	@ (8004978 <HAL_GPIO_Init+0x354>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	43db      	mvns	r3, r3
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4013      	ands	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004924:	4a14      	ldr	r2, [pc, #80]	@ (8004978 <HAL_GPIO_Init+0x354>)
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	3301      	adds	r3, #1
 800492e:	61fb      	str	r3, [r7, #28]
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	2b0f      	cmp	r3, #15
 8004934:	f67f ae86 	bls.w	8004644 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004938:	bf00      	nop
 800493a:	bf00      	nop
 800493c:	3724      	adds	r7, #36	@ 0x24
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800
 800494c:	40013800 	.word	0x40013800
 8004950:	40020000 	.word	0x40020000
 8004954:	40020400 	.word	0x40020400
 8004958:	40020800 	.word	0x40020800
 800495c:	40020c00 	.word	0x40020c00
 8004960:	40021000 	.word	0x40021000
 8004964:	40021400 	.word	0x40021400
 8004968:	40021800 	.word	0x40021800
 800496c:	40021c00 	.word	0x40021c00
 8004970:	40022000 	.word	0x40022000
 8004974:	40022400 	.word	0x40022400
 8004978:	40013c00 	.word	0x40013c00

0800497c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	887b      	ldrh	r3, [r7, #2]
 800498e:	4013      	ands	r3, r2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004994:	2301      	movs	r3, #1
 8004996:	73fb      	strb	r3, [r7, #15]
 8004998:	e001      	b.n	800499e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800499a:	2300      	movs	r3, #0
 800499c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800499e:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	807b      	strh	r3, [r7, #2]
 80049b8:	4613      	mov	r3, r2
 80049ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049bc:	787b      	ldrb	r3, [r7, #1]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049c2:	887a      	ldrh	r2, [r7, #2]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80049c8:	e003      	b.n	80049d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80049ca:	887b      	ldrh	r3, [r7, #2]
 80049cc:	041a      	lsls	r2, r3, #16
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	619a      	str	r2, [r3, #24]
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049de:	b480      	push	{r7}
 80049e0:	b085      	sub	sp, #20
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	460b      	mov	r3, r1
 80049e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049f0:	887a      	ldrh	r2, [r7, #2]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4013      	ands	r3, r2
 80049f6:	041a      	lsls	r2, r3, #16
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	43d9      	mvns	r1, r3
 80049fc:	887b      	ldrh	r3, [r7, #2]
 80049fe:	400b      	ands	r3, r1
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	619a      	str	r2, [r3, #24]
}
 8004a06:	bf00      	nop
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
	...

08004a14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a1e:	4b08      	ldr	r3, [pc, #32]	@ (8004a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	88fb      	ldrh	r3, [r7, #6]
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d006      	beq.n	8004a38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a2a:	4a05      	ldr	r2, [pc, #20]	@ (8004a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a2c:	88fb      	ldrh	r3, [r7, #6]
 8004a2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a30:	88fb      	ldrh	r3, [r7, #6]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 f806 	bl	8004a44 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a38:	bf00      	nop
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40013c00 	.word	0x40013c00

08004a44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
	...

08004a5c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a60:	4b05      	ldr	r3, [pc, #20]	@ (8004a78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a04      	ldr	r2, [pc, #16]	@ (8004a78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a6a:	6013      	str	r3, [r2, #0]
}
 8004a6c:	bf00      	nop
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40007000 	.word	0x40007000

08004a7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004a84:	2300      	movs	r3, #0
 8004a86:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e291      	b.n	8004fb6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 8087 	beq.w	8004bae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004aa0:	4b96      	ldr	r3, [pc, #600]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 030c 	and.w	r3, r3, #12
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d00c      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aac:	4b93      	ldr	r3, [pc, #588]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f003 030c 	and.w	r3, r3, #12
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d112      	bne.n	8004ade <HAL_RCC_OscConfig+0x62>
 8004ab8:	4b90      	ldr	r3, [pc, #576]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ac0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ac4:	d10b      	bne.n	8004ade <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac6:	4b8d      	ldr	r3, [pc, #564]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d06c      	beq.n	8004bac <HAL_RCC_OscConfig+0x130>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d168      	bne.n	8004bac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e26b      	b.n	8004fb6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ae6:	d106      	bne.n	8004af6 <HAL_RCC_OscConfig+0x7a>
 8004ae8:	4b84      	ldr	r3, [pc, #528]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a83      	ldr	r2, [pc, #524]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	e02e      	b.n	8004b54 <HAL_RCC_OscConfig+0xd8>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10c      	bne.n	8004b18 <HAL_RCC_OscConfig+0x9c>
 8004afe:	4b7f      	ldr	r3, [pc, #508]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a7e      	ldr	r2, [pc, #504]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004b04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	4b7c      	ldr	r3, [pc, #496]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a7b      	ldr	r2, [pc, #492]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004b10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	e01d      	b.n	8004b54 <HAL_RCC_OscConfig+0xd8>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b20:	d10c      	bne.n	8004b3c <HAL_RCC_OscConfig+0xc0>
 8004b22:	4b76      	ldr	r3, [pc, #472]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a75      	ldr	r2, [pc, #468]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	4b73      	ldr	r3, [pc, #460]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a72      	ldr	r2, [pc, #456]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	e00b      	b.n	8004b54 <HAL_RCC_OscConfig+0xd8>
 8004b3c:	4b6f      	ldr	r3, [pc, #444]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a6e      	ldr	r2, [pc, #440]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	4b6c      	ldr	r3, [pc, #432]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a6b      	ldr	r2, [pc, #428]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d013      	beq.n	8004b84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5c:	f7ff fbfe 	bl	800435c <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b64:	f7ff fbfa 	bl	800435c <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b64      	cmp	r3, #100	@ 0x64
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e21f      	b.n	8004fb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b76:	4b61      	ldr	r3, [pc, #388]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0f0      	beq.n	8004b64 <HAL_RCC_OscConfig+0xe8>
 8004b82:	e014      	b.n	8004bae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b84:	f7ff fbea 	bl	800435c <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b8c:	f7ff fbe6 	bl	800435c <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b64      	cmp	r3, #100	@ 0x64
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e20b      	b.n	8004fb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b9e:	4b57      	ldr	r3, [pc, #348]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1f0      	bne.n	8004b8c <HAL_RCC_OscConfig+0x110>
 8004baa:	e000      	b.n	8004bae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d069      	beq.n	8004c8e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bba:	4b50      	ldr	r3, [pc, #320]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00b      	beq.n	8004bde <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bc6:	4b4d      	ldr	r3, [pc, #308]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 030c 	and.w	r3, r3, #12
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d11c      	bne.n	8004c0c <HAL_RCC_OscConfig+0x190>
 8004bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d116      	bne.n	8004c0c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bde:	4b47      	ldr	r3, [pc, #284]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d005      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x17a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d001      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e1df      	b.n	8004fb6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf6:	4b41      	ldr	r3, [pc, #260]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	493d      	ldr	r1, [pc, #244]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c0a:	e040      	b.n	8004c8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d023      	beq.n	8004c5c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c14:	4b39      	ldr	r3, [pc, #228]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a38      	ldr	r2, [pc, #224]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004c1a:	f043 0301 	orr.w	r3, r3, #1
 8004c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c20:	f7ff fb9c 	bl	800435c <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c28:	f7ff fb98 	bl	800435c <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e1bd      	b.n	8004fb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c3a:	4b30      	ldr	r3, [pc, #192]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0f0      	beq.n	8004c28 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c46:	4b2d      	ldr	r3, [pc, #180]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	4929      	ldr	r1, [pc, #164]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	600b      	str	r3, [r1, #0]
 8004c5a:	e018      	b.n	8004c8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c5c:	4b27      	ldr	r3, [pc, #156]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a26      	ldr	r2, [pc, #152]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004c62:	f023 0301 	bic.w	r3, r3, #1
 8004c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c68:	f7ff fb78 	bl	800435c <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c70:	f7ff fb74 	bl	800435c <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e199      	b.n	8004fb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c82:	4b1e      	ldr	r3, [pc, #120]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1f0      	bne.n	8004c70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0308 	and.w	r3, r3, #8
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d038      	beq.n	8004d0c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d019      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ca2:	4b16      	ldr	r3, [pc, #88]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ca6:	4a15      	ldr	r2, [pc, #84]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004ca8:	f043 0301 	orr.w	r3, r3, #1
 8004cac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cae:	f7ff fb55 	bl	800435c <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cb6:	f7ff fb51 	bl	800435c <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e176      	b.n	8004fb6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0f0      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x23a>
 8004cd4:	e01a      	b.n	8004d0c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cd6:	4b09      	ldr	r3, [pc, #36]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cda:	4a08      	ldr	r2, [pc, #32]	@ (8004cfc <HAL_RCC_OscConfig+0x280>)
 8004cdc:	f023 0301 	bic.w	r3, r3, #1
 8004ce0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce2:	f7ff fb3b 	bl	800435c <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ce8:	e00a      	b.n	8004d00 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cea:	f7ff fb37 	bl	800435c <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d903      	bls.n	8004d00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e15c      	b.n	8004fb6 <HAL_RCC_OscConfig+0x53a>
 8004cfc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d00:	4b91      	ldr	r3, [pc, #580]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004d02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1ee      	bne.n	8004cea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 80a4 	beq.w	8004e62 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d1a:	4b8b      	ldr	r3, [pc, #556]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10d      	bne.n	8004d42 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d26:	4b88      	ldr	r3, [pc, #544]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2a:	4a87      	ldr	r2, [pc, #540]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d32:	4b85      	ldr	r3, [pc, #532]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d3a:	60bb      	str	r3, [r7, #8]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d42:	4b82      	ldr	r3, [pc, #520]	@ (8004f4c <HAL_RCC_OscConfig+0x4d0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d118      	bne.n	8004d80 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004d4e:	4b7f      	ldr	r3, [pc, #508]	@ (8004f4c <HAL_RCC_OscConfig+0x4d0>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a7e      	ldr	r2, [pc, #504]	@ (8004f4c <HAL_RCC_OscConfig+0x4d0>)
 8004d54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d5a:	f7ff faff 	bl	800435c <HAL_GetTick>
 8004d5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d62:	f7ff fafb 	bl	800435c <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b64      	cmp	r3, #100	@ 0x64
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e120      	b.n	8004fb6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d74:	4b75      	ldr	r3, [pc, #468]	@ (8004f4c <HAL_RCC_OscConfig+0x4d0>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0f0      	beq.n	8004d62 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d106      	bne.n	8004d96 <HAL_RCC_OscConfig+0x31a>
 8004d88:	4b6f      	ldr	r3, [pc, #444]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8c:	4a6e      	ldr	r2, [pc, #440]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004d8e:	f043 0301 	orr.w	r3, r3, #1
 8004d92:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d94:	e02d      	b.n	8004df2 <HAL_RCC_OscConfig+0x376>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10c      	bne.n	8004db8 <HAL_RCC_OscConfig+0x33c>
 8004d9e:	4b6a      	ldr	r3, [pc, #424]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da2:	4a69      	ldr	r2, [pc, #420]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004da4:	f023 0301 	bic.w	r3, r3, #1
 8004da8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004daa:	4b67      	ldr	r3, [pc, #412]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dae:	4a66      	ldr	r2, [pc, #408]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004db0:	f023 0304 	bic.w	r3, r3, #4
 8004db4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004db6:	e01c      	b.n	8004df2 <HAL_RCC_OscConfig+0x376>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b05      	cmp	r3, #5
 8004dbe:	d10c      	bne.n	8004dda <HAL_RCC_OscConfig+0x35e>
 8004dc0:	4b61      	ldr	r3, [pc, #388]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc4:	4a60      	ldr	r2, [pc, #384]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004dc6:	f043 0304 	orr.w	r3, r3, #4
 8004dca:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dcc:	4b5e      	ldr	r3, [pc, #376]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd0:	4a5d      	ldr	r2, [pc, #372]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004dd2:	f043 0301 	orr.w	r3, r3, #1
 8004dd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dd8:	e00b      	b.n	8004df2 <HAL_RCC_OscConfig+0x376>
 8004dda:	4b5b      	ldr	r3, [pc, #364]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dde:	4a5a      	ldr	r2, [pc, #360]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004de0:	f023 0301 	bic.w	r3, r3, #1
 8004de4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004de6:	4b58      	ldr	r3, [pc, #352]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dea:	4a57      	ldr	r2, [pc, #348]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004dec:	f023 0304 	bic.w	r3, r3, #4
 8004df0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d015      	beq.n	8004e26 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfa:	f7ff faaf 	bl	800435c <HAL_GetTick>
 8004dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e00:	e00a      	b.n	8004e18 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e02:	f7ff faab 	bl	800435c <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e0ce      	b.n	8004fb6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e18:	4b4b      	ldr	r3, [pc, #300]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0ee      	beq.n	8004e02 <HAL_RCC_OscConfig+0x386>
 8004e24:	e014      	b.n	8004e50 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e26:	f7ff fa99 	bl	800435c <HAL_GetTick>
 8004e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e2c:	e00a      	b.n	8004e44 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e2e:	f7ff fa95 	bl	800435c <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e0b8      	b.n	8004fb6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e44:	4b40      	ldr	r3, [pc, #256]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1ee      	bne.n	8004e2e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e50:	7dfb      	ldrb	r3, [r7, #23]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d105      	bne.n	8004e62 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e56:	4b3c      	ldr	r3, [pc, #240]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5a:	4a3b      	ldr	r2, [pc, #236]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004e5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e60:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 80a4 	beq.w	8004fb4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e6c:	4b36      	ldr	r3, [pc, #216]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 030c 	and.w	r3, r3, #12
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d06b      	beq.n	8004f50 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d149      	bne.n	8004f14 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e80:	4b31      	ldr	r3, [pc, #196]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a30      	ldr	r2, [pc, #192]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004e86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8c:	f7ff fa66 	bl	800435c <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e94:	f7ff fa62 	bl	800435c <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e087      	b.n	8004fb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea6:	4b28      	ldr	r3, [pc, #160]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69da      	ldr	r2, [r3, #28]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec0:	019b      	lsls	r3, r3, #6
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec8:	085b      	lsrs	r3, r3, #1
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	041b      	lsls	r3, r3, #16
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed4:	061b      	lsls	r3, r3, #24
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004eda:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ede:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ee0:	4b19      	ldr	r3, [pc, #100]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a18      	ldr	r2, [pc, #96]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004ee6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eec:	f7ff fa36 	bl	800435c <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef4:	f7ff fa32 	bl	800435c <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e057      	b.n	8004fb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f06:	4b10      	ldr	r3, [pc, #64]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0f0      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x478>
 8004f12:	e04f      	b.n	8004fb4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f14:	4b0c      	ldr	r3, [pc, #48]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a0b      	ldr	r2, [pc, #44]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004f1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f20:	f7ff fa1c 	bl	800435c <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f28:	f7ff fa18 	bl	800435c <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e03d      	b.n	8004fb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f3a:	4b03      	ldr	r3, [pc, #12]	@ (8004f48 <HAL_RCC_OscConfig+0x4cc>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f0      	bne.n	8004f28 <HAL_RCC_OscConfig+0x4ac>
 8004f46:	e035      	b.n	8004fb4 <HAL_RCC_OscConfig+0x538>
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004f50:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc0 <HAL_RCC_OscConfig+0x544>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d028      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d121      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d11a      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f80:	4013      	ands	r3, r2
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f86:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d111      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f96:	085b      	lsrs	r3, r3, #1
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d107      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004faa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d001      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e000      	b.n	8004fb6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40023800 	.word	0x40023800

08004fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e0d0      	b.n	800517e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fdc:	4b6a      	ldr	r3, [pc, #424]	@ (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 030f 	and.w	r3, r3, #15
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d910      	bls.n	800500c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fea:	4b67      	ldr	r3, [pc, #412]	@ (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f023 020f 	bic.w	r2, r3, #15
 8004ff2:	4965      	ldr	r1, [pc, #404]	@ (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffa:	4b63      	ldr	r3, [pc, #396]	@ (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d001      	beq.n	800500c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e0b8      	b.n	800517e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d020      	beq.n	800505a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d005      	beq.n	8005030 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005024:	4b59      	ldr	r3, [pc, #356]	@ (800518c <HAL_RCC_ClockConfig+0x1c8>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	4a58      	ldr	r2, [pc, #352]	@ (800518c <HAL_RCC_ClockConfig+0x1c8>)
 800502a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800502e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0308 	and.w	r3, r3, #8
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800503c:	4b53      	ldr	r3, [pc, #332]	@ (800518c <HAL_RCC_ClockConfig+0x1c8>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	4a52      	ldr	r2, [pc, #328]	@ (800518c <HAL_RCC_ClockConfig+0x1c8>)
 8005042:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005046:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005048:	4b50      	ldr	r3, [pc, #320]	@ (800518c <HAL_RCC_ClockConfig+0x1c8>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	494d      	ldr	r1, [pc, #308]	@ (800518c <HAL_RCC_ClockConfig+0x1c8>)
 8005056:	4313      	orrs	r3, r2
 8005058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	d040      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d107      	bne.n	800507e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506e:	4b47      	ldr	r3, [pc, #284]	@ (800518c <HAL_RCC_ClockConfig+0x1c8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d115      	bne.n	80050a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e07f      	b.n	800517e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b02      	cmp	r3, #2
 8005084:	d107      	bne.n	8005096 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005086:	4b41      	ldr	r3, [pc, #260]	@ (800518c <HAL_RCC_ClockConfig+0x1c8>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d109      	bne.n	80050a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e073      	b.n	800517e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005096:	4b3d      	ldr	r3, [pc, #244]	@ (800518c <HAL_RCC_ClockConfig+0x1c8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e06b      	b.n	800517e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050a6:	4b39      	ldr	r3, [pc, #228]	@ (800518c <HAL_RCC_ClockConfig+0x1c8>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f023 0203 	bic.w	r2, r3, #3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	4936      	ldr	r1, [pc, #216]	@ (800518c <HAL_RCC_ClockConfig+0x1c8>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050b8:	f7ff f950 	bl	800435c <HAL_GetTick>
 80050bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050be:	e00a      	b.n	80050d6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c0:	f7ff f94c 	bl	800435c <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e053      	b.n	800517e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050d6:	4b2d      	ldr	r3, [pc, #180]	@ (800518c <HAL_RCC_ClockConfig+0x1c8>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 020c 	and.w	r2, r3, #12
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d1eb      	bne.n	80050c0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050e8:	4b27      	ldr	r3, [pc, #156]	@ (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 030f 	and.w	r3, r3, #15
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d210      	bcs.n	8005118 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f6:	4b24      	ldr	r3, [pc, #144]	@ (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f023 020f 	bic.w	r2, r3, #15
 80050fe:	4922      	ldr	r1, [pc, #136]	@ (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	4313      	orrs	r3, r2
 8005104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005106:	4b20      	ldr	r3, [pc, #128]	@ (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d001      	beq.n	8005118 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e032      	b.n	800517e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b00      	cmp	r3, #0
 8005122:	d008      	beq.n	8005136 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005124:	4b19      	ldr	r3, [pc, #100]	@ (800518c <HAL_RCC_ClockConfig+0x1c8>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	4916      	ldr	r1, [pc, #88]	@ (800518c <HAL_RCC_ClockConfig+0x1c8>)
 8005132:	4313      	orrs	r3, r2
 8005134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b00      	cmp	r3, #0
 8005140:	d009      	beq.n	8005156 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005142:	4b12      	ldr	r3, [pc, #72]	@ (800518c <HAL_RCC_ClockConfig+0x1c8>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	490e      	ldr	r1, [pc, #56]	@ (800518c <HAL_RCC_ClockConfig+0x1c8>)
 8005152:	4313      	orrs	r3, r2
 8005154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005156:	f000 f821 	bl	800519c <HAL_RCC_GetSysClockFreq>
 800515a:	4602      	mov	r2, r0
 800515c:	4b0b      	ldr	r3, [pc, #44]	@ (800518c <HAL_RCC_ClockConfig+0x1c8>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	091b      	lsrs	r3, r3, #4
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	490a      	ldr	r1, [pc, #40]	@ (8005190 <HAL_RCC_ClockConfig+0x1cc>)
 8005168:	5ccb      	ldrb	r3, [r1, r3]
 800516a:	fa22 f303 	lsr.w	r3, r2, r3
 800516e:	4a09      	ldr	r2, [pc, #36]	@ (8005194 <HAL_RCC_ClockConfig+0x1d0>)
 8005170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005172:	4b09      	ldr	r3, [pc, #36]	@ (8005198 <HAL_RCC_ClockConfig+0x1d4>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f7ff f8ac 	bl	80042d4 <HAL_InitTick>

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	40023c00 	.word	0x40023c00
 800518c:	40023800 	.word	0x40023800
 8005190:	0800868c 	.word	0x0800868c
 8005194:	20000108 	.word	0x20000108
 8005198:	2000010c 	.word	0x2000010c

0800519c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800519c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051a0:	b094      	sub	sp, #80	@ 0x50
 80051a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80051a4:	2300      	movs	r3, #0
 80051a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80051a8:	2300      	movs	r3, #0
 80051aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051ac:	2300      	movs	r3, #0
 80051ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80051b0:	2300      	movs	r3, #0
 80051b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051b4:	4b79      	ldr	r3, [pc, #484]	@ (800539c <HAL_RCC_GetSysClockFreq+0x200>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f003 030c 	and.w	r3, r3, #12
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d00d      	beq.n	80051dc <HAL_RCC_GetSysClockFreq+0x40>
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	f200 80e1 	bhi.w	8005388 <HAL_RCC_GetSysClockFreq+0x1ec>
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <HAL_RCC_GetSysClockFreq+0x34>
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d003      	beq.n	80051d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80051ce:	e0db      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051d0:	4b73      	ldr	r3, [pc, #460]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80051d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051d4:	e0db      	b.n	800538e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051d6:	4b73      	ldr	r3, [pc, #460]	@ (80053a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80051d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051da:	e0d8      	b.n	800538e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051dc:	4b6f      	ldr	r3, [pc, #444]	@ (800539c <HAL_RCC_GetSysClockFreq+0x200>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80051e6:	4b6d      	ldr	r3, [pc, #436]	@ (800539c <HAL_RCC_GetSysClockFreq+0x200>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d063      	beq.n	80052ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051f2:	4b6a      	ldr	r3, [pc, #424]	@ (800539c <HAL_RCC_GetSysClockFreq+0x200>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	099b      	lsrs	r3, r3, #6
 80051f8:	2200      	movs	r2, #0
 80051fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80051fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005204:	633b      	str	r3, [r7, #48]	@ 0x30
 8005206:	2300      	movs	r3, #0
 8005208:	637b      	str	r3, [r7, #52]	@ 0x34
 800520a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800520e:	4622      	mov	r2, r4
 8005210:	462b      	mov	r3, r5
 8005212:	f04f 0000 	mov.w	r0, #0
 8005216:	f04f 0100 	mov.w	r1, #0
 800521a:	0159      	lsls	r1, r3, #5
 800521c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005220:	0150      	lsls	r0, r2, #5
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	4621      	mov	r1, r4
 8005228:	1a51      	subs	r1, r2, r1
 800522a:	6139      	str	r1, [r7, #16]
 800522c:	4629      	mov	r1, r5
 800522e:	eb63 0301 	sbc.w	r3, r3, r1
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005240:	4659      	mov	r1, fp
 8005242:	018b      	lsls	r3, r1, #6
 8005244:	4651      	mov	r1, sl
 8005246:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800524a:	4651      	mov	r1, sl
 800524c:	018a      	lsls	r2, r1, #6
 800524e:	4651      	mov	r1, sl
 8005250:	ebb2 0801 	subs.w	r8, r2, r1
 8005254:	4659      	mov	r1, fp
 8005256:	eb63 0901 	sbc.w	r9, r3, r1
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005266:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800526a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800526e:	4690      	mov	r8, r2
 8005270:	4699      	mov	r9, r3
 8005272:	4623      	mov	r3, r4
 8005274:	eb18 0303 	adds.w	r3, r8, r3
 8005278:	60bb      	str	r3, [r7, #8]
 800527a:	462b      	mov	r3, r5
 800527c:	eb49 0303 	adc.w	r3, r9, r3
 8005280:	60fb      	str	r3, [r7, #12]
 8005282:	f04f 0200 	mov.w	r2, #0
 8005286:	f04f 0300 	mov.w	r3, #0
 800528a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800528e:	4629      	mov	r1, r5
 8005290:	024b      	lsls	r3, r1, #9
 8005292:	4621      	mov	r1, r4
 8005294:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005298:	4621      	mov	r1, r4
 800529a:	024a      	lsls	r2, r1, #9
 800529c:	4610      	mov	r0, r2
 800529e:	4619      	mov	r1, r3
 80052a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052a2:	2200      	movs	r2, #0
 80052a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052ac:	f7fb fcce 	bl	8000c4c <__aeabi_uldivmod>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4613      	mov	r3, r2
 80052b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052b8:	e058      	b.n	800536c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ba:	4b38      	ldr	r3, [pc, #224]	@ (800539c <HAL_RCC_GetSysClockFreq+0x200>)
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	099b      	lsrs	r3, r3, #6
 80052c0:	2200      	movs	r2, #0
 80052c2:	4618      	mov	r0, r3
 80052c4:	4611      	mov	r1, r2
 80052c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052ca:	623b      	str	r3, [r7, #32]
 80052cc:	2300      	movs	r3, #0
 80052ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80052d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052d4:	4642      	mov	r2, r8
 80052d6:	464b      	mov	r3, r9
 80052d8:	f04f 0000 	mov.w	r0, #0
 80052dc:	f04f 0100 	mov.w	r1, #0
 80052e0:	0159      	lsls	r1, r3, #5
 80052e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052e6:	0150      	lsls	r0, r2, #5
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4641      	mov	r1, r8
 80052ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80052f2:	4649      	mov	r1, r9
 80052f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005304:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005308:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800530c:	ebb2 040a 	subs.w	r4, r2, sl
 8005310:	eb63 050b 	sbc.w	r5, r3, fp
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	00eb      	lsls	r3, r5, #3
 800531e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005322:	00e2      	lsls	r2, r4, #3
 8005324:	4614      	mov	r4, r2
 8005326:	461d      	mov	r5, r3
 8005328:	4643      	mov	r3, r8
 800532a:	18e3      	adds	r3, r4, r3
 800532c:	603b      	str	r3, [r7, #0]
 800532e:	464b      	mov	r3, r9
 8005330:	eb45 0303 	adc.w	r3, r5, r3
 8005334:	607b      	str	r3, [r7, #4]
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005342:	4629      	mov	r1, r5
 8005344:	028b      	lsls	r3, r1, #10
 8005346:	4621      	mov	r1, r4
 8005348:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800534c:	4621      	mov	r1, r4
 800534e:	028a      	lsls	r2, r1, #10
 8005350:	4610      	mov	r0, r2
 8005352:	4619      	mov	r1, r3
 8005354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005356:	2200      	movs	r2, #0
 8005358:	61bb      	str	r3, [r7, #24]
 800535a:	61fa      	str	r2, [r7, #28]
 800535c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005360:	f7fb fc74 	bl	8000c4c <__aeabi_uldivmod>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4613      	mov	r3, r2
 800536a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800536c:	4b0b      	ldr	r3, [pc, #44]	@ (800539c <HAL_RCC_GetSysClockFreq+0x200>)
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	0c1b      	lsrs	r3, r3, #16
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	3301      	adds	r3, #1
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800537c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800537e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005380:	fbb2 f3f3 	udiv	r3, r2, r3
 8005384:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005386:	e002      	b.n	800538e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005388:	4b05      	ldr	r3, [pc, #20]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800538a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800538c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800538e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005390:	4618      	mov	r0, r3
 8005392:	3750      	adds	r7, #80	@ 0x50
 8005394:	46bd      	mov	sp, r7
 8005396:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800539a:	bf00      	nop
 800539c:	40023800 	.word	0x40023800
 80053a0:	00f42400 	.word	0x00f42400
 80053a4:	007a1200 	.word	0x007a1200

080053a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e09d      	b.n	80054f6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d108      	bne.n	80053d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053ca:	d009      	beq.n	80053e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	61da      	str	r2, [r3, #28]
 80053d2:	e005      	b.n	80053e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fe fab2 	bl	8003964 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005416:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005420:	d902      	bls.n	8005428 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005422:	2300      	movs	r3, #0
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	e002      	b.n	800542e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005428:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800542c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005436:	d007      	beq.n	8005448 <HAL_SPI_Init+0xa0>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005440:	d002      	beq.n	8005448 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	431a      	orrs	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800548a:	ea42 0103 	orr.w	r1, r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005492:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	0c1b      	lsrs	r3, r3, #16
 80054a4:	f003 0204 	and.w	r2, r3, #4
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ac:	f003 0310 	and.w	r3, r3, #16
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80054c4:	ea42 0103 	orr.w	r1, r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69da      	ldr	r2, [r3, #28]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b088      	sub	sp, #32
 8005502:	af00      	add	r7, sp, #0
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	603b      	str	r3, [r7, #0]
 800550a:	4613      	mov	r3, r2
 800550c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_SPI_Transmit+0x22>
 800551c:	2302      	movs	r3, #2
 800551e:	e158      	b.n	80057d2 <HAL_SPI_Transmit+0x2d4>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005528:	f7fe ff18 	bl	800435c <HAL_GetTick>
 800552c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800552e:	88fb      	ldrh	r3, [r7, #6]
 8005530:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b01      	cmp	r3, #1
 800553c:	d002      	beq.n	8005544 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800553e:	2302      	movs	r3, #2
 8005540:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005542:	e13d      	b.n	80057c0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <HAL_SPI_Transmit+0x52>
 800554a:	88fb      	ldrh	r3, [r7, #6]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d102      	bne.n	8005556 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005554:	e134      	b.n	80057c0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2203      	movs	r2, #3
 800555a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	88fa      	ldrh	r2, [r7, #6]
 800556e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	88fa      	ldrh	r2, [r7, #6]
 8005574:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055a0:	d10f      	bne.n	80055c2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055cc:	2b40      	cmp	r3, #64	@ 0x40
 80055ce:	d007      	beq.n	80055e0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80055e8:	d94b      	bls.n	8005682 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d002      	beq.n	80055f8 <HAL_SPI_Transmit+0xfa>
 80055f2:	8afb      	ldrh	r3, [r7, #22]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d13e      	bne.n	8005676 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fc:	881a      	ldrh	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005608:	1c9a      	adds	r2, r3, #2
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005612:	b29b      	uxth	r3, r3
 8005614:	3b01      	subs	r3, #1
 8005616:	b29a      	uxth	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800561c:	e02b      	b.n	8005676 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b02      	cmp	r3, #2
 800562a:	d112      	bne.n	8005652 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005630:	881a      	ldrh	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563c:	1c9a      	adds	r2, r3, #2
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005646:	b29b      	uxth	r3, r3
 8005648:	3b01      	subs	r3, #1
 800564a:	b29a      	uxth	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005650:	e011      	b.n	8005676 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005652:	f7fe fe83 	bl	800435c <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d803      	bhi.n	800566a <HAL_SPI_Transmit+0x16c>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005668:	d102      	bne.n	8005670 <HAL_SPI_Transmit+0x172>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d102      	bne.n	8005676 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005674:	e0a4      	b.n	80057c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800567a:	b29b      	uxth	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1ce      	bne.n	800561e <HAL_SPI_Transmit+0x120>
 8005680:	e07c      	b.n	800577c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d002      	beq.n	8005690 <HAL_SPI_Transmit+0x192>
 800568a:	8afb      	ldrh	r3, [r7, #22]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d170      	bne.n	8005772 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005694:	b29b      	uxth	r3, r3
 8005696:	2b01      	cmp	r3, #1
 8005698:	d912      	bls.n	80056c0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569e:	881a      	ldrh	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056aa:	1c9a      	adds	r2, r3, #2
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	3b02      	subs	r3, #2
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056be:	e058      	b.n	8005772 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	330c      	adds	r3, #12
 80056ca:	7812      	ldrb	r2, [r2, #0]
 80056cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056dc:	b29b      	uxth	r3, r3
 80056de:	3b01      	subs	r3, #1
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80056e6:	e044      	b.n	8005772 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d12b      	bne.n	800574e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d912      	bls.n	8005726 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005704:	881a      	ldrh	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005710:	1c9a      	adds	r2, r3, #2
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b02      	subs	r3, #2
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005724:	e025      	b.n	8005772 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	330c      	adds	r3, #12
 8005730:	7812      	ldrb	r2, [r2, #0]
 8005732:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800574c:	e011      	b.n	8005772 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800574e:	f7fe fe05 	bl	800435c <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	683a      	ldr	r2, [r7, #0]
 800575a:	429a      	cmp	r2, r3
 800575c:	d803      	bhi.n	8005766 <HAL_SPI_Transmit+0x268>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005764:	d102      	bne.n	800576c <HAL_SPI_Transmit+0x26e>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d102      	bne.n	8005772 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005770:	e026      	b.n	80057c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005776:	b29b      	uxth	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1b5      	bne.n	80056e8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	6839      	ldr	r1, [r7, #0]
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 fe1b 	bl	80063bc <SPI_EndRxTxTransaction>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2220      	movs	r2, #32
 8005790:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10a      	bne.n	80057b0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800579a:	2300      	movs	r3, #0
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	613b      	str	r3, [r7, #16]
 80057ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	77fb      	strb	r3, [r7, #31]
 80057bc:	e000      	b.n	80057c0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80057be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80057d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3720      	adds	r7, #32
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b088      	sub	sp, #32
 80057de:	af02      	add	r7, sp, #8
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	603b      	str	r3, [r7, #0]
 80057e6:	4613      	mov	r3, r2
 80057e8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057f6:	d112      	bne.n	800581e <HAL_SPI_Receive+0x44>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10e      	bne.n	800581e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2204      	movs	r2, #4
 8005804:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005808:	88fa      	ldrh	r2, [r7, #6]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	4613      	mov	r3, r2
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	68b9      	ldr	r1, [r7, #8]
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 f910 	bl	8005a3a <HAL_SPI_TransmitReceive>
 800581a:	4603      	mov	r3, r0
 800581c:	e109      	b.n	8005a32 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_SPI_Receive+0x52>
 8005828:	2302      	movs	r3, #2
 800582a:	e102      	b.n	8005a32 <HAL_SPI_Receive+0x258>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005834:	f7fe fd92 	bl	800435c <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b01      	cmp	r3, #1
 8005844:	d002      	beq.n	800584c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005846:	2302      	movs	r3, #2
 8005848:	75fb      	strb	r3, [r7, #23]
    goto error;
 800584a:	e0e9      	b.n	8005a20 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d002      	beq.n	8005858 <HAL_SPI_Receive+0x7e>
 8005852:	88fb      	ldrh	r3, [r7, #6]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d102      	bne.n	800585e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800585c:	e0e0      	b.n	8005a20 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2204      	movs	r2, #4
 8005862:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	88fa      	ldrh	r2, [r7, #6]
 8005876:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	88fa      	ldrh	r2, [r7, #6]
 800587e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058a8:	d908      	bls.n	80058bc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80058b8:	605a      	str	r2, [r3, #4]
 80058ba:	e007      	b.n	80058cc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80058ca:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058d4:	d10f      	bne.n	80058f6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80058f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005900:	2b40      	cmp	r3, #64	@ 0x40
 8005902:	d007      	beq.n	8005914 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005912:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800591c:	d867      	bhi.n	80059ee <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800591e:	e030      	b.n	8005982 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b01      	cmp	r3, #1
 800592c:	d117      	bne.n	800595e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f103 020c 	add.w	r2, r3, #12
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593a:	7812      	ldrb	r2, [r2, #0]
 800593c:	b2d2      	uxtb	r2, r2
 800593e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005950:	b29b      	uxth	r3, r3
 8005952:	3b01      	subs	r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800595c:	e011      	b.n	8005982 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800595e:	f7fe fcfd 	bl	800435c <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d803      	bhi.n	8005976 <HAL_SPI_Receive+0x19c>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005974:	d102      	bne.n	800597c <HAL_SPI_Receive+0x1a2>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d102      	bne.n	8005982 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005980:	e04e      	b.n	8005a20 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005988:	b29b      	uxth	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1c8      	bne.n	8005920 <HAL_SPI_Receive+0x146>
 800598e:	e034      	b.n	80059fa <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b01      	cmp	r3, #1
 800599c:	d115      	bne.n	80059ca <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a8:	b292      	uxth	r2, r2
 80059aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b0:	1c9a      	adds	r2, r3, #2
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059bc:	b29b      	uxth	r3, r3
 80059be:	3b01      	subs	r3, #1
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80059c8:	e011      	b.n	80059ee <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059ca:	f7fe fcc7 	bl	800435c <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d803      	bhi.n	80059e2 <HAL_SPI_Receive+0x208>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e0:	d102      	bne.n	80059e8 <HAL_SPI_Receive+0x20e>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d102      	bne.n	80059ee <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059ec:	e018      	b.n	8005a20 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1ca      	bne.n	8005990 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 fc60 	bl	80062c4 <SPI_EndRxTransaction>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	75fb      	strb	r3, [r7, #23]
 8005a1c:	e000      	b.n	8005a20 <HAL_SPI_Receive+0x246>
  }

error :
 8005a1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b08a      	sub	sp, #40	@ 0x28
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	60f8      	str	r0, [r7, #12]
 8005a42:	60b9      	str	r1, [r7, #8]
 8005a44:	607a      	str	r2, [r7, #4]
 8005a46:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d101      	bne.n	8005a60 <HAL_SPI_TransmitReceive+0x26>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e1fb      	b.n	8005e58 <HAL_SPI_TransmitReceive+0x41e>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a68:	f7fe fc78 	bl	800435c <HAL_GetTick>
 8005a6c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a74:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005a7c:	887b      	ldrh	r3, [r7, #2]
 8005a7e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005a80:	887b      	ldrh	r3, [r7, #2]
 8005a82:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a84:	7efb      	ldrb	r3, [r7, #27]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d00e      	beq.n	8005aa8 <HAL_SPI_TransmitReceive+0x6e>
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a90:	d106      	bne.n	8005aa0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d102      	bne.n	8005aa0 <HAL_SPI_TransmitReceive+0x66>
 8005a9a:	7efb      	ldrb	r3, [r7, #27]
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	d003      	beq.n	8005aa8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005aa6:	e1cd      	b.n	8005e44 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d005      	beq.n	8005aba <HAL_SPI_TransmitReceive+0x80>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <HAL_SPI_TransmitReceive+0x80>
 8005ab4:	887b      	ldrh	r3, [r7, #2]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d103      	bne.n	8005ac2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005ac0:	e1c0      	b.n	8005e44 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d003      	beq.n	8005ad6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2205      	movs	r2, #5
 8005ad2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	887a      	ldrh	r2, [r7, #2]
 8005ae6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	887a      	ldrh	r2, [r7, #2]
 8005aee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	887a      	ldrh	r2, [r7, #2]
 8005afc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	887a      	ldrh	r2, [r7, #2]
 8005b02:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b18:	d802      	bhi.n	8005b20 <HAL_SPI_TransmitReceive+0xe6>
 8005b1a:	8a3b      	ldrh	r3, [r7, #16]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d908      	bls.n	8005b32 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005b2e:	605a      	str	r2, [r3, #4]
 8005b30:	e007      	b.n	8005b42 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005b40:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b4c:	2b40      	cmp	r3, #64	@ 0x40
 8005b4e:	d007      	beq.n	8005b60 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b68:	d97c      	bls.n	8005c64 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d002      	beq.n	8005b78 <HAL_SPI_TransmitReceive+0x13e>
 8005b72:	8a7b      	ldrh	r3, [r7, #18]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d169      	bne.n	8005c4c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7c:	881a      	ldrh	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b88:	1c9a      	adds	r2, r3, #2
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b9c:	e056      	b.n	8005c4c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d11b      	bne.n	8005be4 <HAL_SPI_TransmitReceive+0x1aa>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d016      	beq.n	8005be4 <HAL_SPI_TransmitReceive+0x1aa>
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d113      	bne.n	8005be4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc0:	881a      	ldrh	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bcc:	1c9a      	adds	r2, r3, #2
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d11c      	bne.n	8005c2c <HAL_SPI_TransmitReceive+0x1f2>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d016      	beq.n	8005c2c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c08:	b292      	uxth	r2, r2
 8005c0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c10:	1c9a      	adds	r2, r3, #2
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c2c:	f7fe fb96 	bl	800435c <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d807      	bhi.n	8005c4c <HAL_SPI_TransmitReceive+0x212>
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c42:	d003      	beq.n	8005c4c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8005c4a:	e0fb      	b.n	8005e44 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1a3      	bne.n	8005b9e <HAL_SPI_TransmitReceive+0x164>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d19d      	bne.n	8005b9e <HAL_SPI_TransmitReceive+0x164>
 8005c62:	e0df      	b.n	8005e24 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <HAL_SPI_TransmitReceive+0x23a>
 8005c6c:	8a7b      	ldrh	r3, [r7, #18]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	f040 80cb 	bne.w	8005e0a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d912      	bls.n	8005ca4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c82:	881a      	ldrh	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8e:	1c9a      	adds	r2, r3, #2
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	3b02      	subs	r3, #2
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ca2:	e0b2      	b.n	8005e0a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	330c      	adds	r3, #12
 8005cae:	7812      	ldrb	r2, [r2, #0]
 8005cb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cca:	e09e      	b.n	8005e0a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d134      	bne.n	8005d44 <HAL_SPI_TransmitReceive+0x30a>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d02f      	beq.n	8005d44 <HAL_SPI_TransmitReceive+0x30a>
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d12c      	bne.n	8005d44 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d912      	bls.n	8005d1a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf8:	881a      	ldrh	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d04:	1c9a      	adds	r2, r3, #2
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	3b02      	subs	r3, #2
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d18:	e012      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	330c      	adds	r3, #12
 8005d24:	7812      	ldrb	r2, [r2, #0]
 8005d26:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d148      	bne.n	8005de4 <HAL_SPI_TransmitReceive+0x3aa>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d042      	beq.n	8005de4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d923      	bls.n	8005db2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68da      	ldr	r2, [r3, #12]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d74:	b292      	uxth	r2, r2
 8005d76:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7c:	1c9a      	adds	r2, r3, #2
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	3b02      	subs	r3, #2
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d81f      	bhi.n	8005de0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005dae:	605a      	str	r2, [r3, #4]
 8005db0:	e016      	b.n	8005de0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f103 020c 	add.w	r2, r3, #12
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dbe:	7812      	ldrb	r2, [r2, #0]
 8005dc0:	b2d2      	uxtb	r2, r2
 8005dc2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005de0:	2301      	movs	r3, #1
 8005de2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005de4:	f7fe faba 	bl	800435c <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d803      	bhi.n	8005dfc <HAL_SPI_TransmitReceive+0x3c2>
 8005df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfa:	d102      	bne.n	8005e02 <HAL_SPI_TransmitReceive+0x3c8>
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d103      	bne.n	8005e0a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8005e08:	e01c      	b.n	8005e44 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f47f af5b 	bne.w	8005ccc <HAL_SPI_TransmitReceive+0x292>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f47f af54 	bne.w	8005ccc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e24:	69fa      	ldr	r2, [r7, #28]
 8005e26:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 fac7 	bl	80063bc <SPI_EndRxTxTransaction>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d006      	beq.n	8005e42 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	661a      	str	r2, [r3, #96]	@ 0x60
 8005e40:	e000      	b.n	8005e44 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005e42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005e54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3728      	adds	r7, #40	@ 0x28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10e      	bne.n	8005ea0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d009      	beq.n	8005ea0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d004      	beq.n	8005ea0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	4798      	blx	r3
    return;
 8005e9e:	e0ce      	b.n	800603e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d009      	beq.n	8005ebe <HAL_SPI_IRQHandler+0x5e>
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d004      	beq.n	8005ebe <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	4798      	blx	r3
    return;
 8005ebc:	e0bf      	b.n	800603e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10a      	bne.n	8005ede <HAL_SPI_IRQHandler+0x7e>
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d105      	bne.n	8005ede <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 80b0 	beq.w	800603e <HAL_SPI_IRQHandler+0x1de>
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	f003 0320 	and.w	r3, r3, #32
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 80aa 	beq.w	800603e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d023      	beq.n	8005f3c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d011      	beq.n	8005f24 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f04:	f043 0204 	orr.w	r2, r3, #4
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	e00b      	b.n	8005f3c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f24:	2300      	movs	r3, #0
 8005f26:	613b      	str	r3, [r7, #16]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	613b      	str	r3, [r7, #16]
 8005f38:	693b      	ldr	r3, [r7, #16]
        return;
 8005f3a:	e080      	b.n	800603e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	f003 0320 	and.w	r3, r3, #32
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d014      	beq.n	8005f70 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f4a:	f043 0201 	orr.w	r2, r3, #1
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005f52:	2300      	movs	r3, #0
 8005f54:	60fb      	str	r3, [r7, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00c      	beq.n	8005f94 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f7e:	f043 0208 	orr.w	r2, r3, #8
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005f86:	2300      	movs	r3, #0
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	60bb      	str	r3, [r7, #8]
 8005f92:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d04f      	beq.n	800603c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005faa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d104      	bne.n	8005fc8 <HAL_SPI_IRQHandler+0x168>
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d034      	beq.n	8006032 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0203 	bic.w	r2, r2, #3
 8005fd6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d011      	beq.n	8006004 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fe4:	4a17      	ldr	r2, [pc, #92]	@ (8006044 <HAL_SPI_IRQHandler+0x1e4>)
 8005fe6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7fe faf6 	bl	80045de <HAL_DMA_Abort_IT>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d005      	beq.n	8006004 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ffc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006008:	2b00      	cmp	r3, #0
 800600a:	d016      	beq.n	800603a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006010:	4a0c      	ldr	r2, [pc, #48]	@ (8006044 <HAL_SPI_IRQHandler+0x1e4>)
 8006012:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006018:	4618      	mov	r0, r3
 800601a:	f7fe fae0 	bl	80045de <HAL_DMA_Abort_IT>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00a      	beq.n	800603a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006028:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006030:	e003      	b.n	800603a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f808 	bl	8006048 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006038:	e000      	b.n	800603c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800603a:	bf00      	nop
    return;
 800603c:	bf00      	nop
  }
}
 800603e:	3720      	adds	r7, #32
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	0800605d 	.word	0x0800605d

08006048 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006068:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f7ff ffe5 	bl	8006048 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800607e:	bf00      	nop
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b088      	sub	sp, #32
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	603b      	str	r3, [r7, #0]
 8006094:	4613      	mov	r3, r2
 8006096:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006098:	f7fe f960 	bl	800435c <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	4413      	add	r3, r2
 80060a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060a8:	f7fe f958 	bl	800435c <HAL_GetTick>
 80060ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060ae:	4b39      	ldr	r3, [pc, #228]	@ (8006194 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	015b      	lsls	r3, r3, #5
 80060b4:	0d1b      	lsrs	r3, r3, #20
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	fb02 f303 	mul.w	r3, r2, r3
 80060bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060be:	e054      	b.n	800616a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c6:	d050      	beq.n	800616a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060c8:	f7fe f948 	bl	800435c <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d902      	bls.n	80060de <SPI_WaitFlagStateUntilTimeout+0x56>
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d13d      	bne.n	800615a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80060ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060f6:	d111      	bne.n	800611c <SPI_WaitFlagStateUntilTimeout+0x94>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006100:	d004      	beq.n	800610c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800610a:	d107      	bne.n	800611c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800611a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006120:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006124:	d10f      	bne.n	8006146 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006144:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e017      	b.n	800618a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	3b01      	subs	r3, #1
 8006168:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	4013      	ands	r3, r2
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	429a      	cmp	r2, r3
 8006178:	bf0c      	ite	eq
 800617a:	2301      	moveq	r3, #1
 800617c:	2300      	movne	r3, #0
 800617e:	b2db      	uxtb	r3, r3
 8006180:	461a      	mov	r2, r3
 8006182:	79fb      	ldrb	r3, [r7, #7]
 8006184:	429a      	cmp	r2, r3
 8006186:	d19b      	bne.n	80060c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3720      	adds	r7, #32
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	20000108 	.word	0x20000108

08006198 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b08a      	sub	sp, #40	@ 0x28
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80061aa:	f7fe f8d7 	bl	800435c <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b2:	1a9b      	subs	r3, r3, r2
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	4413      	add	r3, r2
 80061b8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80061ba:	f7fe f8cf 	bl	800435c <HAL_GetTick>
 80061be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	330c      	adds	r3, #12
 80061c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80061c8:	4b3d      	ldr	r3, [pc, #244]	@ (80062c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	00da      	lsls	r2, r3, #3
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	0d1b      	lsrs	r3, r3, #20
 80061d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061da:	fb02 f303 	mul.w	r3, r2, r3
 80061de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80061e0:	e060      	b.n	80062a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80061e8:	d107      	bne.n	80061fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d104      	bne.n	80061fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006200:	d050      	beq.n	80062a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006202:	f7fe f8ab 	bl	800435c <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800620e:	429a      	cmp	r2, r3
 8006210:	d902      	bls.n	8006218 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006214:	2b00      	cmp	r3, #0
 8006216:	d13d      	bne.n	8006294 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006226:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006230:	d111      	bne.n	8006256 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800623a:	d004      	beq.n	8006246 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006244:	d107      	bne.n	8006256 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006254:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800625e:	d10f      	bne.n	8006280 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800627e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e010      	b.n	80062b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689a      	ldr	r2, [r3, #8]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	4013      	ands	r3, r2
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d196      	bne.n	80061e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3728      	adds	r7, #40	@ 0x28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20000108 	.word	0x20000108

080062c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062d8:	d111      	bne.n	80062fe <SPI_EndRxTransaction+0x3a>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062e2:	d004      	beq.n	80062ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062ec:	d107      	bne.n	80062fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006306:	d112      	bne.n	800632e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2200      	movs	r2, #0
 8006310:	2180      	movs	r1, #128	@ 0x80
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f7ff feb8 	bl	8006088 <SPI_WaitFlagStateUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d021      	beq.n	8006362 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006322:	f043 0220 	orr.w	r2, r3, #32
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e03d      	b.n	80063aa <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800632e:	4b21      	ldr	r3, [pc, #132]	@ (80063b4 <SPI_EndRxTransaction+0xf0>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a21      	ldr	r2, [pc, #132]	@ (80063b8 <SPI_EndRxTransaction+0xf4>)
 8006334:	fba2 2303 	umull	r2, r3, r2, r3
 8006338:	0d5b      	lsrs	r3, r3, #21
 800633a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800633e:	fb02 f303 	mul.w	r3, r2, r3
 8006342:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	3b01      	subs	r3, #1
 800634e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800635a:	2b80      	cmp	r3, #128	@ 0x80
 800635c:	d0f2      	beq.n	8006344 <SPI_EndRxTransaction+0x80>
 800635e:	e000      	b.n	8006362 <SPI_EndRxTransaction+0x9e>
        break;
 8006360:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800636a:	d11d      	bne.n	80063a8 <SPI_EndRxTransaction+0xe4>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006374:	d004      	beq.n	8006380 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800637e:	d113      	bne.n	80063a8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2200      	movs	r2, #0
 8006388:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f7ff ff03 	bl	8006198 <SPI_WaitFifoStateUntilTimeout>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d007      	beq.n	80063a8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800639c:	f043 0220 	orr.w	r2, r3, #32
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e000      	b.n	80063aa <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3718      	adds	r7, #24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20000108 	.word	0x20000108
 80063b8:	165e9f81 	.word	0x165e9f81

080063bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af02      	add	r7, sp, #8
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f7ff fedf 	bl	8006198 <SPI_WaitFifoStateUntilTimeout>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d007      	beq.n	80063f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063e4:	f043 0220 	orr.w	r2, r3, #32
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e046      	b.n	800647e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063f0:	4b25      	ldr	r3, [pc, #148]	@ (8006488 <SPI_EndRxTxTransaction+0xcc>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a25      	ldr	r2, [pc, #148]	@ (800648c <SPI_EndRxTxTransaction+0xd0>)
 80063f6:	fba2 2303 	umull	r2, r3, r2, r3
 80063fa:	0d5b      	lsrs	r3, r3, #21
 80063fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006400:	fb02 f303 	mul.w	r3, r2, r3
 8006404:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800640e:	d112      	bne.n	8006436 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2200      	movs	r2, #0
 8006418:	2180      	movs	r1, #128	@ 0x80
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f7ff fe34 	bl	8006088 <SPI_WaitFlagStateUntilTimeout>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d016      	beq.n	8006454 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800642a:	f043 0220 	orr.w	r2, r3, #32
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e023      	b.n	800647e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	3b01      	subs	r3, #1
 8006440:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800644c:	2b80      	cmp	r3, #128	@ 0x80
 800644e:	d0f2      	beq.n	8006436 <SPI_EndRxTxTransaction+0x7a>
 8006450:	e000      	b.n	8006454 <SPI_EndRxTxTransaction+0x98>
        break;
 8006452:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2200      	movs	r2, #0
 800645c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f7ff fe99 	bl	8006198 <SPI_WaitFifoStateUntilTimeout>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d007      	beq.n	800647c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006470:	f043 0220 	orr.w	r2, r3, #32
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e000      	b.n	800647e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20000108 	.word	0x20000108
 800648c:	165e9f81 	.word	0x165e9f81

08006490 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e049      	b.n	8006536 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d106      	bne.n	80064bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7fd fd3e 	bl	8003f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	3304      	adds	r3, #4
 80064cc:	4619      	mov	r1, r3
 80064ce:	4610      	mov	r0, r2
 80064d0:	f000 fdde 	bl	8007090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
	...

08006540 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b01      	cmp	r3, #1
 8006552:	d001      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e054      	b.n	8006602 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2202      	movs	r2, #2
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0201 	orr.w	r2, r2, #1
 800656e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a26      	ldr	r2, [pc, #152]	@ (8006610 <HAL_TIM_Base_Start_IT+0xd0>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d022      	beq.n	80065c0 <HAL_TIM_Base_Start_IT+0x80>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006582:	d01d      	beq.n	80065c0 <HAL_TIM_Base_Start_IT+0x80>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a22      	ldr	r2, [pc, #136]	@ (8006614 <HAL_TIM_Base_Start_IT+0xd4>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d018      	beq.n	80065c0 <HAL_TIM_Base_Start_IT+0x80>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a21      	ldr	r2, [pc, #132]	@ (8006618 <HAL_TIM_Base_Start_IT+0xd8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d013      	beq.n	80065c0 <HAL_TIM_Base_Start_IT+0x80>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a1f      	ldr	r2, [pc, #124]	@ (800661c <HAL_TIM_Base_Start_IT+0xdc>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d00e      	beq.n	80065c0 <HAL_TIM_Base_Start_IT+0x80>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a1e      	ldr	r2, [pc, #120]	@ (8006620 <HAL_TIM_Base_Start_IT+0xe0>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d009      	beq.n	80065c0 <HAL_TIM_Base_Start_IT+0x80>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a1c      	ldr	r2, [pc, #112]	@ (8006624 <HAL_TIM_Base_Start_IT+0xe4>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d004      	beq.n	80065c0 <HAL_TIM_Base_Start_IT+0x80>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006628 <HAL_TIM_Base_Start_IT+0xe8>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d115      	bne.n	80065ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689a      	ldr	r2, [r3, #8]
 80065c6:	4b19      	ldr	r3, [pc, #100]	@ (800662c <HAL_TIM_Base_Start_IT+0xec>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2b06      	cmp	r3, #6
 80065d0:	d015      	beq.n	80065fe <HAL_TIM_Base_Start_IT+0xbe>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065d8:	d011      	beq.n	80065fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f042 0201 	orr.w	r2, r2, #1
 80065e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ea:	e008      	b.n	80065fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f042 0201 	orr.w	r2, r2, #1
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	e000      	b.n	8006600 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	40010000 	.word	0x40010000
 8006614:	40000400 	.word	0x40000400
 8006618:	40000800 	.word	0x40000800
 800661c:	40000c00 	.word	0x40000c00
 8006620:	40010400 	.word	0x40010400
 8006624:	40014000 	.word	0x40014000
 8006628:	40001800 	.word	0x40001800
 800662c:	00010007 	.word	0x00010007

08006630 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0201 	bic.w	r2, r2, #1
 8006646:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6a1a      	ldr	r2, [r3, #32]
 800664e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006652:	4013      	ands	r3, r2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10f      	bne.n	8006678 <HAL_TIM_Base_Stop_IT+0x48>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6a1a      	ldr	r2, [r3, #32]
 800665e:	f240 4344 	movw	r3, #1092	@ 0x444
 8006662:	4013      	ands	r3, r2
 8006664:	2b00      	cmp	r3, #0
 8006666:	d107      	bne.n	8006678 <HAL_TIM_Base_Stop_IT+0x48>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 0201 	bic.w	r2, r2, #1
 8006676:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e049      	b.n	8006734 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d106      	bne.n	80066ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f841 	bl	800673c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2202      	movs	r2, #2
 80066be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3304      	adds	r3, #4
 80066ca:	4619      	mov	r1, r3
 80066cc:	4610      	mov	r0, r2
 80066ce:	f000 fcdf 	bl	8007090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3708      	adds	r7, #8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d109      	bne.n	8006774 <HAL_TIM_PWM_Start+0x24>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b01      	cmp	r3, #1
 800676a:	bf14      	ite	ne
 800676c:	2301      	movne	r3, #1
 800676e:	2300      	moveq	r3, #0
 8006770:	b2db      	uxtb	r3, r3
 8006772:	e03c      	b.n	80067ee <HAL_TIM_PWM_Start+0x9e>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b04      	cmp	r3, #4
 8006778:	d109      	bne.n	800678e <HAL_TIM_PWM_Start+0x3e>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b01      	cmp	r3, #1
 8006784:	bf14      	ite	ne
 8006786:	2301      	movne	r3, #1
 8006788:	2300      	moveq	r3, #0
 800678a:	b2db      	uxtb	r3, r3
 800678c:	e02f      	b.n	80067ee <HAL_TIM_PWM_Start+0x9e>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b08      	cmp	r3, #8
 8006792:	d109      	bne.n	80067a8 <HAL_TIM_PWM_Start+0x58>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b01      	cmp	r3, #1
 800679e:	bf14      	ite	ne
 80067a0:	2301      	movne	r3, #1
 80067a2:	2300      	moveq	r3, #0
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	e022      	b.n	80067ee <HAL_TIM_PWM_Start+0x9e>
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	2b0c      	cmp	r3, #12
 80067ac:	d109      	bne.n	80067c2 <HAL_TIM_PWM_Start+0x72>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	bf14      	ite	ne
 80067ba:	2301      	movne	r3, #1
 80067bc:	2300      	moveq	r3, #0
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	e015      	b.n	80067ee <HAL_TIM_PWM_Start+0x9e>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b10      	cmp	r3, #16
 80067c6:	d109      	bne.n	80067dc <HAL_TIM_PWM_Start+0x8c>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	bf14      	ite	ne
 80067d4:	2301      	movne	r3, #1
 80067d6:	2300      	moveq	r3, #0
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	e008      	b.n	80067ee <HAL_TIM_PWM_Start+0x9e>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	bf14      	ite	ne
 80067e8:	2301      	movne	r3, #1
 80067ea:	2300      	moveq	r3, #0
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e092      	b.n	800691c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d104      	bne.n	8006806 <HAL_TIM_PWM_Start+0xb6>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006804:	e023      	b.n	800684e <HAL_TIM_PWM_Start+0xfe>
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b04      	cmp	r3, #4
 800680a:	d104      	bne.n	8006816 <HAL_TIM_PWM_Start+0xc6>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2202      	movs	r2, #2
 8006810:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006814:	e01b      	b.n	800684e <HAL_TIM_PWM_Start+0xfe>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b08      	cmp	r3, #8
 800681a:	d104      	bne.n	8006826 <HAL_TIM_PWM_Start+0xd6>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006824:	e013      	b.n	800684e <HAL_TIM_PWM_Start+0xfe>
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b0c      	cmp	r3, #12
 800682a:	d104      	bne.n	8006836 <HAL_TIM_PWM_Start+0xe6>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006834:	e00b      	b.n	800684e <HAL_TIM_PWM_Start+0xfe>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b10      	cmp	r3, #16
 800683a:	d104      	bne.n	8006846 <HAL_TIM_PWM_Start+0xf6>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006844:	e003      	b.n	800684e <HAL_TIM_PWM_Start+0xfe>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2202      	movs	r2, #2
 800684a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2201      	movs	r2, #1
 8006854:	6839      	ldr	r1, [r7, #0]
 8006856:	4618      	mov	r0, r3
 8006858:	f000 ffb2 	bl	80077c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a30      	ldr	r2, [pc, #192]	@ (8006924 <HAL_TIM_PWM_Start+0x1d4>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d004      	beq.n	8006870 <HAL_TIM_PWM_Start+0x120>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a2f      	ldr	r2, [pc, #188]	@ (8006928 <HAL_TIM_PWM_Start+0x1d8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d101      	bne.n	8006874 <HAL_TIM_PWM_Start+0x124>
 8006870:	2301      	movs	r3, #1
 8006872:	e000      	b.n	8006876 <HAL_TIM_PWM_Start+0x126>
 8006874:	2300      	movs	r3, #0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d007      	beq.n	800688a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006888:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a25      	ldr	r2, [pc, #148]	@ (8006924 <HAL_TIM_PWM_Start+0x1d4>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d022      	beq.n	80068da <HAL_TIM_PWM_Start+0x18a>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800689c:	d01d      	beq.n	80068da <HAL_TIM_PWM_Start+0x18a>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a22      	ldr	r2, [pc, #136]	@ (800692c <HAL_TIM_PWM_Start+0x1dc>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d018      	beq.n	80068da <HAL_TIM_PWM_Start+0x18a>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a20      	ldr	r2, [pc, #128]	@ (8006930 <HAL_TIM_PWM_Start+0x1e0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d013      	beq.n	80068da <HAL_TIM_PWM_Start+0x18a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006934 <HAL_TIM_PWM_Start+0x1e4>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00e      	beq.n	80068da <HAL_TIM_PWM_Start+0x18a>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a19      	ldr	r2, [pc, #100]	@ (8006928 <HAL_TIM_PWM_Start+0x1d8>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d009      	beq.n	80068da <HAL_TIM_PWM_Start+0x18a>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006938 <HAL_TIM_PWM_Start+0x1e8>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d004      	beq.n	80068da <HAL_TIM_PWM_Start+0x18a>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a19      	ldr	r2, [pc, #100]	@ (800693c <HAL_TIM_PWM_Start+0x1ec>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d115      	bne.n	8006906 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	4b17      	ldr	r3, [pc, #92]	@ (8006940 <HAL_TIM_PWM_Start+0x1f0>)
 80068e2:	4013      	ands	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b06      	cmp	r3, #6
 80068ea:	d015      	beq.n	8006918 <HAL_TIM_PWM_Start+0x1c8>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068f2:	d011      	beq.n	8006918 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0201 	orr.w	r2, r2, #1
 8006902:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006904:	e008      	b.n	8006918 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f042 0201 	orr.w	r2, r2, #1
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	e000      	b.n	800691a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006918:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	40010000 	.word	0x40010000
 8006928:	40010400 	.word	0x40010400
 800692c:	40000400 	.word	0x40000400
 8006930:	40000800 	.word	0x40000800
 8006934:	40000c00 	.word	0x40000c00
 8006938:	40014000 	.word	0x40014000
 800693c:	40001800 	.word	0x40001800
 8006940:	00010007 	.word	0x00010007

08006944 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2200      	movs	r2, #0
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	4618      	mov	r0, r3
 8006958:	f000 ff32 	bl	80077c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a36      	ldr	r2, [pc, #216]	@ (8006a3c <HAL_TIM_PWM_Stop+0xf8>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d004      	beq.n	8006970 <HAL_TIM_PWM_Stop+0x2c>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a35      	ldr	r2, [pc, #212]	@ (8006a40 <HAL_TIM_PWM_Stop+0xfc>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d101      	bne.n	8006974 <HAL_TIM_PWM_Stop+0x30>
 8006970:	2301      	movs	r3, #1
 8006972:	e000      	b.n	8006976 <HAL_TIM_PWM_Stop+0x32>
 8006974:	2300      	movs	r3, #0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d017      	beq.n	80069aa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6a1a      	ldr	r2, [r3, #32]
 8006980:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006984:	4013      	ands	r3, r2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10f      	bne.n	80069aa <HAL_TIM_PWM_Stop+0x66>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6a1a      	ldr	r2, [r3, #32]
 8006990:	f240 4344 	movw	r3, #1092	@ 0x444
 8006994:	4013      	ands	r3, r2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d107      	bne.n	80069aa <HAL_TIM_PWM_Stop+0x66>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80069a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6a1a      	ldr	r2, [r3, #32]
 80069b0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80069b4:	4013      	ands	r3, r2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10f      	bne.n	80069da <HAL_TIM_PWM_Stop+0x96>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6a1a      	ldr	r2, [r3, #32]
 80069c0:	f240 4344 	movw	r3, #1092	@ 0x444
 80069c4:	4013      	ands	r3, r2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d107      	bne.n	80069da <HAL_TIM_PWM_Stop+0x96>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f022 0201 	bic.w	r2, r2, #1
 80069d8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d104      	bne.n	80069ea <HAL_TIM_PWM_Stop+0xa6>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069e8:	e023      	b.n	8006a32 <HAL_TIM_PWM_Stop+0xee>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d104      	bne.n	80069fa <HAL_TIM_PWM_Stop+0xb6>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069f8:	e01b      	b.n	8006a32 <HAL_TIM_PWM_Stop+0xee>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	d104      	bne.n	8006a0a <HAL_TIM_PWM_Stop+0xc6>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a08:	e013      	b.n	8006a32 <HAL_TIM_PWM_Stop+0xee>
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b0c      	cmp	r3, #12
 8006a0e:	d104      	bne.n	8006a1a <HAL_TIM_PWM_Stop+0xd6>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a18:	e00b      	b.n	8006a32 <HAL_TIM_PWM_Stop+0xee>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b10      	cmp	r3, #16
 8006a1e:	d104      	bne.n	8006a2a <HAL_TIM_PWM_Stop+0xe6>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a28:	e003      	b.n	8006a32 <HAL_TIM_PWM_Stop+0xee>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3708      	adds	r7, #8
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	40010000 	.word	0x40010000
 8006a40:	40010400 	.word	0x40010400

08006a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	f003 0302 	and.w	r3, r3, #2
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d122      	bne.n	8006aa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d11b      	bne.n	8006aa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f06f 0202 	mvn.w	r2, #2
 8006a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fae4 	bl	8007054 <HAL_TIM_IC_CaptureCallback>
 8006a8c:	e005      	b.n	8006a9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fad6 	bl	8007040 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fae7 	bl	8007068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	f003 0304 	and.w	r3, r3, #4
 8006aaa:	2b04      	cmp	r3, #4
 8006aac:	d122      	bne.n	8006af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	f003 0304 	and.w	r3, r3, #4
 8006ab8:	2b04      	cmp	r3, #4
 8006aba:	d11b      	bne.n	8006af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f06f 0204 	mvn.w	r2, #4
 8006ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2202      	movs	r2, #2
 8006aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 faba 	bl	8007054 <HAL_TIM_IC_CaptureCallback>
 8006ae0:	e005      	b.n	8006aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 faac 	bl	8007040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fabd 	bl	8007068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f003 0308 	and.w	r3, r3, #8
 8006afe:	2b08      	cmp	r3, #8
 8006b00:	d122      	bne.n	8006b48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f003 0308 	and.w	r3, r3, #8
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d11b      	bne.n	8006b48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f06f 0208 	mvn.w	r2, #8
 8006b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2204      	movs	r2, #4
 8006b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	f003 0303 	and.w	r3, r3, #3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fa90 	bl	8007054 <HAL_TIM_IC_CaptureCallback>
 8006b34:	e005      	b.n	8006b42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fa82 	bl	8007040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fa93 	bl	8007068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	f003 0310 	and.w	r3, r3, #16
 8006b52:	2b10      	cmp	r3, #16
 8006b54:	d122      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f003 0310 	and.w	r3, r3, #16
 8006b60:	2b10      	cmp	r3, #16
 8006b62:	d11b      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f06f 0210 	mvn.w	r2, #16
 8006b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2208      	movs	r2, #8
 8006b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fa66 	bl	8007054 <HAL_TIM_IC_CaptureCallback>
 8006b88:	e005      	b.n	8006b96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fa58 	bl	8007040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fa69 	bl	8007068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d10e      	bne.n	8006bc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d107      	bne.n	8006bc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f06f 0201 	mvn.w	r2, #1
 8006bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7fb ff12 	bl	80029ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bd2:	2b80      	cmp	r3, #128	@ 0x80
 8006bd4:	d10e      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006be0:	2b80      	cmp	r3, #128	@ 0x80
 8006be2:	d107      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fea4 	bl	800793c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c02:	d10e      	bne.n	8006c22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c0e:	2b80      	cmp	r3, #128	@ 0x80
 8006c10:	d107      	bne.n	8006c22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fe97 	bl	8007950 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c2c:	2b40      	cmp	r3, #64	@ 0x40
 8006c2e:	d10e      	bne.n	8006c4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c3a:	2b40      	cmp	r3, #64	@ 0x40
 8006c3c:	d107      	bne.n	8006c4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fa17 	bl	800707c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	f003 0320 	and.w	r3, r3, #32
 8006c58:	2b20      	cmp	r3, #32
 8006c5a:	d10e      	bne.n	8006c7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	f003 0320 	and.w	r3, r3, #32
 8006c66:	2b20      	cmp	r3, #32
 8006c68:	d107      	bne.n	8006c7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f06f 0220 	mvn.w	r2, #32
 8006c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fe57 	bl	8007928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c7a:	bf00      	nop
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
	...

08006c84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c90:	2300      	movs	r3, #0
 8006c92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d101      	bne.n	8006ca2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c9e:	2302      	movs	r3, #2
 8006ca0:	e0ff      	b.n	8006ea2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b14      	cmp	r3, #20
 8006cae:	f200 80f0 	bhi.w	8006e92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb8:	08006d0d 	.word	0x08006d0d
 8006cbc:	08006e93 	.word	0x08006e93
 8006cc0:	08006e93 	.word	0x08006e93
 8006cc4:	08006e93 	.word	0x08006e93
 8006cc8:	08006d4d 	.word	0x08006d4d
 8006ccc:	08006e93 	.word	0x08006e93
 8006cd0:	08006e93 	.word	0x08006e93
 8006cd4:	08006e93 	.word	0x08006e93
 8006cd8:	08006d8f 	.word	0x08006d8f
 8006cdc:	08006e93 	.word	0x08006e93
 8006ce0:	08006e93 	.word	0x08006e93
 8006ce4:	08006e93 	.word	0x08006e93
 8006ce8:	08006dcf 	.word	0x08006dcf
 8006cec:	08006e93 	.word	0x08006e93
 8006cf0:	08006e93 	.word	0x08006e93
 8006cf4:	08006e93 	.word	0x08006e93
 8006cf8:	08006e11 	.word	0x08006e11
 8006cfc:	08006e93 	.word	0x08006e93
 8006d00:	08006e93 	.word	0x08006e93
 8006d04:	08006e93 	.word	0x08006e93
 8006d08:	08006e51 	.word	0x08006e51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68b9      	ldr	r1, [r7, #8]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 fa5c 	bl	80071d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	699a      	ldr	r2, [r3, #24]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f042 0208 	orr.w	r2, r2, #8
 8006d26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	699a      	ldr	r2, [r3, #24]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 0204 	bic.w	r2, r2, #4
 8006d36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6999      	ldr	r1, [r3, #24]
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	691a      	ldr	r2, [r3, #16]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	430a      	orrs	r2, r1
 8006d48:	619a      	str	r2, [r3, #24]
      break;
 8006d4a:	e0a5      	b.n	8006e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68b9      	ldr	r1, [r7, #8]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 faae 	bl	80072b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699a      	ldr	r2, [r3, #24]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	699a      	ldr	r2, [r3, #24]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6999      	ldr	r1, [r3, #24]
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	021a      	lsls	r2, r3, #8
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	619a      	str	r2, [r3, #24]
      break;
 8006d8c:	e084      	b.n	8006e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68b9      	ldr	r1, [r7, #8]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 fb05 	bl	80073a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	69da      	ldr	r2, [r3, #28]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f042 0208 	orr.w	r2, r2, #8
 8006da8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	69da      	ldr	r2, [r3, #28]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 0204 	bic.w	r2, r2, #4
 8006db8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	69d9      	ldr	r1, [r3, #28]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	691a      	ldr	r2, [r3, #16]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	61da      	str	r2, [r3, #28]
      break;
 8006dcc:	e064      	b.n	8006e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68b9      	ldr	r1, [r7, #8]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 fb5b 	bl	8007490 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	69da      	ldr	r2, [r3, #28]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	69da      	ldr	r2, [r3, #28]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	69d9      	ldr	r1, [r3, #28]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	021a      	lsls	r2, r3, #8
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	61da      	str	r2, [r3, #28]
      break;
 8006e0e:	e043      	b.n	8006e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68b9      	ldr	r1, [r7, #8]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 fb92 	bl	8007540 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f042 0208 	orr.w	r2, r2, #8
 8006e2a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f022 0204 	bic.w	r2, r2, #4
 8006e3a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	691a      	ldr	r2, [r3, #16]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006e4e:	e023      	b.n	8006e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68b9      	ldr	r1, [r7, #8]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fbc4 	bl	80075e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e6a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e7a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	021a      	lsls	r2, r3, #8
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006e90:	e002      	b.n	8006e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	75fb      	strb	r3, [r7, #23]
      break;
 8006e96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop

08006eac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d101      	bne.n	8006ec8 <HAL_TIM_ConfigClockSource+0x1c>
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	e0b4      	b.n	8007032 <HAL_TIM_ConfigClockSource+0x186>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	4b56      	ldr	r3, [pc, #344]	@ (800703c <HAL_TIM_ConfigClockSource+0x190>)
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006eee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f00:	d03e      	beq.n	8006f80 <HAL_TIM_ConfigClockSource+0xd4>
 8006f02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f06:	f200 8087 	bhi.w	8007018 <HAL_TIM_ConfigClockSource+0x16c>
 8006f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f0e:	f000 8086 	beq.w	800701e <HAL_TIM_ConfigClockSource+0x172>
 8006f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f16:	d87f      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x16c>
 8006f18:	2b70      	cmp	r3, #112	@ 0x70
 8006f1a:	d01a      	beq.n	8006f52 <HAL_TIM_ConfigClockSource+0xa6>
 8006f1c:	2b70      	cmp	r3, #112	@ 0x70
 8006f1e:	d87b      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x16c>
 8006f20:	2b60      	cmp	r3, #96	@ 0x60
 8006f22:	d050      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x11a>
 8006f24:	2b60      	cmp	r3, #96	@ 0x60
 8006f26:	d877      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x16c>
 8006f28:	2b50      	cmp	r3, #80	@ 0x50
 8006f2a:	d03c      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0xfa>
 8006f2c:	2b50      	cmp	r3, #80	@ 0x50
 8006f2e:	d873      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x16c>
 8006f30:	2b40      	cmp	r3, #64	@ 0x40
 8006f32:	d058      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0x13a>
 8006f34:	2b40      	cmp	r3, #64	@ 0x40
 8006f36:	d86f      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x16c>
 8006f38:	2b30      	cmp	r3, #48	@ 0x30
 8006f3a:	d064      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0x15a>
 8006f3c:	2b30      	cmp	r3, #48	@ 0x30
 8006f3e:	d86b      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x16c>
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	d060      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0x15a>
 8006f44:	2b20      	cmp	r3, #32
 8006f46:	d867      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x16c>
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d05c      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0x15a>
 8006f4c:	2b10      	cmp	r3, #16
 8006f4e:	d05a      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0x15a>
 8006f50:	e062      	b.n	8007018 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f62:	f000 fc0d 	bl	8007780 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006f74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	609a      	str	r2, [r3, #8]
      break;
 8006f7e:	e04f      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f90:	f000 fbf6 	bl	8007780 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689a      	ldr	r2, [r3, #8]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fa2:	609a      	str	r2, [r3, #8]
      break;
 8006fa4:	e03c      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f000 fb6a 	bl	800768c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2150      	movs	r1, #80	@ 0x50
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 fbc3 	bl	800774a <TIM_ITRx_SetConfig>
      break;
 8006fc4:	e02c      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f000 fb89 	bl	80076ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2160      	movs	r1, #96	@ 0x60
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 fbb3 	bl	800774a <TIM_ITRx_SetConfig>
      break;
 8006fe4:	e01c      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f000 fb4a 	bl	800768c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2140      	movs	r1, #64	@ 0x40
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 fba3 	bl	800774a <TIM_ITRx_SetConfig>
      break;
 8007004:	e00c      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4619      	mov	r1, r3
 8007010:	4610      	mov	r0, r2
 8007012:	f000 fb9a 	bl	800774a <TIM_ITRx_SetConfig>
      break;
 8007016:	e003      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	73fb      	strb	r3, [r7, #15]
      break;
 800701c:	e000      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800701e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007030:	7bfb      	ldrb	r3, [r7, #15]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	fffeff88 	.word	0xfffeff88

08007040 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a40      	ldr	r2, [pc, #256]	@ (80071a4 <TIM_Base_SetConfig+0x114>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d013      	beq.n	80070d0 <TIM_Base_SetConfig+0x40>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ae:	d00f      	beq.n	80070d0 <TIM_Base_SetConfig+0x40>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a3d      	ldr	r2, [pc, #244]	@ (80071a8 <TIM_Base_SetConfig+0x118>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d00b      	beq.n	80070d0 <TIM_Base_SetConfig+0x40>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a3c      	ldr	r2, [pc, #240]	@ (80071ac <TIM_Base_SetConfig+0x11c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d007      	beq.n	80070d0 <TIM_Base_SetConfig+0x40>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a3b      	ldr	r2, [pc, #236]	@ (80071b0 <TIM_Base_SetConfig+0x120>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d003      	beq.n	80070d0 <TIM_Base_SetConfig+0x40>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a3a      	ldr	r2, [pc, #232]	@ (80071b4 <TIM_Base_SetConfig+0x124>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d108      	bne.n	80070e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	4313      	orrs	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a2f      	ldr	r2, [pc, #188]	@ (80071a4 <TIM_Base_SetConfig+0x114>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d02b      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070f0:	d027      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a2c      	ldr	r2, [pc, #176]	@ (80071a8 <TIM_Base_SetConfig+0x118>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d023      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a2b      	ldr	r2, [pc, #172]	@ (80071ac <TIM_Base_SetConfig+0x11c>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d01f      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a2a      	ldr	r2, [pc, #168]	@ (80071b0 <TIM_Base_SetConfig+0x120>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d01b      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a29      	ldr	r2, [pc, #164]	@ (80071b4 <TIM_Base_SetConfig+0x124>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d017      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a28      	ldr	r2, [pc, #160]	@ (80071b8 <TIM_Base_SetConfig+0x128>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d013      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a27      	ldr	r2, [pc, #156]	@ (80071bc <TIM_Base_SetConfig+0x12c>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d00f      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a26      	ldr	r2, [pc, #152]	@ (80071c0 <TIM_Base_SetConfig+0x130>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d00b      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a25      	ldr	r2, [pc, #148]	@ (80071c4 <TIM_Base_SetConfig+0x134>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d007      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a24      	ldr	r2, [pc, #144]	@ (80071c8 <TIM_Base_SetConfig+0x138>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d003      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a23      	ldr	r2, [pc, #140]	@ (80071cc <TIM_Base_SetConfig+0x13c>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d108      	bne.n	8007154 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	4313      	orrs	r3, r2
 8007152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	4313      	orrs	r3, r2
 8007160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	689a      	ldr	r2, [r3, #8]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a0a      	ldr	r2, [pc, #40]	@ (80071a4 <TIM_Base_SetConfig+0x114>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d003      	beq.n	8007188 <TIM_Base_SetConfig+0xf8>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a0c      	ldr	r2, [pc, #48]	@ (80071b4 <TIM_Base_SetConfig+0x124>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d103      	bne.n	8007190 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	691a      	ldr	r2, [r3, #16]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	615a      	str	r2, [r3, #20]
}
 8007196:	bf00      	nop
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	40010000 	.word	0x40010000
 80071a8:	40000400 	.word	0x40000400
 80071ac:	40000800 	.word	0x40000800
 80071b0:	40000c00 	.word	0x40000c00
 80071b4:	40010400 	.word	0x40010400
 80071b8:	40014000 	.word	0x40014000
 80071bc:	40014400 	.word	0x40014400
 80071c0:	40014800 	.word	0x40014800
 80071c4:	40001800 	.word	0x40001800
 80071c8:	40001c00 	.word	0x40001c00
 80071cc:	40002000 	.word	0x40002000

080071d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b087      	sub	sp, #28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	f023 0201 	bic.w	r2, r3, #1
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	4b2b      	ldr	r3, [pc, #172]	@ (80072a8 <TIM_OC1_SetConfig+0xd8>)
 80071fc:	4013      	ands	r3, r2
 80071fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f023 0303 	bic.w	r3, r3, #3
 8007206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	4313      	orrs	r3, r2
 8007210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f023 0302 	bic.w	r3, r3, #2
 8007218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	4313      	orrs	r3, r2
 8007222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a21      	ldr	r2, [pc, #132]	@ (80072ac <TIM_OC1_SetConfig+0xdc>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d003      	beq.n	8007234 <TIM_OC1_SetConfig+0x64>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a20      	ldr	r2, [pc, #128]	@ (80072b0 <TIM_OC1_SetConfig+0xe0>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d10c      	bne.n	800724e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f023 0308 	bic.w	r3, r3, #8
 800723a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	4313      	orrs	r3, r2
 8007244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f023 0304 	bic.w	r3, r3, #4
 800724c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a16      	ldr	r2, [pc, #88]	@ (80072ac <TIM_OC1_SetConfig+0xdc>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d003      	beq.n	800725e <TIM_OC1_SetConfig+0x8e>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a15      	ldr	r2, [pc, #84]	@ (80072b0 <TIM_OC1_SetConfig+0xe0>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d111      	bne.n	8007282 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800726c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	4313      	orrs	r3, r2
 8007276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	4313      	orrs	r3, r2
 8007280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	621a      	str	r2, [r3, #32]
}
 800729c:	bf00      	nop
 800729e:	371c      	adds	r7, #28
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	fffeff8f 	.word	0xfffeff8f
 80072ac:	40010000 	.word	0x40010000
 80072b0:	40010400 	.word	0x40010400

080072b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	f023 0210 	bic.w	r2, r3, #16
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	4b2e      	ldr	r3, [pc, #184]	@ (8007398 <TIM_OC2_SetConfig+0xe4>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	021b      	lsls	r3, r3, #8
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f023 0320 	bic.w	r3, r3, #32
 80072fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	011b      	lsls	r3, r3, #4
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	4313      	orrs	r3, r2
 800730a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a23      	ldr	r2, [pc, #140]	@ (800739c <TIM_OC2_SetConfig+0xe8>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d003      	beq.n	800731c <TIM_OC2_SetConfig+0x68>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a22      	ldr	r2, [pc, #136]	@ (80073a0 <TIM_OC2_SetConfig+0xec>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d10d      	bne.n	8007338 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	011b      	lsls	r3, r3, #4
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	4313      	orrs	r3, r2
 800732e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007336:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a18      	ldr	r2, [pc, #96]	@ (800739c <TIM_OC2_SetConfig+0xe8>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d003      	beq.n	8007348 <TIM_OC2_SetConfig+0x94>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a17      	ldr	r2, [pc, #92]	@ (80073a0 <TIM_OC2_SetConfig+0xec>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d113      	bne.n	8007370 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800734e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007356:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	4313      	orrs	r3, r2
 8007362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	4313      	orrs	r3, r2
 800736e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	621a      	str	r2, [r3, #32]
}
 800738a:	bf00      	nop
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	feff8fff 	.word	0xfeff8fff
 800739c:	40010000 	.word	0x40010000
 80073a0:	40010400 	.word	0x40010400

080073a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	69db      	ldr	r3, [r3, #28]
 80073ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	4b2d      	ldr	r3, [pc, #180]	@ (8007484 <TIM_OC3_SetConfig+0xe0>)
 80073d0:	4013      	ands	r3, r2
 80073d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f023 0303 	bic.w	r3, r3, #3
 80073da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80073ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	021b      	lsls	r3, r3, #8
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a22      	ldr	r2, [pc, #136]	@ (8007488 <TIM_OC3_SetConfig+0xe4>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d003      	beq.n	800740a <TIM_OC3_SetConfig+0x66>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a21      	ldr	r2, [pc, #132]	@ (800748c <TIM_OC3_SetConfig+0xe8>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d10d      	bne.n	8007426 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007410:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	021b      	lsls	r3, r3, #8
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	4313      	orrs	r3, r2
 800741c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a17      	ldr	r2, [pc, #92]	@ (8007488 <TIM_OC3_SetConfig+0xe4>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d003      	beq.n	8007436 <TIM_OC3_SetConfig+0x92>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a16      	ldr	r2, [pc, #88]	@ (800748c <TIM_OC3_SetConfig+0xe8>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d113      	bne.n	800745e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800743c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	011b      	lsls	r3, r3, #4
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	4313      	orrs	r3, r2
 8007450:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	011b      	lsls	r3, r3, #4
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	4313      	orrs	r3, r2
 800745c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	697a      	ldr	r2, [r7, #20]
 8007476:	621a      	str	r2, [r3, #32]
}
 8007478:	bf00      	nop
 800747a:	371c      	adds	r7, #28
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr
 8007484:	fffeff8f 	.word	0xfffeff8f
 8007488:	40010000 	.word	0x40010000
 800748c:	40010400 	.word	0x40010400

08007490 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	4b1e      	ldr	r3, [pc, #120]	@ (8007534 <TIM_OC4_SetConfig+0xa4>)
 80074bc:	4013      	ands	r3, r2
 80074be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	021b      	lsls	r3, r3, #8
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	031b      	lsls	r3, r3, #12
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a13      	ldr	r2, [pc, #76]	@ (8007538 <TIM_OC4_SetConfig+0xa8>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d003      	beq.n	80074f8 <TIM_OC4_SetConfig+0x68>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a12      	ldr	r2, [pc, #72]	@ (800753c <TIM_OC4_SetConfig+0xac>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d109      	bne.n	800750c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	019b      	lsls	r3, r3, #6
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	4313      	orrs	r3, r2
 800750a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	621a      	str	r2, [r3, #32]
}
 8007526:	bf00      	nop
 8007528:	371c      	adds	r7, #28
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	feff8fff 	.word	0xfeff8fff
 8007538:	40010000 	.word	0x40010000
 800753c:	40010400 	.word	0x40010400

08007540 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	4b1b      	ldr	r3, [pc, #108]	@ (80075d8 <TIM_OC5_SetConfig+0x98>)
 800756c:	4013      	ands	r3, r2
 800756e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	4313      	orrs	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007580:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	041b      	lsls	r3, r3, #16
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	4313      	orrs	r3, r2
 800758c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a12      	ldr	r2, [pc, #72]	@ (80075dc <TIM_OC5_SetConfig+0x9c>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d003      	beq.n	800759e <TIM_OC5_SetConfig+0x5e>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a11      	ldr	r2, [pc, #68]	@ (80075e0 <TIM_OC5_SetConfig+0xa0>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d109      	bne.n	80075b2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	021b      	lsls	r3, r3, #8
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	621a      	str	r2, [r3, #32]
}
 80075cc:	bf00      	nop
 80075ce:	371c      	adds	r7, #28
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	fffeff8f 	.word	0xfffeff8f
 80075dc:	40010000 	.word	0x40010000
 80075e0:	40010400 	.word	0x40010400

080075e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800760a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	4b1c      	ldr	r3, [pc, #112]	@ (8007680 <TIM_OC6_SetConfig+0x9c>)
 8007610:	4013      	ands	r3, r2
 8007612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	021b      	lsls	r3, r3, #8
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	4313      	orrs	r3, r2
 800761e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007626:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	051b      	lsls	r3, r3, #20
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	4313      	orrs	r3, r2
 8007632:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a13      	ldr	r2, [pc, #76]	@ (8007684 <TIM_OC6_SetConfig+0xa0>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d003      	beq.n	8007644 <TIM_OC6_SetConfig+0x60>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a12      	ldr	r2, [pc, #72]	@ (8007688 <TIM_OC6_SetConfig+0xa4>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d109      	bne.n	8007658 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800764a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	029b      	lsls	r3, r3, #10
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	4313      	orrs	r3, r2
 8007656:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	621a      	str	r2, [r3, #32]
}
 8007672:	bf00      	nop
 8007674:	371c      	adds	r7, #28
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	feff8fff 	.word	0xfeff8fff
 8007684:	40010000 	.word	0x40010000
 8007688:	40010400 	.word	0x40010400

0800768c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6a1b      	ldr	r3, [r3, #32]
 800769c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	f023 0201 	bic.w	r2, r3, #1
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	011b      	lsls	r3, r3, #4
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	4313      	orrs	r3, r2
 80076c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f023 030a 	bic.w	r3, r3, #10
 80076c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	621a      	str	r2, [r3, #32]
}
 80076de:	bf00      	nop
 80076e0:	371c      	adds	r7, #28
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b087      	sub	sp, #28
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	60f8      	str	r0, [r7, #12]
 80076f2:	60b9      	str	r1, [r7, #8]
 80076f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	f023 0210 	bic.w	r2, r3, #16
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6a1b      	ldr	r3, [r3, #32]
 800770c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007714:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	031b      	lsls	r3, r3, #12
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	4313      	orrs	r3, r2
 800771e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007726:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	011b      	lsls	r3, r3, #4
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	4313      	orrs	r3, r2
 8007730:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	621a      	str	r2, [r3, #32]
}
 800773e:	bf00      	nop
 8007740:	371c      	adds	r7, #28
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800774a:	b480      	push	{r7}
 800774c:	b085      	sub	sp, #20
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007760:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4313      	orrs	r3, r2
 8007768:	f043 0307 	orr.w	r3, r3, #7
 800776c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	609a      	str	r2, [r3, #8]
}
 8007774:	bf00      	nop
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007780:	b480      	push	{r7}
 8007782:	b087      	sub	sp, #28
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
 800778c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800779a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	021a      	lsls	r2, r3, #8
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	431a      	orrs	r2, r3
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	609a      	str	r2, [r3, #8]
}
 80077b4:	bf00      	nop
 80077b6:	371c      	adds	r7, #28
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	f003 031f 	and.w	r3, r3, #31
 80077d2:	2201      	movs	r2, #1
 80077d4:	fa02 f303 	lsl.w	r3, r2, r3
 80077d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6a1a      	ldr	r2, [r3, #32]
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	43db      	mvns	r3, r3
 80077e2:	401a      	ands	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6a1a      	ldr	r2, [r3, #32]
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	f003 031f 	and.w	r3, r3, #31
 80077f2:	6879      	ldr	r1, [r7, #4]
 80077f4:	fa01 f303 	lsl.w	r3, r1, r3
 80077f8:	431a      	orrs	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	621a      	str	r2, [r3, #32]
}
 80077fe:	bf00      	nop
 8007800:	371c      	adds	r7, #28
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
	...

0800780c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800781c:	2b01      	cmp	r3, #1
 800781e:	d101      	bne.n	8007824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007820:	2302      	movs	r3, #2
 8007822:	e06d      	b.n	8007900 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2202      	movs	r2, #2
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a30      	ldr	r2, [pc, #192]	@ (800790c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d004      	beq.n	8007858 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a2f      	ldr	r2, [pc, #188]	@ (8007910 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d108      	bne.n	800786a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800785e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	4313      	orrs	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007870:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	4313      	orrs	r3, r2
 800787a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a20      	ldr	r2, [pc, #128]	@ (800790c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d022      	beq.n	80078d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007896:	d01d      	beq.n	80078d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a1d      	ldr	r2, [pc, #116]	@ (8007914 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d018      	beq.n	80078d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a1c      	ldr	r2, [pc, #112]	@ (8007918 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d013      	beq.n	80078d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a1a      	ldr	r2, [pc, #104]	@ (800791c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d00e      	beq.n	80078d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a15      	ldr	r2, [pc, #84]	@ (8007910 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d009      	beq.n	80078d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a16      	ldr	r2, [pc, #88]	@ (8007920 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d004      	beq.n	80078d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a15      	ldr	r2, [pc, #84]	@ (8007924 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d10c      	bne.n	80078ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	40010000 	.word	0x40010000
 8007910:	40010400 	.word	0x40010400
 8007914:	40000400 	.word	0x40000400
 8007918:	40000800 	.word	0x40000800
 800791c:	40000c00 	.word	0x40000c00
 8007920:	40014000 	.word	0x40014000
 8007924:	40001800 	.word	0x40001800

08007928 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <atoi>:
 8007964:	220a      	movs	r2, #10
 8007966:	2100      	movs	r1, #0
 8007968:	f000 b87a 	b.w	8007a60 <strtol>

0800796c <_strtol_l.constprop.0>:
 800796c:	2b24      	cmp	r3, #36	@ 0x24
 800796e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007972:	4686      	mov	lr, r0
 8007974:	4690      	mov	r8, r2
 8007976:	d801      	bhi.n	800797c <_strtol_l.constprop.0+0x10>
 8007978:	2b01      	cmp	r3, #1
 800797a:	d106      	bne.n	800798a <_strtol_l.constprop.0+0x1e>
 800797c:	f000 f8b6 	bl	8007aec <__errno>
 8007980:	2316      	movs	r3, #22
 8007982:	6003      	str	r3, [r0, #0]
 8007984:	2000      	movs	r0, #0
 8007986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800798a:	4834      	ldr	r0, [pc, #208]	@ (8007a5c <_strtol_l.constprop.0+0xf0>)
 800798c:	460d      	mov	r5, r1
 800798e:	462a      	mov	r2, r5
 8007990:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007994:	5d06      	ldrb	r6, [r0, r4]
 8007996:	f016 0608 	ands.w	r6, r6, #8
 800799a:	d1f8      	bne.n	800798e <_strtol_l.constprop.0+0x22>
 800799c:	2c2d      	cmp	r4, #45	@ 0x2d
 800799e:	d12d      	bne.n	80079fc <_strtol_l.constprop.0+0x90>
 80079a0:	782c      	ldrb	r4, [r5, #0]
 80079a2:	2601      	movs	r6, #1
 80079a4:	1c95      	adds	r5, r2, #2
 80079a6:	f033 0210 	bics.w	r2, r3, #16
 80079aa:	d109      	bne.n	80079c0 <_strtol_l.constprop.0+0x54>
 80079ac:	2c30      	cmp	r4, #48	@ 0x30
 80079ae:	d12a      	bne.n	8007a06 <_strtol_l.constprop.0+0x9a>
 80079b0:	782a      	ldrb	r2, [r5, #0]
 80079b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80079b6:	2a58      	cmp	r2, #88	@ 0x58
 80079b8:	d125      	bne.n	8007a06 <_strtol_l.constprop.0+0x9a>
 80079ba:	786c      	ldrb	r4, [r5, #1]
 80079bc:	2310      	movs	r3, #16
 80079be:	3502      	adds	r5, #2
 80079c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80079c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80079c8:	2200      	movs	r2, #0
 80079ca:	fbbc f9f3 	udiv	r9, ip, r3
 80079ce:	4610      	mov	r0, r2
 80079d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80079d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80079d8:	2f09      	cmp	r7, #9
 80079da:	d81b      	bhi.n	8007a14 <_strtol_l.constprop.0+0xa8>
 80079dc:	463c      	mov	r4, r7
 80079de:	42a3      	cmp	r3, r4
 80079e0:	dd27      	ble.n	8007a32 <_strtol_l.constprop.0+0xc6>
 80079e2:	1c57      	adds	r7, r2, #1
 80079e4:	d007      	beq.n	80079f6 <_strtol_l.constprop.0+0x8a>
 80079e6:	4581      	cmp	r9, r0
 80079e8:	d320      	bcc.n	8007a2c <_strtol_l.constprop.0+0xc0>
 80079ea:	d101      	bne.n	80079f0 <_strtol_l.constprop.0+0x84>
 80079ec:	45a2      	cmp	sl, r4
 80079ee:	db1d      	blt.n	8007a2c <_strtol_l.constprop.0+0xc0>
 80079f0:	fb00 4003 	mla	r0, r0, r3, r4
 80079f4:	2201      	movs	r2, #1
 80079f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079fa:	e7eb      	b.n	80079d4 <_strtol_l.constprop.0+0x68>
 80079fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80079fe:	bf04      	itt	eq
 8007a00:	782c      	ldrbeq	r4, [r5, #0]
 8007a02:	1c95      	addeq	r5, r2, #2
 8007a04:	e7cf      	b.n	80079a6 <_strtol_l.constprop.0+0x3a>
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1da      	bne.n	80079c0 <_strtol_l.constprop.0+0x54>
 8007a0a:	2c30      	cmp	r4, #48	@ 0x30
 8007a0c:	bf0c      	ite	eq
 8007a0e:	2308      	moveq	r3, #8
 8007a10:	230a      	movne	r3, #10
 8007a12:	e7d5      	b.n	80079c0 <_strtol_l.constprop.0+0x54>
 8007a14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007a18:	2f19      	cmp	r7, #25
 8007a1a:	d801      	bhi.n	8007a20 <_strtol_l.constprop.0+0xb4>
 8007a1c:	3c37      	subs	r4, #55	@ 0x37
 8007a1e:	e7de      	b.n	80079de <_strtol_l.constprop.0+0x72>
 8007a20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007a24:	2f19      	cmp	r7, #25
 8007a26:	d804      	bhi.n	8007a32 <_strtol_l.constprop.0+0xc6>
 8007a28:	3c57      	subs	r4, #87	@ 0x57
 8007a2a:	e7d8      	b.n	80079de <_strtol_l.constprop.0+0x72>
 8007a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a30:	e7e1      	b.n	80079f6 <_strtol_l.constprop.0+0x8a>
 8007a32:	1c53      	adds	r3, r2, #1
 8007a34:	d108      	bne.n	8007a48 <_strtol_l.constprop.0+0xdc>
 8007a36:	2322      	movs	r3, #34	@ 0x22
 8007a38:	f8ce 3000 	str.w	r3, [lr]
 8007a3c:	4660      	mov	r0, ip
 8007a3e:	f1b8 0f00 	cmp.w	r8, #0
 8007a42:	d0a0      	beq.n	8007986 <_strtol_l.constprop.0+0x1a>
 8007a44:	1e69      	subs	r1, r5, #1
 8007a46:	e006      	b.n	8007a56 <_strtol_l.constprop.0+0xea>
 8007a48:	b106      	cbz	r6, 8007a4c <_strtol_l.constprop.0+0xe0>
 8007a4a:	4240      	negs	r0, r0
 8007a4c:	f1b8 0f00 	cmp.w	r8, #0
 8007a50:	d099      	beq.n	8007986 <_strtol_l.constprop.0+0x1a>
 8007a52:	2a00      	cmp	r2, #0
 8007a54:	d1f6      	bne.n	8007a44 <_strtol_l.constprop.0+0xd8>
 8007a56:	f8c8 1000 	str.w	r1, [r8]
 8007a5a:	e794      	b.n	8007986 <_strtol_l.constprop.0+0x1a>
 8007a5c:	0800869d 	.word	0x0800869d

08007a60 <strtol>:
 8007a60:	4613      	mov	r3, r2
 8007a62:	460a      	mov	r2, r1
 8007a64:	4601      	mov	r1, r0
 8007a66:	4802      	ldr	r0, [pc, #8]	@ (8007a70 <strtol+0x10>)
 8007a68:	6800      	ldr	r0, [r0, #0]
 8007a6a:	f7ff bf7f 	b.w	800796c <_strtol_l.constprop.0>
 8007a6e:	bf00      	nop
 8007a70:	20000114 	.word	0x20000114

08007a74 <sniprintf>:
 8007a74:	b40c      	push	{r2, r3}
 8007a76:	b530      	push	{r4, r5, lr}
 8007a78:	4b17      	ldr	r3, [pc, #92]	@ (8007ad8 <sniprintf+0x64>)
 8007a7a:	1e0c      	subs	r4, r1, #0
 8007a7c:	681d      	ldr	r5, [r3, #0]
 8007a7e:	b09d      	sub	sp, #116	@ 0x74
 8007a80:	da08      	bge.n	8007a94 <sniprintf+0x20>
 8007a82:	238b      	movs	r3, #139	@ 0x8b
 8007a84:	602b      	str	r3, [r5, #0]
 8007a86:	f04f 30ff 	mov.w	r0, #4294967295
 8007a8a:	b01d      	add	sp, #116	@ 0x74
 8007a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a90:	b002      	add	sp, #8
 8007a92:	4770      	bx	lr
 8007a94:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007a98:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007a9c:	bf14      	ite	ne
 8007a9e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007aa2:	4623      	moveq	r3, r4
 8007aa4:	9304      	str	r3, [sp, #16]
 8007aa6:	9307      	str	r3, [sp, #28]
 8007aa8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007aac:	9002      	str	r0, [sp, #8]
 8007aae:	9006      	str	r0, [sp, #24]
 8007ab0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007ab4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007ab6:	ab21      	add	r3, sp, #132	@ 0x84
 8007ab8:	a902      	add	r1, sp, #8
 8007aba:	4628      	mov	r0, r5
 8007abc:	9301      	str	r3, [sp, #4]
 8007abe:	f000 f995 	bl	8007dec <_svfiprintf_r>
 8007ac2:	1c43      	adds	r3, r0, #1
 8007ac4:	bfbc      	itt	lt
 8007ac6:	238b      	movlt	r3, #139	@ 0x8b
 8007ac8:	602b      	strlt	r3, [r5, #0]
 8007aca:	2c00      	cmp	r4, #0
 8007acc:	d0dd      	beq.n	8007a8a <sniprintf+0x16>
 8007ace:	9b02      	ldr	r3, [sp, #8]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	701a      	strb	r2, [r3, #0]
 8007ad4:	e7d9      	b.n	8007a8a <sniprintf+0x16>
 8007ad6:	bf00      	nop
 8007ad8:	20000114 	.word	0x20000114

08007adc <memset>:
 8007adc:	4402      	add	r2, r0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d100      	bne.n	8007ae6 <memset+0xa>
 8007ae4:	4770      	bx	lr
 8007ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8007aea:	e7f9      	b.n	8007ae0 <memset+0x4>

08007aec <__errno>:
 8007aec:	4b01      	ldr	r3, [pc, #4]	@ (8007af4 <__errno+0x8>)
 8007aee:	6818      	ldr	r0, [r3, #0]
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	20000114 	.word	0x20000114

08007af8 <__libc_init_array>:
 8007af8:	b570      	push	{r4, r5, r6, lr}
 8007afa:	4d0d      	ldr	r5, [pc, #52]	@ (8007b30 <__libc_init_array+0x38>)
 8007afc:	4c0d      	ldr	r4, [pc, #52]	@ (8007b34 <__libc_init_array+0x3c>)
 8007afe:	1b64      	subs	r4, r4, r5
 8007b00:	10a4      	asrs	r4, r4, #2
 8007b02:	2600      	movs	r6, #0
 8007b04:	42a6      	cmp	r6, r4
 8007b06:	d109      	bne.n	8007b1c <__libc_init_array+0x24>
 8007b08:	4d0b      	ldr	r5, [pc, #44]	@ (8007b38 <__libc_init_array+0x40>)
 8007b0a:	4c0c      	ldr	r4, [pc, #48]	@ (8007b3c <__libc_init_array+0x44>)
 8007b0c:	f000 fce4 	bl	80084d8 <_init>
 8007b10:	1b64      	subs	r4, r4, r5
 8007b12:	10a4      	asrs	r4, r4, #2
 8007b14:	2600      	movs	r6, #0
 8007b16:	42a6      	cmp	r6, r4
 8007b18:	d105      	bne.n	8007b26 <__libc_init_array+0x2e>
 8007b1a:	bd70      	pop	{r4, r5, r6, pc}
 8007b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b20:	4798      	blx	r3
 8007b22:	3601      	adds	r6, #1
 8007b24:	e7ee      	b.n	8007b04 <__libc_init_array+0xc>
 8007b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b2a:	4798      	blx	r3
 8007b2c:	3601      	adds	r6, #1
 8007b2e:	e7f2      	b.n	8007b16 <__libc_init_array+0x1e>
 8007b30:	080087d8 	.word	0x080087d8
 8007b34:	080087d8 	.word	0x080087d8
 8007b38:	080087d8 	.word	0x080087d8
 8007b3c:	080087dc 	.word	0x080087dc

08007b40 <__retarget_lock_acquire_recursive>:
 8007b40:	4770      	bx	lr

08007b42 <__retarget_lock_release_recursive>:
 8007b42:	4770      	bx	lr

08007b44 <_free_r>:
 8007b44:	b538      	push	{r3, r4, r5, lr}
 8007b46:	4605      	mov	r5, r0
 8007b48:	2900      	cmp	r1, #0
 8007b4a:	d041      	beq.n	8007bd0 <_free_r+0x8c>
 8007b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b50:	1f0c      	subs	r4, r1, #4
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	bfb8      	it	lt
 8007b56:	18e4      	addlt	r4, r4, r3
 8007b58:	f000 f8e0 	bl	8007d1c <__malloc_lock>
 8007b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8007bd4 <_free_r+0x90>)
 8007b5e:	6813      	ldr	r3, [r2, #0]
 8007b60:	b933      	cbnz	r3, 8007b70 <_free_r+0x2c>
 8007b62:	6063      	str	r3, [r4, #4]
 8007b64:	6014      	str	r4, [r2, #0]
 8007b66:	4628      	mov	r0, r5
 8007b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b6c:	f000 b8dc 	b.w	8007d28 <__malloc_unlock>
 8007b70:	42a3      	cmp	r3, r4
 8007b72:	d908      	bls.n	8007b86 <_free_r+0x42>
 8007b74:	6820      	ldr	r0, [r4, #0]
 8007b76:	1821      	adds	r1, r4, r0
 8007b78:	428b      	cmp	r3, r1
 8007b7a:	bf01      	itttt	eq
 8007b7c:	6819      	ldreq	r1, [r3, #0]
 8007b7e:	685b      	ldreq	r3, [r3, #4]
 8007b80:	1809      	addeq	r1, r1, r0
 8007b82:	6021      	streq	r1, [r4, #0]
 8007b84:	e7ed      	b.n	8007b62 <_free_r+0x1e>
 8007b86:	461a      	mov	r2, r3
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	b10b      	cbz	r3, 8007b90 <_free_r+0x4c>
 8007b8c:	42a3      	cmp	r3, r4
 8007b8e:	d9fa      	bls.n	8007b86 <_free_r+0x42>
 8007b90:	6811      	ldr	r1, [r2, #0]
 8007b92:	1850      	adds	r0, r2, r1
 8007b94:	42a0      	cmp	r0, r4
 8007b96:	d10b      	bne.n	8007bb0 <_free_r+0x6c>
 8007b98:	6820      	ldr	r0, [r4, #0]
 8007b9a:	4401      	add	r1, r0
 8007b9c:	1850      	adds	r0, r2, r1
 8007b9e:	4283      	cmp	r3, r0
 8007ba0:	6011      	str	r1, [r2, #0]
 8007ba2:	d1e0      	bne.n	8007b66 <_free_r+0x22>
 8007ba4:	6818      	ldr	r0, [r3, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	6053      	str	r3, [r2, #4]
 8007baa:	4408      	add	r0, r1
 8007bac:	6010      	str	r0, [r2, #0]
 8007bae:	e7da      	b.n	8007b66 <_free_r+0x22>
 8007bb0:	d902      	bls.n	8007bb8 <_free_r+0x74>
 8007bb2:	230c      	movs	r3, #12
 8007bb4:	602b      	str	r3, [r5, #0]
 8007bb6:	e7d6      	b.n	8007b66 <_free_r+0x22>
 8007bb8:	6820      	ldr	r0, [r4, #0]
 8007bba:	1821      	adds	r1, r4, r0
 8007bbc:	428b      	cmp	r3, r1
 8007bbe:	bf04      	itt	eq
 8007bc0:	6819      	ldreq	r1, [r3, #0]
 8007bc2:	685b      	ldreq	r3, [r3, #4]
 8007bc4:	6063      	str	r3, [r4, #4]
 8007bc6:	bf04      	itt	eq
 8007bc8:	1809      	addeq	r1, r1, r0
 8007bca:	6021      	streq	r1, [r4, #0]
 8007bcc:	6054      	str	r4, [r2, #4]
 8007bce:	e7ca      	b.n	8007b66 <_free_r+0x22>
 8007bd0:	bd38      	pop	{r3, r4, r5, pc}
 8007bd2:	bf00      	nop
 8007bd4:	20000508 	.word	0x20000508

08007bd8 <sbrk_aligned>:
 8007bd8:	b570      	push	{r4, r5, r6, lr}
 8007bda:	4e0f      	ldr	r6, [pc, #60]	@ (8007c18 <sbrk_aligned+0x40>)
 8007bdc:	460c      	mov	r4, r1
 8007bde:	6831      	ldr	r1, [r6, #0]
 8007be0:	4605      	mov	r5, r0
 8007be2:	b911      	cbnz	r1, 8007bea <sbrk_aligned+0x12>
 8007be4:	f000 fba6 	bl	8008334 <_sbrk_r>
 8007be8:	6030      	str	r0, [r6, #0]
 8007bea:	4621      	mov	r1, r4
 8007bec:	4628      	mov	r0, r5
 8007bee:	f000 fba1 	bl	8008334 <_sbrk_r>
 8007bf2:	1c43      	adds	r3, r0, #1
 8007bf4:	d103      	bne.n	8007bfe <sbrk_aligned+0x26>
 8007bf6:	f04f 34ff 	mov.w	r4, #4294967295
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	bd70      	pop	{r4, r5, r6, pc}
 8007bfe:	1cc4      	adds	r4, r0, #3
 8007c00:	f024 0403 	bic.w	r4, r4, #3
 8007c04:	42a0      	cmp	r0, r4
 8007c06:	d0f8      	beq.n	8007bfa <sbrk_aligned+0x22>
 8007c08:	1a21      	subs	r1, r4, r0
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	f000 fb92 	bl	8008334 <_sbrk_r>
 8007c10:	3001      	adds	r0, #1
 8007c12:	d1f2      	bne.n	8007bfa <sbrk_aligned+0x22>
 8007c14:	e7ef      	b.n	8007bf6 <sbrk_aligned+0x1e>
 8007c16:	bf00      	nop
 8007c18:	20000504 	.word	0x20000504

08007c1c <_malloc_r>:
 8007c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c20:	1ccd      	adds	r5, r1, #3
 8007c22:	f025 0503 	bic.w	r5, r5, #3
 8007c26:	3508      	adds	r5, #8
 8007c28:	2d0c      	cmp	r5, #12
 8007c2a:	bf38      	it	cc
 8007c2c:	250c      	movcc	r5, #12
 8007c2e:	2d00      	cmp	r5, #0
 8007c30:	4606      	mov	r6, r0
 8007c32:	db01      	blt.n	8007c38 <_malloc_r+0x1c>
 8007c34:	42a9      	cmp	r1, r5
 8007c36:	d904      	bls.n	8007c42 <_malloc_r+0x26>
 8007c38:	230c      	movs	r3, #12
 8007c3a:	6033      	str	r3, [r6, #0]
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d18 <_malloc_r+0xfc>
 8007c46:	f000 f869 	bl	8007d1c <__malloc_lock>
 8007c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8007c4e:	461c      	mov	r4, r3
 8007c50:	bb44      	cbnz	r4, 8007ca4 <_malloc_r+0x88>
 8007c52:	4629      	mov	r1, r5
 8007c54:	4630      	mov	r0, r6
 8007c56:	f7ff ffbf 	bl	8007bd8 <sbrk_aligned>
 8007c5a:	1c43      	adds	r3, r0, #1
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	d158      	bne.n	8007d12 <_malloc_r+0xf6>
 8007c60:	f8d8 4000 	ldr.w	r4, [r8]
 8007c64:	4627      	mov	r7, r4
 8007c66:	2f00      	cmp	r7, #0
 8007c68:	d143      	bne.n	8007cf2 <_malloc_r+0xd6>
 8007c6a:	2c00      	cmp	r4, #0
 8007c6c:	d04b      	beq.n	8007d06 <_malloc_r+0xea>
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	4639      	mov	r1, r7
 8007c72:	4630      	mov	r0, r6
 8007c74:	eb04 0903 	add.w	r9, r4, r3
 8007c78:	f000 fb5c 	bl	8008334 <_sbrk_r>
 8007c7c:	4581      	cmp	r9, r0
 8007c7e:	d142      	bne.n	8007d06 <_malloc_r+0xea>
 8007c80:	6821      	ldr	r1, [r4, #0]
 8007c82:	1a6d      	subs	r5, r5, r1
 8007c84:	4629      	mov	r1, r5
 8007c86:	4630      	mov	r0, r6
 8007c88:	f7ff ffa6 	bl	8007bd8 <sbrk_aligned>
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	d03a      	beq.n	8007d06 <_malloc_r+0xea>
 8007c90:	6823      	ldr	r3, [r4, #0]
 8007c92:	442b      	add	r3, r5
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	f8d8 3000 	ldr.w	r3, [r8]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	bb62      	cbnz	r2, 8007cf8 <_malloc_r+0xdc>
 8007c9e:	f8c8 7000 	str.w	r7, [r8]
 8007ca2:	e00f      	b.n	8007cc4 <_malloc_r+0xa8>
 8007ca4:	6822      	ldr	r2, [r4, #0]
 8007ca6:	1b52      	subs	r2, r2, r5
 8007ca8:	d420      	bmi.n	8007cec <_malloc_r+0xd0>
 8007caa:	2a0b      	cmp	r2, #11
 8007cac:	d917      	bls.n	8007cde <_malloc_r+0xc2>
 8007cae:	1961      	adds	r1, r4, r5
 8007cb0:	42a3      	cmp	r3, r4
 8007cb2:	6025      	str	r5, [r4, #0]
 8007cb4:	bf18      	it	ne
 8007cb6:	6059      	strne	r1, [r3, #4]
 8007cb8:	6863      	ldr	r3, [r4, #4]
 8007cba:	bf08      	it	eq
 8007cbc:	f8c8 1000 	streq.w	r1, [r8]
 8007cc0:	5162      	str	r2, [r4, r5]
 8007cc2:	604b      	str	r3, [r1, #4]
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	f000 f82f 	bl	8007d28 <__malloc_unlock>
 8007cca:	f104 000b 	add.w	r0, r4, #11
 8007cce:	1d23      	adds	r3, r4, #4
 8007cd0:	f020 0007 	bic.w	r0, r0, #7
 8007cd4:	1ac2      	subs	r2, r0, r3
 8007cd6:	bf1c      	itt	ne
 8007cd8:	1a1b      	subne	r3, r3, r0
 8007cda:	50a3      	strne	r3, [r4, r2]
 8007cdc:	e7af      	b.n	8007c3e <_malloc_r+0x22>
 8007cde:	6862      	ldr	r2, [r4, #4]
 8007ce0:	42a3      	cmp	r3, r4
 8007ce2:	bf0c      	ite	eq
 8007ce4:	f8c8 2000 	streq.w	r2, [r8]
 8007ce8:	605a      	strne	r2, [r3, #4]
 8007cea:	e7eb      	b.n	8007cc4 <_malloc_r+0xa8>
 8007cec:	4623      	mov	r3, r4
 8007cee:	6864      	ldr	r4, [r4, #4]
 8007cf0:	e7ae      	b.n	8007c50 <_malloc_r+0x34>
 8007cf2:	463c      	mov	r4, r7
 8007cf4:	687f      	ldr	r7, [r7, #4]
 8007cf6:	e7b6      	b.n	8007c66 <_malloc_r+0x4a>
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	42a3      	cmp	r3, r4
 8007cfe:	d1fb      	bne.n	8007cf8 <_malloc_r+0xdc>
 8007d00:	2300      	movs	r3, #0
 8007d02:	6053      	str	r3, [r2, #4]
 8007d04:	e7de      	b.n	8007cc4 <_malloc_r+0xa8>
 8007d06:	230c      	movs	r3, #12
 8007d08:	6033      	str	r3, [r6, #0]
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	f000 f80c 	bl	8007d28 <__malloc_unlock>
 8007d10:	e794      	b.n	8007c3c <_malloc_r+0x20>
 8007d12:	6005      	str	r5, [r0, #0]
 8007d14:	e7d6      	b.n	8007cc4 <_malloc_r+0xa8>
 8007d16:	bf00      	nop
 8007d18:	20000508 	.word	0x20000508

08007d1c <__malloc_lock>:
 8007d1c:	4801      	ldr	r0, [pc, #4]	@ (8007d24 <__malloc_lock+0x8>)
 8007d1e:	f7ff bf0f 	b.w	8007b40 <__retarget_lock_acquire_recursive>
 8007d22:	bf00      	nop
 8007d24:	20000500 	.word	0x20000500

08007d28 <__malloc_unlock>:
 8007d28:	4801      	ldr	r0, [pc, #4]	@ (8007d30 <__malloc_unlock+0x8>)
 8007d2a:	f7ff bf0a 	b.w	8007b42 <__retarget_lock_release_recursive>
 8007d2e:	bf00      	nop
 8007d30:	20000500 	.word	0x20000500

08007d34 <__ssputs_r>:
 8007d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d38:	688e      	ldr	r6, [r1, #8]
 8007d3a:	461f      	mov	r7, r3
 8007d3c:	42be      	cmp	r6, r7
 8007d3e:	680b      	ldr	r3, [r1, #0]
 8007d40:	4682      	mov	sl, r0
 8007d42:	460c      	mov	r4, r1
 8007d44:	4690      	mov	r8, r2
 8007d46:	d82d      	bhi.n	8007da4 <__ssputs_r+0x70>
 8007d48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d50:	d026      	beq.n	8007da0 <__ssputs_r+0x6c>
 8007d52:	6965      	ldr	r5, [r4, #20]
 8007d54:	6909      	ldr	r1, [r1, #16]
 8007d56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d5a:	eba3 0901 	sub.w	r9, r3, r1
 8007d5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d62:	1c7b      	adds	r3, r7, #1
 8007d64:	444b      	add	r3, r9
 8007d66:	106d      	asrs	r5, r5, #1
 8007d68:	429d      	cmp	r5, r3
 8007d6a:	bf38      	it	cc
 8007d6c:	461d      	movcc	r5, r3
 8007d6e:	0553      	lsls	r3, r2, #21
 8007d70:	d527      	bpl.n	8007dc2 <__ssputs_r+0x8e>
 8007d72:	4629      	mov	r1, r5
 8007d74:	f7ff ff52 	bl	8007c1c <_malloc_r>
 8007d78:	4606      	mov	r6, r0
 8007d7a:	b360      	cbz	r0, 8007dd6 <__ssputs_r+0xa2>
 8007d7c:	6921      	ldr	r1, [r4, #16]
 8007d7e:	464a      	mov	r2, r9
 8007d80:	f000 fae8 	bl	8008354 <memcpy>
 8007d84:	89a3      	ldrh	r3, [r4, #12]
 8007d86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d8e:	81a3      	strh	r3, [r4, #12]
 8007d90:	6126      	str	r6, [r4, #16]
 8007d92:	6165      	str	r5, [r4, #20]
 8007d94:	444e      	add	r6, r9
 8007d96:	eba5 0509 	sub.w	r5, r5, r9
 8007d9a:	6026      	str	r6, [r4, #0]
 8007d9c:	60a5      	str	r5, [r4, #8]
 8007d9e:	463e      	mov	r6, r7
 8007da0:	42be      	cmp	r6, r7
 8007da2:	d900      	bls.n	8007da6 <__ssputs_r+0x72>
 8007da4:	463e      	mov	r6, r7
 8007da6:	6820      	ldr	r0, [r4, #0]
 8007da8:	4632      	mov	r2, r6
 8007daa:	4641      	mov	r1, r8
 8007dac:	f000 faa8 	bl	8008300 <memmove>
 8007db0:	68a3      	ldr	r3, [r4, #8]
 8007db2:	1b9b      	subs	r3, r3, r6
 8007db4:	60a3      	str	r3, [r4, #8]
 8007db6:	6823      	ldr	r3, [r4, #0]
 8007db8:	4433      	add	r3, r6
 8007dba:	6023      	str	r3, [r4, #0]
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dc2:	462a      	mov	r2, r5
 8007dc4:	f000 fad4 	bl	8008370 <_realloc_r>
 8007dc8:	4606      	mov	r6, r0
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	d1e0      	bne.n	8007d90 <__ssputs_r+0x5c>
 8007dce:	6921      	ldr	r1, [r4, #16]
 8007dd0:	4650      	mov	r0, sl
 8007dd2:	f7ff feb7 	bl	8007b44 <_free_r>
 8007dd6:	230c      	movs	r3, #12
 8007dd8:	f8ca 3000 	str.w	r3, [sl]
 8007ddc:	89a3      	ldrh	r3, [r4, #12]
 8007dde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007de2:	81a3      	strh	r3, [r4, #12]
 8007de4:	f04f 30ff 	mov.w	r0, #4294967295
 8007de8:	e7e9      	b.n	8007dbe <__ssputs_r+0x8a>
	...

08007dec <_svfiprintf_r>:
 8007dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df0:	4698      	mov	r8, r3
 8007df2:	898b      	ldrh	r3, [r1, #12]
 8007df4:	061b      	lsls	r3, r3, #24
 8007df6:	b09d      	sub	sp, #116	@ 0x74
 8007df8:	4607      	mov	r7, r0
 8007dfa:	460d      	mov	r5, r1
 8007dfc:	4614      	mov	r4, r2
 8007dfe:	d510      	bpl.n	8007e22 <_svfiprintf_r+0x36>
 8007e00:	690b      	ldr	r3, [r1, #16]
 8007e02:	b973      	cbnz	r3, 8007e22 <_svfiprintf_r+0x36>
 8007e04:	2140      	movs	r1, #64	@ 0x40
 8007e06:	f7ff ff09 	bl	8007c1c <_malloc_r>
 8007e0a:	6028      	str	r0, [r5, #0]
 8007e0c:	6128      	str	r0, [r5, #16]
 8007e0e:	b930      	cbnz	r0, 8007e1e <_svfiprintf_r+0x32>
 8007e10:	230c      	movs	r3, #12
 8007e12:	603b      	str	r3, [r7, #0]
 8007e14:	f04f 30ff 	mov.w	r0, #4294967295
 8007e18:	b01d      	add	sp, #116	@ 0x74
 8007e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e1e:	2340      	movs	r3, #64	@ 0x40
 8007e20:	616b      	str	r3, [r5, #20]
 8007e22:	2300      	movs	r3, #0
 8007e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e26:	2320      	movs	r3, #32
 8007e28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e30:	2330      	movs	r3, #48	@ 0x30
 8007e32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007fd0 <_svfiprintf_r+0x1e4>
 8007e36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e3a:	f04f 0901 	mov.w	r9, #1
 8007e3e:	4623      	mov	r3, r4
 8007e40:	469a      	mov	sl, r3
 8007e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e46:	b10a      	cbz	r2, 8007e4c <_svfiprintf_r+0x60>
 8007e48:	2a25      	cmp	r2, #37	@ 0x25
 8007e4a:	d1f9      	bne.n	8007e40 <_svfiprintf_r+0x54>
 8007e4c:	ebba 0b04 	subs.w	fp, sl, r4
 8007e50:	d00b      	beq.n	8007e6a <_svfiprintf_r+0x7e>
 8007e52:	465b      	mov	r3, fp
 8007e54:	4622      	mov	r2, r4
 8007e56:	4629      	mov	r1, r5
 8007e58:	4638      	mov	r0, r7
 8007e5a:	f7ff ff6b 	bl	8007d34 <__ssputs_r>
 8007e5e:	3001      	adds	r0, #1
 8007e60:	f000 80a7 	beq.w	8007fb2 <_svfiprintf_r+0x1c6>
 8007e64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e66:	445a      	add	r2, fp
 8007e68:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f000 809f 	beq.w	8007fb2 <_svfiprintf_r+0x1c6>
 8007e74:	2300      	movs	r3, #0
 8007e76:	f04f 32ff 	mov.w	r2, #4294967295
 8007e7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e7e:	f10a 0a01 	add.w	sl, sl, #1
 8007e82:	9304      	str	r3, [sp, #16]
 8007e84:	9307      	str	r3, [sp, #28]
 8007e86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e8c:	4654      	mov	r4, sl
 8007e8e:	2205      	movs	r2, #5
 8007e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e94:	484e      	ldr	r0, [pc, #312]	@ (8007fd0 <_svfiprintf_r+0x1e4>)
 8007e96:	f7f8 f9bb 	bl	8000210 <memchr>
 8007e9a:	9a04      	ldr	r2, [sp, #16]
 8007e9c:	b9d8      	cbnz	r0, 8007ed6 <_svfiprintf_r+0xea>
 8007e9e:	06d0      	lsls	r0, r2, #27
 8007ea0:	bf44      	itt	mi
 8007ea2:	2320      	movmi	r3, #32
 8007ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ea8:	0711      	lsls	r1, r2, #28
 8007eaa:	bf44      	itt	mi
 8007eac:	232b      	movmi	r3, #43	@ 0x2b
 8007eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8007eb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eb8:	d015      	beq.n	8007ee6 <_svfiprintf_r+0xfa>
 8007eba:	9a07      	ldr	r2, [sp, #28]
 8007ebc:	4654      	mov	r4, sl
 8007ebe:	2000      	movs	r0, #0
 8007ec0:	f04f 0c0a 	mov.w	ip, #10
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007eca:	3b30      	subs	r3, #48	@ 0x30
 8007ecc:	2b09      	cmp	r3, #9
 8007ece:	d94b      	bls.n	8007f68 <_svfiprintf_r+0x17c>
 8007ed0:	b1b0      	cbz	r0, 8007f00 <_svfiprintf_r+0x114>
 8007ed2:	9207      	str	r2, [sp, #28]
 8007ed4:	e014      	b.n	8007f00 <_svfiprintf_r+0x114>
 8007ed6:	eba0 0308 	sub.w	r3, r0, r8
 8007eda:	fa09 f303 	lsl.w	r3, r9, r3
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	9304      	str	r3, [sp, #16]
 8007ee2:	46a2      	mov	sl, r4
 8007ee4:	e7d2      	b.n	8007e8c <_svfiprintf_r+0xa0>
 8007ee6:	9b03      	ldr	r3, [sp, #12]
 8007ee8:	1d19      	adds	r1, r3, #4
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	9103      	str	r1, [sp, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	bfbb      	ittet	lt
 8007ef2:	425b      	neglt	r3, r3
 8007ef4:	f042 0202 	orrlt.w	r2, r2, #2
 8007ef8:	9307      	strge	r3, [sp, #28]
 8007efa:	9307      	strlt	r3, [sp, #28]
 8007efc:	bfb8      	it	lt
 8007efe:	9204      	strlt	r2, [sp, #16]
 8007f00:	7823      	ldrb	r3, [r4, #0]
 8007f02:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f04:	d10a      	bne.n	8007f1c <_svfiprintf_r+0x130>
 8007f06:	7863      	ldrb	r3, [r4, #1]
 8007f08:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f0a:	d132      	bne.n	8007f72 <_svfiprintf_r+0x186>
 8007f0c:	9b03      	ldr	r3, [sp, #12]
 8007f0e:	1d1a      	adds	r2, r3, #4
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	9203      	str	r2, [sp, #12]
 8007f14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f18:	3402      	adds	r4, #2
 8007f1a:	9305      	str	r3, [sp, #20]
 8007f1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007fe0 <_svfiprintf_r+0x1f4>
 8007f20:	7821      	ldrb	r1, [r4, #0]
 8007f22:	2203      	movs	r2, #3
 8007f24:	4650      	mov	r0, sl
 8007f26:	f7f8 f973 	bl	8000210 <memchr>
 8007f2a:	b138      	cbz	r0, 8007f3c <_svfiprintf_r+0x150>
 8007f2c:	9b04      	ldr	r3, [sp, #16]
 8007f2e:	eba0 000a 	sub.w	r0, r0, sl
 8007f32:	2240      	movs	r2, #64	@ 0x40
 8007f34:	4082      	lsls	r2, r0
 8007f36:	4313      	orrs	r3, r2
 8007f38:	3401      	adds	r4, #1
 8007f3a:	9304      	str	r3, [sp, #16]
 8007f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f40:	4824      	ldr	r0, [pc, #144]	@ (8007fd4 <_svfiprintf_r+0x1e8>)
 8007f42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f46:	2206      	movs	r2, #6
 8007f48:	f7f8 f962 	bl	8000210 <memchr>
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d036      	beq.n	8007fbe <_svfiprintf_r+0x1d2>
 8007f50:	4b21      	ldr	r3, [pc, #132]	@ (8007fd8 <_svfiprintf_r+0x1ec>)
 8007f52:	bb1b      	cbnz	r3, 8007f9c <_svfiprintf_r+0x1b0>
 8007f54:	9b03      	ldr	r3, [sp, #12]
 8007f56:	3307      	adds	r3, #7
 8007f58:	f023 0307 	bic.w	r3, r3, #7
 8007f5c:	3308      	adds	r3, #8
 8007f5e:	9303      	str	r3, [sp, #12]
 8007f60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f62:	4433      	add	r3, r6
 8007f64:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f66:	e76a      	b.n	8007e3e <_svfiprintf_r+0x52>
 8007f68:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f6c:	460c      	mov	r4, r1
 8007f6e:	2001      	movs	r0, #1
 8007f70:	e7a8      	b.n	8007ec4 <_svfiprintf_r+0xd8>
 8007f72:	2300      	movs	r3, #0
 8007f74:	3401      	adds	r4, #1
 8007f76:	9305      	str	r3, [sp, #20]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	f04f 0c0a 	mov.w	ip, #10
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f84:	3a30      	subs	r2, #48	@ 0x30
 8007f86:	2a09      	cmp	r2, #9
 8007f88:	d903      	bls.n	8007f92 <_svfiprintf_r+0x1a6>
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d0c6      	beq.n	8007f1c <_svfiprintf_r+0x130>
 8007f8e:	9105      	str	r1, [sp, #20]
 8007f90:	e7c4      	b.n	8007f1c <_svfiprintf_r+0x130>
 8007f92:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f96:	4604      	mov	r4, r0
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e7f0      	b.n	8007f7e <_svfiprintf_r+0x192>
 8007f9c:	ab03      	add	r3, sp, #12
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	462a      	mov	r2, r5
 8007fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8007fdc <_svfiprintf_r+0x1f0>)
 8007fa4:	a904      	add	r1, sp, #16
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	f3af 8000 	nop.w
 8007fac:	1c42      	adds	r2, r0, #1
 8007fae:	4606      	mov	r6, r0
 8007fb0:	d1d6      	bne.n	8007f60 <_svfiprintf_r+0x174>
 8007fb2:	89ab      	ldrh	r3, [r5, #12]
 8007fb4:	065b      	lsls	r3, r3, #25
 8007fb6:	f53f af2d 	bmi.w	8007e14 <_svfiprintf_r+0x28>
 8007fba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007fbc:	e72c      	b.n	8007e18 <_svfiprintf_r+0x2c>
 8007fbe:	ab03      	add	r3, sp, #12
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	462a      	mov	r2, r5
 8007fc4:	4b05      	ldr	r3, [pc, #20]	@ (8007fdc <_svfiprintf_r+0x1f0>)
 8007fc6:	a904      	add	r1, sp, #16
 8007fc8:	4638      	mov	r0, r7
 8007fca:	f000 f879 	bl	80080c0 <_printf_i>
 8007fce:	e7ed      	b.n	8007fac <_svfiprintf_r+0x1c0>
 8007fd0:	0800879d 	.word	0x0800879d
 8007fd4:	080087a7 	.word	0x080087a7
 8007fd8:	00000000 	.word	0x00000000
 8007fdc:	08007d35 	.word	0x08007d35
 8007fe0:	080087a3 	.word	0x080087a3

08007fe4 <_printf_common>:
 8007fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fe8:	4616      	mov	r6, r2
 8007fea:	4698      	mov	r8, r3
 8007fec:	688a      	ldr	r2, [r1, #8]
 8007fee:	690b      	ldr	r3, [r1, #16]
 8007ff0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	bfb8      	it	lt
 8007ff8:	4613      	movlt	r3, r2
 8007ffa:	6033      	str	r3, [r6, #0]
 8007ffc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008000:	4607      	mov	r7, r0
 8008002:	460c      	mov	r4, r1
 8008004:	b10a      	cbz	r2, 800800a <_printf_common+0x26>
 8008006:	3301      	adds	r3, #1
 8008008:	6033      	str	r3, [r6, #0]
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	0699      	lsls	r1, r3, #26
 800800e:	bf42      	ittt	mi
 8008010:	6833      	ldrmi	r3, [r6, #0]
 8008012:	3302      	addmi	r3, #2
 8008014:	6033      	strmi	r3, [r6, #0]
 8008016:	6825      	ldr	r5, [r4, #0]
 8008018:	f015 0506 	ands.w	r5, r5, #6
 800801c:	d106      	bne.n	800802c <_printf_common+0x48>
 800801e:	f104 0a19 	add.w	sl, r4, #25
 8008022:	68e3      	ldr	r3, [r4, #12]
 8008024:	6832      	ldr	r2, [r6, #0]
 8008026:	1a9b      	subs	r3, r3, r2
 8008028:	42ab      	cmp	r3, r5
 800802a:	dc26      	bgt.n	800807a <_printf_common+0x96>
 800802c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008030:	6822      	ldr	r2, [r4, #0]
 8008032:	3b00      	subs	r3, #0
 8008034:	bf18      	it	ne
 8008036:	2301      	movne	r3, #1
 8008038:	0692      	lsls	r2, r2, #26
 800803a:	d42b      	bmi.n	8008094 <_printf_common+0xb0>
 800803c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008040:	4641      	mov	r1, r8
 8008042:	4638      	mov	r0, r7
 8008044:	47c8      	blx	r9
 8008046:	3001      	adds	r0, #1
 8008048:	d01e      	beq.n	8008088 <_printf_common+0xa4>
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	6922      	ldr	r2, [r4, #16]
 800804e:	f003 0306 	and.w	r3, r3, #6
 8008052:	2b04      	cmp	r3, #4
 8008054:	bf02      	ittt	eq
 8008056:	68e5      	ldreq	r5, [r4, #12]
 8008058:	6833      	ldreq	r3, [r6, #0]
 800805a:	1aed      	subeq	r5, r5, r3
 800805c:	68a3      	ldr	r3, [r4, #8]
 800805e:	bf0c      	ite	eq
 8008060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008064:	2500      	movne	r5, #0
 8008066:	4293      	cmp	r3, r2
 8008068:	bfc4      	itt	gt
 800806a:	1a9b      	subgt	r3, r3, r2
 800806c:	18ed      	addgt	r5, r5, r3
 800806e:	2600      	movs	r6, #0
 8008070:	341a      	adds	r4, #26
 8008072:	42b5      	cmp	r5, r6
 8008074:	d11a      	bne.n	80080ac <_printf_common+0xc8>
 8008076:	2000      	movs	r0, #0
 8008078:	e008      	b.n	800808c <_printf_common+0xa8>
 800807a:	2301      	movs	r3, #1
 800807c:	4652      	mov	r2, sl
 800807e:	4641      	mov	r1, r8
 8008080:	4638      	mov	r0, r7
 8008082:	47c8      	blx	r9
 8008084:	3001      	adds	r0, #1
 8008086:	d103      	bne.n	8008090 <_printf_common+0xac>
 8008088:	f04f 30ff 	mov.w	r0, #4294967295
 800808c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008090:	3501      	adds	r5, #1
 8008092:	e7c6      	b.n	8008022 <_printf_common+0x3e>
 8008094:	18e1      	adds	r1, r4, r3
 8008096:	1c5a      	adds	r2, r3, #1
 8008098:	2030      	movs	r0, #48	@ 0x30
 800809a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800809e:	4422      	add	r2, r4
 80080a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80080a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80080a8:	3302      	adds	r3, #2
 80080aa:	e7c7      	b.n	800803c <_printf_common+0x58>
 80080ac:	2301      	movs	r3, #1
 80080ae:	4622      	mov	r2, r4
 80080b0:	4641      	mov	r1, r8
 80080b2:	4638      	mov	r0, r7
 80080b4:	47c8      	blx	r9
 80080b6:	3001      	adds	r0, #1
 80080b8:	d0e6      	beq.n	8008088 <_printf_common+0xa4>
 80080ba:	3601      	adds	r6, #1
 80080bc:	e7d9      	b.n	8008072 <_printf_common+0x8e>
	...

080080c0 <_printf_i>:
 80080c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080c4:	7e0f      	ldrb	r7, [r1, #24]
 80080c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80080c8:	2f78      	cmp	r7, #120	@ 0x78
 80080ca:	4691      	mov	r9, r2
 80080cc:	4680      	mov	r8, r0
 80080ce:	460c      	mov	r4, r1
 80080d0:	469a      	mov	sl, r3
 80080d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80080d6:	d807      	bhi.n	80080e8 <_printf_i+0x28>
 80080d8:	2f62      	cmp	r7, #98	@ 0x62
 80080da:	d80a      	bhi.n	80080f2 <_printf_i+0x32>
 80080dc:	2f00      	cmp	r7, #0
 80080de:	f000 80d2 	beq.w	8008286 <_printf_i+0x1c6>
 80080e2:	2f58      	cmp	r7, #88	@ 0x58
 80080e4:	f000 80b9 	beq.w	800825a <_printf_i+0x19a>
 80080e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80080f0:	e03a      	b.n	8008168 <_printf_i+0xa8>
 80080f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80080f6:	2b15      	cmp	r3, #21
 80080f8:	d8f6      	bhi.n	80080e8 <_printf_i+0x28>
 80080fa:	a101      	add	r1, pc, #4	@ (adr r1, 8008100 <_printf_i+0x40>)
 80080fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008100:	08008159 	.word	0x08008159
 8008104:	0800816d 	.word	0x0800816d
 8008108:	080080e9 	.word	0x080080e9
 800810c:	080080e9 	.word	0x080080e9
 8008110:	080080e9 	.word	0x080080e9
 8008114:	080080e9 	.word	0x080080e9
 8008118:	0800816d 	.word	0x0800816d
 800811c:	080080e9 	.word	0x080080e9
 8008120:	080080e9 	.word	0x080080e9
 8008124:	080080e9 	.word	0x080080e9
 8008128:	080080e9 	.word	0x080080e9
 800812c:	0800826d 	.word	0x0800826d
 8008130:	08008197 	.word	0x08008197
 8008134:	08008227 	.word	0x08008227
 8008138:	080080e9 	.word	0x080080e9
 800813c:	080080e9 	.word	0x080080e9
 8008140:	0800828f 	.word	0x0800828f
 8008144:	080080e9 	.word	0x080080e9
 8008148:	08008197 	.word	0x08008197
 800814c:	080080e9 	.word	0x080080e9
 8008150:	080080e9 	.word	0x080080e9
 8008154:	0800822f 	.word	0x0800822f
 8008158:	6833      	ldr	r3, [r6, #0]
 800815a:	1d1a      	adds	r2, r3, #4
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	6032      	str	r2, [r6, #0]
 8008160:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008164:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008168:	2301      	movs	r3, #1
 800816a:	e09d      	b.n	80082a8 <_printf_i+0x1e8>
 800816c:	6833      	ldr	r3, [r6, #0]
 800816e:	6820      	ldr	r0, [r4, #0]
 8008170:	1d19      	adds	r1, r3, #4
 8008172:	6031      	str	r1, [r6, #0]
 8008174:	0606      	lsls	r6, r0, #24
 8008176:	d501      	bpl.n	800817c <_printf_i+0xbc>
 8008178:	681d      	ldr	r5, [r3, #0]
 800817a:	e003      	b.n	8008184 <_printf_i+0xc4>
 800817c:	0645      	lsls	r5, r0, #25
 800817e:	d5fb      	bpl.n	8008178 <_printf_i+0xb8>
 8008180:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008184:	2d00      	cmp	r5, #0
 8008186:	da03      	bge.n	8008190 <_printf_i+0xd0>
 8008188:	232d      	movs	r3, #45	@ 0x2d
 800818a:	426d      	negs	r5, r5
 800818c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008190:	4859      	ldr	r0, [pc, #356]	@ (80082f8 <_printf_i+0x238>)
 8008192:	230a      	movs	r3, #10
 8008194:	e011      	b.n	80081ba <_printf_i+0xfa>
 8008196:	6821      	ldr	r1, [r4, #0]
 8008198:	6833      	ldr	r3, [r6, #0]
 800819a:	0608      	lsls	r0, r1, #24
 800819c:	f853 5b04 	ldr.w	r5, [r3], #4
 80081a0:	d402      	bmi.n	80081a8 <_printf_i+0xe8>
 80081a2:	0649      	lsls	r1, r1, #25
 80081a4:	bf48      	it	mi
 80081a6:	b2ad      	uxthmi	r5, r5
 80081a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80081aa:	4853      	ldr	r0, [pc, #332]	@ (80082f8 <_printf_i+0x238>)
 80081ac:	6033      	str	r3, [r6, #0]
 80081ae:	bf14      	ite	ne
 80081b0:	230a      	movne	r3, #10
 80081b2:	2308      	moveq	r3, #8
 80081b4:	2100      	movs	r1, #0
 80081b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80081ba:	6866      	ldr	r6, [r4, #4]
 80081bc:	60a6      	str	r6, [r4, #8]
 80081be:	2e00      	cmp	r6, #0
 80081c0:	bfa2      	ittt	ge
 80081c2:	6821      	ldrge	r1, [r4, #0]
 80081c4:	f021 0104 	bicge.w	r1, r1, #4
 80081c8:	6021      	strge	r1, [r4, #0]
 80081ca:	b90d      	cbnz	r5, 80081d0 <_printf_i+0x110>
 80081cc:	2e00      	cmp	r6, #0
 80081ce:	d04b      	beq.n	8008268 <_printf_i+0x1a8>
 80081d0:	4616      	mov	r6, r2
 80081d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80081d6:	fb03 5711 	mls	r7, r3, r1, r5
 80081da:	5dc7      	ldrb	r7, [r0, r7]
 80081dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081e0:	462f      	mov	r7, r5
 80081e2:	42bb      	cmp	r3, r7
 80081e4:	460d      	mov	r5, r1
 80081e6:	d9f4      	bls.n	80081d2 <_printf_i+0x112>
 80081e8:	2b08      	cmp	r3, #8
 80081ea:	d10b      	bne.n	8008204 <_printf_i+0x144>
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	07df      	lsls	r7, r3, #31
 80081f0:	d508      	bpl.n	8008204 <_printf_i+0x144>
 80081f2:	6923      	ldr	r3, [r4, #16]
 80081f4:	6861      	ldr	r1, [r4, #4]
 80081f6:	4299      	cmp	r1, r3
 80081f8:	bfde      	ittt	le
 80081fa:	2330      	movle	r3, #48	@ 0x30
 80081fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008200:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008204:	1b92      	subs	r2, r2, r6
 8008206:	6122      	str	r2, [r4, #16]
 8008208:	f8cd a000 	str.w	sl, [sp]
 800820c:	464b      	mov	r3, r9
 800820e:	aa03      	add	r2, sp, #12
 8008210:	4621      	mov	r1, r4
 8008212:	4640      	mov	r0, r8
 8008214:	f7ff fee6 	bl	8007fe4 <_printf_common>
 8008218:	3001      	adds	r0, #1
 800821a:	d14a      	bne.n	80082b2 <_printf_i+0x1f2>
 800821c:	f04f 30ff 	mov.w	r0, #4294967295
 8008220:	b004      	add	sp, #16
 8008222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	f043 0320 	orr.w	r3, r3, #32
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	4833      	ldr	r0, [pc, #204]	@ (80082fc <_printf_i+0x23c>)
 8008230:	2778      	movs	r7, #120	@ 0x78
 8008232:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008236:	6823      	ldr	r3, [r4, #0]
 8008238:	6831      	ldr	r1, [r6, #0]
 800823a:	061f      	lsls	r7, r3, #24
 800823c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008240:	d402      	bmi.n	8008248 <_printf_i+0x188>
 8008242:	065f      	lsls	r7, r3, #25
 8008244:	bf48      	it	mi
 8008246:	b2ad      	uxthmi	r5, r5
 8008248:	6031      	str	r1, [r6, #0]
 800824a:	07d9      	lsls	r1, r3, #31
 800824c:	bf44      	itt	mi
 800824e:	f043 0320 	orrmi.w	r3, r3, #32
 8008252:	6023      	strmi	r3, [r4, #0]
 8008254:	b11d      	cbz	r5, 800825e <_printf_i+0x19e>
 8008256:	2310      	movs	r3, #16
 8008258:	e7ac      	b.n	80081b4 <_printf_i+0xf4>
 800825a:	4827      	ldr	r0, [pc, #156]	@ (80082f8 <_printf_i+0x238>)
 800825c:	e7e9      	b.n	8008232 <_printf_i+0x172>
 800825e:	6823      	ldr	r3, [r4, #0]
 8008260:	f023 0320 	bic.w	r3, r3, #32
 8008264:	6023      	str	r3, [r4, #0]
 8008266:	e7f6      	b.n	8008256 <_printf_i+0x196>
 8008268:	4616      	mov	r6, r2
 800826a:	e7bd      	b.n	80081e8 <_printf_i+0x128>
 800826c:	6833      	ldr	r3, [r6, #0]
 800826e:	6825      	ldr	r5, [r4, #0]
 8008270:	6961      	ldr	r1, [r4, #20]
 8008272:	1d18      	adds	r0, r3, #4
 8008274:	6030      	str	r0, [r6, #0]
 8008276:	062e      	lsls	r6, r5, #24
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	d501      	bpl.n	8008280 <_printf_i+0x1c0>
 800827c:	6019      	str	r1, [r3, #0]
 800827e:	e002      	b.n	8008286 <_printf_i+0x1c6>
 8008280:	0668      	lsls	r0, r5, #25
 8008282:	d5fb      	bpl.n	800827c <_printf_i+0x1bc>
 8008284:	8019      	strh	r1, [r3, #0]
 8008286:	2300      	movs	r3, #0
 8008288:	6123      	str	r3, [r4, #16]
 800828a:	4616      	mov	r6, r2
 800828c:	e7bc      	b.n	8008208 <_printf_i+0x148>
 800828e:	6833      	ldr	r3, [r6, #0]
 8008290:	1d1a      	adds	r2, r3, #4
 8008292:	6032      	str	r2, [r6, #0]
 8008294:	681e      	ldr	r6, [r3, #0]
 8008296:	6862      	ldr	r2, [r4, #4]
 8008298:	2100      	movs	r1, #0
 800829a:	4630      	mov	r0, r6
 800829c:	f7f7 ffb8 	bl	8000210 <memchr>
 80082a0:	b108      	cbz	r0, 80082a6 <_printf_i+0x1e6>
 80082a2:	1b80      	subs	r0, r0, r6
 80082a4:	6060      	str	r0, [r4, #4]
 80082a6:	6863      	ldr	r3, [r4, #4]
 80082a8:	6123      	str	r3, [r4, #16]
 80082aa:	2300      	movs	r3, #0
 80082ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082b0:	e7aa      	b.n	8008208 <_printf_i+0x148>
 80082b2:	6923      	ldr	r3, [r4, #16]
 80082b4:	4632      	mov	r2, r6
 80082b6:	4649      	mov	r1, r9
 80082b8:	4640      	mov	r0, r8
 80082ba:	47d0      	blx	sl
 80082bc:	3001      	adds	r0, #1
 80082be:	d0ad      	beq.n	800821c <_printf_i+0x15c>
 80082c0:	6823      	ldr	r3, [r4, #0]
 80082c2:	079b      	lsls	r3, r3, #30
 80082c4:	d413      	bmi.n	80082ee <_printf_i+0x22e>
 80082c6:	68e0      	ldr	r0, [r4, #12]
 80082c8:	9b03      	ldr	r3, [sp, #12]
 80082ca:	4298      	cmp	r0, r3
 80082cc:	bfb8      	it	lt
 80082ce:	4618      	movlt	r0, r3
 80082d0:	e7a6      	b.n	8008220 <_printf_i+0x160>
 80082d2:	2301      	movs	r3, #1
 80082d4:	4632      	mov	r2, r6
 80082d6:	4649      	mov	r1, r9
 80082d8:	4640      	mov	r0, r8
 80082da:	47d0      	blx	sl
 80082dc:	3001      	adds	r0, #1
 80082de:	d09d      	beq.n	800821c <_printf_i+0x15c>
 80082e0:	3501      	adds	r5, #1
 80082e2:	68e3      	ldr	r3, [r4, #12]
 80082e4:	9903      	ldr	r1, [sp, #12]
 80082e6:	1a5b      	subs	r3, r3, r1
 80082e8:	42ab      	cmp	r3, r5
 80082ea:	dcf2      	bgt.n	80082d2 <_printf_i+0x212>
 80082ec:	e7eb      	b.n	80082c6 <_printf_i+0x206>
 80082ee:	2500      	movs	r5, #0
 80082f0:	f104 0619 	add.w	r6, r4, #25
 80082f4:	e7f5      	b.n	80082e2 <_printf_i+0x222>
 80082f6:	bf00      	nop
 80082f8:	080087ae 	.word	0x080087ae
 80082fc:	080087bf 	.word	0x080087bf

08008300 <memmove>:
 8008300:	4288      	cmp	r0, r1
 8008302:	b510      	push	{r4, lr}
 8008304:	eb01 0402 	add.w	r4, r1, r2
 8008308:	d902      	bls.n	8008310 <memmove+0x10>
 800830a:	4284      	cmp	r4, r0
 800830c:	4623      	mov	r3, r4
 800830e:	d807      	bhi.n	8008320 <memmove+0x20>
 8008310:	1e43      	subs	r3, r0, #1
 8008312:	42a1      	cmp	r1, r4
 8008314:	d008      	beq.n	8008328 <memmove+0x28>
 8008316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800831a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800831e:	e7f8      	b.n	8008312 <memmove+0x12>
 8008320:	4402      	add	r2, r0
 8008322:	4601      	mov	r1, r0
 8008324:	428a      	cmp	r2, r1
 8008326:	d100      	bne.n	800832a <memmove+0x2a>
 8008328:	bd10      	pop	{r4, pc}
 800832a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800832e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008332:	e7f7      	b.n	8008324 <memmove+0x24>

08008334 <_sbrk_r>:
 8008334:	b538      	push	{r3, r4, r5, lr}
 8008336:	4d06      	ldr	r5, [pc, #24]	@ (8008350 <_sbrk_r+0x1c>)
 8008338:	2300      	movs	r3, #0
 800833a:	4604      	mov	r4, r0
 800833c:	4608      	mov	r0, r1
 800833e:	602b      	str	r3, [r5, #0]
 8008340:	f7fb fc24 	bl	8003b8c <_sbrk>
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d102      	bne.n	800834e <_sbrk_r+0x1a>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	b103      	cbz	r3, 800834e <_sbrk_r+0x1a>
 800834c:	6023      	str	r3, [r4, #0]
 800834e:	bd38      	pop	{r3, r4, r5, pc}
 8008350:	200004fc 	.word	0x200004fc

08008354 <memcpy>:
 8008354:	440a      	add	r2, r1
 8008356:	4291      	cmp	r1, r2
 8008358:	f100 33ff 	add.w	r3, r0, #4294967295
 800835c:	d100      	bne.n	8008360 <memcpy+0xc>
 800835e:	4770      	bx	lr
 8008360:	b510      	push	{r4, lr}
 8008362:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008366:	f803 4f01 	strb.w	r4, [r3, #1]!
 800836a:	4291      	cmp	r1, r2
 800836c:	d1f9      	bne.n	8008362 <memcpy+0xe>
 800836e:	bd10      	pop	{r4, pc}

08008370 <_realloc_r>:
 8008370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008374:	4680      	mov	r8, r0
 8008376:	4615      	mov	r5, r2
 8008378:	460c      	mov	r4, r1
 800837a:	b921      	cbnz	r1, 8008386 <_realloc_r+0x16>
 800837c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008380:	4611      	mov	r1, r2
 8008382:	f7ff bc4b 	b.w	8007c1c <_malloc_r>
 8008386:	b92a      	cbnz	r2, 8008394 <_realloc_r+0x24>
 8008388:	f7ff fbdc 	bl	8007b44 <_free_r>
 800838c:	2400      	movs	r4, #0
 800838e:	4620      	mov	r0, r4
 8008390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008394:	f000 f81a 	bl	80083cc <_malloc_usable_size_r>
 8008398:	4285      	cmp	r5, r0
 800839a:	4606      	mov	r6, r0
 800839c:	d802      	bhi.n	80083a4 <_realloc_r+0x34>
 800839e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80083a2:	d8f4      	bhi.n	800838e <_realloc_r+0x1e>
 80083a4:	4629      	mov	r1, r5
 80083a6:	4640      	mov	r0, r8
 80083a8:	f7ff fc38 	bl	8007c1c <_malloc_r>
 80083ac:	4607      	mov	r7, r0
 80083ae:	2800      	cmp	r0, #0
 80083b0:	d0ec      	beq.n	800838c <_realloc_r+0x1c>
 80083b2:	42b5      	cmp	r5, r6
 80083b4:	462a      	mov	r2, r5
 80083b6:	4621      	mov	r1, r4
 80083b8:	bf28      	it	cs
 80083ba:	4632      	movcs	r2, r6
 80083bc:	f7ff ffca 	bl	8008354 <memcpy>
 80083c0:	4621      	mov	r1, r4
 80083c2:	4640      	mov	r0, r8
 80083c4:	f7ff fbbe 	bl	8007b44 <_free_r>
 80083c8:	463c      	mov	r4, r7
 80083ca:	e7e0      	b.n	800838e <_realloc_r+0x1e>

080083cc <_malloc_usable_size_r>:
 80083cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083d0:	1f18      	subs	r0, r3, #4
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	bfbc      	itt	lt
 80083d6:	580b      	ldrlt	r3, [r1, r0]
 80083d8:	18c0      	addlt	r0, r0, r3
 80083da:	4770      	bx	lr
 80083dc:	0000      	movs	r0, r0
	...

080083e0 <floor>:
 80083e0:	ec51 0b10 	vmov	r0, r1, d0
 80083e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80083e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ec:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80083f0:	2e13      	cmp	r6, #19
 80083f2:	460c      	mov	r4, r1
 80083f4:	4605      	mov	r5, r0
 80083f6:	4680      	mov	r8, r0
 80083f8:	dc34      	bgt.n	8008464 <floor+0x84>
 80083fa:	2e00      	cmp	r6, #0
 80083fc:	da17      	bge.n	800842e <floor+0x4e>
 80083fe:	a332      	add	r3, pc, #200	@ (adr r3, 80084c8 <floor+0xe8>)
 8008400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008404:	f7f7 ff5a 	bl	80002bc <__adddf3>
 8008408:	2200      	movs	r2, #0
 800840a:	2300      	movs	r3, #0
 800840c:	f7f8 fb9c 	bl	8000b48 <__aeabi_dcmpgt>
 8008410:	b150      	cbz	r0, 8008428 <floor+0x48>
 8008412:	2c00      	cmp	r4, #0
 8008414:	da55      	bge.n	80084c2 <floor+0xe2>
 8008416:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800841a:	432c      	orrs	r4, r5
 800841c:	2500      	movs	r5, #0
 800841e:	42ac      	cmp	r4, r5
 8008420:	4c2b      	ldr	r4, [pc, #172]	@ (80084d0 <floor+0xf0>)
 8008422:	bf08      	it	eq
 8008424:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008428:	4621      	mov	r1, r4
 800842a:	4628      	mov	r0, r5
 800842c:	e023      	b.n	8008476 <floor+0x96>
 800842e:	4f29      	ldr	r7, [pc, #164]	@ (80084d4 <floor+0xf4>)
 8008430:	4137      	asrs	r7, r6
 8008432:	ea01 0307 	and.w	r3, r1, r7
 8008436:	4303      	orrs	r3, r0
 8008438:	d01d      	beq.n	8008476 <floor+0x96>
 800843a:	a323      	add	r3, pc, #140	@ (adr r3, 80084c8 <floor+0xe8>)
 800843c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008440:	f7f7 ff3c 	bl	80002bc <__adddf3>
 8008444:	2200      	movs	r2, #0
 8008446:	2300      	movs	r3, #0
 8008448:	f7f8 fb7e 	bl	8000b48 <__aeabi_dcmpgt>
 800844c:	2800      	cmp	r0, #0
 800844e:	d0eb      	beq.n	8008428 <floor+0x48>
 8008450:	2c00      	cmp	r4, #0
 8008452:	bfbe      	ittt	lt
 8008454:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8008458:	4133      	asrlt	r3, r6
 800845a:	18e4      	addlt	r4, r4, r3
 800845c:	ea24 0407 	bic.w	r4, r4, r7
 8008460:	2500      	movs	r5, #0
 8008462:	e7e1      	b.n	8008428 <floor+0x48>
 8008464:	2e33      	cmp	r6, #51	@ 0x33
 8008466:	dd0a      	ble.n	800847e <floor+0x9e>
 8008468:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800846c:	d103      	bne.n	8008476 <floor+0x96>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	f7f7 ff23 	bl	80002bc <__adddf3>
 8008476:	ec41 0b10 	vmov	d0, r0, r1
 800847a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800847e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8008482:	f04f 37ff 	mov.w	r7, #4294967295
 8008486:	40df      	lsrs	r7, r3
 8008488:	4207      	tst	r7, r0
 800848a:	d0f4      	beq.n	8008476 <floor+0x96>
 800848c:	a30e      	add	r3, pc, #56	@ (adr r3, 80084c8 <floor+0xe8>)
 800848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008492:	f7f7 ff13 	bl	80002bc <__adddf3>
 8008496:	2200      	movs	r2, #0
 8008498:	2300      	movs	r3, #0
 800849a:	f7f8 fb55 	bl	8000b48 <__aeabi_dcmpgt>
 800849e:	2800      	cmp	r0, #0
 80084a0:	d0c2      	beq.n	8008428 <floor+0x48>
 80084a2:	2c00      	cmp	r4, #0
 80084a4:	da0a      	bge.n	80084bc <floor+0xdc>
 80084a6:	2e14      	cmp	r6, #20
 80084a8:	d101      	bne.n	80084ae <floor+0xce>
 80084aa:	3401      	adds	r4, #1
 80084ac:	e006      	b.n	80084bc <floor+0xdc>
 80084ae:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80084b2:	2301      	movs	r3, #1
 80084b4:	40b3      	lsls	r3, r6
 80084b6:	441d      	add	r5, r3
 80084b8:	4545      	cmp	r5, r8
 80084ba:	d3f6      	bcc.n	80084aa <floor+0xca>
 80084bc:	ea25 0507 	bic.w	r5, r5, r7
 80084c0:	e7b2      	b.n	8008428 <floor+0x48>
 80084c2:	2500      	movs	r5, #0
 80084c4:	462c      	mov	r4, r5
 80084c6:	e7af      	b.n	8008428 <floor+0x48>
 80084c8:	8800759c 	.word	0x8800759c
 80084cc:	7e37e43c 	.word	0x7e37e43c
 80084d0:	bff00000 	.word	0xbff00000
 80084d4:	000fffff 	.word	0x000fffff

080084d8 <_init>:
 80084d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084da:	bf00      	nop
 80084dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084de:	bc08      	pop	{r3}
 80084e0:	469e      	mov	lr, r3
 80084e2:	4770      	bx	lr

080084e4 <_fini>:
 80084e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e6:	bf00      	nop
 80084e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ea:	bc08      	pop	{r3}
 80084ec:	469e      	mov	lr, r3
 80084ee:	4770      	bx	lr
