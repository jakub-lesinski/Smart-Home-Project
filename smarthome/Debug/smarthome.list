
smarthome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1fc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  0800c3cc  0800c3cc  0000d3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7d4  0800c7d4  0000e1b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7d4  0800c7d4  0000d7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7dc  0800c7dc  0000e1b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7dc  0800c7dc  0000d7dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7e0  0800c7e0  0000d7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b4  20000000  0800c7e4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000053c  200001b8  0800c998  0000e1b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006f4  0800c998  0000e6f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a341  00000000  00000000  0000e1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aaa  00000000  00000000  00028525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  0002bfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010fd  00000000  00000000  0002d590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b9f  00000000  00000000  0002e68d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001de17  00000000  00000000  0005722c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f77b3  00000000  00000000  00075043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c7f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006290  00000000  00000000  0016c83c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00172acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b8 	.word	0x200001b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c3b4 	.word	0x0800c3b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001bc 	.word	0x200001bc
 800020c:	0800c3b4 	.word	0x0800c3b4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2uiz>:
 8000bdc:	004a      	lsls	r2, r1, #1
 8000bde:	d211      	bcs.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be4:	d211      	bcs.n	8000c0a <__aeabi_d2uiz+0x2e>
 8000be6:	d50d      	bpl.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf0:	d40e      	bmi.n	8000c10 <__aeabi_d2uiz+0x34>
 8000bf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0e:	d102      	bne.n	8000c16 <__aeabi_d2uiz+0x3a>
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	4770      	bx	lr
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_d2f>:
 8000c1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c24:	bf24      	itt	cs
 8000c26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2e:	d90d      	bls.n	8000c4c <__aeabi_d2f+0x30>
 8000c30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c44:	bf08      	it	eq
 8000c46:	f020 0001 	biceq.w	r0, r0, #1
 8000c4a:	4770      	bx	lr
 8000c4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c50:	d121      	bne.n	8000c96 <__aeabi_d2f+0x7a>
 8000c52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c56:	bfbc      	itt	lt
 8000c58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	4770      	bxlt	lr
 8000c5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c66:	f1c2 0218 	rsb	r2, r2, #24
 8000c6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c72:	fa20 f002 	lsr.w	r0, r0, r2
 8000c76:	bf18      	it	ne
 8000c78:	f040 0001 	orrne.w	r0, r0, #1
 8000c7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c88:	ea40 000c 	orr.w	r0, r0, ip
 8000c8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c94:	e7cc      	b.n	8000c30 <__aeabi_d2f+0x14>
 8000c96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9a:	d107      	bne.n	8000cac <__aeabi_d2f+0x90>
 8000c9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca0:	bf1e      	ittt	ne
 8000ca2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000caa:	4770      	bxne	lr
 8000cac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd0:	f000 b96a 	b.w	8000fa8 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f806 	bl	8000cec <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__udivmoddi4>:
 8000cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	9d08      	ldr	r5, [sp, #32]
 8000cf2:	460c      	mov	r4, r1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d14e      	bne.n	8000d96 <__udivmoddi4+0xaa>
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	458c      	cmp	ip, r1
 8000cfc:	4686      	mov	lr, r0
 8000cfe:	fab2 f282 	clz	r2, r2
 8000d02:	d962      	bls.n	8000dca <__udivmoddi4+0xde>
 8000d04:	b14a      	cbz	r2, 8000d1a <__udivmoddi4+0x2e>
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	4091      	lsls	r1, r2
 8000d0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d14:	4319      	orrs	r1, r3
 8000d16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f f68c 	uxth.w	r6, ip
 8000d22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d32:	fb04 f106 	mul.w	r1, r4, r6
 8000d36:	4299      	cmp	r1, r3
 8000d38:	d90a      	bls.n	8000d50 <__udivmoddi4+0x64>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d42:	f080 8112 	bcs.w	8000f6a <__udivmoddi4+0x27e>
 8000d46:	4299      	cmp	r1, r3
 8000d48:	f240 810f 	bls.w	8000f6a <__udivmoddi4+0x27e>
 8000d4c:	3c02      	subs	r4, #2
 8000d4e:	4463      	add	r3, ip
 8000d50:	1a59      	subs	r1, r3, r1
 8000d52:	fa1f f38e 	uxth.w	r3, lr
 8000d56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d62:	fb00 f606 	mul.w	r6, r0, r6
 8000d66:	429e      	cmp	r6, r3
 8000d68:	d90a      	bls.n	8000d80 <__udivmoddi4+0x94>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d72:	f080 80fc 	bcs.w	8000f6e <__udivmoddi4+0x282>
 8000d76:	429e      	cmp	r6, r3
 8000d78:	f240 80f9 	bls.w	8000f6e <__udivmoddi4+0x282>
 8000d7c:	4463      	add	r3, ip
 8000d7e:	3802      	subs	r0, #2
 8000d80:	1b9b      	subs	r3, r3, r6
 8000d82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d86:	2100      	movs	r1, #0
 8000d88:	b11d      	cbz	r5, 8000d92 <__udivmoddi4+0xa6>
 8000d8a:	40d3      	lsrs	r3, r2
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d905      	bls.n	8000da6 <__udivmoddi4+0xba>
 8000d9a:	b10d      	cbz	r5, 8000da0 <__udivmoddi4+0xb4>
 8000d9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000da0:	2100      	movs	r1, #0
 8000da2:	4608      	mov	r0, r1
 8000da4:	e7f5      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000da6:	fab3 f183 	clz	r1, r3
 8000daa:	2900      	cmp	r1, #0
 8000dac:	d146      	bne.n	8000e3c <__udivmoddi4+0x150>
 8000dae:	42a3      	cmp	r3, r4
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xcc>
 8000db2:	4290      	cmp	r0, r2
 8000db4:	f0c0 80f0 	bcc.w	8000f98 <__udivmoddi4+0x2ac>
 8000db8:	1a86      	subs	r6, r0, r2
 8000dba:	eb64 0303 	sbc.w	r3, r4, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	d0e6      	beq.n	8000d92 <__udivmoddi4+0xa6>
 8000dc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc8:	e7e3      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000dca:	2a00      	cmp	r2, #0
 8000dcc:	f040 8090 	bne.w	8000ef0 <__udivmoddi4+0x204>
 8000dd0:	eba1 040c 	sub.w	r4, r1, ip
 8000dd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd8:	fa1f f78c 	uxth.w	r7, ip
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000de2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de6:	fb08 4416 	mls	r4, r8, r6, r4
 8000dea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dee:	fb07 f006 	mul.w	r0, r7, r6
 8000df2:	4298      	cmp	r0, r3
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x11c>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0x11a>
 8000e00:	4298      	cmp	r0, r3
 8000e02:	f200 80cd 	bhi.w	8000fa0 <__udivmoddi4+0x2b4>
 8000e06:	4626      	mov	r6, r4
 8000e08:	1a1c      	subs	r4, r3, r0
 8000e0a:	fa1f f38e 	uxth.w	r3, lr
 8000e0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e12:	fb08 4410 	mls	r4, r8, r0, r4
 8000e16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e1a:	fb00 f707 	mul.w	r7, r0, r7
 8000e1e:	429f      	cmp	r7, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x148>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x146>
 8000e2c:	429f      	cmp	r7, r3
 8000e2e:	f200 80b0 	bhi.w	8000f92 <__udivmoddi4+0x2a6>
 8000e32:	4620      	mov	r0, r4
 8000e34:	1bdb      	subs	r3, r3, r7
 8000e36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e3a:	e7a5      	b.n	8000d88 <__udivmoddi4+0x9c>
 8000e3c:	f1c1 0620 	rsb	r6, r1, #32
 8000e40:	408b      	lsls	r3, r1
 8000e42:	fa22 f706 	lsr.w	r7, r2, r6
 8000e46:	431f      	orrs	r7, r3
 8000e48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000e50:	ea43 030c 	orr.w	r3, r3, ip
 8000e54:	40f4      	lsrs	r4, r6
 8000e56:	fa00 f801 	lsl.w	r8, r0, r1
 8000e5a:	0c38      	lsrs	r0, r7, #16
 8000e5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e60:	fbb4 fef0 	udiv	lr, r4, r0
 8000e64:	fa1f fc87 	uxth.w	ip, r7
 8000e68:	fb00 441e 	mls	r4, r0, lr, r4
 8000e6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e70:	fb0e f90c 	mul.w	r9, lr, ip
 8000e74:	45a1      	cmp	r9, r4
 8000e76:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7a:	d90a      	bls.n	8000e92 <__udivmoddi4+0x1a6>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e82:	f080 8084 	bcs.w	8000f8e <__udivmoddi4+0x2a2>
 8000e86:	45a1      	cmp	r9, r4
 8000e88:	f240 8081 	bls.w	8000f8e <__udivmoddi4+0x2a2>
 8000e8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e90:	443c      	add	r4, r7
 8000e92:	eba4 0409 	sub.w	r4, r4, r9
 8000e96:	fa1f f983 	uxth.w	r9, r3
 8000e9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ea2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eaa:	45a4      	cmp	ip, r4
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x1d2>
 8000eae:	193c      	adds	r4, r7, r4
 8000eb0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eb4:	d267      	bcs.n	8000f86 <__udivmoddi4+0x29a>
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d965      	bls.n	8000f86 <__udivmoddi4+0x29a>
 8000eba:	3b02      	subs	r3, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ec2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec6:	eba4 040c 	sub.w	r4, r4, ip
 8000eca:	429c      	cmp	r4, r3
 8000ecc:	46ce      	mov	lr, r9
 8000ece:	469c      	mov	ip, r3
 8000ed0:	d351      	bcc.n	8000f76 <__udivmoddi4+0x28a>
 8000ed2:	d04e      	beq.n	8000f72 <__udivmoddi4+0x286>
 8000ed4:	b155      	cbz	r5, 8000eec <__udivmoddi4+0x200>
 8000ed6:	ebb8 030e 	subs.w	r3, r8, lr
 8000eda:	eb64 040c 	sbc.w	r4, r4, ip
 8000ede:	fa04 f606 	lsl.w	r6, r4, r6
 8000ee2:	40cb      	lsrs	r3, r1
 8000ee4:	431e      	orrs	r6, r3
 8000ee6:	40cc      	lsrs	r4, r1
 8000ee8:	e9c5 6400 	strd	r6, r4, [r5]
 8000eec:	2100      	movs	r1, #0
 8000eee:	e750      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000ef0:	f1c2 0320 	rsb	r3, r2, #32
 8000ef4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa24 f303 	lsr.w	r3, r4, r3
 8000f00:	4094      	lsls	r4, r2
 8000f02:	430c      	orrs	r4, r1
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f0c:	fa1f f78c 	uxth.w	r7, ip
 8000f10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f14:	fb08 3110 	mls	r1, r8, r0, r3
 8000f18:	0c23      	lsrs	r3, r4, #16
 8000f1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1e:	fb00 f107 	mul.w	r1, r0, r7
 8000f22:	4299      	cmp	r1, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x24c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f2e:	d22c      	bcs.n	8000f8a <__udivmoddi4+0x29e>
 8000f30:	4299      	cmp	r1, r3
 8000f32:	d92a      	bls.n	8000f8a <__udivmoddi4+0x29e>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1a5b      	subs	r3, r3, r1
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f40:	fb08 3311 	mls	r3, r8, r1, r3
 8000f44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f48:	fb01 f307 	mul.w	r3, r1, r7
 8000f4c:	42a3      	cmp	r3, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x276>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f58:	d213      	bcs.n	8000f82 <__udivmoddi4+0x296>
 8000f5a:	42a3      	cmp	r3, r4
 8000f5c:	d911      	bls.n	8000f82 <__udivmoddi4+0x296>
 8000f5e:	3902      	subs	r1, #2
 8000f60:	4464      	add	r4, ip
 8000f62:	1ae4      	subs	r4, r4, r3
 8000f64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f68:	e739      	b.n	8000dde <__udivmoddi4+0xf2>
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	e6f0      	b.n	8000d50 <__udivmoddi4+0x64>
 8000f6e:	4608      	mov	r0, r1
 8000f70:	e706      	b.n	8000d80 <__udivmoddi4+0x94>
 8000f72:	45c8      	cmp	r8, r9
 8000f74:	d2ae      	bcs.n	8000ed4 <__udivmoddi4+0x1e8>
 8000f76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7e:	3801      	subs	r0, #1
 8000f80:	e7a8      	b.n	8000ed4 <__udivmoddi4+0x1e8>
 8000f82:	4631      	mov	r1, r6
 8000f84:	e7ed      	b.n	8000f62 <__udivmoddi4+0x276>
 8000f86:	4603      	mov	r3, r0
 8000f88:	e799      	b.n	8000ebe <__udivmoddi4+0x1d2>
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	e7d4      	b.n	8000f38 <__udivmoddi4+0x24c>
 8000f8e:	46d6      	mov	lr, sl
 8000f90:	e77f      	b.n	8000e92 <__udivmoddi4+0x1a6>
 8000f92:	4463      	add	r3, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e74d      	b.n	8000e34 <__udivmoddi4+0x148>
 8000f98:	4606      	mov	r6, r0
 8000f9a:	4623      	mov	r3, r4
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	e70f      	b.n	8000dc0 <__udivmoddi4+0xd4>
 8000fa0:	3e02      	subs	r6, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	e730      	b.n	8000e08 <__udivmoddi4+0x11c>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <Read16>:
uint16_t ina219_calibrationValue;
int16_t ina219_currentDivider_mA;
int16_t ina219_powerMultiplier_mW;

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af04      	add	r7, sp, #16
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc4:	9302      	str	r3, [sp, #8]
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	2180      	movs	r1, #128	@ 0x80
 8000fd4:	f005 fb22 	bl	800661c <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8000fd8:	7b3b      	ldrb	r3, [r7, #12]
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	b21a      	sxth	r2, r3
 8000fde:	7b7b      	ldrb	r3, [r7, #13]
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	b29b      	uxth	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 8001000:	883b      	ldrh	r3, [r7, #0]
 8001002:	0a1b      	lsrs	r3, r3, #8
 8001004:	b29b      	uxth	r3, r3
 8001006:	b2db      	uxtb	r3, r3
 8001008:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 800100a:	883b      	ldrh	r3, [r7, #0]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	b29a      	uxth	r2, r3
 8001018:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	2302      	movs	r3, #2
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	2180      	movs	r1, #128	@ 0x80
 800102c:	f005 f9e2 	bl	80063f4 <HAL_I2C_Mem_Write>
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8001040:	2102      	movs	r1, #2
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ffb2 	bl	8000fac <Read16>
 8001048:	4603      	mov	r3, r0
 800104a:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 800104c:	89fb      	ldrh	r3, [r7, #14]
 800104e:	08db      	lsrs	r3, r3, #3
 8001050:	b29b      	uxth	r3, r3
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	b29b      	uxth	r3, r3

}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8001066:	2104      	movs	r1, #4
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff9f 	bl	8000fac <Read16>
 800106e:	4603      	mov	r3, r0
 8001070:	81fb      	strh	r3, [r7, #14]

	return (result );
 8001072:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ffe8 	bl	800105e <INA219_ReadCurrent_raw>
 800108e:	4603      	mov	r3, r0
 8001090:	81fb      	strh	r3, [r7, #14]

	return (result / ina219_currentDivider_mA );
 8001092:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001096:	4a05      	ldr	r2, [pc, #20]	@ (80010ac <INA219_ReadCurrent+0x2c>)
 8001098:	f9b2 2000 	ldrsh.w	r2, [r2]
 800109c:	fb93 f3f2 	sdiv	r3, r3, r2
 80010a0:	b21b      	sxth	r3, r3
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200001d6 	.word	0x200001d6

080010b0 <INA219_ReadShuntVolage>:

uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 80010b8:	2101      	movs	r1, #1
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff76 	bl	8000fac <Read16>
 80010c0:	4603      	mov	r3, r0
 80010c2:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01 );
 80010c4:	89fb      	ldrh	r3, [r7, #14]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fa5c 	bl	8000584 <__aeabi_i2d>
 80010cc:	a308      	add	r3, pc, #32	@ (adr r3, 80010f0 <INA219_ReadShuntVolage+0x40>)
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	f7ff fac1 	bl	8000658 <__aeabi_dmul>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fd7d 	bl	8000bdc <__aeabi_d2uiz>
 80010e2:	4603      	mov	r3, r0
 80010e4:	b29b      	uxth	r3, r3
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	47ae147b 	.word	0x47ae147b
 80010f4:	3f847ae1 	.word	0x3f847ae1

080010f8 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8001100:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001104:	2100      	movs	r1, #0
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff72 	bl	8000ff0 <Write16>
	HAL_Delay(1);
 800110c:	2001      	movs	r0, #1
 800110e:	f004 fd6d 	bl	8005bec <HAL_Delay>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	460b      	mov	r3, r1
 8001124:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8001126:	887b      	ldrh	r3, [r7, #2]
 8001128:	461a      	mov	r2, r3
 800112a:	2105      	movs	r1, #5
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff5f 	bl	8000ff0 <Write16>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	460b      	mov	r3, r1
 8001144:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8001146:	887b      	ldrh	r3, [r7, #2]
 8001148:	461a      	mov	r2, r3
 800114a:	2100      	movs	r1, #0
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff4f 	bl	8000ff0 <Write16>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <INA219_setCalibration_16V_400mA>:
	INA219_setCalibration(ina219, ina219_calibrationValue);
	INA219_setConfig(ina219, config);
}

void INA219_setCalibration_16V_400mA(INA219_t *ina219)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_16V |
 8001164:	f240 139f 	movw	r3, #415	@ 0x19f
 8001168:	81fb      	strh	r3, [r7, #14]
	                    INA219_CONFIG_GAIN_1_40MV | INA219_CONFIG_BADCRES_12BIT |
	                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
	                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 8192;
 800116a:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <INA219_setCalibration_16V_400mA+0x40>)
 800116c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001170:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 20;    // Current LSB = 50uA per bit (1000/50 = 20)
 8001172:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <INA219_setCalibration_16V_400mA+0x44>)
 8001174:	2214      	movs	r2, #20
 8001176:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 1.0f; // Power LSB = 1mW per bit
 8001178:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <INA219_setCalibration_16V_400mA+0x48>)
 800117a:	2201      	movs	r2, #1
 800117c:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 800117e:	4b07      	ldr	r3, [pc, #28]	@ (800119c <INA219_setCalibration_16V_400mA+0x40>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	4619      	mov	r1, r3
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ffc8 	bl	800111a <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 800118a:	89fb      	ldrh	r3, [r7, #14]
 800118c:	4619      	mov	r1, r3
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ffd3 	bl	800113a <INA219_setConfig>
}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200001d4 	.word	0x200001d4
 80011a0:	200001d6 	.word	0x200001d6
 80011a4:	200001d8 	.word	0x200001d8

080011a8 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	4613      	mov	r3, r2
 80011b4:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	79fa      	ldrb	r2, [r7, #7]
 80011c0:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 80011c2:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <INA219_Init+0x5c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <INA219_Init+0x60>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	b299      	uxth	r1, r3
 80011d6:	2302      	movs	r3, #2
 80011d8:	2203      	movs	r2, #3
 80011da:	68b8      	ldr	r0, [r7, #8]
 80011dc:	f005 fb38 	bl	8006850 <HAL_I2C_IsDeviceReady>
 80011e0:	4603      	mov	r3, r0
 80011e2:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d107      	bne.n	80011fa <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f7ff ff84 	bl	80010f8 <INA219_Reset>
		INA219_setCalibration_16V_400mA(ina219);
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f7ff ffb3 	bl	800115c <INA219_setCalibration_16V_400mA>

		return 1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <INA219_Init+0x54>
	}

	else
	{
		return 0;
 80011fa:	2300      	movs	r3, #0
	}
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200001d6 	.word	0x200001d6
 8001208:	200001d8 	.word	0x200001d8

0800120c <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 fa47 	bl	80016a8 <null_ptr_check>
 800121a:	4603      	mov	r3, r0
 800121c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d117      	bne.n	8001256 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	20d0      	movs	r0, #208	@ 0xd0
 800122e:	f000 f818 	bl	8001262 <bmp2_get_regs>
 8001232:	4603      	mov	r3, r0
 8001234:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8001236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10b      	bne.n	8001256 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b58      	cmp	r3, #88	@ 0x58
 8001244:	d105      	bne.n	8001252 <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 fa79 	bl	800173e <get_calib_param>
 800124c:	4603      	mov	r3, r0
 800124e:	73fb      	strb	r3, [r7, #15]
 8001250:	e001      	b.n	8001256 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8001252:	23fc      	movs	r3, #252	@ 0xfc
 8001254:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8001262:	b590      	push	{r4, r7, lr}
 8001264:	b087      	sub	sp, #28
 8001266:	af00      	add	r7, sp, #0
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	4603      	mov	r3, r0
 8001270:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001272:	6838      	ldr	r0, [r7, #0]
 8001274:	f000 fa18 	bl	80016a8 <null_ptr_check>
 8001278:	4603      	mov	r3, r0
 800127a:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 800127c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d11e      	bne.n	80012c2 <bmp2_get_regs+0x60>
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d01b      	beq.n	80012c2 <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	785b      	ldrb	r3, [r3, #1]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d103      	bne.n	800129a <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001298:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	68dc      	ldr	r4, [r3, #12]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	7bf8      	ldrb	r0, [r7, #15]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	68b9      	ldr	r1, [r7, #8]
 80012a8:	47a0      	blx	r4
 80012aa:	4603      	mov	r3, r0
 80012ac:	461a      	mov	r2, r3
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d004      	beq.n	80012c6 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 80012bc:	23fe      	movs	r3, #254	@ 0xfe
 80012be:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80012c0:	e001      	b.n	80012c6 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012c2:	23ff      	movs	r3, #255	@ 0xff
 80012c4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	371c      	adds	r7, #28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd90      	pop	{r4, r7, pc}

080012d2 <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 80012d2:	b590      	push	{r4, r7, lr}
 80012d4:	b08b      	sub	sp, #44	@ 0x2c
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	60f8      	str	r0, [r7, #12]
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d901      	bls.n	80012ea <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 80012e6:	2304      	movs	r3, #4
 80012e8:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 80012ea:	6838      	ldr	r0, [r7, #0]
 80012ec:	f000 f9dc 	bl	80016a8 <null_ptr_check>
 80012f0:	4603      	mov	r3, r0
 80012f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80012f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d150      	bne.n	80013a0 <bmp2_set_regs+0xce>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d04d      	beq.n	80013a0 <bmp2_set_regs+0xce>
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d04a      	beq.n	80013a0 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d043      	beq.n	8001398 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	785b      	ldrb	r3, [r3, #1]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d114      	bne.n	8001348 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800131e:	2300      	movs	r3, #0
 8001320:	77fb      	strb	r3, [r7, #31]
 8001322:	e00d      	b.n	8001340 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 8001324:	7ffb      	ldrb	r3, [r7, #31]
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	4413      	add	r3, r2
 800132a:	781a      	ldrb	r2, [r3, #0]
 800132c:	7ffb      	ldrb	r3, [r7, #31]
 800132e:	68f9      	ldr	r1, [r7, #12]
 8001330:	440b      	add	r3, r1
 8001332:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800133a:	7ffb      	ldrb	r3, [r7, #31]
 800133c:	3301      	adds	r3, #1
 800133e:	77fb      	strb	r3, [r7, #31]
 8001340:	7ffb      	ldrb	r3, [r7, #31]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	429a      	cmp	r2, r3
 8001346:	d8ed      	bhi.n	8001324 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d90b      	bls.n	8001366 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 800134e:	f107 0114 	add.w	r1, r7, #20
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f000 f9c6 	bl	80016e8 <interleave_data>
                temp_len = ((len * 2) - 1);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	3b01      	subs	r3, #1
 8001362:	623b      	str	r3, [r7, #32]
 8001364:	e001      	b.n	800136a <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	691c      	ldr	r4, [r3, #16]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	7818      	ldrb	r0, [r3, #0]
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f107 0114 	add.w	r1, r7, #20
 800137a:	6a3a      	ldr	r2, [r7, #32]
 800137c:	47a0      	blx	r4
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00b      	beq.n	80013a8 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 8001390:	23fe      	movs	r3, #254	@ 0xfe
 8001392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 8001396:	e007      	b.n	80013a8 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8001398:	23fd      	movs	r3, #253	@ 0xfd
 800139a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 800139e:	e003      	b.n	80013a8 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80013a0:	23ff      	movs	r3, #255	@ 0xff
 80013a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80013a6:	e000      	b.n	80013aa <bmp2_set_regs+0xd8>
        if (len > 0)
 80013a8:	bf00      	nop
    }

    return rslt;
 80013aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	372c      	adds	r7, #44	@ 0x2c
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd90      	pop	{r4, r7, pc}

080013b6 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 80013be:	23e0      	movs	r3, #224	@ 0xe0
 80013c0:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 80013c2:	23b6      	movs	r3, #182	@ 0xb6
 80013c4:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80013c6:	f107 010d 	add.w	r1, r7, #13
 80013ca:	f107 000e 	add.w	r0, r7, #14
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f7ff ff7e 	bl	80012d2 <bmp2_set_regs>
 80013d6:	4603      	mov	r3, r0
 80013d8:	73fb      	strb	r3, [r7, #15]

    return rslt;
 80013da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b084      	sub	sp, #16
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80013f0:	2300      	movs	r3, #0
 80013f2:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d02d      	beq.n	8001456 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80013fa:	f107 010c 	add.w	r1, r7, #12
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	2202      	movs	r2, #2
 8001402:	20f4      	movs	r0, #244	@ 0xf4
 8001404:	f7ff ff2d 	bl	8001262 <bmp2_get_regs>
 8001408:	4603      	mov	r3, r0
 800140a:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 800140c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d122      	bne.n	800145a <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8001414:	7b3b      	ldrb	r3, [r7, #12]
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	b2da      	uxtb	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 800141e:	7b3b      	ldrb	r3, [r7, #12]
 8001420:	109b      	asrs	r3, r3, #2
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	b2da      	uxtb	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 800142e:	7b7b      	ldrb	r3, [r7, #13]
 8001430:	095b      	lsrs	r3, r3, #5
 8001432:	b2da      	uxtb	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 8001438:	7b7b      	ldrb	r3, [r7, #13]
 800143a:	109b      	asrs	r3, r3, #2
 800143c:	b2db      	uxtb	r3, r3
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	b2da      	uxtb	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 8001448:	7b7b      	ldrb	r3, [r7, #13]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	b2da      	uxtb	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	715a      	strb	r2, [r3, #5]
 8001454:	e001      	b.n	800145a <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001456:	23ff      	movs	r3, #255	@ 0xff
 8001458:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800145a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	2000      	movs	r0, #0
 8001476:	f000 f9fd 	bl	8001874 <conf_sensor>
 800147a:	4603      	mov	r3, r0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d01b      	beq.n	80014cc <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 8001494:	f107 010e 	add.w	r1, r7, #14
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	2201      	movs	r2, #1
 800149c:	20f3      	movs	r0, #243	@ 0xf3
 800149e:	f7ff fee0 	bl	8001262 <bmp2_get_regs>
 80014a2:	4603      	mov	r3, r0
 80014a4:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 80014a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d110      	bne.n	80014d0 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 80014ae:	7bbb      	ldrb	r3, [r7, #14]
 80014b0:	10db      	asrs	r3, r3, #3
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 80014be:	7bbb      	ldrb	r3, [r7, #14]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	705a      	strb	r2, [r3, #1]
 80014ca:	e001      	b.n	80014d0 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80014cc:	23ff      	movs	r3, #255	@ 0xff
 80014ce:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
 80014e8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	68b9      	ldr	r1, [r7, #8]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 f9bf 	bl	8001874 <conf_sensor>
 80014f6:	4603      	mov	r3, r0
 80014f8:	75fb      	strb	r3, [r7, #23]

    return rslt;
 80014fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 8001510:	2300      	movs	r3, #0
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	2300      	movs	r3, #0
 8001516:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001518:	f107 0308 	add.w	r3, r7, #8
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d024      	beq.n	8001572 <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8001528:	f107 0110 	add.w	r1, r7, #16
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	2206      	movs	r2, #6
 8001530:	20f7      	movs	r0, #247	@ 0xf7
 8001532:	f7ff fe96 	bl	8001262 <bmp2_get_regs>
 8001536:	4603      	mov	r3, r0
 8001538:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 800153a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d119      	bne.n	8001576 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 8001542:	f107 0208 	add.w	r2, r7, #8
 8001546:	f107 0310 	add.w	r3, r7, #16
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f000 fab9 	bl	8001ac4 <parse_sensor_data>
 8001552:	4603      	mov	r3, r0
 8001554:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001556:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10b      	bne.n	8001576 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f80b 	bl	8001582 <bmp2_compensate_data>
 800156c:	4603      	mov	r3, r0
 800156e:	75fb      	strb	r3, [r7, #23]
 8001570:	e001      	b.n	8001576 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001572:	23ff      	movs	r3, #255	@ 0xff
 8001574:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001576:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f88a 	bl	80016a8 <null_ptr_check>
 8001594:	4603      	mov	r3, r0
 8001596:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 8001598:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d129      	bne.n	80015f4 <bmp2_compensate_data+0x72>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d026      	beq.n	80015f4 <bmp2_compensate_data+0x72>
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d023      	beq.n	80015f4 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	3308      	adds	r3, #8
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	68f9      	ldr	r1, [r7, #12]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 fabb 	bl	8001b4c <compensate_temperature>
 80015d6:	4603      	mov	r3, r0
 80015d8:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80015da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10a      	bne.n	80015f8 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	68f9      	ldr	r1, [r7, #12]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 fba5 	bl	8001d38 <compensate_pressure>
 80015ee:	4603      	mov	r3, r0
 80015f0:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 80015f2:	e001      	b.n	80015f8 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80015f4:	23ff      	movs	r3, #255	@ 0xff
 80015f6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80015f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001604:	b5b0      	push	{r4, r5, r7, lr}
 8001606:	b092      	sub	sp, #72	@ 0x48
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 8001610:	4b23      	ldr	r3, [pc, #140]	@ (80016a0 <bmp2_compute_meas_time+0x9c>)
 8001612:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001616:	461d      	mov	r5, r3
 8001618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800161a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800161c:	682b      	ldr	r3, [r5, #0]
 800161e:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 8001620:	4b20      	ldr	r3, [pc, #128]	@ (80016a4 <bmp2_compute_meas_time+0xa0>)
 8001622:	f107 0410 	add.w	r4, r7, #16
 8001626:	461d      	mov	r5, r3
 8001628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800162a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800162c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001630:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 f837 	bl	80016a8 <null_ptr_check>
 800163a:	4603      	mov	r3, r0
 800163c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 8001640:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8001644:	2b00      	cmp	r3, #0
 8001646:	d122      	bne.n	800168e <bmp2_compute_meas_time+0x8a>
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d01f      	beq.n	800168e <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	7e1b      	ldrb	r3, [r3, #24]
 8001652:	2b03      	cmp	r3, #3
 8001654:	d111      	bne.n	800167a <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	78db      	ldrb	r3, [r3, #3]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	3348      	adds	r3, #72	@ 0x48
 800165e:	443b      	add	r3, r7
 8001660:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	789b      	ldrb	r3, [r3, #2]
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	3348      	adds	r3, #72	@ 0x48
 800166c:	443b      	add	r3, r7
 800166e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001672:	441a      	add	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001678:	e00c      	b.n	8001694 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	78db      	ldrb	r3, [r3, #3]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	3348      	adds	r3, #72	@ 0x48
 8001682:	443b      	add	r3, r7
 8001684:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 800168c:	e002      	b.n	8001694 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800168e:	23ff      	movs	r3, #255	@ 0xff
 8001690:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 8001694:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8001698:	4618      	mov	r0, r3
 800169a:	3748      	adds	r7, #72	@ 0x48
 800169c:	46bd      	mov	sp, r7
 800169e:	bdb0      	pop	{r4, r5, r7, pc}
 80016a0:	0800c3cc 	.word	0x0800c3cc
 80016a4:	0800c3e0 	.word	0x0800c3e0

080016a8 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00b      	beq.n	80016ce <null_ptr_check+0x26>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d007      	beq.n	80016ce <null_ptr_check+0x26>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <null_ptr_check+0x26>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d102      	bne.n	80016d4 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 80016ce:	23ff      	movs	r3, #255	@ 0xff
 80016d0:	73fb      	strb	r3, [r7, #15]
 80016d2:	e001      	b.n	80016d8 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80016d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
 80016f4:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80016f6:	2301      	movs	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	e015      	b.n	8001728 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	441a      	add	r2, r3
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	3b01      	subs	r3, #1
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	440b      	add	r3, r1
 800170c:	7812      	ldrb	r2, [r2, #0]
 800170e:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	441a      	add	r2, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	68b9      	ldr	r1, [r7, #8]
 800171c:	440b      	add	r3, r1
 800171e:	7812      	ldrb	r2, [r2, #0]
 8001720:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d3e5      	bcc.n	80016fc <interleave_data+0x14>
    }
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	371c      	adds	r7, #28
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b08a      	sub	sp, #40	@ 0x28
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	f107 0310 	add.w	r3, r7, #16
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	611a      	str	r2, [r3, #16]
 800175a:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 800175c:	f107 010c 	add.w	r1, r7, #12
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2219      	movs	r2, #25
 8001764:	2088      	movs	r0, #136	@ 0x88
 8001766:	f7ff fd7c 	bl	8001262 <bmp2_get_regs>
 800176a:	4603      	mov	r3, r0
 800176c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMP2_OK)
 8001770:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001774:	2b00      	cmp	r3, #0
 8001776:	d177      	bne.n	8001868 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 8001778:	7b7b      	ldrb	r3, [r7, #13]
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	b21a      	sxth	r2, r3
 800177e:	7b3b      	ldrb	r3, [r7, #12]
 8001780:	b21b      	sxth	r3, r3
 8001782:	4313      	orrs	r3, r2
 8001784:	b21b      	sxth	r3, r3
 8001786:	b29a      	uxth	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	b21a      	sxth	r2, r3
 8001792:	7bbb      	ldrb	r3, [r7, #14]
 8001794:	b21b      	sxth	r3, r3
 8001796:	4313      	orrs	r3, r2
 8001798:	b21a      	sxth	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 800179e:	7c7b      	ldrb	r3, [r7, #17]
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	7c3b      	ldrb	r3, [r7, #16]
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	4313      	orrs	r3, r2
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 80017b0:	7cfb      	ldrb	r3, [r7, #19]
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	b21a      	sxth	r2, r3
 80017b6:	7cbb      	ldrb	r3, [r7, #18]
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	4313      	orrs	r3, r2
 80017bc:	b21b      	sxth	r3, r3
 80017be:	b29a      	uxth	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	845a      	strh	r2, [r3, #34]	@ 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 80017c4:	7d7b      	ldrb	r3, [r7, #21]
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	7d3b      	ldrb	r3, [r7, #20]
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	4313      	orrs	r3, r2
 80017d0:	b21a      	sxth	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	b21a      	sxth	r2, r3
 80017dc:	7dbb      	ldrb	r3, [r7, #22]
 80017de:	b21b      	sxth	r3, r3
 80017e0:	4313      	orrs	r3, r2
 80017e2:	b21a      	sxth	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 80017e8:	7e7b      	ldrb	r3, [r7, #25]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	b21a      	sxth	r2, r3
 80017ee:	7e3b      	ldrb	r3, [r7, #24]
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	4313      	orrs	r3, r2
 80017f4:	b21a      	sxth	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 80017fa:	7efb      	ldrb	r3, [r7, #27]
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	b21a      	sxth	r2, r3
 8001800:	7ebb      	ldrb	r3, [r7, #26]
 8001802:	b21b      	sxth	r3, r3
 8001804:	4313      	orrs	r3, r2
 8001806:	b21a      	sxth	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 800180c:	7f7b      	ldrb	r3, [r7, #29]
 800180e:	021b      	lsls	r3, r3, #8
 8001810:	b21a      	sxth	r2, r3
 8001812:	7f3b      	ldrb	r3, [r7, #28]
 8001814:	b21b      	sxth	r3, r3
 8001816:	4313      	orrs	r3, r2
 8001818:	b21a      	sxth	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 800181e:	7ffb      	ldrb	r3, [r7, #31]
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	b21a      	sxth	r2, r3
 8001824:	7fbb      	ldrb	r3, [r7, #30]
 8001826:	b21b      	sxth	r3, r3
 8001828:	4313      	orrs	r3, r2
 800182a:	b21a      	sxth	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	85da      	strh	r2, [r3, #46]	@ 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8001830:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	b21a      	sxth	r2, r3
 8001838:	f897 3020 	ldrb.w	r3, [r7, #32]
 800183c:	b21b      	sxth	r3, r3
 800183e:	4313      	orrs	r3, r2
 8001840:	b21a      	sxth	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 8001846:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	b21a      	sxth	r2, r3
 800184e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001852:	b21b      	sxth	r3, r3
 8001854:	4313      	orrs	r3, r2
 8001856:	b21a      	sxth	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 800185c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001860:	b25a      	sxtb	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    return rslt;
 8001868:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800186c:	4618      	mov	r0, r3
 800186e:	3728      	adds	r7, #40	@ 0x28
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
 8001880:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001882:	2300      	movs	r3, #0
 8001884:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 8001886:	f24f 53f4 	movw	r3, #62964	@ 0xf5f4
 800188a:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d074      	beq.n	800197c <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001892:	f107 0114 	add.w	r1, r7, #20
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2202      	movs	r2, #2
 800189a:	20f4      	movs	r0, #244	@ 0xf4
 800189c:	f7ff fce1 	bl	8001262 <bmp2_get_regs>
 80018a0:	4603      	mov	r3, r0
 80018a2:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80018a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d169      	bne.n	8001980 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff fd82 	bl	80013b6 <bmp2_soft_reset>
 80018b2:	4603      	mov	r3, r0
 80018b4:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80018b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d160      	bne.n	8001980 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	68b9      	ldr	r1, [r7, #8]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 f861 	bl	800198c <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 80018ca:	7d7b      	ldrb	r3, [r7, #21]
 80018cc:	b25b      	sxtb	r3, r3
 80018ce:	f003 031f 	and.w	r3, r3, #31
 80018d2:	b25a      	sxtb	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	789b      	ldrb	r3, [r3, #2]
 80018d8:	015b      	lsls	r3, r3, #5
 80018da:	b25b      	sxtb	r3, r3
 80018dc:	4313      	orrs	r3, r2
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 80018e4:	7d7b      	ldrb	r3, [r7, #21]
 80018e6:	b25b      	sxtb	r3, r3
 80018e8:	f023 031c 	bic.w	r3, r3, #28
 80018ec:	b25a      	sxtb	r2, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	791b      	ldrb	r3, [r3, #4]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	f003 031c 	and.w	r3, r3, #28
 80018fa:	b25b      	sxtb	r3, r3
 80018fc:	4313      	orrs	r3, r2
 80018fe:	b25b      	sxtb	r3, r3
 8001900:	b2db      	uxtb	r3, r3
 8001902:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001904:	7d7b      	ldrb	r3, [r7, #21]
 8001906:	b25b      	sxtb	r3, r3
 8001908:	f023 0301 	bic.w	r3, r3, #1
 800190c:	b25a      	sxtb	r2, r3
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	795b      	ldrb	r3, [r3, #5]
 8001912:	b25b      	sxtb	r3, r3
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	b25b      	sxtb	r3, r3
 800191a:	4313      	orrs	r3, r2
 800191c:	b25b      	sxtb	r3, r3
 800191e:	b2db      	uxtb	r3, r3
 8001920:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 8001922:	f107 0114 	add.w	r1, r7, #20
 8001926:	f107 0010 	add.w	r0, r7, #16
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2202      	movs	r2, #2
 800192e:	f7ff fcd0 	bl	80012d2 <bmp2_set_regs>
 8001932:	4603      	mov	r3, r0
 8001934:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 8001936:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d120      	bne.n	8001980 <conf_sensor+0x10c>
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d01d      	beq.n	8001980 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7bfa      	ldrb	r2, [r7, #15]
 8001948:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 800194a:	7d3b      	ldrb	r3, [r7, #20]
 800194c:	b25b      	sxtb	r3, r3
 800194e:	f023 0303 	bic.w	r3, r3, #3
 8001952:	b25a      	sxtb	r2, r3
 8001954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	b25b      	sxtb	r3, r3
 800195e:	4313      	orrs	r3, r2
 8001960:	b25b      	sxtb	r3, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 8001966:	f107 0114 	add.w	r1, r7, #20
 800196a:	f107 0010 	add.w	r0, r7, #16
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f7ff fcae 	bl	80012d2 <bmp2_set_regs>
 8001976:	4603      	mov	r3, r0
 8001978:	75fb      	strb	r3, [r7, #23]
 800197a:	e001      	b.n	8001980 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800197c:	23ff      	movs	r3, #255	@ 0xff
 800197e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001980:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	78db      	ldrb	r3, [r3, #3]
 800199a:	2b04      	cmp	r3, #4
 800199c:	f200 808b 	bhi.w	8001ab6 <set_os_mode+0x12a>
 80019a0:	a201      	add	r2, pc, #4	@ (adr r2, 80019a8 <set_os_mode+0x1c>)
 80019a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a6:	bf00      	nop
 80019a8:	080019bd 	.word	0x080019bd
 80019ac:	080019ef 	.word	0x080019ef
 80019b0:	08001a21 	.word	0x08001a21
 80019b4:	08001a53 	.word	0x08001a53
 80019b8:	08001a85 	.word	0x08001a85
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	b25b      	sxtb	r3, r3
 80019c2:	f003 031f 	and.w	r3, r3, #31
 80019c6:	b25b      	sxtb	r3, r3
 80019c8:	f043 0320 	orr.w	r3, r3, #32
 80019cc:	b25b      	sxtb	r3, r3
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	f023 031c 	bic.w	r3, r3, #28
 80019de:	b25b      	sxtb	r3, r3
 80019e0:	f043 0304 	orr.w	r3, r3, #4
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	701a      	strb	r2, [r3, #0]
            break;
 80019ec:	e064      	b.n	8001ab8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	b25b      	sxtb	r3, r3
 80019f4:	f003 031f 	and.w	r3, r3, #31
 80019f8:	b25b      	sxtb	r3, r3
 80019fa:	f043 0320 	orr.w	r3, r3, #32
 80019fe:	b25b      	sxtb	r3, r3
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	b25b      	sxtb	r3, r3
 8001a0c:	f023 031c 	bic.w	r3, r3, #28
 8001a10:	b25b      	sxtb	r3, r3
 8001a12:	f043 0308 	orr.w	r3, r3, #8
 8001a16:	b25b      	sxtb	r3, r3
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	701a      	strb	r2, [r3, #0]
            break;
 8001a1e:	e04b      	b.n	8001ab8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b25b      	sxtb	r3, r3
 8001a26:	f003 031f 	and.w	r3, r3, #31
 8001a2a:	b25b      	sxtb	r3, r3
 8001a2c:	f043 0320 	orr.w	r3, r3, #32
 8001a30:	b25b      	sxtb	r3, r3
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	f023 031c 	bic.w	r3, r3, #28
 8001a42:	b25b      	sxtb	r3, r3
 8001a44:	f043 030c 	orr.w	r3, r3, #12
 8001a48:	b25b      	sxtb	r3, r3
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	701a      	strb	r2, [r3, #0]
            break;
 8001a50:	e032      	b.n	8001ab8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	b25b      	sxtb	r3, r3
 8001a58:	f003 031f 	and.w	r3, r3, #31
 8001a5c:	b25b      	sxtb	r3, r3
 8001a5e:	f043 0320 	orr.w	r3, r3, #32
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	b25b      	sxtb	r3, r3
 8001a70:	f023 031c 	bic.w	r3, r3, #28
 8001a74:	b25b      	sxtb	r3, r3
 8001a76:	f043 0310 	orr.w	r3, r3, #16
 8001a7a:	b25b      	sxtb	r3, r3
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	701a      	strb	r2, [r3, #0]
            break;
 8001a82:	e019      	b.n	8001ab8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	b25b      	sxtb	r3, r3
 8001a8a:	f003 031f 	and.w	r3, r3, #31
 8001a8e:	b25b      	sxtb	r3, r3
 8001a90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	b25b      	sxtb	r3, r3
 8001aa2:	f023 031c 	bic.w	r3, r3, #28
 8001aa6:	b25b      	sxtb	r3, r3
 8001aa8:	f043 0314 	orr.w	r3, r3, #20
 8001aac:	b25b      	sxtb	r3, r3
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	701a      	strb	r2, [r3, #0]
            break;
 8001ab4:	e000      	b.n	8001ab8 <set_os_mode+0x12c>
        default:
            break;
 8001ab6:	bf00      	nop
    }
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	031b      	lsls	r3, r3, #12
 8001ad4:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	091b      	lsrs	r3, r3, #4
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	431a      	orrs	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	431a      	orrs	r2, r3
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3303      	adds	r3, #3
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	031b      	lsls	r3, r3, #12
 8001b02:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3304      	adds	r3, #4
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3305      	adds	r3, #5
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	461a      	mov	r2, r3
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4619      	mov	r1, r3
 8001b34:	4610      	mov	r0, r2
 8001b36:	f000 fae3 	bl	8002100 <st_check_boundaries>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	72fb      	strb	r3, [r7, #11]

    return rslt;
 8001b3e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001b4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b50:	b08c      	sub	sp, #48	@ 0x30
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fd0d 	bl	8000584 <__aeabi_i2d>
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	4b6c      	ldr	r3, [pc, #432]	@ (8001d20 <compensate_temperature+0x1d4>)
 8001b70:	f7fe fe9c 	bl	80008ac <__aeabi_ddiv>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4614      	mov	r4, r2
 8001b7a:	461d      	mov	r5, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	8b9b      	ldrh	r3, [r3, #28]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fcef 	bl	8000564 <__aeabi_ui2d>
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	4b66      	ldr	r3, [pc, #408]	@ (8001d24 <compensate_temperature+0x1d8>)
 8001b8c:	f7fe fe8e 	bl	80008ac <__aeabi_ddiv>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4620      	mov	r0, r4
 8001b96:	4629      	mov	r1, r5
 8001b98:	f7fe fba6 	bl	80002e8 <__aeabi_dsub>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4614      	mov	r4, r2
 8001ba2:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fcea 	bl	8000584 <__aeabi_i2d>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	f7fe fd4e 	bl	8000658 <__aeabi_dmul>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fcdb 	bl	8000584 <__aeabi_i2d>
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001bd6:	f7fe fe69 	bl	80008ac <__aeabi_ddiv>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4614      	mov	r4, r2
 8001be0:	461d      	mov	r5, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	8b9b      	ldrh	r3, [r3, #28]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fcbc 	bl	8000564 <__aeabi_ui2d>
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	4b4d      	ldr	r3, [pc, #308]	@ (8001d28 <compensate_temperature+0x1dc>)
 8001bf2:	f7fe fe5b 	bl	80008ac <__aeabi_ddiv>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	f7fe fb73 	bl	80002e8 <__aeabi_dsub>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4614      	mov	r4, r2
 8001c08:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fcb8 	bl	8000584 <__aeabi_i2d>
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001c1c:	f7fe fe46 	bl	80008ac <__aeabi_ddiv>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4690      	mov	r8, r2
 8001c26:	4699      	mov	r9, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	8b9b      	ldrh	r3, [r3, #28]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fc99 	bl	8000564 <__aeabi_ui2d>
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	4b3c      	ldr	r3, [pc, #240]	@ (8001d28 <compensate_temperature+0x1dc>)
 8001c38:	f7fe fe38 	bl	80008ac <__aeabi_ddiv>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4640      	mov	r0, r8
 8001c42:	4649      	mov	r1, r9
 8001c44:	f7fe fb50 	bl	80002e8 <__aeabi_dsub>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	4629      	mov	r1, r5
 8001c50:	f7fe fd02 	bl	8000658 <__aeabi_dmul>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4614      	mov	r4, r2
 8001c5a:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc8e 	bl	8000584 <__aeabi_i2d>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
    var2 =
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	4629      	mov	r1, r5
 8001c70:	f7fe fcf2 	bl	8000658 <__aeabi_dmul>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001c7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c84:	f7fe fb32 	bl	80002ec <__adddf3>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f7fe ff7c 	bl	8000b8c <__aeabi_d2iz>
 8001c94:	4602      	mov	r2, r0
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	639a      	str	r2, [r3, #56]	@ 0x38
    temperature = (var1 + var2) / 5120.0;
 8001c9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ca2:	f7fe fb23 	bl	80002ec <__adddf3>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d2c <compensate_temperature+0x1e0>)
 8001cb4:	f7fe fdfa 	bl	80008ac <__aeabi_ddiv>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d30 <compensate_temperature+0x1e4>)
 8001cc6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cca:	f7fe ff37 	bl	8000b3c <__aeabi_dcmplt>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d007      	beq.n	8001ce4 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	4b15      	ldr	r3, [pc, #84]	@ (8001d30 <compensate_temperature+0x1e4>)
 8001cda:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <compensate_temperature+0x1e8>)
 8001cea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cee:	f7fe ff43 	bl	8000b78 <__aeabi_dcmpgt>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d007      	beq.n	8001d08 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8001d34 <compensate_temperature+0x1e8>)
 8001cfe:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    (*comp_temperature) = temperature;
 8001d08:	68f9      	ldr	r1, [r7, #12]
 8001d0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d0e:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001d12:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3730      	adds	r7, #48	@ 0x30
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d20:	40d00000 	.word	0x40d00000
 8001d24:	40900000 	.word	0x40900000
 8001d28:	40c00000 	.word	0x40c00000
 8001d2c:	40b40000 	.word	0x40b40000
 8001d30:	c0440000 	.word	0xc0440000
 8001d34:	40554000 	.word	0x40554000

08001d38 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001d38:	b5b0      	push	{r4, r5, r7, lr}
 8001d3a:	b08c      	sub	sp, #48	@ 0x30
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fc12 	bl	8000584 <__aeabi_i2d>
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d68:	f7fe fda0 	bl	80008ac <__aeabi_ddiv>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	4bcb      	ldr	r3, [pc, #812]	@ (80020a8 <compensate_pressure+0x370>)
 8001d7a:	f7fe fab5 	bl	80002e8 <__aeabi_dsub>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001d86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d8e:	f7fe fc63 	bl	8000658 <__aeabi_dmul>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4614      	mov	r4, r2
 8001d98:	461d      	mov	r5, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fbef 	bl	8000584 <__aeabi_i2d>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4620      	mov	r0, r4
 8001dac:	4629      	mov	r1, r5
 8001dae:	f7fe fc53 	bl	8000658 <__aeabi_dmul>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4610      	mov	r0, r2
 8001db8:	4619      	mov	r1, r3
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	4bbb      	ldr	r3, [pc, #748]	@ (80020ac <compensate_pressure+0x374>)
 8001dc0:	f7fe fd74 	bl	80008ac <__aeabi_ddiv>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fbd6 	bl	8000584 <__aeabi_i2d>
 8001dd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ddc:	f7fe fc3c 	bl	8000658 <__aeabi_dmul>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	f7fe fa7e 	bl	80002ec <__adddf3>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001df8:	f7fe fa78 	bl	80002ec <__adddf3>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	4ba9      	ldr	r3, [pc, #676]	@ (80020b0 <compensate_pressure+0x378>)
 8001e0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e0e:	f7fe fd4d 	bl	80008ac <__aeabi_ddiv>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4614      	mov	r4, r2
 8001e18:	461d      	mov	r5, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fbaf 	bl	8000584 <__aeabi_i2d>
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	4ba2      	ldr	r3, [pc, #648]	@ (80020b4 <compensate_pressure+0x37c>)
 8001e2c:	f7fe fc14 	bl	8000658 <__aeabi_dmul>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4620      	mov	r0, r4
 8001e36:	4629      	mov	r1, r5
 8001e38:	f7fe fa58 	bl	80002ec <__adddf3>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb9a 	bl	8000584 <__aeabi_i2d>
 8001e50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e54:	f7fe fc00 	bl	8000658 <__aeabi_dmul>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4619      	mov	r1, r3
 8001e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e64:	f7fe fbf8 	bl	8000658 <__aeabi_dmul>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	4b90      	ldr	r3, [pc, #576]	@ (80020b8 <compensate_pressure+0x380>)
 8001e76:	f7fe fd19 	bl	80008ac <__aeabi_ddiv>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4614      	mov	r4, r2
 8001e80:	461d      	mov	r5, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb7b 	bl	8000584 <__aeabi_i2d>
 8001e8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e92:	f7fe fbe1 	bl	8000658 <__aeabi_dmul>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	4629      	mov	r1, r5
 8001e9e:	f7fe fa25 	bl	80002ec <__adddf3>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	4b82      	ldr	r3, [pc, #520]	@ (80020b8 <compensate_pressure+0x380>)
 8001eb0:	f7fe fcfc 	bl	80008ac <__aeabi_ddiv>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	4b7a      	ldr	r3, [pc, #488]	@ (80020ac <compensate_pressure+0x374>)
 8001ec2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ec6:	f7fe fcf1 	bl	80008ac <__aeabi_ddiv>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	4b79      	ldr	r3, [pc, #484]	@ (80020bc <compensate_pressure+0x384>)
 8001ed8:	f7fe fa08 	bl	80002ec <__adddf3>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4614      	mov	r4, r2
 8001ee2:	461d      	mov	r5, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fb3b 	bl	8000564 <__aeabi_ui2d>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	4629      	mov	r1, r5
 8001ef6:	f7fe fbaf 	bl	8000658 <__aeabi_dmul>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f0e:	f7fe fe15 	bl	8000b3c <__aeabi_dcmplt>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10b      	bne.n	8001f30 <compensate_pressure+0x1f8>
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f24:	f7fe fe28 	bl	8000b78 <__aeabi_dcmpgt>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 80de 	beq.w	80020ec <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe fb15 	bl	8000564 <__aeabi_ui2d>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	f04f 0000 	mov.w	r0, #0
 8001f42:	495f      	ldr	r1, [pc, #380]	@ (80020c0 <compensate_pressure+0x388>)
 8001f44:	f7fe f9d0 	bl	80002e8 <__aeabi_dsub>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	4b5b      	ldr	r3, [pc, #364]	@ (80020c4 <compensate_pressure+0x38c>)
 8001f56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f5a:	f7fe fca7 	bl	80008ac <__aeabi_ddiv>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f66:	f7fe f9bf 	bl	80002e8 <__aeabi_dsub>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4619      	mov	r1, r3
 8001f72:	a347      	add	r3, pc, #284	@ (adr r3, 8002090 <compensate_pressure+0x358>)
 8001f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f78:	f7fe fb6e 	bl	8000658 <__aeabi_dmul>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f88:	f7fe fc90 	bl	80008ac <__aeabi_ddiv>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe faf2 	bl	8000584 <__aeabi_i2d>
 8001fa0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fa4:	f7fe fb58 	bl	8000658 <__aeabi_dmul>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4610      	mov	r0, r2
 8001fae:	4619      	mov	r1, r3
 8001fb0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fb4:	f7fe fb50 	bl	8000658 <__aeabi_dmul>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	4b40      	ldr	r3, [pc, #256]	@ (80020c8 <compensate_pressure+0x390>)
 8001fc6:	f7fe fc71 	bl	80008ac <__aeabi_ddiv>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fad3 	bl	8000584 <__aeabi_i2d>
 8001fde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fe2:	f7fe fb39 	bl	8000658 <__aeabi_dmul>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	4b2e      	ldr	r3, [pc, #184]	@ (80020ac <compensate_pressure+0x374>)
 8001ff4:	f7fe fc5a 	bl	80008ac <__aeabi_ddiv>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8002000:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002004:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002008:	f7fe f970 	bl	80002ec <__adddf3>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4614      	mov	r4, r2
 8002012:	461d      	mov	r5, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fab2 	bl	8000584 <__aeabi_i2d>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4620      	mov	r0, r4
 8002026:	4629      	mov	r1, r5
 8002028:	f7fe f960 	bl	80002ec <__adddf3>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	4b24      	ldr	r3, [pc, #144]	@ (80020cc <compensate_pressure+0x394>)
 800203a:	f7fe fc37 	bl	80008ac <__aeabi_ddiv>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002046:	f7fe f951 	bl	80002ec <__adddf3>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8002052:	a311      	add	r3, pc, #68	@ (adr r3, 8002098 <compensate_pressure+0x360>)
 8002054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002058:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800205c:	f7fe fd6e 	bl	8000b3c <__aeabi_dcmplt>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8002066:	a30c      	add	r3, pc, #48	@ (adr r3, 8002098 <compensate_pressure+0x360>)
 8002068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206c:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8002070:	2303      	movs	r3, #3
 8002072:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8002076:	a30a      	add	r3, pc, #40	@ (adr r3, 80020a0 <compensate_pressure+0x368>)
 8002078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002080:	f7fe fd7a 	bl	8000b78 <__aeabi_dcmpgt>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	e022      	b.n	80020d0 <compensate_pressure+0x398>
 800208a:	bf00      	nop
 800208c:	f3af 8000 	nop.w
 8002090:	00000000 	.word	0x00000000
 8002094:	40b86a00 	.word	0x40b86a00
 8002098:	00000000 	.word	0x00000000
 800209c:	40dd4c00 	.word	0x40dd4c00
 80020a0:	00000000 	.word	0x00000000
 80020a4:	40fadb00 	.word	0x40fadb00
 80020a8:	40ef4000 	.word	0x40ef4000
 80020ac:	40e00000 	.word	0x40e00000
 80020b0:	40100000 	.word	0x40100000
 80020b4:	40f00000 	.word	0x40f00000
 80020b8:	41200000 	.word	0x41200000
 80020bc:	3ff00000 	.word	0x3ff00000
 80020c0:	41300000 	.word	0x41300000
 80020c4:	40b00000 	.word	0x40b00000
 80020c8:	41e00000 	.word	0x41e00000
 80020cc:	40300000 	.word	0x40300000
 80020d0:	d007      	beq.n	80020e2 <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 80020d2:	a309      	add	r3, pc, #36	@ (adr r3, 80020f8 <compensate_pressure+0x3c0>)
 80020d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d8:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 80020dc:	2304      	movs	r3, #4
 80020de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        (*comp_pressure) = pressure;
 80020e2:	68f9      	ldr	r1, [r7, #12]
 80020e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020e8:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 80020ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3730      	adds	r7, #48	@ 0x30
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bdb0      	pop	{r4, r5, r7, pc}
 80020f8:	00000000 	.word	0x00000000
 80020fc:	40fadb00 	.word	0x40fadb00

08002100 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	db03      	blt.n	800211c <st_check_boundaries+0x1c>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	4a1c      	ldr	r2, [pc, #112]	@ (8002188 <st_check_boundaries+0x88>)
 8002118:	4293      	cmp	r3, r2
 800211a:	dd09      	ble.n	8002130 <st_check_boundaries+0x30>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	db06      	blt.n	8002130 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a18      	ldr	r2, [pc, #96]	@ (8002188 <st_check_boundaries+0x88>)
 8002126:	4293      	cmp	r3, r2
 8002128:	dc02      	bgt.n	8002130 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 800212a:	23fa      	movs	r3, #250	@ 0xfa
 800212c:	73fb      	strb	r3, [r7, #15]
 800212e:	e023      	b.n	8002178 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	db03      	blt.n	800213e <st_check_boundaries+0x3e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a13      	ldr	r2, [pc, #76]	@ (8002188 <st_check_boundaries+0x88>)
 800213a:	4293      	cmp	r3, r2
 800213c:	dd09      	ble.n	8002152 <st_check_boundaries+0x52>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db06      	blt.n	8002152 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	4a10      	ldr	r2, [pc, #64]	@ (8002188 <st_check_boundaries+0x88>)
 8002148:	4293      	cmp	r3, r2
 800214a:	dc02      	bgt.n	8002152 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 800214c:	23fb      	movs	r3, #251	@ 0xfb
 800214e:	73fb      	strb	r3, [r7, #15]
 8002150:	e012      	b.n	8002178 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	db03      	blt.n	8002160 <st_check_boundaries+0x60>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	4a0b      	ldr	r2, [pc, #44]	@ (8002188 <st_check_boundaries+0x88>)
 800215c:	4293      	cmp	r3, r2
 800215e:	dd09      	ble.n	8002174 <st_check_boundaries+0x74>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	db03      	blt.n	800216e <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a07      	ldr	r2, [pc, #28]	@ (8002188 <st_check_boundaries+0x88>)
 800216a:	4293      	cmp	r3, r2
 800216c:	dd02      	ble.n	8002174 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 800216e:	23f9      	movs	r3, #249	@ 0xf9
 8002170:	73fb      	strb	r3, [r7, #15]
 8002172:	e001      	b.n	8002178 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002178:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	000ffff0 	.word	0x000ffff0

0800218c <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff f839 	bl	800120c <bmp2_init>
 800219a:	4603      	mov	r3, r0
 800219c:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 800219e:	f107 0308 	add.w	r3, r7, #8
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff f91e 	bl	80013e6 <bmp2_get_config>
 80021aa:	4603      	mov	r3, r0
 80021ac:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 80021ae:	2303      	movs	r3, #3
 80021b0:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 80021b2:	2300      	movs	r3, #0
 80021b4:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 80021b6:	2303      	movs	r3, #3
 80021b8:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 80021ba:	f107 0308 	add.w	r3, r7, #8
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff f950 	bl	8001466 <bmp2_set_config>
 80021c6:	4603      	mov	r3, r0
 80021c8:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 80021ca:	f107 0308 	add.w	r3, r7, #8
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4619      	mov	r1, r3
 80021d2:	2003      	movs	r0, #3
 80021d4:	f7ff f982 	bl	80014dc <bmp2_set_power_mode>
 80021d8:	4603      	mov	r3, r0
 80021da:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 80021dc:	f107 0108 	add.w	r1, r7, #8
 80021e0:	f107 0310 	add.w	r3, r7, #16
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fa0c 	bl	8001604 <bmp2_compute_meas_time>
 80021ec:	4603      	mov	r3, r0
 80021ee:	75fb      	strb	r3, [r7, #23]

  return rslt;
 80021f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	4603      	mov	r3, r0
 800220a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002210:	2300      	movs	r3, #0
 8002212:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	6858      	ldr	r0, [r3, #4]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	891b      	ldrh	r3, [r3, #8]
 8002220:	2200      	movs	r2, #0
 8002222:	4619      	mov	r1, r3
 8002224:	f003 fffe 	bl	8006224 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	f107 010f 	add.w	r1, r7, #15
 8002230:	2305      	movs	r3, #5
 8002232:	2201      	movs	r2, #1
 8002234:	f006 f8bb 	bl	80083ae <HAL_SPI_Transmit>
 8002238:	4603      	mov	r3, r0
 800223a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	b29a      	uxth	r2, r3
 8002244:	2305      	movs	r3, #5
 8002246:	68b9      	ldr	r1, [r7, #8]
 8002248:	f006 fa1f 	bl	800868a <HAL_SPI_Receive>
 800224c:	4603      	mov	r3, r0
 800224e:	461a      	mov	r2, r3
 8002250:	7dbb      	ldrb	r3, [r7, #22]
 8002252:	4413      	add	r3, r2
 8002254:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	6858      	ldr	r0, [r3, #4]
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	891b      	ldrh	r3, [r3, #8]
 800225e:	2201      	movs	r2, #1
 8002260:	4619      	mov	r1, r3
 8002262:	f003 ffdf 	bl	8006224 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002266:	7dbb      	ldrb	r3, [r7, #22]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <bmp2_spi_read+0x74>
    iError = -1;
 800226c:	23ff      	movs	r3, #255	@ 0xff
 800226e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002270:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	4603      	mov	r3, r0
 800228a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002290:	2300      	movs	r3, #0
 8002292:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	6858      	ldr	r0, [r3, #4]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	891b      	ldrh	r3, [r3, #8]
 80022a0:	2200      	movs	r2, #0
 80022a2:	4619      	mov	r1, r3
 80022a4:	f003 ffbe 	bl	8006224 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	f107 010f 	add.w	r1, r7, #15
 80022b0:	2305      	movs	r3, #5
 80022b2:	2201      	movs	r2, #1
 80022b4:	f006 f87b 	bl	80083ae <HAL_SPI_Transmit>
 80022b8:	4603      	mov	r3, r0
 80022ba:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	2305      	movs	r3, #5
 80022c6:	68b9      	ldr	r1, [r7, #8]
 80022c8:	f006 f871 	bl	80083ae <HAL_SPI_Transmit>
 80022cc:	4603      	mov	r3, r0
 80022ce:	461a      	mov	r2, r3
 80022d0:	7dbb      	ldrb	r3, [r7, #22]
 80022d2:	4413      	add	r3, r2
 80022d4:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	6858      	ldr	r0, [r3, #4]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	891b      	ldrh	r3, [r3, #8]
 80022de:	2201      	movs	r2, #1
 80022e0:	4619      	mov	r1, r3
 80022e2:	f003 ff9f 	bl	8006224 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 80022e6:	7dbb      	ldrb	r3, [r7, #22]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <bmp2_spi_write+0x74>
    iError = -1;
 80022ec:	23ff      	movs	r3, #255	@ 0xff
 80022ee:	75fb      	strb	r3, [r7, #23]

  return iError;
 80022f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a05      	ldr	r2, [pc, #20]	@ (8002320 <bmp2_delay_us+0x24>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	099b      	lsrs	r3, r3, #6
 8002310:	4618      	mov	r0, r3
 8002312:	f003 fc6b 	bl	8005bec <HAL_Delay>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	10624dd3 	.word	0x10624dd3

08002324 <BMP2_ReadData>:
 *  @retval 0 -> Success.
 *  @retval <0 -> Failure.
 *
 */
int8_t BMP2_ReadData(struct bmp2_dev *dev, double* press, double* temp)
{
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b08b      	sub	sp, #44	@ 0x2c
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 8002330:	23ff      	movs	r3, #255	@ 0xff
 8002332:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  struct bmp2_status status;
  struct bmp2_data comp_data;
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	899b      	ldrh	r3, [r3, #12]
 800233c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 8002340:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002344:	68f9      	ldr	r1, [r7, #12]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff f89c 	bl	8001484 <bmp2_get_status>
 800234c:	4603      	mov	r3, r0
 800234e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 8002352:	f107 0310 	add.w	r3, r7, #16
 8002356:	68f9      	ldr	r1, [r7, #12]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff f8d4 	bl	8001506 <bmp2_get_sensor_data>
 800235e:	4603      	mov	r3, r0
 8002360:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    *temp = comp_data.temperature;
 8002364:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	e9c1 2300 	strd	r2, r3, [r1]
    *press = comp_data.pressure / 100.0;
 800236e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	4b1c      	ldr	r3, [pc, #112]	@ (80023e8 <BMP2_ReadData+0xc4>)
 8002378:	f7fe fa98 	bl	80008ac <__aeabi_ddiv>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	e9c1 2300 	strd	r2, r3, [r1]
    try--;
 8002386:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800238a:	b2db      	uxtb	r3, r3
 800238c:	3b01      	subs	r3, #1
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 8002394:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <BMP2_ReadData+0x80>
 800239c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	dccd      	bgt.n	8002340 <BMP2_ReadData+0x1c>

  /* Save reading result in sensor handler */
  BMP2_GET_PRESS(dev) = *press;
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023aa:	68f9      	ldr	r1, [r7, #12]
 80023ac:	684c      	ldr	r4, [r1, #4]
 80023ae:	4610      	mov	r0, r2
 80023b0:	4619      	mov	r1, r3
 80023b2:	f7fe fc33 	bl	8000c1c <__aeabi_d2f>
 80023b6:	4603      	mov	r3, r0
 80023b8:	6163      	str	r3, [r4, #20]
  BMP2_GET_TEMP(dev) = *temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c0:	68f9      	ldr	r1, [r7, #12]
 80023c2:	684c      	ldr	r4, [r1, #4]
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	f7fe fc28 	bl	8000c1c <__aeabi_d2f>
 80023cc:	4603      	mov	r3, r0
 80023ce:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80023d8:	729a      	strb	r2, [r3, #10]

  return rslt;
 80023da:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
}
 80023de:	4618      	mov	r0, r3
 80023e0:	372c      	adds	r7, #44	@ 0x2c
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd90      	pop	{r4, r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40590000 	.word	0x40590000

080023ec <MX_GPIO_Init>:
        * EXTI
     PD8   ------> USART3_TX
     PD9   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08e      	sub	sp, #56	@ 0x38
 80023f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	60da      	str	r2, [r3, #12]
 8002400:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002402:	4b82      	ldr	r3, [pc, #520]	@ (800260c <MX_GPIO_Init+0x220>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002406:	4a81      	ldr	r2, [pc, #516]	@ (800260c <MX_GPIO_Init+0x220>)
 8002408:	f043 0310 	orr.w	r3, r3, #16
 800240c:	6313      	str	r3, [r2, #48]	@ 0x30
 800240e:	4b7f      	ldr	r3, [pc, #508]	@ (800260c <MX_GPIO_Init+0x220>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002412:	f003 0310 	and.w	r3, r3, #16
 8002416:	623b      	str	r3, [r7, #32]
 8002418:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800241a:	4b7c      	ldr	r3, [pc, #496]	@ (800260c <MX_GPIO_Init+0x220>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	4a7b      	ldr	r2, [pc, #492]	@ (800260c <MX_GPIO_Init+0x220>)
 8002420:	f043 0304 	orr.w	r3, r3, #4
 8002424:	6313      	str	r3, [r2, #48]	@ 0x30
 8002426:	4b79      	ldr	r3, [pc, #484]	@ (800260c <MX_GPIO_Init+0x220>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002432:	4b76      	ldr	r3, [pc, #472]	@ (800260c <MX_GPIO_Init+0x220>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	4a75      	ldr	r2, [pc, #468]	@ (800260c <MX_GPIO_Init+0x220>)
 8002438:	f043 0320 	orr.w	r3, r3, #32
 800243c:	6313      	str	r3, [r2, #48]	@ 0x30
 800243e:	4b73      	ldr	r3, [pc, #460]	@ (800260c <MX_GPIO_Init+0x220>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	61bb      	str	r3, [r7, #24]
 8002448:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800244a:	4b70      	ldr	r3, [pc, #448]	@ (800260c <MX_GPIO_Init+0x220>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	4a6f      	ldr	r2, [pc, #444]	@ (800260c <MX_GPIO_Init+0x220>)
 8002450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002454:	6313      	str	r3, [r2, #48]	@ 0x30
 8002456:	4b6d      	ldr	r3, [pc, #436]	@ (800260c <MX_GPIO_Init+0x220>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002462:	4b6a      	ldr	r3, [pc, #424]	@ (800260c <MX_GPIO_Init+0x220>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002466:	4a69      	ldr	r2, [pc, #420]	@ (800260c <MX_GPIO_Init+0x220>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6313      	str	r3, [r2, #48]	@ 0x30
 800246e:	4b67      	ldr	r3, [pc, #412]	@ (800260c <MX_GPIO_Init+0x220>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800247a:	4b64      	ldr	r3, [pc, #400]	@ (800260c <MX_GPIO_Init+0x220>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247e:	4a63      	ldr	r2, [pc, #396]	@ (800260c <MX_GPIO_Init+0x220>)
 8002480:	f043 0302 	orr.w	r3, r3, #2
 8002484:	6313      	str	r3, [r2, #48]	@ 0x30
 8002486:	4b61      	ldr	r3, [pc, #388]	@ (800260c <MX_GPIO_Init+0x220>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002492:	4b5e      	ldr	r3, [pc, #376]	@ (800260c <MX_GPIO_Init+0x220>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	4a5d      	ldr	r2, [pc, #372]	@ (800260c <MX_GPIO_Init+0x220>)
 8002498:	f043 0308 	orr.w	r3, r3, #8
 800249c:	6313      	str	r3, [r2, #48]	@ 0x30
 800249e:	4b5b      	ldr	r3, [pc, #364]	@ (800260c <MX_GPIO_Init+0x220>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024aa:	4b58      	ldr	r3, [pc, #352]	@ (800260c <MX_GPIO_Init+0x220>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	4a57      	ldr	r2, [pc, #348]	@ (800260c <MX_GPIO_Init+0x220>)
 80024b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024b6:	4b55      	ldr	r3, [pc, #340]	@ (800260c <MX_GPIO_Init+0x220>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024be:	607b      	str	r3, [r7, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP2_CSB_Pin|Alarm_LED_Pin, GPIO_PIN_RESET);
 80024c2:	2200      	movs	r2, #0
 80024c4:	f248 0110 	movw	r1, #32784	@ 0x8010
 80024c8:	4851      	ldr	r0, [pc, #324]	@ (8002610 <MX_GPIO_Init+0x224>)
 80024ca:	f003 feab 	bl	8006224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Battery_Pin|Output_Pin, GPIO_PIN_RESET);
 80024ce:	2200      	movs	r2, #0
 80024d0:	2128      	movs	r1, #40	@ 0x28
 80024d2:	4850      	ldr	r0, [pc, #320]	@ (8002614 <MX_GPIO_Init+0x228>)
 80024d4:	f003 fea6 	bl	8006224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PowerSupply_GPIO_Port, PowerSupply_Pin, GPIO_PIN_RESET);
 80024d8:	2200      	movs	r2, #0
 80024da:	2108      	movs	r1, #8
 80024dc:	484e      	ldr	r0, [pc, #312]	@ (8002618 <MX_GPIO_Init+0x22c>)
 80024de:	f003 fea1 	bl	8006224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80024e2:	2200      	movs	r2, #0
 80024e4:	2140      	movs	r1, #64	@ 0x40
 80024e6:	484d      	ldr	r0, [pc, #308]	@ (800261c <MX_GPIO_Init+0x230>)
 80024e8:	f003 fe9c 	bl	8006224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80024ec:	2200      	movs	r2, #0
 80024ee:	2180      	movs	r1, #128	@ 0x80
 80024f0:	484b      	ldr	r0, [pc, #300]	@ (8002620 <MX_GPIO_Init+0x234>)
 80024f2:	f003 fe97 	bl	8006224 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BMP2_CSB_Pin|Alarm_LED_Pin;
 80024f6:	f248 0310 	movw	r3, #32784	@ 0x8010
 80024fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fc:	2301      	movs	r3, #1
 80024fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002504:	2300      	movs	r3, #0
 8002506:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002508:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800250c:	4619      	mov	r1, r3
 800250e:	4840      	ldr	r0, [pc, #256]	@ (8002610 <MX_GPIO_Init+0x224>)
 8002510:	f003 fcc4 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002514:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800251a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800251e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002528:	4619      	mov	r1, r3
 800252a:	483e      	ldr	r0, [pc, #248]	@ (8002624 <MX_GPIO_Init+0x238>)
 800252c:	f003 fcb6 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = Battery_Pin|Output_Pin;
 8002530:	2328      	movs	r3, #40	@ 0x28
 8002532:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002534:	2301      	movs	r3, #1
 8002536:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253c:	2300      	movs	r3, #0
 800253e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002540:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002544:	4619      	mov	r1, r3
 8002546:	4833      	ldr	r0, [pc, #204]	@ (8002614 <MX_GPIO_Init+0x228>)
 8002548:	f003 fca8 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PowerSupply_Pin;
 800254c:	2308      	movs	r3, #8
 800254e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002550:	2301      	movs	r3, #1
 8002552:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002558:	2300      	movs	r3, #0
 800255a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(PowerSupply_GPIO_Port, &GPIO_InitStruct);
 800255c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002560:	4619      	mov	r1, r3
 8002562:	482d      	ldr	r0, [pc, #180]	@ (8002618 <MX_GPIO_Init+0x22c>)
 8002564:	f003 fc9a 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PIR_Livingroom_Pin|PIR_Garage_Pin|PIR_Kitchen_Pin;
 8002568:	f44f 43a8 	mov.w	r3, #21504	@ 0x5400
 800256c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800256e:	2300      	movs	r3, #0
 8002570:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002576:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800257a:	4619      	mov	r1, r3
 800257c:	4824      	ldr	r0, [pc, #144]	@ (8002610 <MX_GPIO_Init+0x224>)
 800257e:	f003 fc8d 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002582:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002586:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002588:	2302      	movs	r3, #2
 800258a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800258c:	2301      	movs	r3, #1
 800258e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002590:	2303      	movs	r3, #3
 8002592:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002594:	2307      	movs	r3, #7
 8002596:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002598:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800259c:	4619      	mov	r1, r3
 800259e:	4822      	ldr	r0, [pc, #136]	@ (8002628 <MX_GPIO_Init+0x23c>)
 80025a0:	f003 fc7c 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80025a4:	2340      	movs	r3, #64	@ 0x40
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a8:	2301      	movs	r3, #1
 80025aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	2300      	movs	r3, #0
 80025b2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80025b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025b8:	4619      	mov	r1, r3
 80025ba:	4818      	ldr	r0, [pc, #96]	@ (800261c <MX_GPIO_Init+0x230>)
 80025bc:	f003 fc6e 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80025c0:	2380      	movs	r3, #128	@ 0x80
 80025c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80025cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025d0:	4619      	mov	r1, r3
 80025d2:	4812      	ldr	r0, [pc, #72]	@ (800261c <MX_GPIO_Init+0x230>)
 80025d4:	f003 fc62 	bl	8005e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80025d8:	2380      	movs	r3, #128	@ 0x80
 80025da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025dc:	2301      	movs	r3, #1
 80025de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e4:	2300      	movs	r3, #0
 80025e6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80025e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025ec:	4619      	mov	r1, r3
 80025ee:	480c      	ldr	r0, [pc, #48]	@ (8002620 <MX_GPIO_Init+0x234>)
 80025f0:	f003 fc54 	bl	8005e9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80025f4:	2200      	movs	r2, #0
 80025f6:	2100      	movs	r1, #0
 80025f8:	2028      	movs	r0, #40	@ 0x28
 80025fa:	f003 fbf6 	bl	8005dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025fe:	2028      	movs	r0, #40	@ 0x28
 8002600:	f003 fc0f 	bl	8005e22 <HAL_NVIC_EnableIRQ>

}
 8002604:	bf00      	nop
 8002606:	3738      	adds	r7, #56	@ 0x38
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40023800 	.word	0x40023800
 8002610:	40021000 	.word	0x40021000
 8002614:	40021400 	.word	0x40021400
 8002618:	40020000 	.word	0x40020000
 800261c:	40021800 	.word	0x40021800
 8002620:	40020400 	.word	0x40020400
 8002624:	40020800 	.word	0x40020800
 8002628:	40020c00 	.word	0x40020c00

0800262c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002630:	4b1b      	ldr	r3, [pc, #108]	@ (80026a0 <MX_I2C1_Init+0x74>)
 8002632:	4a1c      	ldr	r2, [pc, #112]	@ (80026a4 <MX_I2C1_Init+0x78>)
 8002634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8002636:	4b1a      	ldr	r3, [pc, #104]	@ (80026a0 <MX_I2C1_Init+0x74>)
 8002638:	4a1b      	ldr	r2, [pc, #108]	@ (80026a8 <MX_I2C1_Init+0x7c>)
 800263a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800263c:	4b18      	ldr	r3, [pc, #96]	@ (80026a0 <MX_I2C1_Init+0x74>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002642:	4b17      	ldr	r3, [pc, #92]	@ (80026a0 <MX_I2C1_Init+0x74>)
 8002644:	2201      	movs	r2, #1
 8002646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002648:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <MX_I2C1_Init+0x74>)
 800264a:	2200      	movs	r2, #0
 800264c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800264e:	4b14      	ldr	r3, [pc, #80]	@ (80026a0 <MX_I2C1_Init+0x74>)
 8002650:	2200      	movs	r2, #0
 8002652:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002654:	4b12      	ldr	r3, [pc, #72]	@ (80026a0 <MX_I2C1_Init+0x74>)
 8002656:	2200      	movs	r2, #0
 8002658:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800265a:	4b11      	ldr	r3, [pc, #68]	@ (80026a0 <MX_I2C1_Init+0x74>)
 800265c:	2200      	movs	r2, #0
 800265e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002660:	4b0f      	ldr	r3, [pc, #60]	@ (80026a0 <MX_I2C1_Init+0x74>)
 8002662:	2200      	movs	r2, #0
 8002664:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002666:	480e      	ldr	r0, [pc, #56]	@ (80026a0 <MX_I2C1_Init+0x74>)
 8002668:	f003 fe34 	bl	80062d4 <HAL_I2C_Init>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002672:	f002 fc81 	bl	8004f78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002676:	2100      	movs	r1, #0
 8002678:	4809      	ldr	r0, [pc, #36]	@ (80026a0 <MX_I2C1_Init+0x74>)
 800267a:	f004 fc8b 	bl	8006f94 <HAL_I2CEx_ConfigAnalogFilter>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002684:	f002 fc78 	bl	8004f78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002688:	2100      	movs	r1, #0
 800268a:	4805      	ldr	r0, [pc, #20]	@ (80026a0 <MX_I2C1_Init+0x74>)
 800268c:	f004 fccd 	bl	800702a <HAL_I2CEx_ConfigDigitalFilter>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002696:	f002 fc6f 	bl	8004f78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	200001dc 	.word	0x200001dc
 80026a4:	40005400 	.word	0x40005400
 80026a8:	00808cd2 	.word	0x00808cd2

080026ac <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80026b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002720 <MX_I2C2_Init+0x74>)
 80026b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002724 <MX_I2C2_Init+0x78>)
 80026b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 80026b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002720 <MX_I2C2_Init+0x74>)
 80026b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002728 <MX_I2C2_Init+0x7c>)
 80026ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80026bc:	4b18      	ldr	r3, [pc, #96]	@ (8002720 <MX_I2C2_Init+0x74>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026c2:	4b17      	ldr	r3, [pc, #92]	@ (8002720 <MX_I2C2_Init+0x74>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026c8:	4b15      	ldr	r3, [pc, #84]	@ (8002720 <MX_I2C2_Init+0x74>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80026ce:	4b14      	ldr	r3, [pc, #80]	@ (8002720 <MX_I2C2_Init+0x74>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026d4:	4b12      	ldr	r3, [pc, #72]	@ (8002720 <MX_I2C2_Init+0x74>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026da:	4b11      	ldr	r3, [pc, #68]	@ (8002720 <MX_I2C2_Init+0x74>)
 80026dc:	2200      	movs	r2, #0
 80026de:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002720 <MX_I2C2_Init+0x74>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80026e6:	480e      	ldr	r0, [pc, #56]	@ (8002720 <MX_I2C2_Init+0x74>)
 80026e8:	f003 fdf4 	bl	80062d4 <HAL_I2C_Init>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80026f2:	f002 fc41 	bl	8004f78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026f6:	2100      	movs	r1, #0
 80026f8:	4809      	ldr	r0, [pc, #36]	@ (8002720 <MX_I2C2_Init+0x74>)
 80026fa:	f004 fc4b 	bl	8006f94 <HAL_I2CEx_ConfigAnalogFilter>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002704:	f002 fc38 	bl	8004f78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002708:	2100      	movs	r1, #0
 800270a:	4805      	ldr	r0, [pc, #20]	@ (8002720 <MX_I2C2_Init+0x74>)
 800270c:	f004 fc8d 	bl	800702a <HAL_I2CEx_ConfigDigitalFilter>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002716:	f002 fc2f 	bl	8004f78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000230 	.word	0x20000230
 8002724:	40005800 	.word	0x40005800
 8002728:	00808cd2 	.word	0x00808cd2

0800272c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b0ac      	sub	sp, #176	@ 0xb0
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002734:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	60da      	str	r2, [r3, #12]
 8002742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002744:	f107 0318 	add.w	r3, r7, #24
 8002748:	2284      	movs	r2, #132	@ 0x84
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f009 f8ed 	bl	800b92c <memset>
  if(i2cHandle->Instance==I2C1)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a43      	ldr	r2, [pc, #268]	@ (8002864 <HAL_I2C_MspInit+0x138>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d13d      	bne.n	80027d8 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800275c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002760:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002762:	2300      	movs	r3, #0
 8002764:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002766:	f107 0318 	add.w	r3, r7, #24
 800276a:	4618      	mov	r0, r3
 800276c:	f005 f984 	bl	8007a78 <HAL_RCCEx_PeriphCLKConfig>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002776:	f002 fbff 	bl	8004f78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800277a:	4b3b      	ldr	r3, [pc, #236]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	4a3a      	ldr	r2, [pc, #232]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 8002780:	f043 0302 	orr.w	r3, r3, #2
 8002784:	6313      	str	r3, [r2, #48]	@ 0x30
 8002786:	4b38      	ldr	r3, [pc, #224]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_INA219_Solar_Pin|I2C1_SDA_INA219_Solar_Pin;
 8002792:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002796:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800279a:	2312      	movs	r3, #18
 800279c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a6:	2303      	movs	r3, #3
 80027a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027ac:	2304      	movs	r3, #4
 80027ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027b6:	4619      	mov	r1, r3
 80027b8:	482c      	ldr	r0, [pc, #176]	@ (800286c <HAL_I2C_MspInit+0x140>)
 80027ba:	f003 fb6f 	bl	8005e9c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027be:	4b2a      	ldr	r3, [pc, #168]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	4a29      	ldr	r2, [pc, #164]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 80027c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ca:	4b27      	ldr	r3, [pc, #156]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80027d6:	e041      	b.n	800285c <HAL_I2C_MspInit+0x130>
  else if(i2cHandle->Instance==I2C2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a24      	ldr	r2, [pc, #144]	@ (8002870 <HAL_I2C_MspInit+0x144>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d13c      	bne.n	800285c <HAL_I2C_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80027e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80027e8:	2300      	movs	r3, #0
 80027ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027ee:	f107 0318 	add.w	r3, r7, #24
 80027f2:	4618      	mov	r0, r3
 80027f4:	f005 f940 	bl	8007a78 <HAL_RCCEx_PeriphCLKConfig>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80027fe:	f002 fbbb 	bl	8004f78 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002802:	4b19      	ldr	r3, [pc, #100]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002806:	4a18      	ldr	r2, [pc, #96]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 8002808:	f043 0320 	orr.w	r3, r3, #32
 800280c:	6313      	str	r3, [r2, #48]	@ 0x30
 800280e:	4b16      	ldr	r3, [pc, #88]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002812:	f003 0320 	and.w	r3, r3, #32
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C2_SDA_INA219_Output_Pin|I2C2_SCL_Output_Pin;
 800281a:	2303      	movs	r3, #3
 800281c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002820:	2312      	movs	r3, #18
 8002822:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282c:	2303      	movs	r3, #3
 800282e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002832:	2304      	movs	r3, #4
 8002834:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002838:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800283c:	4619      	mov	r1, r3
 800283e:	480d      	ldr	r0, [pc, #52]	@ (8002874 <HAL_I2C_MspInit+0x148>)
 8002840:	f003 fb2c 	bl	8005e9c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002844:	4b08      	ldr	r3, [pc, #32]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	4a07      	ldr	r2, [pc, #28]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 800284a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800284e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002850:	4b05      	ldr	r3, [pc, #20]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 8002852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002854:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	68bb      	ldr	r3, [r7, #8]
}
 800285c:	bf00      	nop
 800285e:	37b0      	adds	r7, #176	@ 0xb0
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40005400 	.word	0x40005400
 8002868:	40023800 	.word	0x40023800
 800286c:	40020400 	.word	0x40020400
 8002870:	40005800 	.word	0x40005800
 8002874:	40021400 	.word	0x40021400

08002878 <keypad_config>:

const char Rows[4]={R1, R2, R3, R4};
const char Cols[4]={C1, C2, C3, C4};

void keypad_config(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	@ 0x28
 800287c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  if (KEYPAD_4x4_GPIO == GPIOA) __HAL_RCC_GPIOA_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOB) __HAL_RCC_GPIOB_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOC) __HAL_RCC_GPIOC_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOD) __HAL_RCC_GPIOD_CLK_ENABLE(); else
 800287e:	4b16      	ldr	r3, [pc, #88]	@ (80028d8 <keypad_config+0x60>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	4a15      	ldr	r2, [pc, #84]	@ (80028d8 <keypad_config+0x60>)
 8002884:	f043 0308 	orr.w	r3, r3, #8
 8002888:	6313      	str	r3, [r2, #48]	@ 0x30
 800288a:	4b13      	ldr	r3, [pc, #76]	@ (80028d8 <keypad_config+0x60>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
  if (KEYPAD_4x4_GPIO == GPIOE) __HAL_RCC_GPIOE_CLK_ENABLE();


  GPIO_InitStruct.Pin = R1 | R2 | R3 | R4;
 8002896:	230f      	movs	r3, #15
 8002898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800289a:	2301      	movs	r3, #1
 800289c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEYPAD_4x4_GPIO, &GPIO_InitStruct);
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	4619      	mov	r1, r3
 80028ac:	480b      	ldr	r0, [pc, #44]	@ (80028dc <keypad_config+0x64>)
 80028ae:	f003 faf5 	bl	8005e9c <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = C1 | C2 | C3 | C4;
 80028b2:	23f0      	movs	r3, #240	@ 0xf0
 80028b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028ba:	2302      	movs	r3, #2
 80028bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028be:	2300      	movs	r3, #0
 80028c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEYPAD_4x4_GPIO, &GPIO_InitStruct);
 80028c2:	f107 0314 	add.w	r3, r7, #20
 80028c6:	4619      	mov	r1, r3
 80028c8:	4804      	ldr	r0, [pc, #16]	@ (80028dc <keypad_config+0x64>)
 80028ca:	f003 fae7 	bl	8005e9c <HAL_GPIO_Init>

}
 80028ce:	bf00      	nop
 80028d0:	3728      	adds	r7, #40	@ 0x28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40020c00 	.word	0x40020c00

080028e0 <keypad_readkey>:

char keypad_readkey(void)
{ //returns ASCII code of a pressed key
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
  unsigned char r, c;
  char pressedKey=0x00;
 80028e6:	2300      	movs	r3, #0
 80028e8:	717b      	strb	r3, [r7, #5]

  r=0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	71fb      	strb	r3, [r7, #7]
  while (r<4) {
 80028ee:	e02d      	b.n	800294c <keypad_readkey+0x6c>
    HAL_GPIO_WritePin(KEYPAD_4x4_GPIO, Rows[r], GPIO_PIN_SET);        //activate row
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	4a1a      	ldr	r2, [pc, #104]	@ (800295c <keypad_readkey+0x7c>)
 80028f4:	5cd3      	ldrb	r3, [r2, r3]
 80028f6:	2201      	movs	r2, #1
 80028f8:	4619      	mov	r1, r3
 80028fa:	4819      	ldr	r0, [pc, #100]	@ (8002960 <keypad_readkey+0x80>)
 80028fc:	f003 fc92 	bl	8006224 <HAL_GPIO_WritePin>
    c=0;
 8002900:	2300      	movs	r3, #0
 8002902:	71bb      	strb	r3, [r7, #6]
    while (c<4) {
 8002904:	e014      	b.n	8002930 <keypad_readkey+0x50>
      if (HAL_GPIO_ReadPin(KEYPAD_4x4_GPIO, Cols[c])==GPIO_PIN_SET){  //check columns
 8002906:	79bb      	ldrb	r3, [r7, #6]
 8002908:	4a16      	ldr	r2, [pc, #88]	@ (8002964 <keypad_readkey+0x84>)
 800290a:	5cd3      	ldrb	r3, [r2, r3]
 800290c:	4619      	mov	r1, r3
 800290e:	4814      	ldr	r0, [pc, #80]	@ (8002960 <keypad_readkey+0x80>)
 8002910:	f003 fc70 	bl	80061f4 <HAL_GPIO_ReadPin>
 8002914:	4603      	mov	r3, r0
 8002916:	2b01      	cmp	r3, #1
 8002918:	d107      	bne.n	800292a <keypad_readkey+0x4a>
        pressedKey=KeyMap[r][c];                                   //if column active - find key value
 800291a:	79fa      	ldrb	r2, [r7, #7]
 800291c:	79bb      	ldrb	r3, [r7, #6]
 800291e:	4912      	ldr	r1, [pc, #72]	@ (8002968 <keypad_readkey+0x88>)
 8002920:	0092      	lsls	r2, r2, #2
 8002922:	440a      	add	r2, r1
 8002924:	4413      	add	r3, r2
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	717b      	strb	r3, [r7, #5]
      }
      c++;
 800292a:	79bb      	ldrb	r3, [r7, #6]
 800292c:	3301      	adds	r3, #1
 800292e:	71bb      	strb	r3, [r7, #6]
    while (c<4) {
 8002930:	79bb      	ldrb	r3, [r7, #6]
 8002932:	2b03      	cmp	r3, #3
 8002934:	d9e7      	bls.n	8002906 <keypad_readkey+0x26>
    }
    HAL_GPIO_WritePin(KEYPAD_4x4_GPIO, Rows[r], GPIO_PIN_RESET);      //deactivate row
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	4a08      	ldr	r2, [pc, #32]	@ (800295c <keypad_readkey+0x7c>)
 800293a:	5cd3      	ldrb	r3, [r2, r3]
 800293c:	2200      	movs	r2, #0
 800293e:	4619      	mov	r1, r3
 8002940:	4807      	ldr	r0, [pc, #28]	@ (8002960 <keypad_readkey+0x80>)
 8002942:	f003 fc6f 	bl	8006224 <HAL_GPIO_WritePin>
    r++;
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	3301      	adds	r3, #1
 800294a:	71fb      	strb	r3, [r7, #7]
  while (r<4) {
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	2b03      	cmp	r3, #3
 8002950:	d9ce      	bls.n	80028f0 <keypad_readkey+0x10>
  }
  return pressedKey;                                               //return ASCII key value
 8002952:	797b      	ldrb	r3, [r7, #5]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	0800c680 	.word	0x0800c680
 8002960:	40020c00 	.word	0x40020c00
 8002964:	0800c684 	.word	0x0800c684
 8002968:	0800c670 	.word	0x0800c670

0800296c <LCD_WriteNibble>:

GPIO_InitTypeDef GPIO_InitStruct;

//-----------------------------------------------------------------------------
void LCD_WriteNibble(char nibbleToWrite)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_SET);
 8002976:	2201      	movs	r2, #1
 8002978:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800297c:	4818      	ldr	r0, [pc, #96]	@ (80029e0 <LCD_WriteNibble+0x74>)
 800297e:	f003 fc51 	bl	8006224 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D4, (GPIO_PinState)(nibbleToWrite & 0x01));
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	b2db      	uxtb	r3, r3
 800298a:	461a      	mov	r2, r3
 800298c:	2108      	movs	r1, #8
 800298e:	4814      	ldr	r0, [pc, #80]	@ (80029e0 <LCD_WriteNibble+0x74>)
 8002990:	f003 fc48 	bl	8006224 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D5, (GPIO_PinState)(nibbleToWrite & 0x02));
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	b2db      	uxtb	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	2104      	movs	r1, #4
 80029a0:	480f      	ldr	r0, [pc, #60]	@ (80029e0 <LCD_WriteNibble+0x74>)
 80029a2:	f003 fc3f 	bl	8006224 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D6, (GPIO_PinState)(nibbleToWrite & 0x04));
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	2140      	movs	r1, #64	@ 0x40
 80029b2:	480b      	ldr	r0, [pc, #44]	@ (80029e0 <LCD_WriteNibble+0x74>)
 80029b4:	f003 fc36 	bl	8006224 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D7, (GPIO_PinState)(nibbleToWrite & 0x08));
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	461a      	mov	r2, r3
 80029c2:	2101      	movs	r1, #1
 80029c4:	4806      	ldr	r0, [pc, #24]	@ (80029e0 <LCD_WriteNibble+0x74>)
 80029c6:	f003 fc2d 	bl	8006224 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_RESET);
 80029ca:	2200      	movs	r2, #0
 80029cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029d0:	4803      	ldr	r0, [pc, #12]	@ (80029e0 <LCD_WriteNibble+0x74>)
 80029d2:	f003 fc27 	bl	8006224 <HAL_GPIO_WritePin>
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40020800 	.word	0x40020800

080029e4 <LCD_ReadNibble>:


//-----------------------------------------------------------------------------
unsigned char LCD_ReadNibble(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
  unsigned char tmp = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_SET);
 80029ee:	2201      	movs	r2, #1
 80029f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029f4:	481e      	ldr	r0, [pc, #120]	@ (8002a70 <LCD_ReadNibble+0x8c>)
 80029f6:	f003 fc15 	bl	8006224 <HAL_GPIO_WritePin>
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D4) << 0);
 80029fa:	2108      	movs	r1, #8
 80029fc:	481c      	ldr	r0, [pc, #112]	@ (8002a70 <LCD_ReadNibble+0x8c>)
 80029fe:	f003 fbf9 	bl	80061f4 <HAL_GPIO_ReadPin>
 8002a02:	4603      	mov	r3, r0
 8002a04:	b25a      	sxtb	r2, r3
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	b25b      	sxtb	r3, r3
 8002a0e:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D5) << 1);
 8002a10:	2104      	movs	r1, #4
 8002a12:	4817      	ldr	r0, [pc, #92]	@ (8002a70 <LCD_ReadNibble+0x8c>)
 8002a14:	f003 fbee 	bl	80061f4 <HAL_GPIO_ReadPin>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	b25a      	sxtb	r2, r3
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	b25b      	sxtb	r3, r3
 8002a26:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D6) << 2);
 8002a28:	2140      	movs	r1, #64	@ 0x40
 8002a2a:	4811      	ldr	r0, [pc, #68]	@ (8002a70 <LCD_ReadNibble+0x8c>)
 8002a2c:	f003 fbe2 	bl	80061f4 <HAL_GPIO_ReadPin>
 8002a30:	4603      	mov	r3, r0
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	b25a      	sxtb	r2, r3
 8002a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	b25b      	sxtb	r3, r3
 8002a3e:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D7) << 3);
 8002a40:	2101      	movs	r1, #1
 8002a42:	480b      	ldr	r0, [pc, #44]	@ (8002a70 <LCD_ReadNibble+0x8c>)
 8002a44:	f003 fbd6 	bl	80061f4 <HAL_GPIO_ReadPin>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	b25a      	sxtb	r2, r3
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	b25b      	sxtb	r3, r3
 8002a56:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_RESET);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a5e:	4804      	ldr	r0, [pc, #16]	@ (8002a70 <LCD_ReadNibble+0x8c>)
 8002a60:	f003 fbe0 	bl	8006224 <HAL_GPIO_WritePin>
  return tmp;
 8002a64:	79fb      	ldrb	r3, [r7, #7]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40020800 	.word	0x40020800

08002a74 <LCD_ReadStatus>:


//-----------------------------------------------------------------------------
unsigned char LCD_ReadStatus(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
  unsigned char status = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	71fb      	strb	r3, [r7, #7]
  
  GPIO_InitStruct.Pin =  LCD_D4 | LCD_D5 | LCD_D6 | LCD_D7;
 8002a7e:	4b21      	ldr	r3, [pc, #132]	@ (8002b04 <LCD_ReadStatus+0x90>)
 8002a80:	224d      	movs	r2, #77	@ 0x4d
 8002a82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a84:	4b1f      	ldr	r3, [pc, #124]	@ (8002b04 <LCD_ReadStatus+0x90>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b04 <LCD_ReadStatus+0x90>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002a90:	4b1c      	ldr	r3, [pc, #112]	@ (8002b04 <LCD_ReadStatus+0x90>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a96:	491b      	ldr	r1, [pc, #108]	@ (8002b04 <LCD_ReadStatus+0x90>)
 8002a98:	481b      	ldr	r0, [pc, #108]	@ (8002b08 <LCD_ReadStatus+0x94>)
 8002a9a:	f003 f9ff 	bl	8005e9c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW, GPIO_PIN_SET);
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002aa4:	4818      	ldr	r0, [pc, #96]	@ (8002b08 <LCD_ReadStatus+0x94>)
 8002aa6:	f003 fbbd 	bl	8006224 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RS, GPIO_PIN_RESET);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ab0:	4815      	ldr	r0, [pc, #84]	@ (8002b08 <LCD_ReadStatus+0x94>)
 8002ab2:	f003 fbb7 	bl	8006224 <HAL_GPIO_WritePin>
  
  status |= (LCD_ReadNibble() << 4);
 8002ab6:	f7ff ff95 	bl	80029e4 <LCD_ReadNibble>
 8002aba:	4603      	mov	r3, r0
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	b25a      	sxtb	r2, r3
 8002ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	b25b      	sxtb	r3, r3
 8002ac8:	71fb      	strb	r3, [r7, #7]
  status |= LCD_ReadNibble();
 8002aca:	f7ff ff8b 	bl	80029e4 <LCD_ReadNibble>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	71fb      	strb	r3, [r7, #7]
  

  GPIO_InitStruct.Pin = LCD_D4|LCD_D5|LCD_D6|LCD_D7;
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b04 <LCD_ReadStatus+0x90>)
 8002ada:	224d      	movs	r2, #77	@ 0x4d
 8002adc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ade:	4b09      	ldr	r3, [pc, #36]	@ (8002b04 <LCD_ReadStatus+0x90>)
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	4b07      	ldr	r3, [pc, #28]	@ (8002b04 <LCD_ReadStatus+0x90>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002aea:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <LCD_ReadStatus+0x90>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002af0:	4904      	ldr	r1, [pc, #16]	@ (8002b04 <LCD_ReadStatus+0x90>)
 8002af2:	4805      	ldr	r0, [pc, #20]	@ (8002b08 <LCD_ReadStatus+0x94>)
 8002af4:	f003 f9d2 	bl	8005e9c <HAL_GPIO_Init>

  return status;
 8002af8:	79fb      	ldrb	r3, [r7, #7]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000284 	.word	0x20000284
 8002b08:	40020800 	.word	0x40020800

08002b0c <LCD_WriteData>:


//-----------------------------------------------------------------------------
void LCD_WriteData(char dataToWrite)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW, GPIO_PIN_RESET);
 8002b16:	2200      	movs	r2, #0
 8002b18:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002b1c:	4810      	ldr	r0, [pc, #64]	@ (8002b60 <LCD_WriteData+0x54>)
 8002b1e:	f003 fb81 	bl	8006224 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RS, GPIO_PIN_SET);
 8002b22:	2201      	movs	r2, #1
 8002b24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002b28:	480d      	ldr	r0, [pc, #52]	@ (8002b60 <LCD_WriteData+0x54>)
 8002b2a:	f003 fb7b 	bl	8006224 <HAL_GPIO_WritePin>
  
  LCD_WriteNibble(dataToWrite >> 4);
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	091b      	lsrs	r3, r3, #4
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ff19 	bl	800296c <LCD_WriteNibble>
  LCD_WriteNibble(dataToWrite & 0x0F);
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff ff12 	bl	800296c <LCD_WriteNibble>
  
  while(LCD_ReadStatus() & 0x80);
 8002b48:	bf00      	nop
 8002b4a:	f7ff ff93 	bl	8002a74 <LCD_ReadStatus>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	b25b      	sxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	dbf9      	blt.n	8002b4a <LCD_WriteData+0x3e>
}
 8002b56:	bf00      	nop
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40020800 	.word	0x40020800

08002b64 <LCD_WriteCommand>:


//-----------------------------------------------------------------------------
void LCD_WriteCommand(char commandToWrite)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW | LCD_RS, GPIO_PIN_RESET);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002b74:	480d      	ldr	r0, [pc, #52]	@ (8002bac <LCD_WriteCommand+0x48>)
 8002b76:	f003 fb55 	bl	8006224 <HAL_GPIO_WritePin>
  LCD_WriteNibble(commandToWrite >> 4);
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	091b      	lsrs	r3, r3, #4
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fef3 	bl	800296c <LCD_WriteNibble>
  LCD_WriteNibble(commandToWrite & 0x0F);
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	f003 030f 	and.w	r3, r3, #15
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff feec 	bl	800296c <LCD_WriteNibble>
  
  while(LCD_ReadStatus() & 0x80);
 8002b94:	bf00      	nop
 8002b96:	f7ff ff6d 	bl	8002a74 <LCD_ReadStatus>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	b25b      	sxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	dbf9      	blt.n	8002b96 <LCD_WriteCommand+0x32>
}
 8002ba2:	bf00      	nop
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40020800 	.word	0x40020800

08002bb0 <LCD_WriteText>:


//-----------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  while(*text)
 8002bb8:	e006      	b.n	8002bc8 <LCD_WriteText+0x18>
    LCD_WriteData(*text++);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ffa2 	bl	8002b0c <LCD_WriteData>
  while(*text)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f4      	bne.n	8002bba <LCD_WriteText+0xa>
}
 8002bd0:	bf00      	nop
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <LCD_GoTo>:


//-----------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	4603      	mov	r3, r0
 8002be2:	460a      	mov	r2, r1
 8002be4:	71fb      	strb	r3, [r7, #7]
 8002be6:	4613      	mov	r3, r2
 8002be8:	71bb      	strb	r3, [r7, #6]
  LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 8002bea:	79bb      	ldrb	r3, [r7, #6]
 8002bec:	019b      	lsls	r3, r3, #6
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	b25b      	sxtb	r3, r3
 8002bf8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002bfc:	b25b      	sxtb	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff ffaf 	bl	8002b64 <LCD_WriteCommand>
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <LCD_WriteTextXY>:


//-----------------------------------------------------------------------------
void LCD_WriteTextXY(char * text, unsigned char x, unsigned char y)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	460b      	mov	r3, r1
 8002c18:	70fb      	strb	r3, [r7, #3]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	70bb      	strb	r3, [r7, #2]
  LCD_GoTo(x,y);
 8002c1e:	78ba      	ldrb	r2, [r7, #2]
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	4611      	mov	r1, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ffd8 	bl	8002bda <LCD_GoTo>
  while(*text)
 8002c2a:	e006      	b.n	8002c3a <LCD_WriteTextXY+0x2c>
    LCD_WriteData(*text++);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	607a      	str	r2, [r7, #4]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff ff69 	bl	8002b0c <LCD_WriteData>
  while(*text)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f4      	bne.n	8002c2c <LCD_WriteTextXY+0x1e>
}
 8002c42:	bf00      	nop
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <LCD_Initialize>:
}


//-----------------------------------------------------------------------------
void LCD_Initialize(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af00      	add	r7, sp, #0
  volatile unsigned char i = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	77fb      	strb	r3, [r7, #31]
  volatile unsigned int delayCnt = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
  
  if (LCD_GPIO == GPIOA) __HAL_RCC_GPIOA_CLK_ENABLE(); else
  if (LCD_GPIO == GPIOB) __HAL_RCC_GPIOB_CLK_ENABLE(); else
  if (LCD_GPIO == GPIOC) __HAL_RCC_GPIOC_CLK_ENABLE(); else
 8002c5a:	4b34      	ldr	r3, [pc, #208]	@ (8002d2c <LCD_Initialize+0xe0>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5e:	4a33      	ldr	r2, [pc, #204]	@ (8002d2c <LCD_Initialize+0xe0>)
 8002c60:	f043 0304 	orr.w	r3, r3, #4
 8002c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c66:	4b31      	ldr	r3, [pc, #196]	@ (8002d2c <LCD_Initialize+0xe0>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
  if (LCD_GPIO == GPIOD) __HAL_RCC_GPIOD_CLK_ENABLE(); else
  if (LCD_GPIO == GPIOE) __HAL_RCC_GPIOE_CLK_ENABLE();


  GPIO_InitStruct.Pin = LCD_D4|LCD_D5|LCD_D6|LCD_D7|LCD_RS|LCD_RW|LCD_EN;
 8002c72:	4b2f      	ldr	r3, [pc, #188]	@ (8002d30 <LCD_Initialize+0xe4>)
 8002c74:	f641 424d 	movw	r2, #7245	@ 0x1c4d
 8002c78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8002d30 <LCD_Initialize+0xe4>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c80:	4b2b      	ldr	r3, [pc, #172]	@ (8002d30 <LCD_Initialize+0xe4>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002c86:	4b2a      	ldr	r3, [pc, #168]	@ (8002d30 <LCD_Initialize+0xe4>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_GPIO, &GPIO_InitStruct);
 8002c8c:	4928      	ldr	r1, [pc, #160]	@ (8002d30 <LCD_Initialize+0xe4>)
 8002c8e:	4829      	ldr	r0, [pc, #164]	@ (8002d34 <LCD_Initialize+0xe8>)
 8002c90:	f003 f904 	bl	8005e9c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RS | LCD_EN | LCD_RW, GPIO_PIN_RESET);
 8002c94:	2200      	movs	r2, #0
 8002c96:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8002c9a:	4826      	ldr	r0, [pc, #152]	@ (8002d34 <LCD_Initialize+0xe8>)
 8002c9c:	f003 fac2 	bl	8006224 <HAL_GPIO_WritePin>
  

  for(delayCnt = 0; delayCnt < 300000; delayCnt++);
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61bb      	str	r3, [r7, #24]
 8002ca4:	e002      	b.n	8002cac <LCD_Initialize+0x60>
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	61bb      	str	r3, [r7, #24]
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	4a22      	ldr	r2, [pc, #136]	@ (8002d38 <LCD_Initialize+0xec>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d9f8      	bls.n	8002ca6 <LCD_Initialize+0x5a>

  for(i = 0; i < 3; i++) {
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	77fb      	strb	r3, [r7, #31]
 8002cb8:	e012      	b.n	8002ce0 <LCD_Initialize+0x94>
    LCD_WriteNibble(0x03);            
 8002cba:	2003      	movs	r0, #3
 8002cbc:	f7ff fe56 	bl	800296c <LCD_WriteNibble>
    for(delayCnt = 0; delayCnt < 30000; delayCnt++);
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61bb      	str	r3, [r7, #24]
 8002cc4:	e002      	b.n	8002ccc <LCD_Initialize+0x80>
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	61bb      	str	r3, [r7, #24]
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	f247 522f 	movw	r2, #29999	@ 0x752f
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d9f7      	bls.n	8002cc6 <LCD_Initialize+0x7a>
  for(i = 0; i < 3; i++) {
 8002cd6:	7ffb      	ldrb	r3, [r7, #31]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	3301      	adds	r3, #1
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	77fb      	strb	r3, [r7, #31]
 8002ce0:	7ffb      	ldrb	r3, [r7, #31]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d9e8      	bls.n	8002cba <LCD_Initialize+0x6e>
  }
  
  LCD_WriteNibble(0x02);             
 8002ce8:	2002      	movs	r0, #2
 8002cea:	f7ff fe3f 	bl	800296c <LCD_WriteNibble>
  
  for(delayCnt = 0; delayCnt < 6000; delayCnt++);
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61bb      	str	r3, [r7, #24]
 8002cf2:	e002      	b.n	8002cfa <LCD_Initialize+0xae>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	f241 726f 	movw	r2, #5999	@ 0x176f
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d9f7      	bls.n	8002cf4 <LCD_Initialize+0xa8>
     
  LCD_WriteCommand(HD44780_FUNCTION_SET | 
 8002d04:	2028      	movs	r0, #40	@ 0x28
 8002d06:	f7ff ff2d 	bl	8002b64 <LCD_WriteCommand>
                   HD44780_FONT5x7 | 
                   HD44780_TWO_LINE | 
                   HD44780_4_BIT);
  
  LCD_WriteCommand(HD44780_DISPLAY_ONOFF | 
 8002d0a:	2008      	movs	r0, #8
 8002d0c:	f7ff ff2a 	bl	8002b64 <LCD_WriteCommand>
                   HD44780_DISPLAY_OFF); 
  
  LCD_WriteCommand(HD44780_CLEAR); 
 8002d10:	2001      	movs	r0, #1
 8002d12:	f7ff ff27 	bl	8002b64 <LCD_WriteCommand>
  
  LCD_WriteCommand(HD44780_ENTRY_MODE | 
 8002d16:	2006      	movs	r0, #6
 8002d18:	f7ff ff24 	bl	8002b64 <LCD_WriteCommand>
                   HD44780_EM_SHIFT_CURSOR | 
                   HD44780_EM_INCREMENT);
  
  LCD_WriteCommand(HD44780_DISPLAY_ONOFF | 
 8002d1c:	200c      	movs	r0, #12
 8002d1e:	f7ff ff21 	bl	8002b64 <LCD_WriteCommand>
                   HD44780_DISPLAY_ON |
                   HD44780_CURSOR_OFF | 
                   HD44780_CURSOR_NOBLINK);
}
 8002d22:	bf00      	nop
 8002d24:	3720      	adds	r7, #32
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	20000284 	.word	0x20000284
 8002d34:	40020800 	.word	0x40020800
 8002d38:	000493df 	.word	0x000493df

08002d3c <move_menu>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void move_menu(char *a[])
  {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
	symbol[0] = keypad_readkey();
 8002d44:	f7ff fdcc 	bl	80028e0 <keypad_readkey>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4b29      	ldr	r3, [pc, #164]	@ (8002df4 <move_menu+0xb8>)
 8002d4e:	701a      	strb	r2, [r3, #0]
	  if (symbol[0] == 'B' && (position<max_pos)) {
 8002d50:	4b28      	ldr	r3, [pc, #160]	@ (8002df4 <move_menu+0xb8>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b42      	cmp	r3, #66	@ 0x42
 8002d56:	d10e      	bne.n	8002d76 <move_menu+0x3a>
 8002d58:	4b27      	ldr	r3, [pc, #156]	@ (8002df8 <move_menu+0xbc>)
 8002d5a:	781a      	ldrb	r2, [r3, #0]
 8002d5c:	4b27      	ldr	r3, [pc, #156]	@ (8002dfc <move_menu+0xc0>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d208      	bcs.n	8002d76 <move_menu+0x3a>
	  	   	  position++;
 8002d64:	4b24      	ldr	r3, [pc, #144]	@ (8002df8 <move_menu+0xbc>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	4b22      	ldr	r3, [pc, #136]	@ (8002df8 <move_menu+0xbc>)
 8002d6e:	701a      	strb	r2, [r3, #0]
	  	   	  refreshLCD=true;
 8002d70:	4b23      	ldr	r3, [pc, #140]	@ (8002e00 <move_menu+0xc4>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	701a      	strb	r2, [r3, #0]
	  	   	}

	  	   	if (symbol[0] == 'A' && (position>1)) {
 8002d76:	4b1f      	ldr	r3, [pc, #124]	@ (8002df4 <move_menu+0xb8>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b41      	cmp	r3, #65	@ 0x41
 8002d7c:	d10c      	bne.n	8002d98 <move_menu+0x5c>
 8002d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002df8 <move_menu+0xbc>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d908      	bls.n	8002d98 <move_menu+0x5c>
	  	   	  position--;
 8002d86:	4b1c      	ldr	r3, [pc, #112]	@ (8002df8 <move_menu+0xbc>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002df8 <move_menu+0xbc>)
 8002d90:	701a      	strb	r2, [r3, #0]
	  	   	  refreshLCD=true;
 8002d92:	4b1b      	ldr	r3, [pc, #108]	@ (8002e00 <move_menu+0xc4>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	701a      	strb	r2, [r3, #0]
	  	   	}
	  	  if (refreshLCD){                           //Odswiezanie LCD tylko przy zmiane zawartosci - usuwa problem "migotania" LCD
 8002d98:	4b19      	ldr	r3, [pc, #100]	@ (8002e00 <move_menu+0xc4>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d024      	beq.n	8002dea <move_menu+0xae>
	   	  LCD_WriteCommand(HD44780_CLEAR);
 8002da0:	2001      	movs	r0, #1
 8002da2:	f7ff fedf 	bl	8002b64 <LCD_WriteCommand>
	   	  LCD_WriteText("->");
 8002da6:	4817      	ldr	r0, [pc, #92]	@ (8002e04 <move_menu+0xc8>)
 8002da8:	f7ff ff02 	bl	8002bb0 <LCD_WriteText>
	   	  LCD_WriteText(a[position-1]);
 8002dac:	4b12      	ldr	r3, [pc, #72]	@ (8002df8 <move_menu+0xbc>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8002db6:	4413      	add	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fef5 	bl	8002bb0 <LCD_WriteText>
	   	  if (position<4){
 8002dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8002df8 <move_menu+0xbc>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	d80a      	bhi.n	8002de4 <move_menu+0xa8>
	   		LCD_WriteTextXY(a[position-1+1],2,1);
 8002dce:	4b0a      	ldr	r3, [pc, #40]	@ (8002df8 <move_menu+0xbc>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	2102      	movs	r1, #2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff ff15 	bl	8002c0e <LCD_WriteTextXY>
	   	  }
	   	  refreshLCD=false;
 8002de4:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <move_menu+0xc4>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	701a      	strb	r2, [r3, #0]
	   	}
  }
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000298 	.word	0x20000298
 8002df8:	20000054 	.word	0x20000054
 8002dfc:	20000055 	.word	0x20000055
 8002e00:	200002fd 	.word	0x200002fd
 8002e04:	0800c4c8 	.word	0x0800c4c8

08002e08 <roundToTwoDecimals>:

double roundToTwoDecimals(double value) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	ed87 0b00 	vstr	d0, [r7]
	return floor(value * 100.0 + 0.5) / 100.0;
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	4b15      	ldr	r3, [pc, #84]	@ (8002e6c <roundToTwoDecimals+0x64>)
 8002e18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e1c:	f7fd fc1c 	bl	8000658 <__aeabi_dmul>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4610      	mov	r0, r2
 8002e26:	4619      	mov	r1, r3
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	4b10      	ldr	r3, [pc, #64]	@ (8002e70 <roundToTwoDecimals+0x68>)
 8002e2e:	f7fd fa5d 	bl	80002ec <__adddf3>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	ec43 2b17 	vmov	d7, r2, r3
 8002e3a:	eeb0 0a47 	vmov.f32	s0, s14
 8002e3e:	eef0 0a67 	vmov.f32	s1, s15
 8002e42:	f009 f9f5 	bl	800c230 <floor>
 8002e46:	ec51 0b10 	vmov	r0, r1, d0
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	4b07      	ldr	r3, [pc, #28]	@ (8002e6c <roundToTwoDecimals+0x64>)
 8002e50:	f7fd fd2c 	bl	80008ac <__aeabi_ddiv>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	ec43 2b17 	vmov	d7, r2, r3
}
 8002e5c:	eeb0 0a47 	vmov.f32	s0, s14
 8002e60:	eef0 0a67 	vmov.f32	s1, s15
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40590000 	.word	0x40590000
 8002e70:	3fe00000 	.word	0x3fe00000

08002e74 <calculate_discrete_pi>:

//PI controller

float_t calculate_discrete_pi(pi_t* pi, float_t setpoint, float_t measured)
{
 8002e74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e78:	b086      	sub	sp, #24
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	ed87 0a02 	vstr	s0, [r7, #8]
 8002e82:	edc7 0a01 	vstr	s1, [r7, #4]
    // Obliczenie błędu
    error = setpoint - measured;
 8002e86:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e92:	4b6b      	ldr	r3, [pc, #428]	@ (8003040 <calculate_discrete_pi+0x1cc>)
 8002e94:	edc3 7a00 	vstr	s15, [r3]

    // Część proporcjonalna
    P = pi->p.Kp * error;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	ed93 7a00 	vldr	s14, [r3]
 8002e9e:	4b68      	ldr	r3, [pc, #416]	@ (8003040 <calculate_discrete_pi+0x1cc>)
 8002ea0:	edd3 7a00 	vldr	s15, [r3]
 8002ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea8:	4b66      	ldr	r3, [pc, #408]	@ (8003044 <calculate_discrete_pi+0x1d0>)
 8002eaa:	edc3 7a00 	vstr	s15, [r3]

    // Część całkująca
    integral = pi->previous_intergral + (error + pi->previous_error);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	ed93 7a04 	vldr	s14, [r3, #16]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	edd3 6a03 	vldr	s13, [r3, #12]
 8002eba:	4b61      	ldr	r3, [pc, #388]	@ (8003040 <calculate_discrete_pi+0x1cc>)
 8002ebc:	edd3 7a00 	vldr	s15, [r3]
 8002ec0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec8:	4b5f      	ldr	r3, [pc, #380]	@ (8003048 <calculate_discrete_pi+0x1d4>)
 8002eca:	edc3 7a00 	vstr	s15, [r3]

    // Anty-windup: korekta integratora w przypadku nasycenia
    float_t U_temp = P + pi->p.Ki * integral * (pi->p.dt / 2.0);
 8002ece:	4b5d      	ldr	r3, [pc, #372]	@ (8003044 <calculate_discrete_pi+0x1d0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fd fb68 	bl	80005a8 <__aeabi_f2d>
 8002ed8:	4604      	mov	r4, r0
 8002eda:	460d      	mov	r5, r1
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ee2:	4b59      	ldr	r3, [pc, #356]	@ (8003048 <calculate_discrete_pi+0x1d4>)
 8002ee4:	edd3 7a00 	vldr	s15, [r3]
 8002ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eec:	ee17 0a90 	vmov	r0, s15
 8002ef0:	f7fd fb5a 	bl	80005a8 <__aeabi_f2d>
 8002ef4:	4680      	mov	r8, r0
 8002ef6:	4689      	mov	r9, r1
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd fb53 	bl	80005a8 <__aeabi_f2d>
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002f0a:	f7fd fccf 	bl	80008ac <__aeabi_ddiv>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4640      	mov	r0, r8
 8002f14:	4649      	mov	r1, r9
 8002f16:	f7fd fb9f 	bl	8000658 <__aeabi_dmul>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4620      	mov	r0, r4
 8002f20:	4629      	mov	r1, r5
 8002f22:	f7fd f9e3 	bl	80002ec <__adddf3>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f7fd fe75 	bl	8000c1c <__aeabi_d2f>
 8002f32:	4603      	mov	r3, r0
 8002f34:	617b      	str	r3, [r7, #20]
    if (U_temp > 1.0) {
 8002f36:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f46:	dd07      	ble.n	8002f58 <calculate_discrete_pi+0xe4>
        U_temp = 1.0;
 8002f48:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002f4c:	617b      	str	r3, [r7, #20]
        integral = pi->previous_intergral;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	4a3d      	ldr	r2, [pc, #244]	@ (8003048 <calculate_discrete_pi+0x1d4>)
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	e012      	b.n	8002f7e <calculate_discrete_pi+0x10a>
    } else if (U_temp < 0.0) {
 8002f58:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f64:	d507      	bpl.n	8002f76 <calculate_discrete_pi+0x102>
        U_temp = 0.0;
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
        integral = pi->previous_intergral;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	4a35      	ldr	r2, [pc, #212]	@ (8003048 <calculate_discrete_pi+0x1d4>)
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	e003      	b.n	8002f7e <calculate_discrete_pi+0x10a>
    } else {
        pi->previous_intergral = integral;
 8002f76:	4b34      	ldr	r3, [pc, #208]	@ (8003048 <calculate_discrete_pi+0x1d4>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	611a      	str	r2, [r3, #16]
    }

    // Część całkująca
    I = pi->p.Ki * integral * (pi->p.dt / 2.0);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f84:	4b30      	ldr	r3, [pc, #192]	@ (8003048 <calculate_discrete_pi+0x1d4>)
 8002f86:	edd3 7a00 	vldr	s15, [r3]
 8002f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8e:	ee17 0a90 	vmov	r0, s15
 8002f92:	f7fd fb09 	bl	80005a8 <__aeabi_f2d>
 8002f96:	4604      	mov	r4, r0
 8002f98:	460d      	mov	r5, r1
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fd fb02 	bl	80005a8 <__aeabi_f2d>
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002fac:	f7fd fc7e 	bl	80008ac <__aeabi_ddiv>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	4629      	mov	r1, r5
 8002fb8:	f7fd fb4e 	bl	8000658 <__aeabi_dmul>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	f7fd fe2a 	bl	8000c1c <__aeabi_d2f>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	4a20      	ldr	r2, [pc, #128]	@ (800304c <calculate_discrete_pi+0x1d8>)
 8002fcc:	6013      	str	r3, [r2, #0]

    // Suma części PI
    U = P + I;
 8002fce:	4b1d      	ldr	r3, [pc, #116]	@ (8003044 <calculate_discrete_pi+0x1d0>)
 8002fd0:	ed93 7a00 	vldr	s14, [r3]
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800304c <calculate_discrete_pi+0x1d8>)
 8002fd6:	edd3 7a00 	vldr	s15, [r3]
 8002fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fde:	4b1c      	ldr	r3, [pc, #112]	@ (8003050 <calculate_discrete_pi+0x1dc>)
 8002fe0:	edc3 7a00 	vstr	s15, [r3]

    U = (U > 1.0) ? 1.0 : U;
 8002fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8003050 <calculate_discrete_pi+0x1dc>)
 8002fe6:	edd3 7a00 	vldr	s15, [r3]
 8002fea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002fee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff6:	dd02      	ble.n	8002ffe <calculate_discrete_pi+0x18a>
 8002ff8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002ffc:	e001      	b.n	8003002 <calculate_discrete_pi+0x18e>
 8002ffe:	4b14      	ldr	r3, [pc, #80]	@ (8003050 <calculate_discrete_pi+0x1dc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a13      	ldr	r2, [pc, #76]	@ (8003050 <calculate_discrete_pi+0x1dc>)
 8003004:	6013      	str	r3, [r2, #0]
    U = (U < 0.0) ? 0.0 : U;
 8003006:	4b12      	ldr	r3, [pc, #72]	@ (8003050 <calculate_discrete_pi+0x1dc>)
 8003008:	edd3 7a00 	vldr	s15, [r3]
 800300c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003014:	d502      	bpl.n	800301c <calculate_discrete_pi+0x1a8>
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	e001      	b.n	8003020 <calculate_discrete_pi+0x1ac>
 800301c:	4b0c      	ldr	r3, [pc, #48]	@ (8003050 <calculate_discrete_pi+0x1dc>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a0b      	ldr	r2, [pc, #44]	@ (8003050 <calculate_discrete_pi+0x1dc>)
 8003022:	6013      	str	r3, [r2, #0]

    pi->previous_error = error;
 8003024:	4b06      	ldr	r3, [pc, #24]	@ (8003040 <calculate_discrete_pi+0x1cc>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	60da      	str	r2, [r3, #12]

    return U;
 800302c:	4b08      	ldr	r3, [pc, #32]	@ (8003050 <calculate_discrete_pi+0x1dc>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	ee07 3a90 	vmov	s15, r3
};
 8003034:	eeb0 0a67 	vmov.f32	s0, s15
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003040:	20000324 	.word	0x20000324
 8003044:	2000031c 	.word	0x2000031c
 8003048:	20000328 	.word	0x20000328
 800304c:	20000320 	.word	0x20000320
 8003050:	20000318 	.word	0x20000318

08003054 <PowerSupply_SetState>:

//ENERGY SYSTEM

// Wył/Wł PowerSupply
void PowerSupply_SetState(GPIO_PinState state) {
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(PowerSupply_GPIO_Port, PowerSupply_Pin, state);
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	461a      	mov	r2, r3
 8003062:	2108      	movs	r1, #8
 8003064:	4803      	ldr	r0, [pc, #12]	@ (8003074 <PowerSupply_SetState+0x20>)
 8003066:	f003 f8dd 	bl	8006224 <HAL_GPIO_WritePin>
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40020000 	.word	0x40020000

08003078 <PowerSupply_Off>:

bool PowerSupply_Off(void) {
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
    PowerSupply_SetState(GPIO_PIN_SET);
 800307c:	2001      	movs	r0, #1
 800307e:	f7ff ffe9 	bl	8003054 <PowerSupply_SetState>
    sendBluetoothData("PS00");
 8003082:	4805      	ldr	r0, [pc, #20]	@ (8003098 <PowerSupply_Off+0x20>)
 8003084:	f000 f888 	bl	8003198 <sendBluetoothData>
    return PowerSupply = false;
 8003088:	4b04      	ldr	r3, [pc, #16]	@ (800309c <PowerSupply_Off+0x24>)
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	4b03      	ldr	r3, [pc, #12]	@ (800309c <PowerSupply_Off+0x24>)
 8003090:	781b      	ldrb	r3, [r3, #0]
}
 8003092:	4618      	mov	r0, r3
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	0800c4cc 	.word	0x0800c4cc
 800309c:	20000368 	.word	0x20000368

080030a0 <PowerSupply_On>:

bool PowerSupply_On(void) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
    PowerSupply_SetState(GPIO_PIN_RESET);
 80030a4:	2000      	movs	r0, #0
 80030a6:	f7ff ffd5 	bl	8003054 <PowerSupply_SetState>
    sendBluetoothData("PS01");
 80030aa:	4805      	ldr	r0, [pc, #20]	@ (80030c0 <PowerSupply_On+0x20>)
 80030ac:	f000 f874 	bl	8003198 <sendBluetoothData>
    return PowerSupply = true;
 80030b0:	4b04      	ldr	r3, [pc, #16]	@ (80030c4 <PowerSupply_On+0x24>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	701a      	strb	r2, [r3, #0]
 80030b6:	4b03      	ldr	r3, [pc, #12]	@ (80030c4 <PowerSupply_On+0x24>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	0800c4d4 	.word	0x0800c4d4
 80030c4:	20000368 	.word	0x20000368

080030c8 <Battery_SetState>:

// Wył/Wł baterie
void Battery_SetState(GPIO_PinState state) {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(Battery_GPIO_Port, Battery_Pin, state);
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	461a      	mov	r2, r3
 80030d6:	2108      	movs	r1, #8
 80030d8:	4803      	ldr	r0, [pc, #12]	@ (80030e8 <Battery_SetState+0x20>)
 80030da:	f003 f8a3 	bl	8006224 <HAL_GPIO_WritePin>
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40021400 	.word	0x40021400

080030ec <Battery_Off>:

bool Battery_Off(void) {
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
    Battery_SetState(GPIO_PIN_SET);
 80030f0:	2001      	movs	r0, #1
 80030f2:	f7ff ffe9 	bl	80030c8 <Battery_SetState>
    sendBluetoothData("BT00");
 80030f6:	4805      	ldr	r0, [pc, #20]	@ (800310c <Battery_Off+0x20>)
 80030f8:	f000 f84e 	bl	8003198 <sendBluetoothData>
    return Battery = false;
 80030fc:	4b04      	ldr	r3, [pc, #16]	@ (8003110 <Battery_Off+0x24>)
 80030fe:	2200      	movs	r2, #0
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	4b03      	ldr	r3, [pc, #12]	@ (8003110 <Battery_Off+0x24>)
 8003104:	781b      	ldrb	r3, [r3, #0]
}
 8003106:	4618      	mov	r0, r3
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	0800c4dc 	.word	0x0800c4dc
 8003110:	20000369 	.word	0x20000369

08003114 <Battery_On>:

bool Battery_On(void) {
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
    Battery_SetState(GPIO_PIN_RESET);
 8003118:	2000      	movs	r0, #0
 800311a:	f7ff ffd5 	bl	80030c8 <Battery_SetState>
    sendBluetoothData("BT01");
 800311e:	4805      	ldr	r0, [pc, #20]	@ (8003134 <Battery_On+0x20>)
 8003120:	f000 f83a 	bl	8003198 <sendBluetoothData>
    return Battery = true;
 8003124:	4b04      	ldr	r3, [pc, #16]	@ (8003138 <Battery_On+0x24>)
 8003126:	2201      	movs	r2, #1
 8003128:	701a      	strb	r2, [r3, #0]
 800312a:	4b03      	ldr	r3, [pc, #12]	@ (8003138 <Battery_On+0x24>)
 800312c:	781b      	ldrb	r3, [r3, #0]
}
 800312e:	4618      	mov	r0, r3
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	0800c4e4 	.word	0x0800c4e4
 8003138:	20000369 	.word	0x20000369

0800313c <Output_SetState>:

// Wył/Wł wyjście
void Output_SetState(GPIO_PinState state) {
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(Output_GPIO_Port, Output_Pin, state);
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	461a      	mov	r2, r3
 800314a:	2120      	movs	r1, #32
 800314c:	4803      	ldr	r0, [pc, #12]	@ (800315c <Output_SetState+0x20>)
 800314e:	f003 f869 	bl	8006224 <HAL_GPIO_WritePin>
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40021400 	.word	0x40021400

08003160 <Output_Off>:

bool Output_Off(void) {
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
    Output_SetState(GPIO_PIN_SET);
 8003164:	2001      	movs	r0, #1
 8003166:	f7ff ffe9 	bl	800313c <Output_SetState>
    return Output = false;
 800316a:	4b03      	ldr	r3, [pc, #12]	@ (8003178 <Output_Off+0x18>)
 800316c:	2200      	movs	r2, #0
 800316e:	701a      	strb	r2, [r3, #0]
 8003170:	4b01      	ldr	r3, [pc, #4]	@ (8003178 <Output_Off+0x18>)
 8003172:	781b      	ldrb	r3, [r3, #0]
}
 8003174:	4618      	mov	r0, r3
 8003176:	bd80      	pop	{r7, pc}
 8003178:	2000036a 	.word	0x2000036a

0800317c <Output_On>:

bool Output_On(void) {
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
    Output_SetState(GPIO_PIN_RESET);
 8003180:	2000      	movs	r0, #0
 8003182:	f7ff ffdb 	bl	800313c <Output_SetState>
    return Output = true;
 8003186:	4b03      	ldr	r3, [pc, #12]	@ (8003194 <Output_On+0x18>)
 8003188:	2201      	movs	r2, #1
 800318a:	701a      	strb	r2, [r3, #0]
 800318c:	4b01      	ldr	r3, [pc, #4]	@ (8003194 <Output_On+0x18>)
 800318e:	781b      	ldrb	r3, [r3, #0]
}
 8003190:	4618      	mov	r0, r3
 8003192:	bd80      	pop	{r7, pc}
 8003194:	2000036a 	.word	0x2000036a

08003198 <sendBluetoothData>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void sendBluetoothData(const char* data){
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
	snprintf(buffer, sizeof(buffer), "%s\n", data);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a0c      	ldr	r2, [pc, #48]	@ (80031d4 <sendBluetoothData+0x3c>)
 80031a4:	210a      	movs	r1, #10
 80031a6:	480c      	ldr	r0, [pc, #48]	@ (80031d8 <sendBluetoothData+0x40>)
 80031a8:	f008 fb8c 	bl	800b8c4 <sniprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80031ac:	480a      	ldr	r0, [pc, #40]	@ (80031d8 <sendBluetoothData+0x40>)
 80031ae:	f7fd f839 	bl	8000224 <strlen>
 80031b2:	4603      	mov	r3, r0
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ba:	4907      	ldr	r1, [pc, #28]	@ (80031d8 <sendBluetoothData+0x40>)
 80031bc:	4807      	ldr	r0, [pc, #28]	@ (80031dc <sendBluetoothData+0x44>)
 80031be:	f007 fbf5 	bl	800a9ac <HAL_UART_Transmit>
	HAL_Delay(500);
 80031c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80031c6:	f002 fd11 	bl	8005bec <HAL_Delay>
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	0800c4ec 	.word	0x0800c4ec
 80031d8:	200002d8 	.word	0x200002d8
 80031dc:	20000520 	.word	0x20000520

080031e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6) {
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a0e      	ldr	r2, [pc, #56]	@ (8003228 <HAL_UART_RxCpltCallback+0x48>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d116      	bne.n	8003220 <HAL_UART_RxCpltCallback+0x40>
        rxIndex++;
 80031f2:	4b0e      	ldr	r3, [pc, #56]	@ (800322c <HAL_UART_RxCpltCallback+0x4c>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	3301      	adds	r3, #1
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	4b0c      	ldr	r3, [pc, #48]	@ (800322c <HAL_UART_RxCpltCallback+0x4c>)
 80031fc:	701a      	strb	r2, [r3, #0]

        if (rxIndex >= RX_BUFFER_SIZE+2) {
 80031fe:	4b0b      	ldr	r3, [pc, #44]	@ (800322c <HAL_UART_RxCpltCallback+0x4c>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b05      	cmp	r3, #5
 8003204:	d902      	bls.n	800320c <HAL_UART_RxCpltCallback+0x2c>
            rxIndex = 0;
 8003206:	4b09      	ldr	r3, [pc, #36]	@ (800322c <HAL_UART_RxCpltCallback+0x4c>)
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(huart, &rxBuffer[rxIndex], 1);
 800320c:	4b07      	ldr	r3, [pc, #28]	@ (800322c <HAL_UART_RxCpltCallback+0x4c>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	4b07      	ldr	r3, [pc, #28]	@ (8003230 <HAL_UART_RxCpltCallback+0x50>)
 8003214:	4413      	add	r3, r2
 8003216:	2201      	movs	r2, #1
 8003218:	4619      	mov	r1, r3
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f007 fc49 	bl	800aab2 <HAL_UART_Receive_IT>
    }
}
 8003220:	bf00      	nop
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40011400 	.word	0x40011400
 800322c:	200002ee 	.word	0x200002ee
 8003230:	200002e4 	.word	0x200002e4

08003234 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	ed2d 8b02 	vpush	{d8}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  if(htim == &htim2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a31      	ldr	r2, [pc, #196]	@ (8003308 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d12d      	bne.n	80032a4 <HAL_TIM_PeriodElapsedCallback+0x70>
  {
	  if((PIR_Garage == true || PIR_Kitchen == true || PIR_Livingroom == true) && alarm == true)
 8003248:	4b30      	ldr	r3, [pc, #192]	@ (800330c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d107      	bne.n	8003260 <HAL_TIM_PeriodElapsedCallback+0x2c>
 8003250:	4b2f      	ldr	r3, [pc, #188]	@ (8003310 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d103      	bne.n	8003260 <HAL_TIM_PeriodElapsedCallback+0x2c>
 8003258:	4b2e      	ldr	r3, [pc, #184]	@ (8003314 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d009      	beq.n	8003274 <HAL_TIM_PeriodElapsedCallback+0x40>
 8003260:	4b2d      	ldr	r3, [pc, #180]	@ (8003318 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_TIM_PeriodElapsedCallback+0x40>
	  {
		  PIR_detected = true, alarmLED = true;
 8003268:	4b2c      	ldr	r3, [pc, #176]	@ (800331c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800326a:	2201      	movs	r2, #1
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	4b2c      	ldr	r3, [pc, #176]	@ (8003320 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8003270:	2201      	movs	r2, #1
 8003272:	701a      	strb	r2, [r3, #0]
	  }

	  if(alarmLED == true && PIR_detected == true)
 8003274:	4b2a      	ldr	r3, [pc, #168]	@ (8003320 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00d      	beq.n	8003298 <HAL_TIM_PeriodElapsedCallback+0x64>
 800327c:	4b27      	ldr	r3, [pc, #156]	@ (800331c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d009      	beq.n	8003298 <HAL_TIM_PeriodElapsedCallback+0x64>
	  {
		  HAL_GPIO_TogglePin(Alarm_LED_GPIO_Port, Alarm_LED_Pin);
 8003284:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003288:	4826      	ldr	r0, [pc, #152]	@ (8003324 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800328a:	f002 ffe4 	bl	8006256 <HAL_GPIO_TogglePin>
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800328e:	2108      	movs	r1, #8
 8003290:	481d      	ldr	r0, [pc, #116]	@ (8003308 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003292:	f006 f9b5 	bl	8009600 <HAL_TIM_PWM_Start>
 8003296:	e005      	b.n	80032a4 <HAL_TIM_PeriodElapsedCallback+0x70>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(Alarm_LED_GPIO_Port, Alarm_LED_Pin, GPIO_PIN_RESET);
 8003298:	2200      	movs	r2, #0
 800329a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800329e:	4821      	ldr	r0, [pc, #132]	@ (8003324 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80032a0:	f002 ffc0 	bl	8006224 <HAL_GPIO_WritePin>
	  };
  }
    if(htim->Instance == TIM4)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003328 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d125      	bne.n	80032fa <HAL_TIM_PeriodElapsedCallback+0xc6>
    {
        BMP2_ReadData(&bmp2dev, &press, &temp);
 80032ae:	4a1f      	ldr	r2, [pc, #124]	@ (800332c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80032b0:	491f      	ldr	r1, [pc, #124]	@ (8003330 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80032b2:	4820      	ldr	r0, [pc, #128]	@ (8003334 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80032b4:	f7ff f836 	bl	8002324 <BMP2_ReadData>
        PI_output = calculate_discrete_pi(&my_PI, setpoint, temp);
 80032b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003338 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80032ba:	ed93 8a00 	vldr	s16, [r3]
 80032be:	4b1b      	ldr	r3, [pc, #108]	@ (800332c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	4610      	mov	r0, r2
 80032c6:	4619      	mov	r1, r3
 80032c8:	f7fd fca8 	bl	8000c1c <__aeabi_d2f>
 80032cc:	4603      	mov	r3, r0
 80032ce:	ee00 3a90 	vmov	s1, r3
 80032d2:	eeb0 0a48 	vmov.f32	s0, s16
 80032d6:	4819      	ldr	r0, [pc, #100]	@ (800333c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80032d8:	f7ff fdcc 	bl	8002e74 <calculate_discrete_pi>
 80032dc:	eef0 7a40 	vmov.f32	s15, s0
 80032e0:	4b17      	ldr	r3, [pc, #92]	@ (8003340 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80032e2:	edc3 7a00 	vstr	s15, [r3]
        my_PI.previous_measured = temp;
 80032e6:	4b11      	ldr	r3, [pc, #68]	@ (800332c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80032e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ec:	4610      	mov	r0, r2
 80032ee:	4619      	mov	r1, r3
 80032f0:	f7fd fc94 	bl	8000c1c <__aeabi_d2f>
 80032f4:	4603      	mov	r3, r0
 80032f6:	4a11      	ldr	r2, [pc, #68]	@ (800333c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80032f8:	6153      	str	r3, [r2, #20]
    }
}
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	ecbd 8b02 	vpop	{d8}
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	2000043c 	.word	0x2000043c
 800330c:	20000300 	.word	0x20000300
 8003310:	20000302 	.word	0x20000302
 8003314:	20000301 	.word	0x20000301
 8003318:	200002fe 	.word	0x200002fe
 800331c:	20000303 	.word	0x20000303
 8003320:	200002ff 	.word	0x200002ff
 8003324:	40021000 	.word	0x40021000
 8003328:	40000800 	.word	0x40000800
 800332c:	20000330 	.word	0x20000330
 8003330:	20000338 	.word	0x20000338
 8003334:	20000018 	.word	0x20000018
 8003338:	20000138 	.word	0x20000138
 800333c:	2000013c 	.word	0x2000013c
 8003340:	2000032c 	.word	0x2000032c
 8003344:	00000000 	.word	0x00000000

08003348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003348:	b5b0      	push	{r4, r5, r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800334e:	f002 fbf0 	bl	8005b32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003352:	f001 fda9 	bl	8004ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003356:	f7ff f849 	bl	80023ec <MX_GPIO_Init>
  MX_TIM2_Init();
 800335a:	f002 f843 	bl	80053e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800335e:	f002 f8d3 	bl	8005508 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003362:	f002 f949 	bl	80055f8 <MX_TIM4_Init>
  MX_SPI4_Init();
 8003366:	f001 fe0d 	bl	8004f84 <MX_SPI4_Init>
  MX_I2C1_Init();
 800336a:	f7ff f95f 	bl	800262c <MX_I2C1_Init>
  MX_USART6_UART_Init();
 800336e:	f002 fb27 	bl	80059c0 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8003372:	f001 ff67 	bl	8005244 <MX_TIM1_Init>
  MX_I2C2_Init();
 8003376:	f7ff f999 	bl	80026ac <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  //LOAD CONFIG
  keypad_config();
 800337a:	f7ff fa7d 	bl	8002878 <keypad_config>
  LCD_Initialize();
 800337e:	f7ff fc65 	bl	8002c4c <LCD_Initialize>
 //TIMERS AND INTERRUPTS
  HAL_TIM_Base_Start_IT(&htim2);
 8003382:	48ab      	ldr	r0, [pc, #684]	@ (8003630 <main+0x2e8>)
 8003384:	f006 f834 	bl	80093f0 <HAL_TIM_Base_Start_IT>
  BMP2_Init(&bmp2dev);
 8003388:	48aa      	ldr	r0, [pc, #680]	@ (8003634 <main+0x2ec>)
 800338a:	f7fe feff 	bl	800218c <BMP2_Init>
  HAL_TIM_Base_Start_IT(&htim4);
 800338e:	48aa      	ldr	r0, [pc, #680]	@ (8003638 <main+0x2f0>)
 8003390:	f006 f82e 	bl	80093f0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003394:	2108      	movs	r1, #8
 8003396:	48a8      	ldr	r0, [pc, #672]	@ (8003638 <main+0x2f0>)
 8003398:	f006 f932 	bl	8009600 <HAL_TIM_PWM_Start>
  //ENERGY SYSTEM
  INA219_Init(&ina219, &hi2c1, INA219_ADDRESS);
 800339c:	2240      	movs	r2, #64	@ 0x40
 800339e:	49a7      	ldr	r1, [pc, #668]	@ (800363c <main+0x2f4>)
 80033a0:	48a7      	ldr	r0, [pc, #668]	@ (8003640 <main+0x2f8>)
 80033a2:	f7fd ff01 	bl	80011a8 <INA219_Init>
  INA219_Init(&ina219_2, &hi2c2, INA219_ADDRESS);
 80033a6:	2240      	movs	r2, #64	@ 0x40
 80033a8:	49a6      	ldr	r1, [pc, #664]	@ (8003644 <main+0x2fc>)
 80033aa:	48a7      	ldr	r0, [pc, #668]	@ (8003648 <main+0x300>)
 80033ac:	f7fd fefc 	bl	80011a8 <INA219_Init>
  Output_On();
 80033b0:	f7ff fee4 	bl	800317c <Output_On>
  //START SCREEN
  LCD_WriteCommand(HD44780_CLEAR);
 80033b4:	2001      	movs	r0, #1
 80033b6:	f7ff fbd5 	bl	8002b64 <LCD_WriteCommand>
  LCD_WriteText("Welcome to");
 80033ba:	48a4      	ldr	r0, [pc, #656]	@ (800364c <main+0x304>)
 80033bc:	f7ff fbf8 	bl	8002bb0 <LCD_WriteText>
  LCD_WriteTextXY("Smarthome system",0,1);
 80033c0:	2201      	movs	r2, #1
 80033c2:	2100      	movs	r1, #0
 80033c4:	48a2      	ldr	r0, [pc, #648]	@ (8003650 <main+0x308>)
 80033c6:	f7ff fc22 	bl	8002c0e <LCD_WriteTextXY>
  HAL_Delay(3000);
 80033ca:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80033ce:	f002 fc0d 	bl	8005bec <HAL_Delay>
  refreshLCD = true;
 80033d2:	4ba0      	ldr	r3, [pc, #640]	@ (8003654 <main+0x30c>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &rxBuffer[rxIndex], 1);  // Rozpocznij odbiór
 80033d8:	4b9f      	ldr	r3, [pc, #636]	@ (8003658 <main+0x310>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	4b9f      	ldr	r3, [pc, #636]	@ (800365c <main+0x314>)
 80033e0:	4413      	add	r3, r2
 80033e2:	2201      	movs	r2, #1
 80033e4:	4619      	mov	r1, r3
 80033e6:	489e      	ldr	r0, [pc, #632]	@ (8003660 <main+0x318>)
 80033e8:	f007 fb63 	bl	800aab2 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      BMP2_ReadData(&bmp2dev, &press, &temp);
 80033ec:	4a9d      	ldr	r2, [pc, #628]	@ (8003664 <main+0x31c>)
 80033ee:	499e      	ldr	r1, [pc, #632]	@ (8003668 <main+0x320>)
 80033f0:	4890      	ldr	r0, [pc, #576]	@ (8003634 <main+0x2ec>)
 80033f2:	f7fe ff97 	bl	8002324 <BMP2_ReadData>

	  if(HAL_GPIO_ReadPin(PIR_Garage_GPIO_Port, PIR_Garage_Pin) == GPIO_PIN_SET){PIR_Garage = true;}
 80033f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80033fa:	489c      	ldr	r0, [pc, #624]	@ (800366c <main+0x324>)
 80033fc:	f002 fefa 	bl	80061f4 <HAL_GPIO_ReadPin>
 8003400:	4603      	mov	r3, r0
 8003402:	2b01      	cmp	r3, #1
 8003404:	d103      	bne.n	800340e <main+0xc6>
 8003406:	4b9a      	ldr	r3, [pc, #616]	@ (8003670 <main+0x328>)
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
 800340c:	e002      	b.n	8003414 <main+0xcc>
	  	  else {PIR_Garage = false;};
 800340e:	4b98      	ldr	r3, [pc, #608]	@ (8003670 <main+0x328>)
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(PIR_Kitchen_GPIO_Port, PIR_Kitchen_Pin) == GPIO_PIN_SET){PIR_Kitchen = true;}
 8003414:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003418:	4894      	ldr	r0, [pc, #592]	@ (800366c <main+0x324>)
 800341a:	f002 feeb 	bl	80061f4 <HAL_GPIO_ReadPin>
 800341e:	4603      	mov	r3, r0
 8003420:	2b01      	cmp	r3, #1
 8003422:	d103      	bne.n	800342c <main+0xe4>
 8003424:	4b93      	ldr	r3, [pc, #588]	@ (8003674 <main+0x32c>)
 8003426:	2201      	movs	r2, #1
 8003428:	701a      	strb	r2, [r3, #0]
 800342a:	e002      	b.n	8003432 <main+0xea>
	  	  else {PIR_Kitchen = false;};
 800342c:	4b91      	ldr	r3, [pc, #580]	@ (8003674 <main+0x32c>)
 800342e:	2200      	movs	r2, #0
 8003430:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(PIR_Livingroom_GPIO_Port, PIR_Livingroom_Pin) == GPIO_PIN_SET){PIR_Livingroom = true;}
 8003432:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003436:	488d      	ldr	r0, [pc, #564]	@ (800366c <main+0x324>)
 8003438:	f002 fedc 	bl	80061f4 <HAL_GPIO_ReadPin>
 800343c:	4603      	mov	r3, r0
 800343e:	2b01      	cmp	r3, #1
 8003440:	d103      	bne.n	800344a <main+0x102>
 8003442:	4b8d      	ldr	r3, [pc, #564]	@ (8003678 <main+0x330>)
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]
 8003448:	e002      	b.n	8003450 <main+0x108>
	  	  else{PIR_Livingroom = false;};
 800344a:	4b8b      	ldr	r3, [pc, #556]	@ (8003678 <main+0x330>)
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]
	  move_menu(act_menu);
 8003450:	4b8a      	ldr	r3, [pc, #552]	@ (800367c <main+0x334>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fc71 	bl	8002d3c <move_menu>
 	if (symbol[0] == '*' && act_menu == mainmenu){
 800345a:	4b89      	ldr	r3, [pc, #548]	@ (8003680 <main+0x338>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003460:	f040 80af 	bne.w	80035c2 <main+0x27a>
 8003464:	4b85      	ldr	r3, [pc, #532]	@ (800367c <main+0x334>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a86      	ldr	r2, [pc, #536]	@ (8003684 <main+0x33c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	f040 80a9 	bne.w	80035c2 <main+0x27a>
 		refreshLCD = true;
 8003470:	4b78      	ldr	r3, [pc, #480]	@ (8003654 <main+0x30c>)
 8003472:	2201      	movs	r2, #1
 8003474:	701a      	strb	r2, [r3, #0]
 		switch (position){
 8003476:	4b84      	ldr	r3, [pc, #528]	@ (8003688 <main+0x340>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	3b01      	subs	r3, #1
 800347c:	2b03      	cmp	r3, #3
 800347e:	f200 8094 	bhi.w	80035aa <main+0x262>
 8003482:	a201      	add	r2, pc, #4	@ (adr r2, 8003488 <main+0x140>)
 8003484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003488:	08003499 	.word	0x08003499
 800348c:	080034ad 	.word	0x080034ad
 8003490:	080034c1 	.word	0x080034c1
 8003494:	080034d5 	.word	0x080034d5
			case 1: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8003498:	4b78      	ldr	r3, [pc, #480]	@ (800367c <main+0x334>)
 800349a:	4a7c      	ldr	r2, [pc, #496]	@ (800368c <main+0x344>)
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	4b7a      	ldr	r3, [pc, #488]	@ (8003688 <main+0x340>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	701a      	strb	r2, [r3, #0]
 80034a4:	4b7a      	ldr	r3, [pc, #488]	@ (8003690 <main+0x348>)
 80034a6:	2202      	movs	r2, #2
 80034a8:	701a      	strb	r2, [r3, #0]
 80034aa:	e088      	b.n	80035be <main+0x276>
			case 2: act_menu = menuLivingroom, position = 1, max_pos = 3; break;
 80034ac:	4b73      	ldr	r3, [pc, #460]	@ (800367c <main+0x334>)
 80034ae:	4a79      	ldr	r2, [pc, #484]	@ (8003694 <main+0x34c>)
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	4b75      	ldr	r3, [pc, #468]	@ (8003688 <main+0x340>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	701a      	strb	r2, [r3, #0]
 80034b8:	4b75      	ldr	r3, [pc, #468]	@ (8003690 <main+0x348>)
 80034ba:	2203      	movs	r2, #3
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	e07e      	b.n	80035be <main+0x276>
			case 3: act_menu = menuGarage, position = 1, max_pos = 3; break;
 80034c0:	4b6e      	ldr	r3, [pc, #440]	@ (800367c <main+0x334>)
 80034c2:	4a75      	ldr	r2, [pc, #468]	@ (8003698 <main+0x350>)
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	4b70      	ldr	r3, [pc, #448]	@ (8003688 <main+0x340>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	701a      	strb	r2, [r3, #0]
 80034cc:	4b70      	ldr	r3, [pc, #448]	@ (8003690 <main+0x348>)
 80034ce:	2203      	movs	r2, #3
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	e074      	b.n	80035be <main+0x276>
			case 4:
					i = 0;
 80034d4:	4b71      	ldr	r3, [pc, #452]	@ (800369c <main+0x354>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
					HAL_Delay(200);
 80034da:	20c8      	movs	r0, #200	@ 0xc8
 80034dc:	f002 fb86 	bl	8005bec <HAL_Delay>
					memset(buff, 0, sizeof(buff));
 80034e0:	2205      	movs	r2, #5
 80034e2:	2100      	movs	r1, #0
 80034e4:	486e      	ldr	r0, [pc, #440]	@ (80036a0 <main+0x358>)
 80034e6:	f008 fa21 	bl	800b92c <memset>
					LCD_WriteCommand(HD44780_CLEAR);
 80034ea:	2001      	movs	r0, #1
 80034ec:	f7ff fb3a 	bl	8002b64 <LCD_WriteCommand>
					LCD_WriteText("Write PIN");
 80034f0:	486c      	ldr	r0, [pc, #432]	@ (80036a4 <main+0x35c>)
 80034f2:	f7ff fb5d 	bl	8002bb0 <LCD_WriteText>
					while(1) {
						refreshLCD = true;
 80034f6:	4b57      	ldr	r3, [pc, #348]	@ (8003654 <main+0x30c>)
 80034f8:	2201      	movs	r2, #1
 80034fa:	701a      	strb	r2, [r3, #0]
						symbol[0] = keypad_readkey();
 80034fc:	f7ff f9f0 	bl	80028e0 <keypad_readkey>
 8003500:	4603      	mov	r3, r0
 8003502:	461a      	mov	r2, r3
 8003504:	4b5e      	ldr	r3, [pc, #376]	@ (8003680 <main+0x338>)
 8003506:	701a      	strb	r2, [r3, #0]
						if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 8003508:	4b5d      	ldr	r3, [pc, #372]	@ (8003680 <main+0x338>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b2f      	cmp	r3, #47	@ 0x2f
 800350e:	d922      	bls.n	8003556 <main+0x20e>
 8003510:	4b5b      	ldr	r3, [pc, #364]	@ (8003680 <main+0x338>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b39      	cmp	r3, #57	@ 0x39
 8003516:	d81e      	bhi.n	8003556 <main+0x20e>
 8003518:	4b60      	ldr	r3, [pc, #384]	@ (800369c <main+0x354>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b03      	cmp	r3, #3
 800351e:	d81a      	bhi.n	8003556 <main+0x20e>
							buff[i] = symbol[0];
 8003520:	4b5e      	ldr	r3, [pc, #376]	@ (800369c <main+0x354>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a56      	ldr	r2, [pc, #344]	@ (8003680 <main+0x338>)
 8003526:	7811      	ldrb	r1, [r2, #0]
 8003528:	4a5d      	ldr	r2, [pc, #372]	@ (80036a0 <main+0x358>)
 800352a:	54d1      	strb	r1, [r2, r3]
							i++;
 800352c:	4b5b      	ldr	r3, [pc, #364]	@ (800369c <main+0x354>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3301      	adds	r3, #1
 8003532:	4a5a      	ldr	r2, [pc, #360]	@ (800369c <main+0x354>)
 8003534:	6013      	str	r3, [r2, #0]
							buff[i] = '\0';
 8003536:	4b59      	ldr	r3, [pc, #356]	@ (800369c <main+0x354>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a59      	ldr	r2, [pc, #356]	@ (80036a0 <main+0x358>)
 800353c:	2100      	movs	r1, #0
 800353e:	54d1      	strb	r1, [r2, r3]
							LCD_WriteCommand(HD44780_CLEAR);
 8003540:	2001      	movs	r0, #1
 8003542:	f7ff fb0f 	bl	8002b64 <LCD_WriteCommand>
							LCD_WriteText("PIN: ");
 8003546:	4858      	ldr	r0, [pc, #352]	@ (80036a8 <main+0x360>)
 8003548:	f7ff fb32 	bl	8002bb0 <LCD_WriteText>
							LCD_WriteTextXY(buff, 0, 1);
 800354c:	2201      	movs	r2, #1
 800354e:	2100      	movs	r1, #0
 8003550:	4853      	ldr	r0, [pc, #332]	@ (80036a0 <main+0x358>)
 8003552:	f7ff fb5c 	bl	8002c0e <LCD_WriteTextXY>
						}
						HAL_Delay(300);
 8003556:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800355a:	f002 fb47 	bl	8005bec <HAL_Delay>
						symbol[0] = keypad_readkey();
 800355e:	f7ff f9bf 	bl	80028e0 <keypad_readkey>
 8003562:	4603      	mov	r3, r0
 8003564:	461a      	mov	r2, r3
 8003566:	4b46      	ldr	r3, [pc, #280]	@ (8003680 <main+0x338>)
 8003568:	701a      	strb	r2, [r3, #0]
						if(symbol[0] == '*') {
 800356a:	4b45      	ldr	r3, [pc, #276]	@ (8003680 <main+0x338>)
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003570:	d115      	bne.n	800359e <main+0x256>
							pinKey = atoi(buff);
 8003572:	484b      	ldr	r0, [pc, #300]	@ (80036a0 <main+0x358>)
 8003574:	f008 f91e 	bl	800b7b4 <atoi>
 8003578:	4603      	mov	r3, r0
 800357a:	4a4c      	ldr	r2, [pc, #304]	@ (80036ac <main+0x364>)
 800357c:	6013      	str	r3, [r2, #0]
							if(pinKey == 1234) {
 800357e:	4b4b      	ldr	r3, [pc, #300]	@ (80036ac <main+0x364>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 8003586:	4293      	cmp	r3, r2
 8003588:	d10d      	bne.n	80035a6 <main+0x25e>
								act_menu = menuAlarm, position = 1, max_pos = 2; break;
 800358a:	4b3c      	ldr	r3, [pc, #240]	@ (800367c <main+0x334>)
 800358c:	4a48      	ldr	r2, [pc, #288]	@ (80036b0 <main+0x368>)
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	4b3d      	ldr	r3, [pc, #244]	@ (8003688 <main+0x340>)
 8003592:	2201      	movs	r2, #1
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	4b3e      	ldr	r3, [pc, #248]	@ (8003690 <main+0x348>)
 8003598:	2202      	movs	r2, #2
 800359a:	701a      	strb	r2, [r3, #0]
 800359c:	e004      	b.n	80035a8 <main+0x260>
							}
							break;
						}
						HAL_Delay(100);
 800359e:	2064      	movs	r0, #100	@ 0x64
 80035a0:	f002 fb24 	bl	8005bec <HAL_Delay>
						refreshLCD = true;
 80035a4:	e7a7      	b.n	80034f6 <main+0x1ae>
							break;
 80035a6:	bf00      	nop
					}
					break;
 80035a8:	e009      	b.n	80035be <main+0x276>
			default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 80035aa:	4b34      	ldr	r3, [pc, #208]	@ (800367c <main+0x334>)
 80035ac:	4a37      	ldr	r2, [pc, #220]	@ (800368c <main+0x344>)
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	4b35      	ldr	r3, [pc, #212]	@ (8003688 <main+0x340>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	701a      	strb	r2, [r3, #0]
 80035b6:	4b36      	ldr	r3, [pc, #216]	@ (8003690 <main+0x348>)
 80035b8:	2202      	movs	r2, #2
 80035ba:	701a      	strb	r2, [r3, #0]
 80035bc:	bf00      	nop
 		switch (position){
 80035be:	f000 bed7 	b.w	8004370 <main+0x1028>
 		}
 	}
 	else if(symbol[0] == '*' && act_menu == menuAlarm){
 80035c2:	4b2f      	ldr	r3, [pc, #188]	@ (8003680 <main+0x338>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80035c8:	f040 80af 	bne.w	800372a <main+0x3e2>
 80035cc:	4b2b      	ldr	r3, [pc, #172]	@ (800367c <main+0x334>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a37      	ldr	r2, [pc, #220]	@ (80036b0 <main+0x368>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	f040 80a9 	bne.w	800372a <main+0x3e2>
 		refreshLCD = true;
 80035d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003654 <main+0x30c>)
 80035da:	2201      	movs	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]
 		switch (position){
 80035de:	4b2a      	ldr	r3, [pc, #168]	@ (8003688 <main+0x340>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d002      	beq.n	80035ec <main+0x2a4>
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d06e      	beq.n	80036c8 <main+0x380>
 80035ea:	e092      	b.n	8003712 <main+0x3ca>
			case 1: alarm = true;
 80035ec:	4b31      	ldr	r3, [pc, #196]	@ (80036b4 <main+0x36c>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	701a      	strb	r2, [r3, #0]
				PIR_detected = false;
 80035f2:	4b31      	ldr	r3, [pc, #196]	@ (80036b8 <main+0x370>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	701a      	strb	r2, [r3, #0]
				alarmLED = false;
 80035f8:	4b30      	ldr	r3, [pc, #192]	@ (80036bc <main+0x374>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
				LCD_WriteCommand(HD44780_CLEAR);
 80035fe:	2001      	movs	r0, #1
 8003600:	f7ff fab0 	bl	8002b64 <LCD_WriteCommand>
				LCD_WriteText("Alarm");
 8003604:	482e      	ldr	r0, [pc, #184]	@ (80036c0 <main+0x378>)
 8003606:	f7ff fad3 	bl	8002bb0 <LCD_WriteText>
				LCD_WriteTextXY("turned on",0,1);
 800360a:	2201      	movs	r2, #1
 800360c:	2100      	movs	r1, #0
 800360e:	482d      	ldr	r0, [pc, #180]	@ (80036c4 <main+0x37c>)
 8003610:	f7ff fafd 	bl	8002c0e <LCD_WriteTextXY>
				HAL_TIM_Base_Start_IT(&htim2);
 8003614:	4806      	ldr	r0, [pc, #24]	@ (8003630 <main+0x2e8>)
 8003616:	f005 feeb 	bl	80093f0 <HAL_TIM_Base_Start_IT>
				act_menu = mainmenu, position = 1, max_pos = 4;
 800361a:	4b18      	ldr	r3, [pc, #96]	@ (800367c <main+0x334>)
 800361c:	4a19      	ldr	r2, [pc, #100]	@ (8003684 <main+0x33c>)
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	4b19      	ldr	r3, [pc, #100]	@ (8003688 <main+0x340>)
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
 8003626:	4b1a      	ldr	r3, [pc, #104]	@ (8003690 <main+0x348>)
 8003628:	2204      	movs	r2, #4
 800362a:	701a      	strb	r2, [r3, #0]
				break;
 800362c:	e07b      	b.n	8003726 <main+0x3de>
 800362e:	bf00      	nop
 8003630:	2000043c 	.word	0x2000043c
 8003634:	20000018 	.word	0x20000018
 8003638:	200004d4 	.word	0x200004d4
 800363c:	200001dc 	.word	0x200001dc
 8003640:	20000348 	.word	0x20000348
 8003644:	20000230 	.word	0x20000230
 8003648:	20000350 	.word	0x20000350
 800364c:	0800c4f0 	.word	0x0800c4f0
 8003650:	0800c4fc 	.word	0x0800c4fc
 8003654:	200002fd 	.word	0x200002fd
 8003658:	200002ee 	.word	0x200002ee
 800365c:	200002e4 	.word	0x200002e4
 8003660:	20000520 	.word	0x20000520
 8003664:	20000330 	.word	0x20000330
 8003668:	20000338 	.word	0x20000338
 800366c:	40021000 	.word	0x40021000
 8003670:	20000300 	.word	0x20000300
 8003674:	20000302 	.word	0x20000302
 8003678:	20000301 	.word	0x20000301
 800367c:	20000128 	.word	0x20000128
 8003680:	20000298 	.word	0x20000298
 8003684:	20000058 	.word	0x20000058
 8003688:	20000054 	.word	0x20000054
 800368c:	20000068 	.word	0x20000068
 8003690:	20000055 	.word	0x20000055
 8003694:	20000098 	.word	0x20000098
 8003698:	200000d8 	.word	0x200000d8
 800369c:	20000308 	.word	0x20000308
 80036a0:	2000029c 	.word	0x2000029c
 80036a4:	0800c510 	.word	0x0800c510
 80036a8:	0800c51c 	.word	0x0800c51c
 80036ac:	2000030c 	.word	0x2000030c
 80036b0:	20000118 	.word	0x20000118
 80036b4:	200002fe 	.word	0x200002fe
 80036b8:	20000303 	.word	0x20000303
 80036bc:	200002ff 	.word	0x200002ff
 80036c0:	0800c524 	.word	0x0800c524
 80036c4:	0800c52c 	.word	0x0800c52c

 	 		case 2: alarm = false;
 80036c8:	4b9e      	ldr	r3, [pc, #632]	@ (8003944 <main+0x5fc>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	701a      	strb	r2, [r3, #0]
				PIR_detected = false;
 80036ce:	4b9e      	ldr	r3, [pc, #632]	@ (8003948 <main+0x600>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]
				alarmLED = false;
 80036d4:	4b9d      	ldr	r3, [pc, #628]	@ (800394c <main+0x604>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]
				LCD_WriteCommand(HD44780_CLEAR);
 80036da:	2001      	movs	r0, #1
 80036dc:	f7ff fa42 	bl	8002b64 <LCD_WriteCommand>
				LCD_WriteText("Alarm");
 80036e0:	489b      	ldr	r0, [pc, #620]	@ (8003950 <main+0x608>)
 80036e2:	f7ff fa65 	bl	8002bb0 <LCD_WriteText>
				LCD_WriteTextXY("turned off",0,1);
 80036e6:	2201      	movs	r2, #1
 80036e8:	2100      	movs	r1, #0
 80036ea:	489a      	ldr	r0, [pc, #616]	@ (8003954 <main+0x60c>)
 80036ec:	f7ff fa8f 	bl	8002c0e <LCD_WriteTextXY>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80036f0:	2108      	movs	r1, #8
 80036f2:	4899      	ldr	r0, [pc, #612]	@ (8003958 <main+0x610>)
 80036f4:	f006 f87e 	bl	80097f4 <HAL_TIM_PWM_Stop>
				HAL_TIM_Base_Stop_IT(&htim2);
 80036f8:	4897      	ldr	r0, [pc, #604]	@ (8003958 <main+0x610>)
 80036fa:	f005 fef1 	bl	80094e0 <HAL_TIM_Base_Stop_IT>
				act_menu = mainmenu, position = 1, max_pos = 4;
 80036fe:	4b97      	ldr	r3, [pc, #604]	@ (800395c <main+0x614>)
 8003700:	4a97      	ldr	r2, [pc, #604]	@ (8003960 <main+0x618>)
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	4b97      	ldr	r3, [pc, #604]	@ (8003964 <main+0x61c>)
 8003706:	2201      	movs	r2, #1
 8003708:	701a      	strb	r2, [r3, #0]
 800370a:	4b97      	ldr	r3, [pc, #604]	@ (8003968 <main+0x620>)
 800370c:	2204      	movs	r2, #4
 800370e:	701a      	strb	r2, [r3, #0]
				break;
 8003710:	e009      	b.n	8003726 <main+0x3de>

 	 		default: act_menu = menuAlarm, position = 1, max_pos = 2; break;
 8003712:	4b92      	ldr	r3, [pc, #584]	@ (800395c <main+0x614>)
 8003714:	4a95      	ldr	r2, [pc, #596]	@ (800396c <main+0x624>)
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	4b92      	ldr	r3, [pc, #584]	@ (8003964 <main+0x61c>)
 800371a:	2201      	movs	r2, #1
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	4b92      	ldr	r3, [pc, #584]	@ (8003968 <main+0x620>)
 8003720:	2202      	movs	r2, #2
 8003722:	701a      	strb	r2, [r3, #0]
 8003724:	bf00      	nop
 		switch (position){
 8003726:	f000 be23 	b.w	8004370 <main+0x1028>
 		}
 	}
	else if(symbol[0] == '*' && act_menu == menuKitchen){
 800372a:	4b91      	ldr	r3, [pc, #580]	@ (8003970 <main+0x628>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003730:	d12e      	bne.n	8003790 <main+0x448>
 8003732:	4b8a      	ldr	r3, [pc, #552]	@ (800395c <main+0x614>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a8f      	ldr	r2, [pc, #572]	@ (8003974 <main+0x62c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d129      	bne.n	8003790 <main+0x448>
		refreshLCD = true;
 800373c:	4b8e      	ldr	r3, [pc, #568]	@ (8003978 <main+0x630>)
 800373e:	2201      	movs	r2, #1
 8003740:	701a      	strb	r2, [r3, #0]
		switch (position){
 8003742:	4b88      	ldr	r3, [pc, #544]	@ (8003964 <main+0x61c>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d002      	beq.n	8003750 <main+0x408>
 800374a:	2b02      	cmp	r3, #2
 800374c:	d00a      	beq.n	8003764 <main+0x41c>
 800374e:	e013      	b.n	8003778 <main+0x430>
			case 1: act_menu = menuKitchenLighting, position = 1, max_pos = 3; break;
 8003750:	4b82      	ldr	r3, [pc, #520]	@ (800395c <main+0x614>)
 8003752:	4a8a      	ldr	r2, [pc, #552]	@ (800397c <main+0x634>)
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	4b83      	ldr	r3, [pc, #524]	@ (8003964 <main+0x61c>)
 8003758:	2201      	movs	r2, #1
 800375a:	701a      	strb	r2, [r3, #0]
 800375c:	4b82      	ldr	r3, [pc, #520]	@ (8003968 <main+0x620>)
 800375e:	2203      	movs	r2, #3
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	e013      	b.n	800378c <main+0x444>
			case 2: act_menu = menuKitchenShutter, position = 1, max_pos = 2; break;
 8003764:	4b7d      	ldr	r3, [pc, #500]	@ (800395c <main+0x614>)
 8003766:	4a86      	ldr	r2, [pc, #536]	@ (8003980 <main+0x638>)
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	4b7e      	ldr	r3, [pc, #504]	@ (8003964 <main+0x61c>)
 800376c:	2201      	movs	r2, #1
 800376e:	701a      	strb	r2, [r3, #0]
 8003770:	4b7d      	ldr	r3, [pc, #500]	@ (8003968 <main+0x620>)
 8003772:	2202      	movs	r2, #2
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	e009      	b.n	800378c <main+0x444>
			default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8003778:	4b78      	ldr	r3, [pc, #480]	@ (800395c <main+0x614>)
 800377a:	4a7e      	ldr	r2, [pc, #504]	@ (8003974 <main+0x62c>)
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	4b79      	ldr	r3, [pc, #484]	@ (8003964 <main+0x61c>)
 8003780:	2201      	movs	r2, #1
 8003782:	701a      	strb	r2, [r3, #0]
 8003784:	4b78      	ldr	r3, [pc, #480]	@ (8003968 <main+0x620>)
 8003786:	2202      	movs	r2, #2
 8003788:	701a      	strb	r2, [r3, #0]
 800378a:	bf00      	nop
		switch (position){
 800378c:	f000 bdf0 	b.w	8004370 <main+0x1028>
		}
	}
	else if(symbol[0] == '*' && act_menu == menuKitchenLighting){
 8003790:	4b77      	ldr	r3, [pc, #476]	@ (8003970 <main+0x628>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b2a      	cmp	r3, #42	@ 0x2a
 8003796:	f040 80bc 	bne.w	8003912 <main+0x5ca>
 800379a:	4b70      	ldr	r3, [pc, #448]	@ (800395c <main+0x614>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a77      	ldr	r2, [pc, #476]	@ (800397c <main+0x634>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	f040 80b6 	bne.w	8003912 <main+0x5ca>
 		 	 		refreshLCD = true;
 80037a6:	4b74      	ldr	r3, [pc, #464]	@ (8003978 <main+0x630>)
 80037a8:	2201      	movs	r2, #1
 80037aa:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 80037ac:	4b6d      	ldr	r3, [pc, #436]	@ (8003964 <main+0x61c>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d02c      	beq.n	800380e <main+0x4c6>
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	f300 80a0 	bgt.w	80038fa <main+0x5b2>
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d002      	beq.n	80037c4 <main+0x47c>
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d015      	beq.n	80037ee <main+0x4a6>
 80037c2:	e09a      	b.n	80038fa <main+0x5b2>
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 80037c4:	2001      	movs	r0, #1
 80037c6:	f7ff f9cd 	bl	8002b64 <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 80037ca:	486e      	ldr	r0, [pc, #440]	@ (8003984 <main+0x63c>)
 80037cc:	f7ff f9f0 	bl	8002bb0 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 80037d0:	2201      	movs	r2, #1
 80037d2:	2100      	movs	r1, #0
 80037d4:	486c      	ldr	r0, [pc, #432]	@ (8003988 <main+0x640>)
 80037d6:	f7ff fa1a 	bl	8002c0e <LCD_WriteTextXY>
 		 	 				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, brightnessKitchen);
 80037da:	4b6c      	ldr	r3, [pc, #432]	@ (800398c <main+0x644>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	4b5e      	ldr	r3, [pc, #376]	@ (8003958 <main+0x610>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	641a      	str	r2, [r3, #64]	@ 0x40
 		 	 				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80037e4:	210c      	movs	r1, #12
 80037e6:	485c      	ldr	r0, [pc, #368]	@ (8003958 <main+0x610>)
 80037e8:	f005 ff0a 	bl	8009600 <HAL_TIM_PWM_Start>
 		 	 				break;
 80037ec:	e08f      	b.n	800390e <main+0x5c6>

 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 80037ee:	2001      	movs	r0, #1
 80037f0:	f7ff f9b8 	bl	8002b64 <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 80037f4:	4863      	ldr	r0, [pc, #396]	@ (8003984 <main+0x63c>)
 80037f6:	f7ff f9db 	bl	8002bb0 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 80037fa:	2201      	movs	r2, #1
 80037fc:	2100      	movs	r1, #0
 80037fe:	4855      	ldr	r0, [pc, #340]	@ (8003954 <main+0x60c>)
 8003800:	f7ff fa05 	bl	8002c0e <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8003804:	210c      	movs	r1, #12
 8003806:	4854      	ldr	r0, [pc, #336]	@ (8003958 <main+0x610>)
 8003808:	f005 fff4 	bl	80097f4 <HAL_TIM_PWM_Stop>
 				 	 		break;
 800380c:	e07f      	b.n	800390e <main+0x5c6>

 		 	 		case 3:
							i = 0;
 800380e:	4b60      	ldr	r3, [pc, #384]	@ (8003990 <main+0x648>)
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
							HAL_Delay(200);
 8003814:	20c8      	movs	r0, #200	@ 0xc8
 8003816:	f002 f9e9 	bl	8005bec <HAL_Delay>
							memset(buff, 0, sizeof(buff));
 800381a:	2205      	movs	r2, #5
 800381c:	2100      	movs	r1, #0
 800381e:	485d      	ldr	r0, [pc, #372]	@ (8003994 <main+0x64c>)
 8003820:	f008 f884 	bl	800b92c <memset>
							LCD_WriteCommand(HD44780_CLEAR);
 8003824:	2001      	movs	r0, #1
 8003826:	f7ff f99d 	bl	8002b64 <LCD_WriteCommand>
							LCD_WriteText("Write Bright");
 800382a:	485b      	ldr	r0, [pc, #364]	@ (8003998 <main+0x650>)
 800382c:	f7ff f9c0 	bl	8002bb0 <LCD_WriteText>
							while(1) {
								refreshLCD = true;
 8003830:	4b51      	ldr	r3, [pc, #324]	@ (8003978 <main+0x630>)
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]
								symbol[0] = keypad_readkey();
 8003836:	f7ff f853 	bl	80028e0 <keypad_readkey>
 800383a:	4603      	mov	r3, r0
 800383c:	461a      	mov	r2, r3
 800383e:	4b4c      	ldr	r3, [pc, #304]	@ (8003970 <main+0x628>)
 8003840:	701a      	strb	r2, [r3, #0]
								if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 8003842:	4b4b      	ldr	r3, [pc, #300]	@ (8003970 <main+0x628>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b2f      	cmp	r3, #47	@ 0x2f
 8003848:	d922      	bls.n	8003890 <main+0x548>
 800384a:	4b49      	ldr	r3, [pc, #292]	@ (8003970 <main+0x628>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b39      	cmp	r3, #57	@ 0x39
 8003850:	d81e      	bhi.n	8003890 <main+0x548>
 8003852:	4b4f      	ldr	r3, [pc, #316]	@ (8003990 <main+0x648>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b03      	cmp	r3, #3
 8003858:	d81a      	bhi.n	8003890 <main+0x548>
									buff[i] = symbol[0];
 800385a:	4b4d      	ldr	r3, [pc, #308]	@ (8003990 <main+0x648>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a44      	ldr	r2, [pc, #272]	@ (8003970 <main+0x628>)
 8003860:	7811      	ldrb	r1, [r2, #0]
 8003862:	4a4c      	ldr	r2, [pc, #304]	@ (8003994 <main+0x64c>)
 8003864:	54d1      	strb	r1, [r2, r3]
									i++;
 8003866:	4b4a      	ldr	r3, [pc, #296]	@ (8003990 <main+0x648>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3301      	adds	r3, #1
 800386c:	4a48      	ldr	r2, [pc, #288]	@ (8003990 <main+0x648>)
 800386e:	6013      	str	r3, [r2, #0]
									buff[i] = '\0';
 8003870:	4b47      	ldr	r3, [pc, #284]	@ (8003990 <main+0x648>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a47      	ldr	r2, [pc, #284]	@ (8003994 <main+0x64c>)
 8003876:	2100      	movs	r1, #0
 8003878:	54d1      	strb	r1, [r2, r3]
									LCD_WriteCommand(HD44780_CLEAR);
 800387a:	2001      	movs	r0, #1
 800387c:	f7ff f972 	bl	8002b64 <LCD_WriteCommand>
									LCD_WriteText("Brightness: ");
 8003880:	4846      	ldr	r0, [pc, #280]	@ (800399c <main+0x654>)
 8003882:	f7ff f995 	bl	8002bb0 <LCD_WriteText>
									LCD_WriteTextXY(buff, 0, 1);
 8003886:	2201      	movs	r2, #1
 8003888:	2100      	movs	r1, #0
 800388a:	4842      	ldr	r0, [pc, #264]	@ (8003994 <main+0x64c>)
 800388c:	f7ff f9bf 	bl	8002c0e <LCD_WriteTextXY>
								}
								HAL_Delay(200);
 8003890:	20c8      	movs	r0, #200	@ 0xc8
 8003892:	f002 f9ab 	bl	8005bec <HAL_Delay>
								symbol[0] = keypad_readkey();
 8003896:	f7ff f823 	bl	80028e0 <keypad_readkey>
 800389a:	4603      	mov	r3, r0
 800389c:	461a      	mov	r2, r3
 800389e:	4b34      	ldr	r3, [pc, #208]	@ (8003970 <main+0x628>)
 80038a0:	701a      	strb	r2, [r3, #0]
								if(symbol[0] == '*') {
 80038a2:	4b33      	ldr	r3, [pc, #204]	@ (8003970 <main+0x628>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80038a8:	d123      	bne.n	80038f2 <main+0x5aa>
									brightnessKitchen = atoi(buff)*10;
 80038aa:	483a      	ldr	r0, [pc, #232]	@ (8003994 <main+0x64c>)
 80038ac:	f007 ff82 	bl	800b7b4 <atoi>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4613      	mov	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	461a      	mov	r2, r3
 80038bc:	4b33      	ldr	r3, [pc, #204]	@ (800398c <main+0x644>)
 80038be:	601a      	str	r2, [r3, #0]
									if(brightnessKitchen >= 1000) {
 80038c0:	4b32      	ldr	r3, [pc, #200]	@ (800398c <main+0x644>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038c8:	db03      	blt.n	80038d2 <main+0x58a>
										brightnessKitchen = 999;
 80038ca:	4b30      	ldr	r3, [pc, #192]	@ (800398c <main+0x644>)
 80038cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80038d0:	601a      	str	r2, [r3, #0]
									}
								   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, brightnessKitchen);
 80038d2:	4b2e      	ldr	r3, [pc, #184]	@ (800398c <main+0x644>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	4b20      	ldr	r3, [pc, #128]	@ (8003958 <main+0x610>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	641a      	str	r2, [r3, #64]	@ 0x40
									act_menu = menuKitchenLighting;
 80038dc:	4b1f      	ldr	r3, [pc, #124]	@ (800395c <main+0x614>)
 80038de:	4a27      	ldr	r2, [pc, #156]	@ (800397c <main+0x634>)
 80038e0:	601a      	str	r2, [r3, #0]
									position = 1;
 80038e2:	4b20      	ldr	r3, [pc, #128]	@ (8003964 <main+0x61c>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	701a      	strb	r2, [r3, #0]
									max_pos = 3;
 80038e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003968 <main+0x620>)
 80038ea:	2203      	movs	r2, #3
 80038ec:	701a      	strb	r2, [r3, #0]
									break;
 80038ee:	bf00      	nop
								}
								HAL_Delay(100);
							}
							break;
 80038f0:	e00d      	b.n	800390e <main+0x5c6>
								HAL_Delay(100);
 80038f2:	2064      	movs	r0, #100	@ 0x64
 80038f4:	f002 f97a 	bl	8005bec <HAL_Delay>
								refreshLCD = true;
 80038f8:	e79a      	b.n	8003830 <main+0x4e8>
 		 	 		default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 80038fa:	4b18      	ldr	r3, [pc, #96]	@ (800395c <main+0x614>)
 80038fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003974 <main+0x62c>)
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	4b18      	ldr	r3, [pc, #96]	@ (8003964 <main+0x61c>)
 8003902:	2201      	movs	r2, #1
 8003904:	701a      	strb	r2, [r3, #0]
 8003906:	4b18      	ldr	r3, [pc, #96]	@ (8003968 <main+0x620>)
 8003908:	2202      	movs	r2, #2
 800390a:	701a      	strb	r2, [r3, #0]
 800390c:	bf00      	nop
 		 	 	  switch (position){
 800390e:	f000 bd2f 	b.w	8004370 <main+0x1028>
 		 	 	  	  }
	}

	else if(symbol[0] == '*' && act_menu == menuKitchenShutter) {
 8003912:	4b17      	ldr	r3, [pc, #92]	@ (8003970 <main+0x628>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b2a      	cmp	r3, #42	@ 0x2a
 8003918:	d179      	bne.n	8003a0e <main+0x6c6>
 800391a:	4b10      	ldr	r3, [pc, #64]	@ (800395c <main+0x614>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a18      	ldr	r2, [pc, #96]	@ (8003980 <main+0x638>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d174      	bne.n	8003a0e <main+0x6c6>
			refreshLCD = true;
 8003924:	4b14      	ldr	r3, [pc, #80]	@ (8003978 <main+0x630>)
 8003926:	2201      	movs	r2, #1
 8003928:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800392a:	2100      	movs	r1, #0
 800392c:	481c      	ldr	r0, [pc, #112]	@ (80039a0 <main+0x658>)
 800392e:	f005 fe67 	bl	8009600 <HAL_TIM_PWM_Start>
			switch(position) {
 8003932:	4b0c      	ldr	r3, [pc, #48]	@ (8003964 <main+0x61c>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d034      	beq.n	80039a4 <main+0x65c>
 800393a:	2b02      	cmp	r3, #2
 800393c:	d04d      	beq.n	80039da <main+0x692>
 800393e:	f000 bd17 	b.w	8004370 <main+0x1028>
 8003942:	bf00      	nop
 8003944:	200002fe 	.word	0x200002fe
 8003948:	20000303 	.word	0x20000303
 800394c:	200002ff 	.word	0x200002ff
 8003950:	0800c524 	.word	0x0800c524
 8003954:	0800c538 	.word	0x0800c538
 8003958:	2000043c 	.word	0x2000043c
 800395c:	20000128 	.word	0x20000128
 8003960:	20000058 	.word	0x20000058
 8003964:	20000054 	.word	0x20000054
 8003968:	20000055 	.word	0x20000055
 800396c:	20000118 	.word	0x20000118
 8003970:	20000298 	.word	0x20000298
 8003974:	20000068 	.word	0x20000068
 8003978:	200002fd 	.word	0x200002fd
 800397c:	20000078 	.word	0x20000078
 8003980:	20000088 	.word	0x20000088
 8003984:	0800c544 	.word	0x0800c544
 8003988:	0800c52c 	.word	0x0800c52c
 800398c:	20000130 	.word	0x20000130
 8003990:	20000308 	.word	0x20000308
 8003994:	2000029c 	.word	0x2000029c
 8003998:	0800c54c 	.word	0x0800c54c
 800399c:	0800c55c 	.word	0x0800c55c
 80039a0:	200003f0 	.word	0x200003f0
				case 1:
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 500);
 80039a4:	4b9c      	ldr	r3, [pc, #624]	@ (8003c18 <main+0x8d0>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80039ac:	635a      	str	r2, [r3, #52]	@ 0x34
					HAL_Delay(500);
 80039ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80039b2:	f002 f91b 	bl	8005bec <HAL_Delay>
				   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 80039b6:	4b98      	ldr	r3, [pc, #608]	@ (8003c18 <main+0x8d0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2200      	movs	r2, #0
 80039bc:	635a      	str	r2, [r3, #52]	@ 0x34
				   kitchenShutter = true;
 80039be:	4b97      	ldr	r3, [pc, #604]	@ (8003c1c <main+0x8d4>)
 80039c0:	2201      	movs	r2, #1
 80039c2:	701a      	strb	r2, [r3, #0]
				   LCD_WriteText("Shutter");
 80039c4:	4896      	ldr	r0, [pc, #600]	@ (8003c20 <main+0x8d8>)
 80039c6:	f7ff f8f3 	bl	8002bb0 <LCD_WriteText>
				   LCD_WriteTextXY("is lowering",0,1);
 80039ca:	2201      	movs	r2, #1
 80039cc:	2100      	movs	r1, #0
 80039ce:	4895      	ldr	r0, [pc, #596]	@ (8003c24 <main+0x8dc>)
 80039d0:	f7ff f91d 	bl	8002c0e <LCD_WriteTextXY>
				   break;
 80039d4:	bf00      	nop
			switch(position) {
 80039d6:	f000 bccb 	b.w	8004370 <main+0x1028>
				case 2:
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 2000);
 80039da:	4b8f      	ldr	r3, [pc, #572]	@ (8003c18 <main+0x8d0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80039e2:	635a      	str	r2, [r3, #52]	@ 0x34
					HAL_Delay(500);
 80039e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80039e8:	f002 f900 	bl	8005bec <HAL_Delay>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80039ec:	4b8a      	ldr	r3, [pc, #552]	@ (8003c18 <main+0x8d0>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2200      	movs	r2, #0
 80039f2:	635a      	str	r2, [r3, #52]	@ 0x34
					kitchenShutter = false;
 80039f4:	4b89      	ldr	r3, [pc, #548]	@ (8003c1c <main+0x8d4>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	701a      	strb	r2, [r3, #0]
					LCD_WriteText("Shutter");
 80039fa:	4889      	ldr	r0, [pc, #548]	@ (8003c20 <main+0x8d8>)
 80039fc:	f7ff f8d8 	bl	8002bb0 <LCD_WriteText>
					LCD_WriteTextXY("go up",0,1);
 8003a00:	2201      	movs	r2, #1
 8003a02:	2100      	movs	r1, #0
 8003a04:	4888      	ldr	r0, [pc, #544]	@ (8003c28 <main+0x8e0>)
 8003a06:	f7ff f902 	bl	8002c0e <LCD_WriteTextXY>
			switch(position) {
 8003a0a:	f000 bcb1 	b.w	8004370 <main+0x1028>
			}
	}

	else if(symbol[0] == '*' && act_menu == menuLivingroom){
 8003a0e:	4b87      	ldr	r3, [pc, #540]	@ (8003c2c <main+0x8e4>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a14:	d13c      	bne.n	8003a90 <main+0x748>
 8003a16:	4b86      	ldr	r3, [pc, #536]	@ (8003c30 <main+0x8e8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a86      	ldr	r2, [pc, #536]	@ (8003c34 <main+0x8ec>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d137      	bne.n	8003a90 <main+0x748>
					refreshLCD = true;
 8003a20:	4b85      	ldr	r3, [pc, #532]	@ (8003c38 <main+0x8f0>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	701a      	strb	r2, [r3, #0]
				  switch (position){
 8003a26:	4b85      	ldr	r3, [pc, #532]	@ (8003c3c <main+0x8f4>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d01a      	beq.n	8003a64 <main+0x71c>
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	dc22      	bgt.n	8003a78 <main+0x730>
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d002      	beq.n	8003a3c <main+0x6f4>
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d00a      	beq.n	8003a50 <main+0x708>
 8003a3a:	e01d      	b.n	8003a78 <main+0x730>
						case 1: act_menu = menuLivingroomTemperature, position = 1, max_pos = 2; break;
 8003a3c:	4b7c      	ldr	r3, [pc, #496]	@ (8003c30 <main+0x8e8>)
 8003a3e:	4a80      	ldr	r2, [pc, #512]	@ (8003c40 <main+0x8f8>)
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	4b7e      	ldr	r3, [pc, #504]	@ (8003c3c <main+0x8f4>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	4b7e      	ldr	r3, [pc, #504]	@ (8003c44 <main+0x8fc>)
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	701a      	strb	r2, [r3, #0]
 8003a4e:	e01d      	b.n	8003a8c <main+0x744>
						case 2: act_menu = menuLivingroomLighting, position = 1, max_pos = 3; break;
 8003a50:	4b77      	ldr	r3, [pc, #476]	@ (8003c30 <main+0x8e8>)
 8003a52:	4a7d      	ldr	r2, [pc, #500]	@ (8003c48 <main+0x900>)
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	4b79      	ldr	r3, [pc, #484]	@ (8003c3c <main+0x8f4>)
 8003a58:	2201      	movs	r2, #1
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	4b79      	ldr	r3, [pc, #484]	@ (8003c44 <main+0x8fc>)
 8003a5e:	2203      	movs	r2, #3
 8003a60:	701a      	strb	r2, [r3, #0]
 8003a62:	e013      	b.n	8003a8c <main+0x744>
						case 3: act_menu = menuLivingroomShutter, position = 1, max_pos = 2; break;
 8003a64:	4b72      	ldr	r3, [pc, #456]	@ (8003c30 <main+0x8e8>)
 8003a66:	4a79      	ldr	r2, [pc, #484]	@ (8003c4c <main+0x904>)
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	4b74      	ldr	r3, [pc, #464]	@ (8003c3c <main+0x8f4>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	701a      	strb	r2, [r3, #0]
 8003a70:	4b74      	ldr	r3, [pc, #464]	@ (8003c44 <main+0x8fc>)
 8003a72:	2202      	movs	r2, #2
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	e009      	b.n	8003a8c <main+0x744>
					default: act_menu = menuLivingroom, position = 1, max_pos = 2; break;
 8003a78:	4b6d      	ldr	r3, [pc, #436]	@ (8003c30 <main+0x8e8>)
 8003a7a:	4a6e      	ldr	r2, [pc, #440]	@ (8003c34 <main+0x8ec>)
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	4b6f      	ldr	r3, [pc, #444]	@ (8003c3c <main+0x8f4>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	701a      	strb	r2, [r3, #0]
 8003a84:	4b6f      	ldr	r3, [pc, #444]	@ (8003c44 <main+0x8fc>)
 8003a86:	2202      	movs	r2, #2
 8003a88:	701a      	strb	r2, [r3, #0]
 8003a8a:	bf00      	nop
				  switch (position){
 8003a8c:	f000 bc70 	b.w	8004370 <main+0x1028>
					  }
	}
	else if(symbol[0] == '*' && act_menu == menuLivingroomLighting){
 8003a90:	4b66      	ldr	r3, [pc, #408]	@ (8003c2c <main+0x8e4>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a96:	f040 80ed 	bne.w	8003c74 <main+0x92c>
 8003a9a:	4b65      	ldr	r3, [pc, #404]	@ (8003c30 <main+0x8e8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a6a      	ldr	r2, [pc, #424]	@ (8003c48 <main+0x900>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	f040 80e7 	bne.w	8003c74 <main+0x92c>
 		 	 		refreshLCD = true;
 8003aa6:	4b64      	ldr	r3, [pc, #400]	@ (8003c38 <main+0x8f0>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 8003aac:	4b63      	ldr	r3, [pc, #396]	@ (8003c3c <main+0x8f4>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d02c      	beq.n	8003b0e <main+0x7c6>
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	f300 80a3 	bgt.w	8003c00 <main+0x8b8>
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d002      	beq.n	8003ac4 <main+0x77c>
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d015      	beq.n	8003aee <main+0x7a6>
 8003ac2:	e09d      	b.n	8003c00 <main+0x8b8>
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 8003ac4:	2001      	movs	r0, #1
 8003ac6:	f7ff f84d 	bl	8002b64 <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 8003aca:	4861      	ldr	r0, [pc, #388]	@ (8003c50 <main+0x908>)
 8003acc:	f7ff f870 	bl	8002bb0 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	485f      	ldr	r0, [pc, #380]	@ (8003c54 <main+0x90c>)
 8003ad6:	f7ff f89a 	bl	8002c0e <LCD_WriteTextXY>
 		 	 				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 8003ada:	4b5f      	ldr	r3, [pc, #380]	@ (8003c58 <main+0x910>)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	4b5f      	ldr	r3, [pc, #380]	@ (8003c5c <main+0x914>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	635a      	str	r2, [r3, #52]	@ 0x34
							HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	485d      	ldr	r0, [pc, #372]	@ (8003c5c <main+0x914>)
 8003ae8:	f005 fd8a 	bl	8009600 <HAL_TIM_PWM_Start>
 		 	 				break;
 8003aec:	e092      	b.n	8003c14 <main+0x8cc>

 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 8003aee:	2001      	movs	r0, #1
 8003af0:	f7ff f838 	bl	8002b64 <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 8003af4:	4856      	ldr	r0, [pc, #344]	@ (8003c50 <main+0x908>)
 8003af6:	f7ff f85b 	bl	8002bb0 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 8003afa:	2201      	movs	r2, #1
 8003afc:	2100      	movs	r1, #0
 8003afe:	4858      	ldr	r0, [pc, #352]	@ (8003c60 <main+0x918>)
 8003b00:	f7ff f885 	bl	8002c0e <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim4 , TIM_CHANNEL_1);
 8003b04:	2100      	movs	r1, #0
 8003b06:	4855      	ldr	r0, [pc, #340]	@ (8003c5c <main+0x914>)
 8003b08:	f005 fe74 	bl	80097f4 <HAL_TIM_PWM_Stop>
 				 	 		break;
 8003b0c:	e082      	b.n	8003c14 <main+0x8cc>
 		 	 		case 3:
							i = 0;
 8003b0e:	4b55      	ldr	r3, [pc, #340]	@ (8003c64 <main+0x91c>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
							refreshLCD = true;
 8003b14:	4b48      	ldr	r3, [pc, #288]	@ (8003c38 <main+0x8f0>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	701a      	strb	r2, [r3, #0]
							HAL_Delay(200);
 8003b1a:	20c8      	movs	r0, #200	@ 0xc8
 8003b1c:	f002 f866 	bl	8005bec <HAL_Delay>
							memset(buff, 0, sizeof(buff));
 8003b20:	2205      	movs	r2, #5
 8003b22:	2100      	movs	r1, #0
 8003b24:	4850      	ldr	r0, [pc, #320]	@ (8003c68 <main+0x920>)
 8003b26:	f007 ff01 	bl	800b92c <memset>
							LCD_WriteCommand(HD44780_CLEAR);
 8003b2a:	2001      	movs	r0, #1
 8003b2c:	f7ff f81a 	bl	8002b64 <LCD_WriteCommand>
							LCD_WriteText("Write Bright");
 8003b30:	484e      	ldr	r0, [pc, #312]	@ (8003c6c <main+0x924>)
 8003b32:	f7ff f83d 	bl	8002bb0 <LCD_WriteText>
							while(1) {
								refreshLCD = true;
 8003b36:	4b40      	ldr	r3, [pc, #256]	@ (8003c38 <main+0x8f0>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	701a      	strb	r2, [r3, #0]
								symbol[0] = keypad_readkey();
 8003b3c:	f7fe fed0 	bl	80028e0 <keypad_readkey>
 8003b40:	4603      	mov	r3, r0
 8003b42:	461a      	mov	r2, r3
 8003b44:	4b39      	ldr	r3, [pc, #228]	@ (8003c2c <main+0x8e4>)
 8003b46:	701a      	strb	r2, [r3, #0]
								if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 8003b48:	4b38      	ldr	r3, [pc, #224]	@ (8003c2c <main+0x8e4>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8003b4e:	d922      	bls.n	8003b96 <main+0x84e>
 8003b50:	4b36      	ldr	r3, [pc, #216]	@ (8003c2c <main+0x8e4>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b39      	cmp	r3, #57	@ 0x39
 8003b56:	d81e      	bhi.n	8003b96 <main+0x84e>
 8003b58:	4b42      	ldr	r3, [pc, #264]	@ (8003c64 <main+0x91c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d81a      	bhi.n	8003b96 <main+0x84e>
									buff[i] = symbol[0];
 8003b60:	4b40      	ldr	r3, [pc, #256]	@ (8003c64 <main+0x91c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a31      	ldr	r2, [pc, #196]	@ (8003c2c <main+0x8e4>)
 8003b66:	7811      	ldrb	r1, [r2, #0]
 8003b68:	4a3f      	ldr	r2, [pc, #252]	@ (8003c68 <main+0x920>)
 8003b6a:	54d1      	strb	r1, [r2, r3]
									i++;
 8003b6c:	4b3d      	ldr	r3, [pc, #244]	@ (8003c64 <main+0x91c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3301      	adds	r3, #1
 8003b72:	4a3c      	ldr	r2, [pc, #240]	@ (8003c64 <main+0x91c>)
 8003b74:	6013      	str	r3, [r2, #0]
									buff[i] = '\0';
 8003b76:	4b3b      	ldr	r3, [pc, #236]	@ (8003c64 <main+0x91c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a3b      	ldr	r2, [pc, #236]	@ (8003c68 <main+0x920>)
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	54d1      	strb	r1, [r2, r3]
									LCD_WriteCommand(HD44780_CLEAR);
 8003b80:	2001      	movs	r0, #1
 8003b82:	f7fe ffef 	bl	8002b64 <LCD_WriteCommand>
									LCD_WriteText("Brightness: ");
 8003b86:	483a      	ldr	r0, [pc, #232]	@ (8003c70 <main+0x928>)
 8003b88:	f7ff f812 	bl	8002bb0 <LCD_WriteText>
									LCD_WriteTextXY(buff, 0, 1);
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4835      	ldr	r0, [pc, #212]	@ (8003c68 <main+0x920>)
 8003b92:	f7ff f83c 	bl	8002c0e <LCD_WriteTextXY>
								}
								HAL_Delay(200);
 8003b96:	20c8      	movs	r0, #200	@ 0xc8
 8003b98:	f002 f828 	bl	8005bec <HAL_Delay>
								symbol[0] = keypad_readkey();
 8003b9c:	f7fe fea0 	bl	80028e0 <keypad_readkey>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	4b21      	ldr	r3, [pc, #132]	@ (8003c2c <main+0x8e4>)
 8003ba6:	701a      	strb	r2, [r3, #0]
								if(symbol[0] == '*') {
 8003ba8:	4b20      	ldr	r3, [pc, #128]	@ (8003c2c <main+0x8e4>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bae:	d123      	bne.n	8003bf8 <main+0x8b0>
									brightnessLivingroom = atoi(buff)*10;
 8003bb0:	482d      	ldr	r0, [pc, #180]	@ (8003c68 <main+0x920>)
 8003bb2:	f007 fdff 	bl	800b7b4 <atoi>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4b25      	ldr	r3, [pc, #148]	@ (8003c58 <main+0x910>)
 8003bc4:	601a      	str	r2, [r3, #0]
									if(brightnessLivingroom >= 1000) {
 8003bc6:	4b24      	ldr	r3, [pc, #144]	@ (8003c58 <main+0x910>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bce:	db03      	blt.n	8003bd8 <main+0x890>
										brightnessLivingroom = 999;
 8003bd0:	4b21      	ldr	r3, [pc, #132]	@ (8003c58 <main+0x910>)
 8003bd2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003bd6:	601a      	str	r2, [r3, #0]
									}
								   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 8003bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8003c58 <main+0x910>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8003c5c <main+0x914>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	635a      	str	r2, [r3, #52]	@ 0x34
									act_menu = menuLivingroomLighting;
 8003be2:	4b13      	ldr	r3, [pc, #76]	@ (8003c30 <main+0x8e8>)
 8003be4:	4a18      	ldr	r2, [pc, #96]	@ (8003c48 <main+0x900>)
 8003be6:	601a      	str	r2, [r3, #0]
									position = 1;
 8003be8:	4b14      	ldr	r3, [pc, #80]	@ (8003c3c <main+0x8f4>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	701a      	strb	r2, [r3, #0]
									max_pos = 3;
 8003bee:	4b15      	ldr	r3, [pc, #84]	@ (8003c44 <main+0x8fc>)
 8003bf0:	2203      	movs	r2, #3
 8003bf2:	701a      	strb	r2, [r3, #0]
									break;
 8003bf4:	bf00      	nop
								}
								HAL_Delay(100);
							}
							break;
 8003bf6:	e00d      	b.n	8003c14 <main+0x8cc>
								HAL_Delay(100);
 8003bf8:	2064      	movs	r0, #100	@ 0x64
 8003bfa:	f001 fff7 	bl	8005bec <HAL_Delay>
								refreshLCD = true;
 8003bfe:	e79a      	b.n	8003b36 <main+0x7ee>
 		 	 		default: act_menu = menuLivingroom, position = 1, max_pos = 2; break;
 8003c00:	4b0b      	ldr	r3, [pc, #44]	@ (8003c30 <main+0x8e8>)
 8003c02:	4a0c      	ldr	r2, [pc, #48]	@ (8003c34 <main+0x8ec>)
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	4b0d      	ldr	r3, [pc, #52]	@ (8003c3c <main+0x8f4>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	701a      	strb	r2, [r3, #0]
 8003c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c44 <main+0x8fc>)
 8003c0e:	2202      	movs	r2, #2
 8003c10:	701a      	strb	r2, [r3, #0]
 8003c12:	bf00      	nop
 		 	 	  switch (position){
 8003c14:	e3ac      	b.n	8004370 <main+0x1028>
 8003c16:	bf00      	nop
 8003c18:	200003f0 	.word	0x200003f0
 8003c1c:	20000304 	.word	0x20000304
 8003c20:	0800c56c 	.word	0x0800c56c
 8003c24:	0800c574 	.word	0x0800c574
 8003c28:	0800c580 	.word	0x0800c580
 8003c2c:	20000298 	.word	0x20000298
 8003c30:	20000128 	.word	0x20000128
 8003c34:	20000098 	.word	0x20000098
 8003c38:	200002fd 	.word	0x200002fd
 8003c3c:	20000054 	.word	0x20000054
 8003c40:	200000b8 	.word	0x200000b8
 8003c44:	20000055 	.word	0x20000055
 8003c48:	200000a8 	.word	0x200000a8
 8003c4c:	200000c8 	.word	0x200000c8
 8003c50:	0800c544 	.word	0x0800c544
 8003c54:	0800c52c 	.word	0x0800c52c
 8003c58:	2000012c 	.word	0x2000012c
 8003c5c:	200004d4 	.word	0x200004d4
 8003c60:	0800c538 	.word	0x0800c538
 8003c64:	20000308 	.word	0x20000308
 8003c68:	2000029c 	.word	0x2000029c
 8003c6c:	0800c54c 	.word	0x0800c54c
 8003c70:	0800c55c 	.word	0x0800c55c
 		 	 	  	  }
 		 	 	}
	else if(symbol[0] == '*' && act_menu == menuLivingroomTemperature){
 8003c74:	4ba4      	ldr	r3, [pc, #656]	@ (8003f08 <main+0xbc0>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c7a:	f040 8112 	bne.w	8003ea2 <main+0xb5a>
 8003c7e:	4ba3      	ldr	r3, [pc, #652]	@ (8003f0c <main+0xbc4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4aa3      	ldr	r2, [pc, #652]	@ (8003f10 <main+0xbc8>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	f040 810c 	bne.w	8003ea2 <main+0xb5a>
		refreshLCD = true;
 8003c8a:	4ba2      	ldr	r3, [pc, #648]	@ (8003f14 <main+0xbcc>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	701a      	strb	r2, [r3, #0]
		switch (position){
 8003c90:	4ba1      	ldr	r3, [pc, #644]	@ (8003f18 <main+0xbd0>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	f000 8092 	beq.w	8003dbe <main+0xa76>
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	f300 80f6 	bgt.w	8003e8c <main+0xb44>
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d002      	beq.n	8003caa <main+0x962>
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d07a      	beq.n	8003d9e <main+0xa56>
 8003ca8:	e0f0      	b.n	8003e8c <main+0xb44>
			case 1:
				while(1) {
					HAL_Delay(500);
 8003caa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003cae:	f001 ff9d 	bl	8005bec <HAL_Delay>
					BMP2_ReadData(&bmp2dev, &press, &temp);
 8003cb2:	4a9a      	ldr	r2, [pc, #616]	@ (8003f1c <main+0xbd4>)
 8003cb4:	499a      	ldr	r1, [pc, #616]	@ (8003f20 <main+0xbd8>)
 8003cb6:	489b      	ldr	r0, [pc, #620]	@ (8003f24 <main+0xbdc>)
 8003cb8:	f7fe fb34 	bl	8002324 <BMP2_ReadData>
					roundedValue = roundToTwoDecimals(temp);
 8003cbc:	4b97      	ldr	r3, [pc, #604]	@ (8003f1c <main+0xbd4>)
 8003cbe:	ed93 7b00 	vldr	d7, [r3]
 8003cc2:	eeb0 0a47 	vmov.f32	s0, s14
 8003cc6:	eef0 0a67 	vmov.f32	s1, s15
 8003cca:	f7ff f89d 	bl	8002e08 <roundToTwoDecimals>
 8003cce:	eeb0 7a40 	vmov.f32	s14, s0
 8003cd2:	eef0 7a60 	vmov.f32	s15, s1
 8003cd6:	4b94      	ldr	r3, [pc, #592]	@ (8003f28 <main+0xbe0>)
 8003cd8:	ed83 7b00 	vstr	d7, [r3]
					intPart = (int)roundedValue;
 8003cdc:	4b92      	ldr	r3, [pc, #584]	@ (8003f28 <main+0xbe0>)
 8003cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	f7fc ff51 	bl	8000b8c <__aeabi_d2iz>
 8003cea:	4603      	mov	r3, r0
 8003cec:	4a8f      	ldr	r2, [pc, #572]	@ (8003f2c <main+0xbe4>)
 8003cee:	6013      	str	r3, [r2, #0]
					fracPart = (int)((roundedValue - intPart) * 100);
 8003cf0:	4b8d      	ldr	r3, [pc, #564]	@ (8003f28 <main+0xbe0>)
 8003cf2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003cf6:	4b8d      	ldr	r3, [pc, #564]	@ (8003f2c <main+0xbe4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fc fc42 	bl	8000584 <__aeabi_i2d>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4620      	mov	r0, r4
 8003d06:	4629      	mov	r1, r5
 8003d08:	f7fc faee 	bl	80002e8 <__aeabi_dsub>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4610      	mov	r0, r2
 8003d12:	4619      	mov	r1, r3
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	4b85      	ldr	r3, [pc, #532]	@ (8003f30 <main+0xbe8>)
 8003d1a:	f7fc fc9d 	bl	8000658 <__aeabi_dmul>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4610      	mov	r0, r2
 8003d24:	4619      	mov	r1, r3
 8003d26:	f7fc ff31 	bl	8000b8c <__aeabi_d2iz>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	4a81      	ldr	r2, [pc, #516]	@ (8003f34 <main+0xbec>)
 8003d2e:	6013      	str	r3, [r2, #0]
					snprintf(result, sizeof(result), "Temp: %d.%04d", intPart, abs(fracPart));
 8003d30:	4b7e      	ldr	r3, [pc, #504]	@ (8003f2c <main+0xbe4>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	4b7f      	ldr	r3, [pc, #508]	@ (8003f34 <main+0xbec>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bfb8      	it	lt
 8003d3c:	425b      	neglt	r3, r3
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	4613      	mov	r3, r2
 8003d42:	4a7d      	ldr	r2, [pc, #500]	@ (8003f38 <main+0xbf0>)
 8003d44:	2132      	movs	r1, #50	@ 0x32
 8003d46:	487d      	ldr	r0, [pc, #500]	@ (8003f3c <main+0xbf4>)
 8003d48:	f007 fdbc 	bl	800b8c4 <sniprintf>
					LCD_WriteCommand(HD44780_CLEAR);
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	f7fe ff09 	bl	8002b64 <LCD_WriteCommand>
					LCD_WriteText(result);
 8003d52:	487a      	ldr	r0, [pc, #488]	@ (8003f3c <main+0xbf4>)
 8003d54:	f7fe ff2c 	bl	8002bb0 <LCD_WriteText>
                    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3, PI_output*1000);
 8003d58:	4b79      	ldr	r3, [pc, #484]	@ (8003f40 <main+0xbf8>)
 8003d5a:	edd3 7a00 	vldr	s15, [r3]
 8003d5e:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8003f44 <main+0xbfc>
 8003d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d66:	4b78      	ldr	r3, [pc, #480]	@ (8003f48 <main+0xc00>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d6e:	ee17 2a90 	vmov	r2, s15
 8003d72:	63da      	str	r2, [r3, #60]	@ 0x3c
                    symbol[0] = keypad_readkey();
 8003d74:	f7fe fdb4 	bl	80028e0 <keypad_readkey>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	4b62      	ldr	r3, [pc, #392]	@ (8003f08 <main+0xbc0>)
 8003d7e:	701a      	strb	r2, [r3, #0]
					if(symbol[0] == '*') {
 8003d80:	4b61      	ldr	r3, [pc, #388]	@ (8003f08 <main+0xbc0>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d86:	d190      	bne.n	8003caa <main+0x962>
						act_menu = menuLivingroomTemperature;
 8003d88:	4b60      	ldr	r3, [pc, #384]	@ (8003f0c <main+0xbc4>)
 8003d8a:	4a61      	ldr	r2, [pc, #388]	@ (8003f10 <main+0xbc8>)
 8003d8c:	601a      	str	r2, [r3, #0]
						position = 1;
 8003d8e:	4b62      	ldr	r3, [pc, #392]	@ (8003f18 <main+0xbd0>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	701a      	strb	r2, [r3, #0]
						max_pos = 3;
 8003d94:	4b6d      	ldr	r3, [pc, #436]	@ (8003f4c <main+0xc04>)
 8003d96:	2203      	movs	r2, #3
 8003d98:	701a      	strb	r2, [r3, #0]
						break;
 8003d9a:	bf00      	nop
					}
				}
				break;
 8003d9c:	e080      	b.n	8003ea0 <main+0xb58>
			case 2: LCD_WriteCommand(HD44780_CLEAR);
 8003d9e:	2001      	movs	r0, #1
 8003da0:	f7fe fee0 	bl	8002b64 <LCD_WriteCommand>
					LCD_WriteText("Heat");
 8003da4:	486a      	ldr	r0, [pc, #424]	@ (8003f50 <main+0xc08>)
 8003da6:	f7fe ff03 	bl	8002bb0 <LCD_WriteText>
					LCD_WriteTextXY("Turned off",0,1);
 8003daa:	2201      	movs	r2, #1
 8003dac:	2100      	movs	r1, #0
 8003dae:	4869      	ldr	r0, [pc, #420]	@ (8003f54 <main+0xc0c>)
 8003db0:	f7fe ff2d 	bl	8002c0e <LCD_WriteTextXY>
                    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3, 0);
 8003db4:	4b64      	ldr	r3, [pc, #400]	@ (8003f48 <main+0xc00>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2200      	movs	r2, #0
 8003dba:	63da      	str	r2, [r3, #60]	@ 0x3c
                    break;
 8003dbc:	e070      	b.n	8003ea0 <main+0xb58>
			case 3:
				i = 0;
 8003dbe:	4b66      	ldr	r3, [pc, #408]	@ (8003f58 <main+0xc10>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]
				HAL_Delay(200);
 8003dc4:	20c8      	movs	r0, #200	@ 0xc8
 8003dc6:	f001 ff11 	bl	8005bec <HAL_Delay>
				memset(buff, 0, sizeof(buff));
 8003dca:	2205      	movs	r2, #5
 8003dcc:	2100      	movs	r1, #0
 8003dce:	4863      	ldr	r0, [pc, #396]	@ (8003f5c <main+0xc14>)
 8003dd0:	f007 fdac 	bl	800b92c <memset>
				LCD_WriteCommand(HD44780_CLEAR);
 8003dd4:	2001      	movs	r0, #1
 8003dd6:	f7fe fec5 	bl	8002b64 <LCD_WriteCommand>
				LCD_WriteText("Write Temp");
 8003dda:	4861      	ldr	r0, [pc, #388]	@ (8003f60 <main+0xc18>)
 8003ddc:	f7fe fee8 	bl	8002bb0 <LCD_WriteText>
				while(1) {
					refreshLCD = true;
 8003de0:	4b4c      	ldr	r3, [pc, #304]	@ (8003f14 <main+0xbcc>)
 8003de2:	2201      	movs	r2, #1
 8003de4:	701a      	strb	r2, [r3, #0]
					symbol[0] = keypad_readkey();
 8003de6:	f7fe fd7b 	bl	80028e0 <keypad_readkey>
 8003dea:	4603      	mov	r3, r0
 8003dec:	461a      	mov	r2, r3
 8003dee:	4b46      	ldr	r3, [pc, #280]	@ (8003f08 <main+0xbc0>)
 8003df0:	701a      	strb	r2, [r3, #0]
					if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 8003df2:	4b45      	ldr	r3, [pc, #276]	@ (8003f08 <main+0xbc0>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b2f      	cmp	r3, #47	@ 0x2f
 8003df8:	d922      	bls.n	8003e40 <main+0xaf8>
 8003dfa:	4b43      	ldr	r3, [pc, #268]	@ (8003f08 <main+0xbc0>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b39      	cmp	r3, #57	@ 0x39
 8003e00:	d81e      	bhi.n	8003e40 <main+0xaf8>
 8003e02:	4b55      	ldr	r3, [pc, #340]	@ (8003f58 <main+0xc10>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d81a      	bhi.n	8003e40 <main+0xaf8>
						buff[i] = symbol[0];
 8003e0a:	4b53      	ldr	r3, [pc, #332]	@ (8003f58 <main+0xc10>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a3e      	ldr	r2, [pc, #248]	@ (8003f08 <main+0xbc0>)
 8003e10:	7811      	ldrb	r1, [r2, #0]
 8003e12:	4a52      	ldr	r2, [pc, #328]	@ (8003f5c <main+0xc14>)
 8003e14:	54d1      	strb	r1, [r2, r3]
						i++;
 8003e16:	4b50      	ldr	r3, [pc, #320]	@ (8003f58 <main+0xc10>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	4a4e      	ldr	r2, [pc, #312]	@ (8003f58 <main+0xc10>)
 8003e1e:	6013      	str	r3, [r2, #0]
						buff[i] = '\0';
 8003e20:	4b4d      	ldr	r3, [pc, #308]	@ (8003f58 <main+0xc10>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a4d      	ldr	r2, [pc, #308]	@ (8003f5c <main+0xc14>)
 8003e26:	2100      	movs	r1, #0
 8003e28:	54d1      	strb	r1, [r2, r3]
						LCD_WriteCommand(HD44780_CLEAR);
 8003e2a:	2001      	movs	r0, #1
 8003e2c:	f7fe fe9a 	bl	8002b64 <LCD_WriteCommand>
						LCD_WriteText("Temp: ");
 8003e30:	484c      	ldr	r0, [pc, #304]	@ (8003f64 <main+0xc1c>)
 8003e32:	f7fe febd 	bl	8002bb0 <LCD_WriteText>
						LCD_WriteTextXY(buff, 0, 1);
 8003e36:	2201      	movs	r2, #1
 8003e38:	2100      	movs	r1, #0
 8003e3a:	4848      	ldr	r0, [pc, #288]	@ (8003f5c <main+0xc14>)
 8003e3c:	f7fe fee7 	bl	8002c0e <LCD_WriteTextXY>
					}
					HAL_Delay(200);
 8003e40:	20c8      	movs	r0, #200	@ 0xc8
 8003e42:	f001 fed3 	bl	8005bec <HAL_Delay>
					symbol[0] = keypad_readkey();
 8003e46:	f7fe fd4b 	bl	80028e0 <keypad_readkey>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4b2e      	ldr	r3, [pc, #184]	@ (8003f08 <main+0xbc0>)
 8003e50:	701a      	strb	r2, [r3, #0]
					if(symbol[0] == '*') {
 8003e52:	4b2d      	ldr	r3, [pc, #180]	@ (8003f08 <main+0xbc0>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e58:	d114      	bne.n	8003e84 <main+0xb3c>
						setpoint = atoi(buff);
 8003e5a:	4840      	ldr	r0, [pc, #256]	@ (8003f5c <main+0xc14>)
 8003e5c:	f007 fcaa 	bl	800b7b4 <atoi>
 8003e60:	ee07 0a90 	vmov	s15, r0
 8003e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e68:	4b3f      	ldr	r3, [pc, #252]	@ (8003f68 <main+0xc20>)
 8003e6a:	edc3 7a00 	vstr	s15, [r3]
						act_menu = menuLivingroomTemperature;
 8003e6e:	4b27      	ldr	r3, [pc, #156]	@ (8003f0c <main+0xbc4>)
 8003e70:	4a27      	ldr	r2, [pc, #156]	@ (8003f10 <main+0xbc8>)
 8003e72:	601a      	str	r2, [r3, #0]
						position = 1;
 8003e74:	4b28      	ldr	r3, [pc, #160]	@ (8003f18 <main+0xbd0>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	701a      	strb	r2, [r3, #0]
						max_pos = 3;
 8003e7a:	4b34      	ldr	r3, [pc, #208]	@ (8003f4c <main+0xc04>)
 8003e7c:	2203      	movs	r2, #3
 8003e7e:	701a      	strb	r2, [r3, #0]
						break;
 8003e80:	bf00      	nop
					}
					HAL_Delay(100);
				}
			break;
 8003e82:	e00d      	b.n	8003ea0 <main+0xb58>
					HAL_Delay(100);
 8003e84:	2064      	movs	r0, #100	@ 0x64
 8003e86:	f001 feb1 	bl	8005bec <HAL_Delay>
					refreshLCD = true;
 8003e8a:	e7a9      	b.n	8003de0 <main+0xa98>
			default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8003e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8003f0c <main+0xbc4>)
 8003e8e:	4a37      	ldr	r2, [pc, #220]	@ (8003f6c <main+0xc24>)
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	4b21      	ldr	r3, [pc, #132]	@ (8003f18 <main+0xbd0>)
 8003e94:	2201      	movs	r2, #1
 8003e96:	701a      	strb	r2, [r3, #0]
 8003e98:	4b2c      	ldr	r3, [pc, #176]	@ (8003f4c <main+0xc04>)
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	bf00      	nop
		switch (position){
 8003ea0:	e266      	b.n	8004370 <main+0x1028>
				  }
			}
	else if(symbol[0] == '*' && act_menu == menuLivingroomShutter) {
 8003ea2:	4b19      	ldr	r3, [pc, #100]	@ (8003f08 <main+0xbc0>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ea8:	f040 8085 	bne.w	8003fb6 <main+0xc6e>
 8003eac:	4b17      	ldr	r3, [pc, #92]	@ (8003f0c <main+0xbc4>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a2f      	ldr	r2, [pc, #188]	@ (8003f70 <main+0xc28>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d17f      	bne.n	8003fb6 <main+0xc6e>
			refreshLCD = true;
 8003eb6:	4b17      	ldr	r3, [pc, #92]	@ (8003f14 <main+0xbcc>)
 8003eb8:	2201      	movs	r2, #1
 8003eba:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003ebc:	2104      	movs	r1, #4
 8003ebe:	482d      	ldr	r0, [pc, #180]	@ (8003f74 <main+0xc2c>)
 8003ec0:	f005 fb9e 	bl	8009600 <HAL_TIM_PWM_Start>
			switch(position) {
 8003ec4:	4b14      	ldr	r3, [pc, #80]	@ (8003f18 <main+0xbd0>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d002      	beq.n	8003ed2 <main+0xb8a>
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d059      	beq.n	8003f84 <main+0xc3c>
 8003ed0:	e24e      	b.n	8004370 <main+0x1028>
				case 1:
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 500);
 8003ed2:	4b28      	ldr	r3, [pc, #160]	@ (8003f74 <main+0xc2c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003eda:	639a      	str	r2, [r3, #56]	@ 0x38
					HAL_Delay(500);
 8003edc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003ee0:	f001 fe84 	bl	8005bec <HAL_Delay>
				   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 0);
 8003ee4:	4b23      	ldr	r3, [pc, #140]	@ (8003f74 <main+0xc2c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	639a      	str	r2, [r3, #56]	@ 0x38
				   livingroomShutter = true;
 8003eec:	4b22      	ldr	r3, [pc, #136]	@ (8003f78 <main+0xc30>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	701a      	strb	r2, [r3, #0]
				   LCD_WriteText("Shutter");
 8003ef2:	4822      	ldr	r0, [pc, #136]	@ (8003f7c <main+0xc34>)
 8003ef4:	f7fe fe5c 	bl	8002bb0 <LCD_WriteText>
				   LCD_WriteTextXY("is lowering",0,1);
 8003ef8:	2201      	movs	r2, #1
 8003efa:	2100      	movs	r1, #0
 8003efc:	4820      	ldr	r0, [pc, #128]	@ (8003f80 <main+0xc38>)
 8003efe:	f7fe fe86 	bl	8002c0e <LCD_WriteTextXY>
				   break;
 8003f02:	bf00      	nop
			switch(position) {
 8003f04:	e234      	b.n	8004370 <main+0x1028>
 8003f06:	bf00      	nop
 8003f08:	20000298 	.word	0x20000298
 8003f0c:	20000128 	.word	0x20000128
 8003f10:	200000b8 	.word	0x200000b8
 8003f14:	200002fd 	.word	0x200002fd
 8003f18:	20000054 	.word	0x20000054
 8003f1c:	20000330 	.word	0x20000330
 8003f20:	20000338 	.word	0x20000338
 8003f24:	20000018 	.word	0x20000018
 8003f28:	20000340 	.word	0x20000340
 8003f2c:	20000310 	.word	0x20000310
 8003f30:	40590000 	.word	0x40590000
 8003f34:	20000314 	.word	0x20000314
 8003f38:	0800c588 	.word	0x0800c588
 8003f3c:	200002a4 	.word	0x200002a4
 8003f40:	2000032c 	.word	0x2000032c
 8003f44:	447a0000 	.word	0x447a0000
 8003f48:	200004d4 	.word	0x200004d4
 8003f4c:	20000055 	.word	0x20000055
 8003f50:	0800c598 	.word	0x0800c598
 8003f54:	0800c5a0 	.word	0x0800c5a0
 8003f58:	20000308 	.word	0x20000308
 8003f5c:	2000029c 	.word	0x2000029c
 8003f60:	0800c5ac 	.word	0x0800c5ac
 8003f64:	0800c5b8 	.word	0x0800c5b8
 8003f68:	20000138 	.word	0x20000138
 8003f6c:	20000068 	.word	0x20000068
 8003f70:	200000c8 	.word	0x200000c8
 8003f74:	200003f0 	.word	0x200003f0
 8003f78:	20000305 	.word	0x20000305
 8003f7c:	0800c56c 	.word	0x0800c56c
 8003f80:	0800c574 	.word	0x0800c574
				case 2:
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 2000);
 8003f84:	4b99      	ldr	r3, [pc, #612]	@ (80041ec <main+0xea4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003f8c:	639a      	str	r2, [r3, #56]	@ 0x38
					HAL_Delay(500);
 8003f8e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003f92:	f001 fe2b 	bl	8005bec <HAL_Delay>
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 0);
 8003f96:	4b95      	ldr	r3, [pc, #596]	@ (80041ec <main+0xea4>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	639a      	str	r2, [r3, #56]	@ 0x38
					livingroomShutter = false;
 8003f9e:	4b94      	ldr	r3, [pc, #592]	@ (80041f0 <main+0xea8>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	701a      	strb	r2, [r3, #0]
					LCD_WriteText("Shutter");
 8003fa4:	4893      	ldr	r0, [pc, #588]	@ (80041f4 <main+0xeac>)
 8003fa6:	f7fe fe03 	bl	8002bb0 <LCD_WriteText>
					LCD_WriteTextXY("go up",0,1);
 8003faa:	2201      	movs	r2, #1
 8003fac:	2100      	movs	r1, #0
 8003fae:	4892      	ldr	r0, [pc, #584]	@ (80041f8 <main+0xeb0>)
 8003fb0:	f7fe fe2d 	bl	8002c0e <LCD_WriteTextXY>
			switch(position) {
 8003fb4:	e1dc      	b.n	8004370 <main+0x1028>
			}
	}
	else if(symbol[0] == '*' && act_menu == menuGarage){
 8003fb6:	4b91      	ldr	r3, [pc, #580]	@ (80041fc <main+0xeb4>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fbc:	d13b      	bne.n	8004036 <main+0xcee>
 8003fbe:	4b90      	ldr	r3, [pc, #576]	@ (8004200 <main+0xeb8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a90      	ldr	r2, [pc, #576]	@ (8004204 <main+0xebc>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d136      	bne.n	8004036 <main+0xcee>
 		 		 	 		refreshLCD = true;
 8003fc8:	4b8f      	ldr	r3, [pc, #572]	@ (8004208 <main+0xec0>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	701a      	strb	r2, [r3, #0]
 		 		 	 	  switch (position){
 8003fce:	4b8f      	ldr	r3, [pc, #572]	@ (800420c <main+0xec4>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	d01a      	beq.n	800400c <main+0xcc4>
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	dc22      	bgt.n	8004020 <main+0xcd8>
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d002      	beq.n	8003fe4 <main+0xc9c>
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d00a      	beq.n	8003ff8 <main+0xcb0>
 8003fe2:	e01d      	b.n	8004020 <main+0xcd8>
 		 		 	 	  	  	case 1: act_menu = menuGarageLighting, position = 1, max_pos = 3; break;
 8003fe4:	4b86      	ldr	r3, [pc, #536]	@ (8004200 <main+0xeb8>)
 8003fe6:	4a8a      	ldr	r2, [pc, #552]	@ (8004210 <main+0xec8>)
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	4b88      	ldr	r3, [pc, #544]	@ (800420c <main+0xec4>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	701a      	strb	r2, [r3, #0]
 8003ff0:	4b88      	ldr	r3, [pc, #544]	@ (8004214 <main+0xecc>)
 8003ff2:	2203      	movs	r2, #3
 8003ff4:	701a      	strb	r2, [r3, #0]
 8003ff6:	e01d      	b.n	8004034 <main+0xcec>
 		 		 	 	  	  	case 2: act_menu = menuGarageShutter, position = 1, max_pos = 2; break;
 8003ff8:	4b81      	ldr	r3, [pc, #516]	@ (8004200 <main+0xeb8>)
 8003ffa:	4a87      	ldr	r2, [pc, #540]	@ (8004218 <main+0xed0>)
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	4b83      	ldr	r3, [pc, #524]	@ (800420c <main+0xec4>)
 8004000:	2201      	movs	r2, #1
 8004002:	701a      	strb	r2, [r3, #0]
 8004004:	4b83      	ldr	r3, [pc, #524]	@ (8004214 <main+0xecc>)
 8004006:	2202      	movs	r2, #2
 8004008:	701a      	strb	r2, [r3, #0]
 800400a:	e013      	b.n	8004034 <main+0xcec>
 		 		 	 	  	  	case 3: act_menu = menuGarageGate, position = 1, max_pos = 2; break;
 800400c:	4b7c      	ldr	r3, [pc, #496]	@ (8004200 <main+0xeb8>)
 800400e:	4a83      	ldr	r2, [pc, #524]	@ (800421c <main+0xed4>)
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	4b7e      	ldr	r3, [pc, #504]	@ (800420c <main+0xec4>)
 8004014:	2201      	movs	r2, #1
 8004016:	701a      	strb	r2, [r3, #0]
 8004018:	4b7e      	ldr	r3, [pc, #504]	@ (8004214 <main+0xecc>)
 800401a:	2202      	movs	r2, #2
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	e009      	b.n	8004034 <main+0xcec>
 		 		 	 		default: act_menu = menuGarage, position = 1, max_pos = 1; break;
 8004020:	4b77      	ldr	r3, [pc, #476]	@ (8004200 <main+0xeb8>)
 8004022:	4a78      	ldr	r2, [pc, #480]	@ (8004204 <main+0xebc>)
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	4b79      	ldr	r3, [pc, #484]	@ (800420c <main+0xec4>)
 8004028:	2201      	movs	r2, #1
 800402a:	701a      	strb	r2, [r3, #0]
 800402c:	4b79      	ldr	r3, [pc, #484]	@ (8004214 <main+0xecc>)
 800402e:	2201      	movs	r2, #1
 8004030:	701a      	strb	r2, [r3, #0]
 8004032:	bf00      	nop
 		 		 	 	  switch (position){
 8004034:	e19c      	b.n	8004370 <main+0x1028>
 		 		 	 	  	  }
 		 		 	 	}
 			else if(symbol[0] == '*' && act_menu == menuGarageLighting){
 8004036:	4b71      	ldr	r3, [pc, #452]	@ (80041fc <main+0xeb4>)
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	2b2a      	cmp	r3, #42	@ 0x2a
 800403c:	f040 80be 	bne.w	80041bc <main+0xe74>
 8004040:	4b6f      	ldr	r3, [pc, #444]	@ (8004200 <main+0xeb8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a72      	ldr	r2, [pc, #456]	@ (8004210 <main+0xec8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	f040 80b8 	bne.w	80041bc <main+0xe74>
 		 	 		refreshLCD = true;
 800404c:	4b6e      	ldr	r3, [pc, #440]	@ (8004208 <main+0xec0>)
 800404e:	2201      	movs	r2, #1
 8004050:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 8004052:	4b6e      	ldr	r3, [pc, #440]	@ (800420c <main+0xec4>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b03      	cmp	r3, #3
 8004058:	d02c      	beq.n	80040b4 <main+0xd6c>
 800405a:	2b03      	cmp	r3, #3
 800405c:	f300 80a3 	bgt.w	80041a6 <main+0xe5e>
 8004060:	2b01      	cmp	r3, #1
 8004062:	d002      	beq.n	800406a <main+0xd22>
 8004064:	2b02      	cmp	r3, #2
 8004066:	d015      	beq.n	8004094 <main+0xd4c>
 8004068:	e09d      	b.n	80041a6 <main+0xe5e>
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 800406a:	2001      	movs	r0, #1
 800406c:	f7fe fd7a 	bl	8002b64 <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 8004070:	486b      	ldr	r0, [pc, #428]	@ (8004220 <main+0xed8>)
 8004072:	f7fe fd9d 	bl	8002bb0 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 8004076:	2201      	movs	r2, #1
 8004078:	2100      	movs	r1, #0
 800407a:	486a      	ldr	r0, [pc, #424]	@ (8004224 <main+0xedc>)
 800407c:	f7fe fdc7 	bl	8002c0e <LCD_WriteTextXY>
 		 	 				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 8004080:	4b69      	ldr	r3, [pc, #420]	@ (8004228 <main+0xee0>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4b69      	ldr	r3, [pc, #420]	@ (800422c <main+0xee4>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	635a      	str	r2, [r3, #52]	@ 0x34
 		 	 				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800408a:	2100      	movs	r1, #0
 800408c:	4867      	ldr	r0, [pc, #412]	@ (800422c <main+0xee4>)
 800408e:	f005 fab7 	bl	8009600 <HAL_TIM_PWM_Start>
 		 	 				break;
 8004092:	e092      	b.n	80041ba <main+0xe72>

 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 8004094:	2001      	movs	r0, #1
 8004096:	f7fe fd65 	bl	8002b64 <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 800409a:	4861      	ldr	r0, [pc, #388]	@ (8004220 <main+0xed8>)
 800409c:	f7fe fd88 	bl	8002bb0 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 80040a0:	2201      	movs	r2, #1
 80040a2:	2100      	movs	r1, #0
 80040a4:	4862      	ldr	r0, [pc, #392]	@ (8004230 <main+0xee8>)
 80040a6:	f7fe fdb2 	bl	8002c0e <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80040aa:	2100      	movs	r1, #0
 80040ac:	485f      	ldr	r0, [pc, #380]	@ (800422c <main+0xee4>)
 80040ae:	f005 fba1 	bl	80097f4 <HAL_TIM_PWM_Stop>
 				 	 		break;
 80040b2:	e082      	b.n	80041ba <main+0xe72>

 		 	 		case 3:
							i = 0;
 80040b4:	4b5f      	ldr	r3, [pc, #380]	@ (8004234 <main+0xeec>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	601a      	str	r2, [r3, #0]
							refreshLCD = true;
 80040ba:	4b53      	ldr	r3, [pc, #332]	@ (8004208 <main+0xec0>)
 80040bc:	2201      	movs	r2, #1
 80040be:	701a      	strb	r2, [r3, #0]
							HAL_Delay(200);
 80040c0:	20c8      	movs	r0, #200	@ 0xc8
 80040c2:	f001 fd93 	bl	8005bec <HAL_Delay>
							memset(buff, 0, sizeof(buff));
 80040c6:	2205      	movs	r2, #5
 80040c8:	2100      	movs	r1, #0
 80040ca:	485b      	ldr	r0, [pc, #364]	@ (8004238 <main+0xef0>)
 80040cc:	f007 fc2e 	bl	800b92c <memset>
							LCD_WriteCommand(HD44780_CLEAR);
 80040d0:	2001      	movs	r0, #1
 80040d2:	f7fe fd47 	bl	8002b64 <LCD_WriteCommand>
							LCD_WriteText("Write Bright");
 80040d6:	4859      	ldr	r0, [pc, #356]	@ (800423c <main+0xef4>)
 80040d8:	f7fe fd6a 	bl	8002bb0 <LCD_WriteText>
							while(1) {
								refreshLCD = true;
 80040dc:	4b4a      	ldr	r3, [pc, #296]	@ (8004208 <main+0xec0>)
 80040de:	2201      	movs	r2, #1
 80040e0:	701a      	strb	r2, [r3, #0]
								symbol[0] = keypad_readkey();
 80040e2:	f7fe fbfd 	bl	80028e0 <keypad_readkey>
 80040e6:	4603      	mov	r3, r0
 80040e8:	461a      	mov	r2, r3
 80040ea:	4b44      	ldr	r3, [pc, #272]	@ (80041fc <main+0xeb4>)
 80040ec:	701a      	strb	r2, [r3, #0]
								if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 80040ee:	4b43      	ldr	r3, [pc, #268]	@ (80041fc <main+0xeb4>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80040f4:	d922      	bls.n	800413c <main+0xdf4>
 80040f6:	4b41      	ldr	r3, [pc, #260]	@ (80041fc <main+0xeb4>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b39      	cmp	r3, #57	@ 0x39
 80040fc:	d81e      	bhi.n	800413c <main+0xdf4>
 80040fe:	4b4d      	ldr	r3, [pc, #308]	@ (8004234 <main+0xeec>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b03      	cmp	r3, #3
 8004104:	d81a      	bhi.n	800413c <main+0xdf4>
									buff[i] = symbol[0];
 8004106:	4b4b      	ldr	r3, [pc, #300]	@ (8004234 <main+0xeec>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a3c      	ldr	r2, [pc, #240]	@ (80041fc <main+0xeb4>)
 800410c:	7811      	ldrb	r1, [r2, #0]
 800410e:	4a4a      	ldr	r2, [pc, #296]	@ (8004238 <main+0xef0>)
 8004110:	54d1      	strb	r1, [r2, r3]
									i++;
 8004112:	4b48      	ldr	r3, [pc, #288]	@ (8004234 <main+0xeec>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3301      	adds	r3, #1
 8004118:	4a46      	ldr	r2, [pc, #280]	@ (8004234 <main+0xeec>)
 800411a:	6013      	str	r3, [r2, #0]
									buff[i] = '\0';
 800411c:	4b45      	ldr	r3, [pc, #276]	@ (8004234 <main+0xeec>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a45      	ldr	r2, [pc, #276]	@ (8004238 <main+0xef0>)
 8004122:	2100      	movs	r1, #0
 8004124:	54d1      	strb	r1, [r2, r3]
									LCD_WriteCommand(HD44780_CLEAR);
 8004126:	2001      	movs	r0, #1
 8004128:	f7fe fd1c 	bl	8002b64 <LCD_WriteCommand>
									LCD_WriteText("Brightness: ");
 800412c:	4844      	ldr	r0, [pc, #272]	@ (8004240 <main+0xef8>)
 800412e:	f7fe fd3f 	bl	8002bb0 <LCD_WriteText>
									LCD_WriteTextXY(buff, 0, 1);
 8004132:	2201      	movs	r2, #1
 8004134:	2100      	movs	r1, #0
 8004136:	4840      	ldr	r0, [pc, #256]	@ (8004238 <main+0xef0>)
 8004138:	f7fe fd69 	bl	8002c0e <LCD_WriteTextXY>
								}
								HAL_Delay(200);
 800413c:	20c8      	movs	r0, #200	@ 0xc8
 800413e:	f001 fd55 	bl	8005bec <HAL_Delay>
								symbol[0] = keypad_readkey();
 8004142:	f7fe fbcd 	bl	80028e0 <keypad_readkey>
 8004146:	4603      	mov	r3, r0
 8004148:	461a      	mov	r2, r3
 800414a:	4b2c      	ldr	r3, [pc, #176]	@ (80041fc <main+0xeb4>)
 800414c:	701a      	strb	r2, [r3, #0]
								if(symbol[0] == '*') {
 800414e:	4b2b      	ldr	r3, [pc, #172]	@ (80041fc <main+0xeb4>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b2a      	cmp	r3, #42	@ 0x2a
 8004154:	d123      	bne.n	800419e <main+0xe56>
									brightnessGarage = atoi(buff)*10;
 8004156:	4838      	ldr	r0, [pc, #224]	@ (8004238 <main+0xef0>)
 8004158:	f007 fb2c 	bl	800b7b4 <atoi>
 800415c:	4602      	mov	r2, r0
 800415e:	4613      	mov	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	461a      	mov	r2, r3
 8004168:	4b2f      	ldr	r3, [pc, #188]	@ (8004228 <main+0xee0>)
 800416a:	601a      	str	r2, [r3, #0]
									if(brightnessGarage >= 1000) {
 800416c:	4b2e      	ldr	r3, [pc, #184]	@ (8004228 <main+0xee0>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004174:	db03      	blt.n	800417e <main+0xe36>
										brightnessGarage = 999;
 8004176:	4b2c      	ldr	r3, [pc, #176]	@ (8004228 <main+0xee0>)
 8004178:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800417c:	601a      	str	r2, [r3, #0]
									}
								   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 800417e:	4b2a      	ldr	r3, [pc, #168]	@ (8004228 <main+0xee0>)
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	4b2a      	ldr	r3, [pc, #168]	@ (800422c <main+0xee4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	635a      	str	r2, [r3, #52]	@ 0x34
									act_menu = menuGarageLighting;
 8004188:	4b1d      	ldr	r3, [pc, #116]	@ (8004200 <main+0xeb8>)
 800418a:	4a21      	ldr	r2, [pc, #132]	@ (8004210 <main+0xec8>)
 800418c:	601a      	str	r2, [r3, #0]
									position = 1;
 800418e:	4b1f      	ldr	r3, [pc, #124]	@ (800420c <main+0xec4>)
 8004190:	2201      	movs	r2, #1
 8004192:	701a      	strb	r2, [r3, #0]
									max_pos = 3;
 8004194:	4b1f      	ldr	r3, [pc, #124]	@ (8004214 <main+0xecc>)
 8004196:	2203      	movs	r2, #3
 8004198:	701a      	strb	r2, [r3, #0]
									break;
 800419a:	bf00      	nop
								}
								HAL_Delay(100);
							}
							break;
 800419c:	e00d      	b.n	80041ba <main+0xe72>
								HAL_Delay(100);
 800419e:	2064      	movs	r0, #100	@ 0x64
 80041a0:	f001 fd24 	bl	8005bec <HAL_Delay>
								refreshLCD = true;
 80041a4:	e79a      	b.n	80040dc <main+0xd94>
 		 	 		default: act_menu = menuGarage, position = 1, max_pos = 2; break;
 80041a6:	4b16      	ldr	r3, [pc, #88]	@ (8004200 <main+0xeb8>)
 80041a8:	4a16      	ldr	r2, [pc, #88]	@ (8004204 <main+0xebc>)
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	4b17      	ldr	r3, [pc, #92]	@ (800420c <main+0xec4>)
 80041ae:	2201      	movs	r2, #1
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	4b18      	ldr	r3, [pc, #96]	@ (8004214 <main+0xecc>)
 80041b4:	2202      	movs	r2, #2
 80041b6:	701a      	strb	r2, [r3, #0]
 80041b8:	bf00      	nop
 		 	 	  switch (position){
 80041ba:	e0d9      	b.n	8004370 <main+0x1028>
 		 	 	  }
			}
 			else if(symbol[0] == '*' && act_menu == menuGarageShutter) {
 80041bc:	4b0f      	ldr	r3, [pc, #60]	@ (80041fc <main+0xeb4>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80041c2:	d172      	bne.n	80042aa <main+0xf62>
 80041c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004200 <main+0xeb8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a13      	ldr	r2, [pc, #76]	@ (8004218 <main+0xed0>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d16d      	bne.n	80042aa <main+0xf62>
 						refreshLCD = true;
 80041ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004208 <main+0xec0>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	701a      	strb	r2, [r3, #0]
 						HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80041d4:	2108      	movs	r1, #8
 80041d6:	4805      	ldr	r0, [pc, #20]	@ (80041ec <main+0xea4>)
 80041d8:	f005 fa12 	bl	8009600 <HAL_TIM_PWM_Start>
 						switch(position) {
 80041dc:	4b0b      	ldr	r3, [pc, #44]	@ (800420c <main+0xec4>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d02f      	beq.n	8004244 <main+0xefc>
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d047      	beq.n	8004278 <main+0xf30>
 80041e8:	e0c2      	b.n	8004370 <main+0x1028>
 80041ea:	bf00      	nop
 80041ec:	200003f0 	.word	0x200003f0
 80041f0:	20000305 	.word	0x20000305
 80041f4:	0800c56c 	.word	0x0800c56c
 80041f8:	0800c580 	.word	0x0800c580
 80041fc:	20000298 	.word	0x20000298
 8004200:	20000128 	.word	0x20000128
 8004204:	200000d8 	.word	0x200000d8
 8004208:	200002fd 	.word	0x200002fd
 800420c:	20000054 	.word	0x20000054
 8004210:	200000e8 	.word	0x200000e8
 8004214:	20000055 	.word	0x20000055
 8004218:	200000f8 	.word	0x200000f8
 800421c:	20000108 	.word	0x20000108
 8004220:	0800c544 	.word	0x0800c544
 8004224:	0800c52c 	.word	0x0800c52c
 8004228:	20000134 	.word	0x20000134
 800422c:	2000043c 	.word	0x2000043c
 8004230:	0800c538 	.word	0x0800c538
 8004234:	20000308 	.word	0x20000308
 8004238:	2000029c 	.word	0x2000029c
 800423c:	0800c54c 	.word	0x0800c54c
 8004240:	0800c55c 	.word	0x0800c55c
 							case 1:
 								__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 500);
 8004244:	4b31      	ldr	r3, [pc, #196]	@ (800430c <main+0xfc4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800424c:	63da      	str	r2, [r3, #60]	@ 0x3c
 								HAL_Delay(500);
 800424e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004252:	f001 fccb 	bl	8005bec <HAL_Delay>
 							   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 0);
 8004256:	4b2d      	ldr	r3, [pc, #180]	@ (800430c <main+0xfc4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2200      	movs	r2, #0
 800425c:	63da      	str	r2, [r3, #60]	@ 0x3c
 							  garageShutter= true;
 800425e:	4b2c      	ldr	r3, [pc, #176]	@ (8004310 <main+0xfc8>)
 8004260:	2201      	movs	r2, #1
 8004262:	701a      	strb	r2, [r3, #0]
 							   LCD_WriteText("Shutter");
 8004264:	482b      	ldr	r0, [pc, #172]	@ (8004314 <main+0xfcc>)
 8004266:	f7fe fca3 	bl	8002bb0 <LCD_WriteText>
 							   LCD_WriteTextXY("is lowering",0,1);
 800426a:	2201      	movs	r2, #1
 800426c:	2100      	movs	r1, #0
 800426e:	482a      	ldr	r0, [pc, #168]	@ (8004318 <main+0xfd0>)
 8004270:	f7fe fccd 	bl	8002c0e <LCD_WriteTextXY>
 							   break;
 8004274:	bf00      	nop
 						switch(position) {
 8004276:	e07b      	b.n	8004370 <main+0x1028>
 							case 2:
 								__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 2000);
 8004278:	4b24      	ldr	r3, [pc, #144]	@ (800430c <main+0xfc4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004280:	63da      	str	r2, [r3, #60]	@ 0x3c
 								HAL_Delay(500);
 8004282:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004286:	f001 fcb1 	bl	8005bec <HAL_Delay>
 								__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 0);
 800428a:	4b20      	ldr	r3, [pc, #128]	@ (800430c <main+0xfc4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2200      	movs	r2, #0
 8004290:	63da      	str	r2, [r3, #60]	@ 0x3c
 								garageShutter = false;
 8004292:	4b1f      	ldr	r3, [pc, #124]	@ (8004310 <main+0xfc8>)
 8004294:	2200      	movs	r2, #0
 8004296:	701a      	strb	r2, [r3, #0]
 								LCD_WriteText("Shutter");
 8004298:	481e      	ldr	r0, [pc, #120]	@ (8004314 <main+0xfcc>)
 800429a:	f7fe fc89 	bl	8002bb0 <LCD_WriteText>
 								LCD_WriteTextXY("go up",0,1);
 800429e:	2201      	movs	r2, #1
 80042a0:	2100      	movs	r1, #0
 80042a2:	481e      	ldr	r0, [pc, #120]	@ (800431c <main+0xfd4>)
 80042a4:	f7fe fcb3 	bl	8002c0e <LCD_WriteTextXY>
 						switch(position) {
 80042a8:	e062      	b.n	8004370 <main+0x1028>
 						}
 				}
 			else if(symbol[0] == '*' && act_menu == menuGarageGate) {
 80042aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004320 <main+0xfd8>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80042b0:	d15e      	bne.n	8004370 <main+0x1028>
 80042b2:	4b1c      	ldr	r3, [pc, #112]	@ (8004324 <main+0xfdc>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004328 <main+0xfe0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d159      	bne.n	8004370 <main+0x1028>
 			 						refreshLCD = true;
 80042bc:	4b1b      	ldr	r3, [pc, #108]	@ (800432c <main+0xfe4>)
 80042be:	2201      	movs	r2, #1
 80042c0:	701a      	strb	r2, [r3, #0]
 			 						HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80042c2:	2108      	movs	r1, #8
 80042c4:	4811      	ldr	r0, [pc, #68]	@ (800430c <main+0xfc4>)
 80042c6:	f005 f99b 	bl	8009600 <HAL_TIM_PWM_Start>
 			 						switch(position) {
 80042ca:	4b19      	ldr	r3, [pc, #100]	@ (8004330 <main+0xfe8>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d002      	beq.n	80042d8 <main+0xf90>
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d034      	beq.n	8004340 <main+0xff8>
 80042d6:	e04b      	b.n	8004370 <main+0x1028>
 			 							case 1:
 			 								__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 500);
 80042d8:	4b16      	ldr	r3, [pc, #88]	@ (8004334 <main+0xfec>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80042e0:	641a      	str	r2, [r3, #64]	@ 0x40
 			 								HAL_Delay(500);
 80042e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80042e6:	f001 fc81 	bl	8005bec <HAL_Delay>
 			 							   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 0);
 80042ea:	4b12      	ldr	r3, [pc, #72]	@ (8004334 <main+0xfec>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2200      	movs	r2, #0
 80042f0:	641a      	str	r2, [r3, #64]	@ 0x40
 			 							  garageGate= true;
 80042f2:	4b11      	ldr	r3, [pc, #68]	@ (8004338 <main+0xff0>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	701a      	strb	r2, [r3, #0]
 			 							   LCD_WriteText("Gate");
 80042f8:	4810      	ldr	r0, [pc, #64]	@ (800433c <main+0xff4>)
 80042fa:	f7fe fc59 	bl	8002bb0 <LCD_WriteText>
 			 							   LCD_WriteTextXY("is lowering",0,1);
 80042fe:	2201      	movs	r2, #1
 8004300:	2100      	movs	r1, #0
 8004302:	4805      	ldr	r0, [pc, #20]	@ (8004318 <main+0xfd0>)
 8004304:	f7fe fc83 	bl	8002c0e <LCD_WriteTextXY>
 			 							   break;
 8004308:	e032      	b.n	8004370 <main+0x1028>
 800430a:	bf00      	nop
 800430c:	200003f0 	.word	0x200003f0
 8004310:	20000306 	.word	0x20000306
 8004314:	0800c56c 	.word	0x0800c56c
 8004318:	0800c574 	.word	0x0800c574
 800431c:	0800c580 	.word	0x0800c580
 8004320:	20000298 	.word	0x20000298
 8004324:	20000128 	.word	0x20000128
 8004328:	20000108 	.word	0x20000108
 800432c:	200002fd 	.word	0x200002fd
 8004330:	20000054 	.word	0x20000054
 8004334:	20000488 	.word	0x20000488
 8004338:	20000307 	.word	0x20000307
 800433c:	0800c5c0 	.word	0x0800c5c0
 			 							case 2:
 			 								__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 2000);
 8004340:	4bc3      	ldr	r3, [pc, #780]	@ (8004650 <main+0x1308>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004348:	641a      	str	r2, [r3, #64]	@ 0x40
 			 								HAL_Delay(500);
 800434a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800434e:	f001 fc4d 	bl	8005bec <HAL_Delay>
 			 								__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 0);
 8004352:	4bbf      	ldr	r3, [pc, #764]	@ (8004650 <main+0x1308>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2200      	movs	r2, #0
 8004358:	641a      	str	r2, [r3, #64]	@ 0x40
 			 								garageGate = false;
 800435a:	4bbe      	ldr	r3, [pc, #760]	@ (8004654 <main+0x130c>)
 800435c:	2200      	movs	r2, #0
 800435e:	701a      	strb	r2, [r3, #0]
 			 								LCD_WriteText("Gate");
 8004360:	48bd      	ldr	r0, [pc, #756]	@ (8004658 <main+0x1310>)
 8004362:	f7fe fc25 	bl	8002bb0 <LCD_WriteText>
 			 								LCD_WriteTextXY("go up",0,1);
 8004366:	2201      	movs	r2, #1
 8004368:	2100      	movs	r1, #0
 800436a:	48bc      	ldr	r0, [pc, #752]	@ (800465c <main+0x1314>)
 800436c:	f7fe fc4f 	bl	8002c0e <LCD_WriteTextXY>
 			 						}
 			 				}

 	if (symbol[0] == '#')
 8004370:	4bbb      	ldr	r3, [pc, #748]	@ (8004660 <main+0x1318>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b23      	cmp	r3, #35	@ 0x23
 8004376:	d10b      	bne.n	8004390 <main+0x1048>
 	{
 		refreshLCD = true;
 8004378:	4bba      	ldr	r3, [pc, #744]	@ (8004664 <main+0x131c>)
 800437a:	2201      	movs	r2, #1
 800437c:	701a      	strb	r2, [r3, #0]
 		act_menu = mainmenu;
 800437e:	4bba      	ldr	r3, [pc, #744]	@ (8004668 <main+0x1320>)
 8004380:	4aba      	ldr	r2, [pc, #744]	@ (800466c <main+0x1324>)
 8004382:	601a      	str	r2, [r3, #0]
 		position = 1;
 8004384:	4bba      	ldr	r3, [pc, #744]	@ (8004670 <main+0x1328>)
 8004386:	2201      	movs	r2, #1
 8004388:	701a      	strb	r2, [r3, #0]
 		max_pos = 4;
 800438a:	4bba      	ldr	r3, [pc, #744]	@ (8004674 <main+0x132c>)
 800438c:	2204      	movs	r2, #4
 800438e:	701a      	strb	r2, [r3, #0]
 	}

 	HAL_Delay(200);
 8004390:	20c8      	movs	r0, #200	@ 0xc8
 8004392:	f001 fc2b 	bl	8005bec <HAL_Delay>
 	///////////////SYSTEM ZASILANIA///////////////////////////////////////////////////
 	vbus = INA219_ReadBusVoltage(&ina219);
 8004396:	48b8      	ldr	r0, [pc, #736]	@ (8004678 <main+0x1330>)
 8004398:	f7fc fe4e 	bl	8001038 <INA219_ReadBusVoltage>
 800439c:	4603      	mov	r3, r0
 800439e:	461a      	mov	r2, r3
 80043a0:	4bb6      	ldr	r3, [pc, #728]	@ (800467c <main+0x1334>)
 80043a2:	801a      	strh	r2, [r3, #0]
 		 	   vshunt = INA219_ReadShuntVolage(&ina219);
 80043a4:	48b4      	ldr	r0, [pc, #720]	@ (8004678 <main+0x1330>)
 80043a6:	f7fc fe83 	bl	80010b0 <INA219_ReadShuntVolage>
 80043aa:	4603      	mov	r3, r0
 80043ac:	461a      	mov	r2, r3
 80043ae:	4bb4      	ldr	r3, [pc, #720]	@ (8004680 <main+0x1338>)
 80043b0:	801a      	strh	r2, [r3, #0]
 		 	   current = INA219_ReadCurrent(&ina219);
 80043b2:	48b1      	ldr	r0, [pc, #708]	@ (8004678 <main+0x1330>)
 80043b4:	f7fc fe64 	bl	8001080 <INA219_ReadCurrent>
 80043b8:	4603      	mov	r3, r0
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	4bb1      	ldr	r3, [pc, #708]	@ (8004684 <main+0x133c>)
 80043be:	801a      	strh	r2, [r3, #0]
 		 	   power = vbus * current;
 80043c0:	4bae      	ldr	r3, [pc, #696]	@ (800467c <main+0x1334>)
 80043c2:	881a      	ldrh	r2, [r3, #0]
 80043c4:	4baf      	ldr	r3, [pc, #700]	@ (8004684 <main+0x133c>)
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	fb12 f303 	smulbb	r3, r2, r3
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	4bae      	ldr	r3, [pc, #696]	@ (8004688 <main+0x1340>)
 80043d0:	801a      	strh	r2, [r3, #0]

 		 	   // Konwersja na jednostki podstawowe (V i A)
 		 	    solar_volts = vbus / 1000.0;  // mV -> V
 80043d2:	4baa      	ldr	r3, [pc, #680]	@ (800467c <main+0x1334>)
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fc f8d4 	bl	8000584 <__aeabi_i2d>
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	4baa      	ldr	r3, [pc, #680]	@ (800468c <main+0x1344>)
 80043e2:	f7fc fa63 	bl	80008ac <__aeabi_ddiv>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4610      	mov	r0, r2
 80043ec:	4619      	mov	r1, r3
 80043ee:	f7fc fc15 	bl	8000c1c <__aeabi_d2f>
 80043f2:	4603      	mov	r3, r0
 80043f4:	4aa6      	ldr	r2, [pc, #664]	@ (8004690 <main+0x1348>)
 80043f6:	6013      	str	r3, [r2, #0]
 		 	    vshunt_volts = vshunt / 1000.0; // mV -> V
 80043f8:	4ba1      	ldr	r3, [pc, #644]	@ (8004680 <main+0x1338>)
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fc f8c1 	bl	8000584 <__aeabi_i2d>
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	4ba1      	ldr	r3, [pc, #644]	@ (800468c <main+0x1344>)
 8004408:	f7fc fa50 	bl	80008ac <__aeabi_ddiv>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4610      	mov	r0, r2
 8004412:	4619      	mov	r1, r3
 8004414:	f7fc fc02 	bl	8000c1c <__aeabi_d2f>
 8004418:	4603      	mov	r3, r0
 800441a:	4a9e      	ldr	r2, [pc, #632]	@ (8004694 <main+0x134c>)
 800441c:	6013      	str	r3, [r2, #0]
 		 	    solar_amps = current / 1000.0; // mA -> A
 800441e:	4b99      	ldr	r3, [pc, #612]	@ (8004684 <main+0x133c>)
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7fc f8ae 	bl	8000584 <__aeabi_i2d>
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	4b97      	ldr	r3, [pc, #604]	@ (800468c <main+0x1344>)
 800442e:	f7fc fa3d 	bl	80008ac <__aeabi_ddiv>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4610      	mov	r0, r2
 8004438:	4619      	mov	r1, r3
 800443a:	f7fc fbef 	bl	8000c1c <__aeabi_d2f>
 800443e:	4603      	mov	r3, r0
 8004440:	4a95      	ldr	r2, [pc, #596]	@ (8004698 <main+0x1350>)
 8004442:	6013      	str	r3, [r2, #0]

 		 	//        Zaokrąglanie do 3 miejsc po przecinku
 		 	       solar_volts = round(solar_volts * 1000) / 1000;
 8004444:	4b92      	ldr	r3, [pc, #584]	@ (8004690 <main+0x1348>)
 8004446:	edd3 7a00 	vldr	s15, [r3]
 800444a:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800469c <main+0x1354>
 800444e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004452:	ee17 0a90 	vmov	r0, s15
 8004456:	f7fc f8a7 	bl	80005a8 <__aeabi_f2d>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	ec43 2b10 	vmov	d0, r2, r3
 8004462:	f007 ff61 	bl	800c328 <round>
 8004466:	ec51 0b10 	vmov	r0, r1, d0
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	4b87      	ldr	r3, [pc, #540]	@ (800468c <main+0x1344>)
 8004470:	f7fc fa1c 	bl	80008ac <__aeabi_ddiv>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	4610      	mov	r0, r2
 800447a:	4619      	mov	r1, r3
 800447c:	f7fc fbce 	bl	8000c1c <__aeabi_d2f>
 8004480:	4603      	mov	r3, r0
 8004482:	4a83      	ldr	r2, [pc, #524]	@ (8004690 <main+0x1348>)
 8004484:	6013      	str	r3, [r2, #0]
 		 	       vshunt_volts = round(vshunt_volts * 1000) / 1000;
 8004486:	4b83      	ldr	r3, [pc, #524]	@ (8004694 <main+0x134c>)
 8004488:	edd3 7a00 	vldr	s15, [r3]
 800448c:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 800469c <main+0x1354>
 8004490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004494:	ee17 0a90 	vmov	r0, s15
 8004498:	f7fc f886 	bl	80005a8 <__aeabi_f2d>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	ec43 2b10 	vmov	d0, r2, r3
 80044a4:	f007 ff40 	bl	800c328 <round>
 80044a8:	ec51 0b10 	vmov	r0, r1, d0
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	4b76      	ldr	r3, [pc, #472]	@ (800468c <main+0x1344>)
 80044b2:	f7fc f9fb 	bl	80008ac <__aeabi_ddiv>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4610      	mov	r0, r2
 80044bc:	4619      	mov	r1, r3
 80044be:	f7fc fbad 	bl	8000c1c <__aeabi_d2f>
 80044c2:	4603      	mov	r3, r0
 80044c4:	4a73      	ldr	r2, [pc, #460]	@ (8004694 <main+0x134c>)
 80044c6:	6013      	str	r3, [r2, #0]
 		 	       solar_amps = round(solar_amps * 1000) / 1000;
 80044c8:	4b73      	ldr	r3, [pc, #460]	@ (8004698 <main+0x1350>)
 80044ca:	edd3 7a00 	vldr	s15, [r3]
 80044ce:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 800469c <main+0x1354>
 80044d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044d6:	ee17 0a90 	vmov	r0, s15
 80044da:	f7fc f865 	bl	80005a8 <__aeabi_f2d>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	ec43 2b10 	vmov	d0, r2, r3
 80044e6:	f007 ff1f 	bl	800c328 <round>
 80044ea:	ec51 0b10 	vmov	r0, r1, d0
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	4b66      	ldr	r3, [pc, #408]	@ (800468c <main+0x1344>)
 80044f4:	f7fc f9da 	bl	80008ac <__aeabi_ddiv>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4610      	mov	r0, r2
 80044fe:	4619      	mov	r1, r3
 8004500:	f7fc fb8c 	bl	8000c1c <__aeabi_d2f>
 8004504:	4603      	mov	r3, r0
 8004506:	4a64      	ldr	r2, [pc, #400]	@ (8004698 <main+0x1350>)
 8004508:	6013      	str	r3, [r2, #0]
 		 	       solar_power = solar_volts * solar_amps;
 800450a:	4b61      	ldr	r3, [pc, #388]	@ (8004690 <main+0x1348>)
 800450c:	ed93 7a00 	vldr	s14, [r3]
 8004510:	4b61      	ldr	r3, [pc, #388]	@ (8004698 <main+0x1350>)
 8004512:	edd3 7a00 	vldr	s15, [r3]
 8004516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800451a:	4b61      	ldr	r3, [pc, #388]	@ (80046a0 <main+0x1358>)
 800451c:	edc3 7a00 	vstr	s15, [r3]

 		  vbus2 = INA219_ReadBusVoltage(&ina219_2);
 8004520:	4860      	ldr	r0, [pc, #384]	@ (80046a4 <main+0x135c>)
 8004522:	f7fc fd89 	bl	8001038 <INA219_ReadBusVoltage>
 8004526:	4603      	mov	r3, r0
 8004528:	461a      	mov	r2, r3
 800452a:	4b5f      	ldr	r3, [pc, #380]	@ (80046a8 <main+0x1360>)
 800452c:	801a      	strh	r2, [r3, #0]
 		   vshunt2 = INA219_ReadShuntVolage(&ina219_2);
 800452e:	485d      	ldr	r0, [pc, #372]	@ (80046a4 <main+0x135c>)
 8004530:	f7fc fdbe 	bl	80010b0 <INA219_ReadShuntVolage>
 8004534:	4603      	mov	r3, r0
 8004536:	461a      	mov	r2, r3
 8004538:	4b5c      	ldr	r3, [pc, #368]	@ (80046ac <main+0x1364>)
 800453a:	801a      	strh	r2, [r3, #0]
 			   current2 = INA219_ReadCurrent(&ina219_2);
 800453c:	4859      	ldr	r0, [pc, #356]	@ (80046a4 <main+0x135c>)
 800453e:	f7fc fd9f 	bl	8001080 <INA219_ReadCurrent>
 8004542:	4603      	mov	r3, r0
 8004544:	b29a      	uxth	r2, r3
 8004546:	4b5a      	ldr	r3, [pc, #360]	@ (80046b0 <main+0x1368>)
 8004548:	801a      	strh	r2, [r3, #0]
 			   power2 = vbus2 * current2;
 800454a:	4b57      	ldr	r3, [pc, #348]	@ (80046a8 <main+0x1360>)
 800454c:	881a      	ldrh	r2, [r3, #0]
 800454e:	4b58      	ldr	r3, [pc, #352]	@ (80046b0 <main+0x1368>)
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	fb12 f303 	smulbb	r3, r2, r3
 8004556:	b29a      	uxth	r2, r3
 8004558:	4b56      	ldr	r3, [pc, #344]	@ (80046b4 <main+0x136c>)
 800455a:	801a      	strh	r2, [r3, #0]

 			   // Konwersja na jednostki podstawowe (V i A)
 			   	 	    output_volts = vbus2 / 1000.0;  // mV -> V
 800455c:	4b52      	ldr	r3, [pc, #328]	@ (80046a8 <main+0x1360>)
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f7fc f80f 	bl	8000584 <__aeabi_i2d>
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	4b48      	ldr	r3, [pc, #288]	@ (800468c <main+0x1344>)
 800456c:	f7fc f99e 	bl	80008ac <__aeabi_ddiv>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4610      	mov	r0, r2
 8004576:	4619      	mov	r1, r3
 8004578:	f7fc fb50 	bl	8000c1c <__aeabi_d2f>
 800457c:	4603      	mov	r3, r0
 800457e:	4a4e      	ldr	r2, [pc, #312]	@ (80046b8 <main+0x1370>)
 8004580:	6013      	str	r3, [r2, #0]
 			   	 	    vshunt_volts2 = vshunt2 / 1000.0; // mV -> V
 8004582:	4b4a      	ldr	r3, [pc, #296]	@ (80046ac <main+0x1364>)
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f7fb fffc 	bl	8000584 <__aeabi_i2d>
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	4b3e      	ldr	r3, [pc, #248]	@ (800468c <main+0x1344>)
 8004592:	f7fc f98b 	bl	80008ac <__aeabi_ddiv>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4610      	mov	r0, r2
 800459c:	4619      	mov	r1, r3
 800459e:	f7fc fb3d 	bl	8000c1c <__aeabi_d2f>
 80045a2:	4603      	mov	r3, r0
 80045a4:	4a45      	ldr	r2, [pc, #276]	@ (80046bc <main+0x1374>)
 80045a6:	6013      	str	r3, [r2, #0]
 			   	 	    current_amps2 = current2 / 1000.0; // mA -> A
 80045a8:	4b41      	ldr	r3, [pc, #260]	@ (80046b0 <main+0x1368>)
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fb ffe9 	bl	8000584 <__aeabi_i2d>
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	4b35      	ldr	r3, [pc, #212]	@ (800468c <main+0x1344>)
 80045b8:	f7fc f978 	bl	80008ac <__aeabi_ddiv>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4610      	mov	r0, r2
 80045c2:	4619      	mov	r1, r3
 80045c4:	f7fc fb2a 	bl	8000c1c <__aeabi_d2f>
 80045c8:	4603      	mov	r3, r0
 80045ca:	4a3d      	ldr	r2, [pc, #244]	@ (80046c0 <main+0x1378>)
 80045cc:	6013      	str	r3, [r2, #0]

 			   	 	      //  Zaokrąglanie do 3 miejsc po przecinku
 			   	 	       output_volts = round(output_volts * 1000) / 1000;
 80045ce:	4b3a      	ldr	r3, [pc, #232]	@ (80046b8 <main+0x1370>)
 80045d0:	edd3 7a00 	vldr	s15, [r3]
 80045d4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800469c <main+0x1354>
 80045d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045dc:	ee17 0a90 	vmov	r0, s15
 80045e0:	f7fb ffe2 	bl	80005a8 <__aeabi_f2d>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	ec43 2b10 	vmov	d0, r2, r3
 80045ec:	f007 fe9c 	bl	800c328 <round>
 80045f0:	ec51 0b10 	vmov	r0, r1, d0
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	4b24      	ldr	r3, [pc, #144]	@ (800468c <main+0x1344>)
 80045fa:	f7fc f957 	bl	80008ac <__aeabi_ddiv>
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	4610      	mov	r0, r2
 8004604:	4619      	mov	r1, r3
 8004606:	f7fc fb09 	bl	8000c1c <__aeabi_d2f>
 800460a:	4603      	mov	r3, r0
 800460c:	4a2a      	ldr	r2, [pc, #168]	@ (80046b8 <main+0x1370>)
 800460e:	6013      	str	r3, [r2, #0]
 			   	 	       vshunt_volts2 = round(vshunt_volts2 * 1000) / 1000;
 8004610:	4b2a      	ldr	r3, [pc, #168]	@ (80046bc <main+0x1374>)
 8004612:	edd3 7a00 	vldr	s15, [r3]
 8004616:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800469c <main+0x1354>
 800461a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800461e:	ee17 0a90 	vmov	r0, s15
 8004622:	f7fb ffc1 	bl	80005a8 <__aeabi_f2d>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	ec43 2b10 	vmov	d0, r2, r3
 800462e:	f007 fe7b 	bl	800c328 <round>
 8004632:	ec51 0b10 	vmov	r0, r1, d0
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	4b14      	ldr	r3, [pc, #80]	@ (800468c <main+0x1344>)
 800463c:	f7fc f936 	bl	80008ac <__aeabi_ddiv>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4610      	mov	r0, r2
 8004646:	4619      	mov	r1, r3
 8004648:	f7fc fae8 	bl	8000c1c <__aeabi_d2f>
 800464c:	4603      	mov	r3, r0
 800464e:	e039      	b.n	80046c4 <main+0x137c>
 8004650:	20000488 	.word	0x20000488
 8004654:	20000307 	.word	0x20000307
 8004658:	0800c5c0 	.word	0x0800c5c0
 800465c:	0800c580 	.word	0x0800c580
 8004660:	20000298 	.word	0x20000298
 8004664:	200002fd 	.word	0x200002fd
 8004668:	20000128 	.word	0x20000128
 800466c:	20000058 	.word	0x20000058
 8004670:	20000054 	.word	0x20000054
 8004674:	20000055 	.word	0x20000055
 8004678:	20000348 	.word	0x20000348
 800467c:	20000358 	.word	0x20000358
 8004680:	2000035a 	.word	0x2000035a
 8004684:	2000035c 	.word	0x2000035c
 8004688:	2000035e 	.word	0x2000035e
 800468c:	408f4000 	.word	0x408f4000
 8004690:	2000036c 	.word	0x2000036c
 8004694:	20000370 	.word	0x20000370
 8004698:	20000374 	.word	0x20000374
 800469c:	447a0000 	.word	0x447a0000
 80046a0:	20000384 	.word	0x20000384
 80046a4:	20000350 	.word	0x20000350
 80046a8:	20000360 	.word	0x20000360
 80046ac:	20000362 	.word	0x20000362
 80046b0:	20000364 	.word	0x20000364
 80046b4:	20000366 	.word	0x20000366
 80046b8:	20000378 	.word	0x20000378
 80046bc:	2000037c 	.word	0x2000037c
 80046c0:	20000380 	.word	0x20000380
 80046c4:	4a4e      	ldr	r2, [pc, #312]	@ (8004800 <main+0x14b8>)
 80046c6:	6013      	str	r3, [r2, #0]
 			   	 	       current_amps2 = round(current_amps2 * 1000) /  1000;
 80046c8:	4b4e      	ldr	r3, [pc, #312]	@ (8004804 <main+0x14bc>)
 80046ca:	edd3 7a00 	vldr	s15, [r3]
 80046ce:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8004808 <main+0x14c0>
 80046d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046d6:	ee17 0a90 	vmov	r0, s15
 80046da:	f7fb ff65 	bl	80005a8 <__aeabi_f2d>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	ec43 2b10 	vmov	d0, r2, r3
 80046e6:	f007 fe1f 	bl	800c328 <round>
 80046ea:	ec51 0b10 	vmov	r0, r1, d0
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	4b46      	ldr	r3, [pc, #280]	@ (800480c <main+0x14c4>)
 80046f4:	f7fc f8da 	bl	80008ac <__aeabi_ddiv>
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4610      	mov	r0, r2
 80046fe:	4619      	mov	r1, r3
 8004700:	f7fc fa8c 	bl	8000c1c <__aeabi_d2f>
 8004704:	4603      	mov	r3, r0
 8004706:	4a3f      	ldr	r2, [pc, #252]	@ (8004804 <main+0x14bc>)
 8004708:	6013      	str	r3, [r2, #0]
 	    if(Output == true)
 800470a:	4b41      	ldr	r3, [pc, #260]	@ (8004810 <main+0x14c8>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d035      	beq.n	800477e <main+0x1436>
 	    {
 		if(solar_volts >= 4.6) energymode = 1;
 8004712:	4b40      	ldr	r3, [pc, #256]	@ (8004814 <main+0x14cc>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7fb ff46 	bl	80005a8 <__aeabi_f2d>
 800471c:	a336      	add	r3, pc, #216	@ (adr r3, 80047f8 <main+0x14b0>)
 800471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004722:	f7fc fa1f 	bl	8000b64 <__aeabi_dcmpge>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <main+0x13ec>
 800472c:	4b3a      	ldr	r3, [pc, #232]	@ (8004818 <main+0x14d0>)
 800472e:	2201      	movs	r2, #1
 8004730:	801a      	strh	r2, [r3, #0]
 8004732:	e017      	b.n	8004764 <main+0x141c>
 		else if(PowerSupply == false && solar_volts < 4.5 && energymode != 2) energymode = 2;
 8004734:	4b39      	ldr	r3, [pc, #228]	@ (800481c <main+0x14d4>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	f083 0301 	eor.w	r3, r3, #1
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d010      	beq.n	8004764 <main+0x141c>
 8004742:	4b34      	ldr	r3, [pc, #208]	@ (8004814 <main+0x14cc>)
 8004744:	edd3 7a00 	vldr	s15, [r3]
 8004748:	eeb1 7a02 	vmov.f32	s14, #18	@ 0x40900000  4.5
 800474c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004754:	d506      	bpl.n	8004764 <main+0x141c>
 8004756:	4b30      	ldr	r3, [pc, #192]	@ (8004818 <main+0x14d0>)
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d002      	beq.n	8004764 <main+0x141c>
 800475e:	4b2e      	ldr	r3, [pc, #184]	@ (8004818 <main+0x14d0>)
 8004760:	2202      	movs	r2, #2
 8004762:	801a      	strh	r2, [r3, #0]
 		if(output_volts < 4) energymode = 3;
 8004764:	4b2e      	ldr	r3, [pc, #184]	@ (8004820 <main+0x14d8>)
 8004766:	edd3 7a00 	vldr	s15, [r3]
 800476a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800476e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004776:	d502      	bpl.n	800477e <main+0x1436>
 8004778:	4b27      	ldr	r3, [pc, #156]	@ (8004818 <main+0x14d0>)
 800477a:	2203      	movs	r2, #3
 800477c:	801a      	strh	r2, [r3, #0]
 	    }
 		if(Output == false) energymode = 4; //wylaczenie zasilania, panel jesli jest w stanie to ładuje akumulator
 800477e:	4b24      	ldr	r3, [pc, #144]	@ (8004810 <main+0x14c8>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	f083 0301 	eor.w	r3, r3, #1
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <main+0x144a>
 800478c:	4b22      	ldr	r3, [pc, #136]	@ (8004818 <main+0x14d0>)
 800478e:	2204      	movs	r2, #4
 8004790:	801a      	strh	r2, [r3, #0]
 		switch (energymode) {
 8004792:	4b21      	ldr	r3, [pc, #132]	@ (8004818 <main+0x14d0>)
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	3b01      	subs	r3, #1
 8004798:	2b03      	cmp	r3, #3
 800479a:	d829      	bhi.n	80047f0 <main+0x14a8>
 800479c:	a201      	add	r2, pc, #4	@ (adr r2, 80047a4 <main+0x145c>)
 800479e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a2:	bf00      	nop
 80047a4:	080047b5 	.word	0x080047b5
 80047a8:	080047c5 	.word	0x080047c5
 80047ac:	080047d1 	.word	0x080047d1
 80047b0:	080047e1 	.word	0x080047e1
 		case 1:
 			PowerSupply_Off();
 80047b4:	f7fe fc60 	bl	8003078 <PowerSupply_Off>
 			Battery_Off();
 80047b8:	f7fe fc98 	bl	80030ec <Battery_Off>
 			Solar = true;
 80047bc:	4b19      	ldr	r3, [pc, #100]	@ (8004824 <main+0x14dc>)
 80047be:	2201      	movs	r2, #1
 80047c0:	701a      	strb	r2, [r3, #0]
 			break;
 80047c2:	e015      	b.n	80047f0 <main+0x14a8>
 		case 2:
 			Battery_On();
 80047c4:	f7fe fca6 	bl	8003114 <Battery_On>
 			Solar = false;
 80047c8:	4b16      	ldr	r3, [pc, #88]	@ (8004824 <main+0x14dc>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	701a      	strb	r2, [r3, #0]
 			break;
 80047ce:	e00f      	b.n	80047f0 <main+0x14a8>

 		case 3:
 			Battery_Off();
 80047d0:	f7fe fc8c 	bl	80030ec <Battery_Off>
 			PowerSupply_On();
 80047d4:	f7fe fc64 	bl	80030a0 <PowerSupply_On>
 			Solar = false;
 80047d8:	4b12      	ldr	r3, [pc, #72]	@ (8004824 <main+0x14dc>)
 80047da:	2200      	movs	r2, #0
 80047dc:	701a      	strb	r2, [r3, #0]

 			break;
 80047de:	e007      	b.n	80047f0 <main+0x14a8>
 		case 4:
 			PowerSupply_Off();
 80047e0:	f7fe fc4a 	bl	8003078 <PowerSupply_Off>
 			Battery_Off();
 80047e4:	f7fe fc82 	bl	80030ec <Battery_Off>
 			Solar = false;
 80047e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004824 <main+0x14dc>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	701a      	strb	r2, [r3, #0]
 			break;
 80047ee:	bf00      	nop
 		}
 	////////////////////////////////////////////////////////////////////////////////////
 	for (int i = 0; i < RX_BUFFER_SIZE; i++) {
 80047f0:	2300      	movs	r3, #0
 80047f2:	607b      	str	r3, [r7, #4]
 80047f4:	e024      	b.n	8004840 <main+0x14f8>
 80047f6:	bf00      	nop
 80047f8:	66666666 	.word	0x66666666
 80047fc:	40126666 	.word	0x40126666
 8004800:	2000037c 	.word	0x2000037c
 8004804:	20000380 	.word	0x20000380
 8004808:	447a0000 	.word	0x447a0000
 800480c:	408f4000 	.word	0x408f4000
 8004810:	2000036a 	.word	0x2000036a
 8004814:	2000036c 	.word	0x2000036c
 8004818:	20000154 	.word	0x20000154
 800481c:	20000368 	.word	0x20000368
 8004820:	20000378 	.word	0x20000378
 8004824:	2000036b 	.word	0x2000036b
 	    received[i] = rxBuffer[i]; // Kopiuj dane
 8004828:	4aa7      	ldr	r2, [pc, #668]	@ (8004ac8 <main+0x1780>)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4413      	add	r3, r2
 800482e:	7819      	ldrb	r1, [r3, #0]
 8004830:	4aa6      	ldr	r2, [pc, #664]	@ (8004acc <main+0x1784>)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4413      	add	r3, r2
 8004836:	460a      	mov	r2, r1
 8004838:	701a      	strb	r2, [r3, #0]
 	for (int i = 0; i < RX_BUFFER_SIZE; i++) {
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3301      	adds	r3, #1
 800483e:	607b      	str	r3, [r7, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b03      	cmp	r3, #3
 8004844:	ddf0      	ble.n	8004828 <main+0x14e0>
 	}
 	received[RX_BUFFER_SIZE] = '\0'; // Dodaj znak końca stringa
 8004846:	4ba1      	ldr	r3, [pc, #644]	@ (8004acc <main+0x1784>)
 8004848:	2200      	movs	r2, #0
 800484a:	711a      	strb	r2, [r3, #4]
 	//Wyłączenie światła w kuchnii
 	if (strcmp(received, "LK00") == 0 && strcmp(lastMessage, "LK00") != 0) {
 800484c:	49a0      	ldr	r1, [pc, #640]	@ (8004ad0 <main+0x1788>)
 800484e:	489f      	ldr	r0, [pc, #636]	@ (8004acc <main+0x1784>)
 8004850:	f7fb fcde 	bl	8000210 <strcmp>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d111      	bne.n	800487e <main+0x1536>
 800485a:	499d      	ldr	r1, [pc, #628]	@ (8004ad0 <main+0x1788>)
 800485c:	489d      	ldr	r0, [pc, #628]	@ (8004ad4 <main+0x178c>)
 800485e:	f7fb fcd7 	bl	8000210 <strcmp>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <main+0x1536>
 	    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8004868:	2108      	movs	r1, #8
 800486a:	489b      	ldr	r0, [pc, #620]	@ (8004ad8 <main+0x1790>)
 800486c:	f004 ffc2 	bl	80097f4 <HAL_TIM_PWM_Stop>
 	    strcpy(lastMessage, "LK00");
 8004870:	4b98      	ldr	r3, [pc, #608]	@ (8004ad4 <main+0x178c>)
 8004872:	4a97      	ldr	r2, [pc, #604]	@ (8004ad0 <main+0x1788>)
 8004874:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004878:	6018      	str	r0, [r3, #0]
 800487a:	3304      	adds	r3, #4
 800487c:	7019      	strb	r1, [r3, #0]
 	}
 	//Włączenie światła w kuchnii
 	if (strcmp(received, "LK01") == 0 && strcmp(lastMessage, "LK01") != 0) {
 800487e:	4997      	ldr	r1, [pc, #604]	@ (8004adc <main+0x1794>)
 8004880:	4892      	ldr	r0, [pc, #584]	@ (8004acc <main+0x1784>)
 8004882:	f7fb fcc5 	bl	8000210 <strcmp>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d116      	bne.n	80048ba <main+0x1572>
 800488c:	4993      	ldr	r1, [pc, #588]	@ (8004adc <main+0x1794>)
 800488e:	4891      	ldr	r0, [pc, #580]	@ (8004ad4 <main+0x178c>)
 8004890:	f7fb fcbe 	bl	8000210 <strcmp>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00f      	beq.n	80048ba <main+0x1572>
 	 	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, brightnessKitchen);
 800489a:	4b91      	ldr	r3, [pc, #580]	@ (8004ae0 <main+0x1798>)
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	4b8e      	ldr	r3, [pc, #568]	@ (8004ad8 <main+0x1790>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 	 	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80048a4:	2108      	movs	r1, #8
 80048a6:	488c      	ldr	r0, [pc, #560]	@ (8004ad8 <main+0x1790>)
 80048a8:	f004 feaa 	bl	8009600 <HAL_TIM_PWM_Start>
 	 	strcpy(lastMessage, "LK01");
 80048ac:	4b89      	ldr	r3, [pc, #548]	@ (8004ad4 <main+0x178c>)
 80048ae:	4a8b      	ldr	r2, [pc, #556]	@ (8004adc <main+0x1794>)
 80048b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80048b4:	6018      	str	r0, [r3, #0]
 80048b6:	3304      	adds	r3, #4
 80048b8:	7019      	strb	r1, [r3, #0]
 	}
 	//Wyłączenie światła w salonie
 	if (strcmp(received, "LL00") == 0 && strcmp(lastMessage, "LL00") != 0) {
 80048ba:	498a      	ldr	r1, [pc, #552]	@ (8004ae4 <main+0x179c>)
 80048bc:	4883      	ldr	r0, [pc, #524]	@ (8004acc <main+0x1784>)
 80048be:	f7fb fca7 	bl	8000210 <strcmp>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d111      	bne.n	80048ec <main+0x15a4>
 80048c8:	4986      	ldr	r1, [pc, #536]	@ (8004ae4 <main+0x179c>)
 80048ca:	4882      	ldr	r0, [pc, #520]	@ (8004ad4 <main+0x178c>)
 80048cc:	f7fb fca0 	bl	8000210 <strcmp>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <main+0x15a4>
 	 	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80048d6:	2100      	movs	r1, #0
 80048d8:	4883      	ldr	r0, [pc, #524]	@ (8004ae8 <main+0x17a0>)
 80048da:	f004 ff8b 	bl	80097f4 <HAL_TIM_PWM_Stop>
 	 	strcpy(lastMessage, "LL00");
 80048de:	4b7d      	ldr	r3, [pc, #500]	@ (8004ad4 <main+0x178c>)
 80048e0:	4a80      	ldr	r2, [pc, #512]	@ (8004ae4 <main+0x179c>)
 80048e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80048e6:	6018      	str	r0, [r3, #0]
 80048e8:	3304      	adds	r3, #4
 80048ea:	7019      	strb	r1, [r3, #0]
 	}
 	//Włączenie światła w salonie
 	if (strcmp(received, "LL01") == 0 && strcmp(lastMessage, "LL01") != 0) {
 80048ec:	497f      	ldr	r1, [pc, #508]	@ (8004aec <main+0x17a4>)
 80048ee:	4877      	ldr	r0, [pc, #476]	@ (8004acc <main+0x1784>)
 80048f0:	f7fb fc8e 	bl	8000210 <strcmp>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d116      	bne.n	8004928 <main+0x15e0>
 80048fa:	497c      	ldr	r1, [pc, #496]	@ (8004aec <main+0x17a4>)
 80048fc:	4875      	ldr	r0, [pc, #468]	@ (8004ad4 <main+0x178c>)
 80048fe:	f7fb fc87 	bl	8000210 <strcmp>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00f      	beq.n	8004928 <main+0x15e0>
 	 	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 8004908:	4b79      	ldr	r3, [pc, #484]	@ (8004af0 <main+0x17a8>)
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	4b76      	ldr	r3, [pc, #472]	@ (8004ae8 <main+0x17a0>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	635a      	str	r2, [r3, #52]	@ 0x34
 	 	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8004912:	2100      	movs	r1, #0
 8004914:	4874      	ldr	r0, [pc, #464]	@ (8004ae8 <main+0x17a0>)
 8004916:	f004 fe73 	bl	8009600 <HAL_TIM_PWM_Start>
 	 	strcpy(lastMessage, "LL01");
 800491a:	4b6e      	ldr	r3, [pc, #440]	@ (8004ad4 <main+0x178c>)
 800491c:	4a73      	ldr	r2, [pc, #460]	@ (8004aec <main+0x17a4>)
 800491e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004922:	6018      	str	r0, [r3, #0]
 8004924:	3304      	adds	r3, #4
 8004926:	7019      	strb	r1, [r3, #0]
 	}

 	if (strcmp(received, "LG00") == 0 && strcmp(lastMessage, "LG00") != 0) {
 8004928:	4972      	ldr	r1, [pc, #456]	@ (8004af4 <main+0x17ac>)
 800492a:	4868      	ldr	r0, [pc, #416]	@ (8004acc <main+0x1784>)
 800492c:	f7fb fc70 	bl	8000210 <strcmp>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d111      	bne.n	800495a <main+0x1612>
 8004936:	496f      	ldr	r1, [pc, #444]	@ (8004af4 <main+0x17ac>)
 8004938:	4866      	ldr	r0, [pc, #408]	@ (8004ad4 <main+0x178c>)
 800493a:	f7fb fc69 	bl	8000210 <strcmp>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <main+0x1612>
 	 	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8004944:	2100      	movs	r1, #0
 8004946:	486c      	ldr	r0, [pc, #432]	@ (8004af8 <main+0x17b0>)
 8004948:	f004 ff54 	bl	80097f4 <HAL_TIM_PWM_Stop>
 	 	strcpy(lastMessage, "LG00");
 800494c:	4b61      	ldr	r3, [pc, #388]	@ (8004ad4 <main+0x178c>)
 800494e:	4a69      	ldr	r2, [pc, #420]	@ (8004af4 <main+0x17ac>)
 8004950:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004954:	6018      	str	r0, [r3, #0]
 8004956:	3304      	adds	r3, #4
 8004958:	7019      	strb	r1, [r3, #0]
 	}

 	if (strcmp(received, "LG01") == 0 && strcmp(lastMessage, "LG01") != 0) {
 800495a:	4968      	ldr	r1, [pc, #416]	@ (8004afc <main+0x17b4>)
 800495c:	485b      	ldr	r0, [pc, #364]	@ (8004acc <main+0x1784>)
 800495e:	f7fb fc57 	bl	8000210 <strcmp>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d116      	bne.n	8004996 <main+0x164e>
 8004968:	4964      	ldr	r1, [pc, #400]	@ (8004afc <main+0x17b4>)
 800496a:	485a      	ldr	r0, [pc, #360]	@ (8004ad4 <main+0x178c>)
 800496c:	f7fb fc50 	bl	8000210 <strcmp>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00f      	beq.n	8004996 <main+0x164e>
 	 	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 8004976:	4b62      	ldr	r3, [pc, #392]	@ (8004b00 <main+0x17b8>)
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	4b5f      	ldr	r3, [pc, #380]	@ (8004af8 <main+0x17b0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	635a      	str	r2, [r3, #52]	@ 0x34
 	 	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004980:	2100      	movs	r1, #0
 8004982:	485d      	ldr	r0, [pc, #372]	@ (8004af8 <main+0x17b0>)
 8004984:	f004 fe3c 	bl	8009600 <HAL_TIM_PWM_Start>
 	 	strcpy(lastMessage, "LG01");
 8004988:	4b52      	ldr	r3, [pc, #328]	@ (8004ad4 <main+0x178c>)
 800498a:	4a5c      	ldr	r2, [pc, #368]	@ (8004afc <main+0x17b4>)
 800498c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004990:	6018      	str	r0, [r3, #0]
 8004992:	3304      	adds	r3, #4
 8004994:	7019      	strb	r1, [r3, #0]
 	}

 	if(rxBuffer[0]=='1')  //Suwak jasności kuchnia
 8004996:	4b4c      	ldr	r3, [pc, #304]	@ (8004ac8 <main+0x1780>)
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	2b31      	cmp	r3, #49	@ 0x31
 800499c:	d11d      	bne.n	80049da <main+0x1692>
 	{
 		brightnessKitchen = (received[1] - '0') * 1000
 800499e:	4b4b      	ldr	r3, [pc, #300]	@ (8004acc <main+0x1784>)
 80049a0:	785b      	ldrb	r3, [r3, #1]
 80049a2:	3b30      	subs	r3, #48	@ 0x30
 80049a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80049a8:	fb03 f202 	mul.w	r2, r3, r2
 		                  + (received[2] - '0') * 100
 80049ac:	4b47      	ldr	r3, [pc, #284]	@ (8004acc <main+0x1784>)
 80049ae:	789b      	ldrb	r3, [r3, #2]
 80049b0:	3b30      	subs	r3, #48	@ 0x30
 80049b2:	2164      	movs	r1, #100	@ 0x64
 80049b4:	fb01 f303 	mul.w	r3, r1, r3
 80049b8:	18d1      	adds	r1, r2, r3
 		                  + (received[3] - '0')* 10;
 80049ba:	4b44      	ldr	r3, [pc, #272]	@ (8004acc <main+0x1784>)
 80049bc:	78db      	ldrb	r3, [r3, #3]
 80049be:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	440b      	add	r3, r1
 		brightnessKitchen = (received[1] - '0') * 1000
 80049cc:	4a44      	ldr	r2, [pc, #272]	@ (8004ae0 <main+0x1798>)
 80049ce:	6013      	str	r3, [r2, #0]
 		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, brightnessKitchen);
 80049d0:	4b43      	ldr	r3, [pc, #268]	@ (8004ae0 <main+0x1798>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	4b40      	ldr	r3, [pc, #256]	@ (8004ad8 <main+0x1790>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	63da      	str	r2, [r3, #60]	@ 0x3c
 	}

 	if(received[0]=='2')	//Suwak jasności salon
 80049da:	4b3c      	ldr	r3, [pc, #240]	@ (8004acc <main+0x1784>)
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b32      	cmp	r3, #50	@ 0x32
 80049e0:	d11d      	bne.n	8004a1e <main+0x16d6>
 	{
 		brightnessLivingroom = (received[1] - '0') * 1000
 80049e2:	4b3a      	ldr	r3, [pc, #232]	@ (8004acc <main+0x1784>)
 80049e4:	785b      	ldrb	r3, [r3, #1]
 80049e6:	3b30      	subs	r3, #48	@ 0x30
 80049e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80049ec:	fb03 f202 	mul.w	r2, r3, r2
                 + (received[2] - '0') * 100
 80049f0:	4b36      	ldr	r3, [pc, #216]	@ (8004acc <main+0x1784>)
 80049f2:	789b      	ldrb	r3, [r3, #2]
 80049f4:	3b30      	subs	r3, #48	@ 0x30
 80049f6:	2164      	movs	r1, #100	@ 0x64
 80049f8:	fb01 f303 	mul.w	r3, r1, r3
 80049fc:	18d1      	adds	r1, r2, r3
                 + (received[3] - '0') * 10;
 80049fe:	4b33      	ldr	r3, [pc, #204]	@ (8004acc <main+0x1784>)
 8004a00:	78db      	ldrb	r3, [r3, #3]
 8004a02:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8004a06:	4613      	mov	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	440b      	add	r3, r1
 		brightnessLivingroom = (received[1] - '0') * 1000
 8004a10:	4a37      	ldr	r2, [pc, #220]	@ (8004af0 <main+0x17a8>)
 8004a12:	6013      	str	r3, [r2, #0]
 		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 8004a14:	4b36      	ldr	r3, [pc, #216]	@ (8004af0 <main+0x17a8>)
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	4b33      	ldr	r3, [pc, #204]	@ (8004ae8 <main+0x17a0>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	635a      	str	r2, [r3, #52]	@ 0x34
 	}
 	if(received[0]=='3')	//Suwak jasności garaż
 8004a1e:	4b2b      	ldr	r3, [pc, #172]	@ (8004acc <main+0x1784>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	2b33      	cmp	r3, #51	@ 0x33
 8004a24:	d11d      	bne.n	8004a62 <main+0x171a>
 	{
 		brightnessGarage = (received[1] - '0') * 1000
 8004a26:	4b29      	ldr	r3, [pc, #164]	@ (8004acc <main+0x1784>)
 8004a28:	785b      	ldrb	r3, [r3, #1]
 8004a2a:	3b30      	subs	r3, #48	@ 0x30
 8004a2c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004a30:	fb03 f202 	mul.w	r2, r3, r2
                 + (received[2] - '0') * 100
 8004a34:	4b25      	ldr	r3, [pc, #148]	@ (8004acc <main+0x1784>)
 8004a36:	789b      	ldrb	r3, [r3, #2]
 8004a38:	3b30      	subs	r3, #48	@ 0x30
 8004a3a:	2164      	movs	r1, #100	@ 0x64
 8004a3c:	fb01 f303 	mul.w	r3, r1, r3
 8004a40:	18d1      	adds	r1, r2, r3
                 + (received[3] - '0') * 10;
 8004a42:	4b22      	ldr	r3, [pc, #136]	@ (8004acc <main+0x1784>)
 8004a44:	78db      	ldrb	r3, [r3, #3]
 8004a46:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	440b      	add	r3, r1
 		brightnessGarage = (received[1] - '0') * 1000
 8004a54:	4a2a      	ldr	r2, [pc, #168]	@ (8004b00 <main+0x17b8>)
 8004a56:	6013      	str	r3, [r2, #0]
 		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 8004a58:	4b29      	ldr	r3, [pc, #164]	@ (8004b00 <main+0x17b8>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	4b26      	ldr	r3, [pc, #152]	@ (8004af8 <main+0x17b0>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	635a      	str	r2, [r3, #52]	@ 0x34
 	}
 	//Włączenie alarmu
 	if (strcmp(received, "AL01") == 0 && strcmp(lastMessage, "AL01") != 0)
 8004a62:	4928      	ldr	r1, [pc, #160]	@ (8004b04 <main+0x17bc>)
 8004a64:	4819      	ldr	r0, [pc, #100]	@ (8004acc <main+0x1784>)
 8004a66:	f7fb fbd3 	bl	8000210 <strcmp>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d112      	bne.n	8004a96 <main+0x174e>
 8004a70:	4924      	ldr	r1, [pc, #144]	@ (8004b04 <main+0x17bc>)
 8004a72:	4818      	ldr	r0, [pc, #96]	@ (8004ad4 <main+0x178c>)
 8004a74:	f7fb fbcc 	bl	8000210 <strcmp>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00b      	beq.n	8004a96 <main+0x174e>
 	{
 		alarm = true;
 8004a7e:	4b22      	ldr	r3, [pc, #136]	@ (8004b08 <main+0x17c0>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	701a      	strb	r2, [r3, #0]
		PIR_detected = false;
 8004a84:	4b21      	ldr	r3, [pc, #132]	@ (8004b0c <main+0x17c4>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	701a      	strb	r2, [r3, #0]
		alarmLED = false;
 8004a8a:	4b21      	ldr	r3, [pc, #132]	@ (8004b10 <main+0x17c8>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim2);
 8004a90:	4819      	ldr	r0, [pc, #100]	@ (8004af8 <main+0x17b0>)
 8004a92:	f004 fcad 	bl	80093f0 <HAL_TIM_Base_Start_IT>
 	}
 	//Wyłączenie alarmu
 	if (strcmp(received, "AL00") == 0 && strcmp(lastMessage, "AL00") != 0)
 8004a96:	491f      	ldr	r1, [pc, #124]	@ (8004b14 <main+0x17cc>)
 8004a98:	480c      	ldr	r0, [pc, #48]	@ (8004acc <main+0x1784>)
 8004a9a:	f7fb fbb9 	bl	8000210 <strcmp>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d140      	bne.n	8004b26 <main+0x17de>
 8004aa4:	491b      	ldr	r1, [pc, #108]	@ (8004b14 <main+0x17cc>)
 8004aa6:	480b      	ldr	r0, [pc, #44]	@ (8004ad4 <main+0x178c>)
 8004aa8:	f7fb fbb2 	bl	8000210 <strcmp>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d039      	beq.n	8004b26 <main+0x17de>
 	{
 		alarm = false;
 8004ab2:	4b15      	ldr	r3, [pc, #84]	@ (8004b08 <main+0x17c0>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	701a      	strb	r2, [r3, #0]
		PIR_detected = false;
 8004ab8:	4b14      	ldr	r3, [pc, #80]	@ (8004b0c <main+0x17c4>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	701a      	strb	r2, [r3, #0]
		alarmLED = false;
 8004abe:	4b14      	ldr	r3, [pc, #80]	@ (8004b10 <main+0x17c8>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	701a      	strb	r2, [r3, #0]
 8004ac4:	e028      	b.n	8004b18 <main+0x17d0>
 8004ac6:	bf00      	nop
 8004ac8:	200002e4 	.word	0x200002e4
 8004acc:	200002f0 	.word	0x200002f0
 8004ad0:	0800c5c8 	.word	0x0800c5c8
 8004ad4:	200002f8 	.word	0x200002f8
 8004ad8:	20000488 	.word	0x20000488
 8004adc:	0800c5d0 	.word	0x0800c5d0
 8004ae0:	20000130 	.word	0x20000130
 8004ae4:	0800c5d8 	.word	0x0800c5d8
 8004ae8:	200004d4 	.word	0x200004d4
 8004aec:	0800c5e0 	.word	0x0800c5e0
 8004af0:	2000012c 	.word	0x2000012c
 8004af4:	0800c5e8 	.word	0x0800c5e8
 8004af8:	2000043c 	.word	0x2000043c
 8004afc:	0800c5f0 	.word	0x0800c5f0
 8004b00:	20000134 	.word	0x20000134
 8004b04:	0800c5f8 	.word	0x0800c5f8
 8004b08:	200002fe 	.word	0x200002fe
 8004b0c:	20000303 	.word	0x20000303
 8004b10:	200002ff 	.word	0x200002ff
 8004b14:	0800c600 	.word	0x0800c600
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8004b18:	2108      	movs	r1, #8
 8004b1a:	48a9      	ldr	r0, [pc, #676]	@ (8004dc0 <main+0x1a78>)
 8004b1c:	f004 fe6a 	bl	80097f4 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop_IT(&htim2);
 8004b20:	48a7      	ldr	r0, [pc, #668]	@ (8004dc0 <main+0x1a78>)
 8004b22:	f004 fcdd 	bl	80094e0 <HAL_TIM_Base_Stop_IT>
 	}
 	//Zamknięcie drzwi
	if (strcmp(received, "DM00") == 0 && strcmp(lastMessage, "DM00") != 0)
 8004b26:	49a7      	ldr	r1, [pc, #668]	@ (8004dc4 <main+0x1a7c>)
 8004b28:	48a7      	ldr	r0, [pc, #668]	@ (8004dc8 <main+0x1a80>)
 8004b2a:	f7fb fb71 	bl	8000210 <strcmp>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10d      	bne.n	8004b50 <main+0x1808>
 8004b34:	49a3      	ldr	r1, [pc, #652]	@ (8004dc4 <main+0x1a7c>)
 8004b36:	48a5      	ldr	r0, [pc, #660]	@ (8004dcc <main+0x1a84>)
 8004b38:	f7fb fb6a 	bl	8000210 <strcmp>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d006      	beq.n	8004b50 <main+0x1808>
	{
		//Logika do napisanie

		strcpy(lastMessage, "DM00");
 8004b42:	4ba2      	ldr	r3, [pc, #648]	@ (8004dcc <main+0x1a84>)
 8004b44:	4a9f      	ldr	r2, [pc, #636]	@ (8004dc4 <main+0x1a7c>)
 8004b46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b4a:	6018      	str	r0, [r3, #0]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	7019      	strb	r1, [r3, #0]
	}

	//Otwarcie drzwi
	 if (strcmp(received, "DM01") == 0 && strcmp(lastMessage, "DM01") != 0)
 8004b50:	499f      	ldr	r1, [pc, #636]	@ (8004dd0 <main+0x1a88>)
 8004b52:	489d      	ldr	r0, [pc, #628]	@ (8004dc8 <main+0x1a80>)
 8004b54:	f7fb fb5c 	bl	8000210 <strcmp>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10d      	bne.n	8004b7a <main+0x1832>
 8004b5e:	499c      	ldr	r1, [pc, #624]	@ (8004dd0 <main+0x1a88>)
 8004b60:	489a      	ldr	r0, [pc, #616]	@ (8004dcc <main+0x1a84>)
 8004b62:	f7fb fb55 	bl	8000210 <strcmp>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d006      	beq.n	8004b7a <main+0x1832>
	 {
		//Logika do napisania

		strcpy(lastMessage, "DM01");
 8004b6c:	4b97      	ldr	r3, [pc, #604]	@ (8004dcc <main+0x1a84>)
 8004b6e:	4a98      	ldr	r2, [pc, #608]	@ (8004dd0 <main+0x1a88>)
 8004b70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b74:	6018      	str	r0, [r3, #0]
 8004b76:	3304      	adds	r3, #4
 8004b78:	7019      	strb	r1, [r3, #0]
	 }

	 //Zamknięcie bramy
	if (strcmp(received, "GM00") == 0 && strcmp(lastMessage, "GM00") != 0)
 8004b7a:	4996      	ldr	r1, [pc, #600]	@ (8004dd4 <main+0x1a8c>)
 8004b7c:	4892      	ldr	r0, [pc, #584]	@ (8004dc8 <main+0x1a80>)
 8004b7e:	f7fb fb47 	bl	8000210 <strcmp>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d11d      	bne.n	8004bc4 <main+0x187c>
 8004b88:	4992      	ldr	r1, [pc, #584]	@ (8004dd4 <main+0x1a8c>)
 8004b8a:	4890      	ldr	r0, [pc, #576]	@ (8004dcc <main+0x1a84>)
 8004b8c:	f7fb fb40 	bl	8000210 <strcmp>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d016      	beq.n	8004bc4 <main+0x187c>
	{
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 500);
 8004b96:	4b90      	ldr	r3, [pc, #576]	@ (8004dd8 <main+0x1a90>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004b9e:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_Delay(500);
 8004ba0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004ba4:	f001 f822 	bl	8005bec <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 0);
 8004ba8:	4b8b      	ldr	r3, [pc, #556]	@ (8004dd8 <main+0x1a90>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2200      	movs	r2, #0
 8004bae:	641a      	str	r2, [r3, #64]	@ 0x40
		garageGate= true;
 8004bb0:	4b8a      	ldr	r3, [pc, #552]	@ (8004ddc <main+0x1a94>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	701a      	strb	r2, [r3, #0]

		strcpy(lastMessage, "GM00");
 8004bb6:	4b85      	ldr	r3, [pc, #532]	@ (8004dcc <main+0x1a84>)
 8004bb8:	4a86      	ldr	r2, [pc, #536]	@ (8004dd4 <main+0x1a8c>)
 8004bba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004bbe:	6018      	str	r0, [r3, #0]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	7019      	strb	r1, [r3, #0]
	}

	//Otwarcie bramy
	if (strcmp(received, "GM01") == 0 && strcmp(lastMessage, "GM01") != 0)
 8004bc4:	4986      	ldr	r1, [pc, #536]	@ (8004de0 <main+0x1a98>)
 8004bc6:	4880      	ldr	r0, [pc, #512]	@ (8004dc8 <main+0x1a80>)
 8004bc8:	f7fb fb22 	bl	8000210 <strcmp>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d11d      	bne.n	8004c0e <main+0x18c6>
 8004bd2:	4983      	ldr	r1, [pc, #524]	@ (8004de0 <main+0x1a98>)
 8004bd4:	487d      	ldr	r0, [pc, #500]	@ (8004dcc <main+0x1a84>)
 8004bd6:	f7fb fb1b 	bl	8000210 <strcmp>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d016      	beq.n	8004c0e <main+0x18c6>
	{
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 2000);
 8004be0:	4b7d      	ldr	r3, [pc, #500]	@ (8004dd8 <main+0x1a90>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004be8:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_Delay(500);
 8004bea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004bee:	f000 fffd 	bl	8005bec <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 0);
 8004bf2:	4b79      	ldr	r3, [pc, #484]	@ (8004dd8 <main+0x1a90>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	641a      	str	r2, [r3, #64]	@ 0x40
		garageGate = false;
 8004bfa:	4b78      	ldr	r3, [pc, #480]	@ (8004ddc <main+0x1a94>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	701a      	strb	r2, [r3, #0]

		strcpy(lastMessage, "GM01");
 8004c00:	4b72      	ldr	r3, [pc, #456]	@ (8004dcc <main+0x1a84>)
 8004c02:	4a77      	ldr	r2, [pc, #476]	@ (8004de0 <main+0x1a98>)
 8004c04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c08:	6018      	str	r0, [r3, #0]
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	7019      	strb	r1, [r3, #0]
	}

	//Zamknięcie rolety w kuchnii
	if (strcmp(received, "SK00") == 0 && strcmp(lastMessage, "SK00") != 0)
 8004c0e:	4975      	ldr	r1, [pc, #468]	@ (8004de4 <main+0x1a9c>)
 8004c10:	486d      	ldr	r0, [pc, #436]	@ (8004dc8 <main+0x1a80>)
 8004c12:	f7fb fafd 	bl	8000210 <strcmp>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d11d      	bne.n	8004c58 <main+0x1910>
 8004c1c:	4971      	ldr	r1, [pc, #452]	@ (8004de4 <main+0x1a9c>)
 8004c1e:	486b      	ldr	r0, [pc, #428]	@ (8004dcc <main+0x1a84>)
 8004c20:	f7fb faf6 	bl	8000210 <strcmp>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d016      	beq.n	8004c58 <main+0x1910>
	{

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 500);
 8004c2a:	4b6f      	ldr	r3, [pc, #444]	@ (8004de8 <main+0x1aa0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004c32:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(500);
 8004c34:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004c38:	f000 ffd8 	bl	8005bec <HAL_Delay>
	   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 8004c3c:	4b6a      	ldr	r3, [pc, #424]	@ (8004de8 <main+0x1aa0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2200      	movs	r2, #0
 8004c42:	635a      	str	r2, [r3, #52]	@ 0x34
	   kitchenShutter = true;
 8004c44:	4b69      	ldr	r3, [pc, #420]	@ (8004dec <main+0x1aa4>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	701a      	strb	r2, [r3, #0]
		strcpy(lastMessage, "SK00");
 8004c4a:	4b60      	ldr	r3, [pc, #384]	@ (8004dcc <main+0x1a84>)
 8004c4c:	4a65      	ldr	r2, [pc, #404]	@ (8004de4 <main+0x1a9c>)
 8004c4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c52:	6018      	str	r0, [r3, #0]
 8004c54:	3304      	adds	r3, #4
 8004c56:	7019      	strb	r1, [r3, #0]
	}

	//Otwarcie rolety w kuchnii
	if (strcmp(received, "SK01") == 0 && strcmp(lastMessage, "SK01") != 0)
 8004c58:	4965      	ldr	r1, [pc, #404]	@ (8004df0 <main+0x1aa8>)
 8004c5a:	485b      	ldr	r0, [pc, #364]	@ (8004dc8 <main+0x1a80>)
 8004c5c:	f7fb fad8 	bl	8000210 <strcmp>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d11d      	bne.n	8004ca2 <main+0x195a>
 8004c66:	4962      	ldr	r1, [pc, #392]	@ (8004df0 <main+0x1aa8>)
 8004c68:	4858      	ldr	r0, [pc, #352]	@ (8004dcc <main+0x1a84>)
 8004c6a:	f7fb fad1 	bl	8000210 <strcmp>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d016      	beq.n	8004ca2 <main+0x195a>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 2000);
 8004c74:	4b5c      	ldr	r3, [pc, #368]	@ (8004de8 <main+0x1aa0>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004c7c:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(500);
 8004c7e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004c82:	f000 ffb3 	bl	8005bec <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8004c86:	4b58      	ldr	r3, [pc, #352]	@ (8004de8 <main+0x1aa0>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	635a      	str	r2, [r3, #52]	@ 0x34
		kitchenShutter = false;
 8004c8e:	4b57      	ldr	r3, [pc, #348]	@ (8004dec <main+0x1aa4>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	701a      	strb	r2, [r3, #0]
		strcpy(lastMessage, "SK01");
 8004c94:	4b4d      	ldr	r3, [pc, #308]	@ (8004dcc <main+0x1a84>)
 8004c96:	4a56      	ldr	r2, [pc, #344]	@ (8004df0 <main+0x1aa8>)
 8004c98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c9c:	6018      	str	r0, [r3, #0]
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	7019      	strb	r1, [r3, #0]
	}

	//Zamknięcie rolety w salonie
	if (strcmp(received, "SL00") == 0 && strcmp(lastMessage, "SL00") != 0)
 8004ca2:	4954      	ldr	r1, [pc, #336]	@ (8004df4 <main+0x1aac>)
 8004ca4:	4848      	ldr	r0, [pc, #288]	@ (8004dc8 <main+0x1a80>)
 8004ca6:	f7fb fab3 	bl	8000210 <strcmp>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d11d      	bne.n	8004cec <main+0x19a4>
 8004cb0:	4950      	ldr	r1, [pc, #320]	@ (8004df4 <main+0x1aac>)
 8004cb2:	4846      	ldr	r0, [pc, #280]	@ (8004dcc <main+0x1a84>)
 8004cb4:	f7fb faac 	bl	8000210 <strcmp>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d016      	beq.n	8004cec <main+0x19a4>
	{

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 500);
 8004cbe:	4b4a      	ldr	r3, [pc, #296]	@ (8004de8 <main+0x1aa0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004cc6:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(500);
 8004cc8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004ccc:	f000 ff8e 	bl	8005bec <HAL_Delay>
	   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 0);
 8004cd0:	4b45      	ldr	r3, [pc, #276]	@ (8004de8 <main+0x1aa0>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	639a      	str	r2, [r3, #56]	@ 0x38
	   livingroomShutter = true;
 8004cd8:	4b47      	ldr	r3, [pc, #284]	@ (8004df8 <main+0x1ab0>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	701a      	strb	r2, [r3, #0]
		strcpy(lastMessage, "SL00");
 8004cde:	4b3b      	ldr	r3, [pc, #236]	@ (8004dcc <main+0x1a84>)
 8004ce0:	4a44      	ldr	r2, [pc, #272]	@ (8004df4 <main+0x1aac>)
 8004ce2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ce6:	6018      	str	r0, [r3, #0]
 8004ce8:	3304      	adds	r3, #4
 8004cea:	7019      	strb	r1, [r3, #0]
	}

	//Otwarcie rolety w salonie
	if (strcmp(received, "SL01") == 0 && strcmp(lastMessage, "SL01") != 0)
 8004cec:	4943      	ldr	r1, [pc, #268]	@ (8004dfc <main+0x1ab4>)
 8004cee:	4836      	ldr	r0, [pc, #216]	@ (8004dc8 <main+0x1a80>)
 8004cf0:	f7fb fa8e 	bl	8000210 <strcmp>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d11d      	bne.n	8004d36 <main+0x19ee>
 8004cfa:	4940      	ldr	r1, [pc, #256]	@ (8004dfc <main+0x1ab4>)
 8004cfc:	4833      	ldr	r0, [pc, #204]	@ (8004dcc <main+0x1a84>)
 8004cfe:	f7fb fa87 	bl	8000210 <strcmp>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d016      	beq.n	8004d36 <main+0x19ee>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 2000);
 8004d08:	4b37      	ldr	r3, [pc, #220]	@ (8004de8 <main+0x1aa0>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004d10:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(500);
 8004d12:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004d16:	f000 ff69 	bl	8005bec <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 0);
 8004d1a:	4b33      	ldr	r3, [pc, #204]	@ (8004de8 <main+0x1aa0>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	639a      	str	r2, [r3, #56]	@ 0x38
		livingroomShutter = false;
 8004d22:	4b35      	ldr	r3, [pc, #212]	@ (8004df8 <main+0x1ab0>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	701a      	strb	r2, [r3, #0]
		strcpy(lastMessage, "SL01");
 8004d28:	4b28      	ldr	r3, [pc, #160]	@ (8004dcc <main+0x1a84>)
 8004d2a:	4a34      	ldr	r2, [pc, #208]	@ (8004dfc <main+0x1ab4>)
 8004d2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d30:	6018      	str	r0, [r3, #0]
 8004d32:	3304      	adds	r3, #4
 8004d34:	7019      	strb	r1, [r3, #0]
	}


	//Zamknięcie rolety w garażu
	if (strcmp(received, "SG00") == 0 && strcmp(lastMessage, "SG00") != 0)
 8004d36:	4932      	ldr	r1, [pc, #200]	@ (8004e00 <main+0x1ab8>)
 8004d38:	4823      	ldr	r0, [pc, #140]	@ (8004dc8 <main+0x1a80>)
 8004d3a:	f7fb fa69 	bl	8000210 <strcmp>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d11d      	bne.n	8004d80 <main+0x1a38>
 8004d44:	492e      	ldr	r1, [pc, #184]	@ (8004e00 <main+0x1ab8>)
 8004d46:	4821      	ldr	r0, [pc, #132]	@ (8004dcc <main+0x1a84>)
 8004d48:	f7fb fa62 	bl	8000210 <strcmp>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d016      	beq.n	8004d80 <main+0x1a38>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 500);
 8004d52:	4b25      	ldr	r3, [pc, #148]	@ (8004de8 <main+0x1aa0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004d5a:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_Delay(500);
 8004d5c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004d60:	f000 ff44 	bl	8005bec <HAL_Delay>
	    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 0);
 8004d64:	4b20      	ldr	r3, [pc, #128]	@ (8004de8 <main+0x1aa0>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	63da      	str	r2, [r3, #60]	@ 0x3c
	   	garageShutter= true;
 8004d6c:	4b25      	ldr	r3, [pc, #148]	@ (8004e04 <main+0x1abc>)
 8004d6e:	2201      	movs	r2, #1
 8004d70:	701a      	strb	r2, [r3, #0]
		strcpy(lastMessage, "SG00");
 8004d72:	4b16      	ldr	r3, [pc, #88]	@ (8004dcc <main+0x1a84>)
 8004d74:	4a22      	ldr	r2, [pc, #136]	@ (8004e00 <main+0x1ab8>)
 8004d76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d7a:	6018      	str	r0, [r3, #0]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	7019      	strb	r1, [r3, #0]
	}

	//Otwarcie rolety w garażu
	if (strcmp(received, "SG01") == 0 && strcmp(lastMessage, "SG01") != 0)
 8004d80:	4921      	ldr	r1, [pc, #132]	@ (8004e08 <main+0x1ac0>)
 8004d82:	4811      	ldr	r0, [pc, #68]	@ (8004dc8 <main+0x1a80>)
 8004d84:	f7fb fa44 	bl	8000210 <strcmp>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d144      	bne.n	8004e18 <main+0x1ad0>
 8004d8e:	491e      	ldr	r1, [pc, #120]	@ (8004e08 <main+0x1ac0>)
 8004d90:	480e      	ldr	r0, [pc, #56]	@ (8004dcc <main+0x1a84>)
 8004d92:	f7fb fa3d 	bl	8000210 <strcmp>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d03d      	beq.n	8004e18 <main+0x1ad0>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 2000);
 8004d9c:	4b12      	ldr	r3, [pc, #72]	@ (8004de8 <main+0x1aa0>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004da4:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_Delay(500);
 8004da6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004daa:	f000 ff1f 	bl	8005bec <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 0);
 8004dae:	4b0e      	ldr	r3, [pc, #56]	@ (8004de8 <main+0x1aa0>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2200      	movs	r2, #0
 8004db4:	63da      	str	r2, [r3, #60]	@ 0x3c
		garageShutter = false;
 8004db6:	4b13      	ldr	r3, [pc, #76]	@ (8004e04 <main+0x1abc>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	701a      	strb	r2, [r3, #0]
		strcpy(lastMessage, "SG01");
 8004dbc:	4b03      	ldr	r3, [pc, #12]	@ (8004dcc <main+0x1a84>)
 8004dbe:	e025      	b.n	8004e0c <main+0x1ac4>
 8004dc0:	2000043c 	.word	0x2000043c
 8004dc4:	0800c608 	.word	0x0800c608
 8004dc8:	200002f0 	.word	0x200002f0
 8004dcc:	200002f8 	.word	0x200002f8
 8004dd0:	0800c610 	.word	0x0800c610
 8004dd4:	0800c618 	.word	0x0800c618
 8004dd8:	20000488 	.word	0x20000488
 8004ddc:	20000307 	.word	0x20000307
 8004de0:	0800c620 	.word	0x0800c620
 8004de4:	0800c628 	.word	0x0800c628
 8004de8:	200003f0 	.word	0x200003f0
 8004dec:	20000304 	.word	0x20000304
 8004df0:	0800c630 	.word	0x0800c630
 8004df4:	0800c638 	.word	0x0800c638
 8004df8:	20000305 	.word	0x20000305
 8004dfc:	0800c640 	.word	0x0800c640
 8004e00:	0800c648 	.word	0x0800c648
 8004e04:	20000306 	.word	0x20000306
 8004e08:	0800c650 	.word	0x0800c650
 8004e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8004e8c <main+0x1b44>)
 8004e0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e12:	6018      	str	r0, [r3, #0]
 8004e14:	3304      	adds	r3, #4
 8004e16:	7019      	strb	r1, [r3, #0]
	}

	//Wyłączenie systemu zasilania
	if (strcmp(received, "PW00") == 0 && strcmp(lastMessage, "PW00") != 0)
 8004e18:	491d      	ldr	r1, [pc, #116]	@ (8004e90 <main+0x1b48>)
 8004e1a:	481e      	ldr	r0, [pc, #120]	@ (8004e94 <main+0x1b4c>)
 8004e1c:	f7fb f9f8 	bl	8000210 <strcmp>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10f      	bne.n	8004e46 <main+0x1afe>
 8004e26:	491a      	ldr	r1, [pc, #104]	@ (8004e90 <main+0x1b48>)
 8004e28:	481b      	ldr	r0, [pc, #108]	@ (8004e98 <main+0x1b50>)
 8004e2a:	f7fb f9f1 	bl	8000210 <strcmp>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <main+0x1afe>
	{
		Output_Off();
 8004e34:	f7fe f994 	bl	8003160 <Output_Off>

		strcpy(lastMessage, "PW00");
 8004e38:	4b17      	ldr	r3, [pc, #92]	@ (8004e98 <main+0x1b50>)
 8004e3a:	4a15      	ldr	r2, [pc, #84]	@ (8004e90 <main+0x1b48>)
 8004e3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e40:	6018      	str	r0, [r3, #0]
 8004e42:	3304      	adds	r3, #4
 8004e44:	7019      	strb	r1, [r3, #0]
	}

	//Włączenie systemu zasilania
	if (strcmp(received, "PW01") == 0 && strcmp(lastMessage, "PW01") != 0)
 8004e46:	4915      	ldr	r1, [pc, #84]	@ (8004e9c <main+0x1b54>)
 8004e48:	4812      	ldr	r0, [pc, #72]	@ (8004e94 <main+0x1b4c>)
 8004e4a:	f7fb f9e1 	bl	8000210 <strcmp>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10f      	bne.n	8004e74 <main+0x1b2c>
 8004e54:	4911      	ldr	r1, [pc, #68]	@ (8004e9c <main+0x1b54>)
 8004e56:	4810      	ldr	r0, [pc, #64]	@ (8004e98 <main+0x1b50>)
 8004e58:	f7fb f9da 	bl	8000210 <strcmp>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d008      	beq.n	8004e74 <main+0x1b2c>
	{
		Output_On();
 8004e62:	f7fe f98b 	bl	800317c <Output_On>

		strcpy(lastMessage, "PW01");
 8004e66:	4b0c      	ldr	r3, [pc, #48]	@ (8004e98 <main+0x1b50>)
 8004e68:	4a0c      	ldr	r2, [pc, #48]	@ (8004e9c <main+0x1b54>)
 8004e6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e6e:	6018      	str	r0, [r3, #0]
 8004e70:	3304      	adds	r3, #4
 8004e72:	7019      	strb	r1, [r3, #0]
	}

	//Odbieranie zadanej temperatury
	if(received[0]=='T' && received[1]=='M' )	//Suwak jasności garaż
 8004e74:	4b07      	ldr	r3, [pc, #28]	@ (8004e94 <main+0x1b4c>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b54      	cmp	r3, #84	@ 0x54
 	////////////////////////////////////////////////////////////////////////////////////
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

 	sendBluetoothData("70");
 8004e7a:	4809      	ldr	r0, [pc, #36]	@ (8004ea0 <main+0x1b58>)
 8004e7c:	f7fe f98c 	bl	8003198 <sendBluetoothData>
 	sendBluetoothData("23");
 8004e80:	4808      	ldr	r0, [pc, #32]	@ (8004ea4 <main+0x1b5c>)
 8004e82:	f7fe f989 	bl	8003198 <sendBluetoothData>
      BMP2_ReadData(&bmp2dev, &press, &temp);
 8004e86:	f7fe bab1 	b.w	80033ec <main+0xa4>
 8004e8a:	bf00      	nop
 8004e8c:	0800c650 	.word	0x0800c650
 8004e90:	0800c658 	.word	0x0800c658
 8004e94:	200002f0 	.word	0x200002f0
 8004e98:	200002f8 	.word	0x200002f8
 8004e9c:	0800c660 	.word	0x0800c660
 8004ea0:	0800c668 	.word	0x0800c668
 8004ea4:	0800c66c 	.word	0x0800c66c

08004ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b094      	sub	sp, #80	@ 0x50
 8004eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004eae:	f107 0320 	add.w	r3, r7, #32
 8004eb2:	2230      	movs	r2, #48	@ 0x30
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f006 fd38 	bl	800b92c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ebc:	f107 030c 	add.w	r3, r7, #12
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	605a      	str	r2, [r3, #4]
 8004ec6:	609a      	str	r2, [r3, #8]
 8004ec8:	60da      	str	r2, [r3, #12]
 8004eca:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004ecc:	f002 f8fa 	bl	80070c4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ed0:	4b27      	ldr	r3, [pc, #156]	@ (8004f70 <SystemClock_Config+0xc8>)
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed4:	4a26      	ldr	r2, [pc, #152]	@ (8004f70 <SystemClock_Config+0xc8>)
 8004ed6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eda:	6413      	str	r3, [r2, #64]	@ 0x40
 8004edc:	4b24      	ldr	r3, [pc, #144]	@ (8004f70 <SystemClock_Config+0xc8>)
 8004ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ee4:	60bb      	str	r3, [r7, #8]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004ee8:	4b22      	ldr	r3, [pc, #136]	@ (8004f74 <SystemClock_Config+0xcc>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004ef0:	4a20      	ldr	r2, [pc, #128]	@ (8004f74 <SystemClock_Config+0xcc>)
 8004ef2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8004f74 <SystemClock_Config+0xcc>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004f00:	607b      	str	r3, [r7, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004f04:	2302      	movs	r3, #2
 8004f06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004f0c:	2310      	movs	r3, #16
 8004f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f10:	2302      	movs	r3, #2
 8004f12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004f14:	2300      	movs	r3, #0
 8004f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004f18:	2308      	movs	r3, #8
 8004f1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8004f1c:	2348      	movs	r3, #72	@ 0x48
 8004f1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004f20:	2302      	movs	r3, #2
 8004f22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004f24:	2303      	movs	r3, #3
 8004f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f28:	f107 0320 	add.w	r3, r7, #32
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f002 f8d9 	bl	80070e4 <HAL_RCC_OscConfig>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004f38:	f000 f81e 	bl	8004f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f3c:	230f      	movs	r3, #15
 8004f3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f40:	2302      	movs	r3, #2
 8004f42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004f52:	f107 030c 	add.w	r3, r7, #12
 8004f56:	2102      	movs	r1, #2
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f002 fb67 	bl	800762c <HAL_RCC_ClockConfig>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004f64:	f000 f808 	bl	8004f78 <Error_Handler>
  }
}
 8004f68:	bf00      	nop
 8004f6a:	3750      	adds	r7, #80	@ 0x50
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40023800 	.word	0x40023800
 8004f74:	40007000 	.word	0x40007000

08004f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f7c:	b672      	cpsid	i
}
 8004f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004f80:	bf00      	nop
 8004f82:	e7fd      	b.n	8004f80 <Error_Handler+0x8>

08004f84 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8004f88:	4b1b      	ldr	r3, [pc, #108]	@ (8004ff8 <MX_SPI4_Init+0x74>)
 8004f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8004ffc <MX_SPI4_Init+0x78>)
 8004f8c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8004f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff8 <MX_SPI4_Init+0x74>)
 8004f90:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004f94:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8004f96:	4b18      	ldr	r3, [pc, #96]	@ (8004ff8 <MX_SPI4_Init+0x74>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f9c:	4b16      	ldr	r3, [pc, #88]	@ (8004ff8 <MX_SPI4_Init+0x74>)
 8004f9e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004fa2:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004fa4:	4b14      	ldr	r3, [pc, #80]	@ (8004ff8 <MX_SPI4_Init+0x74>)
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004faa:	4b13      	ldr	r3, [pc, #76]	@ (8004ff8 <MX_SPI4_Init+0x74>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004fb0:	4b11      	ldr	r3, [pc, #68]	@ (8004ff8 <MX_SPI4_Init+0x74>)
 8004fb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fb6:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8004ff8 <MX_SPI4_Init+0x74>)
 8004fba:	2210      	movs	r2, #16
 8004fbc:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8004ff8 <MX_SPI4_Init+0x74>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff8 <MX_SPI4_Init+0x74>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fca:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff8 <MX_SPI4_Init+0x74>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8004fd0:	4b09      	ldr	r3, [pc, #36]	@ (8004ff8 <MX_SPI4_Init+0x74>)
 8004fd2:	2207      	movs	r2, #7
 8004fd4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004fd6:	4b08      	ldr	r3, [pc, #32]	@ (8004ff8 <MX_SPI4_Init+0x74>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004fdc:	4b06      	ldr	r3, [pc, #24]	@ (8004ff8 <MX_SPI4_Init+0x74>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004fe2:	4805      	ldr	r0, [pc, #20]	@ (8004ff8 <MX_SPI4_Init+0x74>)
 8004fe4:	f003 f938 	bl	8008258 <HAL_SPI_Init>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8004fee:	f7ff ffc3 	bl	8004f78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8004ff2:	bf00      	nop
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20000388 	.word	0x20000388
 8004ffc:	40013400 	.word	0x40013400

08005000 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08a      	sub	sp, #40	@ 0x28
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005008:	f107 0314 	add.w	r3, r7, #20
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	605a      	str	r2, [r3, #4]
 8005012:	609a      	str	r2, [r3, #8]
 8005014:	60da      	str	r2, [r3, #12]
 8005016:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a1b      	ldr	r2, [pc, #108]	@ (800508c <HAL_SPI_MspInit+0x8c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d12f      	bne.n	8005082 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005022:	4b1b      	ldr	r3, [pc, #108]	@ (8005090 <HAL_SPI_MspInit+0x90>)
 8005024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005026:	4a1a      	ldr	r2, [pc, #104]	@ (8005090 <HAL_SPI_MspInit+0x90>)
 8005028:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800502c:	6453      	str	r3, [r2, #68]	@ 0x44
 800502e:	4b18      	ldr	r3, [pc, #96]	@ (8005090 <HAL_SPI_MspInit+0x90>)
 8005030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005032:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800503a:	4b15      	ldr	r3, [pc, #84]	@ (8005090 <HAL_SPI_MspInit+0x90>)
 800503c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800503e:	4a14      	ldr	r2, [pc, #80]	@ (8005090 <HAL_SPI_MspInit+0x90>)
 8005040:	f043 0310 	orr.w	r3, r3, #16
 8005044:	6313      	str	r3, [r2, #48]	@ 0x30
 8005046:	4b12      	ldr	r3, [pc, #72]	@ (8005090 <HAL_SPI_MspInit+0x90>)
 8005048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800504a:	f003 0310 	and.w	r3, r3, #16
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = SPI4_SCK_temperature_Pin|SPI4_MISO_temperature_Pin|SPI4_MOSI_temperature_Pin;
 8005052:	2364      	movs	r3, #100	@ 0x64
 8005054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005056:	2302      	movs	r3, #2
 8005058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800505a:	2300      	movs	r3, #0
 800505c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800505e:	2303      	movs	r3, #3
 8005060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8005062:	2305      	movs	r3, #5
 8005064:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005066:	f107 0314 	add.w	r3, r7, #20
 800506a:	4619      	mov	r1, r3
 800506c:	4809      	ldr	r0, [pc, #36]	@ (8005094 <HAL_SPI_MspInit+0x94>)
 800506e:	f000 ff15 	bl	8005e9c <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8005072:	2200      	movs	r2, #0
 8005074:	2100      	movs	r1, #0
 8005076:	2054      	movs	r0, #84	@ 0x54
 8005078:	f000 feb7 	bl	8005dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800507c:	2054      	movs	r0, #84	@ 0x54
 800507e:	f000 fed0 	bl	8005e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8005082:	bf00      	nop
 8005084:	3728      	adds	r7, #40	@ 0x28
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40013400 	.word	0x40013400
 8005090:	40023800 	.word	0x40023800
 8005094:	40021000 	.word	0x40021000

08005098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800509e:	4b0f      	ldr	r3, [pc, #60]	@ (80050dc <HAL_MspInit+0x44>)
 80050a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a2:	4a0e      	ldr	r2, [pc, #56]	@ (80050dc <HAL_MspInit+0x44>)
 80050a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80050aa:	4b0c      	ldr	r3, [pc, #48]	@ (80050dc <HAL_MspInit+0x44>)
 80050ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050b2:	607b      	str	r3, [r7, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050b6:	4b09      	ldr	r3, [pc, #36]	@ (80050dc <HAL_MspInit+0x44>)
 80050b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ba:	4a08      	ldr	r2, [pc, #32]	@ (80050dc <HAL_MspInit+0x44>)
 80050bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80050c2:	4b06      	ldr	r3, [pc, #24]	@ (80050dc <HAL_MspInit+0x44>)
 80050c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050ca:	603b      	str	r3, [r7, #0]
 80050cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40023800 	.word	0x40023800

080050e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80050e4:	bf00      	nop
 80050e6:	e7fd      	b.n	80050e4 <NMI_Handler+0x4>

080050e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050ec:	bf00      	nop
 80050ee:	e7fd      	b.n	80050ec <HardFault_Handler+0x4>

080050f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050f4:	bf00      	nop
 80050f6:	e7fd      	b.n	80050f4 <MemManage_Handler+0x4>

080050f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050fc:	bf00      	nop
 80050fe:	e7fd      	b.n	80050fc <BusFault_Handler+0x4>

08005100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005104:	bf00      	nop
 8005106:	e7fd      	b.n	8005104 <UsageFault_Handler+0x4>

08005108 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800510c:	bf00      	nop
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005116:	b480      	push	{r7}
 8005118:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800511a:	bf00      	nop
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005128:	bf00      	nop
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005136:	f000 fd39 	bl	8005bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800513a:	bf00      	nop
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005144:	4802      	ldr	r0, [pc, #8]	@ (8005150 <TIM1_CC_IRQHandler+0x10>)
 8005146:	f004 fbd5 	bl	80098f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800514a:	bf00      	nop
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	200003f0 	.word	0x200003f0

08005154 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005158:	4802      	ldr	r0, [pc, #8]	@ (8005164 <TIM2_IRQHandler+0x10>)
 800515a:	f004 fbcb 	bl	80098f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800515e:	bf00      	nop
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	2000043c 	.word	0x2000043c

08005168 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800516c:	4802      	ldr	r0, [pc, #8]	@ (8005178 <TIM3_IRQHandler+0x10>)
 800516e:	f004 fbc1 	bl	80098f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005172:	bf00      	nop
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20000488 	.word	0x20000488

0800517c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005180:	4802      	ldr	r0, [pc, #8]	@ (800518c <TIM4_IRQHandler+0x10>)
 8005182:	f004 fbb7 	bl	80098f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005186:	bf00      	nop
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	200004d4 	.word	0x200004d4

08005190 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8005194:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005198:	f001 f878 	bl	800628c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800519c:	bf00      	nop
 800519e:	bd80      	pop	{r7, pc}

080051a0 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80051a4:	4802      	ldr	r0, [pc, #8]	@ (80051b0 <SPI4_IRQHandler+0x10>)
 80051a6:	f003 fdb3 	bl	8008d10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80051aa:	bf00      	nop
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	20000388 	.word	0x20000388

080051b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051bc:	4a14      	ldr	r2, [pc, #80]	@ (8005210 <_sbrk+0x5c>)
 80051be:	4b15      	ldr	r3, [pc, #84]	@ (8005214 <_sbrk+0x60>)
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051c8:	4b13      	ldr	r3, [pc, #76]	@ (8005218 <_sbrk+0x64>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d102      	bne.n	80051d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051d0:	4b11      	ldr	r3, [pc, #68]	@ (8005218 <_sbrk+0x64>)
 80051d2:	4a12      	ldr	r2, [pc, #72]	@ (800521c <_sbrk+0x68>)
 80051d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051d6:	4b10      	ldr	r3, [pc, #64]	@ (8005218 <_sbrk+0x64>)
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4413      	add	r3, r2
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d207      	bcs.n	80051f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051e4:	f006 fbaa 	bl	800b93c <__errno>
 80051e8:	4603      	mov	r3, r0
 80051ea:	220c      	movs	r2, #12
 80051ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80051ee:	f04f 33ff 	mov.w	r3, #4294967295
 80051f2:	e009      	b.n	8005208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051f4:	4b08      	ldr	r3, [pc, #32]	@ (8005218 <_sbrk+0x64>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051fa:	4b07      	ldr	r3, [pc, #28]	@ (8005218 <_sbrk+0x64>)
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4413      	add	r3, r2
 8005202:	4a05      	ldr	r2, [pc, #20]	@ (8005218 <_sbrk+0x64>)
 8005204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005206:	68fb      	ldr	r3, [r7, #12]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	20050000 	.word	0x20050000
 8005214:	00000400 	.word	0x00000400
 8005218:	200003ec 	.word	0x200003ec
 800521c:	200006f8 	.word	0x200006f8

08005220 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005224:	4b06      	ldr	r3, [pc, #24]	@ (8005240 <SystemInit+0x20>)
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522a:	4a05      	ldr	r2, [pc, #20]	@ (8005240 <SystemInit+0x20>)
 800522c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005230:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005234:	bf00      	nop
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	e000ed00 	.word	0xe000ed00

08005244 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b09a      	sub	sp, #104	@ 0x68
 8005248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800524a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	605a      	str	r2, [r3, #4]
 8005254:	609a      	str	r2, [r3, #8]
 8005256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005258:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	605a      	str	r2, [r3, #4]
 8005262:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005264:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	605a      	str	r2, [r3, #4]
 800526e:	609a      	str	r2, [r3, #8]
 8005270:	60da      	str	r2, [r3, #12]
 8005272:	611a      	str	r2, [r3, #16]
 8005274:	615a      	str	r2, [r3, #20]
 8005276:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005278:	1d3b      	adds	r3, r7, #4
 800527a:	222c      	movs	r2, #44	@ 0x2c
 800527c:	2100      	movs	r1, #0
 800527e:	4618      	mov	r0, r3
 8005280:	f006 fb54 	bl	800b92c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005284:	4b55      	ldr	r3, [pc, #340]	@ (80053dc <MX_TIM1_Init+0x198>)
 8005286:	4a56      	ldr	r2, [pc, #344]	@ (80053e0 <MX_TIM1_Init+0x19c>)
 8005288:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800528a:	4b54      	ldr	r3, [pc, #336]	@ (80053dc <MX_TIM1_Init+0x198>)
 800528c:	2247      	movs	r2, #71	@ 0x47
 800528e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005290:	4b52      	ldr	r3, [pc, #328]	@ (80053dc <MX_TIM1_Init+0x198>)
 8005292:	2200      	movs	r2, #0
 8005294:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8005296:	4b51      	ldr	r3, [pc, #324]	@ (80053dc <MX_TIM1_Init+0x198>)
 8005298:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800529c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800529e:	4b4f      	ldr	r3, [pc, #316]	@ (80053dc <MX_TIM1_Init+0x198>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80052a4:	4b4d      	ldr	r3, [pc, #308]	@ (80053dc <MX_TIM1_Init+0x198>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052aa:	4b4c      	ldr	r3, [pc, #304]	@ (80053dc <MX_TIM1_Init+0x198>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80052b0:	484a      	ldr	r0, [pc, #296]	@ (80053dc <MX_TIM1_Init+0x198>)
 80052b2:	f004 f845 	bl	8009340 <HAL_TIM_Base_Init>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80052bc:	f7ff fe5c 	bl	8004f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80052c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80052c6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80052ca:	4619      	mov	r1, r3
 80052cc:	4843      	ldr	r0, [pc, #268]	@ (80053dc <MX_TIM1_Init+0x198>)
 80052ce:	f004 fd45 	bl	8009d5c <HAL_TIM_ConfigClockSource>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80052d8:	f7ff fe4e 	bl	8004f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80052dc:	483f      	ldr	r0, [pc, #252]	@ (80053dc <MX_TIM1_Init+0x198>)
 80052de:	f004 f92e 	bl	800953e <HAL_TIM_PWM_Init>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80052e8:	f7ff fe46 	bl	8004f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052ec:	2300      	movs	r3, #0
 80052ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80052f0:	2300      	movs	r3, #0
 80052f2:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052f4:	2300      	movs	r3, #0
 80052f6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80052f8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80052fc:	4619      	mov	r1, r3
 80052fe:	4837      	ldr	r0, [pc, #220]	@ (80053dc <MX_TIM1_Init+0x198>)
 8005300:	f005 f9dc 	bl	800a6bc <HAL_TIMEx_MasterConfigSynchronization>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800530a:	f7ff fe35 	bl	8004f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800530e:	2360      	movs	r3, #96	@ 0x60
 8005310:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8005312:	2300      	movs	r3, #0
 8005314:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005316:	2300      	movs	r3, #0
 8005318:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800531a:	2300      	movs	r3, #0
 800531c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800531e:	2300      	movs	r3, #0
 8005320:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005322:	2300      	movs	r3, #0
 8005324:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005326:	2300      	movs	r3, #0
 8005328:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800532a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800532e:	2200      	movs	r2, #0
 8005330:	4619      	mov	r1, r3
 8005332:	482a      	ldr	r0, [pc, #168]	@ (80053dc <MX_TIM1_Init+0x198>)
 8005334:	f004 fbfe 	bl	8009b34 <HAL_TIM_PWM_ConfigChannel>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800533e:	f7ff fe1b 	bl	8004f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005342:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005346:	2204      	movs	r2, #4
 8005348:	4619      	mov	r1, r3
 800534a:	4824      	ldr	r0, [pc, #144]	@ (80053dc <MX_TIM1_Init+0x198>)
 800534c:	f004 fbf2 	bl	8009b34 <HAL_TIM_PWM_ConfigChannel>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8005356:	f7ff fe0f 	bl	8004f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800535a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800535e:	2208      	movs	r2, #8
 8005360:	4619      	mov	r1, r3
 8005362:	481e      	ldr	r0, [pc, #120]	@ (80053dc <MX_TIM1_Init+0x198>)
 8005364:	f004 fbe6 	bl	8009b34 <HAL_TIM_PWM_ConfigChannel>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800536e:	f7ff fe03 	bl	8004f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005372:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005376:	220c      	movs	r2, #12
 8005378:	4619      	mov	r1, r3
 800537a:	4818      	ldr	r0, [pc, #96]	@ (80053dc <MX_TIM1_Init+0x198>)
 800537c:	f004 fbda 	bl	8009b34 <HAL_TIM_PWM_ConfigChannel>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8005386:	f7ff fdf7 	bl	8004f78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800538a:	2300      	movs	r3, #0
 800538c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800538e:	2300      	movs	r3, #0
 8005390:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800539a:	2300      	movs	r3, #0
 800539c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800539e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80053a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80053a4:	2300      	movs	r3, #0
 80053a6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80053a8:	2300      	movs	r3, #0
 80053aa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80053ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053b0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80053b2:	2300      	movs	r3, #0
 80053b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80053b6:	2300      	movs	r3, #0
 80053b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80053ba:	1d3b      	adds	r3, r7, #4
 80053bc:	4619      	mov	r1, r3
 80053be:	4807      	ldr	r0, [pc, #28]	@ (80053dc <MX_TIM1_Init+0x198>)
 80053c0:	f005 fa0a 	bl	800a7d8 <HAL_TIMEx_ConfigBreakDeadTime>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 80053ca:	f7ff fdd5 	bl	8004f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80053ce:	4803      	ldr	r0, [pc, #12]	@ (80053dc <MX_TIM1_Init+0x198>)
 80053d0:	f000 fa10 	bl	80057f4 <HAL_TIM_MspPostInit>

}
 80053d4:	bf00      	nop
 80053d6:	3768      	adds	r7, #104	@ 0x68
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	200003f0 	.word	0x200003f0
 80053e0:	40010000 	.word	0x40010000

080053e4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08e      	sub	sp, #56	@ 0x38
 80053e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	605a      	str	r2, [r3, #4]
 80053f4:	609a      	str	r2, [r3, #8]
 80053f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053f8:	f107 031c 	add.w	r3, r7, #28
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	605a      	str	r2, [r3, #4]
 8005402:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005404:	463b      	mov	r3, r7
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	605a      	str	r2, [r3, #4]
 800540c:	609a      	str	r2, [r3, #8]
 800540e:	60da      	str	r2, [r3, #12]
 8005410:	611a      	str	r2, [r3, #16]
 8005412:	615a      	str	r2, [r3, #20]
 8005414:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005416:	4b3b      	ldr	r3, [pc, #236]	@ (8005504 <MX_TIM2_Init+0x120>)
 8005418:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800541c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800541e:	4b39      	ldr	r3, [pc, #228]	@ (8005504 <MX_TIM2_Init+0x120>)
 8005420:	2247      	movs	r2, #71	@ 0x47
 8005422:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005424:	4b37      	ldr	r3, [pc, #220]	@ (8005504 <MX_TIM2_Init+0x120>)
 8005426:	2200      	movs	r2, #0
 8005428:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800542a:	4b36      	ldr	r3, [pc, #216]	@ (8005504 <MX_TIM2_Init+0x120>)
 800542c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005430:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005432:	4b34      	ldr	r3, [pc, #208]	@ (8005504 <MX_TIM2_Init+0x120>)
 8005434:	2200      	movs	r2, #0
 8005436:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005438:	4b32      	ldr	r3, [pc, #200]	@ (8005504 <MX_TIM2_Init+0x120>)
 800543a:	2200      	movs	r2, #0
 800543c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800543e:	4831      	ldr	r0, [pc, #196]	@ (8005504 <MX_TIM2_Init+0x120>)
 8005440:	f003 ff7e 	bl	8009340 <HAL_TIM_Base_Init>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800544a:	f7ff fd95 	bl	8004f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800544e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005452:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005454:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005458:	4619      	mov	r1, r3
 800545a:	482a      	ldr	r0, [pc, #168]	@ (8005504 <MX_TIM2_Init+0x120>)
 800545c:	f004 fc7e 	bl	8009d5c <HAL_TIM_ConfigClockSource>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8005466:	f7ff fd87 	bl	8004f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800546a:	4826      	ldr	r0, [pc, #152]	@ (8005504 <MX_TIM2_Init+0x120>)
 800546c:	f004 f867 	bl	800953e <HAL_TIM_PWM_Init>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8005476:	f7ff fd7f 	bl	8004f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800547a:	2300      	movs	r3, #0
 800547c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800547e:	2300      	movs	r3, #0
 8005480:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005482:	f107 031c 	add.w	r3, r7, #28
 8005486:	4619      	mov	r1, r3
 8005488:	481e      	ldr	r0, [pc, #120]	@ (8005504 <MX_TIM2_Init+0x120>)
 800548a:	f005 f917 	bl	800a6bc <HAL_TIMEx_MasterConfigSynchronization>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d001      	beq.n	8005498 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005494:	f7ff fd70 	bl	8004f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005498:	2360      	movs	r3, #96	@ 0x60
 800549a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 800549c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80054a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80054a2:	2300      	movs	r3, #0
 80054a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80054a6:	2300      	movs	r3, #0
 80054a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80054aa:	463b      	mov	r3, r7
 80054ac:	2200      	movs	r2, #0
 80054ae:	4619      	mov	r1, r3
 80054b0:	4814      	ldr	r0, [pc, #80]	@ (8005504 <MX_TIM2_Init+0x120>)
 80054b2:	f004 fb3f 	bl	8009b34 <HAL_TIM_PWM_ConfigChannel>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d001      	beq.n	80054c0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80054bc:	f7ff fd5c 	bl	8004f78 <Error_Handler>
  }
  sConfigOC.Pulse = 10;
 80054c0:	230a      	movs	r3, #10
 80054c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80054c4:	463b      	mov	r3, r7
 80054c6:	2208      	movs	r2, #8
 80054c8:	4619      	mov	r1, r3
 80054ca:	480e      	ldr	r0, [pc, #56]	@ (8005504 <MX_TIM2_Init+0x120>)
 80054cc:	f004 fb32 	bl	8009b34 <HAL_TIM_PWM_ConfigChannel>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 80054d6:	f7ff fd4f 	bl	8004f78 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80054da:	2300      	movs	r3, #0
 80054dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80054de:	463b      	mov	r3, r7
 80054e0:	220c      	movs	r2, #12
 80054e2:	4619      	mov	r1, r3
 80054e4:	4807      	ldr	r0, [pc, #28]	@ (8005504 <MX_TIM2_Init+0x120>)
 80054e6:	f004 fb25 	bl	8009b34 <HAL_TIM_PWM_ConfigChannel>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 80054f0:	f7ff fd42 	bl	8004f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80054f4:	4803      	ldr	r0, [pc, #12]	@ (8005504 <MX_TIM2_Init+0x120>)
 80054f6:	f000 f97d 	bl	80057f4 <HAL_TIM_MspPostInit>

}
 80054fa:	bf00      	nop
 80054fc:	3738      	adds	r7, #56	@ 0x38
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	2000043c 	.word	0x2000043c

08005508 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08e      	sub	sp, #56	@ 0x38
 800550c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800550e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	605a      	str	r2, [r3, #4]
 8005518:	609a      	str	r2, [r3, #8]
 800551a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800551c:	f107 031c 	add.w	r3, r7, #28
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	605a      	str	r2, [r3, #4]
 8005526:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005528:	463b      	mov	r3, r7
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	605a      	str	r2, [r3, #4]
 8005530:	609a      	str	r2, [r3, #8]
 8005532:	60da      	str	r2, [r3, #12]
 8005534:	611a      	str	r2, [r3, #16]
 8005536:	615a      	str	r2, [r3, #20]
 8005538:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800553a:	4b2d      	ldr	r3, [pc, #180]	@ (80055f0 <MX_TIM3_Init+0xe8>)
 800553c:	4a2d      	ldr	r2, [pc, #180]	@ (80055f4 <MX_TIM3_Init+0xec>)
 800553e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8005540:	4b2b      	ldr	r3, [pc, #172]	@ (80055f0 <MX_TIM3_Init+0xe8>)
 8005542:	2247      	movs	r2, #71	@ 0x47
 8005544:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005546:	4b2a      	ldr	r3, [pc, #168]	@ (80055f0 <MX_TIM3_Init+0xe8>)
 8005548:	2200      	movs	r2, #0
 800554a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 800554c:	4b28      	ldr	r3, [pc, #160]	@ (80055f0 <MX_TIM3_Init+0xe8>)
 800554e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8005552:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005554:	4b26      	ldr	r3, [pc, #152]	@ (80055f0 <MX_TIM3_Init+0xe8>)
 8005556:	2200      	movs	r2, #0
 8005558:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800555a:	4b25      	ldr	r3, [pc, #148]	@ (80055f0 <MX_TIM3_Init+0xe8>)
 800555c:	2200      	movs	r2, #0
 800555e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005560:	4823      	ldr	r0, [pc, #140]	@ (80055f0 <MX_TIM3_Init+0xe8>)
 8005562:	f003 feed 	bl	8009340 <HAL_TIM_Base_Init>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800556c:	f7ff fd04 	bl	8004f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005570:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005574:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005576:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800557a:	4619      	mov	r1, r3
 800557c:	481c      	ldr	r0, [pc, #112]	@ (80055f0 <MX_TIM3_Init+0xe8>)
 800557e:	f004 fbed 	bl	8009d5c <HAL_TIM_ConfigClockSource>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005588:	f7ff fcf6 	bl	8004f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800558c:	4818      	ldr	r0, [pc, #96]	@ (80055f0 <MX_TIM3_Init+0xe8>)
 800558e:	f003 ffd6 	bl	800953e <HAL_TIM_PWM_Init>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005598:	f7ff fcee 	bl	8004f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800559c:	2300      	movs	r3, #0
 800559e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055a0:	2300      	movs	r3, #0
 80055a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80055a4:	f107 031c 	add.w	r3, r7, #28
 80055a8:	4619      	mov	r1, r3
 80055aa:	4811      	ldr	r0, [pc, #68]	@ (80055f0 <MX_TIM3_Init+0xe8>)
 80055ac:	f005 f886 	bl	800a6bc <HAL_TIMEx_MasterConfigSynchronization>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80055b6:	f7ff fcdf 	bl	8004f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055ba:	2360      	movs	r3, #96	@ 0x60
 80055bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80055be:	2300      	movs	r3, #0
 80055c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80055c2:	2300      	movs	r3, #0
 80055c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80055c6:	2300      	movs	r3, #0
 80055c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80055ca:	463b      	mov	r3, r7
 80055cc:	220c      	movs	r2, #12
 80055ce:	4619      	mov	r1, r3
 80055d0:	4807      	ldr	r0, [pc, #28]	@ (80055f0 <MX_TIM3_Init+0xe8>)
 80055d2:	f004 faaf 	bl	8009b34 <HAL_TIM_PWM_ConfigChannel>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80055dc:	f7ff fccc 	bl	8004f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80055e0:	4803      	ldr	r0, [pc, #12]	@ (80055f0 <MX_TIM3_Init+0xe8>)
 80055e2:	f000 f907 	bl	80057f4 <HAL_TIM_MspPostInit>

}
 80055e6:	bf00      	nop
 80055e8:	3738      	adds	r7, #56	@ 0x38
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20000488 	.word	0x20000488
 80055f4:	40000400 	.word	0x40000400

080055f8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08e      	sub	sp, #56	@ 0x38
 80055fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80055fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	605a      	str	r2, [r3, #4]
 8005608:	609a      	str	r2, [r3, #8]
 800560a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800560c:	f107 031c 	add.w	r3, r7, #28
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	605a      	str	r2, [r3, #4]
 8005616:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005618:	463b      	mov	r3, r7
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	605a      	str	r2, [r3, #4]
 8005620:	609a      	str	r2, [r3, #8]
 8005622:	60da      	str	r2, [r3, #12]
 8005624:	611a      	str	r2, [r3, #16]
 8005626:	615a      	str	r2, [r3, #20]
 8005628:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800562a:	4b34      	ldr	r3, [pc, #208]	@ (80056fc <MX_TIM4_Init+0x104>)
 800562c:	4a34      	ldr	r2, [pc, #208]	@ (8005700 <MX_TIM4_Init+0x108>)
 800562e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8005630:	4b32      	ldr	r3, [pc, #200]	@ (80056fc <MX_TIM4_Init+0x104>)
 8005632:	2247      	movs	r2, #71	@ 0x47
 8005634:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005636:	4b31      	ldr	r3, [pc, #196]	@ (80056fc <MX_TIM4_Init+0x104>)
 8005638:	2200      	movs	r2, #0
 800563a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800563c:	4b2f      	ldr	r3, [pc, #188]	@ (80056fc <MX_TIM4_Init+0x104>)
 800563e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005642:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005644:	4b2d      	ldr	r3, [pc, #180]	@ (80056fc <MX_TIM4_Init+0x104>)
 8005646:	2200      	movs	r2, #0
 8005648:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800564a:	4b2c      	ldr	r3, [pc, #176]	@ (80056fc <MX_TIM4_Init+0x104>)
 800564c:	2200      	movs	r2, #0
 800564e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005650:	482a      	ldr	r0, [pc, #168]	@ (80056fc <MX_TIM4_Init+0x104>)
 8005652:	f003 fe75 	bl	8009340 <HAL_TIM_Base_Init>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800565c:	f7ff fc8c 	bl	8004f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005660:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005664:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005666:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800566a:	4619      	mov	r1, r3
 800566c:	4823      	ldr	r0, [pc, #140]	@ (80056fc <MX_TIM4_Init+0x104>)
 800566e:	f004 fb75 	bl	8009d5c <HAL_TIM_ConfigClockSource>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8005678:	f7ff fc7e 	bl	8004f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800567c:	481f      	ldr	r0, [pc, #124]	@ (80056fc <MX_TIM4_Init+0x104>)
 800567e:	f003 ff5e 	bl	800953e <HAL_TIM_PWM_Init>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8005688:	f7ff fc76 	bl	8004f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800568c:	2300      	movs	r3, #0
 800568e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005690:	2300      	movs	r3, #0
 8005692:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005694:	f107 031c 	add.w	r3, r7, #28
 8005698:	4619      	mov	r1, r3
 800569a:	4818      	ldr	r0, [pc, #96]	@ (80056fc <MX_TIM4_Init+0x104>)
 800569c:	f005 f80e 	bl	800a6bc <HAL_TIMEx_MasterConfigSynchronization>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80056a6:	f7ff fc67 	bl	8004f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056aa:	2360      	movs	r3, #96	@ 0x60
 80056ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 80056ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80056b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056b4:	2300      	movs	r3, #0
 80056b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80056b8:	2300      	movs	r3, #0
 80056ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80056bc:	463b      	mov	r3, r7
 80056be:	2200      	movs	r2, #0
 80056c0:	4619      	mov	r1, r3
 80056c2:	480e      	ldr	r0, [pc, #56]	@ (80056fc <MX_TIM4_Init+0x104>)
 80056c4:	f004 fa36 	bl	8009b34 <HAL_TIM_PWM_ConfigChannel>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80056ce:	f7ff fc53 	bl	8004f78 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80056d6:	463b      	mov	r3, r7
 80056d8:	2208      	movs	r2, #8
 80056da:	4619      	mov	r1, r3
 80056dc:	4807      	ldr	r0, [pc, #28]	@ (80056fc <MX_TIM4_Init+0x104>)
 80056de:	f004 fa29 	bl	8009b34 <HAL_TIM_PWM_ConfigChannel>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 80056e8:	f7ff fc46 	bl	8004f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80056ec:	4803      	ldr	r0, [pc, #12]	@ (80056fc <MX_TIM4_Init+0x104>)
 80056ee:	f000 f881 	bl	80057f4 <HAL_TIM_MspPostInit>

}
 80056f2:	bf00      	nop
 80056f4:	3738      	adds	r7, #56	@ 0x38
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	200004d4 	.word	0x200004d4
 8005700:	40000800 	.word	0x40000800

08005704 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a34      	ldr	r2, [pc, #208]	@ (80057e4 <HAL_TIM_Base_MspInit+0xe0>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d114      	bne.n	8005740 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005716:	4b34      	ldr	r3, [pc, #208]	@ (80057e8 <HAL_TIM_Base_MspInit+0xe4>)
 8005718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571a:	4a33      	ldr	r2, [pc, #204]	@ (80057e8 <HAL_TIM_Base_MspInit+0xe4>)
 800571c:	f043 0301 	orr.w	r3, r3, #1
 8005720:	6453      	str	r3, [r2, #68]	@ 0x44
 8005722:	4b31      	ldr	r3, [pc, #196]	@ (80057e8 <HAL_TIM_Base_MspInit+0xe4>)
 8005724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800572e:	2200      	movs	r2, #0
 8005730:	2100      	movs	r1, #0
 8005732:	201b      	movs	r0, #27
 8005734:	f000 fb59 	bl	8005dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005738:	201b      	movs	r0, #27
 800573a:	f000 fb72 	bl	8005e22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800573e:	e04c      	b.n	80057da <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005748:	d114      	bne.n	8005774 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800574a:	4b27      	ldr	r3, [pc, #156]	@ (80057e8 <HAL_TIM_Base_MspInit+0xe4>)
 800574c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574e:	4a26      	ldr	r2, [pc, #152]	@ (80057e8 <HAL_TIM_Base_MspInit+0xe4>)
 8005750:	f043 0301 	orr.w	r3, r3, #1
 8005754:	6413      	str	r3, [r2, #64]	@ 0x40
 8005756:	4b24      	ldr	r3, [pc, #144]	@ (80057e8 <HAL_TIM_Base_MspInit+0xe4>)
 8005758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	613b      	str	r3, [r7, #16]
 8005760:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005762:	2200      	movs	r2, #0
 8005764:	2100      	movs	r1, #0
 8005766:	201c      	movs	r0, #28
 8005768:	f000 fb3f 	bl	8005dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800576c:	201c      	movs	r0, #28
 800576e:	f000 fb58 	bl	8005e22 <HAL_NVIC_EnableIRQ>
}
 8005772:	e032      	b.n	80057da <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a1c      	ldr	r2, [pc, #112]	@ (80057ec <HAL_TIM_Base_MspInit+0xe8>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d114      	bne.n	80057a8 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800577e:	4b1a      	ldr	r3, [pc, #104]	@ (80057e8 <HAL_TIM_Base_MspInit+0xe4>)
 8005780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005782:	4a19      	ldr	r2, [pc, #100]	@ (80057e8 <HAL_TIM_Base_MspInit+0xe4>)
 8005784:	f043 0302 	orr.w	r3, r3, #2
 8005788:	6413      	str	r3, [r2, #64]	@ 0x40
 800578a:	4b17      	ldr	r3, [pc, #92]	@ (80057e8 <HAL_TIM_Base_MspInit+0xe4>)
 800578c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005796:	2200      	movs	r2, #0
 8005798:	2100      	movs	r1, #0
 800579a:	201d      	movs	r0, #29
 800579c:	f000 fb25 	bl	8005dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80057a0:	201d      	movs	r0, #29
 80057a2:	f000 fb3e 	bl	8005e22 <HAL_NVIC_EnableIRQ>
}
 80057a6:	e018      	b.n	80057da <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a10      	ldr	r2, [pc, #64]	@ (80057f0 <HAL_TIM_Base_MspInit+0xec>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d113      	bne.n	80057da <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80057b2:	4b0d      	ldr	r3, [pc, #52]	@ (80057e8 <HAL_TIM_Base_MspInit+0xe4>)
 80057b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b6:	4a0c      	ldr	r2, [pc, #48]	@ (80057e8 <HAL_TIM_Base_MspInit+0xe4>)
 80057b8:	f043 0304 	orr.w	r3, r3, #4
 80057bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80057be:	4b0a      	ldr	r3, [pc, #40]	@ (80057e8 <HAL_TIM_Base_MspInit+0xe4>)
 80057c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c2:	f003 0304 	and.w	r3, r3, #4
 80057c6:	60bb      	str	r3, [r7, #8]
 80057c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80057ca:	2200      	movs	r2, #0
 80057cc:	2100      	movs	r1, #0
 80057ce:	201e      	movs	r0, #30
 80057d0:	f000 fb0b 	bl	8005dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80057d4:	201e      	movs	r0, #30
 80057d6:	f000 fb24 	bl	8005e22 <HAL_NVIC_EnableIRQ>
}
 80057da:	bf00      	nop
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	40010000 	.word	0x40010000
 80057e8:	40023800 	.word	0x40023800
 80057ec:	40000400 	.word	0x40000400
 80057f0:	40000800 	.word	0x40000800

080057f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b08e      	sub	sp, #56	@ 0x38
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005800:	2200      	movs	r2, #0
 8005802:	601a      	str	r2, [r3, #0]
 8005804:	605a      	str	r2, [r3, #4]
 8005806:	609a      	str	r2, [r3, #8]
 8005808:	60da      	str	r2, [r3, #12]
 800580a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a62      	ldr	r2, [pc, #392]	@ (800599c <HAL_TIM_MspPostInit+0x1a8>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d13a      	bne.n	800588c <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005816:	4b62      	ldr	r3, [pc, #392]	@ (80059a0 <HAL_TIM_MspPostInit+0x1ac>)
 8005818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581a:	4a61      	ldr	r2, [pc, #388]	@ (80059a0 <HAL_TIM_MspPostInit+0x1ac>)
 800581c:	f043 0310 	orr.w	r3, r3, #16
 8005820:	6313      	str	r3, [r2, #48]	@ 0x30
 8005822:	4b5f      	ldr	r3, [pc, #380]	@ (80059a0 <HAL_TIM_MspPostInit+0x1ac>)
 8005824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005826:	f003 0310 	and.w	r3, r3, #16
 800582a:	623b      	str	r3, [r7, #32]
 800582c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800582e:	4b5c      	ldr	r3, [pc, #368]	@ (80059a0 <HAL_TIM_MspPostInit+0x1ac>)
 8005830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005832:	4a5b      	ldr	r2, [pc, #364]	@ (80059a0 <HAL_TIM_MspPostInit+0x1ac>)
 8005834:	f043 0301 	orr.w	r3, r3, #1
 8005838:	6313      	str	r3, [r2, #48]	@ 0x30
 800583a:	4b59      	ldr	r3, [pc, #356]	@ (80059a0 <HAL_TIM_MspPostInit+0x1ac>)
 800583c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	61fb      	str	r3, [r7, #28]
 8005844:	69fb      	ldr	r3, [r7, #28]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_Kitchen_Shutter_Pin|TIM1_CH2_LivingRoom_Shutter_Pin|TIM1_CH3_Garage_Shutter_Pin;
 8005846:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 800584a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800584c:	2302      	movs	r3, #2
 800584e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005850:	2300      	movs	r3, #0
 8005852:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005854:	2300      	movs	r3, #0
 8005856:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005858:	2301      	movs	r3, #1
 800585a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800585c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005860:	4619      	mov	r1, r3
 8005862:	4850      	ldr	r0, [pc, #320]	@ (80059a4 <HAL_TIM_MspPostInit+0x1b0>)
 8005864:	f000 fb1a 	bl	8005e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM1_CH4_Door_Pin;
 8005868:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800586c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800586e:	2302      	movs	r3, #2
 8005870:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005872:	2300      	movs	r3, #0
 8005874:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005876:	2300      	movs	r3, #0
 8005878:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800587a:	2301      	movs	r3, #1
 800587c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TIM1_CH4_Door_GPIO_Port, &GPIO_InitStruct);
 800587e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005882:	4619      	mov	r1, r3
 8005884:	4848      	ldr	r0, [pc, #288]	@ (80059a8 <HAL_TIM_MspPostInit+0x1b4>)
 8005886:	f000 fb09 	bl	8005e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800588a:	e083      	b.n	8005994 <HAL_TIM_MspPostInit+0x1a0>
  else if(timHandle->Instance==TIM2)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005894:	d139      	bne.n	800590a <HAL_TIM_MspPostInit+0x116>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005896:	4b42      	ldr	r3, [pc, #264]	@ (80059a0 <HAL_TIM_MspPostInit+0x1ac>)
 8005898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589a:	4a41      	ldr	r2, [pc, #260]	@ (80059a0 <HAL_TIM_MspPostInit+0x1ac>)
 800589c:	f043 0301 	orr.w	r3, r3, #1
 80058a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80058a2:	4b3f      	ldr	r3, [pc, #252]	@ (80059a0 <HAL_TIM_MspPostInit+0x1ac>)
 80058a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	61bb      	str	r3, [r7, #24]
 80058ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058ae:	4b3c      	ldr	r3, [pc, #240]	@ (80059a0 <HAL_TIM_MspPostInit+0x1ac>)
 80058b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b2:	4a3b      	ldr	r2, [pc, #236]	@ (80059a0 <HAL_TIM_MspPostInit+0x1ac>)
 80058b4:	f043 0302 	orr.w	r3, r3, #2
 80058b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80058ba:	4b39      	ldr	r3, [pc, #228]	@ (80059a0 <HAL_TIM_MspPostInit+0x1ac>)
 80058bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_RGB_Garage_Pin;
 80058c6:	2301      	movs	r3, #1
 80058c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ca:	2302      	movs	r3, #2
 80058cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ce:	2300      	movs	r3, #0
 80058d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058d2:	2300      	movs	r3, #0
 80058d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80058d6:	2301      	movs	r3, #1
 80058d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TIM2_CH1_RGB_Garage_GPIO_Port, &GPIO_InitStruct);
 80058da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058de:	4619      	mov	r1, r3
 80058e0:	4831      	ldr	r0, [pc, #196]	@ (80059a8 <HAL_TIM_MspPostInit+0x1b4>)
 80058e2:	f000 fadb 	bl	8005e9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM2_CH3_Alarm_Buzzer_Pin|TIM2_CH4_RGB_Kitchen_Pin;
 80058e6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80058ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ec:	2302      	movs	r3, #2
 80058ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058f0:	2300      	movs	r3, #0
 80058f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058f4:	2300      	movs	r3, #0
 80058f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80058f8:	2301      	movs	r3, #1
 80058fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005900:	4619      	mov	r1, r3
 8005902:	482a      	ldr	r0, [pc, #168]	@ (80059ac <HAL_TIM_MspPostInit+0x1b8>)
 8005904:	f000 faca 	bl	8005e9c <HAL_GPIO_Init>
}
 8005908:	e044      	b.n	8005994 <HAL_TIM_MspPostInit+0x1a0>
  else if(timHandle->Instance==TIM3)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a28      	ldr	r2, [pc, #160]	@ (80059b0 <HAL_TIM_MspPostInit+0x1bc>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d11d      	bne.n	8005950 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005914:	4b22      	ldr	r3, [pc, #136]	@ (80059a0 <HAL_TIM_MspPostInit+0x1ac>)
 8005916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005918:	4a21      	ldr	r2, [pc, #132]	@ (80059a0 <HAL_TIM_MspPostInit+0x1ac>)
 800591a:	f043 0304 	orr.w	r3, r3, #4
 800591e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005920:	4b1f      	ldr	r3, [pc, #124]	@ (80059a0 <HAL_TIM_MspPostInit+0x1ac>)
 8005922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	613b      	str	r3, [r7, #16]
 800592a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM3_CH4_Garage_Pin;
 800592c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005930:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005932:	2302      	movs	r3, #2
 8005934:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005936:	2300      	movs	r3, #0
 8005938:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800593a:	2300      	movs	r3, #0
 800593c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800593e:	2302      	movs	r3, #2
 8005940:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TIM3_CH4_Garage_GPIO_Port, &GPIO_InitStruct);
 8005942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005946:	4619      	mov	r1, r3
 8005948:	481a      	ldr	r0, [pc, #104]	@ (80059b4 <HAL_TIM_MspPostInit+0x1c0>)
 800594a:	f000 faa7 	bl	8005e9c <HAL_GPIO_Init>
}
 800594e:	e021      	b.n	8005994 <HAL_TIM_MspPostInit+0x1a0>
  else if(timHandle->Instance==TIM4)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a18      	ldr	r2, [pc, #96]	@ (80059b8 <HAL_TIM_MspPostInit+0x1c4>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d11c      	bne.n	8005994 <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800595a:	4b11      	ldr	r3, [pc, #68]	@ (80059a0 <HAL_TIM_MspPostInit+0x1ac>)
 800595c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595e:	4a10      	ldr	r2, [pc, #64]	@ (80059a0 <HAL_TIM_MspPostInit+0x1ac>)
 8005960:	f043 0308 	orr.w	r3, r3, #8
 8005964:	6313      	str	r3, [r2, #48]	@ 0x30
 8005966:	4b0e      	ldr	r3, [pc, #56]	@ (80059a0 <HAL_TIM_MspPostInit+0x1ac>)
 8005968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_RGB_LivingRoom_Pin|TIM4_CH3_heating_Pin;
 8005972:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8005976:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005978:	2302      	movs	r3, #2
 800597a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800597c:	2300      	movs	r3, #0
 800597e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005980:	2300      	movs	r3, #0
 8005982:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005984:	2302      	movs	r3, #2
 8005986:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005988:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800598c:	4619      	mov	r1, r3
 800598e:	480b      	ldr	r0, [pc, #44]	@ (80059bc <HAL_TIM_MspPostInit+0x1c8>)
 8005990:	f000 fa84 	bl	8005e9c <HAL_GPIO_Init>
}
 8005994:	bf00      	nop
 8005996:	3738      	adds	r7, #56	@ 0x38
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	40010000 	.word	0x40010000
 80059a0:	40023800 	.word	0x40023800
 80059a4:	40021000 	.word	0x40021000
 80059a8:	40020000 	.word	0x40020000
 80059ac:	40020400 	.word	0x40020400
 80059b0:	40000400 	.word	0x40000400
 80059b4:	40020800 	.word	0x40020800
 80059b8:	40000800 	.word	0x40000800
 80059bc:	40020c00 	.word	0x40020c00

080059c0 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80059c4:	4b14      	ldr	r3, [pc, #80]	@ (8005a18 <MX_USART6_UART_Init+0x58>)
 80059c6:	4a15      	ldr	r2, [pc, #84]	@ (8005a1c <MX_USART6_UART_Init+0x5c>)
 80059c8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80059ca:	4b13      	ldr	r3, [pc, #76]	@ (8005a18 <MX_USART6_UART_Init+0x58>)
 80059cc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80059d0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80059d2:	4b11      	ldr	r3, [pc, #68]	@ (8005a18 <MX_USART6_UART_Init+0x58>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80059d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005a18 <MX_USART6_UART_Init+0x58>)
 80059da:	2200      	movs	r2, #0
 80059dc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80059de:	4b0e      	ldr	r3, [pc, #56]	@ (8005a18 <MX_USART6_UART_Init+0x58>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80059e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005a18 <MX_USART6_UART_Init+0x58>)
 80059e6:	220c      	movs	r2, #12
 80059e8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005a18 <MX_USART6_UART_Init+0x58>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80059f0:	4b09      	ldr	r3, [pc, #36]	@ (8005a18 <MX_USART6_UART_Init+0x58>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059f6:	4b08      	ldr	r3, [pc, #32]	@ (8005a18 <MX_USART6_UART_Init+0x58>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059fc:	4b06      	ldr	r3, [pc, #24]	@ (8005a18 <MX_USART6_UART_Init+0x58>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005a02:	4805      	ldr	r0, [pc, #20]	@ (8005a18 <MX_USART6_UART_Init+0x58>)
 8005a04:	f004 ff84 	bl	800a910 <HAL_UART_Init>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8005a0e:	f7ff fab3 	bl	8004f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005a12:	bf00      	nop
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20000520 	.word	0x20000520
 8005a1c:	40011400 	.word	0x40011400

08005a20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b0aa      	sub	sp, #168	@ 0xa8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a28:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	605a      	str	r2, [r3, #4]
 8005a32:	609a      	str	r2, [r3, #8]
 8005a34:	60da      	str	r2, [r3, #12]
 8005a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005a38:	f107 0310 	add.w	r3, r7, #16
 8005a3c:	2284      	movs	r2, #132	@ 0x84
 8005a3e:	2100      	movs	r1, #0
 8005a40:	4618      	mov	r0, r3
 8005a42:	f005 ff73 	bl	800b92c <memset>
  if(uartHandle->Instance==USART6)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a22      	ldr	r2, [pc, #136]	@ (8005ad4 <HAL_UART_MspInit+0xb4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d13c      	bne.n	8005aca <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8005a50:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005a54:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8005a56:	2300      	movs	r3, #0
 8005a58:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005a5a:	f107 0310 	add.w	r3, r7, #16
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f002 f80a 	bl	8007a78 <HAL_RCCEx_PeriphCLKConfig>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005a6a:	f7ff fa85 	bl	8004f78 <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8005a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad8 <HAL_UART_MspInit+0xb8>)
 8005a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a72:	4a19      	ldr	r2, [pc, #100]	@ (8005ad8 <HAL_UART_MspInit+0xb8>)
 8005a74:	f043 0320 	orr.w	r3, r3, #32
 8005a78:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a7a:	4b17      	ldr	r3, [pc, #92]	@ (8005ad8 <HAL_UART_MspInit+0xb8>)
 8005a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	60fb      	str	r3, [r7, #12]
 8005a84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005a86:	4b14      	ldr	r3, [pc, #80]	@ (8005ad8 <HAL_UART_MspInit+0xb8>)
 8005a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a8a:	4a13      	ldr	r2, [pc, #76]	@ (8005ad8 <HAL_UART_MspInit+0xb8>)
 8005a8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a92:	4b11      	ldr	r3, [pc, #68]	@ (8005ad8 <HAL_UART_MspInit+0xb8>)
 8005a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a9a:	60bb      	str	r3, [r7, #8]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8005a9e:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8005aa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aac:	2300      	movs	r3, #0
 8005aae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005ab8:	2308      	movs	r3, #8
 8005aba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005abe:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4805      	ldr	r0, [pc, #20]	@ (8005adc <HAL_UART_MspInit+0xbc>)
 8005ac6:	f000 f9e9 	bl	8005e9c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005aca:	bf00      	nop
 8005acc:	37a8      	adds	r7, #168	@ 0xa8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40011400 	.word	0x40011400
 8005ad8:	40023800 	.word	0x40023800
 8005adc:	40021800 	.word	0x40021800

08005ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005ae0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005b18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005ae4:	480d      	ldr	r0, [pc, #52]	@ (8005b1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005ae6:	490e      	ldr	r1, [pc, #56]	@ (8005b20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005ae8:	4a0e      	ldr	r2, [pc, #56]	@ (8005b24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005aec:	e002      	b.n	8005af4 <LoopCopyDataInit>

08005aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005af2:	3304      	adds	r3, #4

08005af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005af8:	d3f9      	bcc.n	8005aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005afa:	4a0b      	ldr	r2, [pc, #44]	@ (8005b28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005afc:	4c0b      	ldr	r4, [pc, #44]	@ (8005b2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8005afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b00:	e001      	b.n	8005b06 <LoopFillZerobss>

08005b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b04:	3204      	adds	r2, #4

08005b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b08:	d3fb      	bcc.n	8005b02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005b0a:	f7ff fb89 	bl	8005220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b0e:	f005 ff1b 	bl	800b948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b12:	f7fd fc19 	bl	8003348 <main>
  bx  lr    
 8005b16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005b18:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b20:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 8005b24:	0800c7e4 	.word	0x0800c7e4
  ldr r2, =_sbss
 8005b28:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8005b2c:	200006f4 	.word	0x200006f4

08005b30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b30:	e7fe      	b.n	8005b30 <ADC_IRQHandler>

08005b32 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b36:	2003      	movs	r0, #3
 8005b38:	f000 f94c 	bl	8005dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	f000 f805 	bl	8005b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b42:	f7ff faa9 	bl	8005098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005b54:	4b12      	ldr	r3, [pc, #72]	@ (8005ba0 <HAL_InitTick+0x54>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	4b12      	ldr	r3, [pc, #72]	@ (8005ba4 <HAL_InitTick+0x58>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 f967 	bl	8005e3e <HAL_SYSTICK_Config>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e00e      	b.n	8005b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b0f      	cmp	r3, #15
 8005b7e:	d80a      	bhi.n	8005b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b80:	2200      	movs	r2, #0
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	f04f 30ff 	mov.w	r0, #4294967295
 8005b88:	f000 f92f 	bl	8005dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b8c:	4a06      	ldr	r2, [pc, #24]	@ (8005ba8 <HAL_InitTick+0x5c>)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	e000      	b.n	8005b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	20000158 	.word	0x20000158
 8005ba4:	20000160 	.word	0x20000160
 8005ba8:	2000015c 	.word	0x2000015c

08005bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005bb0:	4b06      	ldr	r3, [pc, #24]	@ (8005bcc <HAL_IncTick+0x20>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	4b06      	ldr	r3, [pc, #24]	@ (8005bd0 <HAL_IncTick+0x24>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4413      	add	r3, r2
 8005bbc:	4a04      	ldr	r2, [pc, #16]	@ (8005bd0 <HAL_IncTick+0x24>)
 8005bbe:	6013      	str	r3, [r2, #0]
}
 8005bc0:	bf00      	nop
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	20000160 	.word	0x20000160
 8005bd0:	200005a8 	.word	0x200005a8

08005bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8005bd8:	4b03      	ldr	r3, [pc, #12]	@ (8005be8 <HAL_GetTick+0x14>)
 8005bda:	681b      	ldr	r3, [r3, #0]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	200005a8 	.word	0x200005a8

08005bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005bf4:	f7ff ffee 	bl	8005bd4 <HAL_GetTick>
 8005bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c04:	d005      	beq.n	8005c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c06:	4b0a      	ldr	r3, [pc, #40]	@ (8005c30 <HAL_Delay+0x44>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c12:	bf00      	nop
 8005c14:	f7ff ffde 	bl	8005bd4 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d8f7      	bhi.n	8005c14 <HAL_Delay+0x28>
  {
  }
}
 8005c24:	bf00      	nop
 8005c26:	bf00      	nop
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000160 	.word	0x20000160

08005c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f003 0307 	and.w	r3, r3, #7
 8005c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c44:	4b0b      	ldr	r3, [pc, #44]	@ (8005c74 <__NVIC_SetPriorityGrouping+0x40>)
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005c50:	4013      	ands	r3, r2
 8005c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005c5c:	4b06      	ldr	r3, [pc, #24]	@ (8005c78 <__NVIC_SetPriorityGrouping+0x44>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c62:	4a04      	ldr	r2, [pc, #16]	@ (8005c74 <__NVIC_SetPriorityGrouping+0x40>)
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	60d3      	str	r3, [r2, #12]
}
 8005c68:	bf00      	nop
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	e000ed00 	.word	0xe000ed00
 8005c78:	05fa0000 	.word	0x05fa0000

08005c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c80:	4b04      	ldr	r3, [pc, #16]	@ (8005c94 <__NVIC_GetPriorityGrouping+0x18>)
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	0a1b      	lsrs	r3, r3, #8
 8005c86:	f003 0307 	and.w	r3, r3, #7
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	e000ed00 	.word	0xe000ed00

08005c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	db0b      	blt.n	8005cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005caa:	79fb      	ldrb	r3, [r7, #7]
 8005cac:	f003 021f 	and.w	r2, r3, #31
 8005cb0:	4907      	ldr	r1, [pc, #28]	@ (8005cd0 <__NVIC_EnableIRQ+0x38>)
 8005cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cb6:	095b      	lsrs	r3, r3, #5
 8005cb8:	2001      	movs	r0, #1
 8005cba:	fa00 f202 	lsl.w	r2, r0, r2
 8005cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	e000e100 	.word	0xe000e100

08005cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	6039      	str	r1, [r7, #0]
 8005cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	db0a      	blt.n	8005cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	490c      	ldr	r1, [pc, #48]	@ (8005d20 <__NVIC_SetPriority+0x4c>)
 8005cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cf2:	0112      	lsls	r2, r2, #4
 8005cf4:	b2d2      	uxtb	r2, r2
 8005cf6:	440b      	add	r3, r1
 8005cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005cfc:	e00a      	b.n	8005d14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	4908      	ldr	r1, [pc, #32]	@ (8005d24 <__NVIC_SetPriority+0x50>)
 8005d04:	79fb      	ldrb	r3, [r7, #7]
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	3b04      	subs	r3, #4
 8005d0c:	0112      	lsls	r2, r2, #4
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	440b      	add	r3, r1
 8005d12:	761a      	strb	r2, [r3, #24]
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	e000e100 	.word	0xe000e100
 8005d24:	e000ed00 	.word	0xe000ed00

08005d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b089      	sub	sp, #36	@ 0x24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	f1c3 0307 	rsb	r3, r3, #7
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	bf28      	it	cs
 8005d46:	2304      	movcs	r3, #4
 8005d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	3304      	adds	r3, #4
 8005d4e:	2b06      	cmp	r3, #6
 8005d50:	d902      	bls.n	8005d58 <NVIC_EncodePriority+0x30>
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	3b03      	subs	r3, #3
 8005d56:	e000      	b.n	8005d5a <NVIC_EncodePriority+0x32>
 8005d58:	2300      	movs	r3, #0
 8005d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	fa02 f303 	lsl.w	r3, r2, r3
 8005d66:	43da      	mvns	r2, r3
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	401a      	ands	r2, r3
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d70:	f04f 31ff 	mov.w	r1, #4294967295
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	fa01 f303 	lsl.w	r3, r1, r3
 8005d7a:	43d9      	mvns	r1, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d80:	4313      	orrs	r3, r2
         );
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3724      	adds	r7, #36	@ 0x24
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
	...

08005d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005da0:	d301      	bcc.n	8005da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005da2:	2301      	movs	r3, #1
 8005da4:	e00f      	b.n	8005dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005da6:	4a0a      	ldr	r2, [pc, #40]	@ (8005dd0 <SysTick_Config+0x40>)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005dae:	210f      	movs	r1, #15
 8005db0:	f04f 30ff 	mov.w	r0, #4294967295
 8005db4:	f7ff ff8e 	bl	8005cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005db8:	4b05      	ldr	r3, [pc, #20]	@ (8005dd0 <SysTick_Config+0x40>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dbe:	4b04      	ldr	r3, [pc, #16]	@ (8005dd0 <SysTick_Config+0x40>)
 8005dc0:	2207      	movs	r2, #7
 8005dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	e000e010 	.word	0xe000e010

08005dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff ff29 	bl	8005c34 <__NVIC_SetPriorityGrouping>
}
 8005de2:	bf00      	nop
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b086      	sub	sp, #24
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	4603      	mov	r3, r0
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	607a      	str	r2, [r7, #4]
 8005df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005dfc:	f7ff ff3e 	bl	8005c7c <__NVIC_GetPriorityGrouping>
 8005e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	68b9      	ldr	r1, [r7, #8]
 8005e06:	6978      	ldr	r0, [r7, #20]
 8005e08:	f7ff ff8e 	bl	8005d28 <NVIC_EncodePriority>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e12:	4611      	mov	r1, r2
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7ff ff5d 	bl	8005cd4 <__NVIC_SetPriority>
}
 8005e1a:	bf00      	nop
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b082      	sub	sp, #8
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	4603      	mov	r3, r0
 8005e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff ff31 	bl	8005c98 <__NVIC_EnableIRQ>
}
 8005e36:	bf00      	nop
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b082      	sub	sp, #8
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7ff ffa2 	bl	8005d90 <SysTick_Config>
 8005e4c:	4603      	mov	r3, r0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d004      	beq.n	8005e74 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2280      	movs	r2, #128	@ 0x80
 8005e6e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e00c      	b.n	8005e8e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2205      	movs	r2, #5
 8005e78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 0201 	bic.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
	...

08005e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b089      	sub	sp, #36	@ 0x24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61fb      	str	r3, [r7, #28]
 8005eba:	e175      	b.n	80061a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	4013      	ands	r3, r2
 8005ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	f040 8164 	bne.w	80061a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f003 0303 	and.w	r3, r3, #3
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d005      	beq.n	8005ef2 <HAL_GPIO_Init+0x56>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d130      	bne.n	8005f54 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	2203      	movs	r2, #3
 8005efe:	fa02 f303 	lsl.w	r3, r2, r3
 8005f02:	43db      	mvns	r3, r3
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	4013      	ands	r3, r2
 8005f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	68da      	ldr	r2, [r3, #12]
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	fa02 f303 	lsl.w	r3, r2, r3
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	69ba      	ldr	r2, [r7, #24]
 8005f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f28:	2201      	movs	r2, #1
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f30:	43db      	mvns	r3, r3
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	4013      	ands	r3, r2
 8005f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	091b      	lsrs	r3, r3, #4
 8005f3e:	f003 0201 	and.w	r2, r3, #1
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	fa02 f303 	lsl.w	r3, r2, r3
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f003 0303 	and.w	r3, r3, #3
 8005f5c:	2b03      	cmp	r3, #3
 8005f5e:	d017      	beq.n	8005f90 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	2203      	movs	r2, #3
 8005f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f70:	43db      	mvns	r3, r3
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	4013      	ands	r3, r2
 8005f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	005b      	lsls	r3, r3, #1
 8005f80:	fa02 f303 	lsl.w	r3, r2, r3
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f003 0303 	and.w	r3, r3, #3
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d123      	bne.n	8005fe4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	08da      	lsrs	r2, r3, #3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3208      	adds	r2, #8
 8005fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	220f      	movs	r2, #15
 8005fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb8:	43db      	mvns	r3, r3
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	08da      	lsrs	r2, r3, #3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3208      	adds	r2, #8
 8005fde:	69b9      	ldr	r1, [r7, #24]
 8005fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	2203      	movs	r2, #3
 8005ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff4:	43db      	mvns	r3, r3
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f003 0203 	and.w	r2, r3, #3
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	fa02 f303 	lsl.w	r3, r2, r3
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	4313      	orrs	r3, r2
 8006010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 80be 	beq.w	80061a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006026:	4b66      	ldr	r3, [pc, #408]	@ (80061c0 <HAL_GPIO_Init+0x324>)
 8006028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800602a:	4a65      	ldr	r2, [pc, #404]	@ (80061c0 <HAL_GPIO_Init+0x324>)
 800602c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006030:	6453      	str	r3, [r2, #68]	@ 0x44
 8006032:	4b63      	ldr	r3, [pc, #396]	@ (80061c0 <HAL_GPIO_Init+0x324>)
 8006034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800603e:	4a61      	ldr	r2, [pc, #388]	@ (80061c4 <HAL_GPIO_Init+0x328>)
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	089b      	lsrs	r3, r3, #2
 8006044:	3302      	adds	r3, #2
 8006046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800604a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	f003 0303 	and.w	r3, r3, #3
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	220f      	movs	r2, #15
 8006056:	fa02 f303 	lsl.w	r3, r2, r3
 800605a:	43db      	mvns	r3, r3
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	4013      	ands	r3, r2
 8006060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a58      	ldr	r2, [pc, #352]	@ (80061c8 <HAL_GPIO_Init+0x32c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d037      	beq.n	80060da <HAL_GPIO_Init+0x23e>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a57      	ldr	r2, [pc, #348]	@ (80061cc <HAL_GPIO_Init+0x330>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d031      	beq.n	80060d6 <HAL_GPIO_Init+0x23a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a56      	ldr	r2, [pc, #344]	@ (80061d0 <HAL_GPIO_Init+0x334>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d02b      	beq.n	80060d2 <HAL_GPIO_Init+0x236>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a55      	ldr	r2, [pc, #340]	@ (80061d4 <HAL_GPIO_Init+0x338>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d025      	beq.n	80060ce <HAL_GPIO_Init+0x232>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a54      	ldr	r2, [pc, #336]	@ (80061d8 <HAL_GPIO_Init+0x33c>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d01f      	beq.n	80060ca <HAL_GPIO_Init+0x22e>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a53      	ldr	r2, [pc, #332]	@ (80061dc <HAL_GPIO_Init+0x340>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d019      	beq.n	80060c6 <HAL_GPIO_Init+0x22a>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a52      	ldr	r2, [pc, #328]	@ (80061e0 <HAL_GPIO_Init+0x344>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d013      	beq.n	80060c2 <HAL_GPIO_Init+0x226>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a51      	ldr	r2, [pc, #324]	@ (80061e4 <HAL_GPIO_Init+0x348>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d00d      	beq.n	80060be <HAL_GPIO_Init+0x222>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a50      	ldr	r2, [pc, #320]	@ (80061e8 <HAL_GPIO_Init+0x34c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d007      	beq.n	80060ba <HAL_GPIO_Init+0x21e>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a4f      	ldr	r2, [pc, #316]	@ (80061ec <HAL_GPIO_Init+0x350>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d101      	bne.n	80060b6 <HAL_GPIO_Init+0x21a>
 80060b2:	2309      	movs	r3, #9
 80060b4:	e012      	b.n	80060dc <HAL_GPIO_Init+0x240>
 80060b6:	230a      	movs	r3, #10
 80060b8:	e010      	b.n	80060dc <HAL_GPIO_Init+0x240>
 80060ba:	2308      	movs	r3, #8
 80060bc:	e00e      	b.n	80060dc <HAL_GPIO_Init+0x240>
 80060be:	2307      	movs	r3, #7
 80060c0:	e00c      	b.n	80060dc <HAL_GPIO_Init+0x240>
 80060c2:	2306      	movs	r3, #6
 80060c4:	e00a      	b.n	80060dc <HAL_GPIO_Init+0x240>
 80060c6:	2305      	movs	r3, #5
 80060c8:	e008      	b.n	80060dc <HAL_GPIO_Init+0x240>
 80060ca:	2304      	movs	r3, #4
 80060cc:	e006      	b.n	80060dc <HAL_GPIO_Init+0x240>
 80060ce:	2303      	movs	r3, #3
 80060d0:	e004      	b.n	80060dc <HAL_GPIO_Init+0x240>
 80060d2:	2302      	movs	r3, #2
 80060d4:	e002      	b.n	80060dc <HAL_GPIO_Init+0x240>
 80060d6:	2301      	movs	r3, #1
 80060d8:	e000      	b.n	80060dc <HAL_GPIO_Init+0x240>
 80060da:	2300      	movs	r3, #0
 80060dc:	69fa      	ldr	r2, [r7, #28]
 80060de:	f002 0203 	and.w	r2, r2, #3
 80060e2:	0092      	lsls	r2, r2, #2
 80060e4:	4093      	lsls	r3, r2
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80060ec:	4935      	ldr	r1, [pc, #212]	@ (80061c4 <HAL_GPIO_Init+0x328>)
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	089b      	lsrs	r3, r3, #2
 80060f2:	3302      	adds	r3, #2
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060fa:	4b3d      	ldr	r3, [pc, #244]	@ (80061f0 <HAL_GPIO_Init+0x354>)
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	43db      	mvns	r3, r3
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	4013      	ands	r3, r2
 8006108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	4313      	orrs	r3, r2
 800611c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800611e:	4a34      	ldr	r2, [pc, #208]	@ (80061f0 <HAL_GPIO_Init+0x354>)
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006124:	4b32      	ldr	r3, [pc, #200]	@ (80061f0 <HAL_GPIO_Init+0x354>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	43db      	mvns	r3, r3
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	4013      	ands	r3, r2
 8006132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d003      	beq.n	8006148 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	4313      	orrs	r3, r2
 8006146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006148:	4a29      	ldr	r2, [pc, #164]	@ (80061f0 <HAL_GPIO_Init+0x354>)
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800614e:	4b28      	ldr	r3, [pc, #160]	@ (80061f0 <HAL_GPIO_Init+0x354>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	43db      	mvns	r3, r3
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	4013      	ands	r3, r2
 800615c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006172:	4a1f      	ldr	r2, [pc, #124]	@ (80061f0 <HAL_GPIO_Init+0x354>)
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006178:	4b1d      	ldr	r3, [pc, #116]	@ (80061f0 <HAL_GPIO_Init+0x354>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	43db      	mvns	r3, r3
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	4013      	ands	r3, r2
 8006186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	4313      	orrs	r3, r2
 800619a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800619c:	4a14      	ldr	r2, [pc, #80]	@ (80061f0 <HAL_GPIO_Init+0x354>)
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	3301      	adds	r3, #1
 80061a6:	61fb      	str	r3, [r7, #28]
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	2b0f      	cmp	r3, #15
 80061ac:	f67f ae86 	bls.w	8005ebc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80061b0:	bf00      	nop
 80061b2:	bf00      	nop
 80061b4:	3724      	adds	r7, #36	@ 0x24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	40023800 	.word	0x40023800
 80061c4:	40013800 	.word	0x40013800
 80061c8:	40020000 	.word	0x40020000
 80061cc:	40020400 	.word	0x40020400
 80061d0:	40020800 	.word	0x40020800
 80061d4:	40020c00 	.word	0x40020c00
 80061d8:	40021000 	.word	0x40021000
 80061dc:	40021400 	.word	0x40021400
 80061e0:	40021800 	.word	0x40021800
 80061e4:	40021c00 	.word	0x40021c00
 80061e8:	40022000 	.word	0x40022000
 80061ec:	40022400 	.word	0x40022400
 80061f0:	40013c00 	.word	0x40013c00

080061f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	460b      	mov	r3, r1
 80061fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	887b      	ldrh	r3, [r7, #2]
 8006206:	4013      	ands	r3, r2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800620c:	2301      	movs	r3, #1
 800620e:	73fb      	strb	r3, [r7, #15]
 8006210:	e001      	b.n	8006216 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006212:	2300      	movs	r3, #0
 8006214:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006216:	7bfb      	ldrb	r3, [r7, #15]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	460b      	mov	r3, r1
 800622e:	807b      	strh	r3, [r7, #2]
 8006230:	4613      	mov	r3, r2
 8006232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006234:	787b      	ldrb	r3, [r7, #1]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800623a:	887a      	ldrh	r2, [r7, #2]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006240:	e003      	b.n	800624a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006242:	887b      	ldrh	r3, [r7, #2]
 8006244:	041a      	lsls	r2, r3, #16
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	619a      	str	r2, [r3, #24]
}
 800624a:	bf00      	nop
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006256:	b480      	push	{r7}
 8006258:	b085      	sub	sp, #20
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	460b      	mov	r3, r1
 8006260:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006268:	887a      	ldrh	r2, [r7, #2]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4013      	ands	r3, r2
 800626e:	041a      	lsls	r2, r3, #16
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	43d9      	mvns	r1, r3
 8006274:	887b      	ldrh	r3, [r7, #2]
 8006276:	400b      	ands	r3, r1
 8006278:	431a      	orrs	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	619a      	str	r2, [r3, #24]
}
 800627e:	bf00      	nop
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
	...

0800628c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	4603      	mov	r3, r0
 8006294:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006296:	4b08      	ldr	r3, [pc, #32]	@ (80062b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006298:	695a      	ldr	r2, [r3, #20]
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	4013      	ands	r3, r2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d006      	beq.n	80062b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80062a2:	4a05      	ldr	r2, [pc, #20]	@ (80062b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062a4:	88fb      	ldrh	r3, [r7, #6]
 80062a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80062a8:	88fb      	ldrh	r3, [r7, #6]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 f806 	bl	80062bc <HAL_GPIO_EXTI_Callback>
  }
}
 80062b0:	bf00      	nop
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	40013c00 	.word	0x40013c00

080062bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	4603      	mov	r3, r0
 80062c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
	...

080062d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e07f      	b.n	80063e6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d106      	bne.n	8006300 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7fc fa16 	bl	800272c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2224      	movs	r2, #36	@ 0x24
 8006304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 0201 	bic.w	r2, r2, #1
 8006316:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006324:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006334:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d107      	bne.n	800634e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689a      	ldr	r2, [r3, #8]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800634a:	609a      	str	r2, [r3, #8]
 800634c:	e006      	b.n	800635c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	689a      	ldr	r2, [r3, #8]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800635a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	2b02      	cmp	r3, #2
 8006362:	d104      	bne.n	800636e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800636c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6859      	ldr	r1, [r3, #4]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	4b1d      	ldr	r3, [pc, #116]	@ (80063f0 <HAL_I2C_Init+0x11c>)
 800637a:	430b      	orrs	r3, r1
 800637c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68da      	ldr	r2, [r3, #12]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800638c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691a      	ldr	r2, [r3, #16]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	69d9      	ldr	r1, [r3, #28]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a1a      	ldr	r2, [r3, #32]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f042 0201 	orr.w	r2, r2, #1
 80063c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	02008000 	.word	0x02008000

080063f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af02      	add	r7, sp, #8
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	4608      	mov	r0, r1
 80063fe:	4611      	mov	r1, r2
 8006400:	461a      	mov	r2, r3
 8006402:	4603      	mov	r3, r0
 8006404:	817b      	strh	r3, [r7, #10]
 8006406:	460b      	mov	r3, r1
 8006408:	813b      	strh	r3, [r7, #8]
 800640a:	4613      	mov	r3, r2
 800640c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b20      	cmp	r3, #32
 8006418:	f040 80f9 	bne.w	800660e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <HAL_I2C_Mem_Write+0x34>
 8006422:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006424:	2b00      	cmp	r3, #0
 8006426:	d105      	bne.n	8006434 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800642e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e0ed      	b.n	8006610 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800643a:	2b01      	cmp	r3, #1
 800643c:	d101      	bne.n	8006442 <HAL_I2C_Mem_Write+0x4e>
 800643e:	2302      	movs	r3, #2
 8006440:	e0e6      	b.n	8006610 <HAL_I2C_Mem_Write+0x21c>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800644a:	f7ff fbc3 	bl	8005bd4 <HAL_GetTick>
 800644e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	2319      	movs	r3, #25
 8006456:	2201      	movs	r2, #1
 8006458:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 fbcb 	bl	8006bf8 <I2C_WaitOnFlagUntilTimeout>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e0d1      	b.n	8006610 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2221      	movs	r2, #33	@ 0x21
 8006470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2240      	movs	r2, #64	@ 0x40
 8006478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6a3a      	ldr	r2, [r7, #32]
 8006486:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800648c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006494:	88f8      	ldrh	r0, [r7, #6]
 8006496:	893a      	ldrh	r2, [r7, #8]
 8006498:	8979      	ldrh	r1, [r7, #10]
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	9301      	str	r3, [sp, #4]
 800649e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	4603      	mov	r3, r0
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 fadb 	bl	8006a60 <I2C_RequestMemoryWrite>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d005      	beq.n	80064bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e0a9      	b.n	8006610 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	2bff      	cmp	r3, #255	@ 0xff
 80064c4:	d90e      	bls.n	80064e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	22ff      	movs	r2, #255	@ 0xff
 80064ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	8979      	ldrh	r1, [r7, #10]
 80064d4:	2300      	movs	r3, #0
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 fd27 	bl	8006f30 <I2C_TransferConfig>
 80064e2:	e00f      	b.n	8006504 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	8979      	ldrh	r1, [r7, #10]
 80064f6:	2300      	movs	r3, #0
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 fd16 	bl	8006f30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 fbb5 	bl	8006c78 <I2C_WaitOnTXISFlagUntilTimeout>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e07b      	b.n	8006610 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651c:	781a      	ldrb	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006532:	b29b      	uxth	r3, r3
 8006534:	3b01      	subs	r3, #1
 8006536:	b29a      	uxth	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006540:	3b01      	subs	r3, #1
 8006542:	b29a      	uxth	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800654c:	b29b      	uxth	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d034      	beq.n	80065bc <HAL_I2C_Mem_Write+0x1c8>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006556:	2b00      	cmp	r3, #0
 8006558:	d130      	bne.n	80065bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006560:	2200      	movs	r2, #0
 8006562:	2180      	movs	r1, #128	@ 0x80
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 fb47 	bl	8006bf8 <I2C_WaitOnFlagUntilTimeout>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e04d      	b.n	8006610 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006578:	b29b      	uxth	r3, r3
 800657a:	2bff      	cmp	r3, #255	@ 0xff
 800657c:	d90e      	bls.n	800659c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	22ff      	movs	r2, #255	@ 0xff
 8006582:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006588:	b2da      	uxtb	r2, r3
 800658a:	8979      	ldrh	r1, [r7, #10]
 800658c:	2300      	movs	r3, #0
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f000 fccb 	bl	8006f30 <I2C_TransferConfig>
 800659a:	e00f      	b.n	80065bc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065aa:	b2da      	uxtb	r2, r3
 80065ac:	8979      	ldrh	r1, [r7, #10]
 80065ae:	2300      	movs	r3, #0
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f000 fcba 	bl	8006f30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d19e      	bne.n	8006504 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 fb94 	bl	8006cf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e01a      	b.n	8006610 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2220      	movs	r2, #32
 80065e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6859      	ldr	r1, [r3, #4]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006618 <HAL_I2C_Mem_Write+0x224>)
 80065ee:	400b      	ands	r3, r1
 80065f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	e000      	b.n	8006610 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800660e:	2302      	movs	r3, #2
  }
}
 8006610:	4618      	mov	r0, r3
 8006612:	3718      	adds	r7, #24
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	fe00e800 	.word	0xfe00e800

0800661c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b088      	sub	sp, #32
 8006620:	af02      	add	r7, sp, #8
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	4608      	mov	r0, r1
 8006626:	4611      	mov	r1, r2
 8006628:	461a      	mov	r2, r3
 800662a:	4603      	mov	r3, r0
 800662c:	817b      	strh	r3, [r7, #10]
 800662e:	460b      	mov	r3, r1
 8006630:	813b      	strh	r3, [r7, #8]
 8006632:	4613      	mov	r3, r2
 8006634:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b20      	cmp	r3, #32
 8006640:	f040 80fd 	bne.w	800683e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <HAL_I2C_Mem_Read+0x34>
 800664a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800664c:	2b00      	cmp	r3, #0
 800664e:	d105      	bne.n	800665c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006656:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e0f1      	b.n	8006840 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006662:	2b01      	cmp	r3, #1
 8006664:	d101      	bne.n	800666a <HAL_I2C_Mem_Read+0x4e>
 8006666:	2302      	movs	r3, #2
 8006668:	e0ea      	b.n	8006840 <HAL_I2C_Mem_Read+0x224>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006672:	f7ff faaf 	bl	8005bd4 <HAL_GetTick>
 8006676:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	2319      	movs	r3, #25
 800667e:	2201      	movs	r2, #1
 8006680:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 fab7 	bl	8006bf8 <I2C_WaitOnFlagUntilTimeout>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e0d5      	b.n	8006840 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2222      	movs	r2, #34	@ 0x22
 8006698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2240      	movs	r2, #64	@ 0x40
 80066a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6a3a      	ldr	r2, [r7, #32]
 80066ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80066b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066bc:	88f8      	ldrh	r0, [r7, #6]
 80066be:	893a      	ldrh	r2, [r7, #8]
 80066c0:	8979      	ldrh	r1, [r7, #10]
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	9301      	str	r3, [sp, #4]
 80066c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	4603      	mov	r3, r0
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 fa1b 	bl	8006b08 <I2C_RequestMemoryRead>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d005      	beq.n	80066e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e0ad      	b.n	8006840 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	2bff      	cmp	r3, #255	@ 0xff
 80066ec:	d90e      	bls.n	800670c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	22ff      	movs	r2, #255	@ 0xff
 80066f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	8979      	ldrh	r1, [r7, #10]
 80066fc:	4b52      	ldr	r3, [pc, #328]	@ (8006848 <HAL_I2C_Mem_Read+0x22c>)
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 fc13 	bl	8006f30 <I2C_TransferConfig>
 800670a:	e00f      	b.n	800672c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006710:	b29a      	uxth	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800671a:	b2da      	uxtb	r2, r3
 800671c:	8979      	ldrh	r1, [r7, #10]
 800671e:	4b4a      	ldr	r3, [pc, #296]	@ (8006848 <HAL_I2C_Mem_Read+0x22c>)
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 fc02 	bl	8006f30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006732:	2200      	movs	r2, #0
 8006734:	2104      	movs	r1, #4
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 fa5e 	bl	8006bf8 <I2C_WaitOnFlagUntilTimeout>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e07c      	b.n	8006840 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006750:	b2d2      	uxtb	r2, r2
 8006752:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006762:	3b01      	subs	r3, #1
 8006764:	b29a      	uxth	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800676e:	b29b      	uxth	r3, r3
 8006770:	3b01      	subs	r3, #1
 8006772:	b29a      	uxth	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800677c:	b29b      	uxth	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d034      	beq.n	80067ec <HAL_I2C_Mem_Read+0x1d0>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006786:	2b00      	cmp	r3, #0
 8006788:	d130      	bne.n	80067ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006790:	2200      	movs	r2, #0
 8006792:	2180      	movs	r1, #128	@ 0x80
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 fa2f 	bl	8006bf8 <I2C_WaitOnFlagUntilTimeout>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d001      	beq.n	80067a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e04d      	b.n	8006840 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	2bff      	cmp	r3, #255	@ 0xff
 80067ac:	d90e      	bls.n	80067cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	22ff      	movs	r2, #255	@ 0xff
 80067b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	8979      	ldrh	r1, [r7, #10]
 80067bc:	2300      	movs	r3, #0
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 fbb3 	bl	8006f30 <I2C_TransferConfig>
 80067ca:	e00f      	b.n	80067ec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	8979      	ldrh	r1, [r7, #10]
 80067de:	2300      	movs	r3, #0
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 fba2 	bl	8006f30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d19a      	bne.n	800672c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f000 fa7c 	bl	8006cf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e01a      	b.n	8006840 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2220      	movs	r2, #32
 8006810:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6859      	ldr	r1, [r3, #4]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	4b0b      	ldr	r3, [pc, #44]	@ (800684c <HAL_I2C_Mem_Read+0x230>)
 800681e:	400b      	ands	r3, r1
 8006820:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2220      	movs	r2, #32
 8006826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	e000      	b.n	8006840 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800683e:	2302      	movs	r3, #2
  }
}
 8006840:	4618      	mov	r0, r3
 8006842:	3718      	adds	r7, #24
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	80002400 	.word	0x80002400
 800684c:	fe00e800 	.word	0xfe00e800

08006850 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b08a      	sub	sp, #40	@ 0x28
 8006854:	af02      	add	r7, sp, #8
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	607a      	str	r2, [r7, #4]
 800685a:	603b      	str	r3, [r7, #0]
 800685c:	460b      	mov	r3, r1
 800685e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006860:	2300      	movs	r3, #0
 8006862:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b20      	cmp	r3, #32
 800686e:	f040 80ef 	bne.w	8006a50 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800687c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006880:	d101      	bne.n	8006886 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8006882:	2302      	movs	r3, #2
 8006884:	e0e5      	b.n	8006a52 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_I2C_IsDeviceReady+0x44>
 8006890:	2302      	movs	r3, #2
 8006892:	e0de      	b.n	8006a52 <HAL_I2C_IsDeviceReady+0x202>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2224      	movs	r2, #36	@ 0x24
 80068a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d105      	bne.n	80068be <HAL_I2C_IsDeviceReady+0x6e>
 80068b2:	897b      	ldrh	r3, [r7, #10]
 80068b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80068b8:	4b68      	ldr	r3, [pc, #416]	@ (8006a5c <HAL_I2C_IsDeviceReady+0x20c>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	e004      	b.n	80068c8 <HAL_I2C_IsDeviceReady+0x78>
 80068be:	897b      	ldrh	r3, [r7, #10]
 80068c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068c4:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	6812      	ldr	r2, [r2, #0]
 80068cc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80068ce:	f7ff f981 	bl	8005bd4 <HAL_GetTick>
 80068d2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	f003 0320 	and.w	r3, r3, #32
 80068de:	2b20      	cmp	r3, #32
 80068e0:	bf0c      	ite	eq
 80068e2:	2301      	moveq	r3, #1
 80068e4:	2300      	movne	r3, #0
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	f003 0310 	and.w	r3, r3, #16
 80068f4:	2b10      	cmp	r3, #16
 80068f6:	bf0c      	ite	eq
 80068f8:	2301      	moveq	r3, #1
 80068fa:	2300      	movne	r3, #0
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006900:	e034      	b.n	800696c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006908:	d01a      	beq.n	8006940 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800690a:	f7ff f963 	bl	8005bd4 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	d302      	bcc.n	8006920 <HAL_I2C_IsDeviceReady+0xd0>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10f      	bne.n	8006940 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2220      	movs	r2, #32
 8006924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800692c:	f043 0220 	orr.w	r2, r3, #32
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e088      	b.n	8006a52 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	f003 0320 	and.w	r3, r3, #32
 800694a:	2b20      	cmp	r3, #32
 800694c:	bf0c      	ite	eq
 800694e:	2301      	moveq	r3, #1
 8006950:	2300      	movne	r3, #0
 8006952:	b2db      	uxtb	r3, r3
 8006954:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	f003 0310 	and.w	r3, r3, #16
 8006960:	2b10      	cmp	r3, #16
 8006962:	bf0c      	ite	eq
 8006964:	2301      	moveq	r3, #1
 8006966:	2300      	movne	r3, #0
 8006968:	b2db      	uxtb	r3, r3
 800696a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800696c:	7ffb      	ldrb	r3, [r7, #31]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d102      	bne.n	8006978 <HAL_I2C_IsDeviceReady+0x128>
 8006972:	7fbb      	ldrb	r3, [r7, #30]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0c4      	beq.n	8006902 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	f003 0310 	and.w	r3, r3, #16
 8006982:	2b10      	cmp	r3, #16
 8006984:	d01a      	beq.n	80069bc <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2200      	movs	r2, #0
 800698e:	2120      	movs	r1, #32
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f000 f931 	bl	8006bf8 <I2C_WaitOnFlagUntilTimeout>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e058      	b.n	8006a52 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2220      	movs	r2, #32
 80069a6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2220      	movs	r2, #32
 80069ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80069b8:	2300      	movs	r3, #0
 80069ba:	e04a      	b.n	8006a52 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	2200      	movs	r2, #0
 80069c4:	2120      	movs	r1, #32
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 f916 	bl	8006bf8 <I2C_WaitOnFlagUntilTimeout>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e03d      	b.n	8006a52 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2210      	movs	r2, #16
 80069dc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2220      	movs	r2, #32
 80069e4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d118      	bne.n	8006a20 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069fc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2200      	movs	r2, #0
 8006a06:	2120      	movs	r1, #32
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 f8f5 	bl	8006bf8 <I2C_WaitOnFlagUntilTimeout>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e01c      	b.n	8006a52 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	3301      	adds	r3, #1
 8006a24:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	f63f af3d 	bhi.w	80068aa <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2220      	movs	r2, #32
 8006a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a3c:	f043 0220 	orr.w	r2, r3, #32
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e000      	b.n	8006a52 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8006a50:	2302      	movs	r3, #2
  }
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3720      	adds	r7, #32
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	02002000 	.word	0x02002000

08006a60 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	4608      	mov	r0, r1
 8006a6a:	4611      	mov	r1, r2
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	817b      	strh	r3, [r7, #10]
 8006a72:	460b      	mov	r3, r1
 8006a74:	813b      	strh	r3, [r7, #8]
 8006a76:	4613      	mov	r3, r2
 8006a78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006a7a:	88fb      	ldrh	r3, [r7, #6]
 8006a7c:	b2da      	uxtb	r2, r3
 8006a7e:	8979      	ldrh	r1, [r7, #10]
 8006a80:	4b20      	ldr	r3, [pc, #128]	@ (8006b04 <I2C_RequestMemoryWrite+0xa4>)
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 fa51 	bl	8006f30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a8e:	69fa      	ldr	r2, [r7, #28]
 8006a90:	69b9      	ldr	r1, [r7, #24]
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 f8f0 	bl	8006c78 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e02c      	b.n	8006afc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006aa2:	88fb      	ldrh	r3, [r7, #6]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d105      	bne.n	8006ab4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006aa8:	893b      	ldrh	r3, [r7, #8]
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ab2:	e015      	b.n	8006ae0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006ab4:	893b      	ldrh	r3, [r7, #8]
 8006ab6:	0a1b      	lsrs	r3, r3, #8
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ac2:	69fa      	ldr	r2, [r7, #28]
 8006ac4:	69b9      	ldr	r1, [r7, #24]
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f000 f8d6 	bl	8006c78 <I2C_WaitOnTXISFlagUntilTimeout>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e012      	b.n	8006afc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ad6:	893b      	ldrh	r3, [r7, #8]
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	2180      	movs	r1, #128	@ 0x80
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f000 f884 	bl	8006bf8 <I2C_WaitOnFlagUntilTimeout>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e000      	b.n	8006afc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	80002000 	.word	0x80002000

08006b08 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af02      	add	r7, sp, #8
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	4608      	mov	r0, r1
 8006b12:	4611      	mov	r1, r2
 8006b14:	461a      	mov	r2, r3
 8006b16:	4603      	mov	r3, r0
 8006b18:	817b      	strh	r3, [r7, #10]
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	813b      	strh	r3, [r7, #8]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006b22:	88fb      	ldrh	r3, [r7, #6]
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	8979      	ldrh	r1, [r7, #10]
 8006b28:	4b20      	ldr	r3, [pc, #128]	@ (8006bac <I2C_RequestMemoryRead+0xa4>)
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 f9fe 	bl	8006f30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b34:	69fa      	ldr	r2, [r7, #28]
 8006b36:	69b9      	ldr	r1, [r7, #24]
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f89d 	bl	8006c78 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e02c      	b.n	8006ba2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b48:	88fb      	ldrh	r3, [r7, #6]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d105      	bne.n	8006b5a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b4e:	893b      	ldrh	r3, [r7, #8]
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b58:	e015      	b.n	8006b86 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b5a:	893b      	ldrh	r3, [r7, #8]
 8006b5c:	0a1b      	lsrs	r3, r3, #8
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b68:	69fa      	ldr	r2, [r7, #28]
 8006b6a:	69b9      	ldr	r1, [r7, #24]
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 f883 	bl	8006c78 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d001      	beq.n	8006b7c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e012      	b.n	8006ba2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b7c:	893b      	ldrh	r3, [r7, #8]
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	2140      	movs	r1, #64	@ 0x40
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 f831 	bl	8006bf8 <I2C_WaitOnFlagUntilTimeout>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e000      	b.n	8006ba2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	80002000 	.word	0x80002000

08006bb0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d103      	bne.n	8006bce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d007      	beq.n	8006bec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	699a      	ldr	r2, [r3, #24]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f042 0201 	orr.w	r2, r2, #1
 8006bea:	619a      	str	r2, [r3, #24]
  }
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	603b      	str	r3, [r7, #0]
 8006c04:	4613      	mov	r3, r2
 8006c06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c08:	e022      	b.n	8006c50 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c10:	d01e      	beq.n	8006c50 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c12:	f7fe ffdf 	bl	8005bd4 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d302      	bcc.n	8006c28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d113      	bne.n	8006c50 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c2c:	f043 0220 	orr.w	r2, r3, #32
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e00f      	b.n	8006c70 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699a      	ldr	r2, [r3, #24]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	4013      	ands	r3, r2
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	bf0c      	ite	eq
 8006c60:	2301      	moveq	r3, #1
 8006c62:	2300      	movne	r3, #0
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	461a      	mov	r2, r3
 8006c68:	79fb      	ldrb	r3, [r7, #7]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d0cd      	beq.n	8006c0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c84:	e02c      	b.n	8006ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	68b9      	ldr	r1, [r7, #8]
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 f870 	bl	8006d70 <I2C_IsErrorOccurred>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e02a      	b.n	8006cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca0:	d01e      	beq.n	8006ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ca2:	f7fe ff97 	bl	8005bd4 <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d302      	bcc.n	8006cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d113      	bne.n	8006ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cbc:	f043 0220 	orr.w	r2, r3, #32
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e007      	b.n	8006cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d1cb      	bne.n	8006c86 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d04:	e028      	b.n	8006d58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	68b9      	ldr	r1, [r7, #8]
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 f830 	bl	8006d70 <I2C_IsErrorOccurred>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e026      	b.n	8006d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d1a:	f7fe ff5b 	bl	8005bd4 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d302      	bcc.n	8006d30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d113      	bne.n	8006d58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d34:	f043 0220 	orr.w	r2, r3, #32
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e007      	b.n	8006d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	f003 0320 	and.w	r3, r3, #32
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	d1cf      	bne.n	8006d06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b08a      	sub	sp, #40	@ 0x28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	f003 0310 	and.w	r3, r3, #16
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d068      	beq.n	8006e6e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2210      	movs	r2, #16
 8006da2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006da4:	e049      	b.n	8006e3a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dac:	d045      	beq.n	8006e3a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006dae:	f7fe ff11 	bl	8005bd4 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d302      	bcc.n	8006dc4 <I2C_IsErrorOccurred+0x54>
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d13a      	bne.n	8006e3a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006dd6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006de2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006de6:	d121      	bne.n	8006e2c <I2C_IsErrorOccurred+0xbc>
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006dee:	d01d      	beq.n	8006e2c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006df0:	7cfb      	ldrb	r3, [r7, #19]
 8006df2:	2b20      	cmp	r3, #32
 8006df4:	d01a      	beq.n	8006e2c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	685a      	ldr	r2, [r3, #4]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e04:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006e06:	f7fe fee5 	bl	8005bd4 <HAL_GetTick>
 8006e0a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e0c:	e00e      	b.n	8006e2c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006e0e:	f7fe fee1 	bl	8005bd4 <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	2b19      	cmp	r3, #25
 8006e1a:	d907      	bls.n	8006e2c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	f043 0320 	orr.w	r3, r3, #32
 8006e22:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006e2a:	e006      	b.n	8006e3a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	f003 0320 	and.w	r3, r3, #32
 8006e36:	2b20      	cmp	r3, #32
 8006e38:	d1e9      	bne.n	8006e0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	f003 0320 	and.w	r3, r3, #32
 8006e44:	2b20      	cmp	r3, #32
 8006e46:	d003      	beq.n	8006e50 <I2C_IsErrorOccurred+0xe0>
 8006e48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d0aa      	beq.n	8006da6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006e50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d103      	bne.n	8006e60 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	f043 0304 	orr.w	r3, r3, #4
 8006e66:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00b      	beq.n	8006e98 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006e80:	6a3b      	ldr	r3, [r7, #32]
 8006e82:	f043 0301 	orr.w	r3, r3, #1
 8006e86:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006e90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00b      	beq.n	8006eba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	f043 0308 	orr.w	r3, r3, #8
 8006ea8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006eb2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00b      	beq.n	8006edc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	f043 0302 	orr.w	r3, r3, #2
 8006eca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ed4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006edc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d01c      	beq.n	8006f1e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f7ff fe63 	bl	8006bb0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6859      	ldr	r1, [r3, #4]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8006f2c <I2C_IsErrorOccurred+0x1bc>)
 8006ef6:	400b      	ands	r3, r1
 8006ef8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	431a      	orrs	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3728      	adds	r7, #40	@ 0x28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	fe00e800 	.word	0xfe00e800

08006f30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	607b      	str	r3, [r7, #4]
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	817b      	strh	r3, [r7, #10]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f42:	897b      	ldrh	r3, [r7, #10]
 8006f44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f48:	7a7b      	ldrb	r3, [r7, #9]
 8006f4a:	041b      	lsls	r3, r3, #16
 8006f4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f5e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	0d5b      	lsrs	r3, r3, #21
 8006f6a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006f6e:	4b08      	ldr	r3, [pc, #32]	@ (8006f90 <I2C_TransferConfig+0x60>)
 8006f70:	430b      	orrs	r3, r1
 8006f72:	43db      	mvns	r3, r3
 8006f74:	ea02 0103 	and.w	r1, r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	697a      	ldr	r2, [r7, #20]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006f82:	bf00      	nop
 8006f84:	371c      	adds	r7, #28
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	03ff63ff 	.word	0x03ff63ff

08006f94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b20      	cmp	r3, #32
 8006fa8:	d138      	bne.n	800701c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d101      	bne.n	8006fb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	e032      	b.n	800701e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2224      	movs	r2, #36	@ 0x24
 8006fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 0201 	bic.w	r2, r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006fe6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6819      	ldr	r1, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0201 	orr.w	r2, r2, #1
 8007006:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2220      	movs	r2, #32
 800700c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	e000      	b.n	800701e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800701c:	2302      	movs	r3, #2
  }
}
 800701e:	4618      	mov	r0, r3
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800702a:	b480      	push	{r7}
 800702c:	b085      	sub	sp, #20
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b20      	cmp	r3, #32
 800703e:	d139      	bne.n	80070b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007046:	2b01      	cmp	r3, #1
 8007048:	d101      	bne.n	800704e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800704a:	2302      	movs	r3, #2
 800704c:	e033      	b.n	80070b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2224      	movs	r2, #36	@ 0x24
 800705a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 0201 	bic.w	r2, r2, #1
 800706c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800707c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	021b      	lsls	r3, r3, #8
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	4313      	orrs	r3, r2
 8007086:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f042 0201 	orr.w	r2, r2, #1
 800709e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2220      	movs	r2, #32
 80070a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	e000      	b.n	80070b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80070b4:	2302      	movs	r3, #2
  }
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
	...

080070c4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80070c4:	b480      	push	{r7}
 80070c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070c8:	4b05      	ldr	r3, [pc, #20]	@ (80070e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a04      	ldr	r2, [pc, #16]	@ (80070e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80070ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070d2:	6013      	str	r3, [r2, #0]
}
 80070d4:	bf00      	nop
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	40007000 	.word	0x40007000

080070e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80070ec:	2300      	movs	r3, #0
 80070ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e291      	b.n	800761e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	f000 8087 	beq.w	8007216 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007108:	4b96      	ldr	r3, [pc, #600]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f003 030c 	and.w	r3, r3, #12
 8007110:	2b04      	cmp	r3, #4
 8007112:	d00c      	beq.n	800712e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007114:	4b93      	ldr	r3, [pc, #588]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f003 030c 	and.w	r3, r3, #12
 800711c:	2b08      	cmp	r3, #8
 800711e:	d112      	bne.n	8007146 <HAL_RCC_OscConfig+0x62>
 8007120:	4b90      	ldr	r3, [pc, #576]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007128:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800712c:	d10b      	bne.n	8007146 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800712e:	4b8d      	ldr	r3, [pc, #564]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d06c      	beq.n	8007214 <HAL_RCC_OscConfig+0x130>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d168      	bne.n	8007214 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e26b      	b.n	800761e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800714e:	d106      	bne.n	800715e <HAL_RCC_OscConfig+0x7a>
 8007150:	4b84      	ldr	r3, [pc, #528]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a83      	ldr	r2, [pc, #524]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 8007156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	e02e      	b.n	80071bc <HAL_RCC_OscConfig+0xd8>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10c      	bne.n	8007180 <HAL_RCC_OscConfig+0x9c>
 8007166:	4b7f      	ldr	r3, [pc, #508]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a7e      	ldr	r2, [pc, #504]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 800716c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007170:	6013      	str	r3, [r2, #0]
 8007172:	4b7c      	ldr	r3, [pc, #496]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a7b      	ldr	r2, [pc, #492]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 8007178:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800717c:	6013      	str	r3, [r2, #0]
 800717e:	e01d      	b.n	80071bc <HAL_RCC_OscConfig+0xd8>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007188:	d10c      	bne.n	80071a4 <HAL_RCC_OscConfig+0xc0>
 800718a:	4b76      	ldr	r3, [pc, #472]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a75      	ldr	r2, [pc, #468]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 8007190:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007194:	6013      	str	r3, [r2, #0]
 8007196:	4b73      	ldr	r3, [pc, #460]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a72      	ldr	r2, [pc, #456]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 800719c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	e00b      	b.n	80071bc <HAL_RCC_OscConfig+0xd8>
 80071a4:	4b6f      	ldr	r3, [pc, #444]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a6e      	ldr	r2, [pc, #440]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 80071aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071ae:	6013      	str	r3, [r2, #0]
 80071b0:	4b6c      	ldr	r3, [pc, #432]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a6b      	ldr	r2, [pc, #428]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 80071b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d013      	beq.n	80071ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c4:	f7fe fd06 	bl	8005bd4 <HAL_GetTick>
 80071c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071ca:	e008      	b.n	80071de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071cc:	f7fe fd02 	bl	8005bd4 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	2b64      	cmp	r3, #100	@ 0x64
 80071d8:	d901      	bls.n	80071de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e21f      	b.n	800761e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071de:	4b61      	ldr	r3, [pc, #388]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d0f0      	beq.n	80071cc <HAL_RCC_OscConfig+0xe8>
 80071ea:	e014      	b.n	8007216 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ec:	f7fe fcf2 	bl	8005bd4 <HAL_GetTick>
 80071f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071f2:	e008      	b.n	8007206 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071f4:	f7fe fcee 	bl	8005bd4 <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	2b64      	cmp	r3, #100	@ 0x64
 8007200:	d901      	bls.n	8007206 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e20b      	b.n	800761e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007206:	4b57      	ldr	r3, [pc, #348]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1f0      	bne.n	80071f4 <HAL_RCC_OscConfig+0x110>
 8007212:	e000      	b.n	8007216 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b00      	cmp	r3, #0
 8007220:	d069      	beq.n	80072f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007222:	4b50      	ldr	r3, [pc, #320]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f003 030c 	and.w	r3, r3, #12
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00b      	beq.n	8007246 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800722e:	4b4d      	ldr	r3, [pc, #308]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f003 030c 	and.w	r3, r3, #12
 8007236:	2b08      	cmp	r3, #8
 8007238:	d11c      	bne.n	8007274 <HAL_RCC_OscConfig+0x190>
 800723a:	4b4a      	ldr	r3, [pc, #296]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d116      	bne.n	8007274 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007246:	4b47      	ldr	r3, [pc, #284]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 0302 	and.w	r3, r3, #2
 800724e:	2b00      	cmp	r3, #0
 8007250:	d005      	beq.n	800725e <HAL_RCC_OscConfig+0x17a>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d001      	beq.n	800725e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e1df      	b.n	800761e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800725e:	4b41      	ldr	r3, [pc, #260]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	00db      	lsls	r3, r3, #3
 800726c:	493d      	ldr	r1, [pc, #244]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 800726e:	4313      	orrs	r3, r2
 8007270:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007272:	e040      	b.n	80072f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d023      	beq.n	80072c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800727c:	4b39      	ldr	r3, [pc, #228]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a38      	ldr	r2, [pc, #224]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 8007282:	f043 0301 	orr.w	r3, r3, #1
 8007286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007288:	f7fe fca4 	bl	8005bd4 <HAL_GetTick>
 800728c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800728e:	e008      	b.n	80072a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007290:	f7fe fca0 	bl	8005bd4 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	2b02      	cmp	r3, #2
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e1bd      	b.n	800761e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072a2:	4b30      	ldr	r3, [pc, #192]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d0f0      	beq.n	8007290 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072ae:	4b2d      	ldr	r3, [pc, #180]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	4929      	ldr	r1, [pc, #164]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	600b      	str	r3, [r1, #0]
 80072c2:	e018      	b.n	80072f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072c4:	4b27      	ldr	r3, [pc, #156]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a26      	ldr	r2, [pc, #152]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 80072ca:	f023 0301 	bic.w	r3, r3, #1
 80072ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d0:	f7fe fc80 	bl	8005bd4 <HAL_GetTick>
 80072d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072d6:	e008      	b.n	80072ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072d8:	f7fe fc7c 	bl	8005bd4 <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d901      	bls.n	80072ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e199      	b.n	800761e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072ea:	4b1e      	ldr	r3, [pc, #120]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0302 	and.w	r3, r3, #2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1f0      	bne.n	80072d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0308 	and.w	r3, r3, #8
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d038      	beq.n	8007374 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d019      	beq.n	800733e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800730a:	4b16      	ldr	r3, [pc, #88]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 800730c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800730e:	4a15      	ldr	r2, [pc, #84]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 8007310:	f043 0301 	orr.w	r3, r3, #1
 8007314:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007316:	f7fe fc5d 	bl	8005bd4 <HAL_GetTick>
 800731a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800731c:	e008      	b.n	8007330 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800731e:	f7fe fc59 	bl	8005bd4 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	2b02      	cmp	r3, #2
 800732a:	d901      	bls.n	8007330 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e176      	b.n	800761e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007330:	4b0c      	ldr	r3, [pc, #48]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 8007332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0f0      	beq.n	800731e <HAL_RCC_OscConfig+0x23a>
 800733c:	e01a      	b.n	8007374 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800733e:	4b09      	ldr	r3, [pc, #36]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 8007340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007342:	4a08      	ldr	r2, [pc, #32]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 8007344:	f023 0301 	bic.w	r3, r3, #1
 8007348:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800734a:	f7fe fc43 	bl	8005bd4 <HAL_GetTick>
 800734e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007350:	e00a      	b.n	8007368 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007352:	f7fe fc3f 	bl	8005bd4 <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	2b02      	cmp	r3, #2
 800735e:	d903      	bls.n	8007368 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e15c      	b.n	800761e <HAL_RCC_OscConfig+0x53a>
 8007364:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007368:	4b91      	ldr	r3, [pc, #580]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 800736a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1ee      	bne.n	8007352 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 80a4 	beq.w	80074ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007382:	4b8b      	ldr	r3, [pc, #556]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 8007384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10d      	bne.n	80073aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800738e:	4b88      	ldr	r3, [pc, #544]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 8007390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007392:	4a87      	ldr	r2, [pc, #540]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 8007394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007398:	6413      	str	r3, [r2, #64]	@ 0x40
 800739a:	4b85      	ldr	r3, [pc, #532]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 800739c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800739e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073a2:	60bb      	str	r3, [r7, #8]
 80073a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073a6:	2301      	movs	r3, #1
 80073a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073aa:	4b82      	ldr	r3, [pc, #520]	@ (80075b4 <HAL_RCC_OscConfig+0x4d0>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d118      	bne.n	80073e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80073b6:	4b7f      	ldr	r3, [pc, #508]	@ (80075b4 <HAL_RCC_OscConfig+0x4d0>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a7e      	ldr	r2, [pc, #504]	@ (80075b4 <HAL_RCC_OscConfig+0x4d0>)
 80073bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073c2:	f7fe fc07 	bl	8005bd4 <HAL_GetTick>
 80073c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073c8:	e008      	b.n	80073dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073ca:	f7fe fc03 	bl	8005bd4 <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	2b64      	cmp	r3, #100	@ 0x64
 80073d6:	d901      	bls.n	80073dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e120      	b.n	800761e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073dc:	4b75      	ldr	r3, [pc, #468]	@ (80075b4 <HAL_RCC_OscConfig+0x4d0>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d0f0      	beq.n	80073ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d106      	bne.n	80073fe <HAL_RCC_OscConfig+0x31a>
 80073f0:	4b6f      	ldr	r3, [pc, #444]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 80073f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073f4:	4a6e      	ldr	r2, [pc, #440]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 80073f6:	f043 0301 	orr.w	r3, r3, #1
 80073fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80073fc:	e02d      	b.n	800745a <HAL_RCC_OscConfig+0x376>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10c      	bne.n	8007420 <HAL_RCC_OscConfig+0x33c>
 8007406:	4b6a      	ldr	r3, [pc, #424]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 8007408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800740a:	4a69      	ldr	r2, [pc, #420]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 800740c:	f023 0301 	bic.w	r3, r3, #1
 8007410:	6713      	str	r3, [r2, #112]	@ 0x70
 8007412:	4b67      	ldr	r3, [pc, #412]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 8007414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007416:	4a66      	ldr	r2, [pc, #408]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 8007418:	f023 0304 	bic.w	r3, r3, #4
 800741c:	6713      	str	r3, [r2, #112]	@ 0x70
 800741e:	e01c      	b.n	800745a <HAL_RCC_OscConfig+0x376>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	2b05      	cmp	r3, #5
 8007426:	d10c      	bne.n	8007442 <HAL_RCC_OscConfig+0x35e>
 8007428:	4b61      	ldr	r3, [pc, #388]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 800742a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800742c:	4a60      	ldr	r2, [pc, #384]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 800742e:	f043 0304 	orr.w	r3, r3, #4
 8007432:	6713      	str	r3, [r2, #112]	@ 0x70
 8007434:	4b5e      	ldr	r3, [pc, #376]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 8007436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007438:	4a5d      	ldr	r2, [pc, #372]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 800743a:	f043 0301 	orr.w	r3, r3, #1
 800743e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007440:	e00b      	b.n	800745a <HAL_RCC_OscConfig+0x376>
 8007442:	4b5b      	ldr	r3, [pc, #364]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 8007444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007446:	4a5a      	ldr	r2, [pc, #360]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 8007448:	f023 0301 	bic.w	r3, r3, #1
 800744c:	6713      	str	r3, [r2, #112]	@ 0x70
 800744e:	4b58      	ldr	r3, [pc, #352]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 8007450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007452:	4a57      	ldr	r2, [pc, #348]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 8007454:	f023 0304 	bic.w	r3, r3, #4
 8007458:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d015      	beq.n	800748e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007462:	f7fe fbb7 	bl	8005bd4 <HAL_GetTick>
 8007466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007468:	e00a      	b.n	8007480 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800746a:	f7fe fbb3 	bl	8005bd4 <HAL_GetTick>
 800746e:	4602      	mov	r2, r0
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007478:	4293      	cmp	r3, r2
 800747a:	d901      	bls.n	8007480 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e0ce      	b.n	800761e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007480:	4b4b      	ldr	r3, [pc, #300]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 8007482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d0ee      	beq.n	800746a <HAL_RCC_OscConfig+0x386>
 800748c:	e014      	b.n	80074b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800748e:	f7fe fba1 	bl	8005bd4 <HAL_GetTick>
 8007492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007494:	e00a      	b.n	80074ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007496:	f7fe fb9d 	bl	8005bd4 <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d901      	bls.n	80074ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e0b8      	b.n	800761e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074ac:	4b40      	ldr	r3, [pc, #256]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 80074ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074b0:	f003 0302 	and.w	r3, r3, #2
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1ee      	bne.n	8007496 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d105      	bne.n	80074ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074be:	4b3c      	ldr	r3, [pc, #240]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 80074c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c2:	4a3b      	ldr	r2, [pc, #236]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 80074c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074c8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f000 80a4 	beq.w	800761c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074d4:	4b36      	ldr	r3, [pc, #216]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f003 030c 	and.w	r3, r3, #12
 80074dc:	2b08      	cmp	r3, #8
 80074de:	d06b      	beq.n	80075b8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d149      	bne.n	800757c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074e8:	4b31      	ldr	r3, [pc, #196]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a30      	ldr	r2, [pc, #192]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 80074ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f4:	f7fe fb6e 	bl	8005bd4 <HAL_GetTick>
 80074f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074fa:	e008      	b.n	800750e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074fc:	f7fe fb6a 	bl	8005bd4 <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	2b02      	cmp	r3, #2
 8007508:	d901      	bls.n	800750e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e087      	b.n	800761e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800750e:	4b28      	ldr	r3, [pc, #160]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1f0      	bne.n	80074fc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	69da      	ldr	r2, [r3, #28]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	431a      	orrs	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007528:	019b      	lsls	r3, r3, #6
 800752a:	431a      	orrs	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007530:	085b      	lsrs	r3, r3, #1
 8007532:	3b01      	subs	r3, #1
 8007534:	041b      	lsls	r3, r3, #16
 8007536:	431a      	orrs	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753c:	061b      	lsls	r3, r3, #24
 800753e:	4313      	orrs	r3, r2
 8007540:	4a1b      	ldr	r2, [pc, #108]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 8007542:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007546:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007548:	4b19      	ldr	r3, [pc, #100]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a18      	ldr	r2, [pc, #96]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 800754e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007554:	f7fe fb3e 	bl	8005bd4 <HAL_GetTick>
 8007558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800755a:	e008      	b.n	800756e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800755c:	f7fe fb3a 	bl	8005bd4 <HAL_GetTick>
 8007560:	4602      	mov	r2, r0
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	2b02      	cmp	r3, #2
 8007568:	d901      	bls.n	800756e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e057      	b.n	800761e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800756e:	4b10      	ldr	r3, [pc, #64]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d0f0      	beq.n	800755c <HAL_RCC_OscConfig+0x478>
 800757a:	e04f      	b.n	800761c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800757c:	4b0c      	ldr	r3, [pc, #48]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a0b      	ldr	r2, [pc, #44]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 8007582:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007588:	f7fe fb24 	bl	8005bd4 <HAL_GetTick>
 800758c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800758e:	e008      	b.n	80075a2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007590:	f7fe fb20 	bl	8005bd4 <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	2b02      	cmp	r3, #2
 800759c:	d901      	bls.n	80075a2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e03d      	b.n	800761e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075a2:	4b03      	ldr	r3, [pc, #12]	@ (80075b0 <HAL_RCC_OscConfig+0x4cc>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1f0      	bne.n	8007590 <HAL_RCC_OscConfig+0x4ac>
 80075ae:	e035      	b.n	800761c <HAL_RCC_OscConfig+0x538>
 80075b0:	40023800 	.word	0x40023800
 80075b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80075b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007628 <HAL_RCC_OscConfig+0x544>)
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d028      	beq.n	8007618 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d121      	bne.n	8007618 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075de:	429a      	cmp	r2, r3
 80075e0:	d11a      	bne.n	8007618 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80075e8:	4013      	ands	r3, r2
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80075ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d111      	bne.n	8007618 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fe:	085b      	lsrs	r3, r3, #1
 8007600:	3b01      	subs	r3, #1
 8007602:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007604:	429a      	cmp	r2, r3
 8007606:	d107      	bne.n	8007618 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007612:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007614:	429a      	cmp	r2, r3
 8007616:	d001      	beq.n	800761c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e000      	b.n	800761e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	40023800 	.word	0x40023800

0800762c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007636:	2300      	movs	r3, #0
 8007638:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d101      	bne.n	8007644 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e0d0      	b.n	80077e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007644:	4b6a      	ldr	r3, [pc, #424]	@ (80077f0 <HAL_RCC_ClockConfig+0x1c4>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 030f 	and.w	r3, r3, #15
 800764c:	683a      	ldr	r2, [r7, #0]
 800764e:	429a      	cmp	r2, r3
 8007650:	d910      	bls.n	8007674 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007652:	4b67      	ldr	r3, [pc, #412]	@ (80077f0 <HAL_RCC_ClockConfig+0x1c4>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f023 020f 	bic.w	r2, r3, #15
 800765a:	4965      	ldr	r1, [pc, #404]	@ (80077f0 <HAL_RCC_ClockConfig+0x1c4>)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	4313      	orrs	r3, r2
 8007660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007662:	4b63      	ldr	r3, [pc, #396]	@ (80077f0 <HAL_RCC_ClockConfig+0x1c4>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 030f 	and.w	r3, r3, #15
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	429a      	cmp	r2, r3
 800766e:	d001      	beq.n	8007674 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e0b8      	b.n	80077e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	2b00      	cmp	r3, #0
 800767e:	d020      	beq.n	80076c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0304 	and.w	r3, r3, #4
 8007688:	2b00      	cmp	r3, #0
 800768a:	d005      	beq.n	8007698 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800768c:	4b59      	ldr	r3, [pc, #356]	@ (80077f4 <HAL_RCC_ClockConfig+0x1c8>)
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	4a58      	ldr	r2, [pc, #352]	@ (80077f4 <HAL_RCC_ClockConfig+0x1c8>)
 8007692:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007696:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0308 	and.w	r3, r3, #8
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d005      	beq.n	80076b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80076a4:	4b53      	ldr	r3, [pc, #332]	@ (80077f4 <HAL_RCC_ClockConfig+0x1c8>)
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	4a52      	ldr	r2, [pc, #328]	@ (80077f4 <HAL_RCC_ClockConfig+0x1c8>)
 80076aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80076ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076b0:	4b50      	ldr	r3, [pc, #320]	@ (80077f4 <HAL_RCC_ClockConfig+0x1c8>)
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	494d      	ldr	r1, [pc, #308]	@ (80077f4 <HAL_RCC_ClockConfig+0x1c8>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d040      	beq.n	8007750 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d107      	bne.n	80076e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076d6:	4b47      	ldr	r3, [pc, #284]	@ (80077f4 <HAL_RCC_ClockConfig+0x1c8>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d115      	bne.n	800770e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e07f      	b.n	80077e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d107      	bne.n	80076fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076ee:	4b41      	ldr	r3, [pc, #260]	@ (80077f4 <HAL_RCC_ClockConfig+0x1c8>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d109      	bne.n	800770e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e073      	b.n	80077e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076fe:	4b3d      	ldr	r3, [pc, #244]	@ (80077f4 <HAL_RCC_ClockConfig+0x1c8>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0302 	and.w	r3, r3, #2
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e06b      	b.n	80077e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800770e:	4b39      	ldr	r3, [pc, #228]	@ (80077f4 <HAL_RCC_ClockConfig+0x1c8>)
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f023 0203 	bic.w	r2, r3, #3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	4936      	ldr	r1, [pc, #216]	@ (80077f4 <HAL_RCC_ClockConfig+0x1c8>)
 800771c:	4313      	orrs	r3, r2
 800771e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007720:	f7fe fa58 	bl	8005bd4 <HAL_GetTick>
 8007724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007726:	e00a      	b.n	800773e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007728:	f7fe fa54 	bl	8005bd4 <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007736:	4293      	cmp	r3, r2
 8007738:	d901      	bls.n	800773e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e053      	b.n	80077e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800773e:	4b2d      	ldr	r3, [pc, #180]	@ (80077f4 <HAL_RCC_ClockConfig+0x1c8>)
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f003 020c 	and.w	r2, r3, #12
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	429a      	cmp	r2, r3
 800774e:	d1eb      	bne.n	8007728 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007750:	4b27      	ldr	r3, [pc, #156]	@ (80077f0 <HAL_RCC_ClockConfig+0x1c4>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 030f 	and.w	r3, r3, #15
 8007758:	683a      	ldr	r2, [r7, #0]
 800775a:	429a      	cmp	r2, r3
 800775c:	d210      	bcs.n	8007780 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800775e:	4b24      	ldr	r3, [pc, #144]	@ (80077f0 <HAL_RCC_ClockConfig+0x1c4>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f023 020f 	bic.w	r2, r3, #15
 8007766:	4922      	ldr	r1, [pc, #136]	@ (80077f0 <HAL_RCC_ClockConfig+0x1c4>)
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	4313      	orrs	r3, r2
 800776c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800776e:	4b20      	ldr	r3, [pc, #128]	@ (80077f0 <HAL_RCC_ClockConfig+0x1c4>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 030f 	and.w	r3, r3, #15
 8007776:	683a      	ldr	r2, [r7, #0]
 8007778:	429a      	cmp	r2, r3
 800777a:	d001      	beq.n	8007780 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e032      	b.n	80077e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0304 	and.w	r3, r3, #4
 8007788:	2b00      	cmp	r3, #0
 800778a:	d008      	beq.n	800779e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800778c:	4b19      	ldr	r3, [pc, #100]	@ (80077f4 <HAL_RCC_ClockConfig+0x1c8>)
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	4916      	ldr	r1, [pc, #88]	@ (80077f4 <HAL_RCC_ClockConfig+0x1c8>)
 800779a:	4313      	orrs	r3, r2
 800779c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0308 	and.w	r3, r3, #8
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d009      	beq.n	80077be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80077aa:	4b12      	ldr	r3, [pc, #72]	@ (80077f4 <HAL_RCC_ClockConfig+0x1c8>)
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	00db      	lsls	r3, r3, #3
 80077b8:	490e      	ldr	r1, [pc, #56]	@ (80077f4 <HAL_RCC_ClockConfig+0x1c8>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80077be:	f000 f821 	bl	8007804 <HAL_RCC_GetSysClockFreq>
 80077c2:	4602      	mov	r2, r0
 80077c4:	4b0b      	ldr	r3, [pc, #44]	@ (80077f4 <HAL_RCC_ClockConfig+0x1c8>)
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	091b      	lsrs	r3, r3, #4
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	490a      	ldr	r1, [pc, #40]	@ (80077f8 <HAL_RCC_ClockConfig+0x1cc>)
 80077d0:	5ccb      	ldrb	r3, [r1, r3]
 80077d2:	fa22 f303 	lsr.w	r3, r2, r3
 80077d6:	4a09      	ldr	r2, [pc, #36]	@ (80077fc <HAL_RCC_ClockConfig+0x1d0>)
 80077d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80077da:	4b09      	ldr	r3, [pc, #36]	@ (8007800 <HAL_RCC_ClockConfig+0x1d4>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fe f9b4 	bl	8005b4c <HAL_InitTick>

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	40023c00 	.word	0x40023c00
 80077f4:	40023800 	.word	0x40023800
 80077f8:	0800c688 	.word	0x0800c688
 80077fc:	20000158 	.word	0x20000158
 8007800:	2000015c 	.word	0x2000015c

08007804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007808:	b094      	sub	sp, #80	@ 0x50
 800780a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800780c:	2300      	movs	r3, #0
 800780e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007810:	2300      	movs	r3, #0
 8007812:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007814:	2300      	movs	r3, #0
 8007816:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8007818:	2300      	movs	r3, #0
 800781a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800781c:	4b79      	ldr	r3, [pc, #484]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x200>)
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f003 030c 	and.w	r3, r3, #12
 8007824:	2b08      	cmp	r3, #8
 8007826:	d00d      	beq.n	8007844 <HAL_RCC_GetSysClockFreq+0x40>
 8007828:	2b08      	cmp	r3, #8
 800782a:	f200 80e1 	bhi.w	80079f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800782e:	2b00      	cmp	r3, #0
 8007830:	d002      	beq.n	8007838 <HAL_RCC_GetSysClockFreq+0x34>
 8007832:	2b04      	cmp	r3, #4
 8007834:	d003      	beq.n	800783e <HAL_RCC_GetSysClockFreq+0x3a>
 8007836:	e0db      	b.n	80079f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007838:	4b73      	ldr	r3, [pc, #460]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0x204>)
 800783a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800783c:	e0db      	b.n	80079f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800783e:	4b73      	ldr	r3, [pc, #460]	@ (8007a0c <HAL_RCC_GetSysClockFreq+0x208>)
 8007840:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007842:	e0d8      	b.n	80079f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007844:	4b6f      	ldr	r3, [pc, #444]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x200>)
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800784c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800784e:	4b6d      	ldr	r3, [pc, #436]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x200>)
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d063      	beq.n	8007922 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800785a:	4b6a      	ldr	r3, [pc, #424]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x200>)
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	099b      	lsrs	r3, r3, #6
 8007860:	2200      	movs	r2, #0
 8007862:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007864:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800786c:	633b      	str	r3, [r7, #48]	@ 0x30
 800786e:	2300      	movs	r3, #0
 8007870:	637b      	str	r3, [r7, #52]	@ 0x34
 8007872:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007876:	4622      	mov	r2, r4
 8007878:	462b      	mov	r3, r5
 800787a:	f04f 0000 	mov.w	r0, #0
 800787e:	f04f 0100 	mov.w	r1, #0
 8007882:	0159      	lsls	r1, r3, #5
 8007884:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007888:	0150      	lsls	r0, r2, #5
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	4621      	mov	r1, r4
 8007890:	1a51      	subs	r1, r2, r1
 8007892:	6139      	str	r1, [r7, #16]
 8007894:	4629      	mov	r1, r5
 8007896:	eb63 0301 	sbc.w	r3, r3, r1
 800789a:	617b      	str	r3, [r7, #20]
 800789c:	f04f 0200 	mov.w	r2, #0
 80078a0:	f04f 0300 	mov.w	r3, #0
 80078a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80078a8:	4659      	mov	r1, fp
 80078aa:	018b      	lsls	r3, r1, #6
 80078ac:	4651      	mov	r1, sl
 80078ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80078b2:	4651      	mov	r1, sl
 80078b4:	018a      	lsls	r2, r1, #6
 80078b6:	4651      	mov	r1, sl
 80078b8:	ebb2 0801 	subs.w	r8, r2, r1
 80078bc:	4659      	mov	r1, fp
 80078be:	eb63 0901 	sbc.w	r9, r3, r1
 80078c2:	f04f 0200 	mov.w	r2, #0
 80078c6:	f04f 0300 	mov.w	r3, #0
 80078ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80078ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80078d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80078d6:	4690      	mov	r8, r2
 80078d8:	4699      	mov	r9, r3
 80078da:	4623      	mov	r3, r4
 80078dc:	eb18 0303 	adds.w	r3, r8, r3
 80078e0:	60bb      	str	r3, [r7, #8]
 80078e2:	462b      	mov	r3, r5
 80078e4:	eb49 0303 	adc.w	r3, r9, r3
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	f04f 0200 	mov.w	r2, #0
 80078ee:	f04f 0300 	mov.w	r3, #0
 80078f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80078f6:	4629      	mov	r1, r5
 80078f8:	024b      	lsls	r3, r1, #9
 80078fa:	4621      	mov	r1, r4
 80078fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007900:	4621      	mov	r1, r4
 8007902:	024a      	lsls	r2, r1, #9
 8007904:	4610      	mov	r0, r2
 8007906:	4619      	mov	r1, r3
 8007908:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800790a:	2200      	movs	r2, #0
 800790c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800790e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007910:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007914:	f7f9 f9d2 	bl	8000cbc <__aeabi_uldivmod>
 8007918:	4602      	mov	r2, r0
 800791a:	460b      	mov	r3, r1
 800791c:	4613      	mov	r3, r2
 800791e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007920:	e058      	b.n	80079d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007922:	4b38      	ldr	r3, [pc, #224]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x200>)
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	099b      	lsrs	r3, r3, #6
 8007928:	2200      	movs	r2, #0
 800792a:	4618      	mov	r0, r3
 800792c:	4611      	mov	r1, r2
 800792e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007932:	623b      	str	r3, [r7, #32]
 8007934:	2300      	movs	r3, #0
 8007936:	627b      	str	r3, [r7, #36]	@ 0x24
 8007938:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800793c:	4642      	mov	r2, r8
 800793e:	464b      	mov	r3, r9
 8007940:	f04f 0000 	mov.w	r0, #0
 8007944:	f04f 0100 	mov.w	r1, #0
 8007948:	0159      	lsls	r1, r3, #5
 800794a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800794e:	0150      	lsls	r0, r2, #5
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4641      	mov	r1, r8
 8007956:	ebb2 0a01 	subs.w	sl, r2, r1
 800795a:	4649      	mov	r1, r9
 800795c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007960:	f04f 0200 	mov.w	r2, #0
 8007964:	f04f 0300 	mov.w	r3, #0
 8007968:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800796c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007970:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007974:	ebb2 040a 	subs.w	r4, r2, sl
 8007978:	eb63 050b 	sbc.w	r5, r3, fp
 800797c:	f04f 0200 	mov.w	r2, #0
 8007980:	f04f 0300 	mov.w	r3, #0
 8007984:	00eb      	lsls	r3, r5, #3
 8007986:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800798a:	00e2      	lsls	r2, r4, #3
 800798c:	4614      	mov	r4, r2
 800798e:	461d      	mov	r5, r3
 8007990:	4643      	mov	r3, r8
 8007992:	18e3      	adds	r3, r4, r3
 8007994:	603b      	str	r3, [r7, #0]
 8007996:	464b      	mov	r3, r9
 8007998:	eb45 0303 	adc.w	r3, r5, r3
 800799c:	607b      	str	r3, [r7, #4]
 800799e:	f04f 0200 	mov.w	r2, #0
 80079a2:	f04f 0300 	mov.w	r3, #0
 80079a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80079aa:	4629      	mov	r1, r5
 80079ac:	028b      	lsls	r3, r1, #10
 80079ae:	4621      	mov	r1, r4
 80079b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80079b4:	4621      	mov	r1, r4
 80079b6:	028a      	lsls	r2, r1, #10
 80079b8:	4610      	mov	r0, r2
 80079ba:	4619      	mov	r1, r3
 80079bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079be:	2200      	movs	r2, #0
 80079c0:	61bb      	str	r3, [r7, #24]
 80079c2:	61fa      	str	r2, [r7, #28]
 80079c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079c8:	f7f9 f978 	bl	8000cbc <__aeabi_uldivmod>
 80079cc:	4602      	mov	r2, r0
 80079ce:	460b      	mov	r3, r1
 80079d0:	4613      	mov	r3, r2
 80079d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80079d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x200>)
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	0c1b      	lsrs	r3, r3, #16
 80079da:	f003 0303 	and.w	r3, r3, #3
 80079de:	3301      	adds	r3, #1
 80079e0:	005b      	lsls	r3, r3, #1
 80079e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80079e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80079e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80079ee:	e002      	b.n	80079f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80079f0:	4b05      	ldr	r3, [pc, #20]	@ (8007a08 <HAL_RCC_GetSysClockFreq+0x204>)
 80079f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80079f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80079f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3750      	adds	r7, #80	@ 0x50
 80079fc:	46bd      	mov	sp, r7
 80079fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a02:	bf00      	nop
 8007a04:	40023800 	.word	0x40023800
 8007a08:	00f42400 	.word	0x00f42400
 8007a0c:	007a1200 	.word	0x007a1200

08007a10 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a10:	b480      	push	{r7}
 8007a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a14:	4b03      	ldr	r3, [pc, #12]	@ (8007a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a16:	681b      	ldr	r3, [r3, #0]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	20000158 	.word	0x20000158

08007a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a2c:	f7ff fff0 	bl	8007a10 <HAL_RCC_GetHCLKFreq>
 8007a30:	4602      	mov	r2, r0
 8007a32:	4b05      	ldr	r3, [pc, #20]	@ (8007a48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	0a9b      	lsrs	r3, r3, #10
 8007a38:	f003 0307 	and.w	r3, r3, #7
 8007a3c:	4903      	ldr	r1, [pc, #12]	@ (8007a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a3e:	5ccb      	ldrb	r3, [r1, r3]
 8007a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	40023800 	.word	0x40023800
 8007a4c:	0800c698 	.word	0x0800c698

08007a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007a54:	f7ff ffdc 	bl	8007a10 <HAL_RCC_GetHCLKFreq>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	4b05      	ldr	r3, [pc, #20]	@ (8007a70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	0b5b      	lsrs	r3, r3, #13
 8007a60:	f003 0307 	and.w	r3, r3, #7
 8007a64:	4903      	ldr	r1, [pc, #12]	@ (8007a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a66:	5ccb      	ldrb	r3, [r1, r3]
 8007a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	40023800 	.word	0x40023800
 8007a74:	0800c698 	.word	0x0800c698

08007a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b088      	sub	sp, #32
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007a80:	2300      	movs	r3, #0
 8007a82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007a84:	2300      	movs	r3, #0
 8007a86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007a90:	2300      	movs	r3, #0
 8007a92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d012      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007aa0:	4b69      	ldr	r3, [pc, #420]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	4a68      	ldr	r2, [pc, #416]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aa6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007aaa:	6093      	str	r3, [r2, #8]
 8007aac:	4b66      	ldr	r3, [pc, #408]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aae:	689a      	ldr	r2, [r3, #8]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ab4:	4964      	ldr	r1, [pc, #400]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d017      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ad2:	4b5d      	ldr	r3, [pc, #372]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ad8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ae0:	4959      	ldr	r1, [pc, #356]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007af0:	d101      	bne.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007af2:	2301      	movs	r3, #1
 8007af4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d101      	bne.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007afe:	2301      	movs	r3, #1
 8007b00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d017      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007b0e:	4b4e      	ldr	r3, [pc, #312]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b14:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b1c:	494a      	ldr	r1, [pc, #296]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b2c:	d101      	bne.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0320 	and.w	r3, r3, #32
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f000 808b 	beq.w	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b5c:	4b3a      	ldr	r3, [pc, #232]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b60:	4a39      	ldr	r2, [pc, #228]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b66:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b68:	4b37      	ldr	r3, [pc, #220]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b70:	60bb      	str	r3, [r7, #8]
 8007b72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007b74:	4b35      	ldr	r3, [pc, #212]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a34      	ldr	r2, [pc, #208]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007b7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b80:	f7fe f828 	bl	8005bd4 <HAL_GetTick>
 8007b84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007b86:	e008      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b88:	f7fe f824 	bl	8005bd4 <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	2b64      	cmp	r3, #100	@ 0x64
 8007b94:	d901      	bls.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e357      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0f0      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007ba6:	4b28      	ldr	r3, [pc, #160]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007baa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d035      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d02e      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007bc4:	4b20      	ldr	r3, [pc, #128]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bcc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007bce:	4b1e      	ldr	r3, [pc, #120]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bd2:	4a1d      	ldr	r2, [pc, #116]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bd8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007bda:	4b1b      	ldr	r3, [pc, #108]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bde:	4a1a      	ldr	r2, [pc, #104]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007be0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007be4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007be6:	4a18      	ldr	r2, [pc, #96]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007bec:	4b16      	ldr	r3, [pc, #88]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d114      	bne.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bf8:	f7fd ffec 	bl	8005bd4 <HAL_GetTick>
 8007bfc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bfe:	e00a      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c00:	f7fd ffe8 	bl	8005bd4 <HAL_GetTick>
 8007c04:	4602      	mov	r2, r0
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d901      	bls.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e319      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c16:	4b0c      	ldr	r3, [pc, #48]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c1a:	f003 0302 	and.w	r3, r3, #2
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d0ee      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c2e:	d111      	bne.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007c30:	4b05      	ldr	r3, [pc, #20]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007c3c:	4b04      	ldr	r3, [pc, #16]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007c3e:	400b      	ands	r3, r1
 8007c40:	4901      	ldr	r1, [pc, #4]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c42:	4313      	orrs	r3, r2
 8007c44:	608b      	str	r3, [r1, #8]
 8007c46:	e00b      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007c48:	40023800 	.word	0x40023800
 8007c4c:	40007000 	.word	0x40007000
 8007c50:	0ffffcff 	.word	0x0ffffcff
 8007c54:	4baa      	ldr	r3, [pc, #680]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	4aa9      	ldr	r2, [pc, #676]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c5a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007c5e:	6093      	str	r3, [r2, #8]
 8007c60:	4ba7      	ldr	r3, [pc, #668]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c6c:	49a4      	ldr	r1, [pc, #656]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0310 	and.w	r3, r3, #16
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d010      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c7e:	4ba0      	ldr	r3, [pc, #640]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c84:	4a9e      	ldr	r2, [pc, #632]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007c8e:	4b9c      	ldr	r3, [pc, #624]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c90:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c98:	4999      	ldr	r1, [pc, #612]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00a      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007cac:	4b94      	ldr	r3, [pc, #592]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cb2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cba:	4991      	ldr	r1, [pc, #580]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00a      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007cce:	4b8c      	ldr	r3, [pc, #560]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cd4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007cdc:	4988      	ldr	r1, [pc, #544]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00a      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007cf0:	4b83      	ldr	r3, [pc, #524]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cf6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cfe:	4980      	ldr	r1, [pc, #512]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d00:	4313      	orrs	r3, r2
 8007d02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00a      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d12:	4b7b      	ldr	r3, [pc, #492]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d18:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d20:	4977      	ldr	r1, [pc, #476]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00a      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d34:	4b72      	ldr	r3, [pc, #456]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d3a:	f023 0203 	bic.w	r2, r3, #3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d42:	496f      	ldr	r1, [pc, #444]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00a      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d56:	4b6a      	ldr	r3, [pc, #424]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d5c:	f023 020c 	bic.w	r2, r3, #12
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d64:	4966      	ldr	r1, [pc, #408]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00a      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007d78:	4b61      	ldr	r3, [pc, #388]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d7e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d86:	495e      	ldr	r1, [pc, #376]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007d9a:	4b59      	ldr	r3, [pc, #356]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007da0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007da8:	4955      	ldr	r1, [pc, #340]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00a      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007dbc:	4b50      	ldr	r3, [pc, #320]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dc2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dca:	494d      	ldr	r1, [pc, #308]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007dde:	4b48      	ldr	r3, [pc, #288]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007de4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dec:	4944      	ldr	r1, [pc, #272]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00a      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007e00:	4b3f      	ldr	r3, [pc, #252]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e06:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e0e:	493c      	ldr	r1, [pc, #240]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00a      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007e22:	4b37      	ldr	r3, [pc, #220]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e28:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e30:	4933      	ldr	r1, [pc, #204]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00a      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007e44:	4b2e      	ldr	r3, [pc, #184]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e4a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e52:	492b      	ldr	r1, [pc, #172]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e54:	4313      	orrs	r3, r2
 8007e56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d011      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007e66:	4b26      	ldr	r3, [pc, #152]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e6c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e74:	4922      	ldr	r1, [pc, #136]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e84:	d101      	bne.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007e86:	2301      	movs	r3, #1
 8007e88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0308 	and.w	r3, r3, #8
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007e96:	2301      	movs	r3, #1
 8007e98:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00a      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ea6:	4b16      	ldr	r3, [pc, #88]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eac:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eb4:	4912      	ldr	r1, [pc, #72]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00b      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ece:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ed8:	4909      	ldr	r1, [pc, #36]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eda:	4313      	orrs	r3, r2
 8007edc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d006      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 80d9 	beq.w	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007ef4:	4b02      	ldr	r3, [pc, #8]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a01      	ldr	r2, [pc, #4]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007efa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007efe:	e001      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007f00:	40023800 	.word	0x40023800
 8007f04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f06:	f7fd fe65 	bl	8005bd4 <HAL_GetTick>
 8007f0a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f0c:	e008      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007f0e:	f7fd fe61 	bl	8005bd4 <HAL_GetTick>
 8007f12:	4602      	mov	r2, r0
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	1ad3      	subs	r3, r2, r3
 8007f18:	2b64      	cmp	r3, #100	@ 0x64
 8007f1a:	d901      	bls.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	e194      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f20:	4b6c      	ldr	r3, [pc, #432]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1f0      	bne.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 0301 	and.w	r3, r3, #1
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d021      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d11d      	bne.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007f40:	4b64      	ldr	r3, [pc, #400]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f46:	0c1b      	lsrs	r3, r3, #16
 8007f48:	f003 0303 	and.w	r3, r3, #3
 8007f4c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f4e:	4b61      	ldr	r3, [pc, #388]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f54:	0e1b      	lsrs	r3, r3, #24
 8007f56:	f003 030f 	and.w	r3, r3, #15
 8007f5a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	019a      	lsls	r2, r3, #6
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	041b      	lsls	r3, r3, #16
 8007f66:	431a      	orrs	r2, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	061b      	lsls	r3, r3, #24
 8007f6c:	431a      	orrs	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	071b      	lsls	r3, r3, #28
 8007f74:	4957      	ldr	r1, [pc, #348]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f76:	4313      	orrs	r3, r2
 8007f78:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d004      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f90:	d00a      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d02e      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fa6:	d129      	bne.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007fa8:	4b4a      	ldr	r3, [pc, #296]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fae:	0c1b      	lsrs	r3, r3, #16
 8007fb0:	f003 0303 	and.w	r3, r3, #3
 8007fb4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007fb6:	4b47      	ldr	r3, [pc, #284]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fbc:	0f1b      	lsrs	r3, r3, #28
 8007fbe:	f003 0307 	and.w	r3, r3, #7
 8007fc2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	019a      	lsls	r2, r3, #6
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	041b      	lsls	r3, r3, #16
 8007fce:	431a      	orrs	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	061b      	lsls	r3, r3, #24
 8007fd6:	431a      	orrs	r2, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	071b      	lsls	r3, r3, #28
 8007fdc:	493d      	ldr	r1, [pc, #244]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007fe4:	4b3b      	ldr	r3, [pc, #236]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fea:	f023 021f 	bic.w	r2, r3, #31
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	4937      	ldr	r1, [pc, #220]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d01d      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008008:	4b32      	ldr	r3, [pc, #200]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800800a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800800e:	0e1b      	lsrs	r3, r3, #24
 8008010:	f003 030f 	and.w	r3, r3, #15
 8008014:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008016:	4b2f      	ldr	r3, [pc, #188]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008018:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800801c:	0f1b      	lsrs	r3, r3, #28
 800801e:	f003 0307 	and.w	r3, r3, #7
 8008022:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	019a      	lsls	r2, r3, #6
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	041b      	lsls	r3, r3, #16
 8008030:	431a      	orrs	r2, r3
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	061b      	lsls	r3, r3, #24
 8008036:	431a      	orrs	r2, r3
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	071b      	lsls	r3, r3, #28
 800803c:	4925      	ldr	r1, [pc, #148]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800803e:	4313      	orrs	r3, r2
 8008040:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d011      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	019a      	lsls	r2, r3, #6
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	041b      	lsls	r3, r3, #16
 800805c:	431a      	orrs	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	061b      	lsls	r3, r3, #24
 8008064:	431a      	orrs	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	071b      	lsls	r3, r3, #28
 800806c:	4919      	ldr	r1, [pc, #100]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800806e:	4313      	orrs	r3, r2
 8008070:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008074:	4b17      	ldr	r3, [pc, #92]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a16      	ldr	r2, [pc, #88]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800807a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800807e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008080:	f7fd fda8 	bl	8005bd4 <HAL_GetTick>
 8008084:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008086:	e008      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008088:	f7fd fda4 	bl	8005bd4 <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	2b64      	cmp	r3, #100	@ 0x64
 8008094:	d901      	bls.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e0d7      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800809a:	4b0e      	ldr	r3, [pc, #56]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d0f0      	beq.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	f040 80cd 	bne.w	8008248 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80080ae:	4b09      	ldr	r3, [pc, #36]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a08      	ldr	r2, [pc, #32]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080ba:	f7fd fd8b 	bl	8005bd4 <HAL_GetTick>
 80080be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80080c0:	e00a      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80080c2:	f7fd fd87 	bl	8005bd4 <HAL_GetTick>
 80080c6:	4602      	mov	r2, r0
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	2b64      	cmp	r3, #100	@ 0x64
 80080ce:	d903      	bls.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e0ba      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80080d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80080d8:	4b5e      	ldr	r3, [pc, #376]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080e4:	d0ed      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d009      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008102:	2b00      	cmp	r3, #0
 8008104:	d02e      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800810a:	2b00      	cmp	r3, #0
 800810c:	d12a      	bne.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800810e:	4b51      	ldr	r3, [pc, #324]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008114:	0c1b      	lsrs	r3, r3, #16
 8008116:	f003 0303 	and.w	r3, r3, #3
 800811a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800811c:	4b4d      	ldr	r3, [pc, #308]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800811e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008122:	0f1b      	lsrs	r3, r3, #28
 8008124:	f003 0307 	and.w	r3, r3, #7
 8008128:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	019a      	lsls	r2, r3, #6
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	041b      	lsls	r3, r3, #16
 8008134:	431a      	orrs	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	061b      	lsls	r3, r3, #24
 800813c:	431a      	orrs	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	071b      	lsls	r3, r3, #28
 8008142:	4944      	ldr	r1, [pc, #272]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008144:	4313      	orrs	r3, r2
 8008146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800814a:	4b42      	ldr	r3, [pc, #264]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800814c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008150:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008158:	3b01      	subs	r3, #1
 800815a:	021b      	lsls	r3, r3, #8
 800815c:	493d      	ldr	r1, [pc, #244]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800815e:	4313      	orrs	r3, r2
 8008160:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d022      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008174:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008178:	d11d      	bne.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800817a:	4b36      	ldr	r3, [pc, #216]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800817c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008180:	0e1b      	lsrs	r3, r3, #24
 8008182:	f003 030f 	and.w	r3, r3, #15
 8008186:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008188:	4b32      	ldr	r3, [pc, #200]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800818a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800818e:	0f1b      	lsrs	r3, r3, #28
 8008190:	f003 0307 	and.w	r3, r3, #7
 8008194:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	019a      	lsls	r2, r3, #6
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a1b      	ldr	r3, [r3, #32]
 80081a0:	041b      	lsls	r3, r3, #16
 80081a2:	431a      	orrs	r2, r3
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	061b      	lsls	r3, r3, #24
 80081a8:	431a      	orrs	r2, r3
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	071b      	lsls	r3, r3, #28
 80081ae:	4929      	ldr	r1, [pc, #164]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0308 	and.w	r3, r3, #8
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d028      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80081c2:	4b24      	ldr	r3, [pc, #144]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081c8:	0e1b      	lsrs	r3, r3, #24
 80081ca:	f003 030f 	and.w	r3, r3, #15
 80081ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80081d0:	4b20      	ldr	r3, [pc, #128]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081d6:	0c1b      	lsrs	r3, r3, #16
 80081d8:	f003 0303 	and.w	r3, r3, #3
 80081dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	019a      	lsls	r2, r3, #6
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	041b      	lsls	r3, r3, #16
 80081e8:	431a      	orrs	r2, r3
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	061b      	lsls	r3, r3, #24
 80081ee:	431a      	orrs	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	69db      	ldr	r3, [r3, #28]
 80081f4:	071b      	lsls	r3, r3, #28
 80081f6:	4917      	ldr	r1, [pc, #92]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80081fe:	4b15      	ldr	r3, [pc, #84]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008200:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008204:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820c:	4911      	ldr	r1, [pc, #68]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800820e:	4313      	orrs	r3, r2
 8008210:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008214:	4b0f      	ldr	r3, [pc, #60]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a0e      	ldr	r2, [pc, #56]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800821a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800821e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008220:	f7fd fcd8 	bl	8005bd4 <HAL_GetTick>
 8008224:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008226:	e008      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008228:	f7fd fcd4 	bl	8005bd4 <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	2b64      	cmp	r3, #100	@ 0x64
 8008234:	d901      	bls.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e007      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800823a:	4b06      	ldr	r3, [pc, #24]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008242:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008246:	d1ef      	bne.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3720      	adds	r7, #32
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	40023800 	.word	0x40023800

08008258 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e09d      	b.n	80083a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800826e:	2b00      	cmp	r3, #0
 8008270:	d108      	bne.n	8008284 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800827a:	d009      	beq.n	8008290 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	61da      	str	r2, [r3, #28]
 8008282:	e005      	b.n	8008290 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d106      	bne.n	80082b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7fc fea8 	bl	8005000 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2202      	movs	r2, #2
 80082b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80082d0:	d902      	bls.n	80082d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80082d2:	2300      	movs	r3, #0
 80082d4:	60fb      	str	r3, [r7, #12]
 80082d6:	e002      	b.n	80082de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80082d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80082dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80082e6:	d007      	beq.n	80082f8 <HAL_SPI_Init+0xa0>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80082f0:	d002      	beq.n	80082f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008308:	431a      	orrs	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	f003 0302 	and.w	r3, r3, #2
 8008312:	431a      	orrs	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	695b      	ldr	r3, [r3, #20]
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	431a      	orrs	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008326:	431a      	orrs	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	69db      	ldr	r3, [r3, #28]
 800832c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008330:	431a      	orrs	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800833a:	ea42 0103 	orr.w	r1, r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008342:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	430a      	orrs	r2, r1
 800834c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	0c1b      	lsrs	r3, r3, #16
 8008354:	f003 0204 	and.w	r2, r3, #4
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800835c:	f003 0310 	and.w	r3, r3, #16
 8008360:	431a      	orrs	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008366:	f003 0308 	and.w	r3, r3, #8
 800836a:	431a      	orrs	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008374:	ea42 0103 	orr.w	r1, r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	430a      	orrs	r2, r1
 8008384:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	69da      	ldr	r2, [r3, #28]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008394:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b088      	sub	sp, #32
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	60f8      	str	r0, [r7, #12]
 80083b6:	60b9      	str	r1, [r7, #8]
 80083b8:	603b      	str	r3, [r7, #0]
 80083ba:	4613      	mov	r3, r2
 80083bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d101      	bne.n	80083d0 <HAL_SPI_Transmit+0x22>
 80083cc:	2302      	movs	r3, #2
 80083ce:	e158      	b.n	8008682 <HAL_SPI_Transmit+0x2d4>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083d8:	f7fd fbfc 	bl	8005bd4 <HAL_GetTick>
 80083dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80083de:	88fb      	ldrh	r3, [r7, #6]
 80083e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d002      	beq.n	80083f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80083ee:	2302      	movs	r3, #2
 80083f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80083f2:	e13d      	b.n	8008670 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <HAL_SPI_Transmit+0x52>
 80083fa:	88fb      	ldrh	r3, [r7, #6]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d102      	bne.n	8008406 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008404:	e134      	b.n	8008670 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2203      	movs	r2, #3
 800840a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	88fa      	ldrh	r2, [r7, #6]
 800841e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	88fa      	ldrh	r2, [r7, #6]
 8008424:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008450:	d10f      	bne.n	8008472 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008460:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008470:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800847c:	2b40      	cmp	r3, #64	@ 0x40
 800847e:	d007      	beq.n	8008490 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800848e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008498:	d94b      	bls.n	8008532 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <HAL_SPI_Transmit+0xfa>
 80084a2:	8afb      	ldrh	r3, [r7, #22]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d13e      	bne.n	8008526 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ac:	881a      	ldrh	r2, [r3, #0]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b8:	1c9a      	adds	r2, r3, #2
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	3b01      	subs	r3, #1
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80084cc:	e02b      	b.n	8008526 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	f003 0302 	and.w	r3, r3, #2
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d112      	bne.n	8008502 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e0:	881a      	ldrh	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ec:	1c9a      	adds	r2, r3, #2
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	3b01      	subs	r3, #1
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008500:	e011      	b.n	8008526 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008502:	f7fd fb67 	bl	8005bd4 <HAL_GetTick>
 8008506:	4602      	mov	r2, r0
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	429a      	cmp	r2, r3
 8008510:	d803      	bhi.n	800851a <HAL_SPI_Transmit+0x16c>
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008518:	d102      	bne.n	8008520 <HAL_SPI_Transmit+0x172>
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d102      	bne.n	8008526 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008524:	e0a4      	b.n	8008670 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800852a:	b29b      	uxth	r3, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1ce      	bne.n	80084ce <HAL_SPI_Transmit+0x120>
 8008530:	e07c      	b.n	800862c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d002      	beq.n	8008540 <HAL_SPI_Transmit+0x192>
 800853a:	8afb      	ldrh	r3, [r7, #22]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d170      	bne.n	8008622 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008544:	b29b      	uxth	r3, r3
 8008546:	2b01      	cmp	r3, #1
 8008548:	d912      	bls.n	8008570 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800854e:	881a      	ldrh	r2, [r3, #0]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800855a:	1c9a      	adds	r2, r3, #2
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008564:	b29b      	uxth	r3, r3
 8008566:	3b02      	subs	r3, #2
 8008568:	b29a      	uxth	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800856e:	e058      	b.n	8008622 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	330c      	adds	r3, #12
 800857a:	7812      	ldrb	r2, [r2, #0]
 800857c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008582:	1c5a      	adds	r2, r3, #1
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800858c:	b29b      	uxth	r3, r3
 800858e:	3b01      	subs	r3, #1
 8008590:	b29a      	uxth	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008596:	e044      	b.n	8008622 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	f003 0302 	and.w	r3, r3, #2
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d12b      	bne.n	80085fe <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d912      	bls.n	80085d6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085b4:	881a      	ldrh	r2, [r3, #0]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085c0:	1c9a      	adds	r2, r3, #2
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	3b02      	subs	r3, #2
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80085d4:	e025      	b.n	8008622 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	330c      	adds	r3, #12
 80085e0:	7812      	ldrb	r2, [r2, #0]
 80085e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085e8:	1c5a      	adds	r2, r3, #1
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	3b01      	subs	r3, #1
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80085fc:	e011      	b.n	8008622 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085fe:	f7fd fae9 	bl	8005bd4 <HAL_GetTick>
 8008602:	4602      	mov	r2, r0
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	683a      	ldr	r2, [r7, #0]
 800860a:	429a      	cmp	r2, r3
 800860c:	d803      	bhi.n	8008616 <HAL_SPI_Transmit+0x268>
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008614:	d102      	bne.n	800861c <HAL_SPI_Transmit+0x26e>
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d102      	bne.n	8008622 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008620:	e026      	b.n	8008670 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008626:	b29b      	uxth	r3, r3
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1b5      	bne.n	8008598 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800862c:	69ba      	ldr	r2, [r7, #24]
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f000 fe1b 	bl	800926c <SPI_EndRxTxTransaction>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d002      	beq.n	8008642 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2220      	movs	r2, #32
 8008640:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10a      	bne.n	8008660 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800864a:	2300      	movs	r3, #0
 800864c:	613b      	str	r3, [r7, #16]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	613b      	str	r3, [r7, #16]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	613b      	str	r3, [r7, #16]
 800865e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008664:	2b00      	cmp	r3, #0
 8008666:	d002      	beq.n	800866e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	77fb      	strb	r3, [r7, #31]
 800866c:	e000      	b.n	8008670 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800866e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008680:	7ffb      	ldrb	r3, [r7, #31]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3720      	adds	r7, #32
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b088      	sub	sp, #32
 800868e:	af02      	add	r7, sp, #8
 8008690:	60f8      	str	r0, [r7, #12]
 8008692:	60b9      	str	r1, [r7, #8]
 8008694:	603b      	str	r3, [r7, #0]
 8008696:	4613      	mov	r3, r2
 8008698:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800869a:	2300      	movs	r3, #0
 800869c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80086a6:	d112      	bne.n	80086ce <HAL_SPI_Receive+0x44>
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10e      	bne.n	80086ce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2204      	movs	r2, #4
 80086b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80086b8:	88fa      	ldrh	r2, [r7, #6]
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	4613      	mov	r3, r2
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	68b9      	ldr	r1, [r7, #8]
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 f910 	bl	80088ea <HAL_SPI_TransmitReceive>
 80086ca:	4603      	mov	r3, r0
 80086cc:	e109      	b.n	80088e2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d101      	bne.n	80086dc <HAL_SPI_Receive+0x52>
 80086d8:	2302      	movs	r3, #2
 80086da:	e102      	b.n	80088e2 <HAL_SPI_Receive+0x258>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086e4:	f7fd fa76 	bl	8005bd4 <HAL_GetTick>
 80086e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d002      	beq.n	80086fc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80086f6:	2302      	movs	r3, #2
 80086f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80086fa:	e0e9      	b.n	80088d0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d002      	beq.n	8008708 <HAL_SPI_Receive+0x7e>
 8008702:	88fb      	ldrh	r3, [r7, #6]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d102      	bne.n	800870e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800870c:	e0e0      	b.n	80088d0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2204      	movs	r2, #4
 8008712:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	88fa      	ldrh	r2, [r7, #6]
 8008726:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	88fa      	ldrh	r2, [r7, #6]
 800872e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008758:	d908      	bls.n	800876c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	685a      	ldr	r2, [r3, #4]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008768:	605a      	str	r2, [r3, #4]
 800876a:	e007      	b.n	800877c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	685a      	ldr	r2, [r3, #4]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800877a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008784:	d10f      	bne.n	80087a6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008794:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80087a4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087b0:	2b40      	cmp	r3, #64	@ 0x40
 80087b2:	d007      	beq.n	80087c4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80087c2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80087cc:	d867      	bhi.n	800889e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80087ce:	e030      	b.n	8008832 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d117      	bne.n	800880e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f103 020c 	add.w	r2, r3, #12
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ea:	7812      	ldrb	r2, [r2, #0]
 80087ec:	b2d2      	uxtb	r2, r2
 80087ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087f4:	1c5a      	adds	r2, r3, #1
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008800:	b29b      	uxth	r3, r3
 8008802:	3b01      	subs	r3, #1
 8008804:	b29a      	uxth	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800880c:	e011      	b.n	8008832 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800880e:	f7fd f9e1 	bl	8005bd4 <HAL_GetTick>
 8008812:	4602      	mov	r2, r0
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	683a      	ldr	r2, [r7, #0]
 800881a:	429a      	cmp	r2, r3
 800881c:	d803      	bhi.n	8008826 <HAL_SPI_Receive+0x19c>
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008824:	d102      	bne.n	800882c <HAL_SPI_Receive+0x1a2>
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d102      	bne.n	8008832 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800882c:	2303      	movs	r3, #3
 800882e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008830:	e04e      	b.n	80088d0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008838:	b29b      	uxth	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1c8      	bne.n	80087d0 <HAL_SPI_Receive+0x146>
 800883e:	e034      	b.n	80088aa <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	2b01      	cmp	r3, #1
 800884c:	d115      	bne.n	800887a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68da      	ldr	r2, [r3, #12]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008858:	b292      	uxth	r2, r2
 800885a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008860:	1c9a      	adds	r2, r3, #2
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800886c:	b29b      	uxth	r3, r3
 800886e:	3b01      	subs	r3, #1
 8008870:	b29a      	uxth	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008878:	e011      	b.n	800889e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800887a:	f7fd f9ab 	bl	8005bd4 <HAL_GetTick>
 800887e:	4602      	mov	r2, r0
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	683a      	ldr	r2, [r7, #0]
 8008886:	429a      	cmp	r2, r3
 8008888:	d803      	bhi.n	8008892 <HAL_SPI_Receive+0x208>
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008890:	d102      	bne.n	8008898 <HAL_SPI_Receive+0x20e>
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d102      	bne.n	800889e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800889c:	e018      	b.n	80088d0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1ca      	bne.n	8008840 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088aa:	693a      	ldr	r2, [r7, #16]
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	68f8      	ldr	r0, [r7, #12]
 80088b0:	f000 fc60 	bl	8009174 <SPI_EndRxTransaction>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d002      	beq.n	80088c0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2220      	movs	r2, #32
 80088be:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d002      	beq.n	80088ce <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	75fb      	strb	r3, [r7, #23]
 80088cc:	e000      	b.n	80088d0 <HAL_SPI_Receive+0x246>
  }

error :
 80088ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80088e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3718      	adds	r7, #24
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b08a      	sub	sp, #40	@ 0x28
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	60f8      	str	r0, [r7, #12]
 80088f2:	60b9      	str	r1, [r7, #8]
 80088f4:	607a      	str	r2, [r7, #4]
 80088f6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80088f8:	2301      	movs	r3, #1
 80088fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008908:	2b01      	cmp	r3, #1
 800890a:	d101      	bne.n	8008910 <HAL_SPI_TransmitReceive+0x26>
 800890c:	2302      	movs	r3, #2
 800890e:	e1fb      	b.n	8008d08 <HAL_SPI_TransmitReceive+0x41e>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008918:	f7fd f95c 	bl	8005bd4 <HAL_GetTick>
 800891c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008924:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800892c:	887b      	ldrh	r3, [r7, #2]
 800892e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008930:	887b      	ldrh	r3, [r7, #2]
 8008932:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008934:	7efb      	ldrb	r3, [r7, #27]
 8008936:	2b01      	cmp	r3, #1
 8008938:	d00e      	beq.n	8008958 <HAL_SPI_TransmitReceive+0x6e>
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008940:	d106      	bne.n	8008950 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d102      	bne.n	8008950 <HAL_SPI_TransmitReceive+0x66>
 800894a:	7efb      	ldrb	r3, [r7, #27]
 800894c:	2b04      	cmp	r3, #4
 800894e:	d003      	beq.n	8008958 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008950:	2302      	movs	r3, #2
 8008952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008956:	e1cd      	b.n	8008cf4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d005      	beq.n	800896a <HAL_SPI_TransmitReceive+0x80>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d002      	beq.n	800896a <HAL_SPI_TransmitReceive+0x80>
 8008964:	887b      	ldrh	r3, [r7, #2]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d103      	bne.n	8008972 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008970:	e1c0      	b.n	8008cf4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008978:	b2db      	uxtb	r3, r3
 800897a:	2b04      	cmp	r3, #4
 800897c:	d003      	beq.n	8008986 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2205      	movs	r2, #5
 8008982:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	887a      	ldrh	r2, [r7, #2]
 8008996:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	887a      	ldrh	r2, [r7, #2]
 800899e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	887a      	ldrh	r2, [r7, #2]
 80089ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	887a      	ldrh	r2, [r7, #2]
 80089b2:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80089c8:	d802      	bhi.n	80089d0 <HAL_SPI_TransmitReceive+0xe6>
 80089ca:	8a3b      	ldrh	r3, [r7, #16]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d908      	bls.n	80089e2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	685a      	ldr	r2, [r3, #4]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80089de:	605a      	str	r2, [r3, #4]
 80089e0:	e007      	b.n	80089f2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	685a      	ldr	r2, [r3, #4]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80089f0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089fc:	2b40      	cmp	r3, #64	@ 0x40
 80089fe:	d007      	beq.n	8008a10 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008a18:	d97c      	bls.n	8008b14 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d002      	beq.n	8008a28 <HAL_SPI_TransmitReceive+0x13e>
 8008a22:	8a7b      	ldrh	r3, [r7, #18]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d169      	bne.n	8008afc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a2c:	881a      	ldrh	r2, [r3, #0]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a38:	1c9a      	adds	r2, r3, #2
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	3b01      	subs	r3, #1
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a4c:	e056      	b.n	8008afc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	f003 0302 	and.w	r3, r3, #2
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d11b      	bne.n	8008a94 <HAL_SPI_TransmitReceive+0x1aa>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d016      	beq.n	8008a94 <HAL_SPI_TransmitReceive+0x1aa>
 8008a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d113      	bne.n	8008a94 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a70:	881a      	ldrh	r2, [r3, #0]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a7c:	1c9a      	adds	r2, r3, #2
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a90:	2300      	movs	r3, #0
 8008a92:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	f003 0301 	and.w	r3, r3, #1
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d11c      	bne.n	8008adc <HAL_SPI_TransmitReceive+0x1f2>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d016      	beq.n	8008adc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68da      	ldr	r2, [r3, #12]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab8:	b292      	uxth	r2, r2
 8008aba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ac0:	1c9a      	adds	r2, r3, #2
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008adc:	f7fd f87a 	bl	8005bd4 <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d807      	bhi.n	8008afc <HAL_SPI_TransmitReceive+0x212>
 8008aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af2:	d003      	beq.n	8008afc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008af4:	2303      	movs	r3, #3
 8008af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8008afa:	e0fb      	b.n	8008cf4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1a3      	bne.n	8008a4e <HAL_SPI_TransmitReceive+0x164>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d19d      	bne.n	8008a4e <HAL_SPI_TransmitReceive+0x164>
 8008b12:	e0df      	b.n	8008cd4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d003      	beq.n	8008b24 <HAL_SPI_TransmitReceive+0x23a>
 8008b1c:	8a7b      	ldrh	r3, [r7, #18]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	f040 80cb 	bne.w	8008cba <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d912      	bls.n	8008b54 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b32:	881a      	ldrh	r2, [r3, #0]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b3e:	1c9a      	adds	r2, r3, #2
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	3b02      	subs	r3, #2
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008b52:	e0b2      	b.n	8008cba <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	330c      	adds	r3, #12
 8008b5e:	7812      	ldrb	r2, [r2, #0]
 8008b60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b66:	1c5a      	adds	r2, r3, #1
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	3b01      	subs	r3, #1
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b7a:	e09e      	b.n	8008cba <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f003 0302 	and.w	r3, r3, #2
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d134      	bne.n	8008bf4 <HAL_SPI_TransmitReceive+0x30a>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d02f      	beq.n	8008bf4 <HAL_SPI_TransmitReceive+0x30a>
 8008b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d12c      	bne.n	8008bf4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d912      	bls.n	8008bca <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba8:	881a      	ldrh	r2, [r3, #0]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb4:	1c9a      	adds	r2, r3, #2
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	3b02      	subs	r3, #2
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008bc8:	e012      	b.n	8008bf0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	330c      	adds	r3, #12
 8008bd4:	7812      	ldrb	r2, [r2, #0]
 8008bd6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bdc:	1c5a      	adds	r2, r3, #1
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	3b01      	subs	r3, #1
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f003 0301 	and.w	r3, r3, #1
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d148      	bne.n	8008c94 <HAL_SPI_TransmitReceive+0x3aa>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d042      	beq.n	8008c94 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d923      	bls.n	8008c62 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68da      	ldr	r2, [r3, #12]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c24:	b292      	uxth	r2, r2
 8008c26:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c2c:	1c9a      	adds	r2, r3, #2
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	3b02      	subs	r3, #2
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d81f      	bhi.n	8008c90 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	685a      	ldr	r2, [r3, #4]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008c5e:	605a      	str	r2, [r3, #4]
 8008c60:	e016      	b.n	8008c90 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f103 020c 	add.w	r2, r3, #12
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c6e:	7812      	ldrb	r2, [r2, #0]
 8008c70:	b2d2      	uxtb	r2, r2
 8008c72:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c78:	1c5a      	adds	r2, r3, #1
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	3b01      	subs	r3, #1
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c90:	2301      	movs	r3, #1
 8008c92:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008c94:	f7fc ff9e 	bl	8005bd4 <HAL_GetTick>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d803      	bhi.n	8008cac <HAL_SPI_TransmitReceive+0x3c2>
 8008ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008caa:	d102      	bne.n	8008cb2 <HAL_SPI_TransmitReceive+0x3c8>
 8008cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d103      	bne.n	8008cba <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8008cb8:	e01c      	b.n	8008cf4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f47f af5b 	bne.w	8008b7c <HAL_SPI_TransmitReceive+0x292>
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f47f af54 	bne.w	8008b7c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cd4:	69fa      	ldr	r2, [r7, #28]
 8008cd6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f000 fac7 	bl	800926c <SPI_EndRxTxTransaction>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d006      	beq.n	8008cf2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2220      	movs	r2, #32
 8008cee:	661a      	str	r2, [r3, #96]	@ 0x60
 8008cf0:	e000      	b.n	8008cf4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008cf2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008d04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3728      	adds	r7, #40	@ 0x28
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b088      	sub	sp, #32
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10e      	bne.n	8008d50 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d009      	beq.n	8008d50 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d004      	beq.n	8008d50 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	4798      	blx	r3
    return;
 8008d4e:	e0ce      	b.n	8008eee <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	f003 0302 	and.w	r3, r3, #2
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d009      	beq.n	8008d6e <HAL_SPI_IRQHandler+0x5e>
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d004      	beq.n	8008d6e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	4798      	blx	r3
    return;
 8008d6c:	e0bf      	b.n	8008eee <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	f003 0320 	and.w	r3, r3, #32
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10a      	bne.n	8008d8e <HAL_SPI_IRQHandler+0x7e>
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d105      	bne.n	8008d8e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f000 80b0 	beq.w	8008eee <HAL_SPI_IRQHandler+0x1de>
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	f003 0320 	and.w	r3, r3, #32
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f000 80aa 	beq.w	8008eee <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d023      	beq.n	8008dec <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	2b03      	cmp	r3, #3
 8008dae:	d011      	beq.n	8008dd4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008db4:	f043 0204 	orr.w	r2, r3, #4
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	617b      	str	r3, [r7, #20]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	617b      	str	r3, [r7, #20]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	617b      	str	r3, [r7, #20]
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	e00b      	b.n	8008dec <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	613b      	str	r3, [r7, #16]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	613b      	str	r3, [r7, #16]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	613b      	str	r3, [r7, #16]
 8008de8:	693b      	ldr	r3, [r7, #16]
        return;
 8008dea:	e080      	b.n	8008eee <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	f003 0320 	and.w	r3, r3, #32
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d014      	beq.n	8008e20 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dfa:	f043 0201 	orr.w	r2, r3, #1
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008e02:	2300      	movs	r3, #0
 8008e04:	60fb      	str	r3, [r7, #12]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	60fb      	str	r3, [r7, #12]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e1c:	601a      	str	r2, [r3, #0]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00c      	beq.n	8008e44 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e2e:	f043 0208 	orr.w	r2, r3, #8
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008e36:	2300      	movs	r3, #0
 8008e38:	60bb      	str	r3, [r7, #8]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	60bb      	str	r3, [r7, #8]
 8008e42:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d04f      	beq.n	8008eec <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008e5a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	f003 0302 	and.w	r3, r3, #2
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d104      	bne.n	8008e78 <HAL_SPI_IRQHandler+0x168>
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	f003 0301 	and.w	r3, r3, #1
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d034      	beq.n	8008ee2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	685a      	ldr	r2, [r3, #4]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f022 0203 	bic.w	r2, r2, #3
 8008e86:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d011      	beq.n	8008eb4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e94:	4a17      	ldr	r2, [pc, #92]	@ (8008ef4 <HAL_SPI_IRQHandler+0x1e4>)
 8008e96:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7fc ffda 	bl	8005e56 <HAL_DMA_Abort_IT>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d005      	beq.n	8008eb4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008eac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d016      	beq.n	8008eea <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8008ef4 <HAL_SPI_IRQHandler+0x1e4>)
 8008ec2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7fc ffc4 	bl	8005e56 <HAL_DMA_Abort_IT>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00a      	beq.n	8008eea <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ed8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8008ee0:	e003      	b.n	8008eea <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f808 	bl	8008ef8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008ee8:	e000      	b.n	8008eec <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8008eea:	bf00      	nop
    return;
 8008eec:	bf00      	nop
  }
}
 8008eee:	3720      	adds	r7, #32
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	08008f0d 	.word	0x08008f0d

08008ef8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f18:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f7ff ffe5 	bl	8008ef8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008f2e:	bf00      	nop
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
	...

08008f38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b088      	sub	sp, #32
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	603b      	str	r3, [r7, #0]
 8008f44:	4613      	mov	r3, r2
 8008f46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008f48:	f7fc fe44 	bl	8005bd4 <HAL_GetTick>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f50:	1a9b      	subs	r3, r3, r2
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	4413      	add	r3, r2
 8008f56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008f58:	f7fc fe3c 	bl	8005bd4 <HAL_GetTick>
 8008f5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008f5e:	4b39      	ldr	r3, [pc, #228]	@ (8009044 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	015b      	lsls	r3, r3, #5
 8008f64:	0d1b      	lsrs	r3, r3, #20
 8008f66:	69fa      	ldr	r2, [r7, #28]
 8008f68:	fb02 f303 	mul.w	r3, r2, r3
 8008f6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f6e:	e054      	b.n	800901a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f76:	d050      	beq.n	800901a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008f78:	f7fc fe2c 	bl	8005bd4 <HAL_GetTick>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	69fa      	ldr	r2, [r7, #28]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d902      	bls.n	8008f8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d13d      	bne.n	800900a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	685a      	ldr	r2, [r3, #4]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008f9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fa6:	d111      	bne.n	8008fcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008fb0:	d004      	beq.n	8008fbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fba:	d107      	bne.n	8008fcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008fca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fd4:	d10f      	bne.n	8008ff6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008fe4:	601a      	str	r2, [r3, #0]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008ff4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	e017      	b.n	800903a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d101      	bne.n	8009014 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009010:	2300      	movs	r3, #0
 8009012:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	3b01      	subs	r3, #1
 8009018:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	689a      	ldr	r2, [r3, #8]
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	4013      	ands	r3, r2
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	429a      	cmp	r2, r3
 8009028:	bf0c      	ite	eq
 800902a:	2301      	moveq	r3, #1
 800902c:	2300      	movne	r3, #0
 800902e:	b2db      	uxtb	r3, r3
 8009030:	461a      	mov	r2, r3
 8009032:	79fb      	ldrb	r3, [r7, #7]
 8009034:	429a      	cmp	r2, r3
 8009036:	d19b      	bne.n	8008f70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3720      	adds	r7, #32
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	20000158 	.word	0x20000158

08009048 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b08a      	sub	sp, #40	@ 0x28
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
 8009054:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009056:	2300      	movs	r3, #0
 8009058:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800905a:	f7fc fdbb 	bl	8005bd4 <HAL_GetTick>
 800905e:	4602      	mov	r2, r0
 8009060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009062:	1a9b      	subs	r3, r3, r2
 8009064:	683a      	ldr	r2, [r7, #0]
 8009066:	4413      	add	r3, r2
 8009068:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800906a:	f7fc fdb3 	bl	8005bd4 <HAL_GetTick>
 800906e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	330c      	adds	r3, #12
 8009076:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009078:	4b3d      	ldr	r3, [pc, #244]	@ (8009170 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	4613      	mov	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4413      	add	r3, r2
 8009082:	00da      	lsls	r2, r3, #3
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	0d1b      	lsrs	r3, r3, #20
 8009088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800908a:	fb02 f303 	mul.w	r3, r2, r3
 800908e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009090:	e060      	b.n	8009154 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009098:	d107      	bne.n	80090aa <SPI_WaitFifoStateUntilTimeout+0x62>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d104      	bne.n	80090aa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80090a8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b0:	d050      	beq.n	8009154 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80090b2:	f7fc fd8f 	bl	8005bd4 <HAL_GetTick>
 80090b6:	4602      	mov	r2, r0
 80090b8:	6a3b      	ldr	r3, [r7, #32]
 80090ba:	1ad3      	subs	r3, r2, r3
 80090bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090be:	429a      	cmp	r2, r3
 80090c0:	d902      	bls.n	80090c8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80090c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d13d      	bne.n	8009144 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	685a      	ldr	r2, [r3, #4]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80090d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80090e0:	d111      	bne.n	8009106 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090ea:	d004      	beq.n	80090f6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090f4:	d107      	bne.n	8009106 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009104:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800910a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800910e:	d10f      	bne.n	8009130 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800911e:	601a      	str	r2, [r3, #0]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800912e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009140:	2303      	movs	r3, #3
 8009142:	e010      	b.n	8009166 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d101      	bne.n	800914e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800914a:	2300      	movs	r3, #0
 800914c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	3b01      	subs	r3, #1
 8009152:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	689a      	ldr	r2, [r3, #8]
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	4013      	ands	r3, r2
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	429a      	cmp	r2, r3
 8009162:	d196      	bne.n	8009092 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3728      	adds	r7, #40	@ 0x28
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	20000158 	.word	0x20000158

08009174 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b088      	sub	sp, #32
 8009178:	af02      	add	r7, sp, #8
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009188:	d111      	bne.n	80091ae <SPI_EndRxTransaction+0x3a>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009192:	d004      	beq.n	800919e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800919c:	d107      	bne.n	80091ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091ac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80091b6:	d112      	bne.n	80091de <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	2200      	movs	r2, #0
 80091c0:	2180      	movs	r1, #128	@ 0x80
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f7ff feb8 	bl	8008f38 <SPI_WaitFlagStateUntilTimeout>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d021      	beq.n	8009212 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091d2:	f043 0220 	orr.w	r2, r3, #32
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80091da:	2303      	movs	r3, #3
 80091dc:	e03d      	b.n	800925a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80091de:	4b21      	ldr	r3, [pc, #132]	@ (8009264 <SPI_EndRxTransaction+0xf0>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a21      	ldr	r2, [pc, #132]	@ (8009268 <SPI_EndRxTransaction+0xf4>)
 80091e4:	fba2 2303 	umull	r2, r3, r2, r3
 80091e8:	0d5b      	lsrs	r3, r3, #21
 80091ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80091ee:	fb02 f303 	mul.w	r3, r2, r3
 80091f2:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00a      	beq.n	8009210 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	3b01      	subs	r3, #1
 80091fe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800920a:	2b80      	cmp	r3, #128	@ 0x80
 800920c:	d0f2      	beq.n	80091f4 <SPI_EndRxTransaction+0x80>
 800920e:	e000      	b.n	8009212 <SPI_EndRxTransaction+0x9e>
        break;
 8009210:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800921a:	d11d      	bne.n	8009258 <SPI_EndRxTransaction+0xe4>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009224:	d004      	beq.n	8009230 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800922e:	d113      	bne.n	8009258 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	9300      	str	r3, [sp, #0]
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	2200      	movs	r2, #0
 8009238:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f7ff ff03 	bl	8009048 <SPI_WaitFifoStateUntilTimeout>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d007      	beq.n	8009258 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800924c:	f043 0220 	orr.w	r2, r3, #32
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009254:	2303      	movs	r3, #3
 8009256:	e000      	b.n	800925a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3718      	adds	r7, #24
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	20000158 	.word	0x20000158
 8009268:	165e9f81 	.word	0x165e9f81

0800926c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b088      	sub	sp, #32
 8009270:	af02      	add	r7, sp, #8
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	2200      	movs	r2, #0
 8009280:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f7ff fedf 	bl	8009048 <SPI_WaitFifoStateUntilTimeout>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d007      	beq.n	80092a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009294:	f043 0220 	orr.w	r2, r3, #32
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800929c:	2303      	movs	r3, #3
 800929e:	e046      	b.n	800932e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80092a0:	4b25      	ldr	r3, [pc, #148]	@ (8009338 <SPI_EndRxTxTransaction+0xcc>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a25      	ldr	r2, [pc, #148]	@ (800933c <SPI_EndRxTxTransaction+0xd0>)
 80092a6:	fba2 2303 	umull	r2, r3, r2, r3
 80092aa:	0d5b      	lsrs	r3, r3, #21
 80092ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80092b0:	fb02 f303 	mul.w	r3, r2, r3
 80092b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80092be:	d112      	bne.n	80092e6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	2200      	movs	r2, #0
 80092c8:	2180      	movs	r1, #128	@ 0x80
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f7ff fe34 	bl	8008f38 <SPI_WaitFlagStateUntilTimeout>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d016      	beq.n	8009304 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092da:	f043 0220 	orr.w	r2, r3, #32
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80092e2:	2303      	movs	r3, #3
 80092e4:	e023      	b.n	800932e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00a      	beq.n	8009302 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	3b01      	subs	r3, #1
 80092f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092fc:	2b80      	cmp	r3, #128	@ 0x80
 80092fe:	d0f2      	beq.n	80092e6 <SPI_EndRxTxTransaction+0x7a>
 8009300:	e000      	b.n	8009304 <SPI_EndRxTxTransaction+0x98>
        break;
 8009302:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	2200      	movs	r2, #0
 800930c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f7ff fe99 	bl	8009048 <SPI_WaitFifoStateUntilTimeout>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d007      	beq.n	800932c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009320:	f043 0220 	orr.w	r2, r3, #32
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009328:	2303      	movs	r3, #3
 800932a:	e000      	b.n	800932e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3718      	adds	r7, #24
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	20000158 	.word	0x20000158
 800933c:	165e9f81 	.word	0x165e9f81

08009340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d101      	bne.n	8009352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e049      	b.n	80093e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009358:	b2db      	uxtb	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d106      	bne.n	800936c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7fc f9cc 	bl	8005704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2202      	movs	r2, #2
 8009370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	3304      	adds	r3, #4
 800937c:	4619      	mov	r1, r3
 800937e:	4610      	mov	r0, r2
 8009380:	f000 fdde 	bl	8009f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2201      	movs	r2, #1
 80093e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3708      	adds	r7, #8
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
	...

080093f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	2b01      	cmp	r3, #1
 8009402:	d001      	beq.n	8009408 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e054      	b.n	80094b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2202      	movs	r2, #2
 800940c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68da      	ldr	r2, [r3, #12]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f042 0201 	orr.w	r2, r2, #1
 800941e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a26      	ldr	r2, [pc, #152]	@ (80094c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d022      	beq.n	8009470 <HAL_TIM_Base_Start_IT+0x80>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009432:	d01d      	beq.n	8009470 <HAL_TIM_Base_Start_IT+0x80>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a22      	ldr	r2, [pc, #136]	@ (80094c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d018      	beq.n	8009470 <HAL_TIM_Base_Start_IT+0x80>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a21      	ldr	r2, [pc, #132]	@ (80094c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d013      	beq.n	8009470 <HAL_TIM_Base_Start_IT+0x80>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a1f      	ldr	r2, [pc, #124]	@ (80094cc <HAL_TIM_Base_Start_IT+0xdc>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d00e      	beq.n	8009470 <HAL_TIM_Base_Start_IT+0x80>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a1e      	ldr	r2, [pc, #120]	@ (80094d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d009      	beq.n	8009470 <HAL_TIM_Base_Start_IT+0x80>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a1c      	ldr	r2, [pc, #112]	@ (80094d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d004      	beq.n	8009470 <HAL_TIM_Base_Start_IT+0x80>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a1b      	ldr	r2, [pc, #108]	@ (80094d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d115      	bne.n	800949c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	689a      	ldr	r2, [r3, #8]
 8009476:	4b19      	ldr	r3, [pc, #100]	@ (80094dc <HAL_TIM_Base_Start_IT+0xec>)
 8009478:	4013      	ands	r3, r2
 800947a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2b06      	cmp	r3, #6
 8009480:	d015      	beq.n	80094ae <HAL_TIM_Base_Start_IT+0xbe>
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009488:	d011      	beq.n	80094ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f042 0201 	orr.w	r2, r2, #1
 8009498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800949a:	e008      	b.n	80094ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f042 0201 	orr.w	r2, r2, #1
 80094aa:	601a      	str	r2, [r3, #0]
 80094ac:	e000      	b.n	80094b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3714      	adds	r7, #20
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	40010000 	.word	0x40010000
 80094c4:	40000400 	.word	0x40000400
 80094c8:	40000800 	.word	0x40000800
 80094cc:	40000c00 	.word	0x40000c00
 80094d0:	40010400 	.word	0x40010400
 80094d4:	40014000 	.word	0x40014000
 80094d8:	40001800 	.word	0x40001800
 80094dc:	00010007 	.word	0x00010007

080094e0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	68da      	ldr	r2, [r3, #12]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f022 0201 	bic.w	r2, r2, #1
 80094f6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	6a1a      	ldr	r2, [r3, #32]
 80094fe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009502:	4013      	ands	r3, r2
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10f      	bne.n	8009528 <HAL_TIM_Base_Stop_IT+0x48>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	6a1a      	ldr	r2, [r3, #32]
 800950e:	f240 4344 	movw	r3, #1092	@ 0x444
 8009512:	4013      	ands	r3, r2
 8009514:	2b00      	cmp	r3, #0
 8009516:	d107      	bne.n	8009528 <HAL_TIM_Base_Stop_IT+0x48>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f022 0201 	bic.w	r2, r2, #1
 8009526:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	370c      	adds	r7, #12
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr

0800953e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b082      	sub	sp, #8
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d101      	bne.n	8009550 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e049      	b.n	80095e4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b00      	cmp	r3, #0
 800955a:	d106      	bne.n	800956a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f841 	bl	80095ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2202      	movs	r2, #2
 800956e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	3304      	adds	r3, #4
 800957a:	4619      	mov	r1, r3
 800957c:	4610      	mov	r0, r2
 800957e:	f000 fcdf 	bl	8009f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2201      	movs	r2, #1
 8009586:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2201      	movs	r2, #1
 80095ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2201      	movs	r2, #1
 80095d6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2201      	movs	r2, #1
 80095de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d109      	bne.n	8009624 <HAL_TIM_PWM_Start+0x24>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009616:	b2db      	uxtb	r3, r3
 8009618:	2b01      	cmp	r3, #1
 800961a:	bf14      	ite	ne
 800961c:	2301      	movne	r3, #1
 800961e:	2300      	moveq	r3, #0
 8009620:	b2db      	uxtb	r3, r3
 8009622:	e03c      	b.n	800969e <HAL_TIM_PWM_Start+0x9e>
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	2b04      	cmp	r3, #4
 8009628:	d109      	bne.n	800963e <HAL_TIM_PWM_Start+0x3e>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009630:	b2db      	uxtb	r3, r3
 8009632:	2b01      	cmp	r3, #1
 8009634:	bf14      	ite	ne
 8009636:	2301      	movne	r3, #1
 8009638:	2300      	moveq	r3, #0
 800963a:	b2db      	uxtb	r3, r3
 800963c:	e02f      	b.n	800969e <HAL_TIM_PWM_Start+0x9e>
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	2b08      	cmp	r3, #8
 8009642:	d109      	bne.n	8009658 <HAL_TIM_PWM_Start+0x58>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800964a:	b2db      	uxtb	r3, r3
 800964c:	2b01      	cmp	r3, #1
 800964e:	bf14      	ite	ne
 8009650:	2301      	movne	r3, #1
 8009652:	2300      	moveq	r3, #0
 8009654:	b2db      	uxtb	r3, r3
 8009656:	e022      	b.n	800969e <HAL_TIM_PWM_Start+0x9e>
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	2b0c      	cmp	r3, #12
 800965c:	d109      	bne.n	8009672 <HAL_TIM_PWM_Start+0x72>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009664:	b2db      	uxtb	r3, r3
 8009666:	2b01      	cmp	r3, #1
 8009668:	bf14      	ite	ne
 800966a:	2301      	movne	r3, #1
 800966c:	2300      	moveq	r3, #0
 800966e:	b2db      	uxtb	r3, r3
 8009670:	e015      	b.n	800969e <HAL_TIM_PWM_Start+0x9e>
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	2b10      	cmp	r3, #16
 8009676:	d109      	bne.n	800968c <HAL_TIM_PWM_Start+0x8c>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800967e:	b2db      	uxtb	r3, r3
 8009680:	2b01      	cmp	r3, #1
 8009682:	bf14      	ite	ne
 8009684:	2301      	movne	r3, #1
 8009686:	2300      	moveq	r3, #0
 8009688:	b2db      	uxtb	r3, r3
 800968a:	e008      	b.n	800969e <HAL_TIM_PWM_Start+0x9e>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009692:	b2db      	uxtb	r3, r3
 8009694:	2b01      	cmp	r3, #1
 8009696:	bf14      	ite	ne
 8009698:	2301      	movne	r3, #1
 800969a:	2300      	moveq	r3, #0
 800969c:	b2db      	uxtb	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d001      	beq.n	80096a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e092      	b.n	80097cc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d104      	bne.n	80096b6 <HAL_TIM_PWM_Start+0xb6>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2202      	movs	r2, #2
 80096b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80096b4:	e023      	b.n	80096fe <HAL_TIM_PWM_Start+0xfe>
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	2b04      	cmp	r3, #4
 80096ba:	d104      	bne.n	80096c6 <HAL_TIM_PWM_Start+0xc6>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2202      	movs	r2, #2
 80096c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80096c4:	e01b      	b.n	80096fe <HAL_TIM_PWM_Start+0xfe>
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	2b08      	cmp	r3, #8
 80096ca:	d104      	bne.n	80096d6 <HAL_TIM_PWM_Start+0xd6>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2202      	movs	r2, #2
 80096d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80096d4:	e013      	b.n	80096fe <HAL_TIM_PWM_Start+0xfe>
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	2b0c      	cmp	r3, #12
 80096da:	d104      	bne.n	80096e6 <HAL_TIM_PWM_Start+0xe6>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2202      	movs	r2, #2
 80096e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80096e4:	e00b      	b.n	80096fe <HAL_TIM_PWM_Start+0xfe>
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	2b10      	cmp	r3, #16
 80096ea:	d104      	bne.n	80096f6 <HAL_TIM_PWM_Start+0xf6>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2202      	movs	r2, #2
 80096f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80096f4:	e003      	b.n	80096fe <HAL_TIM_PWM_Start+0xfe>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2202      	movs	r2, #2
 80096fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2201      	movs	r2, #1
 8009704:	6839      	ldr	r1, [r7, #0]
 8009706:	4618      	mov	r0, r3
 8009708:	f000 ffb2 	bl	800a670 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a30      	ldr	r2, [pc, #192]	@ (80097d4 <HAL_TIM_PWM_Start+0x1d4>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d004      	beq.n	8009720 <HAL_TIM_PWM_Start+0x120>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a2f      	ldr	r2, [pc, #188]	@ (80097d8 <HAL_TIM_PWM_Start+0x1d8>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d101      	bne.n	8009724 <HAL_TIM_PWM_Start+0x124>
 8009720:	2301      	movs	r3, #1
 8009722:	e000      	b.n	8009726 <HAL_TIM_PWM_Start+0x126>
 8009724:	2300      	movs	r3, #0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d007      	beq.n	800973a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009738:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a25      	ldr	r2, [pc, #148]	@ (80097d4 <HAL_TIM_PWM_Start+0x1d4>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d022      	beq.n	800978a <HAL_TIM_PWM_Start+0x18a>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800974c:	d01d      	beq.n	800978a <HAL_TIM_PWM_Start+0x18a>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a22      	ldr	r2, [pc, #136]	@ (80097dc <HAL_TIM_PWM_Start+0x1dc>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d018      	beq.n	800978a <HAL_TIM_PWM_Start+0x18a>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a20      	ldr	r2, [pc, #128]	@ (80097e0 <HAL_TIM_PWM_Start+0x1e0>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d013      	beq.n	800978a <HAL_TIM_PWM_Start+0x18a>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a1f      	ldr	r2, [pc, #124]	@ (80097e4 <HAL_TIM_PWM_Start+0x1e4>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d00e      	beq.n	800978a <HAL_TIM_PWM_Start+0x18a>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a19      	ldr	r2, [pc, #100]	@ (80097d8 <HAL_TIM_PWM_Start+0x1d8>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d009      	beq.n	800978a <HAL_TIM_PWM_Start+0x18a>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a1b      	ldr	r2, [pc, #108]	@ (80097e8 <HAL_TIM_PWM_Start+0x1e8>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d004      	beq.n	800978a <HAL_TIM_PWM_Start+0x18a>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a19      	ldr	r2, [pc, #100]	@ (80097ec <HAL_TIM_PWM_Start+0x1ec>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d115      	bne.n	80097b6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	689a      	ldr	r2, [r3, #8]
 8009790:	4b17      	ldr	r3, [pc, #92]	@ (80097f0 <HAL_TIM_PWM_Start+0x1f0>)
 8009792:	4013      	ands	r3, r2
 8009794:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2b06      	cmp	r3, #6
 800979a:	d015      	beq.n	80097c8 <HAL_TIM_PWM_Start+0x1c8>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097a2:	d011      	beq.n	80097c8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f042 0201 	orr.w	r2, r2, #1
 80097b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097b4:	e008      	b.n	80097c8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f042 0201 	orr.w	r2, r2, #1
 80097c4:	601a      	str	r2, [r3, #0]
 80097c6:	e000      	b.n	80097ca <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3710      	adds	r7, #16
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	40010000 	.word	0x40010000
 80097d8:	40010400 	.word	0x40010400
 80097dc:	40000400 	.word	0x40000400
 80097e0:	40000800 	.word	0x40000800
 80097e4:	40000c00 	.word	0x40000c00
 80097e8:	40014000 	.word	0x40014000
 80097ec:	40001800 	.word	0x40001800
 80097f0:	00010007 	.word	0x00010007

080097f4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2200      	movs	r2, #0
 8009804:	6839      	ldr	r1, [r7, #0]
 8009806:	4618      	mov	r0, r3
 8009808:	f000 ff32 	bl	800a670 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a36      	ldr	r2, [pc, #216]	@ (80098ec <HAL_TIM_PWM_Stop+0xf8>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d004      	beq.n	8009820 <HAL_TIM_PWM_Stop+0x2c>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a35      	ldr	r2, [pc, #212]	@ (80098f0 <HAL_TIM_PWM_Stop+0xfc>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d101      	bne.n	8009824 <HAL_TIM_PWM_Stop+0x30>
 8009820:	2301      	movs	r3, #1
 8009822:	e000      	b.n	8009826 <HAL_TIM_PWM_Stop+0x32>
 8009824:	2300      	movs	r3, #0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d017      	beq.n	800985a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	6a1a      	ldr	r2, [r3, #32]
 8009830:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009834:	4013      	ands	r3, r2
 8009836:	2b00      	cmp	r3, #0
 8009838:	d10f      	bne.n	800985a <HAL_TIM_PWM_Stop+0x66>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	6a1a      	ldr	r2, [r3, #32]
 8009840:	f240 4344 	movw	r3, #1092	@ 0x444
 8009844:	4013      	ands	r3, r2
 8009846:	2b00      	cmp	r3, #0
 8009848:	d107      	bne.n	800985a <HAL_TIM_PWM_Stop+0x66>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009858:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	6a1a      	ldr	r2, [r3, #32]
 8009860:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009864:	4013      	ands	r3, r2
 8009866:	2b00      	cmp	r3, #0
 8009868:	d10f      	bne.n	800988a <HAL_TIM_PWM_Stop+0x96>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6a1a      	ldr	r2, [r3, #32]
 8009870:	f240 4344 	movw	r3, #1092	@ 0x444
 8009874:	4013      	ands	r3, r2
 8009876:	2b00      	cmp	r3, #0
 8009878:	d107      	bne.n	800988a <HAL_TIM_PWM_Stop+0x96>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f022 0201 	bic.w	r2, r2, #1
 8009888:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d104      	bne.n	800989a <HAL_TIM_PWM_Stop+0xa6>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009898:	e023      	b.n	80098e2 <HAL_TIM_PWM_Stop+0xee>
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	2b04      	cmp	r3, #4
 800989e:	d104      	bne.n	80098aa <HAL_TIM_PWM_Stop+0xb6>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80098a8:	e01b      	b.n	80098e2 <HAL_TIM_PWM_Stop+0xee>
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	2b08      	cmp	r3, #8
 80098ae:	d104      	bne.n	80098ba <HAL_TIM_PWM_Stop+0xc6>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80098b8:	e013      	b.n	80098e2 <HAL_TIM_PWM_Stop+0xee>
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	2b0c      	cmp	r3, #12
 80098be:	d104      	bne.n	80098ca <HAL_TIM_PWM_Stop+0xd6>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80098c8:	e00b      	b.n	80098e2 <HAL_TIM_PWM_Stop+0xee>
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2b10      	cmp	r3, #16
 80098ce:	d104      	bne.n	80098da <HAL_TIM_PWM_Stop+0xe6>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80098d8:	e003      	b.n	80098e2 <HAL_TIM_PWM_Stop+0xee>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2201      	movs	r2, #1
 80098de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	40010000 	.word	0x40010000
 80098f0:	40010400 	.word	0x40010400

080098f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	f003 0302 	and.w	r3, r3, #2
 8009906:	2b02      	cmp	r3, #2
 8009908:	d122      	bne.n	8009950 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	f003 0302 	and.w	r3, r3, #2
 8009914:	2b02      	cmp	r3, #2
 8009916:	d11b      	bne.n	8009950 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f06f 0202 	mvn.w	r2, #2
 8009920:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2201      	movs	r2, #1
 8009926:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	f003 0303 	and.w	r3, r3, #3
 8009932:	2b00      	cmp	r3, #0
 8009934:	d003      	beq.n	800993e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fae4 	bl	8009f04 <HAL_TIM_IC_CaptureCallback>
 800993c:	e005      	b.n	800994a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fad6 	bl	8009ef0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 fae7 	bl	8009f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	f003 0304 	and.w	r3, r3, #4
 800995a:	2b04      	cmp	r3, #4
 800995c:	d122      	bne.n	80099a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	f003 0304 	and.w	r3, r3, #4
 8009968:	2b04      	cmp	r3, #4
 800996a:	d11b      	bne.n	80099a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f06f 0204 	mvn.w	r2, #4
 8009974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2202      	movs	r2, #2
 800997a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009986:	2b00      	cmp	r3, #0
 8009988:	d003      	beq.n	8009992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 faba 	bl	8009f04 <HAL_TIM_IC_CaptureCallback>
 8009990:	e005      	b.n	800999e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 faac 	bl	8009ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fabd 	bl	8009f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	f003 0308 	and.w	r3, r3, #8
 80099ae:	2b08      	cmp	r3, #8
 80099b0:	d122      	bne.n	80099f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	68db      	ldr	r3, [r3, #12]
 80099b8:	f003 0308 	and.w	r3, r3, #8
 80099bc:	2b08      	cmp	r3, #8
 80099be:	d11b      	bne.n	80099f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f06f 0208 	mvn.w	r2, #8
 80099c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2204      	movs	r2, #4
 80099ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	69db      	ldr	r3, [r3, #28]
 80099d6:	f003 0303 	and.w	r3, r3, #3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d003      	beq.n	80099e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fa90 	bl	8009f04 <HAL_TIM_IC_CaptureCallback>
 80099e4:	e005      	b.n	80099f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 fa82 	bl	8009ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 fa93 	bl	8009f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	f003 0310 	and.w	r3, r3, #16
 8009a02:	2b10      	cmp	r3, #16
 8009a04:	d122      	bne.n	8009a4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	f003 0310 	and.w	r3, r3, #16
 8009a10:	2b10      	cmp	r3, #16
 8009a12:	d11b      	bne.n	8009a4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f06f 0210 	mvn.w	r2, #16
 8009a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2208      	movs	r2, #8
 8009a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	69db      	ldr	r3, [r3, #28]
 8009a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d003      	beq.n	8009a3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fa66 	bl	8009f04 <HAL_TIM_IC_CaptureCallback>
 8009a38:	e005      	b.n	8009a46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fa58 	bl	8009ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fa69 	bl	8009f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	f003 0301 	and.w	r3, r3, #1
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d10e      	bne.n	8009a78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	f003 0301 	and.w	r3, r3, #1
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d107      	bne.n	8009a78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f06f 0201 	mvn.w	r2, #1
 8009a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7f9 fbde 	bl	8003234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a82:	2b80      	cmp	r3, #128	@ 0x80
 8009a84:	d10e      	bne.n	8009aa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a90:	2b80      	cmp	r3, #128	@ 0x80
 8009a92:	d107      	bne.n	8009aa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 ff22 	bl	800a8e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ab2:	d10e      	bne.n	8009ad2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009abe:	2b80      	cmp	r3, #128	@ 0x80
 8009ac0:	d107      	bne.n	8009ad2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 ff15 	bl	800a8fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009adc:	2b40      	cmp	r3, #64	@ 0x40
 8009ade:	d10e      	bne.n	8009afe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009aea:	2b40      	cmp	r3, #64	@ 0x40
 8009aec:	d107      	bne.n	8009afe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 fa17 	bl	8009f2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	691b      	ldr	r3, [r3, #16]
 8009b04:	f003 0320 	and.w	r3, r3, #32
 8009b08:	2b20      	cmp	r3, #32
 8009b0a:	d10e      	bne.n	8009b2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	f003 0320 	and.w	r3, r3, #32
 8009b16:	2b20      	cmp	r3, #32
 8009b18:	d107      	bne.n	8009b2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f06f 0220 	mvn.w	r2, #32
 8009b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 fed5 	bl	800a8d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b2a:	bf00      	nop
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
	...

08009b34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b086      	sub	sp, #24
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d101      	bne.n	8009b52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009b4e:	2302      	movs	r3, #2
 8009b50:	e0ff      	b.n	8009d52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2b14      	cmp	r3, #20
 8009b5e:	f200 80f0 	bhi.w	8009d42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009b62:	a201      	add	r2, pc, #4	@ (adr r2, 8009b68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b68:	08009bbd 	.word	0x08009bbd
 8009b6c:	08009d43 	.word	0x08009d43
 8009b70:	08009d43 	.word	0x08009d43
 8009b74:	08009d43 	.word	0x08009d43
 8009b78:	08009bfd 	.word	0x08009bfd
 8009b7c:	08009d43 	.word	0x08009d43
 8009b80:	08009d43 	.word	0x08009d43
 8009b84:	08009d43 	.word	0x08009d43
 8009b88:	08009c3f 	.word	0x08009c3f
 8009b8c:	08009d43 	.word	0x08009d43
 8009b90:	08009d43 	.word	0x08009d43
 8009b94:	08009d43 	.word	0x08009d43
 8009b98:	08009c7f 	.word	0x08009c7f
 8009b9c:	08009d43 	.word	0x08009d43
 8009ba0:	08009d43 	.word	0x08009d43
 8009ba4:	08009d43 	.word	0x08009d43
 8009ba8:	08009cc1 	.word	0x08009cc1
 8009bac:	08009d43 	.word	0x08009d43
 8009bb0:	08009d43 	.word	0x08009d43
 8009bb4:	08009d43 	.word	0x08009d43
 8009bb8:	08009d01 	.word	0x08009d01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	68b9      	ldr	r1, [r7, #8]
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 fa5c 	bl	800a080 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	699a      	ldr	r2, [r3, #24]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f042 0208 	orr.w	r2, r2, #8
 8009bd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	699a      	ldr	r2, [r3, #24]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f022 0204 	bic.w	r2, r2, #4
 8009be6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	6999      	ldr	r1, [r3, #24]
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	691a      	ldr	r2, [r3, #16]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	619a      	str	r2, [r3, #24]
      break;
 8009bfa:	e0a5      	b.n	8009d48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68b9      	ldr	r1, [r7, #8]
 8009c02:	4618      	mov	r0, r3
 8009c04:	f000 faae 	bl	800a164 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	699a      	ldr	r2, [r3, #24]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	699a      	ldr	r2, [r3, #24]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6999      	ldr	r1, [r3, #24]
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	021a      	lsls	r2, r3, #8
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	430a      	orrs	r2, r1
 8009c3a:	619a      	str	r2, [r3, #24]
      break;
 8009c3c:	e084      	b.n	8009d48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	68b9      	ldr	r1, [r7, #8]
 8009c44:	4618      	mov	r0, r3
 8009c46:	f000 fb05 	bl	800a254 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	69da      	ldr	r2, [r3, #28]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f042 0208 	orr.w	r2, r2, #8
 8009c58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	69da      	ldr	r2, [r3, #28]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f022 0204 	bic.w	r2, r2, #4
 8009c68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	69d9      	ldr	r1, [r3, #28]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	691a      	ldr	r2, [r3, #16]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	430a      	orrs	r2, r1
 8009c7a:	61da      	str	r2, [r3, #28]
      break;
 8009c7c:	e064      	b.n	8009d48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68b9      	ldr	r1, [r7, #8]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f000 fb5b 	bl	800a340 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	69da      	ldr	r2, [r3, #28]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	69da      	ldr	r2, [r3, #28]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ca8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	69d9      	ldr	r1, [r3, #28]
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	021a      	lsls	r2, r3, #8
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	430a      	orrs	r2, r1
 8009cbc:	61da      	str	r2, [r3, #28]
      break;
 8009cbe:	e043      	b.n	8009d48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	68b9      	ldr	r1, [r7, #8]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f000 fb92 	bl	800a3f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f042 0208 	orr.w	r2, r2, #8
 8009cda:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f022 0204 	bic.w	r2, r2, #4
 8009cea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	691a      	ldr	r2, [r3, #16]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	430a      	orrs	r2, r1
 8009cfc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009cfe:	e023      	b.n	8009d48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68b9      	ldr	r1, [r7, #8]
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 fbc4 	bl	800a494 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009d1a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009d2a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	691b      	ldr	r3, [r3, #16]
 8009d36:	021a      	lsls	r2, r3, #8
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	430a      	orrs	r2, r1
 8009d3e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009d40:	e002      	b.n	8009d48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	75fb      	strb	r3, [r7, #23]
      break;
 8009d46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3718      	adds	r7, #24
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop

08009d5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d66:	2300      	movs	r3, #0
 8009d68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d101      	bne.n	8009d78 <HAL_TIM_ConfigClockSource+0x1c>
 8009d74:	2302      	movs	r3, #2
 8009d76:	e0b4      	b.n	8009ee2 <HAL_TIM_ConfigClockSource+0x186>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2202      	movs	r2, #2
 8009d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d90:	68ba      	ldr	r2, [r7, #8]
 8009d92:	4b56      	ldr	r3, [pc, #344]	@ (8009eec <HAL_TIM_ConfigClockSource+0x190>)
 8009d94:	4013      	ands	r3, r2
 8009d96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	68ba      	ldr	r2, [r7, #8]
 8009da6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009db0:	d03e      	beq.n	8009e30 <HAL_TIM_ConfigClockSource+0xd4>
 8009db2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009db6:	f200 8087 	bhi.w	8009ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8009dba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009dbe:	f000 8086 	beq.w	8009ece <HAL_TIM_ConfigClockSource+0x172>
 8009dc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009dc6:	d87f      	bhi.n	8009ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8009dc8:	2b70      	cmp	r3, #112	@ 0x70
 8009dca:	d01a      	beq.n	8009e02 <HAL_TIM_ConfigClockSource+0xa6>
 8009dcc:	2b70      	cmp	r3, #112	@ 0x70
 8009dce:	d87b      	bhi.n	8009ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8009dd0:	2b60      	cmp	r3, #96	@ 0x60
 8009dd2:	d050      	beq.n	8009e76 <HAL_TIM_ConfigClockSource+0x11a>
 8009dd4:	2b60      	cmp	r3, #96	@ 0x60
 8009dd6:	d877      	bhi.n	8009ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8009dd8:	2b50      	cmp	r3, #80	@ 0x50
 8009dda:	d03c      	beq.n	8009e56 <HAL_TIM_ConfigClockSource+0xfa>
 8009ddc:	2b50      	cmp	r3, #80	@ 0x50
 8009dde:	d873      	bhi.n	8009ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8009de0:	2b40      	cmp	r3, #64	@ 0x40
 8009de2:	d058      	beq.n	8009e96 <HAL_TIM_ConfigClockSource+0x13a>
 8009de4:	2b40      	cmp	r3, #64	@ 0x40
 8009de6:	d86f      	bhi.n	8009ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8009de8:	2b30      	cmp	r3, #48	@ 0x30
 8009dea:	d064      	beq.n	8009eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8009dec:	2b30      	cmp	r3, #48	@ 0x30
 8009dee:	d86b      	bhi.n	8009ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8009df0:	2b20      	cmp	r3, #32
 8009df2:	d060      	beq.n	8009eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8009df4:	2b20      	cmp	r3, #32
 8009df6:	d867      	bhi.n	8009ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d05c      	beq.n	8009eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8009dfc:	2b10      	cmp	r3, #16
 8009dfe:	d05a      	beq.n	8009eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8009e00:	e062      	b.n	8009ec8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e12:	f000 fc0d 	bl	800a630 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009e24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68ba      	ldr	r2, [r7, #8]
 8009e2c:	609a      	str	r2, [r3, #8]
      break;
 8009e2e:	e04f      	b.n	8009ed0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e40:	f000 fbf6 	bl	800a630 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	689a      	ldr	r2, [r3, #8]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009e52:	609a      	str	r2, [r3, #8]
      break;
 8009e54:	e03c      	b.n	8009ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e62:	461a      	mov	r2, r3
 8009e64:	f000 fb6a 	bl	800a53c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2150      	movs	r1, #80	@ 0x50
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 fbc3 	bl	800a5fa <TIM_ITRx_SetConfig>
      break;
 8009e74:	e02c      	b.n	8009ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e82:	461a      	mov	r2, r3
 8009e84:	f000 fb89 	bl	800a59a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2160      	movs	r1, #96	@ 0x60
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f000 fbb3 	bl	800a5fa <TIM_ITRx_SetConfig>
      break;
 8009e94:	e01c      	b.n	8009ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	f000 fb4a 	bl	800a53c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2140      	movs	r1, #64	@ 0x40
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f000 fba3 	bl	800a5fa <TIM_ITRx_SetConfig>
      break;
 8009eb4:	e00c      	b.n	8009ed0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	4610      	mov	r0, r2
 8009ec2:	f000 fb9a 	bl	800a5fa <TIM_ITRx_SetConfig>
      break;
 8009ec6:	e003      	b.n	8009ed0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	73fb      	strb	r3, [r7, #15]
      break;
 8009ecc:	e000      	b.n	8009ed0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009ece:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	fffeff88 	.word	0xfffeff88

08009ef0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ef8:	bf00      	nop
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f0c:	bf00      	nop
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f34:	bf00      	nop
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b085      	sub	sp, #20
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a40      	ldr	r2, [pc, #256]	@ (800a054 <TIM_Base_SetConfig+0x114>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d013      	beq.n	8009f80 <TIM_Base_SetConfig+0x40>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f5e:	d00f      	beq.n	8009f80 <TIM_Base_SetConfig+0x40>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a3d      	ldr	r2, [pc, #244]	@ (800a058 <TIM_Base_SetConfig+0x118>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d00b      	beq.n	8009f80 <TIM_Base_SetConfig+0x40>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a3c      	ldr	r2, [pc, #240]	@ (800a05c <TIM_Base_SetConfig+0x11c>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d007      	beq.n	8009f80 <TIM_Base_SetConfig+0x40>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a3b      	ldr	r2, [pc, #236]	@ (800a060 <TIM_Base_SetConfig+0x120>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d003      	beq.n	8009f80 <TIM_Base_SetConfig+0x40>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a3a      	ldr	r2, [pc, #232]	@ (800a064 <TIM_Base_SetConfig+0x124>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d108      	bne.n	8009f92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a2f      	ldr	r2, [pc, #188]	@ (800a054 <TIM_Base_SetConfig+0x114>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d02b      	beq.n	8009ff2 <TIM_Base_SetConfig+0xb2>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fa0:	d027      	beq.n	8009ff2 <TIM_Base_SetConfig+0xb2>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a2c      	ldr	r2, [pc, #176]	@ (800a058 <TIM_Base_SetConfig+0x118>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d023      	beq.n	8009ff2 <TIM_Base_SetConfig+0xb2>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4a2b      	ldr	r2, [pc, #172]	@ (800a05c <TIM_Base_SetConfig+0x11c>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d01f      	beq.n	8009ff2 <TIM_Base_SetConfig+0xb2>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4a2a      	ldr	r2, [pc, #168]	@ (800a060 <TIM_Base_SetConfig+0x120>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d01b      	beq.n	8009ff2 <TIM_Base_SetConfig+0xb2>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4a29      	ldr	r2, [pc, #164]	@ (800a064 <TIM_Base_SetConfig+0x124>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d017      	beq.n	8009ff2 <TIM_Base_SetConfig+0xb2>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	4a28      	ldr	r2, [pc, #160]	@ (800a068 <TIM_Base_SetConfig+0x128>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d013      	beq.n	8009ff2 <TIM_Base_SetConfig+0xb2>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4a27      	ldr	r2, [pc, #156]	@ (800a06c <TIM_Base_SetConfig+0x12c>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d00f      	beq.n	8009ff2 <TIM_Base_SetConfig+0xb2>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a26      	ldr	r2, [pc, #152]	@ (800a070 <TIM_Base_SetConfig+0x130>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d00b      	beq.n	8009ff2 <TIM_Base_SetConfig+0xb2>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4a25      	ldr	r2, [pc, #148]	@ (800a074 <TIM_Base_SetConfig+0x134>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d007      	beq.n	8009ff2 <TIM_Base_SetConfig+0xb2>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4a24      	ldr	r2, [pc, #144]	@ (800a078 <TIM_Base_SetConfig+0x138>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d003      	beq.n	8009ff2 <TIM_Base_SetConfig+0xb2>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a23      	ldr	r2, [pc, #140]	@ (800a07c <TIM_Base_SetConfig+0x13c>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d108      	bne.n	800a004 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	4313      	orrs	r3, r2
 800a002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	695b      	ldr	r3, [r3, #20]
 800a00e:	4313      	orrs	r3, r2
 800a010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	689a      	ldr	r2, [r3, #8]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4a0a      	ldr	r2, [pc, #40]	@ (800a054 <TIM_Base_SetConfig+0x114>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d003      	beq.n	800a038 <TIM_Base_SetConfig+0xf8>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4a0c      	ldr	r2, [pc, #48]	@ (800a064 <TIM_Base_SetConfig+0x124>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d103      	bne.n	800a040 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	691a      	ldr	r2, [r3, #16]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2201      	movs	r2, #1
 800a044:	615a      	str	r2, [r3, #20]
}
 800a046:	bf00      	nop
 800a048:	3714      	adds	r7, #20
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	40010000 	.word	0x40010000
 800a058:	40000400 	.word	0x40000400
 800a05c:	40000800 	.word	0x40000800
 800a060:	40000c00 	.word	0x40000c00
 800a064:	40010400 	.word	0x40010400
 800a068:	40014000 	.word	0x40014000
 800a06c:	40014400 	.word	0x40014400
 800a070:	40014800 	.word	0x40014800
 800a074:	40001800 	.word	0x40001800
 800a078:	40001c00 	.word	0x40001c00
 800a07c:	40002000 	.word	0x40002000

0800a080 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a080:	b480      	push	{r7}
 800a082:	b087      	sub	sp, #28
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6a1b      	ldr	r3, [r3, #32]
 800a08e:	f023 0201 	bic.w	r2, r3, #1
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6a1b      	ldr	r3, [r3, #32]
 800a09a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	699b      	ldr	r3, [r3, #24]
 800a0a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	4b2b      	ldr	r3, [pc, #172]	@ (800a158 <TIM_OC1_SetConfig+0xd8>)
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f023 0303 	bic.w	r3, r3, #3
 800a0b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f023 0302 	bic.w	r3, r3, #2
 800a0c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a21      	ldr	r2, [pc, #132]	@ (800a15c <TIM_OC1_SetConfig+0xdc>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d003      	beq.n	800a0e4 <TIM_OC1_SetConfig+0x64>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a20      	ldr	r2, [pc, #128]	@ (800a160 <TIM_OC1_SetConfig+0xe0>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d10c      	bne.n	800a0fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	f023 0308 	bic.w	r3, r3, #8
 800a0ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	697a      	ldr	r2, [r7, #20]
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	f023 0304 	bic.w	r3, r3, #4
 800a0fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	4a16      	ldr	r2, [pc, #88]	@ (800a15c <TIM_OC1_SetConfig+0xdc>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d003      	beq.n	800a10e <TIM_OC1_SetConfig+0x8e>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	4a15      	ldr	r2, [pc, #84]	@ (800a160 <TIM_OC1_SetConfig+0xe0>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d111      	bne.n	800a132 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a11c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	695b      	ldr	r3, [r3, #20]
 800a122:	693a      	ldr	r2, [r7, #16]
 800a124:	4313      	orrs	r3, r2
 800a126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	699b      	ldr	r3, [r3, #24]
 800a12c:	693a      	ldr	r2, [r7, #16]
 800a12e:	4313      	orrs	r3, r2
 800a130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	693a      	ldr	r2, [r7, #16]
 800a136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	685a      	ldr	r2, [r3, #4]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	697a      	ldr	r2, [r7, #20]
 800a14a:	621a      	str	r2, [r3, #32]
}
 800a14c:	bf00      	nop
 800a14e:	371c      	adds	r7, #28
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr
 800a158:	fffeff8f 	.word	0xfffeff8f
 800a15c:	40010000 	.word	0x40010000
 800a160:	40010400 	.word	0x40010400

0800a164 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a164:	b480      	push	{r7}
 800a166:	b087      	sub	sp, #28
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a1b      	ldr	r3, [r3, #32]
 800a172:	f023 0210 	bic.w	r2, r3, #16
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6a1b      	ldr	r3, [r3, #32]
 800a17e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	699b      	ldr	r3, [r3, #24]
 800a18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	4b2e      	ldr	r3, [pc, #184]	@ (800a248 <TIM_OC2_SetConfig+0xe4>)
 800a190:	4013      	ands	r3, r2
 800a192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a19a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	021b      	lsls	r3, r3, #8
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	f023 0320 	bic.w	r3, r3, #32
 800a1ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	011b      	lsls	r3, r3, #4
 800a1b6:	697a      	ldr	r2, [r7, #20]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a23      	ldr	r2, [pc, #140]	@ (800a24c <TIM_OC2_SetConfig+0xe8>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d003      	beq.n	800a1cc <TIM_OC2_SetConfig+0x68>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a22      	ldr	r2, [pc, #136]	@ (800a250 <TIM_OC2_SetConfig+0xec>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d10d      	bne.n	800a1e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	011b      	lsls	r3, r3, #4
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a18      	ldr	r2, [pc, #96]	@ (800a24c <TIM_OC2_SetConfig+0xe8>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d003      	beq.n	800a1f8 <TIM_OC2_SetConfig+0x94>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a17      	ldr	r2, [pc, #92]	@ (800a250 <TIM_OC2_SetConfig+0xec>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d113      	bne.n	800a220 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a1fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a206:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	695b      	ldr	r3, [r3, #20]
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	693a      	ldr	r2, [r7, #16]
 800a210:	4313      	orrs	r3, r2
 800a212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	699b      	ldr	r3, [r3, #24]
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	693a      	ldr	r2, [r7, #16]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	693a      	ldr	r2, [r7, #16]
 800a224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	685a      	ldr	r2, [r3, #4]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	697a      	ldr	r2, [r7, #20]
 800a238:	621a      	str	r2, [r3, #32]
}
 800a23a:	bf00      	nop
 800a23c:	371c      	adds	r7, #28
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	feff8fff 	.word	0xfeff8fff
 800a24c:	40010000 	.word	0x40010000
 800a250:	40010400 	.word	0x40010400

0800a254 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a254:	b480      	push	{r7}
 800a256:	b087      	sub	sp, #28
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6a1b      	ldr	r3, [r3, #32]
 800a262:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a1b      	ldr	r3, [r3, #32]
 800a26e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	69db      	ldr	r3, [r3, #28]
 800a27a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	4b2d      	ldr	r3, [pc, #180]	@ (800a334 <TIM_OC3_SetConfig+0xe0>)
 800a280:	4013      	ands	r3, r2
 800a282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f023 0303 	bic.w	r3, r3, #3
 800a28a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	68fa      	ldr	r2, [r7, #12]
 800a292:	4313      	orrs	r3, r2
 800a294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a29c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	021b      	lsls	r3, r3, #8
 800a2a4:	697a      	ldr	r2, [r7, #20]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4a22      	ldr	r2, [pc, #136]	@ (800a338 <TIM_OC3_SetConfig+0xe4>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d003      	beq.n	800a2ba <TIM_OC3_SetConfig+0x66>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	4a21      	ldr	r2, [pc, #132]	@ (800a33c <TIM_OC3_SetConfig+0xe8>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d10d      	bne.n	800a2d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a2c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	021b      	lsls	r3, r3, #8
 800a2c8:	697a      	ldr	r2, [r7, #20]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a2d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4a17      	ldr	r2, [pc, #92]	@ (800a338 <TIM_OC3_SetConfig+0xe4>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d003      	beq.n	800a2e6 <TIM_OC3_SetConfig+0x92>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	4a16      	ldr	r2, [pc, #88]	@ (800a33c <TIM_OC3_SetConfig+0xe8>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d113      	bne.n	800a30e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a2ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a2f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	695b      	ldr	r3, [r3, #20]
 800a2fa:	011b      	lsls	r3, r3, #4
 800a2fc:	693a      	ldr	r2, [r7, #16]
 800a2fe:	4313      	orrs	r3, r2
 800a300:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	699b      	ldr	r3, [r3, #24]
 800a306:	011b      	lsls	r3, r3, #4
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	4313      	orrs	r3, r2
 800a30c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	693a      	ldr	r2, [r7, #16]
 800a312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	68fa      	ldr	r2, [r7, #12]
 800a318:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	685a      	ldr	r2, [r3, #4]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	697a      	ldr	r2, [r7, #20]
 800a326:	621a      	str	r2, [r3, #32]
}
 800a328:	bf00      	nop
 800a32a:	371c      	adds	r7, #28
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr
 800a334:	fffeff8f 	.word	0xfffeff8f
 800a338:	40010000 	.word	0x40010000
 800a33c:	40010400 	.word	0x40010400

0800a340 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a340:	b480      	push	{r7}
 800a342:	b087      	sub	sp, #28
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	69db      	ldr	r3, [r3, #28]
 800a366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	4b1e      	ldr	r3, [pc, #120]	@ (800a3e4 <TIM_OC4_SetConfig+0xa4>)
 800a36c:	4013      	ands	r3, r2
 800a36e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	021b      	lsls	r3, r3, #8
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	4313      	orrs	r3, r2
 800a382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a38a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	031b      	lsls	r3, r3, #12
 800a392:	693a      	ldr	r2, [r7, #16]
 800a394:	4313      	orrs	r3, r2
 800a396:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a13      	ldr	r2, [pc, #76]	@ (800a3e8 <TIM_OC4_SetConfig+0xa8>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d003      	beq.n	800a3a8 <TIM_OC4_SetConfig+0x68>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a12      	ldr	r2, [pc, #72]	@ (800a3ec <TIM_OC4_SetConfig+0xac>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d109      	bne.n	800a3bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a3ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	695b      	ldr	r3, [r3, #20]
 800a3b4:	019b      	lsls	r3, r3, #6
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	697a      	ldr	r2, [r7, #20]
 800a3c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	685a      	ldr	r2, [r3, #4]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	693a      	ldr	r2, [r7, #16]
 800a3d4:	621a      	str	r2, [r3, #32]
}
 800a3d6:	bf00      	nop
 800a3d8:	371c      	adds	r7, #28
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	feff8fff 	.word	0xfeff8fff
 800a3e8:	40010000 	.word	0x40010000
 800a3ec:	40010400 	.word	0x40010400

0800a3f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b087      	sub	sp, #28
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a1b      	ldr	r3, [r3, #32]
 800a3fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	4b1b      	ldr	r3, [pc, #108]	@ (800a488 <TIM_OC5_SetConfig+0x98>)
 800a41c:	4013      	ands	r3, r2
 800a41e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	68fa      	ldr	r2, [r7, #12]
 800a426:	4313      	orrs	r3, r2
 800a428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a430:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	041b      	lsls	r3, r3, #16
 800a438:	693a      	ldr	r2, [r7, #16]
 800a43a:	4313      	orrs	r3, r2
 800a43c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a12      	ldr	r2, [pc, #72]	@ (800a48c <TIM_OC5_SetConfig+0x9c>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d003      	beq.n	800a44e <TIM_OC5_SetConfig+0x5e>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4a11      	ldr	r2, [pc, #68]	@ (800a490 <TIM_OC5_SetConfig+0xa0>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d109      	bne.n	800a462 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a454:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	695b      	ldr	r3, [r3, #20]
 800a45a:	021b      	lsls	r3, r3, #8
 800a45c:	697a      	ldr	r2, [r7, #20]
 800a45e:	4313      	orrs	r3, r2
 800a460:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	697a      	ldr	r2, [r7, #20]
 800a466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	68fa      	ldr	r2, [r7, #12]
 800a46c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	685a      	ldr	r2, [r3, #4]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	693a      	ldr	r2, [r7, #16]
 800a47a:	621a      	str	r2, [r3, #32]
}
 800a47c:	bf00      	nop
 800a47e:	371c      	adds	r7, #28
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	fffeff8f 	.word	0xfffeff8f
 800a48c:	40010000 	.word	0x40010000
 800a490:	40010400 	.word	0x40010400

0800a494 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a494:	b480      	push	{r7}
 800a496:	b087      	sub	sp, #28
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6a1b      	ldr	r3, [r3, #32]
 800a4a2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6a1b      	ldr	r3, [r3, #32]
 800a4ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	4b1c      	ldr	r3, [pc, #112]	@ (800a530 <TIM_OC6_SetConfig+0x9c>)
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	021b      	lsls	r3, r3, #8
 800a4ca:	68fa      	ldr	r2, [r7, #12]
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a4d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	051b      	lsls	r3, r3, #20
 800a4de:	693a      	ldr	r2, [r7, #16]
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	4a13      	ldr	r2, [pc, #76]	@ (800a534 <TIM_OC6_SetConfig+0xa0>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d003      	beq.n	800a4f4 <TIM_OC6_SetConfig+0x60>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	4a12      	ldr	r2, [pc, #72]	@ (800a538 <TIM_OC6_SetConfig+0xa4>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d109      	bne.n	800a508 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a4fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	695b      	ldr	r3, [r3, #20]
 800a500:	029b      	lsls	r3, r3, #10
 800a502:	697a      	ldr	r2, [r7, #20]
 800a504:	4313      	orrs	r3, r2
 800a506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	697a      	ldr	r2, [r7, #20]
 800a50c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	685a      	ldr	r2, [r3, #4]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	693a      	ldr	r2, [r7, #16]
 800a520:	621a      	str	r2, [r3, #32]
}
 800a522:	bf00      	nop
 800a524:	371c      	adds	r7, #28
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop
 800a530:	feff8fff 	.word	0xfeff8fff
 800a534:	40010000 	.word	0x40010000
 800a538:	40010400 	.word	0x40010400

0800a53c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b087      	sub	sp, #28
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6a1b      	ldr	r3, [r3, #32]
 800a54c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	f023 0201 	bic.w	r2, r3, #1
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	011b      	lsls	r3, r3, #4
 800a56c:	693a      	ldr	r2, [r7, #16]
 800a56e:	4313      	orrs	r3, r2
 800a570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	f023 030a 	bic.w	r3, r3, #10
 800a578:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a57a:	697a      	ldr	r2, [r7, #20]
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	4313      	orrs	r3, r2
 800a580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	693a      	ldr	r2, [r7, #16]
 800a586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	697a      	ldr	r2, [r7, #20]
 800a58c:	621a      	str	r2, [r3, #32]
}
 800a58e:	bf00      	nop
 800a590:	371c      	adds	r7, #28
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr

0800a59a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a59a:	b480      	push	{r7}
 800a59c:	b087      	sub	sp, #28
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	60f8      	str	r0, [r7, #12]
 800a5a2:	60b9      	str	r1, [r7, #8]
 800a5a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	f023 0210 	bic.w	r2, r3, #16
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	6a1b      	ldr	r3, [r3, #32]
 800a5bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a5c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	031b      	lsls	r3, r3, #12
 800a5ca:	697a      	ldr	r2, [r7, #20]
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a5d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	011b      	lsls	r3, r3, #4
 800a5dc:	693a      	ldr	r2, [r7, #16]
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	697a      	ldr	r2, [r7, #20]
 800a5e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	693a      	ldr	r2, [r7, #16]
 800a5ec:	621a      	str	r2, [r3, #32]
}
 800a5ee:	bf00      	nop
 800a5f0:	371c      	adds	r7, #28
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr

0800a5fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5fa:	b480      	push	{r7}
 800a5fc:	b085      	sub	sp, #20
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
 800a602:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a610:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	4313      	orrs	r3, r2
 800a618:	f043 0307 	orr.w	r3, r3, #7
 800a61c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	609a      	str	r2, [r3, #8]
}
 800a624:	bf00      	nop
 800a626:	3714      	adds	r7, #20
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a630:	b480      	push	{r7}
 800a632:	b087      	sub	sp, #28
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	607a      	str	r2, [r7, #4]
 800a63c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	689b      	ldr	r3, [r3, #8]
 800a642:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a64a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	021a      	lsls	r2, r3, #8
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	431a      	orrs	r2, r3
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	4313      	orrs	r3, r2
 800a658:	697a      	ldr	r2, [r7, #20]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	697a      	ldr	r2, [r7, #20]
 800a662:	609a      	str	r2, [r3, #8]
}
 800a664:	bf00      	nop
 800a666:	371c      	adds	r7, #28
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a670:	b480      	push	{r7}
 800a672:	b087      	sub	sp, #28
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	f003 031f 	and.w	r3, r3, #31
 800a682:	2201      	movs	r2, #1
 800a684:	fa02 f303 	lsl.w	r3, r2, r3
 800a688:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6a1a      	ldr	r2, [r3, #32]
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	43db      	mvns	r3, r3
 800a692:	401a      	ands	r2, r3
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	6a1a      	ldr	r2, [r3, #32]
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	f003 031f 	and.w	r3, r3, #31
 800a6a2:	6879      	ldr	r1, [r7, #4]
 800a6a4:	fa01 f303 	lsl.w	r3, r1, r3
 800a6a8:	431a      	orrs	r2, r3
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	621a      	str	r2, [r3, #32]
}
 800a6ae:	bf00      	nop
 800a6b0:	371c      	adds	r7, #28
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr
	...

0800a6bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d101      	bne.n	800a6d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	e06d      	b.n	800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2202      	movs	r2, #2
 800a6e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a30      	ldr	r2, [pc, #192]	@ (800a7bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d004      	beq.n	800a708 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a2f      	ldr	r2, [pc, #188]	@ (800a7c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d108      	bne.n	800a71a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a70e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	4313      	orrs	r3, r2
 800a718:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a720:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	68fa      	ldr	r2, [r7, #12]
 800a728:	4313      	orrs	r3, r2
 800a72a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a20      	ldr	r2, [pc, #128]	@ (800a7bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d022      	beq.n	800a784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a746:	d01d      	beq.n	800a784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a1d      	ldr	r2, [pc, #116]	@ (800a7c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d018      	beq.n	800a784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a1c      	ldr	r2, [pc, #112]	@ (800a7c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d013      	beq.n	800a784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a1a      	ldr	r2, [pc, #104]	@ (800a7cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d00e      	beq.n	800a784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a15      	ldr	r2, [pc, #84]	@ (800a7c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d009      	beq.n	800a784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a16      	ldr	r2, [pc, #88]	@ (800a7d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d004      	beq.n	800a784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a15      	ldr	r2, [pc, #84]	@ (800a7d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d10c      	bne.n	800a79e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a78a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	68ba      	ldr	r2, [r7, #8]
 800a792:	4313      	orrs	r3, r2
 800a794:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a7ae:	2300      	movs	r3, #0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3714      	adds	r7, #20
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr
 800a7bc:	40010000 	.word	0x40010000
 800a7c0:	40010400 	.word	0x40010400
 800a7c4:	40000400 	.word	0x40000400
 800a7c8:	40000800 	.word	0x40000800
 800a7cc:	40000c00 	.word	0x40000c00
 800a7d0:	40014000 	.word	0x40014000
 800a7d4:	40001800 	.word	0x40001800

0800a7d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d101      	bne.n	800a7f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a7f0:	2302      	movs	r3, #2
 800a7f2:	e065      	b.n	800a8c0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	4313      	orrs	r3, r2
 800a808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	4313      	orrs	r3, r2
 800a816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	4313      	orrs	r3, r2
 800a824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4313      	orrs	r3, r2
 800a832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	4313      	orrs	r3, r2
 800a840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	695b      	ldr	r3, [r3, #20]
 800a84c:	4313      	orrs	r3, r2
 800a84e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a85a:	4313      	orrs	r3, r2
 800a85c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	699b      	ldr	r3, [r3, #24]
 800a868:	041b      	lsls	r3, r3, #16
 800a86a:	4313      	orrs	r3, r2
 800a86c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a16      	ldr	r2, [pc, #88]	@ (800a8cc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d004      	beq.n	800a882 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a14      	ldr	r2, [pc, #80]	@ (800a8d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d115      	bne.n	800a8ae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a88c:	051b      	lsls	r3, r3, #20
 800a88e:	4313      	orrs	r3, r2
 800a890:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	69db      	ldr	r3, [r3, #28]
 800a89c:	4313      	orrs	r3, r2
 800a89e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	6a1b      	ldr	r3, [r3, #32]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3714      	adds	r7, #20
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr
 800a8cc:	40010000 	.word	0x40010000
 800a8d0:	40010400 	.word	0x40010400

0800a8d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a8dc:	bf00      	nop
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a8f0:	bf00      	nop
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a904:	bf00      	nop
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d101      	bne.n	800a922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
 800a920:	e040      	b.n	800a9a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a926:	2b00      	cmp	r3, #0
 800a928:	d106      	bne.n	800a938 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f7fb f874 	bl	8005a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2224      	movs	r2, #36	@ 0x24
 800a93c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f022 0201 	bic.w	r2, r2, #1
 800a94c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f900 	bl	800ab54 <UART_SetConfig>
 800a954:	4603      	mov	r3, r0
 800a956:	2b01      	cmp	r3, #1
 800a958:	d101      	bne.n	800a95e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	e022      	b.n	800a9a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a962:	2b00      	cmp	r3, #0
 800a964:	d002      	beq.n	800a96c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 fb58 	bl	800b01c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	685a      	ldr	r2, [r3, #4]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a97a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	689a      	ldr	r2, [r3, #8]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a98a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f042 0201 	orr.w	r2, r2, #1
 800a99a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fbdf 	bl	800b160 <UART_CheckIdleState>
 800a9a2:	4603      	mov	r3, r0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3708      	adds	r7, #8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b08a      	sub	sp, #40	@ 0x28
 800a9b0:	af02      	add	r7, sp, #8
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	603b      	str	r3, [r7, #0]
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a9c0:	2b20      	cmp	r3, #32
 800a9c2:	d171      	bne.n	800aaa8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d002      	beq.n	800a9d0 <HAL_UART_Transmit+0x24>
 800a9ca:	88fb      	ldrh	r3, [r7, #6]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d101      	bne.n	800a9d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e06a      	b.n	800aaaa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2221      	movs	r2, #33	@ 0x21
 800a9e0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a9e2:	f7fb f8f7 	bl	8005bd4 <HAL_GetTick>
 800a9e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	88fa      	ldrh	r2, [r7, #6]
 800a9ec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	88fa      	ldrh	r2, [r7, #6]
 800a9f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa00:	d108      	bne.n	800aa14 <HAL_UART_Transmit+0x68>
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d104      	bne.n	800aa14 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	61bb      	str	r3, [r7, #24]
 800aa12:	e003      	b.n	800aa1c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800aa1c:	e02c      	b.n	800aa78 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	2200      	movs	r2, #0
 800aa26:	2180      	movs	r1, #128	@ 0x80
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f000 fbd0 	bl	800b1ce <UART_WaitOnFlagUntilTimeout>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d001      	beq.n	800aa38 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800aa34:	2303      	movs	r3, #3
 800aa36:	e038      	b.n	800aaaa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10b      	bne.n	800aa56 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	881b      	ldrh	r3, [r3, #0]
 800aa42:	461a      	mov	r2, r3
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa4c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	3302      	adds	r3, #2
 800aa52:	61bb      	str	r3, [r7, #24]
 800aa54:	e007      	b.n	800aa66 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	781a      	ldrb	r2, [r3, #0]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800aa60:	69fb      	ldr	r3, [r7, #28]
 800aa62:	3301      	adds	r3, #1
 800aa64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	b29a      	uxth	r2, r3
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1cc      	bne.n	800aa1e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	9300      	str	r3, [sp, #0]
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	2140      	movs	r1, #64	@ 0x40
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	f000 fb9d 	bl	800b1ce <UART_WaitOnFlagUntilTimeout>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d001      	beq.n	800aa9e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	e005      	b.n	800aaaa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2220      	movs	r2, #32
 800aaa2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	e000      	b.n	800aaaa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800aaa8:	2302      	movs	r3, #2
  }
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3720      	adds	r7, #32
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}

0800aab2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b08a      	sub	sp, #40	@ 0x28
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	60f8      	str	r0, [r7, #12]
 800aaba:	60b9      	str	r1, [r7, #8]
 800aabc:	4613      	mov	r3, r2
 800aabe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aac6:	2b20      	cmp	r3, #32
 800aac8:	d132      	bne.n	800ab30 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d002      	beq.n	800aad6 <HAL_UART_Receive_IT+0x24>
 800aad0:	88fb      	ldrh	r3, [r7, #6]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d101      	bne.n	800aada <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	e02b      	b.n	800ab32 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2200      	movs	r2, #0
 800aade:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d018      	beq.n	800ab20 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	e853 3f00 	ldrex	r3, [r3]
 800aafa:	613b      	str	r3, [r7, #16]
   return(result);
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ab02:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	461a      	mov	r2, r3
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab0c:	623b      	str	r3, [r7, #32]
 800ab0e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab10:	69f9      	ldr	r1, [r7, #28]
 800ab12:	6a3a      	ldr	r2, [r7, #32]
 800ab14:	e841 2300 	strex	r3, r2, [r1]
 800ab18:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d1e6      	bne.n	800aaee <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ab20:	88fb      	ldrh	r3, [r7, #6]
 800ab22:	461a      	mov	r2, r3
 800ab24:	68b9      	ldr	r1, [r7, #8]
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f000 fc18 	bl	800b35c <UART_Start_Receive_IT>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	e000      	b.n	800ab32 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800ab30:	2302      	movs	r3, #2
  }
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3728      	adds	r7, #40	@ 0x28
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab3a:	b480      	push	{r7}
 800ab3c:	b083      	sub	sp, #12
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
 800ab42:	460b      	mov	r3, r1
 800ab44:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ab46:	bf00      	nop
 800ab48:	370c      	adds	r7, #12
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr
	...

0800ab54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b088      	sub	sp, #32
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	689a      	ldr	r2, [r3, #8]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	431a      	orrs	r2, r3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	695b      	ldr	r3, [r3, #20]
 800ab6e:	431a      	orrs	r2, r3
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	69db      	ldr	r3, [r3, #28]
 800ab74:	4313      	orrs	r3, r2
 800ab76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	4ba6      	ldr	r3, [pc, #664]	@ (800ae18 <UART_SetConfig+0x2c4>)
 800ab80:	4013      	ands	r3, r2
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	6812      	ldr	r2, [r2, #0]
 800ab86:	6979      	ldr	r1, [r7, #20]
 800ab88:	430b      	orrs	r3, r1
 800ab8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	68da      	ldr	r2, [r3, #12]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	430a      	orrs	r2, r1
 800aba0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	699b      	ldr	r3, [r3, #24]
 800aba6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6a1b      	ldr	r3, [r3, #32]
 800abac:	697a      	ldr	r2, [r7, #20]
 800abae:	4313      	orrs	r3, r2
 800abb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	697a      	ldr	r2, [r7, #20]
 800abc2:	430a      	orrs	r2, r1
 800abc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a94      	ldr	r2, [pc, #592]	@ (800ae1c <UART_SetConfig+0x2c8>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d120      	bne.n	800ac12 <UART_SetConfig+0xbe>
 800abd0:	4b93      	ldr	r3, [pc, #588]	@ (800ae20 <UART_SetConfig+0x2cc>)
 800abd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abd6:	f003 0303 	and.w	r3, r3, #3
 800abda:	2b03      	cmp	r3, #3
 800abdc:	d816      	bhi.n	800ac0c <UART_SetConfig+0xb8>
 800abde:	a201      	add	r2, pc, #4	@ (adr r2, 800abe4 <UART_SetConfig+0x90>)
 800abe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe4:	0800abf5 	.word	0x0800abf5
 800abe8:	0800ac01 	.word	0x0800ac01
 800abec:	0800abfb 	.word	0x0800abfb
 800abf0:	0800ac07 	.word	0x0800ac07
 800abf4:	2301      	movs	r3, #1
 800abf6:	77fb      	strb	r3, [r7, #31]
 800abf8:	e150      	b.n	800ae9c <UART_SetConfig+0x348>
 800abfa:	2302      	movs	r3, #2
 800abfc:	77fb      	strb	r3, [r7, #31]
 800abfe:	e14d      	b.n	800ae9c <UART_SetConfig+0x348>
 800ac00:	2304      	movs	r3, #4
 800ac02:	77fb      	strb	r3, [r7, #31]
 800ac04:	e14a      	b.n	800ae9c <UART_SetConfig+0x348>
 800ac06:	2308      	movs	r3, #8
 800ac08:	77fb      	strb	r3, [r7, #31]
 800ac0a:	e147      	b.n	800ae9c <UART_SetConfig+0x348>
 800ac0c:	2310      	movs	r3, #16
 800ac0e:	77fb      	strb	r3, [r7, #31]
 800ac10:	e144      	b.n	800ae9c <UART_SetConfig+0x348>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a83      	ldr	r2, [pc, #524]	@ (800ae24 <UART_SetConfig+0x2d0>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d132      	bne.n	800ac82 <UART_SetConfig+0x12e>
 800ac1c:	4b80      	ldr	r3, [pc, #512]	@ (800ae20 <UART_SetConfig+0x2cc>)
 800ac1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac22:	f003 030c 	and.w	r3, r3, #12
 800ac26:	2b0c      	cmp	r3, #12
 800ac28:	d828      	bhi.n	800ac7c <UART_SetConfig+0x128>
 800ac2a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac30 <UART_SetConfig+0xdc>)
 800ac2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac30:	0800ac65 	.word	0x0800ac65
 800ac34:	0800ac7d 	.word	0x0800ac7d
 800ac38:	0800ac7d 	.word	0x0800ac7d
 800ac3c:	0800ac7d 	.word	0x0800ac7d
 800ac40:	0800ac71 	.word	0x0800ac71
 800ac44:	0800ac7d 	.word	0x0800ac7d
 800ac48:	0800ac7d 	.word	0x0800ac7d
 800ac4c:	0800ac7d 	.word	0x0800ac7d
 800ac50:	0800ac6b 	.word	0x0800ac6b
 800ac54:	0800ac7d 	.word	0x0800ac7d
 800ac58:	0800ac7d 	.word	0x0800ac7d
 800ac5c:	0800ac7d 	.word	0x0800ac7d
 800ac60:	0800ac77 	.word	0x0800ac77
 800ac64:	2300      	movs	r3, #0
 800ac66:	77fb      	strb	r3, [r7, #31]
 800ac68:	e118      	b.n	800ae9c <UART_SetConfig+0x348>
 800ac6a:	2302      	movs	r3, #2
 800ac6c:	77fb      	strb	r3, [r7, #31]
 800ac6e:	e115      	b.n	800ae9c <UART_SetConfig+0x348>
 800ac70:	2304      	movs	r3, #4
 800ac72:	77fb      	strb	r3, [r7, #31]
 800ac74:	e112      	b.n	800ae9c <UART_SetConfig+0x348>
 800ac76:	2308      	movs	r3, #8
 800ac78:	77fb      	strb	r3, [r7, #31]
 800ac7a:	e10f      	b.n	800ae9c <UART_SetConfig+0x348>
 800ac7c:	2310      	movs	r3, #16
 800ac7e:	77fb      	strb	r3, [r7, #31]
 800ac80:	e10c      	b.n	800ae9c <UART_SetConfig+0x348>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a68      	ldr	r2, [pc, #416]	@ (800ae28 <UART_SetConfig+0x2d4>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d120      	bne.n	800acce <UART_SetConfig+0x17a>
 800ac8c:	4b64      	ldr	r3, [pc, #400]	@ (800ae20 <UART_SetConfig+0x2cc>)
 800ac8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac92:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ac96:	2b30      	cmp	r3, #48	@ 0x30
 800ac98:	d013      	beq.n	800acc2 <UART_SetConfig+0x16e>
 800ac9a:	2b30      	cmp	r3, #48	@ 0x30
 800ac9c:	d814      	bhi.n	800acc8 <UART_SetConfig+0x174>
 800ac9e:	2b20      	cmp	r3, #32
 800aca0:	d009      	beq.n	800acb6 <UART_SetConfig+0x162>
 800aca2:	2b20      	cmp	r3, #32
 800aca4:	d810      	bhi.n	800acc8 <UART_SetConfig+0x174>
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d002      	beq.n	800acb0 <UART_SetConfig+0x15c>
 800acaa:	2b10      	cmp	r3, #16
 800acac:	d006      	beq.n	800acbc <UART_SetConfig+0x168>
 800acae:	e00b      	b.n	800acc8 <UART_SetConfig+0x174>
 800acb0:	2300      	movs	r3, #0
 800acb2:	77fb      	strb	r3, [r7, #31]
 800acb4:	e0f2      	b.n	800ae9c <UART_SetConfig+0x348>
 800acb6:	2302      	movs	r3, #2
 800acb8:	77fb      	strb	r3, [r7, #31]
 800acba:	e0ef      	b.n	800ae9c <UART_SetConfig+0x348>
 800acbc:	2304      	movs	r3, #4
 800acbe:	77fb      	strb	r3, [r7, #31]
 800acc0:	e0ec      	b.n	800ae9c <UART_SetConfig+0x348>
 800acc2:	2308      	movs	r3, #8
 800acc4:	77fb      	strb	r3, [r7, #31]
 800acc6:	e0e9      	b.n	800ae9c <UART_SetConfig+0x348>
 800acc8:	2310      	movs	r3, #16
 800acca:	77fb      	strb	r3, [r7, #31]
 800accc:	e0e6      	b.n	800ae9c <UART_SetConfig+0x348>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a56      	ldr	r2, [pc, #344]	@ (800ae2c <UART_SetConfig+0x2d8>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d120      	bne.n	800ad1a <UART_SetConfig+0x1c6>
 800acd8:	4b51      	ldr	r3, [pc, #324]	@ (800ae20 <UART_SetConfig+0x2cc>)
 800acda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acde:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ace2:	2bc0      	cmp	r3, #192	@ 0xc0
 800ace4:	d013      	beq.n	800ad0e <UART_SetConfig+0x1ba>
 800ace6:	2bc0      	cmp	r3, #192	@ 0xc0
 800ace8:	d814      	bhi.n	800ad14 <UART_SetConfig+0x1c0>
 800acea:	2b80      	cmp	r3, #128	@ 0x80
 800acec:	d009      	beq.n	800ad02 <UART_SetConfig+0x1ae>
 800acee:	2b80      	cmp	r3, #128	@ 0x80
 800acf0:	d810      	bhi.n	800ad14 <UART_SetConfig+0x1c0>
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d002      	beq.n	800acfc <UART_SetConfig+0x1a8>
 800acf6:	2b40      	cmp	r3, #64	@ 0x40
 800acf8:	d006      	beq.n	800ad08 <UART_SetConfig+0x1b4>
 800acfa:	e00b      	b.n	800ad14 <UART_SetConfig+0x1c0>
 800acfc:	2300      	movs	r3, #0
 800acfe:	77fb      	strb	r3, [r7, #31]
 800ad00:	e0cc      	b.n	800ae9c <UART_SetConfig+0x348>
 800ad02:	2302      	movs	r3, #2
 800ad04:	77fb      	strb	r3, [r7, #31]
 800ad06:	e0c9      	b.n	800ae9c <UART_SetConfig+0x348>
 800ad08:	2304      	movs	r3, #4
 800ad0a:	77fb      	strb	r3, [r7, #31]
 800ad0c:	e0c6      	b.n	800ae9c <UART_SetConfig+0x348>
 800ad0e:	2308      	movs	r3, #8
 800ad10:	77fb      	strb	r3, [r7, #31]
 800ad12:	e0c3      	b.n	800ae9c <UART_SetConfig+0x348>
 800ad14:	2310      	movs	r3, #16
 800ad16:	77fb      	strb	r3, [r7, #31]
 800ad18:	e0c0      	b.n	800ae9c <UART_SetConfig+0x348>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a44      	ldr	r2, [pc, #272]	@ (800ae30 <UART_SetConfig+0x2dc>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d125      	bne.n	800ad70 <UART_SetConfig+0x21c>
 800ad24:	4b3e      	ldr	r3, [pc, #248]	@ (800ae20 <UART_SetConfig+0x2cc>)
 800ad26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad32:	d017      	beq.n	800ad64 <UART_SetConfig+0x210>
 800ad34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad38:	d817      	bhi.n	800ad6a <UART_SetConfig+0x216>
 800ad3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad3e:	d00b      	beq.n	800ad58 <UART_SetConfig+0x204>
 800ad40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad44:	d811      	bhi.n	800ad6a <UART_SetConfig+0x216>
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d003      	beq.n	800ad52 <UART_SetConfig+0x1fe>
 800ad4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad4e:	d006      	beq.n	800ad5e <UART_SetConfig+0x20a>
 800ad50:	e00b      	b.n	800ad6a <UART_SetConfig+0x216>
 800ad52:	2300      	movs	r3, #0
 800ad54:	77fb      	strb	r3, [r7, #31]
 800ad56:	e0a1      	b.n	800ae9c <UART_SetConfig+0x348>
 800ad58:	2302      	movs	r3, #2
 800ad5a:	77fb      	strb	r3, [r7, #31]
 800ad5c:	e09e      	b.n	800ae9c <UART_SetConfig+0x348>
 800ad5e:	2304      	movs	r3, #4
 800ad60:	77fb      	strb	r3, [r7, #31]
 800ad62:	e09b      	b.n	800ae9c <UART_SetConfig+0x348>
 800ad64:	2308      	movs	r3, #8
 800ad66:	77fb      	strb	r3, [r7, #31]
 800ad68:	e098      	b.n	800ae9c <UART_SetConfig+0x348>
 800ad6a:	2310      	movs	r3, #16
 800ad6c:	77fb      	strb	r3, [r7, #31]
 800ad6e:	e095      	b.n	800ae9c <UART_SetConfig+0x348>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a2f      	ldr	r2, [pc, #188]	@ (800ae34 <UART_SetConfig+0x2e0>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d125      	bne.n	800adc6 <UART_SetConfig+0x272>
 800ad7a:	4b29      	ldr	r3, [pc, #164]	@ (800ae20 <UART_SetConfig+0x2cc>)
 800ad7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ad84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ad88:	d017      	beq.n	800adba <UART_SetConfig+0x266>
 800ad8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ad8e:	d817      	bhi.n	800adc0 <UART_SetConfig+0x26c>
 800ad90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad94:	d00b      	beq.n	800adae <UART_SetConfig+0x25a>
 800ad96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad9a:	d811      	bhi.n	800adc0 <UART_SetConfig+0x26c>
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d003      	beq.n	800ada8 <UART_SetConfig+0x254>
 800ada0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ada4:	d006      	beq.n	800adb4 <UART_SetConfig+0x260>
 800ada6:	e00b      	b.n	800adc0 <UART_SetConfig+0x26c>
 800ada8:	2301      	movs	r3, #1
 800adaa:	77fb      	strb	r3, [r7, #31]
 800adac:	e076      	b.n	800ae9c <UART_SetConfig+0x348>
 800adae:	2302      	movs	r3, #2
 800adb0:	77fb      	strb	r3, [r7, #31]
 800adb2:	e073      	b.n	800ae9c <UART_SetConfig+0x348>
 800adb4:	2304      	movs	r3, #4
 800adb6:	77fb      	strb	r3, [r7, #31]
 800adb8:	e070      	b.n	800ae9c <UART_SetConfig+0x348>
 800adba:	2308      	movs	r3, #8
 800adbc:	77fb      	strb	r3, [r7, #31]
 800adbe:	e06d      	b.n	800ae9c <UART_SetConfig+0x348>
 800adc0:	2310      	movs	r3, #16
 800adc2:	77fb      	strb	r3, [r7, #31]
 800adc4:	e06a      	b.n	800ae9c <UART_SetConfig+0x348>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a1b      	ldr	r2, [pc, #108]	@ (800ae38 <UART_SetConfig+0x2e4>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d138      	bne.n	800ae42 <UART_SetConfig+0x2ee>
 800add0:	4b13      	ldr	r3, [pc, #76]	@ (800ae20 <UART_SetConfig+0x2cc>)
 800add2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800add6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800adda:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800adde:	d017      	beq.n	800ae10 <UART_SetConfig+0x2bc>
 800ade0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ade4:	d82a      	bhi.n	800ae3c <UART_SetConfig+0x2e8>
 800ade6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adea:	d00b      	beq.n	800ae04 <UART_SetConfig+0x2b0>
 800adec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adf0:	d824      	bhi.n	800ae3c <UART_SetConfig+0x2e8>
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d003      	beq.n	800adfe <UART_SetConfig+0x2aa>
 800adf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adfa:	d006      	beq.n	800ae0a <UART_SetConfig+0x2b6>
 800adfc:	e01e      	b.n	800ae3c <UART_SetConfig+0x2e8>
 800adfe:	2300      	movs	r3, #0
 800ae00:	77fb      	strb	r3, [r7, #31]
 800ae02:	e04b      	b.n	800ae9c <UART_SetConfig+0x348>
 800ae04:	2302      	movs	r3, #2
 800ae06:	77fb      	strb	r3, [r7, #31]
 800ae08:	e048      	b.n	800ae9c <UART_SetConfig+0x348>
 800ae0a:	2304      	movs	r3, #4
 800ae0c:	77fb      	strb	r3, [r7, #31]
 800ae0e:	e045      	b.n	800ae9c <UART_SetConfig+0x348>
 800ae10:	2308      	movs	r3, #8
 800ae12:	77fb      	strb	r3, [r7, #31]
 800ae14:	e042      	b.n	800ae9c <UART_SetConfig+0x348>
 800ae16:	bf00      	nop
 800ae18:	efff69f3 	.word	0xefff69f3
 800ae1c:	40011000 	.word	0x40011000
 800ae20:	40023800 	.word	0x40023800
 800ae24:	40004400 	.word	0x40004400
 800ae28:	40004800 	.word	0x40004800
 800ae2c:	40004c00 	.word	0x40004c00
 800ae30:	40005000 	.word	0x40005000
 800ae34:	40011400 	.word	0x40011400
 800ae38:	40007800 	.word	0x40007800
 800ae3c:	2310      	movs	r3, #16
 800ae3e:	77fb      	strb	r3, [r7, #31]
 800ae40:	e02c      	b.n	800ae9c <UART_SetConfig+0x348>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a72      	ldr	r2, [pc, #456]	@ (800b010 <UART_SetConfig+0x4bc>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d125      	bne.n	800ae98 <UART_SetConfig+0x344>
 800ae4c:	4b71      	ldr	r3, [pc, #452]	@ (800b014 <UART_SetConfig+0x4c0>)
 800ae4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae52:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ae56:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ae5a:	d017      	beq.n	800ae8c <UART_SetConfig+0x338>
 800ae5c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ae60:	d817      	bhi.n	800ae92 <UART_SetConfig+0x33e>
 800ae62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae66:	d00b      	beq.n	800ae80 <UART_SetConfig+0x32c>
 800ae68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae6c:	d811      	bhi.n	800ae92 <UART_SetConfig+0x33e>
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d003      	beq.n	800ae7a <UART_SetConfig+0x326>
 800ae72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae76:	d006      	beq.n	800ae86 <UART_SetConfig+0x332>
 800ae78:	e00b      	b.n	800ae92 <UART_SetConfig+0x33e>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	77fb      	strb	r3, [r7, #31]
 800ae7e:	e00d      	b.n	800ae9c <UART_SetConfig+0x348>
 800ae80:	2302      	movs	r3, #2
 800ae82:	77fb      	strb	r3, [r7, #31]
 800ae84:	e00a      	b.n	800ae9c <UART_SetConfig+0x348>
 800ae86:	2304      	movs	r3, #4
 800ae88:	77fb      	strb	r3, [r7, #31]
 800ae8a:	e007      	b.n	800ae9c <UART_SetConfig+0x348>
 800ae8c:	2308      	movs	r3, #8
 800ae8e:	77fb      	strb	r3, [r7, #31]
 800ae90:	e004      	b.n	800ae9c <UART_SetConfig+0x348>
 800ae92:	2310      	movs	r3, #16
 800ae94:	77fb      	strb	r3, [r7, #31]
 800ae96:	e001      	b.n	800ae9c <UART_SetConfig+0x348>
 800ae98:	2310      	movs	r3, #16
 800ae9a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	69db      	ldr	r3, [r3, #28]
 800aea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aea4:	d15b      	bne.n	800af5e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800aea6:	7ffb      	ldrb	r3, [r7, #31]
 800aea8:	2b08      	cmp	r3, #8
 800aeaa:	d828      	bhi.n	800aefe <UART_SetConfig+0x3aa>
 800aeac:	a201      	add	r2, pc, #4	@ (adr r2, 800aeb4 <UART_SetConfig+0x360>)
 800aeae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb2:	bf00      	nop
 800aeb4:	0800aed9 	.word	0x0800aed9
 800aeb8:	0800aee1 	.word	0x0800aee1
 800aebc:	0800aee9 	.word	0x0800aee9
 800aec0:	0800aeff 	.word	0x0800aeff
 800aec4:	0800aeef 	.word	0x0800aeef
 800aec8:	0800aeff 	.word	0x0800aeff
 800aecc:	0800aeff 	.word	0x0800aeff
 800aed0:	0800aeff 	.word	0x0800aeff
 800aed4:	0800aef7 	.word	0x0800aef7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aed8:	f7fc fda6 	bl	8007a28 <HAL_RCC_GetPCLK1Freq>
 800aedc:	61b8      	str	r0, [r7, #24]
        break;
 800aede:	e013      	b.n	800af08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aee0:	f7fc fdb6 	bl	8007a50 <HAL_RCC_GetPCLK2Freq>
 800aee4:	61b8      	str	r0, [r7, #24]
        break;
 800aee6:	e00f      	b.n	800af08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aee8:	4b4b      	ldr	r3, [pc, #300]	@ (800b018 <UART_SetConfig+0x4c4>)
 800aeea:	61bb      	str	r3, [r7, #24]
        break;
 800aeec:	e00c      	b.n	800af08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aeee:	f7fc fc89 	bl	8007804 <HAL_RCC_GetSysClockFreq>
 800aef2:	61b8      	str	r0, [r7, #24]
        break;
 800aef4:	e008      	b.n	800af08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aef6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aefa:	61bb      	str	r3, [r7, #24]
        break;
 800aefc:	e004      	b.n	800af08 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800aefe:	2300      	movs	r3, #0
 800af00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	77bb      	strb	r3, [r7, #30]
        break;
 800af06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d074      	beq.n	800aff8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	005a      	lsls	r2, r3, #1
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	085b      	lsrs	r3, r3, #1
 800af18:	441a      	add	r2, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	2b0f      	cmp	r3, #15
 800af28:	d916      	bls.n	800af58 <UART_SetConfig+0x404>
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af30:	d212      	bcs.n	800af58 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	b29b      	uxth	r3, r3
 800af36:	f023 030f 	bic.w	r3, r3, #15
 800af3a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	085b      	lsrs	r3, r3, #1
 800af40:	b29b      	uxth	r3, r3
 800af42:	f003 0307 	and.w	r3, r3, #7
 800af46:	b29a      	uxth	r2, r3
 800af48:	89fb      	ldrh	r3, [r7, #14]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	89fa      	ldrh	r2, [r7, #14]
 800af54:	60da      	str	r2, [r3, #12]
 800af56:	e04f      	b.n	800aff8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800af58:	2301      	movs	r3, #1
 800af5a:	77bb      	strb	r3, [r7, #30]
 800af5c:	e04c      	b.n	800aff8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800af5e:	7ffb      	ldrb	r3, [r7, #31]
 800af60:	2b08      	cmp	r3, #8
 800af62:	d828      	bhi.n	800afb6 <UART_SetConfig+0x462>
 800af64:	a201      	add	r2, pc, #4	@ (adr r2, 800af6c <UART_SetConfig+0x418>)
 800af66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af6a:	bf00      	nop
 800af6c:	0800af91 	.word	0x0800af91
 800af70:	0800af99 	.word	0x0800af99
 800af74:	0800afa1 	.word	0x0800afa1
 800af78:	0800afb7 	.word	0x0800afb7
 800af7c:	0800afa7 	.word	0x0800afa7
 800af80:	0800afb7 	.word	0x0800afb7
 800af84:	0800afb7 	.word	0x0800afb7
 800af88:	0800afb7 	.word	0x0800afb7
 800af8c:	0800afaf 	.word	0x0800afaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af90:	f7fc fd4a 	bl	8007a28 <HAL_RCC_GetPCLK1Freq>
 800af94:	61b8      	str	r0, [r7, #24]
        break;
 800af96:	e013      	b.n	800afc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af98:	f7fc fd5a 	bl	8007a50 <HAL_RCC_GetPCLK2Freq>
 800af9c:	61b8      	str	r0, [r7, #24]
        break;
 800af9e:	e00f      	b.n	800afc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800afa0:	4b1d      	ldr	r3, [pc, #116]	@ (800b018 <UART_SetConfig+0x4c4>)
 800afa2:	61bb      	str	r3, [r7, #24]
        break;
 800afa4:	e00c      	b.n	800afc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afa6:	f7fc fc2d 	bl	8007804 <HAL_RCC_GetSysClockFreq>
 800afaa:	61b8      	str	r0, [r7, #24]
        break;
 800afac:	e008      	b.n	800afc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afb2:	61bb      	str	r3, [r7, #24]
        break;
 800afb4:	e004      	b.n	800afc0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800afb6:	2300      	movs	r3, #0
 800afb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	77bb      	strb	r3, [r7, #30]
        break;
 800afbe:	bf00      	nop
    }

    if (pclk != 0U)
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d018      	beq.n	800aff8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	085a      	lsrs	r2, r3, #1
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	441a      	add	r2, r3
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800afd8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	2b0f      	cmp	r3, #15
 800afde:	d909      	bls.n	800aff4 <UART_SetConfig+0x4a0>
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afe6:	d205      	bcs.n	800aff4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	b29a      	uxth	r2, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	60da      	str	r2, [r3, #12]
 800aff2:	e001      	b.n	800aff8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800aff4:	2301      	movs	r3, #1
 800aff6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2200      	movs	r2, #0
 800affc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b004:	7fbb      	ldrb	r3, [r7, #30]
}
 800b006:	4618      	mov	r0, r3
 800b008:	3720      	adds	r7, #32
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	40007c00 	.word	0x40007c00
 800b014:	40023800 	.word	0x40023800
 800b018:	00f42400 	.word	0x00f42400

0800b01c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b028:	f003 0301 	and.w	r3, r3, #1
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d00a      	beq.n	800b046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	430a      	orrs	r2, r1
 800b044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b04a:	f003 0302 	and.w	r3, r3, #2
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d00a      	beq.n	800b068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	430a      	orrs	r2, r1
 800b066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b06c:	f003 0304 	and.w	r3, r3, #4
 800b070:	2b00      	cmp	r3, #0
 800b072:	d00a      	beq.n	800b08a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	430a      	orrs	r2, r1
 800b088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b08e:	f003 0308 	and.w	r3, r3, #8
 800b092:	2b00      	cmp	r3, #0
 800b094:	d00a      	beq.n	800b0ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	430a      	orrs	r2, r1
 800b0aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0b0:	f003 0310 	and.w	r3, r3, #16
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00a      	beq.n	800b0ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	430a      	orrs	r2, r1
 800b0cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0d2:	f003 0320 	and.w	r3, r3, #32
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d00a      	beq.n	800b0f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	430a      	orrs	r2, r1
 800b0ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d01a      	beq.n	800b132 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	430a      	orrs	r2, r1
 800b110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b116:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b11a:	d10a      	bne.n	800b132 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	430a      	orrs	r2, r1
 800b130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00a      	beq.n	800b154 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	430a      	orrs	r2, r1
 800b152:	605a      	str	r2, [r3, #4]
  }
}
 800b154:	bf00      	nop
 800b156:	370c      	adds	r7, #12
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b086      	sub	sp, #24
 800b164:	af02      	add	r7, sp, #8
 800b166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b170:	f7fa fd30 	bl	8005bd4 <HAL_GetTick>
 800b174:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f003 0308 	and.w	r3, r3, #8
 800b180:	2b08      	cmp	r3, #8
 800b182:	d10e      	bne.n	800b1a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b184:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b188:	9300      	str	r3, [sp, #0]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 f81b 	bl	800b1ce <UART_WaitOnFlagUntilTimeout>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d001      	beq.n	800b1a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b19e:	2303      	movs	r3, #3
 800b1a0:	e011      	b.n	800b1c6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2220      	movs	r2, #32
 800b1a6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2220      	movs	r2, #32
 800b1ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b1ce:	b580      	push	{r7, lr}
 800b1d0:	b09c      	sub	sp, #112	@ 0x70
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	60f8      	str	r0, [r7, #12]
 800b1d6:	60b9      	str	r1, [r7, #8]
 800b1d8:	603b      	str	r3, [r7, #0]
 800b1da:	4613      	mov	r3, r2
 800b1dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1de:	e0a7      	b.n	800b330 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e6:	f000 80a3 	beq.w	800b330 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1ea:	f7fa fcf3 	bl	8005bd4 <HAL_GetTick>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	1ad3      	subs	r3, r2, r3
 800b1f4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d302      	bcc.n	800b200 <UART_WaitOnFlagUntilTimeout+0x32>
 800b1fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d13f      	bne.n	800b280 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b206:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b208:	e853 3f00 	ldrex	r3, [r3]
 800b20c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b20e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b210:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800b214:	667b      	str	r3, [r7, #100]	@ 0x64
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	461a      	mov	r2, r3
 800b21c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b21e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b220:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b222:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b224:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b226:	e841 2300 	strex	r3, r2, [r1]
 800b22a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800b22c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1e6      	bne.n	800b200 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	3308      	adds	r3, #8
 800b238:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b23c:	e853 3f00 	ldrex	r3, [r3]
 800b240:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b244:	f023 0301 	bic.w	r3, r3, #1
 800b248:	663b      	str	r3, [r7, #96]	@ 0x60
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	3308      	adds	r3, #8
 800b250:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b252:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b254:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b256:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b258:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b25a:	e841 2300 	strex	r3, r2, [r1]
 800b25e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b260:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b262:	2b00      	cmp	r3, #0
 800b264:	d1e5      	bne.n	800b232 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2220      	movs	r2, #32
 800b26a:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2220      	movs	r2, #32
 800b270:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2200      	movs	r2, #0
 800b278:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800b27c:	2303      	movs	r3, #3
 800b27e:	e068      	b.n	800b352 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f003 0304 	and.w	r3, r3, #4
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d050      	beq.n	800b330 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	69db      	ldr	r3, [r3, #28]
 800b294:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b298:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b29c:	d148      	bne.n	800b330 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b2a6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2b0:	e853 3f00 	ldrex	r3, [r3]
 800b2b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800b2bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2c8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b2cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b2ce:	e841 2300 	strex	r3, r2, [r1]
 800b2d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1e6      	bne.n	800b2a8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	3308      	adds	r3, #8
 800b2e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	e853 3f00 	ldrex	r3, [r3]
 800b2e8:	613b      	str	r3, [r7, #16]
   return(result);
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	f023 0301 	bic.w	r3, r3, #1
 800b2f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	3308      	adds	r3, #8
 800b2f8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b2fa:	623a      	str	r2, [r7, #32]
 800b2fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2fe:	69f9      	ldr	r1, [r7, #28]
 800b300:	6a3a      	ldr	r2, [r7, #32]
 800b302:	e841 2300 	strex	r3, r2, [r1]
 800b306:	61bb      	str	r3, [r7, #24]
   return(result);
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d1e5      	bne.n	800b2da <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2220      	movs	r2, #32
 800b312:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2220      	movs	r2, #32
 800b318:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2220      	movs	r2, #32
 800b320:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2200      	movs	r2, #0
 800b328:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b32c:	2303      	movs	r3, #3
 800b32e:	e010      	b.n	800b352 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	69da      	ldr	r2, [r3, #28]
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	4013      	ands	r3, r2
 800b33a:	68ba      	ldr	r2, [r7, #8]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	bf0c      	ite	eq
 800b340:	2301      	moveq	r3, #1
 800b342:	2300      	movne	r3, #0
 800b344:	b2db      	uxtb	r3, r3
 800b346:	461a      	mov	r2, r3
 800b348:	79fb      	ldrb	r3, [r7, #7]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	f43f af48 	beq.w	800b1e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3770      	adds	r7, #112	@ 0x70
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
	...

0800b35c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b097      	sub	sp, #92	@ 0x5c
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	4613      	mov	r3, r2
 800b368:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	88fa      	ldrh	r2, [r7, #6]
 800b374:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	88fa      	ldrh	r2, [r7, #6]
 800b37c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2200      	movs	r2, #0
 800b384:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b38e:	d10e      	bne.n	800b3ae <UART_Start_Receive_IT+0x52>
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	691b      	ldr	r3, [r3, #16]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d105      	bne.n	800b3a4 <UART_Start_Receive_IT+0x48>
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b39e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b3a2:	e02d      	b.n	800b400 <UART_Start_Receive_IT+0xa4>
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	22ff      	movs	r2, #255	@ 0xff
 800b3a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b3ac:	e028      	b.n	800b400 <UART_Start_Receive_IT+0xa4>
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d10d      	bne.n	800b3d2 <UART_Start_Receive_IT+0x76>
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d104      	bne.n	800b3c8 <UART_Start_Receive_IT+0x6c>
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	22ff      	movs	r2, #255	@ 0xff
 800b3c2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b3c6:	e01b      	b.n	800b400 <UART_Start_Receive_IT+0xa4>
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	227f      	movs	r2, #127	@ 0x7f
 800b3cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b3d0:	e016      	b.n	800b400 <UART_Start_Receive_IT+0xa4>
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3da:	d10d      	bne.n	800b3f8 <UART_Start_Receive_IT+0x9c>
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	691b      	ldr	r3, [r3, #16]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d104      	bne.n	800b3ee <UART_Start_Receive_IT+0x92>
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	227f      	movs	r2, #127	@ 0x7f
 800b3e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b3ec:	e008      	b.n	800b400 <UART_Start_Receive_IT+0xa4>
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	223f      	movs	r2, #63	@ 0x3f
 800b3f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b3f6:	e003      	b.n	800b400 <UART_Start_Receive_IT+0xa4>
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2200      	movs	r2, #0
 800b404:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2222      	movs	r2, #34	@ 0x22
 800b40c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	3308      	adds	r3, #8
 800b416:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b41a:	e853 3f00 	ldrex	r3, [r3]
 800b41e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b422:	f043 0301 	orr.w	r3, r3, #1
 800b426:	657b      	str	r3, [r7, #84]	@ 0x54
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	3308      	adds	r3, #8
 800b42e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b430:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b432:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b434:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b436:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b438:	e841 2300 	strex	r3, r2, [r1]
 800b43c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b43e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1e5      	bne.n	800b410 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b44c:	d107      	bne.n	800b45e <UART_Start_Receive_IT+0x102>
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	691b      	ldr	r3, [r3, #16]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d103      	bne.n	800b45e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	4a21      	ldr	r2, [pc, #132]	@ (800b4e0 <UART_Start_Receive_IT+0x184>)
 800b45a:	669a      	str	r2, [r3, #104]	@ 0x68
 800b45c:	e002      	b.n	800b464 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	4a20      	ldr	r2, [pc, #128]	@ (800b4e4 <UART_Start_Receive_IT+0x188>)
 800b462:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	691b      	ldr	r3, [r3, #16]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d019      	beq.n	800b4a0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b474:	e853 3f00 	ldrex	r3, [r3]
 800b478:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b47c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800b480:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	461a      	mov	r2, r3
 800b488:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b48a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b48c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b48e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b490:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b492:	e841 2300 	strex	r3, r2, [r1]
 800b496:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d1e6      	bne.n	800b46c <UART_Start_Receive_IT+0x110>
 800b49e:	e018      	b.n	800b4d2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	e853 3f00 	ldrex	r3, [r3]
 800b4ac:	613b      	str	r3, [r7, #16]
   return(result);
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	f043 0320 	orr.w	r3, r3, #32
 800b4b4:	653b      	str	r3, [r7, #80]	@ 0x50
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4be:	623b      	str	r3, [r7, #32]
 800b4c0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c2:	69f9      	ldr	r1, [r7, #28]
 800b4c4:	6a3a      	ldr	r2, [r7, #32]
 800b4c6:	e841 2300 	strex	r3, r2, [r1]
 800b4ca:	61bb      	str	r3, [r7, #24]
   return(result);
 800b4cc:	69bb      	ldr	r3, [r7, #24]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d1e6      	bne.n	800b4a0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800b4d2:	2300      	movs	r3, #0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	375c      	adds	r7, #92	@ 0x5c
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr
 800b4e0:	0800b64f 	.word	0x0800b64f
 800b4e4:	0800b4e9 	.word	0x0800b4e9

0800b4e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b096      	sub	sp, #88	@ 0x58
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b4f6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b500:	2b22      	cmp	r3, #34	@ 0x22
 800b502:	f040 8098 	bne.w	800b636 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b50c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b510:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800b514:	b2d9      	uxtb	r1, r3
 800b516:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b51a:	b2da      	uxtb	r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b520:	400a      	ands	r2, r1
 800b522:	b2d2      	uxtb	r2, r2
 800b524:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b52a:	1c5a      	adds	r2, r3, #1
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b536:	b29b      	uxth	r3, r3
 800b538:	3b01      	subs	r3, #1
 800b53a:	b29a      	uxth	r2, r3
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b548:	b29b      	uxth	r3, r3
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d17b      	bne.n	800b646 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b556:	e853 3f00 	ldrex	r3, [r3]
 800b55a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b55c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b55e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b562:	653b      	str	r3, [r7, #80]	@ 0x50
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	461a      	mov	r2, r3
 800b56a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b56c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b56e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b570:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b572:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b574:	e841 2300 	strex	r3, r2, [r1]
 800b578:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b57a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d1e6      	bne.n	800b54e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	3308      	adds	r3, #8
 800b586:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b58a:	e853 3f00 	ldrex	r3, [r3]
 800b58e:	623b      	str	r3, [r7, #32]
   return(result);
 800b590:	6a3b      	ldr	r3, [r7, #32]
 800b592:	f023 0301 	bic.w	r3, r3, #1
 800b596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	3308      	adds	r3, #8
 800b59e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b5a0:	633a      	str	r2, [r7, #48]	@ 0x30
 800b5a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b5a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5a8:	e841 2300 	strex	r3, r2, [r1]
 800b5ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d1e5      	bne.n	800b580 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2220      	movs	r2, #32
 800b5b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d12e      	bne.n	800b62e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	e853 3f00 	ldrex	r3, [r3]
 800b5e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f023 0310 	bic.w	r3, r3, #16
 800b5ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5f4:	61fb      	str	r3, [r7, #28]
 800b5f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f8:	69b9      	ldr	r1, [r7, #24]
 800b5fa:	69fa      	ldr	r2, [r7, #28]
 800b5fc:	e841 2300 	strex	r3, r2, [r1]
 800b600:	617b      	str	r3, [r7, #20]
   return(result);
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d1e6      	bne.n	800b5d6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	69db      	ldr	r3, [r3, #28]
 800b60e:	f003 0310 	and.w	r3, r3, #16
 800b612:	2b10      	cmp	r3, #16
 800b614:	d103      	bne.n	800b61e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	2210      	movs	r2, #16
 800b61c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b624:	4619      	mov	r1, r3
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f7ff fa87 	bl	800ab3a <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b62c:	e00b      	b.n	800b646 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f7f7 fdd6 	bl	80031e0 <HAL_UART_RxCpltCallback>
}
 800b634:	e007      	b.n	800b646 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	699a      	ldr	r2, [r3, #24]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f042 0208 	orr.w	r2, r2, #8
 800b644:	619a      	str	r2, [r3, #24]
}
 800b646:	bf00      	nop
 800b648:	3758      	adds	r7, #88	@ 0x58
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b64e:	b580      	push	{r7, lr}
 800b650:	b096      	sub	sp, #88	@ 0x58
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b65c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b666:	2b22      	cmp	r3, #34	@ 0x22
 800b668:	f040 8098 	bne.w	800b79c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b672:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b67a:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800b67c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800b680:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b684:	4013      	ands	r3, r2
 800b686:	b29a      	uxth	r2, r3
 800b688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b68a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b690:	1c9a      	adds	r2, r3, #2
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	3b01      	subs	r3, #1
 800b6a0:	b29a      	uxth	r2, r3
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d17b      	bne.n	800b7ac <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6bc:	e853 3f00 	ldrex	r3, [r3]
 800b6c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6d2:	643b      	str	r3, [r7, #64]	@ 0x40
 800b6d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b6d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b6da:	e841 2300 	strex	r3, r2, [r1]
 800b6de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1e6      	bne.n	800b6b4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	3308      	adds	r3, #8
 800b6ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ee:	6a3b      	ldr	r3, [r7, #32]
 800b6f0:	e853 3f00 	ldrex	r3, [r3]
 800b6f4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	f023 0301 	bic.w	r3, r3, #1
 800b6fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	3308      	adds	r3, #8
 800b704:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b706:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b708:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b70a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b70c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b70e:	e841 2300 	strex	r3, r2, [r1]
 800b712:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1e5      	bne.n	800b6e6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2220      	movs	r2, #32
 800b71e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b732:	2b01      	cmp	r3, #1
 800b734:	d12e      	bne.n	800b794 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2200      	movs	r2, #0
 800b73a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	e853 3f00 	ldrex	r3, [r3]
 800b748:	60bb      	str	r3, [r7, #8]
   return(result);
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	f023 0310 	bic.w	r3, r3, #16
 800b750:	647b      	str	r3, [r7, #68]	@ 0x44
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	461a      	mov	r2, r3
 800b758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b75a:	61bb      	str	r3, [r7, #24]
 800b75c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b75e:	6979      	ldr	r1, [r7, #20]
 800b760:	69ba      	ldr	r2, [r7, #24]
 800b762:	e841 2300 	strex	r3, r2, [r1]
 800b766:	613b      	str	r3, [r7, #16]
   return(result);
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d1e6      	bne.n	800b73c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	69db      	ldr	r3, [r3, #28]
 800b774:	f003 0310 	and.w	r3, r3, #16
 800b778:	2b10      	cmp	r3, #16
 800b77a:	d103      	bne.n	800b784 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2210      	movs	r2, #16
 800b782:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b78a:	4619      	mov	r1, r3
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f7ff f9d4 	bl	800ab3a <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b792:	e00b      	b.n	800b7ac <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f7f7 fd23 	bl	80031e0 <HAL_UART_RxCpltCallback>
}
 800b79a:	e007      	b.n	800b7ac <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	699a      	ldr	r2, [r3, #24]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f042 0208 	orr.w	r2, r2, #8
 800b7aa:	619a      	str	r2, [r3, #24]
}
 800b7ac:	bf00      	nop
 800b7ae:	3758      	adds	r7, #88	@ 0x58
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <atoi>:
 800b7b4:	220a      	movs	r2, #10
 800b7b6:	2100      	movs	r1, #0
 800b7b8:	f000 b87a 	b.w	800b8b0 <strtol>

0800b7bc <_strtol_l.constprop.0>:
 800b7bc:	2b24      	cmp	r3, #36	@ 0x24
 800b7be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7c2:	4686      	mov	lr, r0
 800b7c4:	4690      	mov	r8, r2
 800b7c6:	d801      	bhi.n	800b7cc <_strtol_l.constprop.0+0x10>
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d106      	bne.n	800b7da <_strtol_l.constprop.0+0x1e>
 800b7cc:	f000 f8b6 	bl	800b93c <__errno>
 800b7d0:	2316      	movs	r3, #22
 800b7d2:	6003      	str	r3, [r0, #0]
 800b7d4:	2000      	movs	r0, #0
 800b7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7da:	4834      	ldr	r0, [pc, #208]	@ (800b8ac <_strtol_l.constprop.0+0xf0>)
 800b7dc:	460d      	mov	r5, r1
 800b7de:	462a      	mov	r2, r5
 800b7e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7e4:	5d06      	ldrb	r6, [r0, r4]
 800b7e6:	f016 0608 	ands.w	r6, r6, #8
 800b7ea:	d1f8      	bne.n	800b7de <_strtol_l.constprop.0+0x22>
 800b7ec:	2c2d      	cmp	r4, #45	@ 0x2d
 800b7ee:	d12d      	bne.n	800b84c <_strtol_l.constprop.0+0x90>
 800b7f0:	782c      	ldrb	r4, [r5, #0]
 800b7f2:	2601      	movs	r6, #1
 800b7f4:	1c95      	adds	r5, r2, #2
 800b7f6:	f033 0210 	bics.w	r2, r3, #16
 800b7fa:	d109      	bne.n	800b810 <_strtol_l.constprop.0+0x54>
 800b7fc:	2c30      	cmp	r4, #48	@ 0x30
 800b7fe:	d12a      	bne.n	800b856 <_strtol_l.constprop.0+0x9a>
 800b800:	782a      	ldrb	r2, [r5, #0]
 800b802:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b806:	2a58      	cmp	r2, #88	@ 0x58
 800b808:	d125      	bne.n	800b856 <_strtol_l.constprop.0+0x9a>
 800b80a:	786c      	ldrb	r4, [r5, #1]
 800b80c:	2310      	movs	r3, #16
 800b80e:	3502      	adds	r5, #2
 800b810:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b814:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b818:	2200      	movs	r2, #0
 800b81a:	fbbc f9f3 	udiv	r9, ip, r3
 800b81e:	4610      	mov	r0, r2
 800b820:	fb03 ca19 	mls	sl, r3, r9, ip
 800b824:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b828:	2f09      	cmp	r7, #9
 800b82a:	d81b      	bhi.n	800b864 <_strtol_l.constprop.0+0xa8>
 800b82c:	463c      	mov	r4, r7
 800b82e:	42a3      	cmp	r3, r4
 800b830:	dd27      	ble.n	800b882 <_strtol_l.constprop.0+0xc6>
 800b832:	1c57      	adds	r7, r2, #1
 800b834:	d007      	beq.n	800b846 <_strtol_l.constprop.0+0x8a>
 800b836:	4581      	cmp	r9, r0
 800b838:	d320      	bcc.n	800b87c <_strtol_l.constprop.0+0xc0>
 800b83a:	d101      	bne.n	800b840 <_strtol_l.constprop.0+0x84>
 800b83c:	45a2      	cmp	sl, r4
 800b83e:	db1d      	blt.n	800b87c <_strtol_l.constprop.0+0xc0>
 800b840:	fb00 4003 	mla	r0, r0, r3, r4
 800b844:	2201      	movs	r2, #1
 800b846:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b84a:	e7eb      	b.n	800b824 <_strtol_l.constprop.0+0x68>
 800b84c:	2c2b      	cmp	r4, #43	@ 0x2b
 800b84e:	bf04      	itt	eq
 800b850:	782c      	ldrbeq	r4, [r5, #0]
 800b852:	1c95      	addeq	r5, r2, #2
 800b854:	e7cf      	b.n	800b7f6 <_strtol_l.constprop.0+0x3a>
 800b856:	2b00      	cmp	r3, #0
 800b858:	d1da      	bne.n	800b810 <_strtol_l.constprop.0+0x54>
 800b85a:	2c30      	cmp	r4, #48	@ 0x30
 800b85c:	bf0c      	ite	eq
 800b85e:	2308      	moveq	r3, #8
 800b860:	230a      	movne	r3, #10
 800b862:	e7d5      	b.n	800b810 <_strtol_l.constprop.0+0x54>
 800b864:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b868:	2f19      	cmp	r7, #25
 800b86a:	d801      	bhi.n	800b870 <_strtol_l.constprop.0+0xb4>
 800b86c:	3c37      	subs	r4, #55	@ 0x37
 800b86e:	e7de      	b.n	800b82e <_strtol_l.constprop.0+0x72>
 800b870:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b874:	2f19      	cmp	r7, #25
 800b876:	d804      	bhi.n	800b882 <_strtol_l.constprop.0+0xc6>
 800b878:	3c57      	subs	r4, #87	@ 0x57
 800b87a:	e7d8      	b.n	800b82e <_strtol_l.constprop.0+0x72>
 800b87c:	f04f 32ff 	mov.w	r2, #4294967295
 800b880:	e7e1      	b.n	800b846 <_strtol_l.constprop.0+0x8a>
 800b882:	1c53      	adds	r3, r2, #1
 800b884:	d108      	bne.n	800b898 <_strtol_l.constprop.0+0xdc>
 800b886:	2322      	movs	r3, #34	@ 0x22
 800b888:	f8ce 3000 	str.w	r3, [lr]
 800b88c:	4660      	mov	r0, ip
 800b88e:	f1b8 0f00 	cmp.w	r8, #0
 800b892:	d0a0      	beq.n	800b7d6 <_strtol_l.constprop.0+0x1a>
 800b894:	1e69      	subs	r1, r5, #1
 800b896:	e006      	b.n	800b8a6 <_strtol_l.constprop.0+0xea>
 800b898:	b106      	cbz	r6, 800b89c <_strtol_l.constprop.0+0xe0>
 800b89a:	4240      	negs	r0, r0
 800b89c:	f1b8 0f00 	cmp.w	r8, #0
 800b8a0:	d099      	beq.n	800b7d6 <_strtol_l.constprop.0+0x1a>
 800b8a2:	2a00      	cmp	r2, #0
 800b8a4:	d1f6      	bne.n	800b894 <_strtol_l.constprop.0+0xd8>
 800b8a6:	f8c8 1000 	str.w	r1, [r8]
 800b8aa:	e794      	b.n	800b7d6 <_strtol_l.constprop.0+0x1a>
 800b8ac:	0800c6a1 	.word	0x0800c6a1

0800b8b0 <strtol>:
 800b8b0:	4613      	mov	r3, r2
 800b8b2:	460a      	mov	r2, r1
 800b8b4:	4601      	mov	r1, r0
 800b8b6:	4802      	ldr	r0, [pc, #8]	@ (800b8c0 <strtol+0x10>)
 800b8b8:	6800      	ldr	r0, [r0, #0]
 800b8ba:	f7ff bf7f 	b.w	800b7bc <_strtol_l.constprop.0>
 800b8be:	bf00      	nop
 800b8c0:	20000164 	.word	0x20000164

0800b8c4 <sniprintf>:
 800b8c4:	b40c      	push	{r2, r3}
 800b8c6:	b530      	push	{r4, r5, lr}
 800b8c8:	4b17      	ldr	r3, [pc, #92]	@ (800b928 <sniprintf+0x64>)
 800b8ca:	1e0c      	subs	r4, r1, #0
 800b8cc:	681d      	ldr	r5, [r3, #0]
 800b8ce:	b09d      	sub	sp, #116	@ 0x74
 800b8d0:	da08      	bge.n	800b8e4 <sniprintf+0x20>
 800b8d2:	238b      	movs	r3, #139	@ 0x8b
 800b8d4:	602b      	str	r3, [r5, #0]
 800b8d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b8da:	b01d      	add	sp, #116	@ 0x74
 800b8dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8e0:	b002      	add	sp, #8
 800b8e2:	4770      	bx	lr
 800b8e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b8e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b8ec:	bf14      	ite	ne
 800b8ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b8f2:	4623      	moveq	r3, r4
 800b8f4:	9304      	str	r3, [sp, #16]
 800b8f6:	9307      	str	r3, [sp, #28]
 800b8f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b8fc:	9002      	str	r0, [sp, #8]
 800b8fe:	9006      	str	r0, [sp, #24]
 800b900:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b904:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b906:	ab21      	add	r3, sp, #132	@ 0x84
 800b908:	a902      	add	r1, sp, #8
 800b90a:	4628      	mov	r0, r5
 800b90c:	9301      	str	r3, [sp, #4]
 800b90e:	f000 f995 	bl	800bc3c <_svfiprintf_r>
 800b912:	1c43      	adds	r3, r0, #1
 800b914:	bfbc      	itt	lt
 800b916:	238b      	movlt	r3, #139	@ 0x8b
 800b918:	602b      	strlt	r3, [r5, #0]
 800b91a:	2c00      	cmp	r4, #0
 800b91c:	d0dd      	beq.n	800b8da <sniprintf+0x16>
 800b91e:	9b02      	ldr	r3, [sp, #8]
 800b920:	2200      	movs	r2, #0
 800b922:	701a      	strb	r2, [r3, #0]
 800b924:	e7d9      	b.n	800b8da <sniprintf+0x16>
 800b926:	bf00      	nop
 800b928:	20000164 	.word	0x20000164

0800b92c <memset>:
 800b92c:	4402      	add	r2, r0
 800b92e:	4603      	mov	r3, r0
 800b930:	4293      	cmp	r3, r2
 800b932:	d100      	bne.n	800b936 <memset+0xa>
 800b934:	4770      	bx	lr
 800b936:	f803 1b01 	strb.w	r1, [r3], #1
 800b93a:	e7f9      	b.n	800b930 <memset+0x4>

0800b93c <__errno>:
 800b93c:	4b01      	ldr	r3, [pc, #4]	@ (800b944 <__errno+0x8>)
 800b93e:	6818      	ldr	r0, [r3, #0]
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	20000164 	.word	0x20000164

0800b948 <__libc_init_array>:
 800b948:	b570      	push	{r4, r5, r6, lr}
 800b94a:	4d0d      	ldr	r5, [pc, #52]	@ (800b980 <__libc_init_array+0x38>)
 800b94c:	4c0d      	ldr	r4, [pc, #52]	@ (800b984 <__libc_init_array+0x3c>)
 800b94e:	1b64      	subs	r4, r4, r5
 800b950:	10a4      	asrs	r4, r4, #2
 800b952:	2600      	movs	r6, #0
 800b954:	42a6      	cmp	r6, r4
 800b956:	d109      	bne.n	800b96c <__libc_init_array+0x24>
 800b958:	4d0b      	ldr	r5, [pc, #44]	@ (800b988 <__libc_init_array+0x40>)
 800b95a:	4c0c      	ldr	r4, [pc, #48]	@ (800b98c <__libc_init_array+0x44>)
 800b95c:	f000 fd2a 	bl	800c3b4 <_init>
 800b960:	1b64      	subs	r4, r4, r5
 800b962:	10a4      	asrs	r4, r4, #2
 800b964:	2600      	movs	r6, #0
 800b966:	42a6      	cmp	r6, r4
 800b968:	d105      	bne.n	800b976 <__libc_init_array+0x2e>
 800b96a:	bd70      	pop	{r4, r5, r6, pc}
 800b96c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b970:	4798      	blx	r3
 800b972:	3601      	adds	r6, #1
 800b974:	e7ee      	b.n	800b954 <__libc_init_array+0xc>
 800b976:	f855 3b04 	ldr.w	r3, [r5], #4
 800b97a:	4798      	blx	r3
 800b97c:	3601      	adds	r6, #1
 800b97e:	e7f2      	b.n	800b966 <__libc_init_array+0x1e>
 800b980:	0800c7dc 	.word	0x0800c7dc
 800b984:	0800c7dc 	.word	0x0800c7dc
 800b988:	0800c7dc 	.word	0x0800c7dc
 800b98c:	0800c7e0 	.word	0x0800c7e0

0800b990 <__retarget_lock_acquire_recursive>:
 800b990:	4770      	bx	lr

0800b992 <__retarget_lock_release_recursive>:
 800b992:	4770      	bx	lr

0800b994 <_free_r>:
 800b994:	b538      	push	{r3, r4, r5, lr}
 800b996:	4605      	mov	r5, r0
 800b998:	2900      	cmp	r1, #0
 800b99a:	d041      	beq.n	800ba20 <_free_r+0x8c>
 800b99c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9a0:	1f0c      	subs	r4, r1, #4
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	bfb8      	it	lt
 800b9a6:	18e4      	addlt	r4, r4, r3
 800b9a8:	f000 f8e0 	bl	800bb6c <__malloc_lock>
 800b9ac:	4a1d      	ldr	r2, [pc, #116]	@ (800ba24 <_free_r+0x90>)
 800b9ae:	6813      	ldr	r3, [r2, #0]
 800b9b0:	b933      	cbnz	r3, 800b9c0 <_free_r+0x2c>
 800b9b2:	6063      	str	r3, [r4, #4]
 800b9b4:	6014      	str	r4, [r2, #0]
 800b9b6:	4628      	mov	r0, r5
 800b9b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9bc:	f000 b8dc 	b.w	800bb78 <__malloc_unlock>
 800b9c0:	42a3      	cmp	r3, r4
 800b9c2:	d908      	bls.n	800b9d6 <_free_r+0x42>
 800b9c4:	6820      	ldr	r0, [r4, #0]
 800b9c6:	1821      	adds	r1, r4, r0
 800b9c8:	428b      	cmp	r3, r1
 800b9ca:	bf01      	itttt	eq
 800b9cc:	6819      	ldreq	r1, [r3, #0]
 800b9ce:	685b      	ldreq	r3, [r3, #4]
 800b9d0:	1809      	addeq	r1, r1, r0
 800b9d2:	6021      	streq	r1, [r4, #0]
 800b9d4:	e7ed      	b.n	800b9b2 <_free_r+0x1e>
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	b10b      	cbz	r3, 800b9e0 <_free_r+0x4c>
 800b9dc:	42a3      	cmp	r3, r4
 800b9de:	d9fa      	bls.n	800b9d6 <_free_r+0x42>
 800b9e0:	6811      	ldr	r1, [r2, #0]
 800b9e2:	1850      	adds	r0, r2, r1
 800b9e4:	42a0      	cmp	r0, r4
 800b9e6:	d10b      	bne.n	800ba00 <_free_r+0x6c>
 800b9e8:	6820      	ldr	r0, [r4, #0]
 800b9ea:	4401      	add	r1, r0
 800b9ec:	1850      	adds	r0, r2, r1
 800b9ee:	4283      	cmp	r3, r0
 800b9f0:	6011      	str	r1, [r2, #0]
 800b9f2:	d1e0      	bne.n	800b9b6 <_free_r+0x22>
 800b9f4:	6818      	ldr	r0, [r3, #0]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	6053      	str	r3, [r2, #4]
 800b9fa:	4408      	add	r0, r1
 800b9fc:	6010      	str	r0, [r2, #0]
 800b9fe:	e7da      	b.n	800b9b6 <_free_r+0x22>
 800ba00:	d902      	bls.n	800ba08 <_free_r+0x74>
 800ba02:	230c      	movs	r3, #12
 800ba04:	602b      	str	r3, [r5, #0]
 800ba06:	e7d6      	b.n	800b9b6 <_free_r+0x22>
 800ba08:	6820      	ldr	r0, [r4, #0]
 800ba0a:	1821      	adds	r1, r4, r0
 800ba0c:	428b      	cmp	r3, r1
 800ba0e:	bf04      	itt	eq
 800ba10:	6819      	ldreq	r1, [r3, #0]
 800ba12:	685b      	ldreq	r3, [r3, #4]
 800ba14:	6063      	str	r3, [r4, #4]
 800ba16:	bf04      	itt	eq
 800ba18:	1809      	addeq	r1, r1, r0
 800ba1a:	6021      	streq	r1, [r4, #0]
 800ba1c:	6054      	str	r4, [r2, #4]
 800ba1e:	e7ca      	b.n	800b9b6 <_free_r+0x22>
 800ba20:	bd38      	pop	{r3, r4, r5, pc}
 800ba22:	bf00      	nop
 800ba24:	200006f0 	.word	0x200006f0

0800ba28 <sbrk_aligned>:
 800ba28:	b570      	push	{r4, r5, r6, lr}
 800ba2a:	4e0f      	ldr	r6, [pc, #60]	@ (800ba68 <sbrk_aligned+0x40>)
 800ba2c:	460c      	mov	r4, r1
 800ba2e:	6831      	ldr	r1, [r6, #0]
 800ba30:	4605      	mov	r5, r0
 800ba32:	b911      	cbnz	r1, 800ba3a <sbrk_aligned+0x12>
 800ba34:	f000 fba6 	bl	800c184 <_sbrk_r>
 800ba38:	6030      	str	r0, [r6, #0]
 800ba3a:	4621      	mov	r1, r4
 800ba3c:	4628      	mov	r0, r5
 800ba3e:	f000 fba1 	bl	800c184 <_sbrk_r>
 800ba42:	1c43      	adds	r3, r0, #1
 800ba44:	d103      	bne.n	800ba4e <sbrk_aligned+0x26>
 800ba46:	f04f 34ff 	mov.w	r4, #4294967295
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	bd70      	pop	{r4, r5, r6, pc}
 800ba4e:	1cc4      	adds	r4, r0, #3
 800ba50:	f024 0403 	bic.w	r4, r4, #3
 800ba54:	42a0      	cmp	r0, r4
 800ba56:	d0f8      	beq.n	800ba4a <sbrk_aligned+0x22>
 800ba58:	1a21      	subs	r1, r4, r0
 800ba5a:	4628      	mov	r0, r5
 800ba5c:	f000 fb92 	bl	800c184 <_sbrk_r>
 800ba60:	3001      	adds	r0, #1
 800ba62:	d1f2      	bne.n	800ba4a <sbrk_aligned+0x22>
 800ba64:	e7ef      	b.n	800ba46 <sbrk_aligned+0x1e>
 800ba66:	bf00      	nop
 800ba68:	200006ec 	.word	0x200006ec

0800ba6c <_malloc_r>:
 800ba6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba70:	1ccd      	adds	r5, r1, #3
 800ba72:	f025 0503 	bic.w	r5, r5, #3
 800ba76:	3508      	adds	r5, #8
 800ba78:	2d0c      	cmp	r5, #12
 800ba7a:	bf38      	it	cc
 800ba7c:	250c      	movcc	r5, #12
 800ba7e:	2d00      	cmp	r5, #0
 800ba80:	4606      	mov	r6, r0
 800ba82:	db01      	blt.n	800ba88 <_malloc_r+0x1c>
 800ba84:	42a9      	cmp	r1, r5
 800ba86:	d904      	bls.n	800ba92 <_malloc_r+0x26>
 800ba88:	230c      	movs	r3, #12
 800ba8a:	6033      	str	r3, [r6, #0]
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bb68 <_malloc_r+0xfc>
 800ba96:	f000 f869 	bl	800bb6c <__malloc_lock>
 800ba9a:	f8d8 3000 	ldr.w	r3, [r8]
 800ba9e:	461c      	mov	r4, r3
 800baa0:	bb44      	cbnz	r4, 800baf4 <_malloc_r+0x88>
 800baa2:	4629      	mov	r1, r5
 800baa4:	4630      	mov	r0, r6
 800baa6:	f7ff ffbf 	bl	800ba28 <sbrk_aligned>
 800baaa:	1c43      	adds	r3, r0, #1
 800baac:	4604      	mov	r4, r0
 800baae:	d158      	bne.n	800bb62 <_malloc_r+0xf6>
 800bab0:	f8d8 4000 	ldr.w	r4, [r8]
 800bab4:	4627      	mov	r7, r4
 800bab6:	2f00      	cmp	r7, #0
 800bab8:	d143      	bne.n	800bb42 <_malloc_r+0xd6>
 800baba:	2c00      	cmp	r4, #0
 800babc:	d04b      	beq.n	800bb56 <_malloc_r+0xea>
 800babe:	6823      	ldr	r3, [r4, #0]
 800bac0:	4639      	mov	r1, r7
 800bac2:	4630      	mov	r0, r6
 800bac4:	eb04 0903 	add.w	r9, r4, r3
 800bac8:	f000 fb5c 	bl	800c184 <_sbrk_r>
 800bacc:	4581      	cmp	r9, r0
 800bace:	d142      	bne.n	800bb56 <_malloc_r+0xea>
 800bad0:	6821      	ldr	r1, [r4, #0]
 800bad2:	1a6d      	subs	r5, r5, r1
 800bad4:	4629      	mov	r1, r5
 800bad6:	4630      	mov	r0, r6
 800bad8:	f7ff ffa6 	bl	800ba28 <sbrk_aligned>
 800badc:	3001      	adds	r0, #1
 800bade:	d03a      	beq.n	800bb56 <_malloc_r+0xea>
 800bae0:	6823      	ldr	r3, [r4, #0]
 800bae2:	442b      	add	r3, r5
 800bae4:	6023      	str	r3, [r4, #0]
 800bae6:	f8d8 3000 	ldr.w	r3, [r8]
 800baea:	685a      	ldr	r2, [r3, #4]
 800baec:	bb62      	cbnz	r2, 800bb48 <_malloc_r+0xdc>
 800baee:	f8c8 7000 	str.w	r7, [r8]
 800baf2:	e00f      	b.n	800bb14 <_malloc_r+0xa8>
 800baf4:	6822      	ldr	r2, [r4, #0]
 800baf6:	1b52      	subs	r2, r2, r5
 800baf8:	d420      	bmi.n	800bb3c <_malloc_r+0xd0>
 800bafa:	2a0b      	cmp	r2, #11
 800bafc:	d917      	bls.n	800bb2e <_malloc_r+0xc2>
 800bafe:	1961      	adds	r1, r4, r5
 800bb00:	42a3      	cmp	r3, r4
 800bb02:	6025      	str	r5, [r4, #0]
 800bb04:	bf18      	it	ne
 800bb06:	6059      	strne	r1, [r3, #4]
 800bb08:	6863      	ldr	r3, [r4, #4]
 800bb0a:	bf08      	it	eq
 800bb0c:	f8c8 1000 	streq.w	r1, [r8]
 800bb10:	5162      	str	r2, [r4, r5]
 800bb12:	604b      	str	r3, [r1, #4]
 800bb14:	4630      	mov	r0, r6
 800bb16:	f000 f82f 	bl	800bb78 <__malloc_unlock>
 800bb1a:	f104 000b 	add.w	r0, r4, #11
 800bb1e:	1d23      	adds	r3, r4, #4
 800bb20:	f020 0007 	bic.w	r0, r0, #7
 800bb24:	1ac2      	subs	r2, r0, r3
 800bb26:	bf1c      	itt	ne
 800bb28:	1a1b      	subne	r3, r3, r0
 800bb2a:	50a3      	strne	r3, [r4, r2]
 800bb2c:	e7af      	b.n	800ba8e <_malloc_r+0x22>
 800bb2e:	6862      	ldr	r2, [r4, #4]
 800bb30:	42a3      	cmp	r3, r4
 800bb32:	bf0c      	ite	eq
 800bb34:	f8c8 2000 	streq.w	r2, [r8]
 800bb38:	605a      	strne	r2, [r3, #4]
 800bb3a:	e7eb      	b.n	800bb14 <_malloc_r+0xa8>
 800bb3c:	4623      	mov	r3, r4
 800bb3e:	6864      	ldr	r4, [r4, #4]
 800bb40:	e7ae      	b.n	800baa0 <_malloc_r+0x34>
 800bb42:	463c      	mov	r4, r7
 800bb44:	687f      	ldr	r7, [r7, #4]
 800bb46:	e7b6      	b.n	800bab6 <_malloc_r+0x4a>
 800bb48:	461a      	mov	r2, r3
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	42a3      	cmp	r3, r4
 800bb4e:	d1fb      	bne.n	800bb48 <_malloc_r+0xdc>
 800bb50:	2300      	movs	r3, #0
 800bb52:	6053      	str	r3, [r2, #4]
 800bb54:	e7de      	b.n	800bb14 <_malloc_r+0xa8>
 800bb56:	230c      	movs	r3, #12
 800bb58:	6033      	str	r3, [r6, #0]
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	f000 f80c 	bl	800bb78 <__malloc_unlock>
 800bb60:	e794      	b.n	800ba8c <_malloc_r+0x20>
 800bb62:	6005      	str	r5, [r0, #0]
 800bb64:	e7d6      	b.n	800bb14 <_malloc_r+0xa8>
 800bb66:	bf00      	nop
 800bb68:	200006f0 	.word	0x200006f0

0800bb6c <__malloc_lock>:
 800bb6c:	4801      	ldr	r0, [pc, #4]	@ (800bb74 <__malloc_lock+0x8>)
 800bb6e:	f7ff bf0f 	b.w	800b990 <__retarget_lock_acquire_recursive>
 800bb72:	bf00      	nop
 800bb74:	200006e8 	.word	0x200006e8

0800bb78 <__malloc_unlock>:
 800bb78:	4801      	ldr	r0, [pc, #4]	@ (800bb80 <__malloc_unlock+0x8>)
 800bb7a:	f7ff bf0a 	b.w	800b992 <__retarget_lock_release_recursive>
 800bb7e:	bf00      	nop
 800bb80:	200006e8 	.word	0x200006e8

0800bb84 <__ssputs_r>:
 800bb84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb88:	688e      	ldr	r6, [r1, #8]
 800bb8a:	461f      	mov	r7, r3
 800bb8c:	42be      	cmp	r6, r7
 800bb8e:	680b      	ldr	r3, [r1, #0]
 800bb90:	4682      	mov	sl, r0
 800bb92:	460c      	mov	r4, r1
 800bb94:	4690      	mov	r8, r2
 800bb96:	d82d      	bhi.n	800bbf4 <__ssputs_r+0x70>
 800bb98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bba0:	d026      	beq.n	800bbf0 <__ssputs_r+0x6c>
 800bba2:	6965      	ldr	r5, [r4, #20]
 800bba4:	6909      	ldr	r1, [r1, #16]
 800bba6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbaa:	eba3 0901 	sub.w	r9, r3, r1
 800bbae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbb2:	1c7b      	adds	r3, r7, #1
 800bbb4:	444b      	add	r3, r9
 800bbb6:	106d      	asrs	r5, r5, #1
 800bbb8:	429d      	cmp	r5, r3
 800bbba:	bf38      	it	cc
 800bbbc:	461d      	movcc	r5, r3
 800bbbe:	0553      	lsls	r3, r2, #21
 800bbc0:	d527      	bpl.n	800bc12 <__ssputs_r+0x8e>
 800bbc2:	4629      	mov	r1, r5
 800bbc4:	f7ff ff52 	bl	800ba6c <_malloc_r>
 800bbc8:	4606      	mov	r6, r0
 800bbca:	b360      	cbz	r0, 800bc26 <__ssputs_r+0xa2>
 800bbcc:	6921      	ldr	r1, [r4, #16]
 800bbce:	464a      	mov	r2, r9
 800bbd0:	f000 fae8 	bl	800c1a4 <memcpy>
 800bbd4:	89a3      	ldrh	r3, [r4, #12]
 800bbd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bbda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbde:	81a3      	strh	r3, [r4, #12]
 800bbe0:	6126      	str	r6, [r4, #16]
 800bbe2:	6165      	str	r5, [r4, #20]
 800bbe4:	444e      	add	r6, r9
 800bbe6:	eba5 0509 	sub.w	r5, r5, r9
 800bbea:	6026      	str	r6, [r4, #0]
 800bbec:	60a5      	str	r5, [r4, #8]
 800bbee:	463e      	mov	r6, r7
 800bbf0:	42be      	cmp	r6, r7
 800bbf2:	d900      	bls.n	800bbf6 <__ssputs_r+0x72>
 800bbf4:	463e      	mov	r6, r7
 800bbf6:	6820      	ldr	r0, [r4, #0]
 800bbf8:	4632      	mov	r2, r6
 800bbfa:	4641      	mov	r1, r8
 800bbfc:	f000 faa8 	bl	800c150 <memmove>
 800bc00:	68a3      	ldr	r3, [r4, #8]
 800bc02:	1b9b      	subs	r3, r3, r6
 800bc04:	60a3      	str	r3, [r4, #8]
 800bc06:	6823      	ldr	r3, [r4, #0]
 800bc08:	4433      	add	r3, r6
 800bc0a:	6023      	str	r3, [r4, #0]
 800bc0c:	2000      	movs	r0, #0
 800bc0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc12:	462a      	mov	r2, r5
 800bc14:	f000 fad4 	bl	800c1c0 <_realloc_r>
 800bc18:	4606      	mov	r6, r0
 800bc1a:	2800      	cmp	r0, #0
 800bc1c:	d1e0      	bne.n	800bbe0 <__ssputs_r+0x5c>
 800bc1e:	6921      	ldr	r1, [r4, #16]
 800bc20:	4650      	mov	r0, sl
 800bc22:	f7ff feb7 	bl	800b994 <_free_r>
 800bc26:	230c      	movs	r3, #12
 800bc28:	f8ca 3000 	str.w	r3, [sl]
 800bc2c:	89a3      	ldrh	r3, [r4, #12]
 800bc2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc32:	81a3      	strh	r3, [r4, #12]
 800bc34:	f04f 30ff 	mov.w	r0, #4294967295
 800bc38:	e7e9      	b.n	800bc0e <__ssputs_r+0x8a>
	...

0800bc3c <_svfiprintf_r>:
 800bc3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc40:	4698      	mov	r8, r3
 800bc42:	898b      	ldrh	r3, [r1, #12]
 800bc44:	061b      	lsls	r3, r3, #24
 800bc46:	b09d      	sub	sp, #116	@ 0x74
 800bc48:	4607      	mov	r7, r0
 800bc4a:	460d      	mov	r5, r1
 800bc4c:	4614      	mov	r4, r2
 800bc4e:	d510      	bpl.n	800bc72 <_svfiprintf_r+0x36>
 800bc50:	690b      	ldr	r3, [r1, #16]
 800bc52:	b973      	cbnz	r3, 800bc72 <_svfiprintf_r+0x36>
 800bc54:	2140      	movs	r1, #64	@ 0x40
 800bc56:	f7ff ff09 	bl	800ba6c <_malloc_r>
 800bc5a:	6028      	str	r0, [r5, #0]
 800bc5c:	6128      	str	r0, [r5, #16]
 800bc5e:	b930      	cbnz	r0, 800bc6e <_svfiprintf_r+0x32>
 800bc60:	230c      	movs	r3, #12
 800bc62:	603b      	str	r3, [r7, #0]
 800bc64:	f04f 30ff 	mov.w	r0, #4294967295
 800bc68:	b01d      	add	sp, #116	@ 0x74
 800bc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc6e:	2340      	movs	r3, #64	@ 0x40
 800bc70:	616b      	str	r3, [r5, #20]
 800bc72:	2300      	movs	r3, #0
 800bc74:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc76:	2320      	movs	r3, #32
 800bc78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc80:	2330      	movs	r3, #48	@ 0x30
 800bc82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800be20 <_svfiprintf_r+0x1e4>
 800bc86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc8a:	f04f 0901 	mov.w	r9, #1
 800bc8e:	4623      	mov	r3, r4
 800bc90:	469a      	mov	sl, r3
 800bc92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc96:	b10a      	cbz	r2, 800bc9c <_svfiprintf_r+0x60>
 800bc98:	2a25      	cmp	r2, #37	@ 0x25
 800bc9a:	d1f9      	bne.n	800bc90 <_svfiprintf_r+0x54>
 800bc9c:	ebba 0b04 	subs.w	fp, sl, r4
 800bca0:	d00b      	beq.n	800bcba <_svfiprintf_r+0x7e>
 800bca2:	465b      	mov	r3, fp
 800bca4:	4622      	mov	r2, r4
 800bca6:	4629      	mov	r1, r5
 800bca8:	4638      	mov	r0, r7
 800bcaa:	f7ff ff6b 	bl	800bb84 <__ssputs_r>
 800bcae:	3001      	adds	r0, #1
 800bcb0:	f000 80a7 	beq.w	800be02 <_svfiprintf_r+0x1c6>
 800bcb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcb6:	445a      	add	r2, fp
 800bcb8:	9209      	str	r2, [sp, #36]	@ 0x24
 800bcba:	f89a 3000 	ldrb.w	r3, [sl]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	f000 809f 	beq.w	800be02 <_svfiprintf_r+0x1c6>
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcce:	f10a 0a01 	add.w	sl, sl, #1
 800bcd2:	9304      	str	r3, [sp, #16]
 800bcd4:	9307      	str	r3, [sp, #28]
 800bcd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bcda:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcdc:	4654      	mov	r4, sl
 800bcde:	2205      	movs	r2, #5
 800bce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bce4:	484e      	ldr	r0, [pc, #312]	@ (800be20 <_svfiprintf_r+0x1e4>)
 800bce6:	f7f4 faab 	bl	8000240 <memchr>
 800bcea:	9a04      	ldr	r2, [sp, #16]
 800bcec:	b9d8      	cbnz	r0, 800bd26 <_svfiprintf_r+0xea>
 800bcee:	06d0      	lsls	r0, r2, #27
 800bcf0:	bf44      	itt	mi
 800bcf2:	2320      	movmi	r3, #32
 800bcf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcf8:	0711      	lsls	r1, r2, #28
 800bcfa:	bf44      	itt	mi
 800bcfc:	232b      	movmi	r3, #43	@ 0x2b
 800bcfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd02:	f89a 3000 	ldrb.w	r3, [sl]
 800bd06:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd08:	d015      	beq.n	800bd36 <_svfiprintf_r+0xfa>
 800bd0a:	9a07      	ldr	r2, [sp, #28]
 800bd0c:	4654      	mov	r4, sl
 800bd0e:	2000      	movs	r0, #0
 800bd10:	f04f 0c0a 	mov.w	ip, #10
 800bd14:	4621      	mov	r1, r4
 800bd16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd1a:	3b30      	subs	r3, #48	@ 0x30
 800bd1c:	2b09      	cmp	r3, #9
 800bd1e:	d94b      	bls.n	800bdb8 <_svfiprintf_r+0x17c>
 800bd20:	b1b0      	cbz	r0, 800bd50 <_svfiprintf_r+0x114>
 800bd22:	9207      	str	r2, [sp, #28]
 800bd24:	e014      	b.n	800bd50 <_svfiprintf_r+0x114>
 800bd26:	eba0 0308 	sub.w	r3, r0, r8
 800bd2a:	fa09 f303 	lsl.w	r3, r9, r3
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	9304      	str	r3, [sp, #16]
 800bd32:	46a2      	mov	sl, r4
 800bd34:	e7d2      	b.n	800bcdc <_svfiprintf_r+0xa0>
 800bd36:	9b03      	ldr	r3, [sp, #12]
 800bd38:	1d19      	adds	r1, r3, #4
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	9103      	str	r1, [sp, #12]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	bfbb      	ittet	lt
 800bd42:	425b      	neglt	r3, r3
 800bd44:	f042 0202 	orrlt.w	r2, r2, #2
 800bd48:	9307      	strge	r3, [sp, #28]
 800bd4a:	9307      	strlt	r3, [sp, #28]
 800bd4c:	bfb8      	it	lt
 800bd4e:	9204      	strlt	r2, [sp, #16]
 800bd50:	7823      	ldrb	r3, [r4, #0]
 800bd52:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd54:	d10a      	bne.n	800bd6c <_svfiprintf_r+0x130>
 800bd56:	7863      	ldrb	r3, [r4, #1]
 800bd58:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd5a:	d132      	bne.n	800bdc2 <_svfiprintf_r+0x186>
 800bd5c:	9b03      	ldr	r3, [sp, #12]
 800bd5e:	1d1a      	adds	r2, r3, #4
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	9203      	str	r2, [sp, #12]
 800bd64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd68:	3402      	adds	r4, #2
 800bd6a:	9305      	str	r3, [sp, #20]
 800bd6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800be30 <_svfiprintf_r+0x1f4>
 800bd70:	7821      	ldrb	r1, [r4, #0]
 800bd72:	2203      	movs	r2, #3
 800bd74:	4650      	mov	r0, sl
 800bd76:	f7f4 fa63 	bl	8000240 <memchr>
 800bd7a:	b138      	cbz	r0, 800bd8c <_svfiprintf_r+0x150>
 800bd7c:	9b04      	ldr	r3, [sp, #16]
 800bd7e:	eba0 000a 	sub.w	r0, r0, sl
 800bd82:	2240      	movs	r2, #64	@ 0x40
 800bd84:	4082      	lsls	r2, r0
 800bd86:	4313      	orrs	r3, r2
 800bd88:	3401      	adds	r4, #1
 800bd8a:	9304      	str	r3, [sp, #16]
 800bd8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd90:	4824      	ldr	r0, [pc, #144]	@ (800be24 <_svfiprintf_r+0x1e8>)
 800bd92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd96:	2206      	movs	r2, #6
 800bd98:	f7f4 fa52 	bl	8000240 <memchr>
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	d036      	beq.n	800be0e <_svfiprintf_r+0x1d2>
 800bda0:	4b21      	ldr	r3, [pc, #132]	@ (800be28 <_svfiprintf_r+0x1ec>)
 800bda2:	bb1b      	cbnz	r3, 800bdec <_svfiprintf_r+0x1b0>
 800bda4:	9b03      	ldr	r3, [sp, #12]
 800bda6:	3307      	adds	r3, #7
 800bda8:	f023 0307 	bic.w	r3, r3, #7
 800bdac:	3308      	adds	r3, #8
 800bdae:	9303      	str	r3, [sp, #12]
 800bdb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdb2:	4433      	add	r3, r6
 800bdb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdb6:	e76a      	b.n	800bc8e <_svfiprintf_r+0x52>
 800bdb8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdbc:	460c      	mov	r4, r1
 800bdbe:	2001      	movs	r0, #1
 800bdc0:	e7a8      	b.n	800bd14 <_svfiprintf_r+0xd8>
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	3401      	adds	r4, #1
 800bdc6:	9305      	str	r3, [sp, #20]
 800bdc8:	4619      	mov	r1, r3
 800bdca:	f04f 0c0a 	mov.w	ip, #10
 800bdce:	4620      	mov	r0, r4
 800bdd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdd4:	3a30      	subs	r2, #48	@ 0x30
 800bdd6:	2a09      	cmp	r2, #9
 800bdd8:	d903      	bls.n	800bde2 <_svfiprintf_r+0x1a6>
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d0c6      	beq.n	800bd6c <_svfiprintf_r+0x130>
 800bdde:	9105      	str	r1, [sp, #20]
 800bde0:	e7c4      	b.n	800bd6c <_svfiprintf_r+0x130>
 800bde2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bde6:	4604      	mov	r4, r0
 800bde8:	2301      	movs	r3, #1
 800bdea:	e7f0      	b.n	800bdce <_svfiprintf_r+0x192>
 800bdec:	ab03      	add	r3, sp, #12
 800bdee:	9300      	str	r3, [sp, #0]
 800bdf0:	462a      	mov	r2, r5
 800bdf2:	4b0e      	ldr	r3, [pc, #56]	@ (800be2c <_svfiprintf_r+0x1f0>)
 800bdf4:	a904      	add	r1, sp, #16
 800bdf6:	4638      	mov	r0, r7
 800bdf8:	f3af 8000 	nop.w
 800bdfc:	1c42      	adds	r2, r0, #1
 800bdfe:	4606      	mov	r6, r0
 800be00:	d1d6      	bne.n	800bdb0 <_svfiprintf_r+0x174>
 800be02:	89ab      	ldrh	r3, [r5, #12]
 800be04:	065b      	lsls	r3, r3, #25
 800be06:	f53f af2d 	bmi.w	800bc64 <_svfiprintf_r+0x28>
 800be0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be0c:	e72c      	b.n	800bc68 <_svfiprintf_r+0x2c>
 800be0e:	ab03      	add	r3, sp, #12
 800be10:	9300      	str	r3, [sp, #0]
 800be12:	462a      	mov	r2, r5
 800be14:	4b05      	ldr	r3, [pc, #20]	@ (800be2c <_svfiprintf_r+0x1f0>)
 800be16:	a904      	add	r1, sp, #16
 800be18:	4638      	mov	r0, r7
 800be1a:	f000 f879 	bl	800bf10 <_printf_i>
 800be1e:	e7ed      	b.n	800bdfc <_svfiprintf_r+0x1c0>
 800be20:	0800c7a1 	.word	0x0800c7a1
 800be24:	0800c7ab 	.word	0x0800c7ab
 800be28:	00000000 	.word	0x00000000
 800be2c:	0800bb85 	.word	0x0800bb85
 800be30:	0800c7a7 	.word	0x0800c7a7

0800be34 <_printf_common>:
 800be34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be38:	4616      	mov	r6, r2
 800be3a:	4698      	mov	r8, r3
 800be3c:	688a      	ldr	r2, [r1, #8]
 800be3e:	690b      	ldr	r3, [r1, #16]
 800be40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be44:	4293      	cmp	r3, r2
 800be46:	bfb8      	it	lt
 800be48:	4613      	movlt	r3, r2
 800be4a:	6033      	str	r3, [r6, #0]
 800be4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be50:	4607      	mov	r7, r0
 800be52:	460c      	mov	r4, r1
 800be54:	b10a      	cbz	r2, 800be5a <_printf_common+0x26>
 800be56:	3301      	adds	r3, #1
 800be58:	6033      	str	r3, [r6, #0]
 800be5a:	6823      	ldr	r3, [r4, #0]
 800be5c:	0699      	lsls	r1, r3, #26
 800be5e:	bf42      	ittt	mi
 800be60:	6833      	ldrmi	r3, [r6, #0]
 800be62:	3302      	addmi	r3, #2
 800be64:	6033      	strmi	r3, [r6, #0]
 800be66:	6825      	ldr	r5, [r4, #0]
 800be68:	f015 0506 	ands.w	r5, r5, #6
 800be6c:	d106      	bne.n	800be7c <_printf_common+0x48>
 800be6e:	f104 0a19 	add.w	sl, r4, #25
 800be72:	68e3      	ldr	r3, [r4, #12]
 800be74:	6832      	ldr	r2, [r6, #0]
 800be76:	1a9b      	subs	r3, r3, r2
 800be78:	42ab      	cmp	r3, r5
 800be7a:	dc26      	bgt.n	800beca <_printf_common+0x96>
 800be7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800be80:	6822      	ldr	r2, [r4, #0]
 800be82:	3b00      	subs	r3, #0
 800be84:	bf18      	it	ne
 800be86:	2301      	movne	r3, #1
 800be88:	0692      	lsls	r2, r2, #26
 800be8a:	d42b      	bmi.n	800bee4 <_printf_common+0xb0>
 800be8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800be90:	4641      	mov	r1, r8
 800be92:	4638      	mov	r0, r7
 800be94:	47c8      	blx	r9
 800be96:	3001      	adds	r0, #1
 800be98:	d01e      	beq.n	800bed8 <_printf_common+0xa4>
 800be9a:	6823      	ldr	r3, [r4, #0]
 800be9c:	6922      	ldr	r2, [r4, #16]
 800be9e:	f003 0306 	and.w	r3, r3, #6
 800bea2:	2b04      	cmp	r3, #4
 800bea4:	bf02      	ittt	eq
 800bea6:	68e5      	ldreq	r5, [r4, #12]
 800bea8:	6833      	ldreq	r3, [r6, #0]
 800beaa:	1aed      	subeq	r5, r5, r3
 800beac:	68a3      	ldr	r3, [r4, #8]
 800beae:	bf0c      	ite	eq
 800beb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800beb4:	2500      	movne	r5, #0
 800beb6:	4293      	cmp	r3, r2
 800beb8:	bfc4      	itt	gt
 800beba:	1a9b      	subgt	r3, r3, r2
 800bebc:	18ed      	addgt	r5, r5, r3
 800bebe:	2600      	movs	r6, #0
 800bec0:	341a      	adds	r4, #26
 800bec2:	42b5      	cmp	r5, r6
 800bec4:	d11a      	bne.n	800befc <_printf_common+0xc8>
 800bec6:	2000      	movs	r0, #0
 800bec8:	e008      	b.n	800bedc <_printf_common+0xa8>
 800beca:	2301      	movs	r3, #1
 800becc:	4652      	mov	r2, sl
 800bece:	4641      	mov	r1, r8
 800bed0:	4638      	mov	r0, r7
 800bed2:	47c8      	blx	r9
 800bed4:	3001      	adds	r0, #1
 800bed6:	d103      	bne.n	800bee0 <_printf_common+0xac>
 800bed8:	f04f 30ff 	mov.w	r0, #4294967295
 800bedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bee0:	3501      	adds	r5, #1
 800bee2:	e7c6      	b.n	800be72 <_printf_common+0x3e>
 800bee4:	18e1      	adds	r1, r4, r3
 800bee6:	1c5a      	adds	r2, r3, #1
 800bee8:	2030      	movs	r0, #48	@ 0x30
 800beea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800beee:	4422      	add	r2, r4
 800bef0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bef4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bef8:	3302      	adds	r3, #2
 800befa:	e7c7      	b.n	800be8c <_printf_common+0x58>
 800befc:	2301      	movs	r3, #1
 800befe:	4622      	mov	r2, r4
 800bf00:	4641      	mov	r1, r8
 800bf02:	4638      	mov	r0, r7
 800bf04:	47c8      	blx	r9
 800bf06:	3001      	adds	r0, #1
 800bf08:	d0e6      	beq.n	800bed8 <_printf_common+0xa4>
 800bf0a:	3601      	adds	r6, #1
 800bf0c:	e7d9      	b.n	800bec2 <_printf_common+0x8e>
	...

0800bf10 <_printf_i>:
 800bf10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf14:	7e0f      	ldrb	r7, [r1, #24]
 800bf16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf18:	2f78      	cmp	r7, #120	@ 0x78
 800bf1a:	4691      	mov	r9, r2
 800bf1c:	4680      	mov	r8, r0
 800bf1e:	460c      	mov	r4, r1
 800bf20:	469a      	mov	sl, r3
 800bf22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf26:	d807      	bhi.n	800bf38 <_printf_i+0x28>
 800bf28:	2f62      	cmp	r7, #98	@ 0x62
 800bf2a:	d80a      	bhi.n	800bf42 <_printf_i+0x32>
 800bf2c:	2f00      	cmp	r7, #0
 800bf2e:	f000 80d2 	beq.w	800c0d6 <_printf_i+0x1c6>
 800bf32:	2f58      	cmp	r7, #88	@ 0x58
 800bf34:	f000 80b9 	beq.w	800c0aa <_printf_i+0x19a>
 800bf38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bf40:	e03a      	b.n	800bfb8 <_printf_i+0xa8>
 800bf42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bf46:	2b15      	cmp	r3, #21
 800bf48:	d8f6      	bhi.n	800bf38 <_printf_i+0x28>
 800bf4a:	a101      	add	r1, pc, #4	@ (adr r1, 800bf50 <_printf_i+0x40>)
 800bf4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf50:	0800bfa9 	.word	0x0800bfa9
 800bf54:	0800bfbd 	.word	0x0800bfbd
 800bf58:	0800bf39 	.word	0x0800bf39
 800bf5c:	0800bf39 	.word	0x0800bf39
 800bf60:	0800bf39 	.word	0x0800bf39
 800bf64:	0800bf39 	.word	0x0800bf39
 800bf68:	0800bfbd 	.word	0x0800bfbd
 800bf6c:	0800bf39 	.word	0x0800bf39
 800bf70:	0800bf39 	.word	0x0800bf39
 800bf74:	0800bf39 	.word	0x0800bf39
 800bf78:	0800bf39 	.word	0x0800bf39
 800bf7c:	0800c0bd 	.word	0x0800c0bd
 800bf80:	0800bfe7 	.word	0x0800bfe7
 800bf84:	0800c077 	.word	0x0800c077
 800bf88:	0800bf39 	.word	0x0800bf39
 800bf8c:	0800bf39 	.word	0x0800bf39
 800bf90:	0800c0df 	.word	0x0800c0df
 800bf94:	0800bf39 	.word	0x0800bf39
 800bf98:	0800bfe7 	.word	0x0800bfe7
 800bf9c:	0800bf39 	.word	0x0800bf39
 800bfa0:	0800bf39 	.word	0x0800bf39
 800bfa4:	0800c07f 	.word	0x0800c07f
 800bfa8:	6833      	ldr	r3, [r6, #0]
 800bfaa:	1d1a      	adds	r2, r3, #4
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	6032      	str	r2, [r6, #0]
 800bfb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bfb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bfb8:	2301      	movs	r3, #1
 800bfba:	e09d      	b.n	800c0f8 <_printf_i+0x1e8>
 800bfbc:	6833      	ldr	r3, [r6, #0]
 800bfbe:	6820      	ldr	r0, [r4, #0]
 800bfc0:	1d19      	adds	r1, r3, #4
 800bfc2:	6031      	str	r1, [r6, #0]
 800bfc4:	0606      	lsls	r6, r0, #24
 800bfc6:	d501      	bpl.n	800bfcc <_printf_i+0xbc>
 800bfc8:	681d      	ldr	r5, [r3, #0]
 800bfca:	e003      	b.n	800bfd4 <_printf_i+0xc4>
 800bfcc:	0645      	lsls	r5, r0, #25
 800bfce:	d5fb      	bpl.n	800bfc8 <_printf_i+0xb8>
 800bfd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bfd4:	2d00      	cmp	r5, #0
 800bfd6:	da03      	bge.n	800bfe0 <_printf_i+0xd0>
 800bfd8:	232d      	movs	r3, #45	@ 0x2d
 800bfda:	426d      	negs	r5, r5
 800bfdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfe0:	4859      	ldr	r0, [pc, #356]	@ (800c148 <_printf_i+0x238>)
 800bfe2:	230a      	movs	r3, #10
 800bfe4:	e011      	b.n	800c00a <_printf_i+0xfa>
 800bfe6:	6821      	ldr	r1, [r4, #0]
 800bfe8:	6833      	ldr	r3, [r6, #0]
 800bfea:	0608      	lsls	r0, r1, #24
 800bfec:	f853 5b04 	ldr.w	r5, [r3], #4
 800bff0:	d402      	bmi.n	800bff8 <_printf_i+0xe8>
 800bff2:	0649      	lsls	r1, r1, #25
 800bff4:	bf48      	it	mi
 800bff6:	b2ad      	uxthmi	r5, r5
 800bff8:	2f6f      	cmp	r7, #111	@ 0x6f
 800bffa:	4853      	ldr	r0, [pc, #332]	@ (800c148 <_printf_i+0x238>)
 800bffc:	6033      	str	r3, [r6, #0]
 800bffe:	bf14      	ite	ne
 800c000:	230a      	movne	r3, #10
 800c002:	2308      	moveq	r3, #8
 800c004:	2100      	movs	r1, #0
 800c006:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c00a:	6866      	ldr	r6, [r4, #4]
 800c00c:	60a6      	str	r6, [r4, #8]
 800c00e:	2e00      	cmp	r6, #0
 800c010:	bfa2      	ittt	ge
 800c012:	6821      	ldrge	r1, [r4, #0]
 800c014:	f021 0104 	bicge.w	r1, r1, #4
 800c018:	6021      	strge	r1, [r4, #0]
 800c01a:	b90d      	cbnz	r5, 800c020 <_printf_i+0x110>
 800c01c:	2e00      	cmp	r6, #0
 800c01e:	d04b      	beq.n	800c0b8 <_printf_i+0x1a8>
 800c020:	4616      	mov	r6, r2
 800c022:	fbb5 f1f3 	udiv	r1, r5, r3
 800c026:	fb03 5711 	mls	r7, r3, r1, r5
 800c02a:	5dc7      	ldrb	r7, [r0, r7]
 800c02c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c030:	462f      	mov	r7, r5
 800c032:	42bb      	cmp	r3, r7
 800c034:	460d      	mov	r5, r1
 800c036:	d9f4      	bls.n	800c022 <_printf_i+0x112>
 800c038:	2b08      	cmp	r3, #8
 800c03a:	d10b      	bne.n	800c054 <_printf_i+0x144>
 800c03c:	6823      	ldr	r3, [r4, #0]
 800c03e:	07df      	lsls	r7, r3, #31
 800c040:	d508      	bpl.n	800c054 <_printf_i+0x144>
 800c042:	6923      	ldr	r3, [r4, #16]
 800c044:	6861      	ldr	r1, [r4, #4]
 800c046:	4299      	cmp	r1, r3
 800c048:	bfde      	ittt	le
 800c04a:	2330      	movle	r3, #48	@ 0x30
 800c04c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c050:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c054:	1b92      	subs	r2, r2, r6
 800c056:	6122      	str	r2, [r4, #16]
 800c058:	f8cd a000 	str.w	sl, [sp]
 800c05c:	464b      	mov	r3, r9
 800c05e:	aa03      	add	r2, sp, #12
 800c060:	4621      	mov	r1, r4
 800c062:	4640      	mov	r0, r8
 800c064:	f7ff fee6 	bl	800be34 <_printf_common>
 800c068:	3001      	adds	r0, #1
 800c06a:	d14a      	bne.n	800c102 <_printf_i+0x1f2>
 800c06c:	f04f 30ff 	mov.w	r0, #4294967295
 800c070:	b004      	add	sp, #16
 800c072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c076:	6823      	ldr	r3, [r4, #0]
 800c078:	f043 0320 	orr.w	r3, r3, #32
 800c07c:	6023      	str	r3, [r4, #0]
 800c07e:	4833      	ldr	r0, [pc, #204]	@ (800c14c <_printf_i+0x23c>)
 800c080:	2778      	movs	r7, #120	@ 0x78
 800c082:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c086:	6823      	ldr	r3, [r4, #0]
 800c088:	6831      	ldr	r1, [r6, #0]
 800c08a:	061f      	lsls	r7, r3, #24
 800c08c:	f851 5b04 	ldr.w	r5, [r1], #4
 800c090:	d402      	bmi.n	800c098 <_printf_i+0x188>
 800c092:	065f      	lsls	r7, r3, #25
 800c094:	bf48      	it	mi
 800c096:	b2ad      	uxthmi	r5, r5
 800c098:	6031      	str	r1, [r6, #0]
 800c09a:	07d9      	lsls	r1, r3, #31
 800c09c:	bf44      	itt	mi
 800c09e:	f043 0320 	orrmi.w	r3, r3, #32
 800c0a2:	6023      	strmi	r3, [r4, #0]
 800c0a4:	b11d      	cbz	r5, 800c0ae <_printf_i+0x19e>
 800c0a6:	2310      	movs	r3, #16
 800c0a8:	e7ac      	b.n	800c004 <_printf_i+0xf4>
 800c0aa:	4827      	ldr	r0, [pc, #156]	@ (800c148 <_printf_i+0x238>)
 800c0ac:	e7e9      	b.n	800c082 <_printf_i+0x172>
 800c0ae:	6823      	ldr	r3, [r4, #0]
 800c0b0:	f023 0320 	bic.w	r3, r3, #32
 800c0b4:	6023      	str	r3, [r4, #0]
 800c0b6:	e7f6      	b.n	800c0a6 <_printf_i+0x196>
 800c0b8:	4616      	mov	r6, r2
 800c0ba:	e7bd      	b.n	800c038 <_printf_i+0x128>
 800c0bc:	6833      	ldr	r3, [r6, #0]
 800c0be:	6825      	ldr	r5, [r4, #0]
 800c0c0:	6961      	ldr	r1, [r4, #20]
 800c0c2:	1d18      	adds	r0, r3, #4
 800c0c4:	6030      	str	r0, [r6, #0]
 800c0c6:	062e      	lsls	r6, r5, #24
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	d501      	bpl.n	800c0d0 <_printf_i+0x1c0>
 800c0cc:	6019      	str	r1, [r3, #0]
 800c0ce:	e002      	b.n	800c0d6 <_printf_i+0x1c6>
 800c0d0:	0668      	lsls	r0, r5, #25
 800c0d2:	d5fb      	bpl.n	800c0cc <_printf_i+0x1bc>
 800c0d4:	8019      	strh	r1, [r3, #0]
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	6123      	str	r3, [r4, #16]
 800c0da:	4616      	mov	r6, r2
 800c0dc:	e7bc      	b.n	800c058 <_printf_i+0x148>
 800c0de:	6833      	ldr	r3, [r6, #0]
 800c0e0:	1d1a      	adds	r2, r3, #4
 800c0e2:	6032      	str	r2, [r6, #0]
 800c0e4:	681e      	ldr	r6, [r3, #0]
 800c0e6:	6862      	ldr	r2, [r4, #4]
 800c0e8:	2100      	movs	r1, #0
 800c0ea:	4630      	mov	r0, r6
 800c0ec:	f7f4 f8a8 	bl	8000240 <memchr>
 800c0f0:	b108      	cbz	r0, 800c0f6 <_printf_i+0x1e6>
 800c0f2:	1b80      	subs	r0, r0, r6
 800c0f4:	6060      	str	r0, [r4, #4]
 800c0f6:	6863      	ldr	r3, [r4, #4]
 800c0f8:	6123      	str	r3, [r4, #16]
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c100:	e7aa      	b.n	800c058 <_printf_i+0x148>
 800c102:	6923      	ldr	r3, [r4, #16]
 800c104:	4632      	mov	r2, r6
 800c106:	4649      	mov	r1, r9
 800c108:	4640      	mov	r0, r8
 800c10a:	47d0      	blx	sl
 800c10c:	3001      	adds	r0, #1
 800c10e:	d0ad      	beq.n	800c06c <_printf_i+0x15c>
 800c110:	6823      	ldr	r3, [r4, #0]
 800c112:	079b      	lsls	r3, r3, #30
 800c114:	d413      	bmi.n	800c13e <_printf_i+0x22e>
 800c116:	68e0      	ldr	r0, [r4, #12]
 800c118:	9b03      	ldr	r3, [sp, #12]
 800c11a:	4298      	cmp	r0, r3
 800c11c:	bfb8      	it	lt
 800c11e:	4618      	movlt	r0, r3
 800c120:	e7a6      	b.n	800c070 <_printf_i+0x160>
 800c122:	2301      	movs	r3, #1
 800c124:	4632      	mov	r2, r6
 800c126:	4649      	mov	r1, r9
 800c128:	4640      	mov	r0, r8
 800c12a:	47d0      	blx	sl
 800c12c:	3001      	adds	r0, #1
 800c12e:	d09d      	beq.n	800c06c <_printf_i+0x15c>
 800c130:	3501      	adds	r5, #1
 800c132:	68e3      	ldr	r3, [r4, #12]
 800c134:	9903      	ldr	r1, [sp, #12]
 800c136:	1a5b      	subs	r3, r3, r1
 800c138:	42ab      	cmp	r3, r5
 800c13a:	dcf2      	bgt.n	800c122 <_printf_i+0x212>
 800c13c:	e7eb      	b.n	800c116 <_printf_i+0x206>
 800c13e:	2500      	movs	r5, #0
 800c140:	f104 0619 	add.w	r6, r4, #25
 800c144:	e7f5      	b.n	800c132 <_printf_i+0x222>
 800c146:	bf00      	nop
 800c148:	0800c7b2 	.word	0x0800c7b2
 800c14c:	0800c7c3 	.word	0x0800c7c3

0800c150 <memmove>:
 800c150:	4288      	cmp	r0, r1
 800c152:	b510      	push	{r4, lr}
 800c154:	eb01 0402 	add.w	r4, r1, r2
 800c158:	d902      	bls.n	800c160 <memmove+0x10>
 800c15a:	4284      	cmp	r4, r0
 800c15c:	4623      	mov	r3, r4
 800c15e:	d807      	bhi.n	800c170 <memmove+0x20>
 800c160:	1e43      	subs	r3, r0, #1
 800c162:	42a1      	cmp	r1, r4
 800c164:	d008      	beq.n	800c178 <memmove+0x28>
 800c166:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c16a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c16e:	e7f8      	b.n	800c162 <memmove+0x12>
 800c170:	4402      	add	r2, r0
 800c172:	4601      	mov	r1, r0
 800c174:	428a      	cmp	r2, r1
 800c176:	d100      	bne.n	800c17a <memmove+0x2a>
 800c178:	bd10      	pop	{r4, pc}
 800c17a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c17e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c182:	e7f7      	b.n	800c174 <memmove+0x24>

0800c184 <_sbrk_r>:
 800c184:	b538      	push	{r3, r4, r5, lr}
 800c186:	4d06      	ldr	r5, [pc, #24]	@ (800c1a0 <_sbrk_r+0x1c>)
 800c188:	2300      	movs	r3, #0
 800c18a:	4604      	mov	r4, r0
 800c18c:	4608      	mov	r0, r1
 800c18e:	602b      	str	r3, [r5, #0]
 800c190:	f7f9 f810 	bl	80051b4 <_sbrk>
 800c194:	1c43      	adds	r3, r0, #1
 800c196:	d102      	bne.n	800c19e <_sbrk_r+0x1a>
 800c198:	682b      	ldr	r3, [r5, #0]
 800c19a:	b103      	cbz	r3, 800c19e <_sbrk_r+0x1a>
 800c19c:	6023      	str	r3, [r4, #0]
 800c19e:	bd38      	pop	{r3, r4, r5, pc}
 800c1a0:	200006e4 	.word	0x200006e4

0800c1a4 <memcpy>:
 800c1a4:	440a      	add	r2, r1
 800c1a6:	4291      	cmp	r1, r2
 800c1a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c1ac:	d100      	bne.n	800c1b0 <memcpy+0xc>
 800c1ae:	4770      	bx	lr
 800c1b0:	b510      	push	{r4, lr}
 800c1b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1ba:	4291      	cmp	r1, r2
 800c1bc:	d1f9      	bne.n	800c1b2 <memcpy+0xe>
 800c1be:	bd10      	pop	{r4, pc}

0800c1c0 <_realloc_r>:
 800c1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1c4:	4680      	mov	r8, r0
 800c1c6:	4615      	mov	r5, r2
 800c1c8:	460c      	mov	r4, r1
 800c1ca:	b921      	cbnz	r1, 800c1d6 <_realloc_r+0x16>
 800c1cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d0:	4611      	mov	r1, r2
 800c1d2:	f7ff bc4b 	b.w	800ba6c <_malloc_r>
 800c1d6:	b92a      	cbnz	r2, 800c1e4 <_realloc_r+0x24>
 800c1d8:	f7ff fbdc 	bl	800b994 <_free_r>
 800c1dc:	2400      	movs	r4, #0
 800c1de:	4620      	mov	r0, r4
 800c1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1e4:	f000 f81a 	bl	800c21c <_malloc_usable_size_r>
 800c1e8:	4285      	cmp	r5, r0
 800c1ea:	4606      	mov	r6, r0
 800c1ec:	d802      	bhi.n	800c1f4 <_realloc_r+0x34>
 800c1ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c1f2:	d8f4      	bhi.n	800c1de <_realloc_r+0x1e>
 800c1f4:	4629      	mov	r1, r5
 800c1f6:	4640      	mov	r0, r8
 800c1f8:	f7ff fc38 	bl	800ba6c <_malloc_r>
 800c1fc:	4607      	mov	r7, r0
 800c1fe:	2800      	cmp	r0, #0
 800c200:	d0ec      	beq.n	800c1dc <_realloc_r+0x1c>
 800c202:	42b5      	cmp	r5, r6
 800c204:	462a      	mov	r2, r5
 800c206:	4621      	mov	r1, r4
 800c208:	bf28      	it	cs
 800c20a:	4632      	movcs	r2, r6
 800c20c:	f7ff ffca 	bl	800c1a4 <memcpy>
 800c210:	4621      	mov	r1, r4
 800c212:	4640      	mov	r0, r8
 800c214:	f7ff fbbe 	bl	800b994 <_free_r>
 800c218:	463c      	mov	r4, r7
 800c21a:	e7e0      	b.n	800c1de <_realloc_r+0x1e>

0800c21c <_malloc_usable_size_r>:
 800c21c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c220:	1f18      	subs	r0, r3, #4
 800c222:	2b00      	cmp	r3, #0
 800c224:	bfbc      	itt	lt
 800c226:	580b      	ldrlt	r3, [r1, r0]
 800c228:	18c0      	addlt	r0, r0, r3
 800c22a:	4770      	bx	lr
 800c22c:	0000      	movs	r0, r0
	...

0800c230 <floor>:
 800c230:	ec51 0b10 	vmov	r0, r1, d0
 800c234:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c23c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800c240:	2e13      	cmp	r6, #19
 800c242:	460c      	mov	r4, r1
 800c244:	4605      	mov	r5, r0
 800c246:	4680      	mov	r8, r0
 800c248:	dc34      	bgt.n	800c2b4 <floor+0x84>
 800c24a:	2e00      	cmp	r6, #0
 800c24c:	da17      	bge.n	800c27e <floor+0x4e>
 800c24e:	a332      	add	r3, pc, #200	@ (adr r3, 800c318 <floor+0xe8>)
 800c250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c254:	f7f4 f84a 	bl	80002ec <__adddf3>
 800c258:	2200      	movs	r2, #0
 800c25a:	2300      	movs	r3, #0
 800c25c:	f7f4 fc8c 	bl	8000b78 <__aeabi_dcmpgt>
 800c260:	b150      	cbz	r0, 800c278 <floor+0x48>
 800c262:	2c00      	cmp	r4, #0
 800c264:	da55      	bge.n	800c312 <floor+0xe2>
 800c266:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c26a:	432c      	orrs	r4, r5
 800c26c:	2500      	movs	r5, #0
 800c26e:	42ac      	cmp	r4, r5
 800c270:	4c2b      	ldr	r4, [pc, #172]	@ (800c320 <floor+0xf0>)
 800c272:	bf08      	it	eq
 800c274:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c278:	4621      	mov	r1, r4
 800c27a:	4628      	mov	r0, r5
 800c27c:	e023      	b.n	800c2c6 <floor+0x96>
 800c27e:	4f29      	ldr	r7, [pc, #164]	@ (800c324 <floor+0xf4>)
 800c280:	4137      	asrs	r7, r6
 800c282:	ea01 0307 	and.w	r3, r1, r7
 800c286:	4303      	orrs	r3, r0
 800c288:	d01d      	beq.n	800c2c6 <floor+0x96>
 800c28a:	a323      	add	r3, pc, #140	@ (adr r3, 800c318 <floor+0xe8>)
 800c28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c290:	f7f4 f82c 	bl	80002ec <__adddf3>
 800c294:	2200      	movs	r2, #0
 800c296:	2300      	movs	r3, #0
 800c298:	f7f4 fc6e 	bl	8000b78 <__aeabi_dcmpgt>
 800c29c:	2800      	cmp	r0, #0
 800c29e:	d0eb      	beq.n	800c278 <floor+0x48>
 800c2a0:	2c00      	cmp	r4, #0
 800c2a2:	bfbe      	ittt	lt
 800c2a4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c2a8:	4133      	asrlt	r3, r6
 800c2aa:	18e4      	addlt	r4, r4, r3
 800c2ac:	ea24 0407 	bic.w	r4, r4, r7
 800c2b0:	2500      	movs	r5, #0
 800c2b2:	e7e1      	b.n	800c278 <floor+0x48>
 800c2b4:	2e33      	cmp	r6, #51	@ 0x33
 800c2b6:	dd0a      	ble.n	800c2ce <floor+0x9e>
 800c2b8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c2bc:	d103      	bne.n	800c2c6 <floor+0x96>
 800c2be:	4602      	mov	r2, r0
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	f7f4 f813 	bl	80002ec <__adddf3>
 800c2c6:	ec41 0b10 	vmov	d0, r0, r1
 800c2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ce:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c2d2:	f04f 37ff 	mov.w	r7, #4294967295
 800c2d6:	40df      	lsrs	r7, r3
 800c2d8:	4207      	tst	r7, r0
 800c2da:	d0f4      	beq.n	800c2c6 <floor+0x96>
 800c2dc:	a30e      	add	r3, pc, #56	@ (adr r3, 800c318 <floor+0xe8>)
 800c2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e2:	f7f4 f803 	bl	80002ec <__adddf3>
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	f7f4 fc45 	bl	8000b78 <__aeabi_dcmpgt>
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	d0c2      	beq.n	800c278 <floor+0x48>
 800c2f2:	2c00      	cmp	r4, #0
 800c2f4:	da0a      	bge.n	800c30c <floor+0xdc>
 800c2f6:	2e14      	cmp	r6, #20
 800c2f8:	d101      	bne.n	800c2fe <floor+0xce>
 800c2fa:	3401      	adds	r4, #1
 800c2fc:	e006      	b.n	800c30c <floor+0xdc>
 800c2fe:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c302:	2301      	movs	r3, #1
 800c304:	40b3      	lsls	r3, r6
 800c306:	441d      	add	r5, r3
 800c308:	4545      	cmp	r5, r8
 800c30a:	d3f6      	bcc.n	800c2fa <floor+0xca>
 800c30c:	ea25 0507 	bic.w	r5, r5, r7
 800c310:	e7b2      	b.n	800c278 <floor+0x48>
 800c312:	2500      	movs	r5, #0
 800c314:	462c      	mov	r4, r5
 800c316:	e7af      	b.n	800c278 <floor+0x48>
 800c318:	8800759c 	.word	0x8800759c
 800c31c:	7e37e43c 	.word	0x7e37e43c
 800c320:	bff00000 	.word	0xbff00000
 800c324:	000fffff 	.word	0x000fffff

0800c328 <round>:
 800c328:	ec51 0b10 	vmov	r0, r1, d0
 800c32c:	b570      	push	{r4, r5, r6, lr}
 800c32e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800c332:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800c336:	2a13      	cmp	r2, #19
 800c338:	460b      	mov	r3, r1
 800c33a:	4605      	mov	r5, r0
 800c33c:	dc1b      	bgt.n	800c376 <round+0x4e>
 800c33e:	2a00      	cmp	r2, #0
 800c340:	da0b      	bge.n	800c35a <round+0x32>
 800c342:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800c346:	3201      	adds	r2, #1
 800c348:	bf04      	itt	eq
 800c34a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800c34e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800c352:	2200      	movs	r2, #0
 800c354:	4619      	mov	r1, r3
 800c356:	4610      	mov	r0, r2
 800c358:	e015      	b.n	800c386 <round+0x5e>
 800c35a:	4c15      	ldr	r4, [pc, #84]	@ (800c3b0 <round+0x88>)
 800c35c:	4114      	asrs	r4, r2
 800c35e:	ea04 0601 	and.w	r6, r4, r1
 800c362:	4306      	orrs	r6, r0
 800c364:	d00f      	beq.n	800c386 <round+0x5e>
 800c366:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800c36a:	fa41 f202 	asr.w	r2, r1, r2
 800c36e:	4413      	add	r3, r2
 800c370:	ea23 0304 	bic.w	r3, r3, r4
 800c374:	e7ed      	b.n	800c352 <round+0x2a>
 800c376:	2a33      	cmp	r2, #51	@ 0x33
 800c378:	dd08      	ble.n	800c38c <round+0x64>
 800c37a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800c37e:	d102      	bne.n	800c386 <round+0x5e>
 800c380:	4602      	mov	r2, r0
 800c382:	f7f3 ffb3 	bl	80002ec <__adddf3>
 800c386:	ec41 0b10 	vmov	d0, r0, r1
 800c38a:	bd70      	pop	{r4, r5, r6, pc}
 800c38c:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800c390:	f04f 34ff 	mov.w	r4, #4294967295
 800c394:	40f4      	lsrs	r4, r6
 800c396:	4204      	tst	r4, r0
 800c398:	d0f5      	beq.n	800c386 <round+0x5e>
 800c39a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800c39e:	2201      	movs	r2, #1
 800c3a0:	408a      	lsls	r2, r1
 800c3a2:	1952      	adds	r2, r2, r5
 800c3a4:	bf28      	it	cs
 800c3a6:	3301      	addcs	r3, #1
 800c3a8:	ea22 0204 	bic.w	r2, r2, r4
 800c3ac:	e7d2      	b.n	800c354 <round+0x2c>
 800c3ae:	bf00      	nop
 800c3b0:	000fffff 	.word	0x000fffff

0800c3b4 <_init>:
 800c3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3b6:	bf00      	nop
 800c3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ba:	bc08      	pop	{r3}
 800c3bc:	469e      	mov	lr, r3
 800c3be:	4770      	bx	lr

0800c3c0 <_fini>:
 800c3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c2:	bf00      	nop
 800c3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3c6:	bc08      	pop	{r3}
 800c3c8:	469e      	mov	lr, r3
 800c3ca:	4770      	bx	lr
