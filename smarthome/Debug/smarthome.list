
smarthome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb74  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  0800cd44  0800cd44  0000dd44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d158  0800d158  0000f1b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d158  0800d158  0000e158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d160  0800d160  0000f1b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d160  0800d160  0000e160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d164  0800d164  0000e164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b4  20000000  0800d168  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a0  200001b8  0800d31c  0000f1b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000758  0800d31c  0000f758  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa53  00000000  00000000  0000f1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ad5  00000000  00000000  00029c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  0002d710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001109  00000000  00000000  0002ece0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b9f  00000000  00000000  0002fde9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001de27  00000000  00000000  00058988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f77f5  00000000  00000000  000767af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016dfa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006334  00000000  00000000  0016dfe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0017431c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b8 	.word	0x200001b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cd2c 	.word	0x0800cd2c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001bc 	.word	0x200001bc
 800020c:	0800cd2c 	.word	0x0800cd2c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2uiz>:
 8000bdc:	004a      	lsls	r2, r1, #1
 8000bde:	d211      	bcs.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be4:	d211      	bcs.n	8000c0a <__aeabi_d2uiz+0x2e>
 8000be6:	d50d      	bpl.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf0:	d40e      	bmi.n	8000c10 <__aeabi_d2uiz+0x34>
 8000bf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0e:	d102      	bne.n	8000c16 <__aeabi_d2uiz+0x3a>
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	4770      	bx	lr
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_d2f>:
 8000c1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c24:	bf24      	itt	cs
 8000c26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2e:	d90d      	bls.n	8000c4c <__aeabi_d2f+0x30>
 8000c30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c44:	bf08      	it	eq
 8000c46:	f020 0001 	biceq.w	r0, r0, #1
 8000c4a:	4770      	bx	lr
 8000c4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c50:	d121      	bne.n	8000c96 <__aeabi_d2f+0x7a>
 8000c52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c56:	bfbc      	itt	lt
 8000c58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	4770      	bxlt	lr
 8000c5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c66:	f1c2 0218 	rsb	r2, r2, #24
 8000c6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c72:	fa20 f002 	lsr.w	r0, r0, r2
 8000c76:	bf18      	it	ne
 8000c78:	f040 0001 	orrne.w	r0, r0, #1
 8000c7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c88:	ea40 000c 	orr.w	r0, r0, ip
 8000c8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c94:	e7cc      	b.n	8000c30 <__aeabi_d2f+0x14>
 8000c96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9a:	d107      	bne.n	8000cac <__aeabi_d2f+0x90>
 8000c9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca0:	bf1e      	ittt	ne
 8000ca2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000caa:	4770      	bxne	lr
 8000cac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd0:	f000 b96a 	b.w	8000fa8 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f806 	bl	8000cec <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__udivmoddi4>:
 8000cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	9d08      	ldr	r5, [sp, #32]
 8000cf2:	460c      	mov	r4, r1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d14e      	bne.n	8000d96 <__udivmoddi4+0xaa>
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	458c      	cmp	ip, r1
 8000cfc:	4686      	mov	lr, r0
 8000cfe:	fab2 f282 	clz	r2, r2
 8000d02:	d962      	bls.n	8000dca <__udivmoddi4+0xde>
 8000d04:	b14a      	cbz	r2, 8000d1a <__udivmoddi4+0x2e>
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	4091      	lsls	r1, r2
 8000d0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d14:	4319      	orrs	r1, r3
 8000d16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f f68c 	uxth.w	r6, ip
 8000d22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d32:	fb04 f106 	mul.w	r1, r4, r6
 8000d36:	4299      	cmp	r1, r3
 8000d38:	d90a      	bls.n	8000d50 <__udivmoddi4+0x64>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d42:	f080 8112 	bcs.w	8000f6a <__udivmoddi4+0x27e>
 8000d46:	4299      	cmp	r1, r3
 8000d48:	f240 810f 	bls.w	8000f6a <__udivmoddi4+0x27e>
 8000d4c:	3c02      	subs	r4, #2
 8000d4e:	4463      	add	r3, ip
 8000d50:	1a59      	subs	r1, r3, r1
 8000d52:	fa1f f38e 	uxth.w	r3, lr
 8000d56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d62:	fb00 f606 	mul.w	r6, r0, r6
 8000d66:	429e      	cmp	r6, r3
 8000d68:	d90a      	bls.n	8000d80 <__udivmoddi4+0x94>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d72:	f080 80fc 	bcs.w	8000f6e <__udivmoddi4+0x282>
 8000d76:	429e      	cmp	r6, r3
 8000d78:	f240 80f9 	bls.w	8000f6e <__udivmoddi4+0x282>
 8000d7c:	4463      	add	r3, ip
 8000d7e:	3802      	subs	r0, #2
 8000d80:	1b9b      	subs	r3, r3, r6
 8000d82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d86:	2100      	movs	r1, #0
 8000d88:	b11d      	cbz	r5, 8000d92 <__udivmoddi4+0xa6>
 8000d8a:	40d3      	lsrs	r3, r2
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d905      	bls.n	8000da6 <__udivmoddi4+0xba>
 8000d9a:	b10d      	cbz	r5, 8000da0 <__udivmoddi4+0xb4>
 8000d9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000da0:	2100      	movs	r1, #0
 8000da2:	4608      	mov	r0, r1
 8000da4:	e7f5      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000da6:	fab3 f183 	clz	r1, r3
 8000daa:	2900      	cmp	r1, #0
 8000dac:	d146      	bne.n	8000e3c <__udivmoddi4+0x150>
 8000dae:	42a3      	cmp	r3, r4
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xcc>
 8000db2:	4290      	cmp	r0, r2
 8000db4:	f0c0 80f0 	bcc.w	8000f98 <__udivmoddi4+0x2ac>
 8000db8:	1a86      	subs	r6, r0, r2
 8000dba:	eb64 0303 	sbc.w	r3, r4, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	d0e6      	beq.n	8000d92 <__udivmoddi4+0xa6>
 8000dc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc8:	e7e3      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000dca:	2a00      	cmp	r2, #0
 8000dcc:	f040 8090 	bne.w	8000ef0 <__udivmoddi4+0x204>
 8000dd0:	eba1 040c 	sub.w	r4, r1, ip
 8000dd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd8:	fa1f f78c 	uxth.w	r7, ip
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000de2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de6:	fb08 4416 	mls	r4, r8, r6, r4
 8000dea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dee:	fb07 f006 	mul.w	r0, r7, r6
 8000df2:	4298      	cmp	r0, r3
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x11c>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0x11a>
 8000e00:	4298      	cmp	r0, r3
 8000e02:	f200 80cd 	bhi.w	8000fa0 <__udivmoddi4+0x2b4>
 8000e06:	4626      	mov	r6, r4
 8000e08:	1a1c      	subs	r4, r3, r0
 8000e0a:	fa1f f38e 	uxth.w	r3, lr
 8000e0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e12:	fb08 4410 	mls	r4, r8, r0, r4
 8000e16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e1a:	fb00 f707 	mul.w	r7, r0, r7
 8000e1e:	429f      	cmp	r7, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x148>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x146>
 8000e2c:	429f      	cmp	r7, r3
 8000e2e:	f200 80b0 	bhi.w	8000f92 <__udivmoddi4+0x2a6>
 8000e32:	4620      	mov	r0, r4
 8000e34:	1bdb      	subs	r3, r3, r7
 8000e36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e3a:	e7a5      	b.n	8000d88 <__udivmoddi4+0x9c>
 8000e3c:	f1c1 0620 	rsb	r6, r1, #32
 8000e40:	408b      	lsls	r3, r1
 8000e42:	fa22 f706 	lsr.w	r7, r2, r6
 8000e46:	431f      	orrs	r7, r3
 8000e48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000e50:	ea43 030c 	orr.w	r3, r3, ip
 8000e54:	40f4      	lsrs	r4, r6
 8000e56:	fa00 f801 	lsl.w	r8, r0, r1
 8000e5a:	0c38      	lsrs	r0, r7, #16
 8000e5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e60:	fbb4 fef0 	udiv	lr, r4, r0
 8000e64:	fa1f fc87 	uxth.w	ip, r7
 8000e68:	fb00 441e 	mls	r4, r0, lr, r4
 8000e6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e70:	fb0e f90c 	mul.w	r9, lr, ip
 8000e74:	45a1      	cmp	r9, r4
 8000e76:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7a:	d90a      	bls.n	8000e92 <__udivmoddi4+0x1a6>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e82:	f080 8084 	bcs.w	8000f8e <__udivmoddi4+0x2a2>
 8000e86:	45a1      	cmp	r9, r4
 8000e88:	f240 8081 	bls.w	8000f8e <__udivmoddi4+0x2a2>
 8000e8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e90:	443c      	add	r4, r7
 8000e92:	eba4 0409 	sub.w	r4, r4, r9
 8000e96:	fa1f f983 	uxth.w	r9, r3
 8000e9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ea2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eaa:	45a4      	cmp	ip, r4
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x1d2>
 8000eae:	193c      	adds	r4, r7, r4
 8000eb0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eb4:	d267      	bcs.n	8000f86 <__udivmoddi4+0x29a>
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d965      	bls.n	8000f86 <__udivmoddi4+0x29a>
 8000eba:	3b02      	subs	r3, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ec2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec6:	eba4 040c 	sub.w	r4, r4, ip
 8000eca:	429c      	cmp	r4, r3
 8000ecc:	46ce      	mov	lr, r9
 8000ece:	469c      	mov	ip, r3
 8000ed0:	d351      	bcc.n	8000f76 <__udivmoddi4+0x28a>
 8000ed2:	d04e      	beq.n	8000f72 <__udivmoddi4+0x286>
 8000ed4:	b155      	cbz	r5, 8000eec <__udivmoddi4+0x200>
 8000ed6:	ebb8 030e 	subs.w	r3, r8, lr
 8000eda:	eb64 040c 	sbc.w	r4, r4, ip
 8000ede:	fa04 f606 	lsl.w	r6, r4, r6
 8000ee2:	40cb      	lsrs	r3, r1
 8000ee4:	431e      	orrs	r6, r3
 8000ee6:	40cc      	lsrs	r4, r1
 8000ee8:	e9c5 6400 	strd	r6, r4, [r5]
 8000eec:	2100      	movs	r1, #0
 8000eee:	e750      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000ef0:	f1c2 0320 	rsb	r3, r2, #32
 8000ef4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa24 f303 	lsr.w	r3, r4, r3
 8000f00:	4094      	lsls	r4, r2
 8000f02:	430c      	orrs	r4, r1
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f0c:	fa1f f78c 	uxth.w	r7, ip
 8000f10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f14:	fb08 3110 	mls	r1, r8, r0, r3
 8000f18:	0c23      	lsrs	r3, r4, #16
 8000f1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1e:	fb00 f107 	mul.w	r1, r0, r7
 8000f22:	4299      	cmp	r1, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x24c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f2e:	d22c      	bcs.n	8000f8a <__udivmoddi4+0x29e>
 8000f30:	4299      	cmp	r1, r3
 8000f32:	d92a      	bls.n	8000f8a <__udivmoddi4+0x29e>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1a5b      	subs	r3, r3, r1
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f40:	fb08 3311 	mls	r3, r8, r1, r3
 8000f44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f48:	fb01 f307 	mul.w	r3, r1, r7
 8000f4c:	42a3      	cmp	r3, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x276>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f58:	d213      	bcs.n	8000f82 <__udivmoddi4+0x296>
 8000f5a:	42a3      	cmp	r3, r4
 8000f5c:	d911      	bls.n	8000f82 <__udivmoddi4+0x296>
 8000f5e:	3902      	subs	r1, #2
 8000f60:	4464      	add	r4, ip
 8000f62:	1ae4      	subs	r4, r4, r3
 8000f64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f68:	e739      	b.n	8000dde <__udivmoddi4+0xf2>
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	e6f0      	b.n	8000d50 <__udivmoddi4+0x64>
 8000f6e:	4608      	mov	r0, r1
 8000f70:	e706      	b.n	8000d80 <__udivmoddi4+0x94>
 8000f72:	45c8      	cmp	r8, r9
 8000f74:	d2ae      	bcs.n	8000ed4 <__udivmoddi4+0x1e8>
 8000f76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7e:	3801      	subs	r0, #1
 8000f80:	e7a8      	b.n	8000ed4 <__udivmoddi4+0x1e8>
 8000f82:	4631      	mov	r1, r6
 8000f84:	e7ed      	b.n	8000f62 <__udivmoddi4+0x276>
 8000f86:	4603      	mov	r3, r0
 8000f88:	e799      	b.n	8000ebe <__udivmoddi4+0x1d2>
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	e7d4      	b.n	8000f38 <__udivmoddi4+0x24c>
 8000f8e:	46d6      	mov	lr, sl
 8000f90:	e77f      	b.n	8000e92 <__udivmoddi4+0x1a6>
 8000f92:	4463      	add	r3, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e74d      	b.n	8000e34 <__udivmoddi4+0x148>
 8000f98:	4606      	mov	r6, r0
 8000f9a:	4623      	mov	r3, r4
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	e70f      	b.n	8000dc0 <__udivmoddi4+0xd4>
 8000fa0:	3e02      	subs	r6, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	e730      	b.n	8000e08 <__udivmoddi4+0x11c>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <Read16>:
uint16_t ina219_calibrationValue;
int16_t ina219_currentDivider_mA;
int16_t ina219_powerMultiplier_mW;

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af04      	add	r7, sp, #16
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc4:	9302      	str	r3, [sp, #8]
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	2180      	movs	r1, #128	@ 0x80
 8000fd4:	f005 fc34 	bl	8006840 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8000fd8:	7b3b      	ldrb	r3, [r7, #12]
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	b21a      	sxth	r2, r3
 8000fde:	7b7b      	ldrb	r3, [r7, #13]
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	b29b      	uxth	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 8001000:	883b      	ldrh	r3, [r7, #0]
 8001002:	0a1b      	lsrs	r3, r3, #8
 8001004:	b29b      	uxth	r3, r3
 8001006:	b2db      	uxtb	r3, r3
 8001008:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 800100a:	883b      	ldrh	r3, [r7, #0]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	b29a      	uxth	r2, r3
 8001018:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	2302      	movs	r3, #2
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	2180      	movs	r1, #128	@ 0x80
 800102c:	f005 faf4 	bl	8006618 <HAL_I2C_Mem_Write>
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8001040:	2102      	movs	r1, #2
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ffb2 	bl	8000fac <Read16>
 8001048:	4603      	mov	r3, r0
 800104a:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 800104c:	89fb      	ldrh	r3, [r7, #14]
 800104e:	08db      	lsrs	r3, r3, #3
 8001050:	b29b      	uxth	r3, r3
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	b29b      	uxth	r3, r3

}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8001066:	2104      	movs	r1, #4
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff9f 	bl	8000fac <Read16>
 800106e:	4603      	mov	r3, r0
 8001070:	81fb      	strh	r3, [r7, #14]

	return (result );
 8001072:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ffe8 	bl	800105e <INA219_ReadCurrent_raw>
 800108e:	4603      	mov	r3, r0
 8001090:	81fb      	strh	r3, [r7, #14]

	return (result / ina219_currentDivider_mA );
 8001092:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001096:	4a05      	ldr	r2, [pc, #20]	@ (80010ac <INA219_ReadCurrent+0x2c>)
 8001098:	f9b2 2000 	ldrsh.w	r2, [r2]
 800109c:	fb93 f3f2 	sdiv	r3, r3, r2
 80010a0:	b21b      	sxth	r3, r3
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200001d6 	.word	0x200001d6

080010b0 <INA219_ReadShuntVolage>:

uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 80010b8:	2101      	movs	r1, #1
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff76 	bl	8000fac <Read16>
 80010c0:	4603      	mov	r3, r0
 80010c2:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01 );
 80010c4:	89fb      	ldrh	r3, [r7, #14]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fa5c 	bl	8000584 <__aeabi_i2d>
 80010cc:	a308      	add	r3, pc, #32	@ (adr r3, 80010f0 <INA219_ReadShuntVolage+0x40>)
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	f7ff fac1 	bl	8000658 <__aeabi_dmul>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fd7d 	bl	8000bdc <__aeabi_d2uiz>
 80010e2:	4603      	mov	r3, r0
 80010e4:	b29b      	uxth	r3, r3
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	47ae147b 	.word	0x47ae147b
 80010f4:	3f847ae1 	.word	0x3f847ae1

080010f8 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8001100:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001104:	2100      	movs	r1, #0
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff72 	bl	8000ff0 <Write16>
	HAL_Delay(1);
 800110c:	2001      	movs	r0, #1
 800110e:	f004 fe0f 	bl	8005d30 <HAL_Delay>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	460b      	mov	r3, r1
 8001124:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8001126:	887b      	ldrh	r3, [r7, #2]
 8001128:	461a      	mov	r2, r3
 800112a:	2105      	movs	r1, #5
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff5f 	bl	8000ff0 <Write16>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	460b      	mov	r3, r1
 8001144:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8001146:	887b      	ldrh	r3, [r7, #2]
 8001148:	461a      	mov	r2, r3
 800114a:	2100      	movs	r1, #0
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff4f 	bl	8000ff0 <Write16>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <INA219_setCalibration_16V_400mA>:
	INA219_setCalibration(ina219, ina219_calibrationValue);
	INA219_setConfig(ina219, config);
}

void INA219_setCalibration_16V_400mA(INA219_t *ina219)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_16V |
 8001164:	f240 139f 	movw	r3, #415	@ 0x19f
 8001168:	81fb      	strh	r3, [r7, #14]
	                    INA219_CONFIG_GAIN_1_40MV | INA219_CONFIG_BADCRES_12BIT |
	                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
	                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 8192;
 800116a:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <INA219_setCalibration_16V_400mA+0x40>)
 800116c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001170:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 20;    // Current LSB = 50uA per bit (1000/50 = 20)
 8001172:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <INA219_setCalibration_16V_400mA+0x44>)
 8001174:	2214      	movs	r2, #20
 8001176:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 1.0f; // Power LSB = 1mW per bit
 8001178:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <INA219_setCalibration_16V_400mA+0x48>)
 800117a:	2201      	movs	r2, #1
 800117c:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 800117e:	4b07      	ldr	r3, [pc, #28]	@ (800119c <INA219_setCalibration_16V_400mA+0x40>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	4619      	mov	r1, r3
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ffc8 	bl	800111a <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 800118a:	89fb      	ldrh	r3, [r7, #14]
 800118c:	4619      	mov	r1, r3
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ffd3 	bl	800113a <INA219_setConfig>
}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200001d4 	.word	0x200001d4
 80011a0:	200001d6 	.word	0x200001d6
 80011a4:	200001d8 	.word	0x200001d8

080011a8 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	4613      	mov	r3, r2
 80011b4:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	79fa      	ldrb	r2, [r7, #7]
 80011c0:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 80011c2:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <INA219_Init+0x5c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <INA219_Init+0x60>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	b299      	uxth	r1, r3
 80011d6:	2302      	movs	r3, #2
 80011d8:	2203      	movs	r2, #3
 80011da:	68b8      	ldr	r0, [r7, #8]
 80011dc:	f005 fc4a 	bl	8006a74 <HAL_I2C_IsDeviceReady>
 80011e0:	4603      	mov	r3, r0
 80011e2:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d107      	bne.n	80011fa <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f7ff ff84 	bl	80010f8 <INA219_Reset>
		INA219_setCalibration_16V_400mA(ina219);
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f7ff ffb3 	bl	800115c <INA219_setCalibration_16V_400mA>

		return 1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <INA219_Init+0x54>
	}

	else
	{
		return 0;
 80011fa:	2300      	movs	r3, #0
	}
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200001d6 	.word	0x200001d6
 8001208:	200001d8 	.word	0x200001d8

0800120c <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 fa47 	bl	80016a8 <null_ptr_check>
 800121a:	4603      	mov	r3, r0
 800121c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d117      	bne.n	8001256 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	20d0      	movs	r0, #208	@ 0xd0
 800122e:	f000 f818 	bl	8001262 <bmp2_get_regs>
 8001232:	4603      	mov	r3, r0
 8001234:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8001236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10b      	bne.n	8001256 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b58      	cmp	r3, #88	@ 0x58
 8001244:	d105      	bne.n	8001252 <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 fa79 	bl	800173e <get_calib_param>
 800124c:	4603      	mov	r3, r0
 800124e:	73fb      	strb	r3, [r7, #15]
 8001250:	e001      	b.n	8001256 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8001252:	23fc      	movs	r3, #252	@ 0xfc
 8001254:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8001262:	b590      	push	{r4, r7, lr}
 8001264:	b087      	sub	sp, #28
 8001266:	af00      	add	r7, sp, #0
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	4603      	mov	r3, r0
 8001270:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001272:	6838      	ldr	r0, [r7, #0]
 8001274:	f000 fa18 	bl	80016a8 <null_ptr_check>
 8001278:	4603      	mov	r3, r0
 800127a:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 800127c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d11e      	bne.n	80012c2 <bmp2_get_regs+0x60>
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d01b      	beq.n	80012c2 <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	785b      	ldrb	r3, [r3, #1]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d103      	bne.n	800129a <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001298:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	68dc      	ldr	r4, [r3, #12]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	7bf8      	ldrb	r0, [r7, #15]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	68b9      	ldr	r1, [r7, #8]
 80012a8:	47a0      	blx	r4
 80012aa:	4603      	mov	r3, r0
 80012ac:	461a      	mov	r2, r3
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d004      	beq.n	80012c6 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 80012bc:	23fe      	movs	r3, #254	@ 0xfe
 80012be:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80012c0:	e001      	b.n	80012c6 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012c2:	23ff      	movs	r3, #255	@ 0xff
 80012c4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	371c      	adds	r7, #28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd90      	pop	{r4, r7, pc}

080012d2 <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 80012d2:	b590      	push	{r4, r7, lr}
 80012d4:	b08b      	sub	sp, #44	@ 0x2c
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	60f8      	str	r0, [r7, #12]
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d901      	bls.n	80012ea <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 80012e6:	2304      	movs	r3, #4
 80012e8:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 80012ea:	6838      	ldr	r0, [r7, #0]
 80012ec:	f000 f9dc 	bl	80016a8 <null_ptr_check>
 80012f0:	4603      	mov	r3, r0
 80012f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80012f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d150      	bne.n	80013a0 <bmp2_set_regs+0xce>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d04d      	beq.n	80013a0 <bmp2_set_regs+0xce>
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d04a      	beq.n	80013a0 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d043      	beq.n	8001398 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	785b      	ldrb	r3, [r3, #1]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d114      	bne.n	8001348 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800131e:	2300      	movs	r3, #0
 8001320:	77fb      	strb	r3, [r7, #31]
 8001322:	e00d      	b.n	8001340 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 8001324:	7ffb      	ldrb	r3, [r7, #31]
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	4413      	add	r3, r2
 800132a:	781a      	ldrb	r2, [r3, #0]
 800132c:	7ffb      	ldrb	r3, [r7, #31]
 800132e:	68f9      	ldr	r1, [r7, #12]
 8001330:	440b      	add	r3, r1
 8001332:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800133a:	7ffb      	ldrb	r3, [r7, #31]
 800133c:	3301      	adds	r3, #1
 800133e:	77fb      	strb	r3, [r7, #31]
 8001340:	7ffb      	ldrb	r3, [r7, #31]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	429a      	cmp	r2, r3
 8001346:	d8ed      	bhi.n	8001324 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d90b      	bls.n	8001366 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 800134e:	f107 0114 	add.w	r1, r7, #20
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f000 f9c6 	bl	80016e8 <interleave_data>
                temp_len = ((len * 2) - 1);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	3b01      	subs	r3, #1
 8001362:	623b      	str	r3, [r7, #32]
 8001364:	e001      	b.n	800136a <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	691c      	ldr	r4, [r3, #16]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	7818      	ldrb	r0, [r3, #0]
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f107 0114 	add.w	r1, r7, #20
 800137a:	6a3a      	ldr	r2, [r7, #32]
 800137c:	47a0      	blx	r4
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00b      	beq.n	80013a8 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 8001390:	23fe      	movs	r3, #254	@ 0xfe
 8001392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 8001396:	e007      	b.n	80013a8 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8001398:	23fd      	movs	r3, #253	@ 0xfd
 800139a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 800139e:	e003      	b.n	80013a8 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80013a0:	23ff      	movs	r3, #255	@ 0xff
 80013a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80013a6:	e000      	b.n	80013aa <bmp2_set_regs+0xd8>
        if (len > 0)
 80013a8:	bf00      	nop
    }

    return rslt;
 80013aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	372c      	adds	r7, #44	@ 0x2c
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd90      	pop	{r4, r7, pc}

080013b6 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 80013be:	23e0      	movs	r3, #224	@ 0xe0
 80013c0:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 80013c2:	23b6      	movs	r3, #182	@ 0xb6
 80013c4:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80013c6:	f107 010d 	add.w	r1, r7, #13
 80013ca:	f107 000e 	add.w	r0, r7, #14
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f7ff ff7e 	bl	80012d2 <bmp2_set_regs>
 80013d6:	4603      	mov	r3, r0
 80013d8:	73fb      	strb	r3, [r7, #15]

    return rslt;
 80013da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b084      	sub	sp, #16
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80013f0:	2300      	movs	r3, #0
 80013f2:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d02d      	beq.n	8001456 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80013fa:	f107 010c 	add.w	r1, r7, #12
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	2202      	movs	r2, #2
 8001402:	20f4      	movs	r0, #244	@ 0xf4
 8001404:	f7ff ff2d 	bl	8001262 <bmp2_get_regs>
 8001408:	4603      	mov	r3, r0
 800140a:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 800140c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d122      	bne.n	800145a <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8001414:	7b3b      	ldrb	r3, [r7, #12]
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	b2da      	uxtb	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 800141e:	7b3b      	ldrb	r3, [r7, #12]
 8001420:	109b      	asrs	r3, r3, #2
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	b2da      	uxtb	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 800142e:	7b7b      	ldrb	r3, [r7, #13]
 8001430:	095b      	lsrs	r3, r3, #5
 8001432:	b2da      	uxtb	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 8001438:	7b7b      	ldrb	r3, [r7, #13]
 800143a:	109b      	asrs	r3, r3, #2
 800143c:	b2db      	uxtb	r3, r3
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	b2da      	uxtb	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 8001448:	7b7b      	ldrb	r3, [r7, #13]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	b2da      	uxtb	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	715a      	strb	r2, [r3, #5]
 8001454:	e001      	b.n	800145a <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001456:	23ff      	movs	r3, #255	@ 0xff
 8001458:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800145a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	2000      	movs	r0, #0
 8001476:	f000 f9fd 	bl	8001874 <conf_sensor>
 800147a:	4603      	mov	r3, r0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d01b      	beq.n	80014cc <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 8001494:	f107 010e 	add.w	r1, r7, #14
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	2201      	movs	r2, #1
 800149c:	20f3      	movs	r0, #243	@ 0xf3
 800149e:	f7ff fee0 	bl	8001262 <bmp2_get_regs>
 80014a2:	4603      	mov	r3, r0
 80014a4:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 80014a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d110      	bne.n	80014d0 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 80014ae:	7bbb      	ldrb	r3, [r7, #14]
 80014b0:	10db      	asrs	r3, r3, #3
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 80014be:	7bbb      	ldrb	r3, [r7, #14]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	705a      	strb	r2, [r3, #1]
 80014ca:	e001      	b.n	80014d0 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80014cc:	23ff      	movs	r3, #255	@ 0xff
 80014ce:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
 80014e8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	68b9      	ldr	r1, [r7, #8]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 f9bf 	bl	8001874 <conf_sensor>
 80014f6:	4603      	mov	r3, r0
 80014f8:	75fb      	strb	r3, [r7, #23]

    return rslt;
 80014fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 8001510:	2300      	movs	r3, #0
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	2300      	movs	r3, #0
 8001516:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001518:	f107 0308 	add.w	r3, r7, #8
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d024      	beq.n	8001572 <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8001528:	f107 0110 	add.w	r1, r7, #16
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	2206      	movs	r2, #6
 8001530:	20f7      	movs	r0, #247	@ 0xf7
 8001532:	f7ff fe96 	bl	8001262 <bmp2_get_regs>
 8001536:	4603      	mov	r3, r0
 8001538:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 800153a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d119      	bne.n	8001576 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 8001542:	f107 0208 	add.w	r2, r7, #8
 8001546:	f107 0310 	add.w	r3, r7, #16
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f000 fab9 	bl	8001ac4 <parse_sensor_data>
 8001552:	4603      	mov	r3, r0
 8001554:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001556:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10b      	bne.n	8001576 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f80b 	bl	8001582 <bmp2_compensate_data>
 800156c:	4603      	mov	r3, r0
 800156e:	75fb      	strb	r3, [r7, #23]
 8001570:	e001      	b.n	8001576 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001572:	23ff      	movs	r3, #255	@ 0xff
 8001574:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001576:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f88a 	bl	80016a8 <null_ptr_check>
 8001594:	4603      	mov	r3, r0
 8001596:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 8001598:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d129      	bne.n	80015f4 <bmp2_compensate_data+0x72>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d026      	beq.n	80015f4 <bmp2_compensate_data+0x72>
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d023      	beq.n	80015f4 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	3308      	adds	r3, #8
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	68f9      	ldr	r1, [r7, #12]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 fabb 	bl	8001b4c <compensate_temperature>
 80015d6:	4603      	mov	r3, r0
 80015d8:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80015da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10a      	bne.n	80015f8 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	68f9      	ldr	r1, [r7, #12]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 fba5 	bl	8001d38 <compensate_pressure>
 80015ee:	4603      	mov	r3, r0
 80015f0:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 80015f2:	e001      	b.n	80015f8 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80015f4:	23ff      	movs	r3, #255	@ 0xff
 80015f6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80015f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001604:	b5b0      	push	{r4, r5, r7, lr}
 8001606:	b092      	sub	sp, #72	@ 0x48
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 8001610:	4b23      	ldr	r3, [pc, #140]	@ (80016a0 <bmp2_compute_meas_time+0x9c>)
 8001612:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001616:	461d      	mov	r5, r3
 8001618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800161a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800161c:	682b      	ldr	r3, [r5, #0]
 800161e:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 8001620:	4b20      	ldr	r3, [pc, #128]	@ (80016a4 <bmp2_compute_meas_time+0xa0>)
 8001622:	f107 0410 	add.w	r4, r7, #16
 8001626:	461d      	mov	r5, r3
 8001628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800162a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800162c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001630:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 f837 	bl	80016a8 <null_ptr_check>
 800163a:	4603      	mov	r3, r0
 800163c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 8001640:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8001644:	2b00      	cmp	r3, #0
 8001646:	d122      	bne.n	800168e <bmp2_compute_meas_time+0x8a>
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d01f      	beq.n	800168e <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	7e1b      	ldrb	r3, [r3, #24]
 8001652:	2b03      	cmp	r3, #3
 8001654:	d111      	bne.n	800167a <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	78db      	ldrb	r3, [r3, #3]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	3348      	adds	r3, #72	@ 0x48
 800165e:	443b      	add	r3, r7
 8001660:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	789b      	ldrb	r3, [r3, #2]
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	3348      	adds	r3, #72	@ 0x48
 800166c:	443b      	add	r3, r7
 800166e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001672:	441a      	add	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001678:	e00c      	b.n	8001694 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	78db      	ldrb	r3, [r3, #3]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	3348      	adds	r3, #72	@ 0x48
 8001682:	443b      	add	r3, r7
 8001684:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 800168c:	e002      	b.n	8001694 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800168e:	23ff      	movs	r3, #255	@ 0xff
 8001690:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 8001694:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8001698:	4618      	mov	r0, r3
 800169a:	3748      	adds	r7, #72	@ 0x48
 800169c:	46bd      	mov	sp, r7
 800169e:	bdb0      	pop	{r4, r5, r7, pc}
 80016a0:	0800cd44 	.word	0x0800cd44
 80016a4:	0800cd58 	.word	0x0800cd58

080016a8 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00b      	beq.n	80016ce <null_ptr_check+0x26>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d007      	beq.n	80016ce <null_ptr_check+0x26>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <null_ptr_check+0x26>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d102      	bne.n	80016d4 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 80016ce:	23ff      	movs	r3, #255	@ 0xff
 80016d0:	73fb      	strb	r3, [r7, #15]
 80016d2:	e001      	b.n	80016d8 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80016d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
 80016f4:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80016f6:	2301      	movs	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	e015      	b.n	8001728 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	441a      	add	r2, r3
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	3b01      	subs	r3, #1
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	440b      	add	r3, r1
 800170c:	7812      	ldrb	r2, [r2, #0]
 800170e:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	441a      	add	r2, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	68b9      	ldr	r1, [r7, #8]
 800171c:	440b      	add	r3, r1
 800171e:	7812      	ldrb	r2, [r2, #0]
 8001720:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d3e5      	bcc.n	80016fc <interleave_data+0x14>
    }
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	371c      	adds	r7, #28
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b08a      	sub	sp, #40	@ 0x28
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	f107 0310 	add.w	r3, r7, #16
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	611a      	str	r2, [r3, #16]
 800175a:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 800175c:	f107 010c 	add.w	r1, r7, #12
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2219      	movs	r2, #25
 8001764:	2088      	movs	r0, #136	@ 0x88
 8001766:	f7ff fd7c 	bl	8001262 <bmp2_get_regs>
 800176a:	4603      	mov	r3, r0
 800176c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMP2_OK)
 8001770:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001774:	2b00      	cmp	r3, #0
 8001776:	d177      	bne.n	8001868 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 8001778:	7b7b      	ldrb	r3, [r7, #13]
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	b21a      	sxth	r2, r3
 800177e:	7b3b      	ldrb	r3, [r7, #12]
 8001780:	b21b      	sxth	r3, r3
 8001782:	4313      	orrs	r3, r2
 8001784:	b21b      	sxth	r3, r3
 8001786:	b29a      	uxth	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	b21a      	sxth	r2, r3
 8001792:	7bbb      	ldrb	r3, [r7, #14]
 8001794:	b21b      	sxth	r3, r3
 8001796:	4313      	orrs	r3, r2
 8001798:	b21a      	sxth	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 800179e:	7c7b      	ldrb	r3, [r7, #17]
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	7c3b      	ldrb	r3, [r7, #16]
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	4313      	orrs	r3, r2
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 80017b0:	7cfb      	ldrb	r3, [r7, #19]
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	b21a      	sxth	r2, r3
 80017b6:	7cbb      	ldrb	r3, [r7, #18]
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	4313      	orrs	r3, r2
 80017bc:	b21b      	sxth	r3, r3
 80017be:	b29a      	uxth	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	845a      	strh	r2, [r3, #34]	@ 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 80017c4:	7d7b      	ldrb	r3, [r7, #21]
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	7d3b      	ldrb	r3, [r7, #20]
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	4313      	orrs	r3, r2
 80017d0:	b21a      	sxth	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	b21a      	sxth	r2, r3
 80017dc:	7dbb      	ldrb	r3, [r7, #22]
 80017de:	b21b      	sxth	r3, r3
 80017e0:	4313      	orrs	r3, r2
 80017e2:	b21a      	sxth	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 80017e8:	7e7b      	ldrb	r3, [r7, #25]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	b21a      	sxth	r2, r3
 80017ee:	7e3b      	ldrb	r3, [r7, #24]
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	4313      	orrs	r3, r2
 80017f4:	b21a      	sxth	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 80017fa:	7efb      	ldrb	r3, [r7, #27]
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	b21a      	sxth	r2, r3
 8001800:	7ebb      	ldrb	r3, [r7, #26]
 8001802:	b21b      	sxth	r3, r3
 8001804:	4313      	orrs	r3, r2
 8001806:	b21a      	sxth	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 800180c:	7f7b      	ldrb	r3, [r7, #29]
 800180e:	021b      	lsls	r3, r3, #8
 8001810:	b21a      	sxth	r2, r3
 8001812:	7f3b      	ldrb	r3, [r7, #28]
 8001814:	b21b      	sxth	r3, r3
 8001816:	4313      	orrs	r3, r2
 8001818:	b21a      	sxth	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 800181e:	7ffb      	ldrb	r3, [r7, #31]
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	b21a      	sxth	r2, r3
 8001824:	7fbb      	ldrb	r3, [r7, #30]
 8001826:	b21b      	sxth	r3, r3
 8001828:	4313      	orrs	r3, r2
 800182a:	b21a      	sxth	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	85da      	strh	r2, [r3, #46]	@ 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8001830:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	b21a      	sxth	r2, r3
 8001838:	f897 3020 	ldrb.w	r3, [r7, #32]
 800183c:	b21b      	sxth	r3, r3
 800183e:	4313      	orrs	r3, r2
 8001840:	b21a      	sxth	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 8001846:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	b21a      	sxth	r2, r3
 800184e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001852:	b21b      	sxth	r3, r3
 8001854:	4313      	orrs	r3, r2
 8001856:	b21a      	sxth	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 800185c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001860:	b25a      	sxtb	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    return rslt;
 8001868:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800186c:	4618      	mov	r0, r3
 800186e:	3728      	adds	r7, #40	@ 0x28
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
 8001880:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001882:	2300      	movs	r3, #0
 8001884:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 8001886:	f24f 53f4 	movw	r3, #62964	@ 0xf5f4
 800188a:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d074      	beq.n	800197c <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001892:	f107 0114 	add.w	r1, r7, #20
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2202      	movs	r2, #2
 800189a:	20f4      	movs	r0, #244	@ 0xf4
 800189c:	f7ff fce1 	bl	8001262 <bmp2_get_regs>
 80018a0:	4603      	mov	r3, r0
 80018a2:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80018a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d169      	bne.n	8001980 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff fd82 	bl	80013b6 <bmp2_soft_reset>
 80018b2:	4603      	mov	r3, r0
 80018b4:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80018b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d160      	bne.n	8001980 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	68b9      	ldr	r1, [r7, #8]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 f861 	bl	800198c <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 80018ca:	7d7b      	ldrb	r3, [r7, #21]
 80018cc:	b25b      	sxtb	r3, r3
 80018ce:	f003 031f 	and.w	r3, r3, #31
 80018d2:	b25a      	sxtb	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	789b      	ldrb	r3, [r3, #2]
 80018d8:	015b      	lsls	r3, r3, #5
 80018da:	b25b      	sxtb	r3, r3
 80018dc:	4313      	orrs	r3, r2
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 80018e4:	7d7b      	ldrb	r3, [r7, #21]
 80018e6:	b25b      	sxtb	r3, r3
 80018e8:	f023 031c 	bic.w	r3, r3, #28
 80018ec:	b25a      	sxtb	r2, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	791b      	ldrb	r3, [r3, #4]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	f003 031c 	and.w	r3, r3, #28
 80018fa:	b25b      	sxtb	r3, r3
 80018fc:	4313      	orrs	r3, r2
 80018fe:	b25b      	sxtb	r3, r3
 8001900:	b2db      	uxtb	r3, r3
 8001902:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001904:	7d7b      	ldrb	r3, [r7, #21]
 8001906:	b25b      	sxtb	r3, r3
 8001908:	f023 0301 	bic.w	r3, r3, #1
 800190c:	b25a      	sxtb	r2, r3
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	795b      	ldrb	r3, [r3, #5]
 8001912:	b25b      	sxtb	r3, r3
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	b25b      	sxtb	r3, r3
 800191a:	4313      	orrs	r3, r2
 800191c:	b25b      	sxtb	r3, r3
 800191e:	b2db      	uxtb	r3, r3
 8001920:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 8001922:	f107 0114 	add.w	r1, r7, #20
 8001926:	f107 0010 	add.w	r0, r7, #16
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2202      	movs	r2, #2
 800192e:	f7ff fcd0 	bl	80012d2 <bmp2_set_regs>
 8001932:	4603      	mov	r3, r0
 8001934:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 8001936:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d120      	bne.n	8001980 <conf_sensor+0x10c>
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d01d      	beq.n	8001980 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7bfa      	ldrb	r2, [r7, #15]
 8001948:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 800194a:	7d3b      	ldrb	r3, [r7, #20]
 800194c:	b25b      	sxtb	r3, r3
 800194e:	f023 0303 	bic.w	r3, r3, #3
 8001952:	b25a      	sxtb	r2, r3
 8001954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	b25b      	sxtb	r3, r3
 800195e:	4313      	orrs	r3, r2
 8001960:	b25b      	sxtb	r3, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 8001966:	f107 0114 	add.w	r1, r7, #20
 800196a:	f107 0010 	add.w	r0, r7, #16
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f7ff fcae 	bl	80012d2 <bmp2_set_regs>
 8001976:	4603      	mov	r3, r0
 8001978:	75fb      	strb	r3, [r7, #23]
 800197a:	e001      	b.n	8001980 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800197c:	23ff      	movs	r3, #255	@ 0xff
 800197e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001980:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	78db      	ldrb	r3, [r3, #3]
 800199a:	2b04      	cmp	r3, #4
 800199c:	f200 808b 	bhi.w	8001ab6 <set_os_mode+0x12a>
 80019a0:	a201      	add	r2, pc, #4	@ (adr r2, 80019a8 <set_os_mode+0x1c>)
 80019a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a6:	bf00      	nop
 80019a8:	080019bd 	.word	0x080019bd
 80019ac:	080019ef 	.word	0x080019ef
 80019b0:	08001a21 	.word	0x08001a21
 80019b4:	08001a53 	.word	0x08001a53
 80019b8:	08001a85 	.word	0x08001a85
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	b25b      	sxtb	r3, r3
 80019c2:	f003 031f 	and.w	r3, r3, #31
 80019c6:	b25b      	sxtb	r3, r3
 80019c8:	f043 0320 	orr.w	r3, r3, #32
 80019cc:	b25b      	sxtb	r3, r3
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	f023 031c 	bic.w	r3, r3, #28
 80019de:	b25b      	sxtb	r3, r3
 80019e0:	f043 0304 	orr.w	r3, r3, #4
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	701a      	strb	r2, [r3, #0]
            break;
 80019ec:	e064      	b.n	8001ab8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	b25b      	sxtb	r3, r3
 80019f4:	f003 031f 	and.w	r3, r3, #31
 80019f8:	b25b      	sxtb	r3, r3
 80019fa:	f043 0320 	orr.w	r3, r3, #32
 80019fe:	b25b      	sxtb	r3, r3
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	b25b      	sxtb	r3, r3
 8001a0c:	f023 031c 	bic.w	r3, r3, #28
 8001a10:	b25b      	sxtb	r3, r3
 8001a12:	f043 0308 	orr.w	r3, r3, #8
 8001a16:	b25b      	sxtb	r3, r3
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	701a      	strb	r2, [r3, #0]
            break;
 8001a1e:	e04b      	b.n	8001ab8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b25b      	sxtb	r3, r3
 8001a26:	f003 031f 	and.w	r3, r3, #31
 8001a2a:	b25b      	sxtb	r3, r3
 8001a2c:	f043 0320 	orr.w	r3, r3, #32
 8001a30:	b25b      	sxtb	r3, r3
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	f023 031c 	bic.w	r3, r3, #28
 8001a42:	b25b      	sxtb	r3, r3
 8001a44:	f043 030c 	orr.w	r3, r3, #12
 8001a48:	b25b      	sxtb	r3, r3
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	701a      	strb	r2, [r3, #0]
            break;
 8001a50:	e032      	b.n	8001ab8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	b25b      	sxtb	r3, r3
 8001a58:	f003 031f 	and.w	r3, r3, #31
 8001a5c:	b25b      	sxtb	r3, r3
 8001a5e:	f043 0320 	orr.w	r3, r3, #32
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	b25b      	sxtb	r3, r3
 8001a70:	f023 031c 	bic.w	r3, r3, #28
 8001a74:	b25b      	sxtb	r3, r3
 8001a76:	f043 0310 	orr.w	r3, r3, #16
 8001a7a:	b25b      	sxtb	r3, r3
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	701a      	strb	r2, [r3, #0]
            break;
 8001a82:	e019      	b.n	8001ab8 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	b25b      	sxtb	r3, r3
 8001a8a:	f003 031f 	and.w	r3, r3, #31
 8001a8e:	b25b      	sxtb	r3, r3
 8001a90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	b25b      	sxtb	r3, r3
 8001aa2:	f023 031c 	bic.w	r3, r3, #28
 8001aa6:	b25b      	sxtb	r3, r3
 8001aa8:	f043 0314 	orr.w	r3, r3, #20
 8001aac:	b25b      	sxtb	r3, r3
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	701a      	strb	r2, [r3, #0]
            break;
 8001ab4:	e000      	b.n	8001ab8 <set_os_mode+0x12c>
        default:
            break;
 8001ab6:	bf00      	nop
    }
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	031b      	lsls	r3, r3, #12
 8001ad4:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	091b      	lsrs	r3, r3, #4
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	431a      	orrs	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	431a      	orrs	r2, r3
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3303      	adds	r3, #3
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	031b      	lsls	r3, r3, #12
 8001b02:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3304      	adds	r3, #4
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3305      	adds	r3, #5
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	461a      	mov	r2, r3
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4619      	mov	r1, r3
 8001b34:	4610      	mov	r0, r2
 8001b36:	f000 fae3 	bl	8002100 <st_check_boundaries>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	72fb      	strb	r3, [r7, #11]

    return rslt;
 8001b3e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001b4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b50:	b08c      	sub	sp, #48	@ 0x30
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fd0d 	bl	8000584 <__aeabi_i2d>
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	4b6c      	ldr	r3, [pc, #432]	@ (8001d20 <compensate_temperature+0x1d4>)
 8001b70:	f7fe fe9c 	bl	80008ac <__aeabi_ddiv>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4614      	mov	r4, r2
 8001b7a:	461d      	mov	r5, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	8b9b      	ldrh	r3, [r3, #28]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fcef 	bl	8000564 <__aeabi_ui2d>
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	4b66      	ldr	r3, [pc, #408]	@ (8001d24 <compensate_temperature+0x1d8>)
 8001b8c:	f7fe fe8e 	bl	80008ac <__aeabi_ddiv>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4620      	mov	r0, r4
 8001b96:	4629      	mov	r1, r5
 8001b98:	f7fe fba6 	bl	80002e8 <__aeabi_dsub>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4614      	mov	r4, r2
 8001ba2:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fcea 	bl	8000584 <__aeabi_i2d>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	f7fe fd4e 	bl	8000658 <__aeabi_dmul>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fcdb 	bl	8000584 <__aeabi_i2d>
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001bd6:	f7fe fe69 	bl	80008ac <__aeabi_ddiv>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4614      	mov	r4, r2
 8001be0:	461d      	mov	r5, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	8b9b      	ldrh	r3, [r3, #28]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fcbc 	bl	8000564 <__aeabi_ui2d>
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	4b4d      	ldr	r3, [pc, #308]	@ (8001d28 <compensate_temperature+0x1dc>)
 8001bf2:	f7fe fe5b 	bl	80008ac <__aeabi_ddiv>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	f7fe fb73 	bl	80002e8 <__aeabi_dsub>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4614      	mov	r4, r2
 8001c08:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fcb8 	bl	8000584 <__aeabi_i2d>
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001c1c:	f7fe fe46 	bl	80008ac <__aeabi_ddiv>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4690      	mov	r8, r2
 8001c26:	4699      	mov	r9, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	8b9b      	ldrh	r3, [r3, #28]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fc99 	bl	8000564 <__aeabi_ui2d>
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	4b3c      	ldr	r3, [pc, #240]	@ (8001d28 <compensate_temperature+0x1dc>)
 8001c38:	f7fe fe38 	bl	80008ac <__aeabi_ddiv>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4640      	mov	r0, r8
 8001c42:	4649      	mov	r1, r9
 8001c44:	f7fe fb50 	bl	80002e8 <__aeabi_dsub>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	4629      	mov	r1, r5
 8001c50:	f7fe fd02 	bl	8000658 <__aeabi_dmul>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4614      	mov	r4, r2
 8001c5a:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc8e 	bl	8000584 <__aeabi_i2d>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
    var2 =
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	4629      	mov	r1, r5
 8001c70:	f7fe fcf2 	bl	8000658 <__aeabi_dmul>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001c7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c84:	f7fe fb32 	bl	80002ec <__adddf3>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f7fe ff7c 	bl	8000b8c <__aeabi_d2iz>
 8001c94:	4602      	mov	r2, r0
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	639a      	str	r2, [r3, #56]	@ 0x38
    temperature = (var1 + var2) / 5120.0;
 8001c9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ca2:	f7fe fb23 	bl	80002ec <__adddf3>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d2c <compensate_temperature+0x1e0>)
 8001cb4:	f7fe fdfa 	bl	80008ac <__aeabi_ddiv>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d30 <compensate_temperature+0x1e4>)
 8001cc6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cca:	f7fe ff37 	bl	8000b3c <__aeabi_dcmplt>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d007      	beq.n	8001ce4 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	4b15      	ldr	r3, [pc, #84]	@ (8001d30 <compensate_temperature+0x1e4>)
 8001cda:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <compensate_temperature+0x1e8>)
 8001cea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cee:	f7fe ff43 	bl	8000b78 <__aeabi_dcmpgt>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d007      	beq.n	8001d08 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8001d34 <compensate_temperature+0x1e8>)
 8001cfe:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    (*comp_temperature) = temperature;
 8001d08:	68f9      	ldr	r1, [r7, #12]
 8001d0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d0e:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001d12:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3730      	adds	r7, #48	@ 0x30
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d20:	40d00000 	.word	0x40d00000
 8001d24:	40900000 	.word	0x40900000
 8001d28:	40c00000 	.word	0x40c00000
 8001d2c:	40b40000 	.word	0x40b40000
 8001d30:	c0440000 	.word	0xc0440000
 8001d34:	40554000 	.word	0x40554000

08001d38 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001d38:	b5b0      	push	{r4, r5, r7, lr}
 8001d3a:	b08c      	sub	sp, #48	@ 0x30
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fc12 	bl	8000584 <__aeabi_i2d>
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d68:	f7fe fda0 	bl	80008ac <__aeabi_ddiv>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	4bcb      	ldr	r3, [pc, #812]	@ (80020a8 <compensate_pressure+0x370>)
 8001d7a:	f7fe fab5 	bl	80002e8 <__aeabi_dsub>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001d86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d8e:	f7fe fc63 	bl	8000658 <__aeabi_dmul>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4614      	mov	r4, r2
 8001d98:	461d      	mov	r5, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fbef 	bl	8000584 <__aeabi_i2d>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4620      	mov	r0, r4
 8001dac:	4629      	mov	r1, r5
 8001dae:	f7fe fc53 	bl	8000658 <__aeabi_dmul>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4610      	mov	r0, r2
 8001db8:	4619      	mov	r1, r3
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	4bbb      	ldr	r3, [pc, #748]	@ (80020ac <compensate_pressure+0x374>)
 8001dc0:	f7fe fd74 	bl	80008ac <__aeabi_ddiv>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fbd6 	bl	8000584 <__aeabi_i2d>
 8001dd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ddc:	f7fe fc3c 	bl	8000658 <__aeabi_dmul>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	f7fe fa7e 	bl	80002ec <__adddf3>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001df8:	f7fe fa78 	bl	80002ec <__adddf3>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	4ba9      	ldr	r3, [pc, #676]	@ (80020b0 <compensate_pressure+0x378>)
 8001e0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e0e:	f7fe fd4d 	bl	80008ac <__aeabi_ddiv>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4614      	mov	r4, r2
 8001e18:	461d      	mov	r5, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fbaf 	bl	8000584 <__aeabi_i2d>
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	4ba2      	ldr	r3, [pc, #648]	@ (80020b4 <compensate_pressure+0x37c>)
 8001e2c:	f7fe fc14 	bl	8000658 <__aeabi_dmul>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4620      	mov	r0, r4
 8001e36:	4629      	mov	r1, r5
 8001e38:	f7fe fa58 	bl	80002ec <__adddf3>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb9a 	bl	8000584 <__aeabi_i2d>
 8001e50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e54:	f7fe fc00 	bl	8000658 <__aeabi_dmul>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4619      	mov	r1, r3
 8001e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e64:	f7fe fbf8 	bl	8000658 <__aeabi_dmul>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	4b90      	ldr	r3, [pc, #576]	@ (80020b8 <compensate_pressure+0x380>)
 8001e76:	f7fe fd19 	bl	80008ac <__aeabi_ddiv>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4614      	mov	r4, r2
 8001e80:	461d      	mov	r5, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb7b 	bl	8000584 <__aeabi_i2d>
 8001e8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e92:	f7fe fbe1 	bl	8000658 <__aeabi_dmul>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	4629      	mov	r1, r5
 8001e9e:	f7fe fa25 	bl	80002ec <__adddf3>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	4b82      	ldr	r3, [pc, #520]	@ (80020b8 <compensate_pressure+0x380>)
 8001eb0:	f7fe fcfc 	bl	80008ac <__aeabi_ddiv>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	4b7a      	ldr	r3, [pc, #488]	@ (80020ac <compensate_pressure+0x374>)
 8001ec2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ec6:	f7fe fcf1 	bl	80008ac <__aeabi_ddiv>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	4b79      	ldr	r3, [pc, #484]	@ (80020bc <compensate_pressure+0x384>)
 8001ed8:	f7fe fa08 	bl	80002ec <__adddf3>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4614      	mov	r4, r2
 8001ee2:	461d      	mov	r5, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fb3b 	bl	8000564 <__aeabi_ui2d>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	4629      	mov	r1, r5
 8001ef6:	f7fe fbaf 	bl	8000658 <__aeabi_dmul>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f0e:	f7fe fe15 	bl	8000b3c <__aeabi_dcmplt>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10b      	bne.n	8001f30 <compensate_pressure+0x1f8>
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f24:	f7fe fe28 	bl	8000b78 <__aeabi_dcmpgt>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 80de 	beq.w	80020ec <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe fb15 	bl	8000564 <__aeabi_ui2d>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	f04f 0000 	mov.w	r0, #0
 8001f42:	495f      	ldr	r1, [pc, #380]	@ (80020c0 <compensate_pressure+0x388>)
 8001f44:	f7fe f9d0 	bl	80002e8 <__aeabi_dsub>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	4b5b      	ldr	r3, [pc, #364]	@ (80020c4 <compensate_pressure+0x38c>)
 8001f56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f5a:	f7fe fca7 	bl	80008ac <__aeabi_ddiv>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f66:	f7fe f9bf 	bl	80002e8 <__aeabi_dsub>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4619      	mov	r1, r3
 8001f72:	a347      	add	r3, pc, #284	@ (adr r3, 8002090 <compensate_pressure+0x358>)
 8001f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f78:	f7fe fb6e 	bl	8000658 <__aeabi_dmul>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f88:	f7fe fc90 	bl	80008ac <__aeabi_ddiv>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe faf2 	bl	8000584 <__aeabi_i2d>
 8001fa0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fa4:	f7fe fb58 	bl	8000658 <__aeabi_dmul>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4610      	mov	r0, r2
 8001fae:	4619      	mov	r1, r3
 8001fb0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fb4:	f7fe fb50 	bl	8000658 <__aeabi_dmul>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	4b40      	ldr	r3, [pc, #256]	@ (80020c8 <compensate_pressure+0x390>)
 8001fc6:	f7fe fc71 	bl	80008ac <__aeabi_ddiv>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fad3 	bl	8000584 <__aeabi_i2d>
 8001fde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fe2:	f7fe fb39 	bl	8000658 <__aeabi_dmul>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	4b2e      	ldr	r3, [pc, #184]	@ (80020ac <compensate_pressure+0x374>)
 8001ff4:	f7fe fc5a 	bl	80008ac <__aeabi_ddiv>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8002000:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002004:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002008:	f7fe f970 	bl	80002ec <__adddf3>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4614      	mov	r4, r2
 8002012:	461d      	mov	r5, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fab2 	bl	8000584 <__aeabi_i2d>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4620      	mov	r0, r4
 8002026:	4629      	mov	r1, r5
 8002028:	f7fe f960 	bl	80002ec <__adddf3>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	4b24      	ldr	r3, [pc, #144]	@ (80020cc <compensate_pressure+0x394>)
 800203a:	f7fe fc37 	bl	80008ac <__aeabi_ddiv>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002046:	f7fe f951 	bl	80002ec <__adddf3>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8002052:	a311      	add	r3, pc, #68	@ (adr r3, 8002098 <compensate_pressure+0x360>)
 8002054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002058:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800205c:	f7fe fd6e 	bl	8000b3c <__aeabi_dcmplt>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8002066:	a30c      	add	r3, pc, #48	@ (adr r3, 8002098 <compensate_pressure+0x360>)
 8002068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206c:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8002070:	2303      	movs	r3, #3
 8002072:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8002076:	a30a      	add	r3, pc, #40	@ (adr r3, 80020a0 <compensate_pressure+0x368>)
 8002078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002080:	f7fe fd7a 	bl	8000b78 <__aeabi_dcmpgt>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	e022      	b.n	80020d0 <compensate_pressure+0x398>
 800208a:	bf00      	nop
 800208c:	f3af 8000 	nop.w
 8002090:	00000000 	.word	0x00000000
 8002094:	40b86a00 	.word	0x40b86a00
 8002098:	00000000 	.word	0x00000000
 800209c:	40dd4c00 	.word	0x40dd4c00
 80020a0:	00000000 	.word	0x00000000
 80020a4:	40fadb00 	.word	0x40fadb00
 80020a8:	40ef4000 	.word	0x40ef4000
 80020ac:	40e00000 	.word	0x40e00000
 80020b0:	40100000 	.word	0x40100000
 80020b4:	40f00000 	.word	0x40f00000
 80020b8:	41200000 	.word	0x41200000
 80020bc:	3ff00000 	.word	0x3ff00000
 80020c0:	41300000 	.word	0x41300000
 80020c4:	40b00000 	.word	0x40b00000
 80020c8:	41e00000 	.word	0x41e00000
 80020cc:	40300000 	.word	0x40300000
 80020d0:	d007      	beq.n	80020e2 <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 80020d2:	a309      	add	r3, pc, #36	@ (adr r3, 80020f8 <compensate_pressure+0x3c0>)
 80020d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d8:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 80020dc:	2304      	movs	r3, #4
 80020de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        (*comp_pressure) = pressure;
 80020e2:	68f9      	ldr	r1, [r7, #12]
 80020e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020e8:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 80020ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3730      	adds	r7, #48	@ 0x30
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bdb0      	pop	{r4, r5, r7, pc}
 80020f8:	00000000 	.word	0x00000000
 80020fc:	40fadb00 	.word	0x40fadb00

08002100 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	db03      	blt.n	800211c <st_check_boundaries+0x1c>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	4a1c      	ldr	r2, [pc, #112]	@ (8002188 <st_check_boundaries+0x88>)
 8002118:	4293      	cmp	r3, r2
 800211a:	dd09      	ble.n	8002130 <st_check_boundaries+0x30>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	db06      	blt.n	8002130 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a18      	ldr	r2, [pc, #96]	@ (8002188 <st_check_boundaries+0x88>)
 8002126:	4293      	cmp	r3, r2
 8002128:	dc02      	bgt.n	8002130 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 800212a:	23fa      	movs	r3, #250	@ 0xfa
 800212c:	73fb      	strb	r3, [r7, #15]
 800212e:	e023      	b.n	8002178 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	db03      	blt.n	800213e <st_check_boundaries+0x3e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a13      	ldr	r2, [pc, #76]	@ (8002188 <st_check_boundaries+0x88>)
 800213a:	4293      	cmp	r3, r2
 800213c:	dd09      	ble.n	8002152 <st_check_boundaries+0x52>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db06      	blt.n	8002152 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	4a10      	ldr	r2, [pc, #64]	@ (8002188 <st_check_boundaries+0x88>)
 8002148:	4293      	cmp	r3, r2
 800214a:	dc02      	bgt.n	8002152 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 800214c:	23fb      	movs	r3, #251	@ 0xfb
 800214e:	73fb      	strb	r3, [r7, #15]
 8002150:	e012      	b.n	8002178 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	db03      	blt.n	8002160 <st_check_boundaries+0x60>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	4a0b      	ldr	r2, [pc, #44]	@ (8002188 <st_check_boundaries+0x88>)
 800215c:	4293      	cmp	r3, r2
 800215e:	dd09      	ble.n	8002174 <st_check_boundaries+0x74>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	db03      	blt.n	800216e <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a07      	ldr	r2, [pc, #28]	@ (8002188 <st_check_boundaries+0x88>)
 800216a:	4293      	cmp	r3, r2
 800216c:	dd02      	ble.n	8002174 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 800216e:	23f9      	movs	r3, #249	@ 0xf9
 8002170:	73fb      	strb	r3, [r7, #15]
 8002172:	e001      	b.n	8002178 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002178:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	000ffff0 	.word	0x000ffff0

0800218c <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff f839 	bl	800120c <bmp2_init>
 800219a:	4603      	mov	r3, r0
 800219c:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 800219e:	f107 0308 	add.w	r3, r7, #8
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff f91e 	bl	80013e6 <bmp2_get_config>
 80021aa:	4603      	mov	r3, r0
 80021ac:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 80021ae:	2303      	movs	r3, #3
 80021b0:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 80021b2:	2300      	movs	r3, #0
 80021b4:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 80021b6:	2303      	movs	r3, #3
 80021b8:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 80021ba:	f107 0308 	add.w	r3, r7, #8
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff f950 	bl	8001466 <bmp2_set_config>
 80021c6:	4603      	mov	r3, r0
 80021c8:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 80021ca:	f107 0308 	add.w	r3, r7, #8
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4619      	mov	r1, r3
 80021d2:	2003      	movs	r0, #3
 80021d4:	f7ff f982 	bl	80014dc <bmp2_set_power_mode>
 80021d8:	4603      	mov	r3, r0
 80021da:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 80021dc:	f107 0108 	add.w	r1, r7, #8
 80021e0:	f107 0310 	add.w	r3, r7, #16
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fa0c 	bl	8001604 <bmp2_compute_meas_time>
 80021ec:	4603      	mov	r3, r0
 80021ee:	75fb      	strb	r3, [r7, #23]

  return rslt;
 80021f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	4603      	mov	r3, r0
 800220a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002210:	2300      	movs	r3, #0
 8002212:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	6858      	ldr	r0, [r3, #4]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	891b      	ldrh	r3, [r3, #8]
 8002220:	2200      	movs	r2, #0
 8002222:	4619      	mov	r1, r3
 8002224:	f004 f910 	bl	8006448 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	f107 010f 	add.w	r1, r7, #15
 8002230:	2305      	movs	r3, #5
 8002232:	2201      	movs	r2, #1
 8002234:	f006 f9cd 	bl	80085d2 <HAL_SPI_Transmit>
 8002238:	4603      	mov	r3, r0
 800223a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	b29a      	uxth	r2, r3
 8002244:	2305      	movs	r3, #5
 8002246:	68b9      	ldr	r1, [r7, #8]
 8002248:	f006 fb31 	bl	80088ae <HAL_SPI_Receive>
 800224c:	4603      	mov	r3, r0
 800224e:	461a      	mov	r2, r3
 8002250:	7dbb      	ldrb	r3, [r7, #22]
 8002252:	4413      	add	r3, r2
 8002254:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	6858      	ldr	r0, [r3, #4]
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	891b      	ldrh	r3, [r3, #8]
 800225e:	2201      	movs	r2, #1
 8002260:	4619      	mov	r1, r3
 8002262:	f004 f8f1 	bl	8006448 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002266:	7dbb      	ldrb	r3, [r7, #22]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <bmp2_spi_read+0x74>
    iError = -1;
 800226c:	23ff      	movs	r3, #255	@ 0xff
 800226e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002270:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	4603      	mov	r3, r0
 800228a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002290:	2300      	movs	r3, #0
 8002292:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	6858      	ldr	r0, [r3, #4]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	891b      	ldrh	r3, [r3, #8]
 80022a0:	2200      	movs	r2, #0
 80022a2:	4619      	mov	r1, r3
 80022a4:	f004 f8d0 	bl	8006448 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	f107 010f 	add.w	r1, r7, #15
 80022b0:	2305      	movs	r3, #5
 80022b2:	2201      	movs	r2, #1
 80022b4:	f006 f98d 	bl	80085d2 <HAL_SPI_Transmit>
 80022b8:	4603      	mov	r3, r0
 80022ba:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	2305      	movs	r3, #5
 80022c6:	68b9      	ldr	r1, [r7, #8]
 80022c8:	f006 f983 	bl	80085d2 <HAL_SPI_Transmit>
 80022cc:	4603      	mov	r3, r0
 80022ce:	461a      	mov	r2, r3
 80022d0:	7dbb      	ldrb	r3, [r7, #22]
 80022d2:	4413      	add	r3, r2
 80022d4:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	6858      	ldr	r0, [r3, #4]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	891b      	ldrh	r3, [r3, #8]
 80022de:	2201      	movs	r2, #1
 80022e0:	4619      	mov	r1, r3
 80022e2:	f004 f8b1 	bl	8006448 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 80022e6:	7dbb      	ldrb	r3, [r7, #22]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <bmp2_spi_write+0x74>
    iError = -1;
 80022ec:	23ff      	movs	r3, #255	@ 0xff
 80022ee:	75fb      	strb	r3, [r7, #23]

  return iError;
 80022f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a05      	ldr	r2, [pc, #20]	@ (8002320 <bmp2_delay_us+0x24>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	099b      	lsrs	r3, r3, #6
 8002310:	4618      	mov	r0, r3
 8002312:	f003 fd0d 	bl	8005d30 <HAL_Delay>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	10624dd3 	.word	0x10624dd3

08002324 <BMP2_ReadData>:
 *  @retval 0 -> Success.
 *  @retval <0 -> Failure.
 *
 */
int8_t BMP2_ReadData(struct bmp2_dev *dev, double* press, double* temp)
{
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b08b      	sub	sp, #44	@ 0x2c
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 8002330:	23ff      	movs	r3, #255	@ 0xff
 8002332:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  struct bmp2_status status;
  struct bmp2_data comp_data;
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	899b      	ldrh	r3, [r3, #12]
 800233c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 8002340:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002344:	68f9      	ldr	r1, [r7, #12]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff f89c 	bl	8001484 <bmp2_get_status>
 800234c:	4603      	mov	r3, r0
 800234e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 8002352:	f107 0310 	add.w	r3, r7, #16
 8002356:	68f9      	ldr	r1, [r7, #12]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff f8d4 	bl	8001506 <bmp2_get_sensor_data>
 800235e:	4603      	mov	r3, r0
 8002360:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    *temp = comp_data.temperature;
 8002364:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	e9c1 2300 	strd	r2, r3, [r1]
    *press = comp_data.pressure / 100.0;
 800236e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	4b1c      	ldr	r3, [pc, #112]	@ (80023e8 <BMP2_ReadData+0xc4>)
 8002378:	f7fe fa98 	bl	80008ac <__aeabi_ddiv>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	e9c1 2300 	strd	r2, r3, [r1]
    try--;
 8002386:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800238a:	b2db      	uxtb	r3, r3
 800238c:	3b01      	subs	r3, #1
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 8002394:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <BMP2_ReadData+0x80>
 800239c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	dccd      	bgt.n	8002340 <BMP2_ReadData+0x1c>

  /* Save reading result in sensor handler */
  BMP2_GET_PRESS(dev) = *press;
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023aa:	68f9      	ldr	r1, [r7, #12]
 80023ac:	684c      	ldr	r4, [r1, #4]
 80023ae:	4610      	mov	r0, r2
 80023b0:	4619      	mov	r1, r3
 80023b2:	f7fe fc33 	bl	8000c1c <__aeabi_d2f>
 80023b6:	4603      	mov	r3, r0
 80023b8:	6163      	str	r3, [r4, #20]
  BMP2_GET_TEMP(dev) = *temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c0:	68f9      	ldr	r1, [r7, #12]
 80023c2:	684c      	ldr	r4, [r1, #4]
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	f7fe fc28 	bl	8000c1c <__aeabi_d2f>
 80023cc:	4603      	mov	r3, r0
 80023ce:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80023d8:	729a      	strb	r2, [r3, #10]

  return rslt;
 80023da:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
}
 80023de:	4618      	mov	r0, r3
 80023e0:	372c      	adds	r7, #44	@ 0x2c
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd90      	pop	{r4, r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40590000 	.word	0x40590000

080023ec <MX_GPIO_Init>:
        * EXTI
     PD8   ------> USART3_TX
     PD9   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08e      	sub	sp, #56	@ 0x38
 80023f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	60da      	str	r2, [r3, #12]
 8002400:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002402:	4b82      	ldr	r3, [pc, #520]	@ (800260c <MX_GPIO_Init+0x220>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002406:	4a81      	ldr	r2, [pc, #516]	@ (800260c <MX_GPIO_Init+0x220>)
 8002408:	f043 0310 	orr.w	r3, r3, #16
 800240c:	6313      	str	r3, [r2, #48]	@ 0x30
 800240e:	4b7f      	ldr	r3, [pc, #508]	@ (800260c <MX_GPIO_Init+0x220>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002412:	f003 0310 	and.w	r3, r3, #16
 8002416:	623b      	str	r3, [r7, #32]
 8002418:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800241a:	4b7c      	ldr	r3, [pc, #496]	@ (800260c <MX_GPIO_Init+0x220>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	4a7b      	ldr	r2, [pc, #492]	@ (800260c <MX_GPIO_Init+0x220>)
 8002420:	f043 0304 	orr.w	r3, r3, #4
 8002424:	6313      	str	r3, [r2, #48]	@ 0x30
 8002426:	4b79      	ldr	r3, [pc, #484]	@ (800260c <MX_GPIO_Init+0x220>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002432:	4b76      	ldr	r3, [pc, #472]	@ (800260c <MX_GPIO_Init+0x220>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	4a75      	ldr	r2, [pc, #468]	@ (800260c <MX_GPIO_Init+0x220>)
 8002438:	f043 0320 	orr.w	r3, r3, #32
 800243c:	6313      	str	r3, [r2, #48]	@ 0x30
 800243e:	4b73      	ldr	r3, [pc, #460]	@ (800260c <MX_GPIO_Init+0x220>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	61bb      	str	r3, [r7, #24]
 8002448:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800244a:	4b70      	ldr	r3, [pc, #448]	@ (800260c <MX_GPIO_Init+0x220>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	4a6f      	ldr	r2, [pc, #444]	@ (800260c <MX_GPIO_Init+0x220>)
 8002450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002454:	6313      	str	r3, [r2, #48]	@ 0x30
 8002456:	4b6d      	ldr	r3, [pc, #436]	@ (800260c <MX_GPIO_Init+0x220>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002462:	4b6a      	ldr	r3, [pc, #424]	@ (800260c <MX_GPIO_Init+0x220>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002466:	4a69      	ldr	r2, [pc, #420]	@ (800260c <MX_GPIO_Init+0x220>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6313      	str	r3, [r2, #48]	@ 0x30
 800246e:	4b67      	ldr	r3, [pc, #412]	@ (800260c <MX_GPIO_Init+0x220>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800247a:	4b64      	ldr	r3, [pc, #400]	@ (800260c <MX_GPIO_Init+0x220>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247e:	4a63      	ldr	r2, [pc, #396]	@ (800260c <MX_GPIO_Init+0x220>)
 8002480:	f043 0302 	orr.w	r3, r3, #2
 8002484:	6313      	str	r3, [r2, #48]	@ 0x30
 8002486:	4b61      	ldr	r3, [pc, #388]	@ (800260c <MX_GPIO_Init+0x220>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002492:	4b5e      	ldr	r3, [pc, #376]	@ (800260c <MX_GPIO_Init+0x220>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	4a5d      	ldr	r2, [pc, #372]	@ (800260c <MX_GPIO_Init+0x220>)
 8002498:	f043 0308 	orr.w	r3, r3, #8
 800249c:	6313      	str	r3, [r2, #48]	@ 0x30
 800249e:	4b5b      	ldr	r3, [pc, #364]	@ (800260c <MX_GPIO_Init+0x220>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024aa:	4b58      	ldr	r3, [pc, #352]	@ (800260c <MX_GPIO_Init+0x220>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	4a57      	ldr	r2, [pc, #348]	@ (800260c <MX_GPIO_Init+0x220>)
 80024b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024b6:	4b55      	ldr	r3, [pc, #340]	@ (800260c <MX_GPIO_Init+0x220>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024be:	607b      	str	r3, [r7, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP2_CSB_Pin|Alarm_LED_Pin, GPIO_PIN_RESET);
 80024c2:	2200      	movs	r2, #0
 80024c4:	f248 0110 	movw	r1, #32784	@ 0x8010
 80024c8:	4851      	ldr	r0, [pc, #324]	@ (8002610 <MX_GPIO_Init+0x224>)
 80024ca:	f003 ffbd 	bl	8006448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Battery_Pin|Output_Pin, GPIO_PIN_RESET);
 80024ce:	2200      	movs	r2, #0
 80024d0:	2128      	movs	r1, #40	@ 0x28
 80024d2:	4850      	ldr	r0, [pc, #320]	@ (8002614 <MX_GPIO_Init+0x228>)
 80024d4:	f003 ffb8 	bl	8006448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PowerSupply_GPIO_Port, PowerSupply_Pin, GPIO_PIN_RESET);
 80024d8:	2200      	movs	r2, #0
 80024da:	2108      	movs	r1, #8
 80024dc:	484e      	ldr	r0, [pc, #312]	@ (8002618 <MX_GPIO_Init+0x22c>)
 80024de:	f003 ffb3 	bl	8006448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80024e2:	2200      	movs	r2, #0
 80024e4:	2140      	movs	r1, #64	@ 0x40
 80024e6:	484d      	ldr	r0, [pc, #308]	@ (800261c <MX_GPIO_Init+0x230>)
 80024e8:	f003 ffae 	bl	8006448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80024ec:	2200      	movs	r2, #0
 80024ee:	2180      	movs	r1, #128	@ 0x80
 80024f0:	484b      	ldr	r0, [pc, #300]	@ (8002620 <MX_GPIO_Init+0x234>)
 80024f2:	f003 ffa9 	bl	8006448 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BMP2_CSB_Pin|Alarm_LED_Pin;
 80024f6:	f248 0310 	movw	r3, #32784	@ 0x8010
 80024fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fc:	2301      	movs	r3, #1
 80024fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002504:	2300      	movs	r3, #0
 8002506:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002508:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800250c:	4619      	mov	r1, r3
 800250e:	4840      	ldr	r0, [pc, #256]	@ (8002610 <MX_GPIO_Init+0x224>)
 8002510:	f003 fdd6 	bl	80060c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002514:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800251a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800251e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002528:	4619      	mov	r1, r3
 800252a:	483e      	ldr	r0, [pc, #248]	@ (8002624 <MX_GPIO_Init+0x238>)
 800252c:	f003 fdc8 	bl	80060c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = Battery_Pin|Output_Pin;
 8002530:	2328      	movs	r3, #40	@ 0x28
 8002532:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002534:	2301      	movs	r3, #1
 8002536:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253c:	2300      	movs	r3, #0
 800253e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002540:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002544:	4619      	mov	r1, r3
 8002546:	4833      	ldr	r0, [pc, #204]	@ (8002614 <MX_GPIO_Init+0x228>)
 8002548:	f003 fdba 	bl	80060c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PowerSupply_Pin;
 800254c:	2308      	movs	r3, #8
 800254e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002550:	2301      	movs	r3, #1
 8002552:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002558:	2300      	movs	r3, #0
 800255a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(PowerSupply_GPIO_Port, &GPIO_InitStruct);
 800255c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002560:	4619      	mov	r1, r3
 8002562:	482d      	ldr	r0, [pc, #180]	@ (8002618 <MX_GPIO_Init+0x22c>)
 8002564:	f003 fdac 	bl	80060c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PIR_Livingroom_Pin|PIR_Garage_Pin|PIR_Kitchen_Pin;
 8002568:	f44f 43a8 	mov.w	r3, #21504	@ 0x5400
 800256c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800256e:	2300      	movs	r3, #0
 8002570:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002576:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800257a:	4619      	mov	r1, r3
 800257c:	4824      	ldr	r0, [pc, #144]	@ (8002610 <MX_GPIO_Init+0x224>)
 800257e:	f003 fd9f 	bl	80060c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002582:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002586:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002588:	2302      	movs	r3, #2
 800258a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800258c:	2301      	movs	r3, #1
 800258e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002590:	2303      	movs	r3, #3
 8002592:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002594:	2307      	movs	r3, #7
 8002596:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002598:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800259c:	4619      	mov	r1, r3
 800259e:	4822      	ldr	r0, [pc, #136]	@ (8002628 <MX_GPIO_Init+0x23c>)
 80025a0:	f003 fd8e 	bl	80060c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80025a4:	2340      	movs	r3, #64	@ 0x40
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a8:	2301      	movs	r3, #1
 80025aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	2300      	movs	r3, #0
 80025b2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80025b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025b8:	4619      	mov	r1, r3
 80025ba:	4818      	ldr	r0, [pc, #96]	@ (800261c <MX_GPIO_Init+0x230>)
 80025bc:	f003 fd80 	bl	80060c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80025c0:	2380      	movs	r3, #128	@ 0x80
 80025c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80025cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025d0:	4619      	mov	r1, r3
 80025d2:	4812      	ldr	r0, [pc, #72]	@ (800261c <MX_GPIO_Init+0x230>)
 80025d4:	f003 fd74 	bl	80060c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80025d8:	2380      	movs	r3, #128	@ 0x80
 80025da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025dc:	2301      	movs	r3, #1
 80025de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e4:	2300      	movs	r3, #0
 80025e6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80025e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025ec:	4619      	mov	r1, r3
 80025ee:	480c      	ldr	r0, [pc, #48]	@ (8002620 <MX_GPIO_Init+0x234>)
 80025f0:	f003 fd66 	bl	80060c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80025f4:	2200      	movs	r2, #0
 80025f6:	2100      	movs	r1, #0
 80025f8:	2028      	movs	r0, #40	@ 0x28
 80025fa:	f003 fc98 	bl	8005f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025fe:	2028      	movs	r0, #40	@ 0x28
 8002600:	f003 fcb1 	bl	8005f66 <HAL_NVIC_EnableIRQ>

}
 8002604:	bf00      	nop
 8002606:	3738      	adds	r7, #56	@ 0x38
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40023800 	.word	0x40023800
 8002610:	40021000 	.word	0x40021000
 8002614:	40021400 	.word	0x40021400
 8002618:	40020000 	.word	0x40020000
 800261c:	40021800 	.word	0x40021800
 8002620:	40020400 	.word	0x40020400
 8002624:	40020800 	.word	0x40020800
 8002628:	40020c00 	.word	0x40020c00

0800262c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002630:	4b1b      	ldr	r3, [pc, #108]	@ (80026a0 <MX_I2C1_Init+0x74>)
 8002632:	4a1c      	ldr	r2, [pc, #112]	@ (80026a4 <MX_I2C1_Init+0x78>)
 8002634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8002636:	4b1a      	ldr	r3, [pc, #104]	@ (80026a0 <MX_I2C1_Init+0x74>)
 8002638:	4a1b      	ldr	r2, [pc, #108]	@ (80026a8 <MX_I2C1_Init+0x7c>)
 800263a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800263c:	4b18      	ldr	r3, [pc, #96]	@ (80026a0 <MX_I2C1_Init+0x74>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002642:	4b17      	ldr	r3, [pc, #92]	@ (80026a0 <MX_I2C1_Init+0x74>)
 8002644:	2201      	movs	r2, #1
 8002646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002648:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <MX_I2C1_Init+0x74>)
 800264a:	2200      	movs	r2, #0
 800264c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800264e:	4b14      	ldr	r3, [pc, #80]	@ (80026a0 <MX_I2C1_Init+0x74>)
 8002650:	2200      	movs	r2, #0
 8002652:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002654:	4b12      	ldr	r3, [pc, #72]	@ (80026a0 <MX_I2C1_Init+0x74>)
 8002656:	2200      	movs	r2, #0
 8002658:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800265a:	4b11      	ldr	r3, [pc, #68]	@ (80026a0 <MX_I2C1_Init+0x74>)
 800265c:	2200      	movs	r2, #0
 800265e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002660:	4b0f      	ldr	r3, [pc, #60]	@ (80026a0 <MX_I2C1_Init+0x74>)
 8002662:	2200      	movs	r2, #0
 8002664:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002666:	480e      	ldr	r0, [pc, #56]	@ (80026a0 <MX_I2C1_Init+0x74>)
 8002668:	f003 ff46 	bl	80064f8 <HAL_I2C_Init>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002672:	f002 fc5f 	bl	8004f34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002676:	2100      	movs	r1, #0
 8002678:	4809      	ldr	r0, [pc, #36]	@ (80026a0 <MX_I2C1_Init+0x74>)
 800267a:	f004 fd9d 	bl	80071b8 <HAL_I2CEx_ConfigAnalogFilter>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002684:	f002 fc56 	bl	8004f34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002688:	2100      	movs	r1, #0
 800268a:	4805      	ldr	r0, [pc, #20]	@ (80026a0 <MX_I2C1_Init+0x74>)
 800268c:	f004 fddf 	bl	800724e <HAL_I2CEx_ConfigDigitalFilter>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002696:	f002 fc4d 	bl	8004f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	200001dc 	.word	0x200001dc
 80026a4:	40005400 	.word	0x40005400
 80026a8:	00808cd2 	.word	0x00808cd2

080026ac <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80026b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002720 <MX_I2C2_Init+0x74>)
 80026b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002724 <MX_I2C2_Init+0x78>)
 80026b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 80026b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002720 <MX_I2C2_Init+0x74>)
 80026b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002728 <MX_I2C2_Init+0x7c>)
 80026ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80026bc:	4b18      	ldr	r3, [pc, #96]	@ (8002720 <MX_I2C2_Init+0x74>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026c2:	4b17      	ldr	r3, [pc, #92]	@ (8002720 <MX_I2C2_Init+0x74>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026c8:	4b15      	ldr	r3, [pc, #84]	@ (8002720 <MX_I2C2_Init+0x74>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80026ce:	4b14      	ldr	r3, [pc, #80]	@ (8002720 <MX_I2C2_Init+0x74>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026d4:	4b12      	ldr	r3, [pc, #72]	@ (8002720 <MX_I2C2_Init+0x74>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026da:	4b11      	ldr	r3, [pc, #68]	@ (8002720 <MX_I2C2_Init+0x74>)
 80026dc:	2200      	movs	r2, #0
 80026de:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002720 <MX_I2C2_Init+0x74>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80026e6:	480e      	ldr	r0, [pc, #56]	@ (8002720 <MX_I2C2_Init+0x74>)
 80026e8:	f003 ff06 	bl	80064f8 <HAL_I2C_Init>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80026f2:	f002 fc1f 	bl	8004f34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026f6:	2100      	movs	r1, #0
 80026f8:	4809      	ldr	r0, [pc, #36]	@ (8002720 <MX_I2C2_Init+0x74>)
 80026fa:	f004 fd5d 	bl	80071b8 <HAL_I2CEx_ConfigAnalogFilter>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002704:	f002 fc16 	bl	8004f34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002708:	2100      	movs	r1, #0
 800270a:	4805      	ldr	r0, [pc, #20]	@ (8002720 <MX_I2C2_Init+0x74>)
 800270c:	f004 fd9f 	bl	800724e <HAL_I2CEx_ConfigDigitalFilter>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002716:	f002 fc0d 	bl	8004f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000230 	.word	0x20000230
 8002724:	40005800 	.word	0x40005800
 8002728:	00808cd2 	.word	0x00808cd2

0800272c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b0ac      	sub	sp, #176	@ 0xb0
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002734:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	60da      	str	r2, [r3, #12]
 8002742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002744:	f107 0318 	add.w	r3, r7, #24
 8002748:	2284      	movs	r2, #132	@ 0x84
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f009 fda9 	bl	800c2a4 <memset>
  if(i2cHandle->Instance==I2C1)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a43      	ldr	r2, [pc, #268]	@ (8002864 <HAL_I2C_MspInit+0x138>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d13d      	bne.n	80027d8 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800275c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002760:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002762:	2300      	movs	r3, #0
 8002764:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002766:	f107 0318 	add.w	r3, r7, #24
 800276a:	4618      	mov	r0, r3
 800276c:	f005 fa96 	bl	8007c9c <HAL_RCCEx_PeriphCLKConfig>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002776:	f002 fbdd 	bl	8004f34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800277a:	4b3b      	ldr	r3, [pc, #236]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	4a3a      	ldr	r2, [pc, #232]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 8002780:	f043 0302 	orr.w	r3, r3, #2
 8002784:	6313      	str	r3, [r2, #48]	@ 0x30
 8002786:	4b38      	ldr	r3, [pc, #224]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_INA219_Solar_Pin|I2C1_SDA_INA219_Solar_Pin;
 8002792:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002796:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800279a:	2312      	movs	r3, #18
 800279c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a6:	2303      	movs	r3, #3
 80027a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027ac:	2304      	movs	r3, #4
 80027ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027b6:	4619      	mov	r1, r3
 80027b8:	482c      	ldr	r0, [pc, #176]	@ (800286c <HAL_I2C_MspInit+0x140>)
 80027ba:	f003 fc81 	bl	80060c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027be:	4b2a      	ldr	r3, [pc, #168]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	4a29      	ldr	r2, [pc, #164]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 80027c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ca:	4b27      	ldr	r3, [pc, #156]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80027d6:	e041      	b.n	800285c <HAL_I2C_MspInit+0x130>
  else if(i2cHandle->Instance==I2C2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a24      	ldr	r2, [pc, #144]	@ (8002870 <HAL_I2C_MspInit+0x144>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d13c      	bne.n	800285c <HAL_I2C_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80027e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80027e8:	2300      	movs	r3, #0
 80027ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027ee:	f107 0318 	add.w	r3, r7, #24
 80027f2:	4618      	mov	r0, r3
 80027f4:	f005 fa52 	bl	8007c9c <HAL_RCCEx_PeriphCLKConfig>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80027fe:	f002 fb99 	bl	8004f34 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002802:	4b19      	ldr	r3, [pc, #100]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002806:	4a18      	ldr	r2, [pc, #96]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 8002808:	f043 0320 	orr.w	r3, r3, #32
 800280c:	6313      	str	r3, [r2, #48]	@ 0x30
 800280e:	4b16      	ldr	r3, [pc, #88]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002812:	f003 0320 	and.w	r3, r3, #32
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C2_SDA_INA219_Output_Pin|I2C2_SCL_Output_Pin;
 800281a:	2303      	movs	r3, #3
 800281c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002820:	2312      	movs	r3, #18
 8002822:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282c:	2303      	movs	r3, #3
 800282e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002832:	2304      	movs	r3, #4
 8002834:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002838:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800283c:	4619      	mov	r1, r3
 800283e:	480d      	ldr	r0, [pc, #52]	@ (8002874 <HAL_I2C_MspInit+0x148>)
 8002840:	f003 fc3e 	bl	80060c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002844:	4b08      	ldr	r3, [pc, #32]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	4a07      	ldr	r2, [pc, #28]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 800284a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800284e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002850:	4b05      	ldr	r3, [pc, #20]	@ (8002868 <HAL_I2C_MspInit+0x13c>)
 8002852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002854:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	68bb      	ldr	r3, [r7, #8]
}
 800285c:	bf00      	nop
 800285e:	37b0      	adds	r7, #176	@ 0xb0
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40005400 	.word	0x40005400
 8002868:	40023800 	.word	0x40023800
 800286c:	40020400 	.word	0x40020400
 8002870:	40005800 	.word	0x40005800
 8002874:	40021400 	.word	0x40021400

08002878 <keypad_config>:

const char Rows[4]={R1, R2, R3, R4};
const char Cols[4]={C1, C2, C3, C4};

void keypad_config(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	@ 0x28
 800287c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  if (KEYPAD_4x4_GPIO == GPIOA) __HAL_RCC_GPIOA_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOB) __HAL_RCC_GPIOB_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOC) __HAL_RCC_GPIOC_CLK_ENABLE(); else
  if (KEYPAD_4x4_GPIO == GPIOD) __HAL_RCC_GPIOD_CLK_ENABLE(); else
 800287e:	4b16      	ldr	r3, [pc, #88]	@ (80028d8 <keypad_config+0x60>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	4a15      	ldr	r2, [pc, #84]	@ (80028d8 <keypad_config+0x60>)
 8002884:	f043 0308 	orr.w	r3, r3, #8
 8002888:	6313      	str	r3, [r2, #48]	@ 0x30
 800288a:	4b13      	ldr	r3, [pc, #76]	@ (80028d8 <keypad_config+0x60>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
  if (KEYPAD_4x4_GPIO == GPIOE) __HAL_RCC_GPIOE_CLK_ENABLE();


  GPIO_InitStruct.Pin = R1 | R2 | R3 | R4;
 8002896:	230f      	movs	r3, #15
 8002898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800289a:	2301      	movs	r3, #1
 800289c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEYPAD_4x4_GPIO, &GPIO_InitStruct);
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	4619      	mov	r1, r3
 80028ac:	480b      	ldr	r0, [pc, #44]	@ (80028dc <keypad_config+0x64>)
 80028ae:	f003 fc07 	bl	80060c0 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = C1 | C2 | C3 | C4;
 80028b2:	23f0      	movs	r3, #240	@ 0xf0
 80028b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028ba:	2302      	movs	r3, #2
 80028bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028be:	2300      	movs	r3, #0
 80028c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEYPAD_4x4_GPIO, &GPIO_InitStruct);
 80028c2:	f107 0314 	add.w	r3, r7, #20
 80028c6:	4619      	mov	r1, r3
 80028c8:	4804      	ldr	r0, [pc, #16]	@ (80028dc <keypad_config+0x64>)
 80028ca:	f003 fbf9 	bl	80060c0 <HAL_GPIO_Init>

}
 80028ce:	bf00      	nop
 80028d0:	3728      	adds	r7, #40	@ 0x28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40020c00 	.word	0x40020c00

080028e0 <keypad_readkey>:

char keypad_readkey(void)
{ //returns ASCII code of a pressed key
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
  unsigned char r, c;
  char pressedKey=0x00;
 80028e6:	2300      	movs	r3, #0
 80028e8:	717b      	strb	r3, [r7, #5]

  r=0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	71fb      	strb	r3, [r7, #7]
  while (r<4) {
 80028ee:	e02d      	b.n	800294c <keypad_readkey+0x6c>
    HAL_GPIO_WritePin(KEYPAD_4x4_GPIO, Rows[r], GPIO_PIN_SET);        //activate row
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	4a1a      	ldr	r2, [pc, #104]	@ (800295c <keypad_readkey+0x7c>)
 80028f4:	5cd3      	ldrb	r3, [r2, r3]
 80028f6:	2201      	movs	r2, #1
 80028f8:	4619      	mov	r1, r3
 80028fa:	4819      	ldr	r0, [pc, #100]	@ (8002960 <keypad_readkey+0x80>)
 80028fc:	f003 fda4 	bl	8006448 <HAL_GPIO_WritePin>
    c=0;
 8002900:	2300      	movs	r3, #0
 8002902:	71bb      	strb	r3, [r7, #6]
    while (c<4) {
 8002904:	e014      	b.n	8002930 <keypad_readkey+0x50>
      if (HAL_GPIO_ReadPin(KEYPAD_4x4_GPIO, Cols[c])==GPIO_PIN_SET){  //check columns
 8002906:	79bb      	ldrb	r3, [r7, #6]
 8002908:	4a16      	ldr	r2, [pc, #88]	@ (8002964 <keypad_readkey+0x84>)
 800290a:	5cd3      	ldrb	r3, [r2, r3]
 800290c:	4619      	mov	r1, r3
 800290e:	4814      	ldr	r0, [pc, #80]	@ (8002960 <keypad_readkey+0x80>)
 8002910:	f003 fd82 	bl	8006418 <HAL_GPIO_ReadPin>
 8002914:	4603      	mov	r3, r0
 8002916:	2b01      	cmp	r3, #1
 8002918:	d107      	bne.n	800292a <keypad_readkey+0x4a>
        pressedKey=KeyMap[r][c];                                   //if column active - find key value
 800291a:	79fa      	ldrb	r2, [r7, #7]
 800291c:	79bb      	ldrb	r3, [r7, #6]
 800291e:	4912      	ldr	r1, [pc, #72]	@ (8002968 <keypad_readkey+0x88>)
 8002920:	0092      	lsls	r2, r2, #2
 8002922:	440a      	add	r2, r1
 8002924:	4413      	add	r3, r2
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	717b      	strb	r3, [r7, #5]
      }
      c++;
 800292a:	79bb      	ldrb	r3, [r7, #6]
 800292c:	3301      	adds	r3, #1
 800292e:	71bb      	strb	r3, [r7, #6]
    while (c<4) {
 8002930:	79bb      	ldrb	r3, [r7, #6]
 8002932:	2b03      	cmp	r3, #3
 8002934:	d9e7      	bls.n	8002906 <keypad_readkey+0x26>
    }
    HAL_GPIO_WritePin(KEYPAD_4x4_GPIO, Rows[r], GPIO_PIN_RESET);      //deactivate row
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	4a08      	ldr	r2, [pc, #32]	@ (800295c <keypad_readkey+0x7c>)
 800293a:	5cd3      	ldrb	r3, [r2, r3]
 800293c:	2200      	movs	r2, #0
 800293e:	4619      	mov	r1, r3
 8002940:	4807      	ldr	r0, [pc, #28]	@ (8002960 <keypad_readkey+0x80>)
 8002942:	f003 fd81 	bl	8006448 <HAL_GPIO_WritePin>
    r++;
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	3301      	adds	r3, #1
 800294a:	71fb      	strb	r3, [r7, #7]
  while (r<4) {
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	2b03      	cmp	r3, #3
 8002950:	d9ce      	bls.n	80028f0 <keypad_readkey+0x10>
  }
  return pressedKey;                                               //return ASCII key value
 8002952:	797b      	ldrb	r3, [r7, #5]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	0800d004 	.word	0x0800d004
 8002960:	40020c00 	.word	0x40020c00
 8002964:	0800d008 	.word	0x0800d008
 8002968:	0800cff4 	.word	0x0800cff4

0800296c <LCD_WriteNibble>:

GPIO_InitTypeDef GPIO_InitStruct;

//-----------------------------------------------------------------------------
void LCD_WriteNibble(char nibbleToWrite)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_SET);
 8002976:	2201      	movs	r2, #1
 8002978:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800297c:	4818      	ldr	r0, [pc, #96]	@ (80029e0 <LCD_WriteNibble+0x74>)
 800297e:	f003 fd63 	bl	8006448 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D4, (GPIO_PinState)(nibbleToWrite & 0x01));
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	b2db      	uxtb	r3, r3
 800298a:	461a      	mov	r2, r3
 800298c:	2108      	movs	r1, #8
 800298e:	4814      	ldr	r0, [pc, #80]	@ (80029e0 <LCD_WriteNibble+0x74>)
 8002990:	f003 fd5a 	bl	8006448 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D5, (GPIO_PinState)(nibbleToWrite & 0x02));
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	b2db      	uxtb	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	2104      	movs	r1, #4
 80029a0:	480f      	ldr	r0, [pc, #60]	@ (80029e0 <LCD_WriteNibble+0x74>)
 80029a2:	f003 fd51 	bl	8006448 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D6, (GPIO_PinState)(nibbleToWrite & 0x04));
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	2140      	movs	r1, #64	@ 0x40
 80029b2:	480b      	ldr	r0, [pc, #44]	@ (80029e0 <LCD_WriteNibble+0x74>)
 80029b4:	f003 fd48 	bl	8006448 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_D7, (GPIO_PinState)(nibbleToWrite & 0x08));
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	461a      	mov	r2, r3
 80029c2:	2101      	movs	r1, #1
 80029c4:	4806      	ldr	r0, [pc, #24]	@ (80029e0 <LCD_WriteNibble+0x74>)
 80029c6:	f003 fd3f 	bl	8006448 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_RESET);
 80029ca:	2200      	movs	r2, #0
 80029cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029d0:	4803      	ldr	r0, [pc, #12]	@ (80029e0 <LCD_WriteNibble+0x74>)
 80029d2:	f003 fd39 	bl	8006448 <HAL_GPIO_WritePin>
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40020800 	.word	0x40020800

080029e4 <LCD_ReadNibble>:


//-----------------------------------------------------------------------------
unsigned char LCD_ReadNibble(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
  unsigned char tmp = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_SET);
 80029ee:	2201      	movs	r2, #1
 80029f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029f4:	481e      	ldr	r0, [pc, #120]	@ (8002a70 <LCD_ReadNibble+0x8c>)
 80029f6:	f003 fd27 	bl	8006448 <HAL_GPIO_WritePin>
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D4) << 0);
 80029fa:	2108      	movs	r1, #8
 80029fc:	481c      	ldr	r0, [pc, #112]	@ (8002a70 <LCD_ReadNibble+0x8c>)
 80029fe:	f003 fd0b 	bl	8006418 <HAL_GPIO_ReadPin>
 8002a02:	4603      	mov	r3, r0
 8002a04:	b25a      	sxtb	r2, r3
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	b25b      	sxtb	r3, r3
 8002a0e:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D5) << 1);
 8002a10:	2104      	movs	r1, #4
 8002a12:	4817      	ldr	r0, [pc, #92]	@ (8002a70 <LCD_ReadNibble+0x8c>)
 8002a14:	f003 fd00 	bl	8006418 <HAL_GPIO_ReadPin>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	b25a      	sxtb	r2, r3
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	b25b      	sxtb	r3, r3
 8002a26:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D6) << 2);
 8002a28:	2140      	movs	r1, #64	@ 0x40
 8002a2a:	4811      	ldr	r0, [pc, #68]	@ (8002a70 <LCD_ReadNibble+0x8c>)
 8002a2c:	f003 fcf4 	bl	8006418 <HAL_GPIO_ReadPin>
 8002a30:	4603      	mov	r3, r0
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	b25a      	sxtb	r2, r3
 8002a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	b25b      	sxtb	r3, r3
 8002a3e:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_GPIO, LCD_D7) << 3);
 8002a40:	2101      	movs	r1, #1
 8002a42:	480b      	ldr	r0, [pc, #44]	@ (8002a70 <LCD_ReadNibble+0x8c>)
 8002a44:	f003 fce8 	bl	8006418 <HAL_GPIO_ReadPin>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	b25a      	sxtb	r2, r3
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	b25b      	sxtb	r3, r3
 8002a56:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_EN, GPIO_PIN_RESET);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a5e:	4804      	ldr	r0, [pc, #16]	@ (8002a70 <LCD_ReadNibble+0x8c>)
 8002a60:	f003 fcf2 	bl	8006448 <HAL_GPIO_WritePin>
  return tmp;
 8002a64:	79fb      	ldrb	r3, [r7, #7]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40020800 	.word	0x40020800

08002a74 <LCD_ReadStatus>:


//-----------------------------------------------------------------------------
unsigned char LCD_ReadStatus(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
  unsigned char status = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	71fb      	strb	r3, [r7, #7]
  
  GPIO_InitStruct.Pin =  LCD_D4 | LCD_D5 | LCD_D6 | LCD_D7;
 8002a7e:	4b21      	ldr	r3, [pc, #132]	@ (8002b04 <LCD_ReadStatus+0x90>)
 8002a80:	224d      	movs	r2, #77	@ 0x4d
 8002a82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a84:	4b1f      	ldr	r3, [pc, #124]	@ (8002b04 <LCD_ReadStatus+0x90>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b04 <LCD_ReadStatus+0x90>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002a90:	4b1c      	ldr	r3, [pc, #112]	@ (8002b04 <LCD_ReadStatus+0x90>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a96:	491b      	ldr	r1, [pc, #108]	@ (8002b04 <LCD_ReadStatus+0x90>)
 8002a98:	481b      	ldr	r0, [pc, #108]	@ (8002b08 <LCD_ReadStatus+0x94>)
 8002a9a:	f003 fb11 	bl	80060c0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW, GPIO_PIN_SET);
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002aa4:	4818      	ldr	r0, [pc, #96]	@ (8002b08 <LCD_ReadStatus+0x94>)
 8002aa6:	f003 fccf 	bl	8006448 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RS, GPIO_PIN_RESET);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ab0:	4815      	ldr	r0, [pc, #84]	@ (8002b08 <LCD_ReadStatus+0x94>)
 8002ab2:	f003 fcc9 	bl	8006448 <HAL_GPIO_WritePin>
  
  status |= (LCD_ReadNibble() << 4);
 8002ab6:	f7ff ff95 	bl	80029e4 <LCD_ReadNibble>
 8002aba:	4603      	mov	r3, r0
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	b25a      	sxtb	r2, r3
 8002ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	b25b      	sxtb	r3, r3
 8002ac8:	71fb      	strb	r3, [r7, #7]
  status |= LCD_ReadNibble();
 8002aca:	f7ff ff8b 	bl	80029e4 <LCD_ReadNibble>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	71fb      	strb	r3, [r7, #7]
  

  GPIO_InitStruct.Pin = LCD_D4|LCD_D5|LCD_D6|LCD_D7;
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b04 <LCD_ReadStatus+0x90>)
 8002ada:	224d      	movs	r2, #77	@ 0x4d
 8002adc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ade:	4b09      	ldr	r3, [pc, #36]	@ (8002b04 <LCD_ReadStatus+0x90>)
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	4b07      	ldr	r3, [pc, #28]	@ (8002b04 <LCD_ReadStatus+0x90>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002aea:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <LCD_ReadStatus+0x90>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002af0:	4904      	ldr	r1, [pc, #16]	@ (8002b04 <LCD_ReadStatus+0x90>)
 8002af2:	4805      	ldr	r0, [pc, #20]	@ (8002b08 <LCD_ReadStatus+0x94>)
 8002af4:	f003 fae4 	bl	80060c0 <HAL_GPIO_Init>

  return status;
 8002af8:	79fb      	ldrb	r3, [r7, #7]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000284 	.word	0x20000284
 8002b08:	40020800 	.word	0x40020800

08002b0c <LCD_WriteData>:


//-----------------------------------------------------------------------------
void LCD_WriteData(char dataToWrite)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW, GPIO_PIN_RESET);
 8002b16:	2200      	movs	r2, #0
 8002b18:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002b1c:	4810      	ldr	r0, [pc, #64]	@ (8002b60 <LCD_WriteData+0x54>)
 8002b1e:	f003 fc93 	bl	8006448 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RS, GPIO_PIN_SET);
 8002b22:	2201      	movs	r2, #1
 8002b24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002b28:	480d      	ldr	r0, [pc, #52]	@ (8002b60 <LCD_WriteData+0x54>)
 8002b2a:	f003 fc8d 	bl	8006448 <HAL_GPIO_WritePin>
  
  LCD_WriteNibble(dataToWrite >> 4);
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	091b      	lsrs	r3, r3, #4
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ff19 	bl	800296c <LCD_WriteNibble>
  LCD_WriteNibble(dataToWrite & 0x0F);
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff ff12 	bl	800296c <LCD_WriteNibble>
  
  while(LCD_ReadStatus() & 0x80);
 8002b48:	bf00      	nop
 8002b4a:	f7ff ff93 	bl	8002a74 <LCD_ReadStatus>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	b25b      	sxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	dbf9      	blt.n	8002b4a <LCD_WriteData+0x3e>
}
 8002b56:	bf00      	nop
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40020800 	.word	0x40020800

08002b64 <LCD_WriteCommand>:


//-----------------------------------------------------------------------------
void LCD_WriteCommand(char commandToWrite)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_GPIO, LCD_RW | LCD_RS, GPIO_PIN_RESET);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002b74:	480d      	ldr	r0, [pc, #52]	@ (8002bac <LCD_WriteCommand+0x48>)
 8002b76:	f003 fc67 	bl	8006448 <HAL_GPIO_WritePin>
  LCD_WriteNibble(commandToWrite >> 4);
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	091b      	lsrs	r3, r3, #4
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fef3 	bl	800296c <LCD_WriteNibble>
  LCD_WriteNibble(commandToWrite & 0x0F);
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	f003 030f 	and.w	r3, r3, #15
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff feec 	bl	800296c <LCD_WriteNibble>
  
  while(LCD_ReadStatus() & 0x80);
 8002b94:	bf00      	nop
 8002b96:	f7ff ff6d 	bl	8002a74 <LCD_ReadStatus>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	b25b      	sxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	dbf9      	blt.n	8002b96 <LCD_WriteCommand+0x32>
}
 8002ba2:	bf00      	nop
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40020800 	.word	0x40020800

08002bb0 <LCD_WriteText>:


//-----------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  while(*text)
 8002bb8:	e006      	b.n	8002bc8 <LCD_WriteText+0x18>
    LCD_WriteData(*text++);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ffa2 	bl	8002b0c <LCD_WriteData>
  while(*text)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f4      	bne.n	8002bba <LCD_WriteText+0xa>
}
 8002bd0:	bf00      	nop
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <LCD_GoTo>:


//-----------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	4603      	mov	r3, r0
 8002be2:	460a      	mov	r2, r1
 8002be4:	71fb      	strb	r3, [r7, #7]
 8002be6:	4613      	mov	r3, r2
 8002be8:	71bb      	strb	r3, [r7, #6]
  LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 8002bea:	79bb      	ldrb	r3, [r7, #6]
 8002bec:	019b      	lsls	r3, r3, #6
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	b25b      	sxtb	r3, r3
 8002bf8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002bfc:	b25b      	sxtb	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff ffaf 	bl	8002b64 <LCD_WriteCommand>
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <LCD_WriteTextXY>:


//-----------------------------------------------------------------------------
void LCD_WriteTextXY(char * text, unsigned char x, unsigned char y)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	460b      	mov	r3, r1
 8002c18:	70fb      	strb	r3, [r7, #3]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	70bb      	strb	r3, [r7, #2]
  LCD_GoTo(x,y);
 8002c1e:	78ba      	ldrb	r2, [r7, #2]
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	4611      	mov	r1, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ffd8 	bl	8002bda <LCD_GoTo>
  while(*text)
 8002c2a:	e006      	b.n	8002c3a <LCD_WriteTextXY+0x2c>
    LCD_WriteData(*text++);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	607a      	str	r2, [r7, #4]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff ff69 	bl	8002b0c <LCD_WriteData>
  while(*text)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f4      	bne.n	8002c2c <LCD_WriteTextXY+0x1e>
}
 8002c42:	bf00      	nop
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <move_menu>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void move_menu(char *a[])
  {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
	symbol[0] = keypad_readkey();
 8002c54:	f7ff fe44 	bl	80028e0 <keypad_readkey>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	4b29      	ldr	r3, [pc, #164]	@ (8002d04 <move_menu+0xb8>)
 8002c5e:	701a      	strb	r2, [r3, #0]
	  if (symbol[0] == 'B' && (position<max_pos)) {
 8002c60:	4b28      	ldr	r3, [pc, #160]	@ (8002d04 <move_menu+0xb8>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b42      	cmp	r3, #66	@ 0x42
 8002c66:	d10e      	bne.n	8002c86 <move_menu+0x3a>
 8002c68:	4b27      	ldr	r3, [pc, #156]	@ (8002d08 <move_menu+0xbc>)
 8002c6a:	781a      	ldrb	r2, [r3, #0]
 8002c6c:	4b27      	ldr	r3, [pc, #156]	@ (8002d0c <move_menu+0xc0>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d208      	bcs.n	8002c86 <move_menu+0x3a>
	  	   	  position++;
 8002c74:	4b24      	ldr	r3, [pc, #144]	@ (8002d08 <move_menu+0xbc>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	4b22      	ldr	r3, [pc, #136]	@ (8002d08 <move_menu+0xbc>)
 8002c7e:	701a      	strb	r2, [r3, #0]
	  	   	  refreshLCD=true;
 8002c80:	4b23      	ldr	r3, [pc, #140]	@ (8002d10 <move_menu+0xc4>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
	  	   	}

	  	   	if (symbol[0] == 'A' && (position>1)) {
 8002c86:	4b1f      	ldr	r3, [pc, #124]	@ (8002d04 <move_menu+0xb8>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b41      	cmp	r3, #65	@ 0x41
 8002c8c:	d10c      	bne.n	8002ca8 <move_menu+0x5c>
 8002c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d08 <move_menu+0xbc>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d908      	bls.n	8002ca8 <move_menu+0x5c>
	  	   	  position--;
 8002c96:	4b1c      	ldr	r3, [pc, #112]	@ (8002d08 <move_menu+0xbc>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002d08 <move_menu+0xbc>)
 8002ca0:	701a      	strb	r2, [r3, #0]
	  	   	  refreshLCD=true;
 8002ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d10 <move_menu+0xc4>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
	  	   	}
	  	  if (refreshLCD){                           //Odswiezanie LCD tylko przy zmiane zawartosci - usuwa problem "migotania" LCD
 8002ca8:	4b19      	ldr	r3, [pc, #100]	@ (8002d10 <move_menu+0xc4>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d024      	beq.n	8002cfa <move_menu+0xae>
	   	  LCD_WriteCommand(HD44780_CLEAR);
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	f7ff ff57 	bl	8002b64 <LCD_WriteCommand>
	   	  LCD_WriteText("->");
 8002cb6:	4817      	ldr	r0, [pc, #92]	@ (8002d14 <move_menu+0xc8>)
 8002cb8:	f7ff ff7a 	bl	8002bb0 <LCD_WriteText>
	   	  LCD_WriteText(a[position-1]);
 8002cbc:	4b12      	ldr	r3, [pc, #72]	@ (8002d08 <move_menu+0xbc>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	4413      	add	r3, r2
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff6d 	bl	8002bb0 <LCD_WriteText>
	   	  if (position<4){
 8002cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002d08 <move_menu+0xbc>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d80a      	bhi.n	8002cf4 <move_menu+0xa8>
	   		LCD_WriteTextXY(a[position-1+1],2,1);
 8002cde:	4b0a      	ldr	r3, [pc, #40]	@ (8002d08 <move_menu+0xbc>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2201      	movs	r2, #1
 8002cec:	2102      	movs	r1, #2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff ff8d 	bl	8002c0e <LCD_WriteTextXY>
	   	  }
	   	  refreshLCD=false;
 8002cf4:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <move_menu+0xc4>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	701a      	strb	r2, [r3, #0]
	   	}
  }
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000298 	.word	0x20000298
 8002d08:	20000054 	.word	0x20000054
 8002d0c:	20000055 	.word	0x20000055
 8002d10:	200002fd 	.word	0x200002fd
 8002d14:	0800ce40 	.word	0x0800ce40

08002d18 <roundToTwoDecimals>:

double roundToTwoDecimals(double value) {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	ed87 0b00 	vstr	d0, [r7]
	return floor(value * 100.0 + 0.5) / 100.0;
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	4b15      	ldr	r3, [pc, #84]	@ (8002d7c <roundToTwoDecimals+0x64>)
 8002d28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d2c:	f7fd fc94 	bl	8000658 <__aeabi_dmul>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4610      	mov	r0, r2
 8002d36:	4619      	mov	r1, r3
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	4b10      	ldr	r3, [pc, #64]	@ (8002d80 <roundToTwoDecimals+0x68>)
 8002d3e:	f7fd fad5 	bl	80002ec <__adddf3>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	ec43 2b17 	vmov	d7, r2, r3
 8002d4a:	eeb0 0a47 	vmov.f32	s0, s14
 8002d4e:	eef0 0a67 	vmov.f32	s1, s15
 8002d52:	f009 ff29 	bl	800cba8 <floor>
 8002d56:	ec51 0b10 	vmov	r0, r1, d0
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	4b07      	ldr	r3, [pc, #28]	@ (8002d7c <roundToTwoDecimals+0x64>)
 8002d60:	f7fd fda4 	bl	80008ac <__aeabi_ddiv>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	ec43 2b17 	vmov	d7, r2, r3
}
 8002d6c:	eeb0 0a47 	vmov.f32	s0, s14
 8002d70:	eef0 0a67 	vmov.f32	s1, s15
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40590000 	.word	0x40590000
 8002d80:	3fe00000 	.word	0x3fe00000

08002d84 <calculate_discrete_pi>:

//PI controller

float_t calculate_discrete_pi(pi_t* pi, float_t setpoint, float_t measured)
{
 8002d84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d88:	b086      	sub	sp, #24
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d92:	edc7 0a01 	vstr	s1, [r7, #4]
    // Obliczenie błędu
    error = setpoint - measured;
 8002d96:	ed97 7a02 	vldr	s14, [r7, #8]
 8002d9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002da2:	4b6b      	ldr	r3, [pc, #428]	@ (8002f50 <calculate_discrete_pi+0x1cc>)
 8002da4:	edc3 7a00 	vstr	s15, [r3]

    // Część proporcjonalna
    P = pi->p.Kp * error;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	ed93 7a00 	vldr	s14, [r3]
 8002dae:	4b68      	ldr	r3, [pc, #416]	@ (8002f50 <calculate_discrete_pi+0x1cc>)
 8002db0:	edd3 7a00 	vldr	s15, [r3]
 8002db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db8:	4b66      	ldr	r3, [pc, #408]	@ (8002f54 <calculate_discrete_pi+0x1d0>)
 8002dba:	edc3 7a00 	vstr	s15, [r3]

    // Część całkująca
    integral = pi->previous_intergral + (error + pi->previous_error);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	ed93 7a04 	vldr	s14, [r3, #16]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	edd3 6a03 	vldr	s13, [r3, #12]
 8002dca:	4b61      	ldr	r3, [pc, #388]	@ (8002f50 <calculate_discrete_pi+0x1cc>)
 8002dcc:	edd3 7a00 	vldr	s15, [r3]
 8002dd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd8:	4b5f      	ldr	r3, [pc, #380]	@ (8002f58 <calculate_discrete_pi+0x1d4>)
 8002dda:	edc3 7a00 	vstr	s15, [r3]

    // Anty-windup: korekta integratora w przypadku nasycenia
    float_t U_temp = P + pi->p.Ki * integral * (pi->p.dt / 2.0);
 8002dde:	4b5d      	ldr	r3, [pc, #372]	@ (8002f54 <calculate_discrete_pi+0x1d0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd fbe0 	bl	80005a8 <__aeabi_f2d>
 8002de8:	4604      	mov	r4, r0
 8002dea:	460d      	mov	r5, r1
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	ed93 7a01 	vldr	s14, [r3, #4]
 8002df2:	4b59      	ldr	r3, [pc, #356]	@ (8002f58 <calculate_discrete_pi+0x1d4>)
 8002df4:	edd3 7a00 	vldr	s15, [r3]
 8002df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dfc:	ee17 0a90 	vmov	r0, s15
 8002e00:	f7fd fbd2 	bl	80005a8 <__aeabi_f2d>
 8002e04:	4680      	mov	r8, r0
 8002e06:	4689      	mov	r9, r1
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fd fbcb 	bl	80005a8 <__aeabi_f2d>
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002e1a:	f7fd fd47 	bl	80008ac <__aeabi_ddiv>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4640      	mov	r0, r8
 8002e24:	4649      	mov	r1, r9
 8002e26:	f7fd fc17 	bl	8000658 <__aeabi_dmul>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4620      	mov	r0, r4
 8002e30:	4629      	mov	r1, r5
 8002e32:	f7fd fa5b 	bl	80002ec <__adddf3>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f7fd feed 	bl	8000c1c <__aeabi_d2f>
 8002e42:	4603      	mov	r3, r0
 8002e44:	617b      	str	r3, [r7, #20]
    if (U_temp > 1.0) {
 8002e46:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e56:	dd07      	ble.n	8002e68 <calculate_discrete_pi+0xe4>
        U_temp = 1.0;
 8002e58:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002e5c:	617b      	str	r3, [r7, #20]
        integral = pi->previous_intergral;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	4a3d      	ldr	r2, [pc, #244]	@ (8002f58 <calculate_discrete_pi+0x1d4>)
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e012      	b.n	8002e8e <calculate_discrete_pi+0x10a>
    } else if (U_temp < 0.0) {
 8002e68:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e74:	d507      	bpl.n	8002e86 <calculate_discrete_pi+0x102>
        U_temp = 0.0;
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
        integral = pi->previous_intergral;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	4a35      	ldr	r2, [pc, #212]	@ (8002f58 <calculate_discrete_pi+0x1d4>)
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	e003      	b.n	8002e8e <calculate_discrete_pi+0x10a>
    } else {
        pi->previous_intergral = integral;
 8002e86:	4b34      	ldr	r3, [pc, #208]	@ (8002f58 <calculate_discrete_pi+0x1d4>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	611a      	str	r2, [r3, #16]
    }

    // Część całkująca
    I = pi->p.Ki * integral * (pi->p.dt / 2.0);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e94:	4b30      	ldr	r3, [pc, #192]	@ (8002f58 <calculate_discrete_pi+0x1d4>)
 8002e96:	edd3 7a00 	vldr	s15, [r3]
 8002e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e9e:	ee17 0a90 	vmov	r0, s15
 8002ea2:	f7fd fb81 	bl	80005a8 <__aeabi_f2d>
 8002ea6:	4604      	mov	r4, r0
 8002ea8:	460d      	mov	r5, r1
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd fb7a 	bl	80005a8 <__aeabi_f2d>
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002ebc:	f7fd fcf6 	bl	80008ac <__aeabi_ddiv>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	f7fd fbc6 	bl	8000658 <__aeabi_dmul>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f7fd fea2 	bl	8000c1c <__aeabi_d2f>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	4a20      	ldr	r2, [pc, #128]	@ (8002f5c <calculate_discrete_pi+0x1d8>)
 8002edc:	6013      	str	r3, [r2, #0]

    // Suma części PI
    U = P + I;
 8002ede:	4b1d      	ldr	r3, [pc, #116]	@ (8002f54 <calculate_discrete_pi+0x1d0>)
 8002ee0:	ed93 7a00 	vldr	s14, [r3]
 8002ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f5c <calculate_discrete_pi+0x1d8>)
 8002ee6:	edd3 7a00 	vldr	s15, [r3]
 8002eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eee:	4b1c      	ldr	r3, [pc, #112]	@ (8002f60 <calculate_discrete_pi+0x1dc>)
 8002ef0:	edc3 7a00 	vstr	s15, [r3]

    U = (U > 1.0) ? 1.0 : U;
 8002ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8002f60 <calculate_discrete_pi+0x1dc>)
 8002ef6:	edd3 7a00 	vldr	s15, [r3]
 8002efa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002efe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f06:	dd02      	ble.n	8002f0e <calculate_discrete_pi+0x18a>
 8002f08:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002f0c:	e001      	b.n	8002f12 <calculate_discrete_pi+0x18e>
 8002f0e:	4b14      	ldr	r3, [pc, #80]	@ (8002f60 <calculate_discrete_pi+0x1dc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a13      	ldr	r2, [pc, #76]	@ (8002f60 <calculate_discrete_pi+0x1dc>)
 8002f14:	6013      	str	r3, [r2, #0]
    U = (U < 0.0) ? 0.0 : U;
 8002f16:	4b12      	ldr	r3, [pc, #72]	@ (8002f60 <calculate_discrete_pi+0x1dc>)
 8002f18:	edd3 7a00 	vldr	s15, [r3]
 8002f1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f24:	d502      	bpl.n	8002f2c <calculate_discrete_pi+0x1a8>
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	e001      	b.n	8002f30 <calculate_discrete_pi+0x1ac>
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f60 <calculate_discrete_pi+0x1dc>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a0b      	ldr	r2, [pc, #44]	@ (8002f60 <calculate_discrete_pi+0x1dc>)
 8002f32:	6013      	str	r3, [r2, #0]

    pi->previous_error = error;
 8002f34:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <calculate_discrete_pi+0x1cc>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	60da      	str	r2, [r3, #12]

    return U;
 8002f3c:	4b08      	ldr	r3, [pc, #32]	@ (8002f60 <calculate_discrete_pi+0x1dc>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	ee07 3a90 	vmov	s15, r3
};
 8002f44:	eeb0 0a67 	vmov.f32	s0, s15
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f50:	20000324 	.word	0x20000324
 8002f54:	2000031c 	.word	0x2000031c
 8002f58:	20000328 	.word	0x20000328
 8002f5c:	20000320 	.word	0x20000320
 8002f60:	20000318 	.word	0x20000318

08002f64 <PowerSupply_SetState>:

//ENERGY SYSTEM

// Wył/Wł PowerSupply
void PowerSupply_SetState(GPIO_PinState state) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(PowerSupply_GPIO_Port, PowerSupply_Pin, state);
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	461a      	mov	r2, r3
 8002f72:	2108      	movs	r1, #8
 8002f74:	4803      	ldr	r0, [pc, #12]	@ (8002f84 <PowerSupply_SetState+0x20>)
 8002f76:	f003 fa67 	bl	8006448 <HAL_GPIO_WritePin>
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40020000 	.word	0x40020000

08002f88 <PowerSupply_Off>:

bool PowerSupply_Off(void) {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
    PowerSupply_SetState(GPIO_PIN_SET);
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	f7ff ffe9 	bl	8002f64 <PowerSupply_SetState>
    sendBluetoothData("PS00");
 8002f92:	4805      	ldr	r0, [pc, #20]	@ (8002fa8 <PowerSupply_Off+0x20>)
 8002f94:	f000 f888 	bl	80030a8 <sendBluetoothData>
    return PowerSupply = false;
 8002f98:	4b04      	ldr	r3, [pc, #16]	@ (8002fac <PowerSupply_Off+0x24>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	701a      	strb	r2, [r3, #0]
 8002f9e:	4b03      	ldr	r3, [pc, #12]	@ (8002fac <PowerSupply_Off+0x24>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	0800ce44 	.word	0x0800ce44
 8002fac:	20000368 	.word	0x20000368

08002fb0 <PowerSupply_On>:

bool PowerSupply_On(void) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
    PowerSupply_SetState(GPIO_PIN_RESET);
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	f7ff ffd5 	bl	8002f64 <PowerSupply_SetState>
    sendBluetoothData("PS01");
 8002fba:	4805      	ldr	r0, [pc, #20]	@ (8002fd0 <PowerSupply_On+0x20>)
 8002fbc:	f000 f874 	bl	80030a8 <sendBluetoothData>
    return PowerSupply = true;
 8002fc0:	4b04      	ldr	r3, [pc, #16]	@ (8002fd4 <PowerSupply_On+0x24>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
 8002fc6:	4b03      	ldr	r3, [pc, #12]	@ (8002fd4 <PowerSupply_On+0x24>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	0800ce4c 	.word	0x0800ce4c
 8002fd4:	20000368 	.word	0x20000368

08002fd8 <Battery_SetState>:

// Wył/Wł baterie
void Battery_SetState(GPIO_PinState state) {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(Battery_GPIO_Port, Battery_Pin, state);
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	2108      	movs	r1, #8
 8002fe8:	4803      	ldr	r0, [pc, #12]	@ (8002ff8 <Battery_SetState+0x20>)
 8002fea:	f003 fa2d 	bl	8006448 <HAL_GPIO_WritePin>
}
 8002fee:	bf00      	nop
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40021400 	.word	0x40021400

08002ffc <Battery_Off>:

bool Battery_Off(void) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
    Battery_SetState(GPIO_PIN_SET);
 8003000:	2001      	movs	r0, #1
 8003002:	f7ff ffe9 	bl	8002fd8 <Battery_SetState>
    sendBluetoothData("BT00");
 8003006:	4805      	ldr	r0, [pc, #20]	@ (800301c <Battery_Off+0x20>)
 8003008:	f000 f84e 	bl	80030a8 <sendBluetoothData>
    return Battery = false;
 800300c:	4b04      	ldr	r3, [pc, #16]	@ (8003020 <Battery_Off+0x24>)
 800300e:	2200      	movs	r2, #0
 8003010:	701a      	strb	r2, [r3, #0]
 8003012:	4b03      	ldr	r3, [pc, #12]	@ (8003020 <Battery_Off+0x24>)
 8003014:	781b      	ldrb	r3, [r3, #0]
}
 8003016:	4618      	mov	r0, r3
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	0800ce54 	.word	0x0800ce54
 8003020:	20000369 	.word	0x20000369

08003024 <Battery_On>:

bool Battery_On(void) {
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
    Battery_SetState(GPIO_PIN_RESET);
 8003028:	2000      	movs	r0, #0
 800302a:	f7ff ffd5 	bl	8002fd8 <Battery_SetState>
    sendBluetoothData("BT01");
 800302e:	4805      	ldr	r0, [pc, #20]	@ (8003044 <Battery_On+0x20>)
 8003030:	f000 f83a 	bl	80030a8 <sendBluetoothData>
    return Battery = true;
 8003034:	4b04      	ldr	r3, [pc, #16]	@ (8003048 <Battery_On+0x24>)
 8003036:	2201      	movs	r2, #1
 8003038:	701a      	strb	r2, [r3, #0]
 800303a:	4b03      	ldr	r3, [pc, #12]	@ (8003048 <Battery_On+0x24>)
 800303c:	781b      	ldrb	r3, [r3, #0]
}
 800303e:	4618      	mov	r0, r3
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	0800ce5c 	.word	0x0800ce5c
 8003048:	20000369 	.word	0x20000369

0800304c <Output_SetState>:

// Wył/Wł wyjście
void Output_SetState(GPIO_PinState state) {
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(Output_GPIO_Port, Output_Pin, state);
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	461a      	mov	r2, r3
 800305a:	2120      	movs	r1, #32
 800305c:	4803      	ldr	r0, [pc, #12]	@ (800306c <Output_SetState+0x20>)
 800305e:	f003 f9f3 	bl	8006448 <HAL_GPIO_WritePin>
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40021400 	.word	0x40021400

08003070 <Output_Off>:

bool Output_Off(void) {
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
    Output_SetState(GPIO_PIN_SET);
 8003074:	2001      	movs	r0, #1
 8003076:	f7ff ffe9 	bl	800304c <Output_SetState>
    return Output = false;
 800307a:	4b03      	ldr	r3, [pc, #12]	@ (8003088 <Output_Off+0x18>)
 800307c:	2200      	movs	r2, #0
 800307e:	701a      	strb	r2, [r3, #0]
 8003080:	4b01      	ldr	r3, [pc, #4]	@ (8003088 <Output_Off+0x18>)
 8003082:	781b      	ldrb	r3, [r3, #0]
}
 8003084:	4618      	mov	r0, r3
 8003086:	bd80      	pop	{r7, pc}
 8003088:	2000036a 	.word	0x2000036a

0800308c <Output_On>:

bool Output_On(void) {
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
    Output_SetState(GPIO_PIN_RESET);
 8003090:	2000      	movs	r0, #0
 8003092:	f7ff ffdb 	bl	800304c <Output_SetState>
    return Output = true;
 8003096:	4b03      	ldr	r3, [pc, #12]	@ (80030a4 <Output_On+0x18>)
 8003098:	2201      	movs	r2, #1
 800309a:	701a      	strb	r2, [r3, #0]
 800309c:	4b01      	ldr	r3, [pc, #4]	@ (80030a4 <Output_On+0x18>)
 800309e:	781b      	ldrb	r3, [r3, #0]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	2000036a 	.word	0x2000036a

080030a8 <sendBluetoothData>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void sendBluetoothData(const char* data){
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
	snprintf(buffer, sizeof(buffer), "%s\n", data);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a0c      	ldr	r2, [pc, #48]	@ (80030e4 <sendBluetoothData+0x3c>)
 80030b4:	210a      	movs	r1, #10
 80030b6:	480c      	ldr	r0, [pc, #48]	@ (80030e8 <sendBluetoothData+0x40>)
 80030b8:	f009 f8a0 	bl	800c1fc <sniprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80030bc:	480a      	ldr	r0, [pc, #40]	@ (80030e8 <sendBluetoothData+0x40>)
 80030be:	f7fd f8b1 	bl	8000224 <strlen>
 80030c2:	4603      	mov	r3, r0
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ca:	4907      	ldr	r1, [pc, #28]	@ (80030e8 <sendBluetoothData+0x40>)
 80030cc:	4807      	ldr	r0, [pc, #28]	@ (80030ec <sendBluetoothData+0x44>)
 80030ce:	f007 fd7f 	bl	800abd0 <HAL_UART_Transmit>
	HAL_Delay(500);
 80030d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80030d6:	f002 fe2b 	bl	8005d30 <HAL_Delay>
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	0800ce64 	.word	0x0800ce64
 80030e8:	200002d8 	.word	0x200002d8
 80030ec:	20000584 	.word	0x20000584

080030f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6) {
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a0e      	ldr	r2, [pc, #56]	@ (8003138 <HAL_UART_RxCpltCallback+0x48>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d116      	bne.n	8003130 <HAL_UART_RxCpltCallback+0x40>
        rxIndex++;
 8003102:	4b0e      	ldr	r3, [pc, #56]	@ (800313c <HAL_UART_RxCpltCallback+0x4c>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	3301      	adds	r3, #1
 8003108:	b2da      	uxtb	r2, r3
 800310a:	4b0c      	ldr	r3, [pc, #48]	@ (800313c <HAL_UART_RxCpltCallback+0x4c>)
 800310c:	701a      	strb	r2, [r3, #0]

        if (rxIndex >= RX_BUFFER_SIZE) {
 800310e:	4b0b      	ldr	r3, [pc, #44]	@ (800313c <HAL_UART_RxCpltCallback+0x4c>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b03      	cmp	r3, #3
 8003114:	d902      	bls.n	800311c <HAL_UART_RxCpltCallback+0x2c>
            rxIndex = 0;
 8003116:	4b09      	ldr	r3, [pc, #36]	@ (800313c <HAL_UART_RxCpltCallback+0x4c>)
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(huart, &rxBuffer[rxIndex], 1);
 800311c:	4b07      	ldr	r3, [pc, #28]	@ (800313c <HAL_UART_RxCpltCallback+0x4c>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	4b07      	ldr	r3, [pc, #28]	@ (8003140 <HAL_UART_RxCpltCallback+0x50>)
 8003124:	4413      	add	r3, r2
 8003126:	2201      	movs	r2, #1
 8003128:	4619      	mov	r1, r3
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f007 fdd3 	bl	800acd6 <HAL_UART_Receive_IT>
    }
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40011400 	.word	0x40011400
 800313c:	200002ee 	.word	0x200002ee
 8003140:	200002e4 	.word	0x200002e4

08003144 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	ed2d 8b02 	vpush	{d8}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  if(htim == &htim2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a31      	ldr	r2, [pc, #196]	@ (8003218 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d12d      	bne.n	80031b4 <HAL_TIM_PeriodElapsedCallback+0x70>
  {
	  if((PIR_Garage == true || PIR_Kitchen == true || PIR_Livingroom == true) && alarm == true)
 8003158:	4b30      	ldr	r3, [pc, #192]	@ (800321c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d107      	bne.n	8003170 <HAL_TIM_PeriodElapsedCallback+0x2c>
 8003160:	4b2f      	ldr	r3, [pc, #188]	@ (8003220 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d103      	bne.n	8003170 <HAL_TIM_PeriodElapsedCallback+0x2c>
 8003168:	4b2e      	ldr	r3, [pc, #184]	@ (8003224 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d009      	beq.n	8003184 <HAL_TIM_PeriodElapsedCallback+0x40>
 8003170:	4b2d      	ldr	r3, [pc, #180]	@ (8003228 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_TIM_PeriodElapsedCallback+0x40>
	  {
		  PIR_detected = true, alarmLED = true;
 8003178:	4b2c      	ldr	r3, [pc, #176]	@ (800322c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800317a:	2201      	movs	r2, #1
 800317c:	701a      	strb	r2, [r3, #0]
 800317e:	4b2c      	ldr	r3, [pc, #176]	@ (8003230 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8003180:	2201      	movs	r2, #1
 8003182:	701a      	strb	r2, [r3, #0]
	  }

	  if(alarmLED == true && PIR_detected == true)
 8003184:	4b2a      	ldr	r3, [pc, #168]	@ (8003230 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00d      	beq.n	80031a8 <HAL_TIM_PeriodElapsedCallback+0x64>
 800318c:	4b27      	ldr	r3, [pc, #156]	@ (800322c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d009      	beq.n	80031a8 <HAL_TIM_PeriodElapsedCallback+0x64>
	  {
		  HAL_GPIO_TogglePin(Alarm_LED_GPIO_Port, Alarm_LED_Pin);
 8003194:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003198:	4826      	ldr	r0, [pc, #152]	@ (8003234 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800319a:	f003 f96e 	bl	800647a <HAL_GPIO_TogglePin>
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800319e:	2108      	movs	r1, #8
 80031a0:	481d      	ldr	r0, [pc, #116]	@ (8003218 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80031a2:	f006 fb3f 	bl	8009824 <HAL_TIM_PWM_Start>
 80031a6:	e005      	b.n	80031b4 <HAL_TIM_PeriodElapsedCallback+0x70>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(Alarm_LED_GPIO_Port, Alarm_LED_Pin, GPIO_PIN_RESET);
 80031a8:	2200      	movs	r2, #0
 80031aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80031ae:	4821      	ldr	r0, [pc, #132]	@ (8003234 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80031b0:	f003 f94a 	bl	8006448 <HAL_GPIO_WritePin>
	  };
  }
    if(htim->Instance == TIM4)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003238 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d125      	bne.n	800320a <HAL_TIM_PeriodElapsedCallback+0xc6>
    {
        BMP2_ReadData(&bmp2dev, &press, &temp);
 80031be:	4a1f      	ldr	r2, [pc, #124]	@ (800323c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80031c0:	491f      	ldr	r1, [pc, #124]	@ (8003240 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80031c2:	4820      	ldr	r0, [pc, #128]	@ (8003244 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80031c4:	f7ff f8ae 	bl	8002324 <BMP2_ReadData>
        PI_output = calculate_discrete_pi(&my_PI, setpoint, temp);
 80031c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003248 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80031ca:	ed93 8a00 	vldr	s16, [r3]
 80031ce:	4b1b      	ldr	r3, [pc, #108]	@ (800323c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80031d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d4:	4610      	mov	r0, r2
 80031d6:	4619      	mov	r1, r3
 80031d8:	f7fd fd20 	bl	8000c1c <__aeabi_d2f>
 80031dc:	4603      	mov	r3, r0
 80031de:	ee00 3a90 	vmov	s1, r3
 80031e2:	eeb0 0a48 	vmov.f32	s0, s16
 80031e6:	4819      	ldr	r0, [pc, #100]	@ (800324c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80031e8:	f7ff fdcc 	bl	8002d84 <calculate_discrete_pi>
 80031ec:	eef0 7a40 	vmov.f32	s15, s0
 80031f0:	4b17      	ldr	r3, [pc, #92]	@ (8003250 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80031f2:	edc3 7a00 	vstr	s15, [r3]
        my_PI.previous_measured = temp;
 80031f6:	4b11      	ldr	r3, [pc, #68]	@ (800323c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80031f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fc:	4610      	mov	r0, r2
 80031fe:	4619      	mov	r1, r3
 8003200:	f7fd fd0c 	bl	8000c1c <__aeabi_d2f>
 8003204:	4603      	mov	r3, r0
 8003206:	4a11      	ldr	r2, [pc, #68]	@ (800324c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8003208:	6153      	str	r3, [r2, #20]
    }
}
 800320a:	bf00      	nop
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	ecbd 8b02 	vpop	{d8}
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	200004a0 	.word	0x200004a0
 800321c:	20000300 	.word	0x20000300
 8003220:	20000302 	.word	0x20000302
 8003224:	20000301 	.word	0x20000301
 8003228:	200002fe 	.word	0x200002fe
 800322c:	20000303 	.word	0x20000303
 8003230:	200002ff 	.word	0x200002ff
 8003234:	40021000 	.word	0x40021000
 8003238:	40000800 	.word	0x40000800
 800323c:	20000330 	.word	0x20000330
 8003240:	20000338 	.word	0x20000338
 8003244:	20000018 	.word	0x20000018
 8003248:	20000138 	.word	0x20000138
 800324c:	2000013c 	.word	0x2000013c
 8003250:	2000032c 	.word	0x2000032c
 8003254:	00000000 	.word	0x00000000

08003258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003258:	b5b0      	push	{r4, r5, r7, lr}
 800325a:	b08c      	sub	sp, #48	@ 0x30
 800325c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800325e:	f002 fd0a 	bl	8005c76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003262:	f001 fdff 	bl	8004e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003266:	f7ff f8c1 	bl	80023ec <MX_GPIO_Init>
  MX_TIM2_Init();
 800326a:	f002 f92f 	bl	80054cc <MX_TIM2_Init>
  MX_TIM3_Init();
 800326e:	f002 f9bf 	bl	80055f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003272:	f002 fa3f 	bl	80056f4 <MX_TIM4_Init>
  MX_SPI4_Init();
 8003276:	f001 fe9f 	bl	8004fb8 <MX_SPI4_Init>
  MX_I2C1_Init();
 800327a:	f7ff f9d7 	bl	800262c <MX_I2C1_Init>
  MX_USART6_UART_Init();
 800327e:	f002 fc39 	bl	8005af4 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8003282:	f002 f853 	bl	800532c <MX_TIM1_Init>
  MX_I2C2_Init();
 8003286:	f7ff fa11 	bl	80026ac <MX_I2C2_Init>
  MX_SPI2_Init();
 800328a:	f001 fe59 	bl	8004f40 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  //LOAD CONFIG
  keypad_config();
 800328e:	f7ff faf3 	bl	8002878 <keypad_config>
  //LCD_Initialize();
 //TIMERS AND INTERRUPTS
  HAL_TIM_Base_Start_IT(&htim2);
 8003292:	48a2      	ldr	r0, [pc, #648]	@ (800351c <main+0x2c4>)
 8003294:	f006 f9be 	bl	8009614 <HAL_TIM_Base_Start_IT>
  BMP2_Init(&bmp2dev);
 8003298:	48a1      	ldr	r0, [pc, #644]	@ (8003520 <main+0x2c8>)
 800329a:	f7fe ff77 	bl	800218c <BMP2_Init>
  HAL_TIM_Base_Start_IT(&htim4);
 800329e:	48a1      	ldr	r0, [pc, #644]	@ (8003524 <main+0x2cc>)
 80032a0:	f006 f9b8 	bl	8009614 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80032a4:	2108      	movs	r1, #8
 80032a6:	489f      	ldr	r0, [pc, #636]	@ (8003524 <main+0x2cc>)
 80032a8:	f006 fabc 	bl	8009824 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80032ac:	2108      	movs	r1, #8
 80032ae:	489e      	ldr	r0, [pc, #632]	@ (8003528 <main+0x2d0>)
 80032b0:	f006 fab8 	bl	8009824 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80032b4:	210c      	movs	r1, #12
 80032b6:	489d      	ldr	r0, [pc, #628]	@ (800352c <main+0x2d4>)
 80032b8:	f006 fab4 	bl	8009824 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80032bc:	2100      	movs	r1, #0
 80032be:	489a      	ldr	r0, [pc, #616]	@ (8003528 <main+0x2d0>)
 80032c0:	f006 fab0 	bl	8009824 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80032c4:	2104      	movs	r1, #4
 80032c6:	4898      	ldr	r0, [pc, #608]	@ (8003528 <main+0x2d0>)
 80032c8:	f006 faac 	bl	8009824 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80032cc:	2108      	movs	r1, #8
 80032ce:	4897      	ldr	r0, [pc, #604]	@ (800352c <main+0x2d4>)
 80032d0:	f006 faa8 	bl	8009824 <HAL_TIM_PWM_Start>
  //ENERGY SYSTEM
  INA219_Init(&ina219, &hi2c1, INA219_ADDRESS);
 80032d4:	2240      	movs	r2, #64	@ 0x40
 80032d6:	4996      	ldr	r1, [pc, #600]	@ (8003530 <main+0x2d8>)
 80032d8:	4896      	ldr	r0, [pc, #600]	@ (8003534 <main+0x2dc>)
 80032da:	f7fd ff65 	bl	80011a8 <INA219_Init>
  INA219_Init(&ina219_2, &hi2c2, INA219_ADDRESS);
 80032de:	2240      	movs	r2, #64	@ 0x40
 80032e0:	4995      	ldr	r1, [pc, #596]	@ (8003538 <main+0x2e0>)
 80032e2:	4896      	ldr	r0, [pc, #600]	@ (800353c <main+0x2e4>)
 80032e4:	f7fd ff60 	bl	80011a8 <INA219_Init>
  Output_On();
 80032e8:	f7ff fed0 	bl	800308c <Output_On>
  //START SCREEN
  LCD_WriteCommand(HD44780_CLEAR);
 80032ec:	2001      	movs	r0, #1
 80032ee:	f7ff fc39 	bl	8002b64 <LCD_WriteCommand>
  LCD_WriteText("Welcome to");
 80032f2:	4893      	ldr	r0, [pc, #588]	@ (8003540 <main+0x2e8>)
 80032f4:	f7ff fc5c 	bl	8002bb0 <LCD_WriteText>
  LCD_WriteTextXY("Smarthome system",0,1);
 80032f8:	2201      	movs	r2, #1
 80032fa:	2100      	movs	r1, #0
 80032fc:	4891      	ldr	r0, [pc, #580]	@ (8003544 <main+0x2ec>)
 80032fe:	f7ff fc86 	bl	8002c0e <LCD_WriteTextXY>
  HAL_Delay(3000);
 8003302:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003306:	f002 fd13 	bl	8005d30 <HAL_Delay>
  refreshLCD = true;
 800330a:	4b8f      	ldr	r3, [pc, #572]	@ (8003548 <main+0x2f0>)
 800330c:	2201      	movs	r2, #1
 800330e:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, &rxBuffer[rxIndex], 1);  // Rozpocznij odbiór
 8003310:	4b8e      	ldr	r3, [pc, #568]	@ (800354c <main+0x2f4>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	4b8e      	ldr	r3, [pc, #568]	@ (8003550 <main+0x2f8>)
 8003318:	4413      	add	r3, r2
 800331a:	2201      	movs	r2, #1
 800331c:	4619      	mov	r1, r3
 800331e:	488d      	ldr	r0, [pc, #564]	@ (8003554 <main+0x2fc>)
 8003320:	f007 fcd9 	bl	800acd6 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(HAL_GPIO_ReadPin(PIR_Garage_GPIO_Port, PIR_Garage_Pin) == GPIO_PIN_SET){PIR_Garage = true;}
 8003324:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003328:	488b      	ldr	r0, [pc, #556]	@ (8003558 <main+0x300>)
 800332a:	f003 f875 	bl	8006418 <HAL_GPIO_ReadPin>
 800332e:	4603      	mov	r3, r0
 8003330:	2b01      	cmp	r3, #1
 8003332:	d103      	bne.n	800333c <main+0xe4>
 8003334:	4b89      	ldr	r3, [pc, #548]	@ (800355c <main+0x304>)
 8003336:	2201      	movs	r2, #1
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e002      	b.n	8003342 <main+0xea>
	  	  else {PIR_Garage = false;};
 800333c:	4b87      	ldr	r3, [pc, #540]	@ (800355c <main+0x304>)
 800333e:	2200      	movs	r2, #0
 8003340:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(PIR_Kitchen_GPIO_Port, PIR_Kitchen_Pin) == GPIO_PIN_SET){PIR_Kitchen = true;}
 8003342:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003346:	4884      	ldr	r0, [pc, #528]	@ (8003558 <main+0x300>)
 8003348:	f003 f866 	bl	8006418 <HAL_GPIO_ReadPin>
 800334c:	4603      	mov	r3, r0
 800334e:	2b01      	cmp	r3, #1
 8003350:	d103      	bne.n	800335a <main+0x102>
 8003352:	4b83      	ldr	r3, [pc, #524]	@ (8003560 <main+0x308>)
 8003354:	2201      	movs	r2, #1
 8003356:	701a      	strb	r2, [r3, #0]
 8003358:	e002      	b.n	8003360 <main+0x108>
	  	  else {PIR_Kitchen = false;};
 800335a:	4b81      	ldr	r3, [pc, #516]	@ (8003560 <main+0x308>)
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(PIR_Livingroom_GPIO_Port, PIR_Livingroom_Pin) == GPIO_PIN_SET){PIR_Livingroom = true;}
 8003360:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003364:	487c      	ldr	r0, [pc, #496]	@ (8003558 <main+0x300>)
 8003366:	f003 f857 	bl	8006418 <HAL_GPIO_ReadPin>
 800336a:	4603      	mov	r3, r0
 800336c:	2b01      	cmp	r3, #1
 800336e:	d103      	bne.n	8003378 <main+0x120>
 8003370:	4b7c      	ldr	r3, [pc, #496]	@ (8003564 <main+0x30c>)
 8003372:	2201      	movs	r2, #1
 8003374:	701a      	strb	r2, [r3, #0]
 8003376:	e002      	b.n	800337e <main+0x126>
	  	  else{PIR_Livingroom = false;};
 8003378:	4b7a      	ldr	r3, [pc, #488]	@ (8003564 <main+0x30c>)
 800337a:	2200      	movs	r2, #0
 800337c:	701a      	strb	r2, [r3, #0]
	  move_menu(act_menu);
 800337e:	4b7a      	ldr	r3, [pc, #488]	@ (8003568 <main+0x310>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fc62 	bl	8002c4c <move_menu>
 	if (symbol[0] == '*' && act_menu == mainmenu){
 8003388:	4b78      	ldr	r3, [pc, #480]	@ (800356c <main+0x314>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b2a      	cmp	r3, #42	@ 0x2a
 800338e:	f040 80b0 	bne.w	80034f2 <main+0x29a>
 8003392:	4b75      	ldr	r3, [pc, #468]	@ (8003568 <main+0x310>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a76      	ldr	r2, [pc, #472]	@ (8003570 <main+0x318>)
 8003398:	4293      	cmp	r3, r2
 800339a:	f040 80aa 	bne.w	80034f2 <main+0x29a>
 		refreshLCD = true;
 800339e:	4b6a      	ldr	r3, [pc, #424]	@ (8003548 <main+0x2f0>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	701a      	strb	r2, [r3, #0]
 		switch (position){
 80033a4:	4b73      	ldr	r3, [pc, #460]	@ (8003574 <main+0x31c>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	f200 8095 	bhi.w	80034da <main+0x282>
 80033b0:	a201      	add	r2, pc, #4	@ (adr r2, 80033b8 <main+0x160>)
 80033b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b6:	bf00      	nop
 80033b8:	080033c9 	.word	0x080033c9
 80033bc:	080033dd 	.word	0x080033dd
 80033c0:	080033f1 	.word	0x080033f1
 80033c4:	08003405 	.word	0x08003405
			case 1: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 80033c8:	4b67      	ldr	r3, [pc, #412]	@ (8003568 <main+0x310>)
 80033ca:	4a6b      	ldr	r2, [pc, #428]	@ (8003578 <main+0x320>)
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	4b69      	ldr	r3, [pc, #420]	@ (8003574 <main+0x31c>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	4b69      	ldr	r3, [pc, #420]	@ (800357c <main+0x324>)
 80033d6:	2202      	movs	r2, #2
 80033d8:	701a      	strb	r2, [r3, #0]
 80033da:	e088      	b.n	80034ee <main+0x296>
			case 2: act_menu = menuLivingroom, position = 1, max_pos = 3; break;
 80033dc:	4b62      	ldr	r3, [pc, #392]	@ (8003568 <main+0x310>)
 80033de:	4a68      	ldr	r2, [pc, #416]	@ (8003580 <main+0x328>)
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	4b64      	ldr	r3, [pc, #400]	@ (8003574 <main+0x31c>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	701a      	strb	r2, [r3, #0]
 80033e8:	4b64      	ldr	r3, [pc, #400]	@ (800357c <main+0x324>)
 80033ea:	2203      	movs	r2, #3
 80033ec:	701a      	strb	r2, [r3, #0]
 80033ee:	e07e      	b.n	80034ee <main+0x296>
			case 3: act_menu = menuGarage, position = 1, max_pos = 3; break;
 80033f0:	4b5d      	ldr	r3, [pc, #372]	@ (8003568 <main+0x310>)
 80033f2:	4a64      	ldr	r2, [pc, #400]	@ (8003584 <main+0x32c>)
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	4b5f      	ldr	r3, [pc, #380]	@ (8003574 <main+0x31c>)
 80033f8:	2201      	movs	r2, #1
 80033fa:	701a      	strb	r2, [r3, #0]
 80033fc:	4b5f      	ldr	r3, [pc, #380]	@ (800357c <main+0x324>)
 80033fe:	2203      	movs	r2, #3
 8003400:	701a      	strb	r2, [r3, #0]
 8003402:	e074      	b.n	80034ee <main+0x296>
			case 4:
					i = 0;
 8003404:	4b60      	ldr	r3, [pc, #384]	@ (8003588 <main+0x330>)
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
					HAL_Delay(200);
 800340a:	20c8      	movs	r0, #200	@ 0xc8
 800340c:	f002 fc90 	bl	8005d30 <HAL_Delay>
					memset(buff, 0, sizeof(buff));
 8003410:	2205      	movs	r2, #5
 8003412:	2100      	movs	r1, #0
 8003414:	485d      	ldr	r0, [pc, #372]	@ (800358c <main+0x334>)
 8003416:	f008 ff45 	bl	800c2a4 <memset>
					LCD_WriteCommand(HD44780_CLEAR);
 800341a:	2001      	movs	r0, #1
 800341c:	f7ff fba2 	bl	8002b64 <LCD_WriteCommand>
					LCD_WriteText("Write PIN");
 8003420:	485b      	ldr	r0, [pc, #364]	@ (8003590 <main+0x338>)
 8003422:	f7ff fbc5 	bl	8002bb0 <LCD_WriteText>
					while(1) {
						refreshLCD = true;
 8003426:	4b48      	ldr	r3, [pc, #288]	@ (8003548 <main+0x2f0>)
 8003428:	2201      	movs	r2, #1
 800342a:	701a      	strb	r2, [r3, #0]
						symbol[0] = keypad_readkey();
 800342c:	f7ff fa58 	bl	80028e0 <keypad_readkey>
 8003430:	4603      	mov	r3, r0
 8003432:	461a      	mov	r2, r3
 8003434:	4b4d      	ldr	r3, [pc, #308]	@ (800356c <main+0x314>)
 8003436:	701a      	strb	r2, [r3, #0]
						if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 8003438:	4b4c      	ldr	r3, [pc, #304]	@ (800356c <main+0x314>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b2f      	cmp	r3, #47	@ 0x2f
 800343e:	d922      	bls.n	8003486 <main+0x22e>
 8003440:	4b4a      	ldr	r3, [pc, #296]	@ (800356c <main+0x314>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b39      	cmp	r3, #57	@ 0x39
 8003446:	d81e      	bhi.n	8003486 <main+0x22e>
 8003448:	4b4f      	ldr	r3, [pc, #316]	@ (8003588 <main+0x330>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b03      	cmp	r3, #3
 800344e:	d81a      	bhi.n	8003486 <main+0x22e>
							buff[i] = symbol[0];
 8003450:	4b4d      	ldr	r3, [pc, #308]	@ (8003588 <main+0x330>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a45      	ldr	r2, [pc, #276]	@ (800356c <main+0x314>)
 8003456:	7811      	ldrb	r1, [r2, #0]
 8003458:	4a4c      	ldr	r2, [pc, #304]	@ (800358c <main+0x334>)
 800345a:	54d1      	strb	r1, [r2, r3]
							i++;
 800345c:	4b4a      	ldr	r3, [pc, #296]	@ (8003588 <main+0x330>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3301      	adds	r3, #1
 8003462:	4a49      	ldr	r2, [pc, #292]	@ (8003588 <main+0x330>)
 8003464:	6013      	str	r3, [r2, #0]
							buff[i] = '\0';
 8003466:	4b48      	ldr	r3, [pc, #288]	@ (8003588 <main+0x330>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a48      	ldr	r2, [pc, #288]	@ (800358c <main+0x334>)
 800346c:	2100      	movs	r1, #0
 800346e:	54d1      	strb	r1, [r2, r3]
							LCD_WriteCommand(HD44780_CLEAR);
 8003470:	2001      	movs	r0, #1
 8003472:	f7ff fb77 	bl	8002b64 <LCD_WriteCommand>
							LCD_WriteText("PIN: ");
 8003476:	4847      	ldr	r0, [pc, #284]	@ (8003594 <main+0x33c>)
 8003478:	f7ff fb9a 	bl	8002bb0 <LCD_WriteText>
							LCD_WriteTextXY(buff, 0, 1);
 800347c:	2201      	movs	r2, #1
 800347e:	2100      	movs	r1, #0
 8003480:	4842      	ldr	r0, [pc, #264]	@ (800358c <main+0x334>)
 8003482:	f7ff fbc4 	bl	8002c0e <LCD_WriteTextXY>
						}
						HAL_Delay(300);
 8003486:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800348a:	f002 fc51 	bl	8005d30 <HAL_Delay>
						symbol[0] = keypad_readkey();
 800348e:	f7ff fa27 	bl	80028e0 <keypad_readkey>
 8003492:	4603      	mov	r3, r0
 8003494:	461a      	mov	r2, r3
 8003496:	4b35      	ldr	r3, [pc, #212]	@ (800356c <main+0x314>)
 8003498:	701a      	strb	r2, [r3, #0]
						if(symbol[0] == '*') {
 800349a:	4b34      	ldr	r3, [pc, #208]	@ (800356c <main+0x314>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b2a      	cmp	r3, #42	@ 0x2a
 80034a0:	d115      	bne.n	80034ce <main+0x276>
							pinKey = atoi(buff);
 80034a2:	483a      	ldr	r0, [pc, #232]	@ (800358c <main+0x334>)
 80034a4:	f008 fe22 	bl	800c0ec <atoi>
 80034a8:	4603      	mov	r3, r0
 80034aa:	4a3b      	ldr	r2, [pc, #236]	@ (8003598 <main+0x340>)
 80034ac:	6013      	str	r3, [r2, #0]
							if(pinKey == 1234) {
 80034ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003598 <main+0x340>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d10d      	bne.n	80034d6 <main+0x27e>
								act_menu = menuAlarm, position = 1, max_pos = 2; break;
 80034ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003568 <main+0x310>)
 80034bc:	4a37      	ldr	r2, [pc, #220]	@ (800359c <main+0x344>)
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	4b2c      	ldr	r3, [pc, #176]	@ (8003574 <main+0x31c>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	701a      	strb	r2, [r3, #0]
 80034c6:	4b2d      	ldr	r3, [pc, #180]	@ (800357c <main+0x324>)
 80034c8:	2202      	movs	r2, #2
 80034ca:	701a      	strb	r2, [r3, #0]
 80034cc:	e004      	b.n	80034d8 <main+0x280>
							}
							break;
						}
						HAL_Delay(100);
 80034ce:	2064      	movs	r0, #100	@ 0x64
 80034d0:	f002 fc2e 	bl	8005d30 <HAL_Delay>
						refreshLCD = true;
 80034d4:	e7a7      	b.n	8003426 <main+0x1ce>
							break;
 80034d6:	bf00      	nop
					}
					break;
 80034d8:	e009      	b.n	80034ee <main+0x296>
			default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 80034da:	4b23      	ldr	r3, [pc, #140]	@ (8003568 <main+0x310>)
 80034dc:	4a26      	ldr	r2, [pc, #152]	@ (8003578 <main+0x320>)
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	4b24      	ldr	r3, [pc, #144]	@ (8003574 <main+0x31c>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	701a      	strb	r2, [r3, #0]
 80034e6:	4b25      	ldr	r3, [pc, #148]	@ (800357c <main+0x324>)
 80034e8:	2202      	movs	r2, #2
 80034ea:	701a      	strb	r2, [r3, #0]
 80034ec:	bf00      	nop
 		switch (position){
 80034ee:	f000 bebb 	b.w	8004268 <main+0x1010>
 		}
 	}
 	else if(symbol[0] == '*' && act_menu == menuAlarm){
 80034f2:	4b1e      	ldr	r3, [pc, #120]	@ (800356c <main+0x314>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80034f8:	f040 80a4 	bne.w	8003644 <main+0x3ec>
 80034fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003568 <main+0x310>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a26      	ldr	r2, [pc, #152]	@ (800359c <main+0x344>)
 8003502:	4293      	cmp	r3, r2
 8003504:	f040 809e 	bne.w	8003644 <main+0x3ec>
 		refreshLCD = true;
 8003508:	4b0f      	ldr	r3, [pc, #60]	@ (8003548 <main+0x2f0>)
 800350a:	2201      	movs	r2, #1
 800350c:	701a      	strb	r2, [r3, #0]
 		switch (position){
 800350e:	4b19      	ldr	r3, [pc, #100]	@ (8003574 <main+0x31c>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d044      	beq.n	80035a0 <main+0x348>
 8003516:	2b02      	cmp	r3, #2
 8003518:	d063      	beq.n	80035e2 <main+0x38a>
 800351a:	e087      	b.n	800362c <main+0x3d4>
 800351c:	200004a0 	.word	0x200004a0
 8003520:	20000018 	.word	0x20000018
 8003524:	20000538 	.word	0x20000538
 8003528:	20000454 	.word	0x20000454
 800352c:	200004ec 	.word	0x200004ec
 8003530:	200001dc 	.word	0x200001dc
 8003534:	20000348 	.word	0x20000348
 8003538:	20000230 	.word	0x20000230
 800353c:	20000350 	.word	0x20000350
 8003540:	0800ce68 	.word	0x0800ce68
 8003544:	0800ce74 	.word	0x0800ce74
 8003548:	200002fd 	.word	0x200002fd
 800354c:	200002ee 	.word	0x200002ee
 8003550:	200002e4 	.word	0x200002e4
 8003554:	20000584 	.word	0x20000584
 8003558:	40021000 	.word	0x40021000
 800355c:	20000300 	.word	0x20000300
 8003560:	20000302 	.word	0x20000302
 8003564:	20000301 	.word	0x20000301
 8003568:	20000128 	.word	0x20000128
 800356c:	20000298 	.word	0x20000298
 8003570:	20000058 	.word	0x20000058
 8003574:	20000054 	.word	0x20000054
 8003578:	20000068 	.word	0x20000068
 800357c:	20000055 	.word	0x20000055
 8003580:	20000098 	.word	0x20000098
 8003584:	200000d8 	.word	0x200000d8
 8003588:	20000308 	.word	0x20000308
 800358c:	2000029c 	.word	0x2000029c
 8003590:	0800ce88 	.word	0x0800ce88
 8003594:	0800ce94 	.word	0x0800ce94
 8003598:	2000030c 	.word	0x2000030c
 800359c:	20000118 	.word	0x20000118
			case 1: alarm = true;
 80035a0:	4ba2      	ldr	r3, [pc, #648]	@ (800382c <main+0x5d4>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	701a      	strb	r2, [r3, #0]
				PIR_detected = false;
 80035a6:	4ba2      	ldr	r3, [pc, #648]	@ (8003830 <main+0x5d8>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	701a      	strb	r2, [r3, #0]
				alarmLED = false;
 80035ac:	4ba1      	ldr	r3, [pc, #644]	@ (8003834 <main+0x5dc>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	701a      	strb	r2, [r3, #0]
				LCD_WriteCommand(HD44780_CLEAR);
 80035b2:	2001      	movs	r0, #1
 80035b4:	f7ff fad6 	bl	8002b64 <LCD_WriteCommand>
				LCD_WriteText("Alarm");
 80035b8:	489f      	ldr	r0, [pc, #636]	@ (8003838 <main+0x5e0>)
 80035ba:	f7ff faf9 	bl	8002bb0 <LCD_WriteText>
				LCD_WriteTextXY("turned on",0,1);
 80035be:	2201      	movs	r2, #1
 80035c0:	2100      	movs	r1, #0
 80035c2:	489e      	ldr	r0, [pc, #632]	@ (800383c <main+0x5e4>)
 80035c4:	f7ff fb23 	bl	8002c0e <LCD_WriteTextXY>
				HAL_TIM_Base_Start_IT(&htim2);
 80035c8:	489d      	ldr	r0, [pc, #628]	@ (8003840 <main+0x5e8>)
 80035ca:	f006 f823 	bl	8009614 <HAL_TIM_Base_Start_IT>
				act_menu = mainmenu, position = 1, max_pos = 4;
 80035ce:	4b9d      	ldr	r3, [pc, #628]	@ (8003844 <main+0x5ec>)
 80035d0:	4a9d      	ldr	r2, [pc, #628]	@ (8003848 <main+0x5f0>)
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	4b9d      	ldr	r3, [pc, #628]	@ (800384c <main+0x5f4>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	701a      	strb	r2, [r3, #0]
 80035da:	4b9d      	ldr	r3, [pc, #628]	@ (8003850 <main+0x5f8>)
 80035dc:	2204      	movs	r2, #4
 80035de:	701a      	strb	r2, [r3, #0]
				break;
 80035e0:	e02e      	b.n	8003640 <main+0x3e8>

 	 		case 2: alarm = false;
 80035e2:	4b92      	ldr	r3, [pc, #584]	@ (800382c <main+0x5d4>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	701a      	strb	r2, [r3, #0]
				PIR_detected = false;
 80035e8:	4b91      	ldr	r3, [pc, #580]	@ (8003830 <main+0x5d8>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	701a      	strb	r2, [r3, #0]
				alarmLED = false;
 80035ee:	4b91      	ldr	r3, [pc, #580]	@ (8003834 <main+0x5dc>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	701a      	strb	r2, [r3, #0]
				LCD_WriteCommand(HD44780_CLEAR);
 80035f4:	2001      	movs	r0, #1
 80035f6:	f7ff fab5 	bl	8002b64 <LCD_WriteCommand>
				LCD_WriteText("Alarm");
 80035fa:	488f      	ldr	r0, [pc, #572]	@ (8003838 <main+0x5e0>)
 80035fc:	f7ff fad8 	bl	8002bb0 <LCD_WriteText>
				LCD_WriteTextXY("turned off",0,1);
 8003600:	2201      	movs	r2, #1
 8003602:	2100      	movs	r1, #0
 8003604:	4893      	ldr	r0, [pc, #588]	@ (8003854 <main+0x5fc>)
 8003606:	f7ff fb02 	bl	8002c0e <LCD_WriteTextXY>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800360a:	2108      	movs	r1, #8
 800360c:	488c      	ldr	r0, [pc, #560]	@ (8003840 <main+0x5e8>)
 800360e:	f006 fa03 	bl	8009a18 <HAL_TIM_PWM_Stop>
				HAL_TIM_Base_Stop_IT(&htim2);
 8003612:	488b      	ldr	r0, [pc, #556]	@ (8003840 <main+0x5e8>)
 8003614:	f006 f876 	bl	8009704 <HAL_TIM_Base_Stop_IT>
				act_menu = mainmenu, position = 1, max_pos = 4;
 8003618:	4b8a      	ldr	r3, [pc, #552]	@ (8003844 <main+0x5ec>)
 800361a:	4a8b      	ldr	r2, [pc, #556]	@ (8003848 <main+0x5f0>)
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	4b8b      	ldr	r3, [pc, #556]	@ (800384c <main+0x5f4>)
 8003620:	2201      	movs	r2, #1
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	4b8a      	ldr	r3, [pc, #552]	@ (8003850 <main+0x5f8>)
 8003626:	2204      	movs	r2, #4
 8003628:	701a      	strb	r2, [r3, #0]
				break;
 800362a:	e009      	b.n	8003640 <main+0x3e8>

 	 		default: act_menu = menuAlarm, position = 1, max_pos = 2; break;
 800362c:	4b85      	ldr	r3, [pc, #532]	@ (8003844 <main+0x5ec>)
 800362e:	4a8a      	ldr	r2, [pc, #552]	@ (8003858 <main+0x600>)
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	4b86      	ldr	r3, [pc, #536]	@ (800384c <main+0x5f4>)
 8003634:	2201      	movs	r2, #1
 8003636:	701a      	strb	r2, [r3, #0]
 8003638:	4b85      	ldr	r3, [pc, #532]	@ (8003850 <main+0x5f8>)
 800363a:	2202      	movs	r2, #2
 800363c:	701a      	strb	r2, [r3, #0]
 800363e:	bf00      	nop
 		switch (position){
 8003640:	f000 be12 	b.w	8004268 <main+0x1010>
 		}
 	}
	else if(symbol[0] == '*' && act_menu == menuKitchen){
 8003644:	4b85      	ldr	r3, [pc, #532]	@ (800385c <main+0x604>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b2a      	cmp	r3, #42	@ 0x2a
 800364a:	d12e      	bne.n	80036aa <main+0x452>
 800364c:	4b7d      	ldr	r3, [pc, #500]	@ (8003844 <main+0x5ec>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a83      	ldr	r2, [pc, #524]	@ (8003860 <main+0x608>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d129      	bne.n	80036aa <main+0x452>
		refreshLCD = true;
 8003656:	4b83      	ldr	r3, [pc, #524]	@ (8003864 <main+0x60c>)
 8003658:	2201      	movs	r2, #1
 800365a:	701a      	strb	r2, [r3, #0]
		switch (position){
 800365c:	4b7b      	ldr	r3, [pc, #492]	@ (800384c <main+0x5f4>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d002      	beq.n	800366a <main+0x412>
 8003664:	2b02      	cmp	r3, #2
 8003666:	d00a      	beq.n	800367e <main+0x426>
 8003668:	e013      	b.n	8003692 <main+0x43a>
			case 1: act_menu = menuKitchenLighting, position = 1, max_pos = 3; break;
 800366a:	4b76      	ldr	r3, [pc, #472]	@ (8003844 <main+0x5ec>)
 800366c:	4a7e      	ldr	r2, [pc, #504]	@ (8003868 <main+0x610>)
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	4b76      	ldr	r3, [pc, #472]	@ (800384c <main+0x5f4>)
 8003672:	2201      	movs	r2, #1
 8003674:	701a      	strb	r2, [r3, #0]
 8003676:	4b76      	ldr	r3, [pc, #472]	@ (8003850 <main+0x5f8>)
 8003678:	2203      	movs	r2, #3
 800367a:	701a      	strb	r2, [r3, #0]
 800367c:	e013      	b.n	80036a6 <main+0x44e>
			case 2: act_menu = menuKitchenShutter, position = 1, max_pos = 2; break;
 800367e:	4b71      	ldr	r3, [pc, #452]	@ (8003844 <main+0x5ec>)
 8003680:	4a7a      	ldr	r2, [pc, #488]	@ (800386c <main+0x614>)
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	4b71      	ldr	r3, [pc, #452]	@ (800384c <main+0x5f4>)
 8003686:	2201      	movs	r2, #1
 8003688:	701a      	strb	r2, [r3, #0]
 800368a:	4b71      	ldr	r3, [pc, #452]	@ (8003850 <main+0x5f8>)
 800368c:	2202      	movs	r2, #2
 800368e:	701a      	strb	r2, [r3, #0]
 8003690:	e009      	b.n	80036a6 <main+0x44e>
			default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8003692:	4b6c      	ldr	r3, [pc, #432]	@ (8003844 <main+0x5ec>)
 8003694:	4a72      	ldr	r2, [pc, #456]	@ (8003860 <main+0x608>)
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	4b6c      	ldr	r3, [pc, #432]	@ (800384c <main+0x5f4>)
 800369a:	2201      	movs	r2, #1
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	4b6c      	ldr	r3, [pc, #432]	@ (8003850 <main+0x5f8>)
 80036a0:	2202      	movs	r2, #2
 80036a2:	701a      	strb	r2, [r3, #0]
 80036a4:	bf00      	nop
		switch (position){
 80036a6:	f000 bddf 	b.w	8004268 <main+0x1010>
		}
	}
	else if(symbol[0] == '*' && act_menu == menuKitchenLighting){
 80036aa:	4b6c      	ldr	r3, [pc, #432]	@ (800385c <main+0x604>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80036b0:	f040 80ea 	bne.w	8003888 <main+0x630>
 80036b4:	4b63      	ldr	r3, [pc, #396]	@ (8003844 <main+0x5ec>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a6b      	ldr	r2, [pc, #428]	@ (8003868 <main+0x610>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	f040 80e4 	bne.w	8003888 <main+0x630>
 		 	 		refreshLCD = true;
 80036c0:	4b68      	ldr	r3, [pc, #416]	@ (8003864 <main+0x60c>)
 80036c2:	2201      	movs	r2, #1
 80036c4:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 80036c6:	4b61      	ldr	r3, [pc, #388]	@ (800384c <main+0x5f4>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d02c      	beq.n	8003728 <main+0x4d0>
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	f300 80a0 	bgt.w	8003814 <main+0x5bc>
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d002      	beq.n	80036de <main+0x486>
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d015      	beq.n	8003708 <main+0x4b0>
 80036dc:	e09a      	b.n	8003814 <main+0x5bc>
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 80036de:	2001      	movs	r0, #1
 80036e0:	f7ff fa40 	bl	8002b64 <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 80036e4:	4862      	ldr	r0, [pc, #392]	@ (8003870 <main+0x618>)
 80036e6:	f7ff fa63 	bl	8002bb0 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 80036ea:	2201      	movs	r2, #1
 80036ec:	2100      	movs	r1, #0
 80036ee:	4853      	ldr	r0, [pc, #332]	@ (800383c <main+0x5e4>)
 80036f0:	f7ff fa8d 	bl	8002c0e <LCD_WriteTextXY>
 		 	 				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, brightnessKitchen);
 80036f4:	4b5f      	ldr	r3, [pc, #380]	@ (8003874 <main+0x61c>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4b51      	ldr	r3, [pc, #324]	@ (8003840 <main+0x5e8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	641a      	str	r2, [r3, #64]	@ 0x40
 		 	 				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80036fe:	210c      	movs	r1, #12
 8003700:	484f      	ldr	r0, [pc, #316]	@ (8003840 <main+0x5e8>)
 8003702:	f006 f88f 	bl	8009824 <HAL_TIM_PWM_Start>
 		 	 				break;
 8003706:	e08f      	b.n	8003828 <main+0x5d0>

 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 8003708:	2001      	movs	r0, #1
 800370a:	f7ff fa2b 	bl	8002b64 <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 800370e:	4858      	ldr	r0, [pc, #352]	@ (8003870 <main+0x618>)
 8003710:	f7ff fa4e 	bl	8002bb0 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 8003714:	2201      	movs	r2, #1
 8003716:	2100      	movs	r1, #0
 8003718:	484e      	ldr	r0, [pc, #312]	@ (8003854 <main+0x5fc>)
 800371a:	f7ff fa78 	bl	8002c0e <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 800371e:	210c      	movs	r1, #12
 8003720:	4847      	ldr	r0, [pc, #284]	@ (8003840 <main+0x5e8>)
 8003722:	f006 f979 	bl	8009a18 <HAL_TIM_PWM_Stop>
 				 	 		break;
 8003726:	e07f      	b.n	8003828 <main+0x5d0>

 		 	 		case 3:
							i = 0;
 8003728:	4b53      	ldr	r3, [pc, #332]	@ (8003878 <main+0x620>)
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
							HAL_Delay(200);
 800372e:	20c8      	movs	r0, #200	@ 0xc8
 8003730:	f002 fafe 	bl	8005d30 <HAL_Delay>
							memset(buff, 0, sizeof(buff));
 8003734:	2205      	movs	r2, #5
 8003736:	2100      	movs	r1, #0
 8003738:	4850      	ldr	r0, [pc, #320]	@ (800387c <main+0x624>)
 800373a:	f008 fdb3 	bl	800c2a4 <memset>
							LCD_WriteCommand(HD44780_CLEAR);
 800373e:	2001      	movs	r0, #1
 8003740:	f7ff fa10 	bl	8002b64 <LCD_WriteCommand>
							LCD_WriteText("Write Bright");
 8003744:	484e      	ldr	r0, [pc, #312]	@ (8003880 <main+0x628>)
 8003746:	f7ff fa33 	bl	8002bb0 <LCD_WriteText>
							while(1) {
								refreshLCD = true;
 800374a:	4b46      	ldr	r3, [pc, #280]	@ (8003864 <main+0x60c>)
 800374c:	2201      	movs	r2, #1
 800374e:	701a      	strb	r2, [r3, #0]
								symbol[0] = keypad_readkey();
 8003750:	f7ff f8c6 	bl	80028e0 <keypad_readkey>
 8003754:	4603      	mov	r3, r0
 8003756:	461a      	mov	r2, r3
 8003758:	4b40      	ldr	r3, [pc, #256]	@ (800385c <main+0x604>)
 800375a:	701a      	strb	r2, [r3, #0]
								if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 800375c:	4b3f      	ldr	r3, [pc, #252]	@ (800385c <main+0x604>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b2f      	cmp	r3, #47	@ 0x2f
 8003762:	d922      	bls.n	80037aa <main+0x552>
 8003764:	4b3d      	ldr	r3, [pc, #244]	@ (800385c <main+0x604>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b39      	cmp	r3, #57	@ 0x39
 800376a:	d81e      	bhi.n	80037aa <main+0x552>
 800376c:	4b42      	ldr	r3, [pc, #264]	@ (8003878 <main+0x620>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b03      	cmp	r3, #3
 8003772:	d81a      	bhi.n	80037aa <main+0x552>
									buff[i] = symbol[0];
 8003774:	4b40      	ldr	r3, [pc, #256]	@ (8003878 <main+0x620>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a38      	ldr	r2, [pc, #224]	@ (800385c <main+0x604>)
 800377a:	7811      	ldrb	r1, [r2, #0]
 800377c:	4a3f      	ldr	r2, [pc, #252]	@ (800387c <main+0x624>)
 800377e:	54d1      	strb	r1, [r2, r3]
									i++;
 8003780:	4b3d      	ldr	r3, [pc, #244]	@ (8003878 <main+0x620>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3301      	adds	r3, #1
 8003786:	4a3c      	ldr	r2, [pc, #240]	@ (8003878 <main+0x620>)
 8003788:	6013      	str	r3, [r2, #0]
									buff[i] = '\0';
 800378a:	4b3b      	ldr	r3, [pc, #236]	@ (8003878 <main+0x620>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a3b      	ldr	r2, [pc, #236]	@ (800387c <main+0x624>)
 8003790:	2100      	movs	r1, #0
 8003792:	54d1      	strb	r1, [r2, r3]
									LCD_WriteCommand(HD44780_CLEAR);
 8003794:	2001      	movs	r0, #1
 8003796:	f7ff f9e5 	bl	8002b64 <LCD_WriteCommand>
									LCD_WriteText("Brightness: ");
 800379a:	483a      	ldr	r0, [pc, #232]	@ (8003884 <main+0x62c>)
 800379c:	f7ff fa08 	bl	8002bb0 <LCD_WriteText>
									LCD_WriteTextXY(buff, 0, 1);
 80037a0:	2201      	movs	r2, #1
 80037a2:	2100      	movs	r1, #0
 80037a4:	4835      	ldr	r0, [pc, #212]	@ (800387c <main+0x624>)
 80037a6:	f7ff fa32 	bl	8002c0e <LCD_WriteTextXY>
								}
								HAL_Delay(200);
 80037aa:	20c8      	movs	r0, #200	@ 0xc8
 80037ac:	f002 fac0 	bl	8005d30 <HAL_Delay>
								symbol[0] = keypad_readkey();
 80037b0:	f7ff f896 	bl	80028e0 <keypad_readkey>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461a      	mov	r2, r3
 80037b8:	4b28      	ldr	r3, [pc, #160]	@ (800385c <main+0x604>)
 80037ba:	701a      	strb	r2, [r3, #0]
								if(symbol[0] == '*') {
 80037bc:	4b27      	ldr	r3, [pc, #156]	@ (800385c <main+0x604>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80037c2:	d123      	bne.n	800380c <main+0x5b4>
									brightnessKitchen = atoi(buff)*10;
 80037c4:	482d      	ldr	r0, [pc, #180]	@ (800387c <main+0x624>)
 80037c6:	f008 fc91 	bl	800c0ec <atoi>
 80037ca:	4602      	mov	r2, r0
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	461a      	mov	r2, r3
 80037d6:	4b27      	ldr	r3, [pc, #156]	@ (8003874 <main+0x61c>)
 80037d8:	601a      	str	r2, [r3, #0]
									if(brightnessKitchen >= 1000) {
 80037da:	4b26      	ldr	r3, [pc, #152]	@ (8003874 <main+0x61c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037e2:	db03      	blt.n	80037ec <main+0x594>
										brightnessKitchen = 999;
 80037e4:	4b23      	ldr	r3, [pc, #140]	@ (8003874 <main+0x61c>)
 80037e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80037ea:	601a      	str	r2, [r3, #0]
									}
								   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, brightnessKitchen);
 80037ec:	4b21      	ldr	r3, [pc, #132]	@ (8003874 <main+0x61c>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4b13      	ldr	r3, [pc, #76]	@ (8003840 <main+0x5e8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	641a      	str	r2, [r3, #64]	@ 0x40
									act_menu = menuKitchenLighting;
 80037f6:	4b13      	ldr	r3, [pc, #76]	@ (8003844 <main+0x5ec>)
 80037f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003868 <main+0x610>)
 80037fa:	601a      	str	r2, [r3, #0]
									position = 1;
 80037fc:	4b13      	ldr	r3, [pc, #76]	@ (800384c <main+0x5f4>)
 80037fe:	2201      	movs	r2, #1
 8003800:	701a      	strb	r2, [r3, #0]
									max_pos = 3;
 8003802:	4b13      	ldr	r3, [pc, #76]	@ (8003850 <main+0x5f8>)
 8003804:	2203      	movs	r2, #3
 8003806:	701a      	strb	r2, [r3, #0]
									break;
 8003808:	bf00      	nop
								}
								HAL_Delay(100);
							}
							break;
 800380a:	e00d      	b.n	8003828 <main+0x5d0>
								HAL_Delay(100);
 800380c:	2064      	movs	r0, #100	@ 0x64
 800380e:	f002 fa8f 	bl	8005d30 <HAL_Delay>
								refreshLCD = true;
 8003812:	e79a      	b.n	800374a <main+0x4f2>
 		 	 		default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8003814:	4b0b      	ldr	r3, [pc, #44]	@ (8003844 <main+0x5ec>)
 8003816:	4a12      	ldr	r2, [pc, #72]	@ (8003860 <main+0x608>)
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	4b0c      	ldr	r3, [pc, #48]	@ (800384c <main+0x5f4>)
 800381c:	2201      	movs	r2, #1
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	4b0b      	ldr	r3, [pc, #44]	@ (8003850 <main+0x5f8>)
 8003822:	2202      	movs	r2, #2
 8003824:	701a      	strb	r2, [r3, #0]
 8003826:	bf00      	nop
 		 	 	  switch (position){
 8003828:	f000 bd1e 	b.w	8004268 <main+0x1010>
 800382c:	200002fe 	.word	0x200002fe
 8003830:	20000303 	.word	0x20000303
 8003834:	200002ff 	.word	0x200002ff
 8003838:	0800ce9c 	.word	0x0800ce9c
 800383c:	0800cea4 	.word	0x0800cea4
 8003840:	200004a0 	.word	0x200004a0
 8003844:	20000128 	.word	0x20000128
 8003848:	20000058 	.word	0x20000058
 800384c:	20000054 	.word	0x20000054
 8003850:	20000055 	.word	0x20000055
 8003854:	0800ceb0 	.word	0x0800ceb0
 8003858:	20000118 	.word	0x20000118
 800385c:	20000298 	.word	0x20000298
 8003860:	20000068 	.word	0x20000068
 8003864:	200002fd 	.word	0x200002fd
 8003868:	20000078 	.word	0x20000078
 800386c:	20000088 	.word	0x20000088
 8003870:	0800cebc 	.word	0x0800cebc
 8003874:	20000130 	.word	0x20000130
 8003878:	20000308 	.word	0x20000308
 800387c:	2000029c 	.word	0x2000029c
 8003880:	0800cec4 	.word	0x0800cec4
 8003884:	0800ced4 	.word	0x0800ced4
 		 	 	  	  }
	}

	else if(symbol[0] == '*' && act_menu == menuKitchenShutter) {
 8003888:	4ba0      	ldr	r3, [pc, #640]	@ (8003b0c <main+0x8b4>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b2a      	cmp	r3, #42	@ 0x2a
 800388e:	d144      	bne.n	800391a <main+0x6c2>
 8003890:	4b9f      	ldr	r3, [pc, #636]	@ (8003b10 <main+0x8b8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a9f      	ldr	r2, [pc, #636]	@ (8003b14 <main+0x8bc>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d13f      	bne.n	800391a <main+0x6c2>
			refreshLCD = true;
 800389a:	4b9f      	ldr	r3, [pc, #636]	@ (8003b18 <main+0x8c0>)
 800389c:	2201      	movs	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]

			switch(position) {
 80038a0:	4b9e      	ldr	r3, [pc, #632]	@ (8003b1c <main+0x8c4>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d003      	beq.n	80038b0 <main+0x658>
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d01c      	beq.n	80038e6 <main+0x68e>
 80038ac:	f000 bcdc 	b.w	8004268 <main+0x1010>
				case 1:
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 500);
 80038b0:	4b9b      	ldr	r3, [pc, #620]	@ (8003b20 <main+0x8c8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80038b8:	635a      	str	r2, [r3, #52]	@ 0x34
					HAL_Delay(500);
 80038ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80038be:	f002 fa37 	bl	8005d30 <HAL_Delay>
				   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 80038c2:	4b97      	ldr	r3, [pc, #604]	@ (8003b20 <main+0x8c8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2200      	movs	r2, #0
 80038c8:	635a      	str	r2, [r3, #52]	@ 0x34
				   kitchenShutter = true;
 80038ca:	4b96      	ldr	r3, [pc, #600]	@ (8003b24 <main+0x8cc>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	701a      	strb	r2, [r3, #0]
				   LCD_WriteText("Shutter");
 80038d0:	4895      	ldr	r0, [pc, #596]	@ (8003b28 <main+0x8d0>)
 80038d2:	f7ff f96d 	bl	8002bb0 <LCD_WriteText>
				   LCD_WriteTextXY("is lowering",0,1);
 80038d6:	2201      	movs	r2, #1
 80038d8:	2100      	movs	r1, #0
 80038da:	4894      	ldr	r0, [pc, #592]	@ (8003b2c <main+0x8d4>)
 80038dc:	f7ff f997 	bl	8002c0e <LCD_WriteTextXY>
				   break;
 80038e0:	bf00      	nop
			switch(position) {
 80038e2:	f000 bcc1 	b.w	8004268 <main+0x1010>
				case 2:
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 2000);
 80038e6:	4b8e      	ldr	r3, [pc, #568]	@ (8003b20 <main+0x8c8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80038ee:	635a      	str	r2, [r3, #52]	@ 0x34
					HAL_Delay(500);
 80038f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80038f4:	f002 fa1c 	bl	8005d30 <HAL_Delay>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80038f8:	4b89      	ldr	r3, [pc, #548]	@ (8003b20 <main+0x8c8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2200      	movs	r2, #0
 80038fe:	635a      	str	r2, [r3, #52]	@ 0x34
					kitchenShutter = false;
 8003900:	4b88      	ldr	r3, [pc, #544]	@ (8003b24 <main+0x8cc>)
 8003902:	2200      	movs	r2, #0
 8003904:	701a      	strb	r2, [r3, #0]
					LCD_WriteText("Shutter");
 8003906:	4888      	ldr	r0, [pc, #544]	@ (8003b28 <main+0x8d0>)
 8003908:	f7ff f952 	bl	8002bb0 <LCD_WriteText>
					LCD_WriteTextXY("go up",0,1);
 800390c:	2201      	movs	r2, #1
 800390e:	2100      	movs	r1, #0
 8003910:	4887      	ldr	r0, [pc, #540]	@ (8003b30 <main+0x8d8>)
 8003912:	f7ff f97c 	bl	8002c0e <LCD_WriteTextXY>
			switch(position) {
 8003916:	f000 bca7 	b.w	8004268 <main+0x1010>
			}
	}

	else if(symbol[0] == '*' && act_menu == menuLivingroom){
 800391a:	4b7c      	ldr	r3, [pc, #496]	@ (8003b0c <main+0x8b4>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003920:	d13c      	bne.n	800399c <main+0x744>
 8003922:	4b7b      	ldr	r3, [pc, #492]	@ (8003b10 <main+0x8b8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a83      	ldr	r2, [pc, #524]	@ (8003b34 <main+0x8dc>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d137      	bne.n	800399c <main+0x744>
					refreshLCD = true;
 800392c:	4b7a      	ldr	r3, [pc, #488]	@ (8003b18 <main+0x8c0>)
 800392e:	2201      	movs	r2, #1
 8003930:	701a      	strb	r2, [r3, #0]
				  switch (position){
 8003932:	4b7a      	ldr	r3, [pc, #488]	@ (8003b1c <main+0x8c4>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b03      	cmp	r3, #3
 8003938:	d01a      	beq.n	8003970 <main+0x718>
 800393a:	2b03      	cmp	r3, #3
 800393c:	dc22      	bgt.n	8003984 <main+0x72c>
 800393e:	2b01      	cmp	r3, #1
 8003940:	d002      	beq.n	8003948 <main+0x6f0>
 8003942:	2b02      	cmp	r3, #2
 8003944:	d00a      	beq.n	800395c <main+0x704>
 8003946:	e01d      	b.n	8003984 <main+0x72c>
						case 1: act_menu = menuLivingroomTemperature, position = 1, max_pos = 2; break;
 8003948:	4b71      	ldr	r3, [pc, #452]	@ (8003b10 <main+0x8b8>)
 800394a:	4a7b      	ldr	r2, [pc, #492]	@ (8003b38 <main+0x8e0>)
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	4b73      	ldr	r3, [pc, #460]	@ (8003b1c <main+0x8c4>)
 8003950:	2201      	movs	r2, #1
 8003952:	701a      	strb	r2, [r3, #0]
 8003954:	4b79      	ldr	r3, [pc, #484]	@ (8003b3c <main+0x8e4>)
 8003956:	2202      	movs	r2, #2
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	e01d      	b.n	8003998 <main+0x740>
						case 2: act_menu = menuLivingroomLighting, position = 1, max_pos = 3; break;
 800395c:	4b6c      	ldr	r3, [pc, #432]	@ (8003b10 <main+0x8b8>)
 800395e:	4a78      	ldr	r2, [pc, #480]	@ (8003b40 <main+0x8e8>)
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	4b6e      	ldr	r3, [pc, #440]	@ (8003b1c <main+0x8c4>)
 8003964:	2201      	movs	r2, #1
 8003966:	701a      	strb	r2, [r3, #0]
 8003968:	4b74      	ldr	r3, [pc, #464]	@ (8003b3c <main+0x8e4>)
 800396a:	2203      	movs	r2, #3
 800396c:	701a      	strb	r2, [r3, #0]
 800396e:	e013      	b.n	8003998 <main+0x740>
						case 3: act_menu = menuLivingroomShutter, position = 1, max_pos = 2; break;
 8003970:	4b67      	ldr	r3, [pc, #412]	@ (8003b10 <main+0x8b8>)
 8003972:	4a74      	ldr	r2, [pc, #464]	@ (8003b44 <main+0x8ec>)
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	4b69      	ldr	r3, [pc, #420]	@ (8003b1c <main+0x8c4>)
 8003978:	2201      	movs	r2, #1
 800397a:	701a      	strb	r2, [r3, #0]
 800397c:	4b6f      	ldr	r3, [pc, #444]	@ (8003b3c <main+0x8e4>)
 800397e:	2202      	movs	r2, #2
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	e009      	b.n	8003998 <main+0x740>
					default: act_menu = menuLivingroom, position = 1, max_pos = 2; break;
 8003984:	4b62      	ldr	r3, [pc, #392]	@ (8003b10 <main+0x8b8>)
 8003986:	4a6b      	ldr	r2, [pc, #428]	@ (8003b34 <main+0x8dc>)
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	4b64      	ldr	r3, [pc, #400]	@ (8003b1c <main+0x8c4>)
 800398c:	2201      	movs	r2, #1
 800398e:	701a      	strb	r2, [r3, #0]
 8003990:	4b6a      	ldr	r3, [pc, #424]	@ (8003b3c <main+0x8e4>)
 8003992:	2202      	movs	r2, #2
 8003994:	701a      	strb	r2, [r3, #0]
 8003996:	bf00      	nop
				  switch (position){
 8003998:	f000 bc66 	b.w	8004268 <main+0x1010>
					  }
	}
	else if(symbol[0] == '*' && act_menu == menuLivingroomLighting){
 800399c:	4b5b      	ldr	r3, [pc, #364]	@ (8003b0c <main+0x8b4>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80039a2:	f040 80ee 	bne.w	8003b82 <main+0x92a>
 80039a6:	4b5a      	ldr	r3, [pc, #360]	@ (8003b10 <main+0x8b8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a65      	ldr	r2, [pc, #404]	@ (8003b40 <main+0x8e8>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	f040 80e8 	bne.w	8003b82 <main+0x92a>
 		 	 		refreshLCD = true;
 80039b2:	4b59      	ldr	r3, [pc, #356]	@ (8003b18 <main+0x8c0>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 80039b8:	4b58      	ldr	r3, [pc, #352]	@ (8003b1c <main+0x8c4>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d02c      	beq.n	8003a1a <main+0x7c2>
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	f300 80d3 	bgt.w	8003b6c <main+0x914>
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d002      	beq.n	80039d0 <main+0x778>
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d015      	beq.n	80039fa <main+0x7a2>
 80039ce:	e0cd      	b.n	8003b6c <main+0x914>
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 80039d0:	2001      	movs	r0, #1
 80039d2:	f7ff f8c7 	bl	8002b64 <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 80039d6:	485c      	ldr	r0, [pc, #368]	@ (8003b48 <main+0x8f0>)
 80039d8:	f7ff f8ea 	bl	8002bb0 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 80039dc:	2201      	movs	r2, #1
 80039de:	2100      	movs	r1, #0
 80039e0:	485a      	ldr	r0, [pc, #360]	@ (8003b4c <main+0x8f4>)
 80039e2:	f7ff f914 	bl	8002c0e <LCD_WriteTextXY>
 		 	 				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 80039e6:	4b5a      	ldr	r3, [pc, #360]	@ (8003b50 <main+0x8f8>)
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	4b5a      	ldr	r3, [pc, #360]	@ (8003b54 <main+0x8fc>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	635a      	str	r2, [r3, #52]	@ 0x34
							HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80039f0:	2100      	movs	r1, #0
 80039f2:	4858      	ldr	r0, [pc, #352]	@ (8003b54 <main+0x8fc>)
 80039f4:	f005 ff16 	bl	8009824 <HAL_TIM_PWM_Start>
 		 	 				break;
 80039f8:	e0c2      	b.n	8003b80 <main+0x928>

 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 80039fa:	2001      	movs	r0, #1
 80039fc:	f7ff f8b2 	bl	8002b64 <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 8003a00:	4851      	ldr	r0, [pc, #324]	@ (8003b48 <main+0x8f0>)
 8003a02:	f7ff f8d5 	bl	8002bb0 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 8003a06:	2201      	movs	r2, #1
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4853      	ldr	r0, [pc, #332]	@ (8003b58 <main+0x900>)
 8003a0c:	f7ff f8ff 	bl	8002c0e <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim4 , TIM_CHANNEL_1);
 8003a10:	2100      	movs	r1, #0
 8003a12:	4850      	ldr	r0, [pc, #320]	@ (8003b54 <main+0x8fc>)
 8003a14:	f006 f800 	bl	8009a18 <HAL_TIM_PWM_Stop>
 				 	 		break;
 8003a18:	e0b2      	b.n	8003b80 <main+0x928>
 		 	 		case 3:
							i = 0;
 8003a1a:	4b50      	ldr	r3, [pc, #320]	@ (8003b5c <main+0x904>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
							refreshLCD = true;
 8003a20:	4b3d      	ldr	r3, [pc, #244]	@ (8003b18 <main+0x8c0>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	701a      	strb	r2, [r3, #0]
							HAL_Delay(200);
 8003a26:	20c8      	movs	r0, #200	@ 0xc8
 8003a28:	f002 f982 	bl	8005d30 <HAL_Delay>
							memset(buff, 0, sizeof(buff));
 8003a2c:	2205      	movs	r2, #5
 8003a2e:	2100      	movs	r1, #0
 8003a30:	484b      	ldr	r0, [pc, #300]	@ (8003b60 <main+0x908>)
 8003a32:	f008 fc37 	bl	800c2a4 <memset>
							LCD_WriteCommand(HD44780_CLEAR);
 8003a36:	2001      	movs	r0, #1
 8003a38:	f7ff f894 	bl	8002b64 <LCD_WriteCommand>
							LCD_WriteText("Write Bright");
 8003a3c:	4849      	ldr	r0, [pc, #292]	@ (8003b64 <main+0x90c>)
 8003a3e:	f7ff f8b7 	bl	8002bb0 <LCD_WriteText>
							while(1) {
								refreshLCD = true;
 8003a42:	4b35      	ldr	r3, [pc, #212]	@ (8003b18 <main+0x8c0>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]
								symbol[0] = keypad_readkey();
 8003a48:	f7fe ff4a 	bl	80028e0 <keypad_readkey>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4b2e      	ldr	r3, [pc, #184]	@ (8003b0c <main+0x8b4>)
 8003a52:	701a      	strb	r2, [r3, #0]
								if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 8003a54:	4b2d      	ldr	r3, [pc, #180]	@ (8003b0c <main+0x8b4>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b2f      	cmp	r3, #47	@ 0x2f
 8003a5a:	d922      	bls.n	8003aa2 <main+0x84a>
 8003a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b0c <main+0x8b4>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b39      	cmp	r3, #57	@ 0x39
 8003a62:	d81e      	bhi.n	8003aa2 <main+0x84a>
 8003a64:	4b3d      	ldr	r3, [pc, #244]	@ (8003b5c <main+0x904>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d81a      	bhi.n	8003aa2 <main+0x84a>
									buff[i] = symbol[0];
 8003a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b5c <main+0x904>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a26      	ldr	r2, [pc, #152]	@ (8003b0c <main+0x8b4>)
 8003a72:	7811      	ldrb	r1, [r2, #0]
 8003a74:	4a3a      	ldr	r2, [pc, #232]	@ (8003b60 <main+0x908>)
 8003a76:	54d1      	strb	r1, [r2, r3]
									i++;
 8003a78:	4b38      	ldr	r3, [pc, #224]	@ (8003b5c <main+0x904>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	4a37      	ldr	r2, [pc, #220]	@ (8003b5c <main+0x904>)
 8003a80:	6013      	str	r3, [r2, #0]
									buff[i] = '\0';
 8003a82:	4b36      	ldr	r3, [pc, #216]	@ (8003b5c <main+0x904>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a36      	ldr	r2, [pc, #216]	@ (8003b60 <main+0x908>)
 8003a88:	2100      	movs	r1, #0
 8003a8a:	54d1      	strb	r1, [r2, r3]
									LCD_WriteCommand(HD44780_CLEAR);
 8003a8c:	2001      	movs	r0, #1
 8003a8e:	f7ff f869 	bl	8002b64 <LCD_WriteCommand>
									LCD_WriteText("Brightness: ");
 8003a92:	4835      	ldr	r0, [pc, #212]	@ (8003b68 <main+0x910>)
 8003a94:	f7ff f88c 	bl	8002bb0 <LCD_WriteText>
									LCD_WriteTextXY(buff, 0, 1);
 8003a98:	2201      	movs	r2, #1
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	4830      	ldr	r0, [pc, #192]	@ (8003b60 <main+0x908>)
 8003a9e:	f7ff f8b6 	bl	8002c0e <LCD_WriteTextXY>
								}
								HAL_Delay(200);
 8003aa2:	20c8      	movs	r0, #200	@ 0xc8
 8003aa4:	f002 f944 	bl	8005d30 <HAL_Delay>
								symbol[0] = keypad_readkey();
 8003aa8:	f7fe ff1a 	bl	80028e0 <keypad_readkey>
 8003aac:	4603      	mov	r3, r0
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4b16      	ldr	r3, [pc, #88]	@ (8003b0c <main+0x8b4>)
 8003ab2:	701a      	strb	r2, [r3, #0]
								if(symbol[0] == '*') {
 8003ab4:	4b15      	ldr	r3, [pc, #84]	@ (8003b0c <main+0x8b4>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003aba:	d123      	bne.n	8003b04 <main+0x8ac>
									brightnessLivingroom = atoi(buff)*10;
 8003abc:	4828      	ldr	r0, [pc, #160]	@ (8003b60 <main+0x908>)
 8003abe:	f008 fb15 	bl	800c0ec <atoi>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	461a      	mov	r2, r3
 8003ace:	4b20      	ldr	r3, [pc, #128]	@ (8003b50 <main+0x8f8>)
 8003ad0:	601a      	str	r2, [r3, #0]
									if(brightnessLivingroom >= 1000) {
 8003ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8003b50 <main+0x8f8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ada:	db03      	blt.n	8003ae4 <main+0x88c>
										brightnessLivingroom = 999;
 8003adc:	4b1c      	ldr	r3, [pc, #112]	@ (8003b50 <main+0x8f8>)
 8003ade:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003ae2:	601a      	str	r2, [r3, #0]
									}
								   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 8003ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b50 <main+0x8f8>)
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b54 <main+0x8fc>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	635a      	str	r2, [r3, #52]	@ 0x34
									act_menu = menuLivingroomLighting;
 8003aee:	4b08      	ldr	r3, [pc, #32]	@ (8003b10 <main+0x8b8>)
 8003af0:	4a13      	ldr	r2, [pc, #76]	@ (8003b40 <main+0x8e8>)
 8003af2:	601a      	str	r2, [r3, #0]
									position = 1;
 8003af4:	4b09      	ldr	r3, [pc, #36]	@ (8003b1c <main+0x8c4>)
 8003af6:	2201      	movs	r2, #1
 8003af8:	701a      	strb	r2, [r3, #0]
									max_pos = 3;
 8003afa:	4b10      	ldr	r3, [pc, #64]	@ (8003b3c <main+0x8e4>)
 8003afc:	2203      	movs	r2, #3
 8003afe:	701a      	strb	r2, [r3, #0]
									break;
 8003b00:	bf00      	nop
								}
								HAL_Delay(100);
							}
							break;
 8003b02:	e03d      	b.n	8003b80 <main+0x928>
								HAL_Delay(100);
 8003b04:	2064      	movs	r0, #100	@ 0x64
 8003b06:	f002 f913 	bl	8005d30 <HAL_Delay>
								refreshLCD = true;
 8003b0a:	e79a      	b.n	8003a42 <main+0x7ea>
 8003b0c:	20000298 	.word	0x20000298
 8003b10:	20000128 	.word	0x20000128
 8003b14:	20000088 	.word	0x20000088
 8003b18:	200002fd 	.word	0x200002fd
 8003b1c:	20000054 	.word	0x20000054
 8003b20:	20000454 	.word	0x20000454
 8003b24:	20000304 	.word	0x20000304
 8003b28:	0800cee4 	.word	0x0800cee4
 8003b2c:	0800ceec 	.word	0x0800ceec
 8003b30:	0800cef8 	.word	0x0800cef8
 8003b34:	20000098 	.word	0x20000098
 8003b38:	200000b8 	.word	0x200000b8
 8003b3c:	20000055 	.word	0x20000055
 8003b40:	200000a8 	.word	0x200000a8
 8003b44:	200000c8 	.word	0x200000c8
 8003b48:	0800cebc 	.word	0x0800cebc
 8003b4c:	0800cea4 	.word	0x0800cea4
 8003b50:	2000012c 	.word	0x2000012c
 8003b54:	20000538 	.word	0x20000538
 8003b58:	0800ceb0 	.word	0x0800ceb0
 8003b5c:	20000308 	.word	0x20000308
 8003b60:	2000029c 	.word	0x2000029c
 8003b64:	0800cec4 	.word	0x0800cec4
 8003b68:	0800ced4 	.word	0x0800ced4
 		 	 		default: act_menu = menuLivingroom, position = 1, max_pos = 2; break;
 8003b6c:	4ba7      	ldr	r3, [pc, #668]	@ (8003e0c <main+0xbb4>)
 8003b6e:	4aa8      	ldr	r2, [pc, #672]	@ (8003e10 <main+0xbb8>)
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	4ba8      	ldr	r3, [pc, #672]	@ (8003e14 <main+0xbbc>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	701a      	strb	r2, [r3, #0]
 8003b78:	4ba7      	ldr	r3, [pc, #668]	@ (8003e18 <main+0xbc0>)
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	701a      	strb	r2, [r3, #0]
 8003b7e:	bf00      	nop
 		 	 	  switch (position){
 8003b80:	e372      	b.n	8004268 <main+0x1010>
 		 	 	  	  }
 		 	 	}
	else if(symbol[0] == '*' && act_menu == menuLivingroomTemperature){
 8003b82:	4ba6      	ldr	r3, [pc, #664]	@ (8003e1c <main+0xbc4>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b88:	f040 8112 	bne.w	8003db0 <main+0xb58>
 8003b8c:	4b9f      	ldr	r3, [pc, #636]	@ (8003e0c <main+0xbb4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4aa3      	ldr	r2, [pc, #652]	@ (8003e20 <main+0xbc8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	f040 810c 	bne.w	8003db0 <main+0xb58>
		refreshLCD = true;
 8003b98:	4ba2      	ldr	r3, [pc, #648]	@ (8003e24 <main+0xbcc>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	701a      	strb	r2, [r3, #0]
		switch (position){
 8003b9e:	4b9d      	ldr	r3, [pc, #628]	@ (8003e14 <main+0xbbc>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	f000 8092 	beq.w	8003ccc <main+0xa74>
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	f300 80f6 	bgt.w	8003d9a <main+0xb42>
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d002      	beq.n	8003bb8 <main+0x960>
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d07a      	beq.n	8003cac <main+0xa54>
 8003bb6:	e0f0      	b.n	8003d9a <main+0xb42>
			case 1:
				while(1) {
					HAL_Delay(500);
 8003bb8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003bbc:	f002 f8b8 	bl	8005d30 <HAL_Delay>
					BMP2_ReadData(&bmp2dev, &press, &temp);
 8003bc0:	4a99      	ldr	r2, [pc, #612]	@ (8003e28 <main+0xbd0>)
 8003bc2:	499a      	ldr	r1, [pc, #616]	@ (8003e2c <main+0xbd4>)
 8003bc4:	489a      	ldr	r0, [pc, #616]	@ (8003e30 <main+0xbd8>)
 8003bc6:	f7fe fbad 	bl	8002324 <BMP2_ReadData>
					roundedValue = roundToTwoDecimals(temp);
 8003bca:	4b97      	ldr	r3, [pc, #604]	@ (8003e28 <main+0xbd0>)
 8003bcc:	ed93 7b00 	vldr	d7, [r3]
 8003bd0:	eeb0 0a47 	vmov.f32	s0, s14
 8003bd4:	eef0 0a67 	vmov.f32	s1, s15
 8003bd8:	f7ff f89e 	bl	8002d18 <roundToTwoDecimals>
 8003bdc:	eeb0 7a40 	vmov.f32	s14, s0
 8003be0:	eef0 7a60 	vmov.f32	s15, s1
 8003be4:	4b93      	ldr	r3, [pc, #588]	@ (8003e34 <main+0xbdc>)
 8003be6:	ed83 7b00 	vstr	d7, [r3]
					intPart = (int)roundedValue;
 8003bea:	4b92      	ldr	r3, [pc, #584]	@ (8003e34 <main+0xbdc>)
 8003bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	f7fc ffca 	bl	8000b8c <__aeabi_d2iz>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	4a8f      	ldr	r2, [pc, #572]	@ (8003e38 <main+0xbe0>)
 8003bfc:	6013      	str	r3, [r2, #0]
					fracPart = (int)((roundedValue - intPart) * 100);
 8003bfe:	4b8d      	ldr	r3, [pc, #564]	@ (8003e34 <main+0xbdc>)
 8003c00:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003c04:	4b8c      	ldr	r3, [pc, #560]	@ (8003e38 <main+0xbe0>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fc fcbb 	bl	8000584 <__aeabi_i2d>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4620      	mov	r0, r4
 8003c14:	4629      	mov	r1, r5
 8003c16:	f7fc fb67 	bl	80002e8 <__aeabi_dsub>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4610      	mov	r0, r2
 8003c20:	4619      	mov	r1, r3
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	4b85      	ldr	r3, [pc, #532]	@ (8003e3c <main+0xbe4>)
 8003c28:	f7fc fd16 	bl	8000658 <__aeabi_dmul>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4610      	mov	r0, r2
 8003c32:	4619      	mov	r1, r3
 8003c34:	f7fc ffaa 	bl	8000b8c <__aeabi_d2iz>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	4a81      	ldr	r2, [pc, #516]	@ (8003e40 <main+0xbe8>)
 8003c3c:	6013      	str	r3, [r2, #0]
					sprintf(result, sizeof(result), "Temp: %d.%04d", intPart, abs(fracPart));
 8003c3e:	4b7e      	ldr	r3, [pc, #504]	@ (8003e38 <main+0xbe0>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	4b7f      	ldr	r3, [pc, #508]	@ (8003e40 <main+0xbe8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	bfb8      	it	lt
 8003c4a:	425b      	neglt	r3, r3
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	4a7c      	ldr	r2, [pc, #496]	@ (8003e44 <main+0xbec>)
 8003c52:	2132      	movs	r1, #50	@ 0x32
 8003c54:	487c      	ldr	r0, [pc, #496]	@ (8003e48 <main+0xbf0>)
 8003c56:	f008 fb05 	bl	800c264 <siprintf>
					LCD_WriteCommand(HD44780_CLEAR);
 8003c5a:	2001      	movs	r0, #1
 8003c5c:	f7fe ff82 	bl	8002b64 <LCD_WriteCommand>
					LCD_WriteText(result);
 8003c60:	4879      	ldr	r0, [pc, #484]	@ (8003e48 <main+0xbf0>)
 8003c62:	f7fe ffa5 	bl	8002bb0 <LCD_WriteText>
                    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3, PI_output*1000);
 8003c66:	4b79      	ldr	r3, [pc, #484]	@ (8003e4c <main+0xbf4>)
 8003c68:	edd3 7a00 	vldr	s15, [r3]
 8003c6c:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8003e50 <main+0xbf8>
 8003c70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c74:	4b77      	ldr	r3, [pc, #476]	@ (8003e54 <main+0xbfc>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c7c:	ee17 2a90 	vmov	r2, s15
 8003c80:	63da      	str	r2, [r3, #60]	@ 0x3c
                    symbol[0] = keypad_readkey();
 8003c82:	f7fe fe2d 	bl	80028e0 <keypad_readkey>
 8003c86:	4603      	mov	r3, r0
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4b64      	ldr	r3, [pc, #400]	@ (8003e1c <main+0xbc4>)
 8003c8c:	701a      	strb	r2, [r3, #0]
					if(symbol[0] == '*') {
 8003c8e:	4b63      	ldr	r3, [pc, #396]	@ (8003e1c <main+0xbc4>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c94:	d190      	bne.n	8003bb8 <main+0x960>
						act_menu = menuLivingroomTemperature;
 8003c96:	4b5d      	ldr	r3, [pc, #372]	@ (8003e0c <main+0xbb4>)
 8003c98:	4a61      	ldr	r2, [pc, #388]	@ (8003e20 <main+0xbc8>)
 8003c9a:	601a      	str	r2, [r3, #0]
						position = 1;
 8003c9c:	4b5d      	ldr	r3, [pc, #372]	@ (8003e14 <main+0xbbc>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	701a      	strb	r2, [r3, #0]
						max_pos = 3;
 8003ca2:	4b5d      	ldr	r3, [pc, #372]	@ (8003e18 <main+0xbc0>)
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	701a      	strb	r2, [r3, #0]
						break;
 8003ca8:	bf00      	nop
					}
				}
				break;
 8003caa:	e080      	b.n	8003dae <main+0xb56>
			case 2: LCD_WriteCommand(HD44780_CLEAR);
 8003cac:	2001      	movs	r0, #1
 8003cae:	f7fe ff59 	bl	8002b64 <LCD_WriteCommand>
					LCD_WriteText("Heat");
 8003cb2:	4869      	ldr	r0, [pc, #420]	@ (8003e58 <main+0xc00>)
 8003cb4:	f7fe ff7c 	bl	8002bb0 <LCD_WriteText>
					LCD_WriteTextXY("Turned off",0,1);
 8003cb8:	2201      	movs	r2, #1
 8003cba:	2100      	movs	r1, #0
 8003cbc:	4867      	ldr	r0, [pc, #412]	@ (8003e5c <main+0xc04>)
 8003cbe:	f7fe ffa6 	bl	8002c0e <LCD_WriteTextXY>
                    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3, 0);
 8003cc2:	4b64      	ldr	r3, [pc, #400]	@ (8003e54 <main+0xbfc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	63da      	str	r2, [r3, #60]	@ 0x3c
                    break;
 8003cca:	e070      	b.n	8003dae <main+0xb56>
			case 3:
				i = 0;
 8003ccc:	4b64      	ldr	r3, [pc, #400]	@ (8003e60 <main+0xc08>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]
				HAL_Delay(200);
 8003cd2:	20c8      	movs	r0, #200	@ 0xc8
 8003cd4:	f002 f82c 	bl	8005d30 <HAL_Delay>
				memset(buff, 0, sizeof(buff));
 8003cd8:	2205      	movs	r2, #5
 8003cda:	2100      	movs	r1, #0
 8003cdc:	4861      	ldr	r0, [pc, #388]	@ (8003e64 <main+0xc0c>)
 8003cde:	f008 fae1 	bl	800c2a4 <memset>
				LCD_WriteCommand(HD44780_CLEAR);
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	f7fe ff3e 	bl	8002b64 <LCD_WriteCommand>
				LCD_WriteText("Write Temp");
 8003ce8:	485f      	ldr	r0, [pc, #380]	@ (8003e68 <main+0xc10>)
 8003cea:	f7fe ff61 	bl	8002bb0 <LCD_WriteText>
				while(1) {
					refreshLCD = true;
 8003cee:	4b4d      	ldr	r3, [pc, #308]	@ (8003e24 <main+0xbcc>)
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	701a      	strb	r2, [r3, #0]
					symbol[0] = keypad_readkey();
 8003cf4:	f7fe fdf4 	bl	80028e0 <keypad_readkey>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	4b47      	ldr	r3, [pc, #284]	@ (8003e1c <main+0xbc4>)
 8003cfe:	701a      	strb	r2, [r3, #0]
					if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 8003d00:	4b46      	ldr	r3, [pc, #280]	@ (8003e1c <main+0xbc4>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b2f      	cmp	r3, #47	@ 0x2f
 8003d06:	d922      	bls.n	8003d4e <main+0xaf6>
 8003d08:	4b44      	ldr	r3, [pc, #272]	@ (8003e1c <main+0xbc4>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b39      	cmp	r3, #57	@ 0x39
 8003d0e:	d81e      	bhi.n	8003d4e <main+0xaf6>
 8003d10:	4b53      	ldr	r3, [pc, #332]	@ (8003e60 <main+0xc08>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d81a      	bhi.n	8003d4e <main+0xaf6>
						buff[i] = symbol[0];
 8003d18:	4b51      	ldr	r3, [pc, #324]	@ (8003e60 <main+0xc08>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a3f      	ldr	r2, [pc, #252]	@ (8003e1c <main+0xbc4>)
 8003d1e:	7811      	ldrb	r1, [r2, #0]
 8003d20:	4a50      	ldr	r2, [pc, #320]	@ (8003e64 <main+0xc0c>)
 8003d22:	54d1      	strb	r1, [r2, r3]
						i++;
 8003d24:	4b4e      	ldr	r3, [pc, #312]	@ (8003e60 <main+0xc08>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	4a4d      	ldr	r2, [pc, #308]	@ (8003e60 <main+0xc08>)
 8003d2c:	6013      	str	r3, [r2, #0]
						buff[i] = '\0';
 8003d2e:	4b4c      	ldr	r3, [pc, #304]	@ (8003e60 <main+0xc08>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a4c      	ldr	r2, [pc, #304]	@ (8003e64 <main+0xc0c>)
 8003d34:	2100      	movs	r1, #0
 8003d36:	54d1      	strb	r1, [r2, r3]
						LCD_WriteCommand(HD44780_CLEAR);
 8003d38:	2001      	movs	r0, #1
 8003d3a:	f7fe ff13 	bl	8002b64 <LCD_WriteCommand>
						LCD_WriteText("Temp: ");
 8003d3e:	484b      	ldr	r0, [pc, #300]	@ (8003e6c <main+0xc14>)
 8003d40:	f7fe ff36 	bl	8002bb0 <LCD_WriteText>
						LCD_WriteTextXY(buff, 0, 1);
 8003d44:	2201      	movs	r2, #1
 8003d46:	2100      	movs	r1, #0
 8003d48:	4846      	ldr	r0, [pc, #280]	@ (8003e64 <main+0xc0c>)
 8003d4a:	f7fe ff60 	bl	8002c0e <LCD_WriteTextXY>
					}
					HAL_Delay(200);
 8003d4e:	20c8      	movs	r0, #200	@ 0xc8
 8003d50:	f001 ffee 	bl	8005d30 <HAL_Delay>
					symbol[0] = keypad_readkey();
 8003d54:	f7fe fdc4 	bl	80028e0 <keypad_readkey>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	4b2f      	ldr	r3, [pc, #188]	@ (8003e1c <main+0xbc4>)
 8003d5e:	701a      	strb	r2, [r3, #0]
					if(symbol[0] == '*') {
 8003d60:	4b2e      	ldr	r3, [pc, #184]	@ (8003e1c <main+0xbc4>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d66:	d114      	bne.n	8003d92 <main+0xb3a>
						setpoint = atoi(buff);
 8003d68:	483e      	ldr	r0, [pc, #248]	@ (8003e64 <main+0xc0c>)
 8003d6a:	f008 f9bf 	bl	800c0ec <atoi>
 8003d6e:	ee07 0a90 	vmov	s15, r0
 8003d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d76:	4b3e      	ldr	r3, [pc, #248]	@ (8003e70 <main+0xc18>)
 8003d78:	edc3 7a00 	vstr	s15, [r3]
						act_menu = menuLivingroomTemperature;
 8003d7c:	4b23      	ldr	r3, [pc, #140]	@ (8003e0c <main+0xbb4>)
 8003d7e:	4a28      	ldr	r2, [pc, #160]	@ (8003e20 <main+0xbc8>)
 8003d80:	601a      	str	r2, [r3, #0]
						position = 1;
 8003d82:	4b24      	ldr	r3, [pc, #144]	@ (8003e14 <main+0xbbc>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	701a      	strb	r2, [r3, #0]
						max_pos = 3;
 8003d88:	4b23      	ldr	r3, [pc, #140]	@ (8003e18 <main+0xbc0>)
 8003d8a:	2203      	movs	r2, #3
 8003d8c:	701a      	strb	r2, [r3, #0]
						break;
 8003d8e:	bf00      	nop
					}
					HAL_Delay(100);
				}
			break;
 8003d90:	e00d      	b.n	8003dae <main+0xb56>
					HAL_Delay(100);
 8003d92:	2064      	movs	r0, #100	@ 0x64
 8003d94:	f001 ffcc 	bl	8005d30 <HAL_Delay>
					refreshLCD = true;
 8003d98:	e7a9      	b.n	8003cee <main+0xa96>
			default: act_menu = menuKitchen, position = 1, max_pos = 2; break;
 8003d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8003e0c <main+0xbb4>)
 8003d9c:	4a35      	ldr	r2, [pc, #212]	@ (8003e74 <main+0xc1c>)
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	4b1c      	ldr	r3, [pc, #112]	@ (8003e14 <main+0xbbc>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e18 <main+0xbc0>)
 8003da8:	2202      	movs	r2, #2
 8003daa:	701a      	strb	r2, [r3, #0]
 8003dac:	bf00      	nop
		switch (position){
 8003dae:	e25b      	b.n	8004268 <main+0x1010>
				  }
			}
	else if(symbol[0] == '*' && act_menu == menuLivingroomShutter) {
 8003db0:	4b1a      	ldr	r3, [pc, #104]	@ (8003e1c <main+0xbc4>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003db6:	f040 8082 	bne.w	8003ebe <main+0xc66>
 8003dba:	4b14      	ldr	r3, [pc, #80]	@ (8003e0c <main+0xbb4>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a2e      	ldr	r2, [pc, #184]	@ (8003e78 <main+0xc20>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d17c      	bne.n	8003ebe <main+0xc66>
			refreshLCD = true;
 8003dc4:	4b17      	ldr	r3, [pc, #92]	@ (8003e24 <main+0xbcc>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	701a      	strb	r2, [r3, #0]

			switch(position) {
 8003dca:	4b12      	ldr	r3, [pc, #72]	@ (8003e14 <main+0xbbc>)
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d002      	beq.n	8003dd8 <main+0xb80>
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d05a      	beq.n	8003e8c <main+0xc34>
 8003dd6:	e247      	b.n	8004268 <main+0x1010>
				case 1:
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 500);
 8003dd8:	4b28      	ldr	r3, [pc, #160]	@ (8003e7c <main+0xc24>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003de0:	639a      	str	r2, [r3, #56]	@ 0x38
					HAL_Delay(500);
 8003de2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003de6:	f001 ffa3 	bl	8005d30 <HAL_Delay>
				   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 0);
 8003dea:	4b24      	ldr	r3, [pc, #144]	@ (8003e7c <main+0xc24>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2200      	movs	r2, #0
 8003df0:	639a      	str	r2, [r3, #56]	@ 0x38
				   livingroomShutter = true;
 8003df2:	4b23      	ldr	r3, [pc, #140]	@ (8003e80 <main+0xc28>)
 8003df4:	2201      	movs	r2, #1
 8003df6:	701a      	strb	r2, [r3, #0]
				   LCD_WriteText("Shutter");
 8003df8:	4822      	ldr	r0, [pc, #136]	@ (8003e84 <main+0xc2c>)
 8003dfa:	f7fe fed9 	bl	8002bb0 <LCD_WriteText>
				   LCD_WriteTextXY("is lowering",0,1);
 8003dfe:	2201      	movs	r2, #1
 8003e00:	2100      	movs	r1, #0
 8003e02:	4821      	ldr	r0, [pc, #132]	@ (8003e88 <main+0xc30>)
 8003e04:	f7fe ff03 	bl	8002c0e <LCD_WriteTextXY>
				   break;
 8003e08:	bf00      	nop
			switch(position) {
 8003e0a:	e22d      	b.n	8004268 <main+0x1010>
 8003e0c:	20000128 	.word	0x20000128
 8003e10:	20000098 	.word	0x20000098
 8003e14:	20000054 	.word	0x20000054
 8003e18:	20000055 	.word	0x20000055
 8003e1c:	20000298 	.word	0x20000298
 8003e20:	200000b8 	.word	0x200000b8
 8003e24:	200002fd 	.word	0x200002fd
 8003e28:	20000330 	.word	0x20000330
 8003e2c:	20000338 	.word	0x20000338
 8003e30:	20000018 	.word	0x20000018
 8003e34:	20000340 	.word	0x20000340
 8003e38:	20000310 	.word	0x20000310
 8003e3c:	40590000 	.word	0x40590000
 8003e40:	20000314 	.word	0x20000314
 8003e44:	0800cf00 	.word	0x0800cf00
 8003e48:	200002a4 	.word	0x200002a4
 8003e4c:	2000032c 	.word	0x2000032c
 8003e50:	447a0000 	.word	0x447a0000
 8003e54:	20000538 	.word	0x20000538
 8003e58:	0800cf10 	.word	0x0800cf10
 8003e5c:	0800cf18 	.word	0x0800cf18
 8003e60:	20000308 	.word	0x20000308
 8003e64:	2000029c 	.word	0x2000029c
 8003e68:	0800cf24 	.word	0x0800cf24
 8003e6c:	0800cf30 	.word	0x0800cf30
 8003e70:	20000138 	.word	0x20000138
 8003e74:	20000068 	.word	0x20000068
 8003e78:	200000c8 	.word	0x200000c8
 8003e7c:	20000454 	.word	0x20000454
 8003e80:	20000305 	.word	0x20000305
 8003e84:	0800cee4 	.word	0x0800cee4
 8003e88:	0800ceec 	.word	0x0800ceec
				case 2:
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 2000);
 8003e8c:	4b97      	ldr	r3, [pc, #604]	@ (80040ec <main+0xe94>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003e94:	639a      	str	r2, [r3, #56]	@ 0x38
					HAL_Delay(500);
 8003e96:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003e9a:	f001 ff49 	bl	8005d30 <HAL_Delay>
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 0);
 8003e9e:	4b93      	ldr	r3, [pc, #588]	@ (80040ec <main+0xe94>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	639a      	str	r2, [r3, #56]	@ 0x38
					livingroomShutter = false;
 8003ea6:	4b92      	ldr	r3, [pc, #584]	@ (80040f0 <main+0xe98>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	701a      	strb	r2, [r3, #0]
					LCD_WriteText("Shutter");
 8003eac:	4891      	ldr	r0, [pc, #580]	@ (80040f4 <main+0xe9c>)
 8003eae:	f7fe fe7f 	bl	8002bb0 <LCD_WriteText>
					LCD_WriteTextXY("go up",0,1);
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	4890      	ldr	r0, [pc, #576]	@ (80040f8 <main+0xea0>)
 8003eb8:	f7fe fea9 	bl	8002c0e <LCD_WriteTextXY>
			switch(position) {
 8003ebc:	e1d4      	b.n	8004268 <main+0x1010>
			}
	}
	else if(symbol[0] == '*' && act_menu == menuGarage){
 8003ebe:	4b8f      	ldr	r3, [pc, #572]	@ (80040fc <main+0xea4>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ec4:	d13b      	bne.n	8003f3e <main+0xce6>
 8003ec6:	4b8e      	ldr	r3, [pc, #568]	@ (8004100 <main+0xea8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a8e      	ldr	r2, [pc, #568]	@ (8004104 <main+0xeac>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d136      	bne.n	8003f3e <main+0xce6>
 		 		 	 		refreshLCD = true;
 8003ed0:	4b8d      	ldr	r3, [pc, #564]	@ (8004108 <main+0xeb0>)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	701a      	strb	r2, [r3, #0]
 		 		 	 	  switch (position){
 8003ed6:	4b8d      	ldr	r3, [pc, #564]	@ (800410c <main+0xeb4>)
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	2b03      	cmp	r3, #3
 8003edc:	d01a      	beq.n	8003f14 <main+0xcbc>
 8003ede:	2b03      	cmp	r3, #3
 8003ee0:	dc22      	bgt.n	8003f28 <main+0xcd0>
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d002      	beq.n	8003eec <main+0xc94>
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d00a      	beq.n	8003f00 <main+0xca8>
 8003eea:	e01d      	b.n	8003f28 <main+0xcd0>
 		 		 	 	  	  	case 1: act_menu = menuGarageLighting, position = 1, max_pos = 3; break;
 8003eec:	4b84      	ldr	r3, [pc, #528]	@ (8004100 <main+0xea8>)
 8003eee:	4a88      	ldr	r2, [pc, #544]	@ (8004110 <main+0xeb8>)
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	4b86      	ldr	r3, [pc, #536]	@ (800410c <main+0xeb4>)
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	701a      	strb	r2, [r3, #0]
 8003ef8:	4b86      	ldr	r3, [pc, #536]	@ (8004114 <main+0xebc>)
 8003efa:	2203      	movs	r2, #3
 8003efc:	701a      	strb	r2, [r3, #0]
 8003efe:	e01d      	b.n	8003f3c <main+0xce4>
 		 		 	 	  	  	case 2: act_menu = menuGarageShutter, position = 1, max_pos = 2; break;
 8003f00:	4b7f      	ldr	r3, [pc, #508]	@ (8004100 <main+0xea8>)
 8003f02:	4a85      	ldr	r2, [pc, #532]	@ (8004118 <main+0xec0>)
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	4b81      	ldr	r3, [pc, #516]	@ (800410c <main+0xeb4>)
 8003f08:	2201      	movs	r2, #1
 8003f0a:	701a      	strb	r2, [r3, #0]
 8003f0c:	4b81      	ldr	r3, [pc, #516]	@ (8004114 <main+0xebc>)
 8003f0e:	2202      	movs	r2, #2
 8003f10:	701a      	strb	r2, [r3, #0]
 8003f12:	e013      	b.n	8003f3c <main+0xce4>
 		 		 	 	  	  	case 3: act_menu = menuGarageGate, position = 1, max_pos = 2; break;
 8003f14:	4b7a      	ldr	r3, [pc, #488]	@ (8004100 <main+0xea8>)
 8003f16:	4a81      	ldr	r2, [pc, #516]	@ (800411c <main+0xec4>)
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	4b7c      	ldr	r3, [pc, #496]	@ (800410c <main+0xeb4>)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	701a      	strb	r2, [r3, #0]
 8003f20:	4b7c      	ldr	r3, [pc, #496]	@ (8004114 <main+0xebc>)
 8003f22:	2202      	movs	r2, #2
 8003f24:	701a      	strb	r2, [r3, #0]
 8003f26:	e009      	b.n	8003f3c <main+0xce4>
 		 		 	 		default: act_menu = menuGarage, position = 1, max_pos = 1; break;
 8003f28:	4b75      	ldr	r3, [pc, #468]	@ (8004100 <main+0xea8>)
 8003f2a:	4a76      	ldr	r2, [pc, #472]	@ (8004104 <main+0xeac>)
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	4b77      	ldr	r3, [pc, #476]	@ (800410c <main+0xeb4>)
 8003f30:	2201      	movs	r2, #1
 8003f32:	701a      	strb	r2, [r3, #0]
 8003f34:	4b77      	ldr	r3, [pc, #476]	@ (8004114 <main+0xebc>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	701a      	strb	r2, [r3, #0]
 8003f3a:	bf00      	nop
 		 		 	 	  switch (position){
 8003f3c:	e194      	b.n	8004268 <main+0x1010>
 		 		 	 	  	  }
 		 		 	 	}
 			else if(symbol[0] == '*' && act_menu == menuGarageLighting){
 8003f3e:	4b6f      	ldr	r3, [pc, #444]	@ (80040fc <main+0xea4>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f44:	f040 80be 	bne.w	80040c4 <main+0xe6c>
 8003f48:	4b6d      	ldr	r3, [pc, #436]	@ (8004100 <main+0xea8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a70      	ldr	r2, [pc, #448]	@ (8004110 <main+0xeb8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	f040 80b8 	bne.w	80040c4 <main+0xe6c>
 		 	 		refreshLCD = true;
 8003f54:	4b6c      	ldr	r3, [pc, #432]	@ (8004108 <main+0xeb0>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	701a      	strb	r2, [r3, #0]
 		 	 	  switch (position){
 8003f5a:	4b6c      	ldr	r3, [pc, #432]	@ (800410c <main+0xeb4>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b03      	cmp	r3, #3
 8003f60:	d02c      	beq.n	8003fbc <main+0xd64>
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	f300 80a3 	bgt.w	80040ae <main+0xe56>
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d002      	beq.n	8003f72 <main+0xd1a>
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d015      	beq.n	8003f9c <main+0xd44>
 8003f70:	e09d      	b.n	80040ae <main+0xe56>
 		 	 		case 1: LCD_WriteCommand(HD44780_CLEAR);
 8003f72:	2001      	movs	r0, #1
 8003f74:	f7fe fdf6 	bl	8002b64 <LCD_WriteCommand>
 		 	 				LCD_WriteText("Light");
 8003f78:	4869      	ldr	r0, [pc, #420]	@ (8004120 <main+0xec8>)
 8003f7a:	f7fe fe19 	bl	8002bb0 <LCD_WriteText>
 		 	 				LCD_WriteTextXY("turned on",0,1);
 8003f7e:	2201      	movs	r2, #1
 8003f80:	2100      	movs	r1, #0
 8003f82:	4868      	ldr	r0, [pc, #416]	@ (8004124 <main+0xecc>)
 8003f84:	f7fe fe43 	bl	8002c0e <LCD_WriteTextXY>
 		 	 				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 8003f88:	4b67      	ldr	r3, [pc, #412]	@ (8004128 <main+0xed0>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	4b67      	ldr	r3, [pc, #412]	@ (800412c <main+0xed4>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	635a      	str	r2, [r3, #52]	@ 0x34
 		 	 				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003f92:	2100      	movs	r1, #0
 8003f94:	4865      	ldr	r0, [pc, #404]	@ (800412c <main+0xed4>)
 8003f96:	f005 fc45 	bl	8009824 <HAL_TIM_PWM_Start>
 		 	 				break;
 8003f9a:	e092      	b.n	80040c2 <main+0xe6a>

 		 	 		case 2: LCD_WriteCommand(HD44780_CLEAR);
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	f7fe fde1 	bl	8002b64 <LCD_WriteCommand>
 				 	 		LCD_WriteText("Light");
 8003fa2:	485f      	ldr	r0, [pc, #380]	@ (8004120 <main+0xec8>)
 8003fa4:	f7fe fe04 	bl	8002bb0 <LCD_WriteText>
 				 	 		LCD_WriteTextXY("turned off",0,1);
 8003fa8:	2201      	movs	r2, #1
 8003faa:	2100      	movs	r1, #0
 8003fac:	4860      	ldr	r0, [pc, #384]	@ (8004130 <main+0xed8>)
 8003fae:	f7fe fe2e 	bl	8002c0e <LCD_WriteTextXY>
 				 	 		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	485d      	ldr	r0, [pc, #372]	@ (800412c <main+0xed4>)
 8003fb6:	f005 fd2f 	bl	8009a18 <HAL_TIM_PWM_Stop>
 				 	 		break;
 8003fba:	e082      	b.n	80040c2 <main+0xe6a>

 		 	 		case 3:
							i = 0;
 8003fbc:	4b5d      	ldr	r3, [pc, #372]	@ (8004134 <main+0xedc>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]
							refreshLCD = true;
 8003fc2:	4b51      	ldr	r3, [pc, #324]	@ (8004108 <main+0xeb0>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	701a      	strb	r2, [r3, #0]
							HAL_Delay(200);
 8003fc8:	20c8      	movs	r0, #200	@ 0xc8
 8003fca:	f001 feb1 	bl	8005d30 <HAL_Delay>
							memset(buff, 0, sizeof(buff));
 8003fce:	2205      	movs	r2, #5
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	4859      	ldr	r0, [pc, #356]	@ (8004138 <main+0xee0>)
 8003fd4:	f008 f966 	bl	800c2a4 <memset>
							LCD_WriteCommand(HD44780_CLEAR);
 8003fd8:	2001      	movs	r0, #1
 8003fda:	f7fe fdc3 	bl	8002b64 <LCD_WriteCommand>
							LCD_WriteText("Write Bright");
 8003fde:	4857      	ldr	r0, [pc, #348]	@ (800413c <main+0xee4>)
 8003fe0:	f7fe fde6 	bl	8002bb0 <LCD_WriteText>
							while(1) {
								refreshLCD = true;
 8003fe4:	4b48      	ldr	r3, [pc, #288]	@ (8004108 <main+0xeb0>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	701a      	strb	r2, [r3, #0]
								symbol[0] = keypad_readkey();
 8003fea:	f7fe fc79 	bl	80028e0 <keypad_readkey>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	4b42      	ldr	r3, [pc, #264]	@ (80040fc <main+0xea4>)
 8003ff4:	701a      	strb	r2, [r3, #0]
								if(symbol[0] >= '0' && symbol[0] <= '9' && i < sizeof(buff) - 1) {
 8003ff6:	4b41      	ldr	r3, [pc, #260]	@ (80040fc <main+0xea4>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	2b2f      	cmp	r3, #47	@ 0x2f
 8003ffc:	d922      	bls.n	8004044 <main+0xdec>
 8003ffe:	4b3f      	ldr	r3, [pc, #252]	@ (80040fc <main+0xea4>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b39      	cmp	r3, #57	@ 0x39
 8004004:	d81e      	bhi.n	8004044 <main+0xdec>
 8004006:	4b4b      	ldr	r3, [pc, #300]	@ (8004134 <main+0xedc>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b03      	cmp	r3, #3
 800400c:	d81a      	bhi.n	8004044 <main+0xdec>
									buff[i] = symbol[0];
 800400e:	4b49      	ldr	r3, [pc, #292]	@ (8004134 <main+0xedc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a3a      	ldr	r2, [pc, #232]	@ (80040fc <main+0xea4>)
 8004014:	7811      	ldrb	r1, [r2, #0]
 8004016:	4a48      	ldr	r2, [pc, #288]	@ (8004138 <main+0xee0>)
 8004018:	54d1      	strb	r1, [r2, r3]
									i++;
 800401a:	4b46      	ldr	r3, [pc, #280]	@ (8004134 <main+0xedc>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3301      	adds	r3, #1
 8004020:	4a44      	ldr	r2, [pc, #272]	@ (8004134 <main+0xedc>)
 8004022:	6013      	str	r3, [r2, #0]
									buff[i] = '\0';
 8004024:	4b43      	ldr	r3, [pc, #268]	@ (8004134 <main+0xedc>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a43      	ldr	r2, [pc, #268]	@ (8004138 <main+0xee0>)
 800402a:	2100      	movs	r1, #0
 800402c:	54d1      	strb	r1, [r2, r3]
									LCD_WriteCommand(HD44780_CLEAR);
 800402e:	2001      	movs	r0, #1
 8004030:	f7fe fd98 	bl	8002b64 <LCD_WriteCommand>
									LCD_WriteText("Brightness: ");
 8004034:	4842      	ldr	r0, [pc, #264]	@ (8004140 <main+0xee8>)
 8004036:	f7fe fdbb 	bl	8002bb0 <LCD_WriteText>
									LCD_WriteTextXY(buff, 0, 1);
 800403a:	2201      	movs	r2, #1
 800403c:	2100      	movs	r1, #0
 800403e:	483e      	ldr	r0, [pc, #248]	@ (8004138 <main+0xee0>)
 8004040:	f7fe fde5 	bl	8002c0e <LCD_WriteTextXY>
								}
								HAL_Delay(200);
 8004044:	20c8      	movs	r0, #200	@ 0xc8
 8004046:	f001 fe73 	bl	8005d30 <HAL_Delay>
								symbol[0] = keypad_readkey();
 800404a:	f7fe fc49 	bl	80028e0 <keypad_readkey>
 800404e:	4603      	mov	r3, r0
 8004050:	461a      	mov	r2, r3
 8004052:	4b2a      	ldr	r3, [pc, #168]	@ (80040fc <main+0xea4>)
 8004054:	701a      	strb	r2, [r3, #0]
								if(symbol[0] == '*') {
 8004056:	4b29      	ldr	r3, [pc, #164]	@ (80040fc <main+0xea4>)
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b2a      	cmp	r3, #42	@ 0x2a
 800405c:	d123      	bne.n	80040a6 <main+0xe4e>
									brightnessGarage = atoi(buff)*10;
 800405e:	4836      	ldr	r0, [pc, #216]	@ (8004138 <main+0xee0>)
 8004060:	f008 f844 	bl	800c0ec <atoi>
 8004064:	4602      	mov	r2, r0
 8004066:	4613      	mov	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	461a      	mov	r2, r3
 8004070:	4b2d      	ldr	r3, [pc, #180]	@ (8004128 <main+0xed0>)
 8004072:	601a      	str	r2, [r3, #0]
									if(brightnessGarage >= 1000) {
 8004074:	4b2c      	ldr	r3, [pc, #176]	@ (8004128 <main+0xed0>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800407c:	db03      	blt.n	8004086 <main+0xe2e>
										brightnessGarage = 999;
 800407e:	4b2a      	ldr	r3, [pc, #168]	@ (8004128 <main+0xed0>)
 8004080:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004084:	601a      	str	r2, [r3, #0]
									}
								   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 8004086:	4b28      	ldr	r3, [pc, #160]	@ (8004128 <main+0xed0>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4b28      	ldr	r3, [pc, #160]	@ (800412c <main+0xed4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	635a      	str	r2, [r3, #52]	@ 0x34
									act_menu = menuGarageLighting;
 8004090:	4b1b      	ldr	r3, [pc, #108]	@ (8004100 <main+0xea8>)
 8004092:	4a1f      	ldr	r2, [pc, #124]	@ (8004110 <main+0xeb8>)
 8004094:	601a      	str	r2, [r3, #0]
									position = 1;
 8004096:	4b1d      	ldr	r3, [pc, #116]	@ (800410c <main+0xeb4>)
 8004098:	2201      	movs	r2, #1
 800409a:	701a      	strb	r2, [r3, #0]
									max_pos = 3;
 800409c:	4b1d      	ldr	r3, [pc, #116]	@ (8004114 <main+0xebc>)
 800409e:	2203      	movs	r2, #3
 80040a0:	701a      	strb	r2, [r3, #0]
									break;
 80040a2:	bf00      	nop
								}
								HAL_Delay(100);
							}
							break;
 80040a4:	e00d      	b.n	80040c2 <main+0xe6a>
								HAL_Delay(100);
 80040a6:	2064      	movs	r0, #100	@ 0x64
 80040a8:	f001 fe42 	bl	8005d30 <HAL_Delay>
								refreshLCD = true;
 80040ac:	e79a      	b.n	8003fe4 <main+0xd8c>
 		 	 		default: act_menu = menuGarage, position = 1, max_pos = 2; break;
 80040ae:	4b14      	ldr	r3, [pc, #80]	@ (8004100 <main+0xea8>)
 80040b0:	4a14      	ldr	r2, [pc, #80]	@ (8004104 <main+0xeac>)
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	4b15      	ldr	r3, [pc, #84]	@ (800410c <main+0xeb4>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	701a      	strb	r2, [r3, #0]
 80040ba:	4b16      	ldr	r3, [pc, #88]	@ (8004114 <main+0xebc>)
 80040bc:	2202      	movs	r2, #2
 80040be:	701a      	strb	r2, [r3, #0]
 80040c0:	bf00      	nop
 		 	 	  switch (position){
 80040c2:	e0d1      	b.n	8004268 <main+0x1010>
 		 	 	  }
			}
 			else if(symbol[0] == '*' && act_menu == menuGarageShutter) {
 80040c4:	4b0d      	ldr	r3, [pc, #52]	@ (80040fc <main+0xea4>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80040ca:	d16e      	bne.n	80041aa <main+0xf52>
 80040cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004100 <main+0xea8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a11      	ldr	r2, [pc, #68]	@ (8004118 <main+0xec0>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d169      	bne.n	80041aa <main+0xf52>
 						refreshLCD = true;
 80040d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004108 <main+0xeb0>)
 80040d8:	2201      	movs	r2, #1
 80040da:	701a      	strb	r2, [r3, #0]
 						switch(position) {
 80040dc:	4b0b      	ldr	r3, [pc, #44]	@ (800410c <main+0xeb4>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d02f      	beq.n	8004144 <main+0xeec>
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d047      	beq.n	8004178 <main+0xf20>
 80040e8:	e0be      	b.n	8004268 <main+0x1010>
 80040ea:	bf00      	nop
 80040ec:	20000454 	.word	0x20000454
 80040f0:	20000305 	.word	0x20000305
 80040f4:	0800cee4 	.word	0x0800cee4
 80040f8:	0800cef8 	.word	0x0800cef8
 80040fc:	20000298 	.word	0x20000298
 8004100:	20000128 	.word	0x20000128
 8004104:	200000d8 	.word	0x200000d8
 8004108:	200002fd 	.word	0x200002fd
 800410c:	20000054 	.word	0x20000054
 8004110:	200000e8 	.word	0x200000e8
 8004114:	20000055 	.word	0x20000055
 8004118:	200000f8 	.word	0x200000f8
 800411c:	20000108 	.word	0x20000108
 8004120:	0800cebc 	.word	0x0800cebc
 8004124:	0800cea4 	.word	0x0800cea4
 8004128:	20000134 	.word	0x20000134
 800412c:	200004a0 	.word	0x200004a0
 8004130:	0800ceb0 	.word	0x0800ceb0
 8004134:	20000308 	.word	0x20000308
 8004138:	2000029c 	.word	0x2000029c
 800413c:	0800cec4 	.word	0x0800cec4
 8004140:	0800ced4 	.word	0x0800ced4
 							case 1:
 								__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 500);
 8004144:	4b2f      	ldr	r3, [pc, #188]	@ (8004204 <main+0xfac>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800414c:	63da      	str	r2, [r3, #60]	@ 0x3c
 								HAL_Delay(500);
 800414e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004152:	f001 fded 	bl	8005d30 <HAL_Delay>
 							   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 0);
 8004156:	4b2b      	ldr	r3, [pc, #172]	@ (8004204 <main+0xfac>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2200      	movs	r2, #0
 800415c:	63da      	str	r2, [r3, #60]	@ 0x3c
 							  garageShutter= true;
 800415e:	4b2a      	ldr	r3, [pc, #168]	@ (8004208 <main+0xfb0>)
 8004160:	2201      	movs	r2, #1
 8004162:	701a      	strb	r2, [r3, #0]
 							   LCD_WriteText("Shutter");
 8004164:	4829      	ldr	r0, [pc, #164]	@ (800420c <main+0xfb4>)
 8004166:	f7fe fd23 	bl	8002bb0 <LCD_WriteText>
 							   LCD_WriteTextXY("is lowering",0,1);
 800416a:	2201      	movs	r2, #1
 800416c:	2100      	movs	r1, #0
 800416e:	4828      	ldr	r0, [pc, #160]	@ (8004210 <main+0xfb8>)
 8004170:	f7fe fd4d 	bl	8002c0e <LCD_WriteTextXY>
 							   break;
 8004174:	bf00      	nop
 						switch(position) {
 8004176:	e077      	b.n	8004268 <main+0x1010>
 							case 2:
 								__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 2000);
 8004178:	4b22      	ldr	r3, [pc, #136]	@ (8004204 <main+0xfac>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004180:	63da      	str	r2, [r3, #60]	@ 0x3c
 								HAL_Delay(500);
 8004182:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004186:	f001 fdd3 	bl	8005d30 <HAL_Delay>
 								__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 0);
 800418a:	4b1e      	ldr	r3, [pc, #120]	@ (8004204 <main+0xfac>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2200      	movs	r2, #0
 8004190:	63da      	str	r2, [r3, #60]	@ 0x3c
 								garageShutter = false;
 8004192:	4b1d      	ldr	r3, [pc, #116]	@ (8004208 <main+0xfb0>)
 8004194:	2200      	movs	r2, #0
 8004196:	701a      	strb	r2, [r3, #0]
 								LCD_WriteText("Shutter");
 8004198:	481c      	ldr	r0, [pc, #112]	@ (800420c <main+0xfb4>)
 800419a:	f7fe fd09 	bl	8002bb0 <LCD_WriteText>
 								LCD_WriteTextXY("go up",0,1);
 800419e:	2201      	movs	r2, #1
 80041a0:	2100      	movs	r1, #0
 80041a2:	481c      	ldr	r0, [pc, #112]	@ (8004214 <main+0xfbc>)
 80041a4:	f7fe fd33 	bl	8002c0e <LCD_WriteTextXY>
 						switch(position) {
 80041a8:	e05e      	b.n	8004268 <main+0x1010>
 						}
 				}
 			else if(symbol[0] == '*' && act_menu == menuGarageGate) {
 80041aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004218 <main+0xfc0>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80041b0:	d15a      	bne.n	8004268 <main+0x1010>
 80041b2:	4b1a      	ldr	r3, [pc, #104]	@ (800421c <main+0xfc4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004220 <main+0xfc8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d155      	bne.n	8004268 <main+0x1010>
 			 						refreshLCD = true;
 80041bc:	4b19      	ldr	r3, [pc, #100]	@ (8004224 <main+0xfcc>)
 80041be:	2201      	movs	r2, #1
 80041c0:	701a      	strb	r2, [r3, #0]

 			 						switch(position) {
 80041c2:	4b19      	ldr	r3, [pc, #100]	@ (8004228 <main+0xfd0>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d002      	beq.n	80041d0 <main+0xf78>
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d034      	beq.n	8004238 <main+0xfe0>
 80041ce:	e04b      	b.n	8004268 <main+0x1010>
 			 							case 1:
 			 								__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 500);
 80041d0:	4b16      	ldr	r3, [pc, #88]	@ (800422c <main+0xfd4>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80041d8:	641a      	str	r2, [r3, #64]	@ 0x40
 			 								HAL_Delay(1200);
 80041da:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80041de:	f001 fda7 	bl	8005d30 <HAL_Delay>
 			 							   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 0);
 80041e2:	4b12      	ldr	r3, [pc, #72]	@ (800422c <main+0xfd4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2200      	movs	r2, #0
 80041e8:	641a      	str	r2, [r3, #64]	@ 0x40
 			 							  garageGate= true;
 80041ea:	4b11      	ldr	r3, [pc, #68]	@ (8004230 <main+0xfd8>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	701a      	strb	r2, [r3, #0]
 			 							   LCD_WriteText("Gate");
 80041f0:	4810      	ldr	r0, [pc, #64]	@ (8004234 <main+0xfdc>)
 80041f2:	f7fe fcdd 	bl	8002bb0 <LCD_WriteText>
 			 							   LCD_WriteTextXY("is lowering",0,1);
 80041f6:	2201      	movs	r2, #1
 80041f8:	2100      	movs	r1, #0
 80041fa:	4805      	ldr	r0, [pc, #20]	@ (8004210 <main+0xfb8>)
 80041fc:	f7fe fd07 	bl	8002c0e <LCD_WriteTextXY>
 			 							   break;
 8004200:	e032      	b.n	8004268 <main+0x1010>
 8004202:	bf00      	nop
 8004204:	20000454 	.word	0x20000454
 8004208:	20000306 	.word	0x20000306
 800420c:	0800cee4 	.word	0x0800cee4
 8004210:	0800ceec 	.word	0x0800ceec
 8004214:	0800cef8 	.word	0x0800cef8
 8004218:	20000298 	.word	0x20000298
 800421c:	20000128 	.word	0x20000128
 8004220:	20000108 	.word	0x20000108
 8004224:	200002fd 	.word	0x200002fd
 8004228:	20000054 	.word	0x20000054
 800422c:	200004ec 	.word	0x200004ec
 8004230:	20000307 	.word	0x20000307
 8004234:	0800cf38 	.word	0x0800cf38
 			 							case 2:
 			 								__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 2000);
 8004238:	4bc1      	ldr	r3, [pc, #772]	@ (8004540 <main+0x12e8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004240:	641a      	str	r2, [r3, #64]	@ 0x40
 			 								HAL_Delay(1500);
 8004242:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8004246:	f001 fd73 	bl	8005d30 <HAL_Delay>
 			 								__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 0);
 800424a:	4bbd      	ldr	r3, [pc, #756]	@ (8004540 <main+0x12e8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2200      	movs	r2, #0
 8004250:	641a      	str	r2, [r3, #64]	@ 0x40
 			 								garageGate = false;
 8004252:	4bbc      	ldr	r3, [pc, #752]	@ (8004544 <main+0x12ec>)
 8004254:	2200      	movs	r2, #0
 8004256:	701a      	strb	r2, [r3, #0]
 			 								LCD_WriteText("Gate");
 8004258:	48bb      	ldr	r0, [pc, #748]	@ (8004548 <main+0x12f0>)
 800425a:	f7fe fca9 	bl	8002bb0 <LCD_WriteText>
 			 								LCD_WriteTextXY("go up",0,1);
 800425e:	2201      	movs	r2, #1
 8004260:	2100      	movs	r1, #0
 8004262:	48ba      	ldr	r0, [pc, #744]	@ (800454c <main+0x12f4>)
 8004264:	f7fe fcd3 	bl	8002c0e <LCD_WriteTextXY>
 			 						}
 			 				}

 	if (symbol[0] == '#')
 8004268:	4bb9      	ldr	r3, [pc, #740]	@ (8004550 <main+0x12f8>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b23      	cmp	r3, #35	@ 0x23
 800426e:	d10b      	bne.n	8004288 <main+0x1030>
 	{
 		refreshLCD = true;
 8004270:	4bb8      	ldr	r3, [pc, #736]	@ (8004554 <main+0x12fc>)
 8004272:	2201      	movs	r2, #1
 8004274:	701a      	strb	r2, [r3, #0]
 		act_menu = mainmenu;
 8004276:	4bb8      	ldr	r3, [pc, #736]	@ (8004558 <main+0x1300>)
 8004278:	4ab8      	ldr	r2, [pc, #736]	@ (800455c <main+0x1304>)
 800427a:	601a      	str	r2, [r3, #0]
 		position = 1;
 800427c:	4bb8      	ldr	r3, [pc, #736]	@ (8004560 <main+0x1308>)
 800427e:	2201      	movs	r2, #1
 8004280:	701a      	strb	r2, [r3, #0]
 		max_pos = 4;
 8004282:	4bb8      	ldr	r3, [pc, #736]	@ (8004564 <main+0x130c>)
 8004284:	2204      	movs	r2, #4
 8004286:	701a      	strb	r2, [r3, #0]
 	}

 	HAL_Delay(200);
 8004288:	20c8      	movs	r0, #200	@ 0xc8
 800428a:	f001 fd51 	bl	8005d30 <HAL_Delay>
 	///////////////SYSTEM TEMPERATURY///////////////////////////////////////////////////
 	BMP2_ReadData(&bmp2dev, &press, &temp);
 800428e:	4ab6      	ldr	r2, [pc, #728]	@ (8004568 <main+0x1310>)
 8004290:	49b6      	ldr	r1, [pc, #728]	@ (800456c <main+0x1314>)
 8004292:	48b7      	ldr	r0, [pc, #732]	@ (8004570 <main+0x1318>)
 8004294:	f7fe f846 	bl	8002324 <BMP2_ReadData>
 	roundedValue = roundToTwoDecimals(temp);
 8004298:	4bb3      	ldr	r3, [pc, #716]	@ (8004568 <main+0x1310>)
 800429a:	ed93 7b00 	vldr	d7, [r3]
 800429e:	eeb0 0a47 	vmov.f32	s0, s14
 80042a2:	eef0 0a67 	vmov.f32	s1, s15
 80042a6:	f7fe fd37 	bl	8002d18 <roundToTwoDecimals>
 80042aa:	eeb0 7a40 	vmov.f32	s14, s0
 80042ae:	eef0 7a60 	vmov.f32	s15, s1
 80042b2:	4bb0      	ldr	r3, [pc, #704]	@ (8004574 <main+0x131c>)
 80042b4:	ed83 7b00 	vstr	d7, [r3]
 	char bufferTemp[20];
	sprintf(bufferTemp, "TM%d", roundedValue);
 80042b8:	4bae      	ldr	r3, [pc, #696]	@ (8004574 <main+0x131c>)
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	f107 0010 	add.w	r0, r7, #16
 80042c2:	49ad      	ldr	r1, [pc, #692]	@ (8004578 <main+0x1320>)
 80042c4:	f007 ffce 	bl	800c264 <siprintf>
	sendBluetoothData(bufferTemp);
 80042c8:	f107 0310 	add.w	r3, r7, #16
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fe feeb 	bl	80030a8 <sendBluetoothData>
 	///////////////SYSTEM ZASILANIA///////////////////////////////////////////////////
 	vbus = INA219_ReadBusVoltage(&ina219);
 80042d2:	48aa      	ldr	r0, [pc, #680]	@ (800457c <main+0x1324>)
 80042d4:	f7fc feb0 	bl	8001038 <INA219_ReadBusVoltage>
 80042d8:	4603      	mov	r3, r0
 80042da:	461a      	mov	r2, r3
 80042dc:	4ba8      	ldr	r3, [pc, #672]	@ (8004580 <main+0x1328>)
 80042de:	801a      	strh	r2, [r3, #0]
 		 	   vshunt = INA219_ReadShuntVolage(&ina219);
 80042e0:	48a6      	ldr	r0, [pc, #664]	@ (800457c <main+0x1324>)
 80042e2:	f7fc fee5 	bl	80010b0 <INA219_ReadShuntVolage>
 80042e6:	4603      	mov	r3, r0
 80042e8:	461a      	mov	r2, r3
 80042ea:	4ba6      	ldr	r3, [pc, #664]	@ (8004584 <main+0x132c>)
 80042ec:	801a      	strh	r2, [r3, #0]
 		 	   current = INA219_ReadCurrent(&ina219);
 80042ee:	48a3      	ldr	r0, [pc, #652]	@ (800457c <main+0x1324>)
 80042f0:	f7fc fec6 	bl	8001080 <INA219_ReadCurrent>
 80042f4:	4603      	mov	r3, r0
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	4ba3      	ldr	r3, [pc, #652]	@ (8004588 <main+0x1330>)
 80042fa:	801a      	strh	r2, [r3, #0]
 		 	   power = vbus * current;
 80042fc:	4ba0      	ldr	r3, [pc, #640]	@ (8004580 <main+0x1328>)
 80042fe:	881a      	ldrh	r2, [r3, #0]
 8004300:	4ba1      	ldr	r3, [pc, #644]	@ (8004588 <main+0x1330>)
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	fb12 f303 	smulbb	r3, r2, r3
 8004308:	b29a      	uxth	r2, r3
 800430a:	4ba0      	ldr	r3, [pc, #640]	@ (800458c <main+0x1334>)
 800430c:	801a      	strh	r2, [r3, #0]
 		 	   char bufferPower[10];
 		 	   sprintf(bufferPower, "W%d", power);
 800430e:	4b9f      	ldr	r3, [pc, #636]	@ (800458c <main+0x1334>)
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	1d3b      	adds	r3, r7, #4
 8004316:	499e      	ldr	r1, [pc, #632]	@ (8004590 <main+0x1338>)
 8004318:	4618      	mov	r0, r3
 800431a:	f007 ffa3 	bl	800c264 <siprintf>
 		 	   sendBluetoothData(bufferPower);
 800431e:	1d3b      	adds	r3, r7, #4
 8004320:	4618      	mov	r0, r3
 8004322:	f7fe fec1 	bl	80030a8 <sendBluetoothData>

 		 	   // Konwersja na jednostki podstawowe (V i A)
 		 	    solar_volts = vbus / 1000.0;  // mV -> V
 8004326:	4b96      	ldr	r3, [pc, #600]	@ (8004580 <main+0x1328>)
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7fc f92a 	bl	8000584 <__aeabi_i2d>
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	4b97      	ldr	r3, [pc, #604]	@ (8004594 <main+0x133c>)
 8004336:	f7fc fab9 	bl	80008ac <__aeabi_ddiv>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4610      	mov	r0, r2
 8004340:	4619      	mov	r1, r3
 8004342:	f7fc fc6b 	bl	8000c1c <__aeabi_d2f>
 8004346:	4603      	mov	r3, r0
 8004348:	4a93      	ldr	r2, [pc, #588]	@ (8004598 <main+0x1340>)
 800434a:	6013      	str	r3, [r2, #0]
 		 	    vshunt_volts = vshunt / 1000.0; // mV -> V
 800434c:	4b8d      	ldr	r3, [pc, #564]	@ (8004584 <main+0x132c>)
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f7fc f917 	bl	8000584 <__aeabi_i2d>
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	4b8e      	ldr	r3, [pc, #568]	@ (8004594 <main+0x133c>)
 800435c:	f7fc faa6 	bl	80008ac <__aeabi_ddiv>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4610      	mov	r0, r2
 8004366:	4619      	mov	r1, r3
 8004368:	f7fc fc58 	bl	8000c1c <__aeabi_d2f>
 800436c:	4603      	mov	r3, r0
 800436e:	4a8b      	ldr	r2, [pc, #556]	@ (800459c <main+0x1344>)
 8004370:	6013      	str	r3, [r2, #0]
 		 	    solar_amps = current / 1000.0; // mA -> A
 8004372:	4b85      	ldr	r3, [pc, #532]	@ (8004588 <main+0x1330>)
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f7fc f904 	bl	8000584 <__aeabi_i2d>
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	4b84      	ldr	r3, [pc, #528]	@ (8004594 <main+0x133c>)
 8004382:	f7fc fa93 	bl	80008ac <__aeabi_ddiv>
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	4610      	mov	r0, r2
 800438c:	4619      	mov	r1, r3
 800438e:	f7fc fc45 	bl	8000c1c <__aeabi_d2f>
 8004392:	4603      	mov	r3, r0
 8004394:	4a82      	ldr	r2, [pc, #520]	@ (80045a0 <main+0x1348>)
 8004396:	6013      	str	r3, [r2, #0]

 		 	//        Zaokrąglanie do 3 miejsc po przecinku
 		 	       solar_volts = round(solar_volts * 1000) / 1000;
 8004398:	4b7f      	ldr	r3, [pc, #508]	@ (8004598 <main+0x1340>)
 800439a:	edd3 7a00 	vldr	s15, [r3]
 800439e:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 80045a4 <main+0x134c>
 80043a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043a6:	ee17 0a90 	vmov	r0, s15
 80043aa:	f7fc f8fd 	bl	80005a8 <__aeabi_f2d>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	ec43 2b10 	vmov	d0, r2, r3
 80043b6:	f008 fc73 	bl	800cca0 <round>
 80043ba:	ec51 0b10 	vmov	r0, r1, d0
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	4b74      	ldr	r3, [pc, #464]	@ (8004594 <main+0x133c>)
 80043c4:	f7fc fa72 	bl	80008ac <__aeabi_ddiv>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4610      	mov	r0, r2
 80043ce:	4619      	mov	r1, r3
 80043d0:	f7fc fc24 	bl	8000c1c <__aeabi_d2f>
 80043d4:	4603      	mov	r3, r0
 80043d6:	4a70      	ldr	r2, [pc, #448]	@ (8004598 <main+0x1340>)
 80043d8:	6013      	str	r3, [r2, #0]
 		 	       vshunt_volts = round(vshunt_volts * 1000) / 1000;
 80043da:	4b70      	ldr	r3, [pc, #448]	@ (800459c <main+0x1344>)
 80043dc:	edd3 7a00 	vldr	s15, [r3]
 80043e0:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 80045a4 <main+0x134c>
 80043e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043e8:	ee17 0a90 	vmov	r0, s15
 80043ec:	f7fc f8dc 	bl	80005a8 <__aeabi_f2d>
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	ec43 2b10 	vmov	d0, r2, r3
 80043f8:	f008 fc52 	bl	800cca0 <round>
 80043fc:	ec51 0b10 	vmov	r0, r1, d0
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	4b63      	ldr	r3, [pc, #396]	@ (8004594 <main+0x133c>)
 8004406:	f7fc fa51 	bl	80008ac <__aeabi_ddiv>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4610      	mov	r0, r2
 8004410:	4619      	mov	r1, r3
 8004412:	f7fc fc03 	bl	8000c1c <__aeabi_d2f>
 8004416:	4603      	mov	r3, r0
 8004418:	4a60      	ldr	r2, [pc, #384]	@ (800459c <main+0x1344>)
 800441a:	6013      	str	r3, [r2, #0]
 		 	       solar_amps = round(solar_amps * 1000) / 1000;
 800441c:	4b60      	ldr	r3, [pc, #384]	@ (80045a0 <main+0x1348>)
 800441e:	edd3 7a00 	vldr	s15, [r3]
 8004422:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 80045a4 <main+0x134c>
 8004426:	ee67 7a87 	vmul.f32	s15, s15, s14
 800442a:	ee17 0a90 	vmov	r0, s15
 800442e:	f7fc f8bb 	bl	80005a8 <__aeabi_f2d>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	ec43 2b10 	vmov	d0, r2, r3
 800443a:	f008 fc31 	bl	800cca0 <round>
 800443e:	ec51 0b10 	vmov	r0, r1, d0
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	4b53      	ldr	r3, [pc, #332]	@ (8004594 <main+0x133c>)
 8004448:	f7fc fa30 	bl	80008ac <__aeabi_ddiv>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4610      	mov	r0, r2
 8004452:	4619      	mov	r1, r3
 8004454:	f7fc fbe2 	bl	8000c1c <__aeabi_d2f>
 8004458:	4603      	mov	r3, r0
 800445a:	4a51      	ldr	r2, [pc, #324]	@ (80045a0 <main+0x1348>)
 800445c:	6013      	str	r3, [r2, #0]
 		 	       solar_power = solar_volts * solar_amps;
 800445e:	4b4e      	ldr	r3, [pc, #312]	@ (8004598 <main+0x1340>)
 8004460:	ed93 7a00 	vldr	s14, [r3]
 8004464:	4b4e      	ldr	r3, [pc, #312]	@ (80045a0 <main+0x1348>)
 8004466:	edd3 7a00 	vldr	s15, [r3]
 800446a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800446e:	4b4e      	ldr	r3, [pc, #312]	@ (80045a8 <main+0x1350>)
 8004470:	edc3 7a00 	vstr	s15, [r3]

 		  vbus2 = INA219_ReadBusVoltage(&ina219_2);
 8004474:	484d      	ldr	r0, [pc, #308]	@ (80045ac <main+0x1354>)
 8004476:	f7fc fddf 	bl	8001038 <INA219_ReadBusVoltage>
 800447a:	4603      	mov	r3, r0
 800447c:	461a      	mov	r2, r3
 800447e:	4b4c      	ldr	r3, [pc, #304]	@ (80045b0 <main+0x1358>)
 8004480:	801a      	strh	r2, [r3, #0]
 		   vshunt2 = INA219_ReadShuntVolage(&ina219_2);
 8004482:	484a      	ldr	r0, [pc, #296]	@ (80045ac <main+0x1354>)
 8004484:	f7fc fe14 	bl	80010b0 <INA219_ReadShuntVolage>
 8004488:	4603      	mov	r3, r0
 800448a:	461a      	mov	r2, r3
 800448c:	4b49      	ldr	r3, [pc, #292]	@ (80045b4 <main+0x135c>)
 800448e:	801a      	strh	r2, [r3, #0]
 			   current2 = INA219_ReadCurrent(&ina219_2);
 8004490:	4846      	ldr	r0, [pc, #280]	@ (80045ac <main+0x1354>)
 8004492:	f7fc fdf5 	bl	8001080 <INA219_ReadCurrent>
 8004496:	4603      	mov	r3, r0
 8004498:	b29a      	uxth	r2, r3
 800449a:	4b47      	ldr	r3, [pc, #284]	@ (80045b8 <main+0x1360>)
 800449c:	801a      	strh	r2, [r3, #0]
 			   power2 = vbus2 * current2;
 800449e:	4b44      	ldr	r3, [pc, #272]	@ (80045b0 <main+0x1358>)
 80044a0:	881a      	ldrh	r2, [r3, #0]
 80044a2:	4b45      	ldr	r3, [pc, #276]	@ (80045b8 <main+0x1360>)
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	fb12 f303 	smulbb	r3, r2, r3
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	4b43      	ldr	r3, [pc, #268]	@ (80045bc <main+0x1364>)
 80044ae:	801a      	strh	r2, [r3, #0]

 			   // Konwersja na jednostki podstawowe (V i A)
 			   	 	    output_volts = vbus2 / 1000.0;  // mV -> V
 80044b0:	4b3f      	ldr	r3, [pc, #252]	@ (80045b0 <main+0x1358>)
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fc f865 	bl	8000584 <__aeabi_i2d>
 80044ba:	f04f 0200 	mov.w	r2, #0
 80044be:	4b35      	ldr	r3, [pc, #212]	@ (8004594 <main+0x133c>)
 80044c0:	f7fc f9f4 	bl	80008ac <__aeabi_ddiv>
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	4610      	mov	r0, r2
 80044ca:	4619      	mov	r1, r3
 80044cc:	f7fc fba6 	bl	8000c1c <__aeabi_d2f>
 80044d0:	4603      	mov	r3, r0
 80044d2:	4a3b      	ldr	r2, [pc, #236]	@ (80045c0 <main+0x1368>)
 80044d4:	6013      	str	r3, [r2, #0]
 			   	 	    vshunt_volts2 = vshunt2 / 1000.0; // mV -> V
 80044d6:	4b37      	ldr	r3, [pc, #220]	@ (80045b4 <main+0x135c>)
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fc f852 	bl	8000584 <__aeabi_i2d>
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004594 <main+0x133c>)
 80044e6:	f7fc f9e1 	bl	80008ac <__aeabi_ddiv>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	4610      	mov	r0, r2
 80044f0:	4619      	mov	r1, r3
 80044f2:	f7fc fb93 	bl	8000c1c <__aeabi_d2f>
 80044f6:	4603      	mov	r3, r0
 80044f8:	4a32      	ldr	r2, [pc, #200]	@ (80045c4 <main+0x136c>)
 80044fa:	6013      	str	r3, [r2, #0]
 			   	 	    current_amps2 = current2 / 1000.0; // mA -> A
 80044fc:	4b2e      	ldr	r3, [pc, #184]	@ (80045b8 <main+0x1360>)
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f7fc f83f 	bl	8000584 <__aeabi_i2d>
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	4b22      	ldr	r3, [pc, #136]	@ (8004594 <main+0x133c>)
 800450c:	f7fc f9ce 	bl	80008ac <__aeabi_ddiv>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4610      	mov	r0, r2
 8004516:	4619      	mov	r1, r3
 8004518:	f7fc fb80 	bl	8000c1c <__aeabi_d2f>
 800451c:	4603      	mov	r3, r0
 800451e:	4a2a      	ldr	r2, [pc, #168]	@ (80045c8 <main+0x1370>)
 8004520:	6013      	str	r3, [r2, #0]

 			   	 	      //  Zaokrąglanie do 3 miejsc po przecinku
 			   	 	       output_volts = round(output_volts * 1000) / 1000;
 8004522:	4b27      	ldr	r3, [pc, #156]	@ (80045c0 <main+0x1368>)
 8004524:	edd3 7a00 	vldr	s15, [r3]
 8004528:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80045a4 <main+0x134c>
 800452c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004530:	ee17 0a90 	vmov	r0, s15
 8004534:	f7fc f838 	bl	80005a8 <__aeabi_f2d>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	e046      	b.n	80045cc <main+0x1374>
 800453e:	bf00      	nop
 8004540:	200004ec 	.word	0x200004ec
 8004544:	20000307 	.word	0x20000307
 8004548:	0800cf38 	.word	0x0800cf38
 800454c:	0800cef8 	.word	0x0800cef8
 8004550:	20000298 	.word	0x20000298
 8004554:	200002fd 	.word	0x200002fd
 8004558:	20000128 	.word	0x20000128
 800455c:	20000058 	.word	0x20000058
 8004560:	20000054 	.word	0x20000054
 8004564:	20000055 	.word	0x20000055
 8004568:	20000330 	.word	0x20000330
 800456c:	20000338 	.word	0x20000338
 8004570:	20000018 	.word	0x20000018
 8004574:	20000340 	.word	0x20000340
 8004578:	0800cf40 	.word	0x0800cf40
 800457c:	20000348 	.word	0x20000348
 8004580:	20000358 	.word	0x20000358
 8004584:	2000035a 	.word	0x2000035a
 8004588:	2000035c 	.word	0x2000035c
 800458c:	2000035e 	.word	0x2000035e
 8004590:	0800cf48 	.word	0x0800cf48
 8004594:	408f4000 	.word	0x408f4000
 8004598:	2000036c 	.word	0x2000036c
 800459c:	20000370 	.word	0x20000370
 80045a0:	20000374 	.word	0x20000374
 80045a4:	447a0000 	.word	0x447a0000
 80045a8:	20000384 	.word	0x20000384
 80045ac:	20000350 	.word	0x20000350
 80045b0:	20000360 	.word	0x20000360
 80045b4:	20000362 	.word	0x20000362
 80045b8:	20000364 	.word	0x20000364
 80045bc:	20000366 	.word	0x20000366
 80045c0:	20000378 	.word	0x20000378
 80045c4:	2000037c 	.word	0x2000037c
 80045c8:	20000380 	.word	0x20000380
 80045cc:	ec43 2b10 	vmov	d0, r2, r3
 80045d0:	f008 fb66 	bl	800cca0 <round>
 80045d4:	ec51 0b10 	vmov	r0, r1, d0
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	4b64      	ldr	r3, [pc, #400]	@ (8004770 <main+0x1518>)
 80045de:	f7fc f965 	bl	80008ac <__aeabi_ddiv>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4610      	mov	r0, r2
 80045e8:	4619      	mov	r1, r3
 80045ea:	f7fc fb17 	bl	8000c1c <__aeabi_d2f>
 80045ee:	4603      	mov	r3, r0
 80045f0:	4a60      	ldr	r2, [pc, #384]	@ (8004774 <main+0x151c>)
 80045f2:	6013      	str	r3, [r2, #0]
 			   	 	       vshunt_volts2 = round(vshunt_volts2 * 1000) / 1000;
 80045f4:	4b60      	ldr	r3, [pc, #384]	@ (8004778 <main+0x1520>)
 80045f6:	edd3 7a00 	vldr	s15, [r3]
 80045fa:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 800477c <main+0x1524>
 80045fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004602:	ee17 0a90 	vmov	r0, s15
 8004606:	f7fb ffcf 	bl	80005a8 <__aeabi_f2d>
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	ec43 2b10 	vmov	d0, r2, r3
 8004612:	f008 fb45 	bl	800cca0 <round>
 8004616:	ec51 0b10 	vmov	r0, r1, d0
 800461a:	f04f 0200 	mov.w	r2, #0
 800461e:	4b54      	ldr	r3, [pc, #336]	@ (8004770 <main+0x1518>)
 8004620:	f7fc f944 	bl	80008ac <__aeabi_ddiv>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4610      	mov	r0, r2
 800462a:	4619      	mov	r1, r3
 800462c:	f7fc faf6 	bl	8000c1c <__aeabi_d2f>
 8004630:	4603      	mov	r3, r0
 8004632:	4a51      	ldr	r2, [pc, #324]	@ (8004778 <main+0x1520>)
 8004634:	6013      	str	r3, [r2, #0]
 			   	 	       current_amps2 = round(current_amps2 * 1000) /  1000;
 8004636:	4b52      	ldr	r3, [pc, #328]	@ (8004780 <main+0x1528>)
 8004638:	edd3 7a00 	vldr	s15, [r3]
 800463c:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800477c <main+0x1524>
 8004640:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004644:	ee17 0a90 	vmov	r0, s15
 8004648:	f7fb ffae 	bl	80005a8 <__aeabi_f2d>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	ec43 2b10 	vmov	d0, r2, r3
 8004654:	f008 fb24 	bl	800cca0 <round>
 8004658:	ec51 0b10 	vmov	r0, r1, d0
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	4b43      	ldr	r3, [pc, #268]	@ (8004770 <main+0x1518>)
 8004662:	f7fc f923 	bl	80008ac <__aeabi_ddiv>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4610      	mov	r0, r2
 800466c:	4619      	mov	r1, r3
 800466e:	f7fc fad5 	bl	8000c1c <__aeabi_d2f>
 8004672:	4603      	mov	r3, r0
 8004674:	4a42      	ldr	r2, [pc, #264]	@ (8004780 <main+0x1528>)
 8004676:	6013      	str	r3, [r2, #0]
 	    if(Output == true)
 8004678:	4b42      	ldr	r3, [pc, #264]	@ (8004784 <main+0x152c>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d035      	beq.n	80046ec <main+0x1494>
 	    {
 		if(solar_volts >= 4.6) energymode = 1;
 8004680:	4b41      	ldr	r3, [pc, #260]	@ (8004788 <main+0x1530>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f7fb ff8f 	bl	80005a8 <__aeabi_f2d>
 800468a:	a337      	add	r3, pc, #220	@ (adr r3, 8004768 <main+0x1510>)
 800468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004690:	f7fc fa68 	bl	8000b64 <__aeabi_dcmpge>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <main+0x144a>
 800469a:	4b3c      	ldr	r3, [pc, #240]	@ (800478c <main+0x1534>)
 800469c:	2201      	movs	r2, #1
 800469e:	801a      	strh	r2, [r3, #0]
 80046a0:	e017      	b.n	80046d2 <main+0x147a>
 		else if(PowerSupply == false && solar_volts < 4.5 && energymode != 2) energymode = 2;
 80046a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004790 <main+0x1538>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	f083 0301 	eor.w	r3, r3, #1
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d010      	beq.n	80046d2 <main+0x147a>
 80046b0:	4b35      	ldr	r3, [pc, #212]	@ (8004788 <main+0x1530>)
 80046b2:	edd3 7a00 	vldr	s15, [r3]
 80046b6:	eeb1 7a02 	vmov.f32	s14, #18	@ 0x40900000  4.5
 80046ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c2:	d506      	bpl.n	80046d2 <main+0x147a>
 80046c4:	4b31      	ldr	r3, [pc, #196]	@ (800478c <main+0x1534>)
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d002      	beq.n	80046d2 <main+0x147a>
 80046cc:	4b2f      	ldr	r3, [pc, #188]	@ (800478c <main+0x1534>)
 80046ce:	2202      	movs	r2, #2
 80046d0:	801a      	strh	r2, [r3, #0]
 		if(output_volts < 4) energymode = 3;
 80046d2:	4b28      	ldr	r3, [pc, #160]	@ (8004774 <main+0x151c>)
 80046d4:	edd3 7a00 	vldr	s15, [r3]
 80046d8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80046dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e4:	d502      	bpl.n	80046ec <main+0x1494>
 80046e6:	4b29      	ldr	r3, [pc, #164]	@ (800478c <main+0x1534>)
 80046e8:	2203      	movs	r2, #3
 80046ea:	801a      	strh	r2, [r3, #0]
 	    }
 		if(Output == false) energymode = 4; //wylaczenie zasilania, panel jesli jest w stanie to ładuje akumulator
 80046ec:	4b25      	ldr	r3, [pc, #148]	@ (8004784 <main+0x152c>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	f083 0301 	eor.w	r3, r3, #1
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <main+0x14a8>
 80046fa:	4b24      	ldr	r3, [pc, #144]	@ (800478c <main+0x1534>)
 80046fc:	2204      	movs	r2, #4
 80046fe:	801a      	strh	r2, [r3, #0]
 		switch (energymode) {
 8004700:	4b22      	ldr	r3, [pc, #136]	@ (800478c <main+0x1534>)
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	3b01      	subs	r3, #1
 8004706:	2b03      	cmp	r3, #3
 8004708:	d828      	bhi.n	800475c <main+0x1504>
 800470a:	a201      	add	r2, pc, #4	@ (adr r2, 8004710 <main+0x14b8>)
 800470c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004710:	08004721 	.word	0x08004721
 8004714:	08004731 	.word	0x08004731
 8004718:	0800473d 	.word	0x0800473d
 800471c:	0800474d 	.word	0x0800474d
 		case 1:
 			PowerSupply_Off();
 8004720:	f7fe fc32 	bl	8002f88 <PowerSupply_Off>
 			Battery_Off();
 8004724:	f7fe fc6a 	bl	8002ffc <Battery_Off>
 			Solar = true;
 8004728:	4b1a      	ldr	r3, [pc, #104]	@ (8004794 <main+0x153c>)
 800472a:	2201      	movs	r2, #1
 800472c:	701a      	strb	r2, [r3, #0]
 			break;
 800472e:	e015      	b.n	800475c <main+0x1504>
 		case 2:
 			Battery_On();
 8004730:	f7fe fc78 	bl	8003024 <Battery_On>
 			Solar = false;
 8004734:	4b17      	ldr	r3, [pc, #92]	@ (8004794 <main+0x153c>)
 8004736:	2200      	movs	r2, #0
 8004738:	701a      	strb	r2, [r3, #0]
 			break;
 800473a:	e00f      	b.n	800475c <main+0x1504>

 		case 3:
 			Battery_Off();
 800473c:	f7fe fc5e 	bl	8002ffc <Battery_Off>
 			PowerSupply_On();
 8004740:	f7fe fc36 	bl	8002fb0 <PowerSupply_On>
 			Solar = false;
 8004744:	4b13      	ldr	r3, [pc, #76]	@ (8004794 <main+0x153c>)
 8004746:	2200      	movs	r2, #0
 8004748:	701a      	strb	r2, [r3, #0]

 			break;
 800474a:	e007      	b.n	800475c <main+0x1504>
 		case 4:
 			PowerSupply_Off();
 800474c:	f7fe fc1c 	bl	8002f88 <PowerSupply_Off>
 			Battery_Off();
 8004750:	f7fe fc54 	bl	8002ffc <Battery_Off>
 			Solar = false;
 8004754:	4b0f      	ldr	r3, [pc, #60]	@ (8004794 <main+0x153c>)
 8004756:	2200      	movs	r2, #0
 8004758:	701a      	strb	r2, [r3, #0]
 			break;
 800475a:	bf00      	nop
 		}
 	////////////////////////////////////////////////////////////////////////////////////
 	for (int i = 0; i < RX_BUFFER_SIZE; i++) {
 800475c:	2300      	movs	r3, #0
 800475e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004760:	e026      	b.n	80047b0 <main+0x1558>
 8004762:	bf00      	nop
 8004764:	f3af 8000 	nop.w
 8004768:	66666666 	.word	0x66666666
 800476c:	40126666 	.word	0x40126666
 8004770:	408f4000 	.word	0x408f4000
 8004774:	20000378 	.word	0x20000378
 8004778:	2000037c 	.word	0x2000037c
 800477c:	447a0000 	.word	0x447a0000
 8004780:	20000380 	.word	0x20000380
 8004784:	2000036a 	.word	0x2000036a
 8004788:	2000036c 	.word	0x2000036c
 800478c:	20000154 	.word	0x20000154
 8004790:	20000368 	.word	0x20000368
 8004794:	2000036b 	.word	0x2000036b
 	    received[i] = rxBuffer[i]; // Kopiuj dane
 8004798:	4aa7      	ldr	r2, [pc, #668]	@ (8004a38 <main+0x17e0>)
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	4413      	add	r3, r2
 800479e:	7819      	ldrb	r1, [r3, #0]
 80047a0:	4aa6      	ldr	r2, [pc, #664]	@ (8004a3c <main+0x17e4>)
 80047a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a4:	4413      	add	r3, r2
 80047a6:	460a      	mov	r2, r1
 80047a8:	701a      	strb	r2, [r3, #0]
 	for (int i = 0; i < RX_BUFFER_SIZE; i++) {
 80047aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ac:	3301      	adds	r3, #1
 80047ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80047b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	ddf0      	ble.n	8004798 <main+0x1540>
 	}
 	received[RX_BUFFER_SIZE] = '\0'; // Dodaj znak końca stringa
 80047b6:	4ba1      	ldr	r3, [pc, #644]	@ (8004a3c <main+0x17e4>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	711a      	strb	r2, [r3, #4]
 	//Wyłączenie światła w kuchnii
 	if (strcmp(received, "LK00") == 0 && strcmp(lastMessage, "LK00") != 0) {
 80047bc:	49a0      	ldr	r1, [pc, #640]	@ (8004a40 <main+0x17e8>)
 80047be:	489f      	ldr	r0, [pc, #636]	@ (8004a3c <main+0x17e4>)
 80047c0:	f7fb fd26 	bl	8000210 <strcmp>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d111      	bne.n	80047ee <main+0x1596>
 80047ca:	499d      	ldr	r1, [pc, #628]	@ (8004a40 <main+0x17e8>)
 80047cc:	489d      	ldr	r0, [pc, #628]	@ (8004a44 <main+0x17ec>)
 80047ce:	f7fb fd1f 	bl	8000210 <strcmp>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <main+0x1596>
 	    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 80047d8:	210c      	movs	r1, #12
 80047da:	489b      	ldr	r0, [pc, #620]	@ (8004a48 <main+0x17f0>)
 80047dc:	f005 f91c 	bl	8009a18 <HAL_TIM_PWM_Stop>
 	    strcpy(lastMessage, "LK00");
 80047e0:	4b98      	ldr	r3, [pc, #608]	@ (8004a44 <main+0x17ec>)
 80047e2:	4a97      	ldr	r2, [pc, #604]	@ (8004a40 <main+0x17e8>)
 80047e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047e8:	6018      	str	r0, [r3, #0]
 80047ea:	3304      	adds	r3, #4
 80047ec:	7019      	strb	r1, [r3, #0]
 	}
 	//Włączenie światła w kuchnii
 	if (strcmp(received, "LK01") == 0 && strcmp(lastMessage, "LK01") != 0) {
 80047ee:	4997      	ldr	r1, [pc, #604]	@ (8004a4c <main+0x17f4>)
 80047f0:	4892      	ldr	r0, [pc, #584]	@ (8004a3c <main+0x17e4>)
 80047f2:	f7fb fd0d 	bl	8000210 <strcmp>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d116      	bne.n	800482a <main+0x15d2>
 80047fc:	4993      	ldr	r1, [pc, #588]	@ (8004a4c <main+0x17f4>)
 80047fe:	4891      	ldr	r0, [pc, #580]	@ (8004a44 <main+0x17ec>)
 8004800:	f7fb fd06 	bl	8000210 <strcmp>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00f      	beq.n	800482a <main+0x15d2>
 	 	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, brightnessKitchen);
 800480a:	4b91      	ldr	r3, [pc, #580]	@ (8004a50 <main+0x17f8>)
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	4b8e      	ldr	r3, [pc, #568]	@ (8004a48 <main+0x17f0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	641a      	str	r2, [r3, #64]	@ 0x40
 	 	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8004814:	210c      	movs	r1, #12
 8004816:	488c      	ldr	r0, [pc, #560]	@ (8004a48 <main+0x17f0>)
 8004818:	f005 f804 	bl	8009824 <HAL_TIM_PWM_Start>
 	 	strcpy(lastMessage, "LK01");
 800481c:	4b89      	ldr	r3, [pc, #548]	@ (8004a44 <main+0x17ec>)
 800481e:	4a8b      	ldr	r2, [pc, #556]	@ (8004a4c <main+0x17f4>)
 8004820:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004824:	6018      	str	r0, [r3, #0]
 8004826:	3304      	adds	r3, #4
 8004828:	7019      	strb	r1, [r3, #0]
 	}
 	//Wyłączenie światła w salonie
 	if (strcmp(received, "LL00") == 0 && strcmp(lastMessage, "LL00") != 0) {
 800482a:	498a      	ldr	r1, [pc, #552]	@ (8004a54 <main+0x17fc>)
 800482c:	4883      	ldr	r0, [pc, #524]	@ (8004a3c <main+0x17e4>)
 800482e:	f7fb fcef 	bl	8000210 <strcmp>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d111      	bne.n	800485c <main+0x1604>
 8004838:	4986      	ldr	r1, [pc, #536]	@ (8004a54 <main+0x17fc>)
 800483a:	4882      	ldr	r0, [pc, #520]	@ (8004a44 <main+0x17ec>)
 800483c:	f7fb fce8 	bl	8000210 <strcmp>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <main+0x1604>
 	 	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8004846:	2100      	movs	r1, #0
 8004848:	4883      	ldr	r0, [pc, #524]	@ (8004a58 <main+0x1800>)
 800484a:	f005 f8e5 	bl	8009a18 <HAL_TIM_PWM_Stop>
 	 	strcpy(lastMessage, "LL00");
 800484e:	4b7d      	ldr	r3, [pc, #500]	@ (8004a44 <main+0x17ec>)
 8004850:	4a80      	ldr	r2, [pc, #512]	@ (8004a54 <main+0x17fc>)
 8004852:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004856:	6018      	str	r0, [r3, #0]
 8004858:	3304      	adds	r3, #4
 800485a:	7019      	strb	r1, [r3, #0]
 	}
 	//Włączenie światła w salonie
 	if (strcmp(received, "LL01") == 0 && strcmp(lastMessage, "LL01") != 0) {
 800485c:	497f      	ldr	r1, [pc, #508]	@ (8004a5c <main+0x1804>)
 800485e:	4877      	ldr	r0, [pc, #476]	@ (8004a3c <main+0x17e4>)
 8004860:	f7fb fcd6 	bl	8000210 <strcmp>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d116      	bne.n	8004898 <main+0x1640>
 800486a:	497c      	ldr	r1, [pc, #496]	@ (8004a5c <main+0x1804>)
 800486c:	4875      	ldr	r0, [pc, #468]	@ (8004a44 <main+0x17ec>)
 800486e:	f7fb fccf 	bl	8000210 <strcmp>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00f      	beq.n	8004898 <main+0x1640>
 	 	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 8004878:	4b79      	ldr	r3, [pc, #484]	@ (8004a60 <main+0x1808>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4b76      	ldr	r3, [pc, #472]	@ (8004a58 <main+0x1800>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	635a      	str	r2, [r3, #52]	@ 0x34
 	 	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8004882:	2100      	movs	r1, #0
 8004884:	4874      	ldr	r0, [pc, #464]	@ (8004a58 <main+0x1800>)
 8004886:	f004 ffcd 	bl	8009824 <HAL_TIM_PWM_Start>
 	 	strcpy(lastMessage, "LL01");
 800488a:	4b6e      	ldr	r3, [pc, #440]	@ (8004a44 <main+0x17ec>)
 800488c:	4a73      	ldr	r2, [pc, #460]	@ (8004a5c <main+0x1804>)
 800488e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004892:	6018      	str	r0, [r3, #0]
 8004894:	3304      	adds	r3, #4
 8004896:	7019      	strb	r1, [r3, #0]
 	}

 	if (strcmp(received, "LG00") == 0 && strcmp(lastMessage, "LG00") != 0) {
 8004898:	4972      	ldr	r1, [pc, #456]	@ (8004a64 <main+0x180c>)
 800489a:	4868      	ldr	r0, [pc, #416]	@ (8004a3c <main+0x17e4>)
 800489c:	f7fb fcb8 	bl	8000210 <strcmp>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d111      	bne.n	80048ca <main+0x1672>
 80048a6:	496f      	ldr	r1, [pc, #444]	@ (8004a64 <main+0x180c>)
 80048a8:	4866      	ldr	r0, [pc, #408]	@ (8004a44 <main+0x17ec>)
 80048aa:	f7fb fcb1 	bl	8000210 <strcmp>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <main+0x1672>
 	 	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80048b4:	2100      	movs	r1, #0
 80048b6:	4864      	ldr	r0, [pc, #400]	@ (8004a48 <main+0x17f0>)
 80048b8:	f005 f8ae 	bl	8009a18 <HAL_TIM_PWM_Stop>
 	 	strcpy(lastMessage, "LG00");
 80048bc:	4b61      	ldr	r3, [pc, #388]	@ (8004a44 <main+0x17ec>)
 80048be:	4a69      	ldr	r2, [pc, #420]	@ (8004a64 <main+0x180c>)
 80048c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80048c4:	6018      	str	r0, [r3, #0]
 80048c6:	3304      	adds	r3, #4
 80048c8:	7019      	strb	r1, [r3, #0]
 	}

 	if (strcmp(received, "LG01") == 0 && strcmp(lastMessage, "LG01") != 0) {
 80048ca:	4967      	ldr	r1, [pc, #412]	@ (8004a68 <main+0x1810>)
 80048cc:	485b      	ldr	r0, [pc, #364]	@ (8004a3c <main+0x17e4>)
 80048ce:	f7fb fc9f 	bl	8000210 <strcmp>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d116      	bne.n	8004906 <main+0x16ae>
 80048d8:	4963      	ldr	r1, [pc, #396]	@ (8004a68 <main+0x1810>)
 80048da:	485a      	ldr	r0, [pc, #360]	@ (8004a44 <main+0x17ec>)
 80048dc:	f7fb fc98 	bl	8000210 <strcmp>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00f      	beq.n	8004906 <main+0x16ae>
 	 	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 80048e6:	4b61      	ldr	r3, [pc, #388]	@ (8004a6c <main+0x1814>)
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	4b57      	ldr	r3, [pc, #348]	@ (8004a48 <main+0x17f0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	635a      	str	r2, [r3, #52]	@ 0x34
 	 	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80048f0:	2100      	movs	r1, #0
 80048f2:	4855      	ldr	r0, [pc, #340]	@ (8004a48 <main+0x17f0>)
 80048f4:	f004 ff96 	bl	8009824 <HAL_TIM_PWM_Start>
 	 	strcpy(lastMessage, "LG01");
 80048f8:	4b52      	ldr	r3, [pc, #328]	@ (8004a44 <main+0x17ec>)
 80048fa:	4a5b      	ldr	r2, [pc, #364]	@ (8004a68 <main+0x1810>)
 80048fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004900:	6018      	str	r0, [r3, #0]
 8004902:	3304      	adds	r3, #4
 8004904:	7019      	strb	r1, [r3, #0]
 	}

 	if(rxBuffer[0]=='X')  //Suwak jasności kuchnia
 8004906:	4b4c      	ldr	r3, [pc, #304]	@ (8004a38 <main+0x17e0>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b58      	cmp	r3, #88	@ 0x58
 800490c:	d11d      	bne.n	800494a <main+0x16f2>
 	{
 		brightnessKitchen = (received[1] - '0') * 1000
 800490e:	4b4b      	ldr	r3, [pc, #300]	@ (8004a3c <main+0x17e4>)
 8004910:	785b      	ldrb	r3, [r3, #1]
 8004912:	3b30      	subs	r3, #48	@ 0x30
 8004914:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004918:	fb03 f202 	mul.w	r2, r3, r2
 		                  + (received[2] - '0') * 100
 800491c:	4b47      	ldr	r3, [pc, #284]	@ (8004a3c <main+0x17e4>)
 800491e:	789b      	ldrb	r3, [r3, #2]
 8004920:	3b30      	subs	r3, #48	@ 0x30
 8004922:	2164      	movs	r1, #100	@ 0x64
 8004924:	fb01 f303 	mul.w	r3, r1, r3
 8004928:	18d1      	adds	r1, r2, r3
 		                  + (received[3] - '0')* 10;
 800492a:	4b44      	ldr	r3, [pc, #272]	@ (8004a3c <main+0x17e4>)
 800492c:	78db      	ldrb	r3, [r3, #3]
 800492e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8004932:	4613      	mov	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	440b      	add	r3, r1
 		brightnessKitchen = (received[1] - '0') * 1000
 800493c:	4a44      	ldr	r2, [pc, #272]	@ (8004a50 <main+0x17f8>)
 800493e:	6013      	str	r3, [r2, #0]
 		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, brightnessKitchen);
 8004940:	4b43      	ldr	r3, [pc, #268]	@ (8004a50 <main+0x17f8>)
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	4b40      	ldr	r3, [pc, #256]	@ (8004a48 <main+0x17f0>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	641a      	str	r2, [r3, #64]	@ 0x40
 	}

 	if(received[0]=='Y')	//Suwak jasności salon
 800494a:	4b3c      	ldr	r3, [pc, #240]	@ (8004a3c <main+0x17e4>)
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	2b59      	cmp	r3, #89	@ 0x59
 8004950:	d11d      	bne.n	800498e <main+0x1736>
 	{
 		brightnessLivingroom = (received[1] - '0') * 1000
 8004952:	4b3a      	ldr	r3, [pc, #232]	@ (8004a3c <main+0x17e4>)
 8004954:	785b      	ldrb	r3, [r3, #1]
 8004956:	3b30      	subs	r3, #48	@ 0x30
 8004958:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800495c:	fb03 f202 	mul.w	r2, r3, r2
                 + (received[2] - '0') * 100
 8004960:	4b36      	ldr	r3, [pc, #216]	@ (8004a3c <main+0x17e4>)
 8004962:	789b      	ldrb	r3, [r3, #2]
 8004964:	3b30      	subs	r3, #48	@ 0x30
 8004966:	2164      	movs	r1, #100	@ 0x64
 8004968:	fb01 f303 	mul.w	r3, r1, r3
 800496c:	18d1      	adds	r1, r2, r3
                 + (received[3] - '0') * 10;
 800496e:	4b33      	ldr	r3, [pc, #204]	@ (8004a3c <main+0x17e4>)
 8004970:	78db      	ldrb	r3, [r3, #3]
 8004972:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	440b      	add	r3, r1
 		brightnessLivingroom = (received[1] - '0') * 1000
 8004980:	4a37      	ldr	r2, [pc, #220]	@ (8004a60 <main+0x1808>)
 8004982:	6013      	str	r3, [r2, #0]
 		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightnessLivingroom);
 8004984:	4b36      	ldr	r3, [pc, #216]	@ (8004a60 <main+0x1808>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	4b33      	ldr	r3, [pc, #204]	@ (8004a58 <main+0x1800>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	635a      	str	r2, [r3, #52]	@ 0x34
 	}
 	if(received[0]=='Z')	//Suwak jasności garaż
 800498e:	4b2b      	ldr	r3, [pc, #172]	@ (8004a3c <main+0x17e4>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b5a      	cmp	r3, #90	@ 0x5a
 8004994:	d11d      	bne.n	80049d2 <main+0x177a>
 	{
 		brightnessGarage = (received[1] - '0') * 1000
 8004996:	4b29      	ldr	r3, [pc, #164]	@ (8004a3c <main+0x17e4>)
 8004998:	785b      	ldrb	r3, [r3, #1]
 800499a:	3b30      	subs	r3, #48	@ 0x30
 800499c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80049a0:	fb03 f202 	mul.w	r2, r3, r2
                 + (received[2] - '0') * 100
 80049a4:	4b25      	ldr	r3, [pc, #148]	@ (8004a3c <main+0x17e4>)
 80049a6:	789b      	ldrb	r3, [r3, #2]
 80049a8:	3b30      	subs	r3, #48	@ 0x30
 80049aa:	2164      	movs	r1, #100	@ 0x64
 80049ac:	fb01 f303 	mul.w	r3, r1, r3
 80049b0:	18d1      	adds	r1, r2, r3
                 + (received[3] - '0') * 10;
 80049b2:	4b22      	ldr	r3, [pc, #136]	@ (8004a3c <main+0x17e4>)
 80049b4:	78db      	ldrb	r3, [r3, #3]
 80049b6:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80049ba:	4613      	mov	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	440b      	add	r3, r1
 		brightnessGarage = (received[1] - '0') * 1000
 80049c4:	4a29      	ldr	r2, [pc, #164]	@ (8004a6c <main+0x1814>)
 80049c6:	6013      	str	r3, [r2, #0]
 		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightnessGarage);
 80049c8:	4b28      	ldr	r3, [pc, #160]	@ (8004a6c <main+0x1814>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004a48 <main+0x17f0>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	635a      	str	r2, [r3, #52]	@ 0x34
 	}
 	//Włączenie alarmu
 	if (strcmp(received, "AL01") == 0 && strcmp(lastMessage, "AL01") != 0)
 80049d2:	4927      	ldr	r1, [pc, #156]	@ (8004a70 <main+0x1818>)
 80049d4:	4819      	ldr	r0, [pc, #100]	@ (8004a3c <main+0x17e4>)
 80049d6:	f7fb fc1b 	bl	8000210 <strcmp>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d112      	bne.n	8004a06 <main+0x17ae>
 80049e0:	4923      	ldr	r1, [pc, #140]	@ (8004a70 <main+0x1818>)
 80049e2:	4818      	ldr	r0, [pc, #96]	@ (8004a44 <main+0x17ec>)
 80049e4:	f7fb fc14 	bl	8000210 <strcmp>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00b      	beq.n	8004a06 <main+0x17ae>
 	{
 		alarm = true;
 80049ee:	4b21      	ldr	r3, [pc, #132]	@ (8004a74 <main+0x181c>)
 80049f0:	2201      	movs	r2, #1
 80049f2:	701a      	strb	r2, [r3, #0]
		PIR_detected = false;
 80049f4:	4b20      	ldr	r3, [pc, #128]	@ (8004a78 <main+0x1820>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	701a      	strb	r2, [r3, #0]
		alarmLED = false;
 80049fa:	4b20      	ldr	r3, [pc, #128]	@ (8004a7c <main+0x1824>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim2);
 8004a00:	4811      	ldr	r0, [pc, #68]	@ (8004a48 <main+0x17f0>)
 8004a02:	f004 fe07 	bl	8009614 <HAL_TIM_Base_Start_IT>
 	}
 	//Wyłączenie alarmu
 	if (strcmp(received, "AL00") == 0 && strcmp(lastMessage, "AL00") != 0)
 8004a06:	491e      	ldr	r1, [pc, #120]	@ (8004a80 <main+0x1828>)
 8004a08:	480c      	ldr	r0, [pc, #48]	@ (8004a3c <main+0x17e4>)
 8004a0a:	f7fb fc01 	bl	8000210 <strcmp>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d13e      	bne.n	8004a92 <main+0x183a>
 8004a14:	491a      	ldr	r1, [pc, #104]	@ (8004a80 <main+0x1828>)
 8004a16:	480b      	ldr	r0, [pc, #44]	@ (8004a44 <main+0x17ec>)
 8004a18:	f7fb fbfa 	bl	8000210 <strcmp>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d037      	beq.n	8004a92 <main+0x183a>
 	{
 		alarm = false;
 8004a22:	4b14      	ldr	r3, [pc, #80]	@ (8004a74 <main+0x181c>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	701a      	strb	r2, [r3, #0]
		PIR_detected = false;
 8004a28:	4b13      	ldr	r3, [pc, #76]	@ (8004a78 <main+0x1820>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	701a      	strb	r2, [r3, #0]
		alarmLED = false;
 8004a2e:	4b13      	ldr	r3, [pc, #76]	@ (8004a7c <main+0x1824>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	701a      	strb	r2, [r3, #0]
 8004a34:	e026      	b.n	8004a84 <main+0x182c>
 8004a36:	bf00      	nop
 8004a38:	200002e4 	.word	0x200002e4
 8004a3c:	200002f0 	.word	0x200002f0
 8004a40:	0800cf4c 	.word	0x0800cf4c
 8004a44:	200002f8 	.word	0x200002f8
 8004a48:	200004a0 	.word	0x200004a0
 8004a4c:	0800cf54 	.word	0x0800cf54
 8004a50:	20000130 	.word	0x20000130
 8004a54:	0800cf5c 	.word	0x0800cf5c
 8004a58:	20000538 	.word	0x20000538
 8004a5c:	0800cf64 	.word	0x0800cf64
 8004a60:	2000012c 	.word	0x2000012c
 8004a64:	0800cf6c 	.word	0x0800cf6c
 8004a68:	0800cf74 	.word	0x0800cf74
 8004a6c:	20000134 	.word	0x20000134
 8004a70:	0800cf7c 	.word	0x0800cf7c
 8004a74:	200002fe 	.word	0x200002fe
 8004a78:	20000303 	.word	0x20000303
 8004a7c:	200002ff 	.word	0x200002ff
 8004a80:	0800cf84 	.word	0x0800cf84
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8004a84:	2108      	movs	r1, #8
 8004a86:	48a9      	ldr	r0, [pc, #676]	@ (8004d2c <main+0x1ad4>)
 8004a88:	f004 ffc6 	bl	8009a18 <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop_IT(&htim2);
 8004a8c:	48a7      	ldr	r0, [pc, #668]	@ (8004d2c <main+0x1ad4>)
 8004a8e:	f004 fe39 	bl	8009704 <HAL_TIM_Base_Stop_IT>
 	}
 	//Zamknięcie drzwi
	if (strcmp(received, "DM00") == 0 && strcmp(lastMessage, "DM00") != 0)
 8004a92:	49a7      	ldr	r1, [pc, #668]	@ (8004d30 <main+0x1ad8>)
 8004a94:	48a7      	ldr	r0, [pc, #668]	@ (8004d34 <main+0x1adc>)
 8004a96:	f7fb fbbb 	bl	8000210 <strcmp>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d112      	bne.n	8004ac6 <main+0x186e>
 8004aa0:	49a3      	ldr	r1, [pc, #652]	@ (8004d30 <main+0x1ad8>)
 8004aa2:	48a5      	ldr	r0, [pc, #660]	@ (8004d38 <main+0x1ae0>)
 8004aa4:	f7fb fbb4 	bl	8000210 <strcmp>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00b      	beq.n	8004ac6 <main+0x186e>
	{
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 500);
 8004aae:	4ba3      	ldr	r3, [pc, #652]	@ (8004d3c <main+0x1ae4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004ab6:	63da      	str	r2, [r3, #60]	@ 0x3c
		strcpy(lastMessage, "DM00");
 8004ab8:	4b9f      	ldr	r3, [pc, #636]	@ (8004d38 <main+0x1ae0>)
 8004aba:	4a9d      	ldr	r2, [pc, #628]	@ (8004d30 <main+0x1ad8>)
 8004abc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ac0:	6018      	str	r0, [r3, #0]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	7019      	strb	r1, [r3, #0]
	}

	//Otwarcie drzwi
	 if (strcmp(received, "DM01") == 0 && strcmp(lastMessage, "DM01") != 0)
 8004ac6:	499e      	ldr	r1, [pc, #632]	@ (8004d40 <main+0x1ae8>)
 8004ac8:	489a      	ldr	r0, [pc, #616]	@ (8004d34 <main+0x1adc>)
 8004aca:	f7fb fba1 	bl	8000210 <strcmp>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d112      	bne.n	8004afa <main+0x18a2>
 8004ad4:	499a      	ldr	r1, [pc, #616]	@ (8004d40 <main+0x1ae8>)
 8004ad6:	4898      	ldr	r0, [pc, #608]	@ (8004d38 <main+0x1ae0>)
 8004ad8:	f7fb fb9a 	bl	8000210 <strcmp>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00b      	beq.n	8004afa <main+0x18a2>
	 {
		 __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 1500);
 8004ae2:	4b96      	ldr	r3, [pc, #600]	@ (8004d3c <main+0x1ae4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004aea:	63da      	str	r2, [r3, #60]	@ 0x3c
		strcpy(lastMessage, "DM01");
 8004aec:	4b92      	ldr	r3, [pc, #584]	@ (8004d38 <main+0x1ae0>)
 8004aee:	4a94      	ldr	r2, [pc, #592]	@ (8004d40 <main+0x1ae8>)
 8004af0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004af4:	6018      	str	r0, [r3, #0]
 8004af6:	3304      	adds	r3, #4
 8004af8:	7019      	strb	r1, [r3, #0]
	 }

	 //Zamknięcie bramy
	if (strcmp(received, "GM00") == 0 && strcmp(lastMessage, "GM00") != 0)
 8004afa:	4992      	ldr	r1, [pc, #584]	@ (8004d44 <main+0x1aec>)
 8004afc:	488d      	ldr	r0, [pc, #564]	@ (8004d34 <main+0x1adc>)
 8004afe:	f7fb fb87 	bl	8000210 <strcmp>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d11d      	bne.n	8004b44 <main+0x18ec>
 8004b08:	498e      	ldr	r1, [pc, #568]	@ (8004d44 <main+0x1aec>)
 8004b0a:	488b      	ldr	r0, [pc, #556]	@ (8004d38 <main+0x1ae0>)
 8004b0c:	f7fb fb80 	bl	8000210 <strcmp>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d016      	beq.n	8004b44 <main+0x18ec>
	{
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 500);
 8004b16:	4b89      	ldr	r3, [pc, #548]	@ (8004d3c <main+0x1ae4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004b1e:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_Delay(1200);
 8004b20:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8004b24:	f001 f904 	bl	8005d30 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 0);
 8004b28:	4b84      	ldr	r3, [pc, #528]	@ (8004d3c <main+0x1ae4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	641a      	str	r2, [r3, #64]	@ 0x40
		garageGate= true;
 8004b30:	4b85      	ldr	r3, [pc, #532]	@ (8004d48 <main+0x1af0>)
 8004b32:	2201      	movs	r2, #1
 8004b34:	701a      	strb	r2, [r3, #0]

		strcpy(lastMessage, "GM00");
 8004b36:	4b80      	ldr	r3, [pc, #512]	@ (8004d38 <main+0x1ae0>)
 8004b38:	4a82      	ldr	r2, [pc, #520]	@ (8004d44 <main+0x1aec>)
 8004b3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b3e:	6018      	str	r0, [r3, #0]
 8004b40:	3304      	adds	r3, #4
 8004b42:	7019      	strb	r1, [r3, #0]
	}

	//Otwarcie bramy
	if (strcmp(received, "GM01") == 0 && strcmp(lastMessage, "GM01") != 0)
 8004b44:	4981      	ldr	r1, [pc, #516]	@ (8004d4c <main+0x1af4>)
 8004b46:	487b      	ldr	r0, [pc, #492]	@ (8004d34 <main+0x1adc>)
 8004b48:	f7fb fb62 	bl	8000210 <strcmp>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d11d      	bne.n	8004b8e <main+0x1936>
 8004b52:	497e      	ldr	r1, [pc, #504]	@ (8004d4c <main+0x1af4>)
 8004b54:	4878      	ldr	r0, [pc, #480]	@ (8004d38 <main+0x1ae0>)
 8004b56:	f7fb fb5b 	bl	8000210 <strcmp>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d016      	beq.n	8004b8e <main+0x1936>
	{
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 2000);
 8004b60:	4b76      	ldr	r3, [pc, #472]	@ (8004d3c <main+0x1ae4>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004b68:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_Delay(1500);
 8004b6a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8004b6e:	f001 f8df 	bl	8005d30 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 0);
 8004b72:	4b72      	ldr	r3, [pc, #456]	@ (8004d3c <main+0x1ae4>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2200      	movs	r2, #0
 8004b78:	641a      	str	r2, [r3, #64]	@ 0x40
		garageGate = false;
 8004b7a:	4b73      	ldr	r3, [pc, #460]	@ (8004d48 <main+0x1af0>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]

		strcpy(lastMessage, "GM01");
 8004b80:	4b6d      	ldr	r3, [pc, #436]	@ (8004d38 <main+0x1ae0>)
 8004b82:	4a72      	ldr	r2, [pc, #456]	@ (8004d4c <main+0x1af4>)
 8004b84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b88:	6018      	str	r0, [r3, #0]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	7019      	strb	r1, [r3, #0]
	}

	//Zamknięcie rolety w kuchnii
	if (strcmp(received, "SK00") == 0 && strcmp(lastMessage, "SK00") != 0)
 8004b8e:	4970      	ldr	r1, [pc, #448]	@ (8004d50 <main+0x1af8>)
 8004b90:	4868      	ldr	r0, [pc, #416]	@ (8004d34 <main+0x1adc>)
 8004b92:	f7fb fb3d 	bl	8000210 <strcmp>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d11d      	bne.n	8004bd8 <main+0x1980>
 8004b9c:	496c      	ldr	r1, [pc, #432]	@ (8004d50 <main+0x1af8>)
 8004b9e:	4866      	ldr	r0, [pc, #408]	@ (8004d38 <main+0x1ae0>)
 8004ba0:	f7fb fb36 	bl	8000210 <strcmp>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d016      	beq.n	8004bd8 <main+0x1980>
	{

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 500);
 8004baa:	4b6a      	ldr	r3, [pc, #424]	@ (8004d54 <main+0x1afc>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004bb2:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(500);
 8004bb4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004bb8:	f001 f8ba 	bl	8005d30 <HAL_Delay>
	   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 8004bbc:	4b65      	ldr	r3, [pc, #404]	@ (8004d54 <main+0x1afc>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	635a      	str	r2, [r3, #52]	@ 0x34
	   kitchenShutter = true;
 8004bc4:	4b64      	ldr	r3, [pc, #400]	@ (8004d58 <main+0x1b00>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	701a      	strb	r2, [r3, #0]
		strcpy(lastMessage, "SK00");
 8004bca:	4b5b      	ldr	r3, [pc, #364]	@ (8004d38 <main+0x1ae0>)
 8004bcc:	4a60      	ldr	r2, [pc, #384]	@ (8004d50 <main+0x1af8>)
 8004bce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004bd2:	6018      	str	r0, [r3, #0]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	7019      	strb	r1, [r3, #0]
	}

	//Otwarcie rolety w kuchnii
	if (strcmp(received, "SK01") == 0 && strcmp(lastMessage, "SK01") != 0)
 8004bd8:	4960      	ldr	r1, [pc, #384]	@ (8004d5c <main+0x1b04>)
 8004bda:	4856      	ldr	r0, [pc, #344]	@ (8004d34 <main+0x1adc>)
 8004bdc:	f7fb fb18 	bl	8000210 <strcmp>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d11d      	bne.n	8004c22 <main+0x19ca>
 8004be6:	495d      	ldr	r1, [pc, #372]	@ (8004d5c <main+0x1b04>)
 8004be8:	4853      	ldr	r0, [pc, #332]	@ (8004d38 <main+0x1ae0>)
 8004bea:	f7fb fb11 	bl	8000210 <strcmp>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d016      	beq.n	8004c22 <main+0x19ca>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 2000);
 8004bf4:	4b57      	ldr	r3, [pc, #348]	@ (8004d54 <main+0x1afc>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004bfc:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(500);
 8004bfe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004c02:	f001 f895 	bl	8005d30 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8004c06:	4b53      	ldr	r3, [pc, #332]	@ (8004d54 <main+0x1afc>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	635a      	str	r2, [r3, #52]	@ 0x34
		kitchenShutter = false;
 8004c0e:	4b52      	ldr	r3, [pc, #328]	@ (8004d58 <main+0x1b00>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	701a      	strb	r2, [r3, #0]
		strcpy(lastMessage, "SK01");
 8004c14:	4b48      	ldr	r3, [pc, #288]	@ (8004d38 <main+0x1ae0>)
 8004c16:	4a51      	ldr	r2, [pc, #324]	@ (8004d5c <main+0x1b04>)
 8004c18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c1c:	6018      	str	r0, [r3, #0]
 8004c1e:	3304      	adds	r3, #4
 8004c20:	7019      	strb	r1, [r3, #0]
	}

	//Zamknięcie rolety w salonie
	if (strcmp(received, "SL00") == 0 && strcmp(lastMessage, "SL00") != 0)
 8004c22:	494f      	ldr	r1, [pc, #316]	@ (8004d60 <main+0x1b08>)
 8004c24:	4843      	ldr	r0, [pc, #268]	@ (8004d34 <main+0x1adc>)
 8004c26:	f7fb faf3 	bl	8000210 <strcmp>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d11d      	bne.n	8004c6c <main+0x1a14>
 8004c30:	494b      	ldr	r1, [pc, #300]	@ (8004d60 <main+0x1b08>)
 8004c32:	4841      	ldr	r0, [pc, #260]	@ (8004d38 <main+0x1ae0>)
 8004c34:	f7fb faec 	bl	8000210 <strcmp>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d016      	beq.n	8004c6c <main+0x1a14>
	{

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 500);
 8004c3e:	4b45      	ldr	r3, [pc, #276]	@ (8004d54 <main+0x1afc>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004c46:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(500);
 8004c48:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004c4c:	f001 f870 	bl	8005d30 <HAL_Delay>
	   __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 0);
 8004c50:	4b40      	ldr	r3, [pc, #256]	@ (8004d54 <main+0x1afc>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2200      	movs	r2, #0
 8004c56:	639a      	str	r2, [r3, #56]	@ 0x38
	   livingroomShutter = true;
 8004c58:	4b42      	ldr	r3, [pc, #264]	@ (8004d64 <main+0x1b0c>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	701a      	strb	r2, [r3, #0]
		strcpy(lastMessage, "SL00");
 8004c5e:	4b36      	ldr	r3, [pc, #216]	@ (8004d38 <main+0x1ae0>)
 8004c60:	4a3f      	ldr	r2, [pc, #252]	@ (8004d60 <main+0x1b08>)
 8004c62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c66:	6018      	str	r0, [r3, #0]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	7019      	strb	r1, [r3, #0]
	}

	//Otwarcie rolety w salonie
	if (strcmp(received, "SL01") == 0 && strcmp(lastMessage, "SL01") != 0)
 8004c6c:	493e      	ldr	r1, [pc, #248]	@ (8004d68 <main+0x1b10>)
 8004c6e:	4831      	ldr	r0, [pc, #196]	@ (8004d34 <main+0x1adc>)
 8004c70:	f7fb face 	bl	8000210 <strcmp>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d11d      	bne.n	8004cb6 <main+0x1a5e>
 8004c7a:	493b      	ldr	r1, [pc, #236]	@ (8004d68 <main+0x1b10>)
 8004c7c:	482e      	ldr	r0, [pc, #184]	@ (8004d38 <main+0x1ae0>)
 8004c7e:	f7fb fac7 	bl	8000210 <strcmp>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d016      	beq.n	8004cb6 <main+0x1a5e>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 2000);
 8004c88:	4b32      	ldr	r3, [pc, #200]	@ (8004d54 <main+0x1afc>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004c90:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(500);
 8004c92:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004c96:	f001 f84b 	bl	8005d30 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 0);
 8004c9a:	4b2e      	ldr	r3, [pc, #184]	@ (8004d54 <main+0x1afc>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	639a      	str	r2, [r3, #56]	@ 0x38
		livingroomShutter = false;
 8004ca2:	4b30      	ldr	r3, [pc, #192]	@ (8004d64 <main+0x1b0c>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	701a      	strb	r2, [r3, #0]
		strcpy(lastMessage, "SL01");
 8004ca8:	4b23      	ldr	r3, [pc, #140]	@ (8004d38 <main+0x1ae0>)
 8004caa:	4a2f      	ldr	r2, [pc, #188]	@ (8004d68 <main+0x1b10>)
 8004cac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004cb0:	6018      	str	r0, [r3, #0]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	7019      	strb	r1, [r3, #0]
	}


	//Zamknięcie rolety w garażu
	if (strcmp(received, "SG00") == 0 && strcmp(lastMessage, "SG00") != 0)
 8004cb6:	492d      	ldr	r1, [pc, #180]	@ (8004d6c <main+0x1b14>)
 8004cb8:	481e      	ldr	r0, [pc, #120]	@ (8004d34 <main+0x1adc>)
 8004cba:	f7fb faa9 	bl	8000210 <strcmp>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d11d      	bne.n	8004d00 <main+0x1aa8>
 8004cc4:	4929      	ldr	r1, [pc, #164]	@ (8004d6c <main+0x1b14>)
 8004cc6:	481c      	ldr	r0, [pc, #112]	@ (8004d38 <main+0x1ae0>)
 8004cc8:	f7fb faa2 	bl	8000210 <strcmp>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d016      	beq.n	8004d00 <main+0x1aa8>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 500);
 8004cd2:	4b20      	ldr	r3, [pc, #128]	@ (8004d54 <main+0x1afc>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004cda:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_Delay(500);
 8004cdc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004ce0:	f001 f826 	bl	8005d30 <HAL_Delay>
	    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 0);
 8004ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d54 <main+0x1afc>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	63da      	str	r2, [r3, #60]	@ 0x3c
	   	garageShutter= true;
 8004cec:	4b20      	ldr	r3, [pc, #128]	@ (8004d70 <main+0x1b18>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	701a      	strb	r2, [r3, #0]
		strcpy(lastMessage, "SG00");
 8004cf2:	4b11      	ldr	r3, [pc, #68]	@ (8004d38 <main+0x1ae0>)
 8004cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d6c <main+0x1b14>)
 8004cf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004cfa:	6018      	str	r0, [r3, #0]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	7019      	strb	r1, [r3, #0]
	}

	//Otwarcie rolety w garażu
	if (strcmp(received, "SG01") == 0 && strcmp(lastMessage, "SG01") != 0)
 8004d00:	491c      	ldr	r1, [pc, #112]	@ (8004d74 <main+0x1b1c>)
 8004d02:	480c      	ldr	r0, [pc, #48]	@ (8004d34 <main+0x1adc>)
 8004d04:	f7fb fa84 	bl	8000210 <strcmp>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d144      	bne.n	8004d98 <main+0x1b40>
 8004d0e:	4919      	ldr	r1, [pc, #100]	@ (8004d74 <main+0x1b1c>)
 8004d10:	4809      	ldr	r0, [pc, #36]	@ (8004d38 <main+0x1ae0>)
 8004d12:	f7fb fa7d 	bl	8000210 <strcmp>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d03d      	beq.n	8004d98 <main+0x1b40>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 2000);
 8004d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004d54 <main+0x1afc>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004d24:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_Delay(500);
 8004d26:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004d2a:	e025      	b.n	8004d78 <main+0x1b20>
 8004d2c:	200004a0 	.word	0x200004a0
 8004d30:	0800cf8c 	.word	0x0800cf8c
 8004d34:	200002f0 	.word	0x200002f0
 8004d38:	200002f8 	.word	0x200002f8
 8004d3c:	200004ec 	.word	0x200004ec
 8004d40:	0800cf94 	.word	0x0800cf94
 8004d44:	0800cf9c 	.word	0x0800cf9c
 8004d48:	20000307 	.word	0x20000307
 8004d4c:	0800cfa4 	.word	0x0800cfa4
 8004d50:	0800cfac 	.word	0x0800cfac
 8004d54:	20000454 	.word	0x20000454
 8004d58:	20000304 	.word	0x20000304
 8004d5c:	0800cfb4 	.word	0x0800cfb4
 8004d60:	0800cfbc 	.word	0x0800cfbc
 8004d64:	20000305 	.word	0x20000305
 8004d68:	0800cfc4 	.word	0x0800cfc4
 8004d6c:	0800cfcc 	.word	0x0800cfcc
 8004d70:	20000306 	.word	0x20000306
 8004d74:	0800cfd4 	.word	0x0800cfd4
 8004d78:	f000 ffda 	bl	8005d30 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 0);
 8004d7c:	4b2f      	ldr	r3, [pc, #188]	@ (8004e3c <main+0x1be4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2200      	movs	r2, #0
 8004d82:	63da      	str	r2, [r3, #60]	@ 0x3c
		garageShutter = false;
 8004d84:	4b2e      	ldr	r3, [pc, #184]	@ (8004e40 <main+0x1be8>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	701a      	strb	r2, [r3, #0]
		strcpy(lastMessage, "SG01");
 8004d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8004e44 <main+0x1bec>)
 8004d8c:	4a2e      	ldr	r2, [pc, #184]	@ (8004e48 <main+0x1bf0>)
 8004d8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d92:	6018      	str	r0, [r3, #0]
 8004d94:	3304      	adds	r3, #4
 8004d96:	7019      	strb	r1, [r3, #0]
	}

	//Wyłączenie systemu zasilania
	if (strcmp(received, "PW00") == 0 && strcmp(lastMessage, "PW00") != 0)
 8004d98:	492c      	ldr	r1, [pc, #176]	@ (8004e4c <main+0x1bf4>)
 8004d9a:	482d      	ldr	r0, [pc, #180]	@ (8004e50 <main+0x1bf8>)
 8004d9c:	f7fb fa38 	bl	8000210 <strcmp>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10f      	bne.n	8004dc6 <main+0x1b6e>
 8004da6:	4929      	ldr	r1, [pc, #164]	@ (8004e4c <main+0x1bf4>)
 8004da8:	4826      	ldr	r0, [pc, #152]	@ (8004e44 <main+0x1bec>)
 8004daa:	f7fb fa31 	bl	8000210 <strcmp>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d008      	beq.n	8004dc6 <main+0x1b6e>
	{
		Output_Off();
 8004db4:	f7fe f95c 	bl	8003070 <Output_Off>

		strcpy(lastMessage, "PW00");
 8004db8:	4b22      	ldr	r3, [pc, #136]	@ (8004e44 <main+0x1bec>)
 8004dba:	4a24      	ldr	r2, [pc, #144]	@ (8004e4c <main+0x1bf4>)
 8004dbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004dc0:	6018      	str	r0, [r3, #0]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	7019      	strb	r1, [r3, #0]
	}

	//Włączenie systemu zasilania
	if (strcmp(received, "PW01") == 0 && strcmp(lastMessage, "PW01") != 0)
 8004dc6:	4923      	ldr	r1, [pc, #140]	@ (8004e54 <main+0x1bfc>)
 8004dc8:	4821      	ldr	r0, [pc, #132]	@ (8004e50 <main+0x1bf8>)
 8004dca:	f7fb fa21 	bl	8000210 <strcmp>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10f      	bne.n	8004df4 <main+0x1b9c>
 8004dd4:	491f      	ldr	r1, [pc, #124]	@ (8004e54 <main+0x1bfc>)
 8004dd6:	481b      	ldr	r0, [pc, #108]	@ (8004e44 <main+0x1bec>)
 8004dd8:	f7fb fa1a 	bl	8000210 <strcmp>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d008      	beq.n	8004df4 <main+0x1b9c>
	{
		Output_On();
 8004de2:	f7fe f953 	bl	800308c <Output_On>

		strcpy(lastMessage, "PW01");
 8004de6:	4b17      	ldr	r3, [pc, #92]	@ (8004e44 <main+0x1bec>)
 8004de8:	4a1a      	ldr	r2, [pc, #104]	@ (8004e54 <main+0x1bfc>)
 8004dea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004dee:	6018      	str	r0, [r3, #0]
 8004df0:	3304      	adds	r3, #4
 8004df2:	7019      	strb	r1, [r3, #0]
	}

	//Odbieranie zadanej temperatury
	if(received[0]=='T' && received[1]=='M' )
 8004df4:	4b16      	ldr	r3, [pc, #88]	@ (8004e50 <main+0x1bf8>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b54      	cmp	r3, #84	@ 0x54
 8004dfa:	d117      	bne.n	8004e2c <main+0x1bd4>
 8004dfc:	4b14      	ldr	r3, [pc, #80]	@ (8004e50 <main+0x1bf8>)
 8004dfe:	785b      	ldrb	r3, [r3, #1]
 8004e00:	2b4d      	cmp	r3, #77	@ 0x4d
 8004e02:	d113      	bne.n	8004e2c <main+0x1bd4>
	{
		setpoint = (received[2] - '0') * 10 + (received[3] - '0');
 8004e04:	4b12      	ldr	r3, [pc, #72]	@ (8004e50 <main+0x1bf8>)
 8004e06:	789b      	ldrb	r3, [r3, #2]
 8004e08:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	461a      	mov	r2, r3
 8004e16:	4b0e      	ldr	r3, [pc, #56]	@ (8004e50 <main+0x1bf8>)
 8004e18:	78db      	ldrb	r3, [r3, #3]
 8004e1a:	3b30      	subs	r3, #48	@ 0x30
 8004e1c:	4413      	add	r3, r2
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e26:	4b0c      	ldr	r3, [pc, #48]	@ (8004e58 <main+0x1c00>)
 8004e28:	edc3 7a00 	vstr	s15, [r3]

	}

	sendBluetoothData("TM28");
 8004e2c:	480b      	ldr	r0, [pc, #44]	@ (8004e5c <main+0x1c04>)
 8004e2e:	f7fe f93b 	bl	80030a8 <sendBluetoothData>
	sendBluetoothData("PS01");
 8004e32:	480b      	ldr	r0, [pc, #44]	@ (8004e60 <main+0x1c08>)
 8004e34:	f7fe f938 	bl	80030a8 <sendBluetoothData>
  {
 8004e38:	f7fe ba74 	b.w	8003324 <main+0xcc>
 8004e3c:	20000454 	.word	0x20000454
 8004e40:	20000306 	.word	0x20000306
 8004e44:	200002f8 	.word	0x200002f8
 8004e48:	0800cfd4 	.word	0x0800cfd4
 8004e4c:	0800cfdc 	.word	0x0800cfdc
 8004e50:	200002f0 	.word	0x200002f0
 8004e54:	0800cfe4 	.word	0x0800cfe4
 8004e58:	20000138 	.word	0x20000138
 8004e5c:	0800cfec 	.word	0x0800cfec
 8004e60:	0800ce4c 	.word	0x0800ce4c

08004e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b094      	sub	sp, #80	@ 0x50
 8004e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e6a:	f107 0320 	add.w	r3, r7, #32
 8004e6e:	2230      	movs	r2, #48	@ 0x30
 8004e70:	2100      	movs	r1, #0
 8004e72:	4618      	mov	r0, r3
 8004e74:	f007 fa16 	bl	800c2a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e78:	f107 030c 	add.w	r3, r7, #12
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	605a      	str	r2, [r3, #4]
 8004e82:	609a      	str	r2, [r3, #8]
 8004e84:	60da      	str	r2, [r3, #12]
 8004e86:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004e88:	f002 fa2e 	bl	80072e8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e8c:	4b27      	ldr	r3, [pc, #156]	@ (8004f2c <SystemClock_Config+0xc8>)
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e90:	4a26      	ldr	r2, [pc, #152]	@ (8004f2c <SystemClock_Config+0xc8>)
 8004e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e96:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e98:	4b24      	ldr	r3, [pc, #144]	@ (8004f2c <SystemClock_Config+0xc8>)
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ea0:	60bb      	str	r3, [r7, #8]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004ea4:	4b22      	ldr	r3, [pc, #136]	@ (8004f30 <SystemClock_Config+0xcc>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004eac:	4a20      	ldr	r2, [pc, #128]	@ (8004f30 <SystemClock_Config+0xcc>)
 8004eae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8004f30 <SystemClock_Config+0xcc>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004ebc:	607b      	str	r3, [r7, #4]
 8004ebe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004ec8:	2310      	movs	r3, #16
 8004eca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ecc:	2302      	movs	r3, #2
 8004ece:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004ed4:	2308      	movs	r3, #8
 8004ed6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8004ed8:	2348      	movs	r3, #72	@ 0x48
 8004eda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004edc:	2302      	movs	r3, #2
 8004ede:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ee4:	f107 0320 	add.w	r3, r7, #32
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f002 fa0d 	bl	8007308 <HAL_RCC_OscConfig>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004ef4:	f000 f81e 	bl	8004f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ef8:	230f      	movs	r3, #15
 8004efa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004efc:	2302      	movs	r3, #2
 8004efe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f00:	2300      	movs	r3, #0
 8004f02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004f0e:	f107 030c 	add.w	r3, r7, #12
 8004f12:	2102      	movs	r1, #2
 8004f14:	4618      	mov	r0, r3
 8004f16:	f002 fc9b 	bl	8007850 <HAL_RCC_ClockConfig>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004f20:	f000 f808 	bl	8004f34 <Error_Handler>
  }
}
 8004f24:	bf00      	nop
 8004f26:	3750      	adds	r7, #80	@ 0x50
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	40007000 	.word	0x40007000

08004f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f38:	b672      	cpsid	i
}
 8004f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004f3c:	bf00      	nop
 8004f3e:	e7fd      	b.n	8004f3c <Error_Handler+0x8>

08004f40 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi4;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004f44:	4b1a      	ldr	r3, [pc, #104]	@ (8004fb0 <MX_SPI2_Init+0x70>)
 8004f46:	4a1b      	ldr	r2, [pc, #108]	@ (8004fb4 <MX_SPI2_Init+0x74>)
 8004f48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004f4a:	4b19      	ldr	r3, [pc, #100]	@ (8004fb0 <MX_SPI2_Init+0x70>)
 8004f4c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004f50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004f52:	4b17      	ldr	r3, [pc, #92]	@ (8004fb0 <MX_SPI2_Init+0x70>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8004f58:	4b15      	ldr	r3, [pc, #84]	@ (8004fb0 <MX_SPI2_Init+0x70>)
 8004f5a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004f5e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f60:	4b13      	ldr	r3, [pc, #76]	@ (8004fb0 <MX_SPI2_Init+0x70>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f66:	4b12      	ldr	r3, [pc, #72]	@ (8004fb0 <MX_SPI2_Init+0x70>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8004f6c:	4b10      	ldr	r3, [pc, #64]	@ (8004fb0 <MX_SPI2_Init+0x70>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f72:	4b0f      	ldr	r3, [pc, #60]	@ (8004fb0 <MX_SPI2_Init+0x70>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f78:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb0 <MX_SPI2_Init+0x70>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8004fb0 <MX_SPI2_Init+0x70>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f84:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb0 <MX_SPI2_Init+0x70>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004f8a:	4b09      	ldr	r3, [pc, #36]	@ (8004fb0 <MX_SPI2_Init+0x70>)
 8004f8c:	2207      	movs	r2, #7
 8004f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004f90:	4b07      	ldr	r3, [pc, #28]	@ (8004fb0 <MX_SPI2_Init+0x70>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004f96:	4b06      	ldr	r3, [pc, #24]	@ (8004fb0 <MX_SPI2_Init+0x70>)
 8004f98:	2208      	movs	r2, #8
 8004f9a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004f9c:	4804      	ldr	r0, [pc, #16]	@ (8004fb0 <MX_SPI2_Init+0x70>)
 8004f9e:	f003 fa6d 	bl	800847c <HAL_SPI_Init>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <MX_SPI2_Init+0x6c>
  {
    Error_Handler();
 8004fa8:	f7ff ffc4 	bl	8004f34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004fac:	bf00      	nop
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	20000388 	.word	0x20000388
 8004fb4:	40003800 	.word	0x40003800

08004fb8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8004fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800502c <MX_SPI4_Init+0x74>)
 8004fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8005030 <MX_SPI4_Init+0x78>)
 8004fc0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8004fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800502c <MX_SPI4_Init+0x74>)
 8004fc4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004fc8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8004fca:	4b18      	ldr	r3, [pc, #96]	@ (800502c <MX_SPI4_Init+0x74>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8004fd0:	4b16      	ldr	r3, [pc, #88]	@ (800502c <MX_SPI4_Init+0x74>)
 8004fd2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004fd6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004fd8:	4b14      	ldr	r3, [pc, #80]	@ (800502c <MX_SPI4_Init+0x74>)
 8004fda:	2202      	movs	r2, #2
 8004fdc:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004fde:	4b13      	ldr	r3, [pc, #76]	@ (800502c <MX_SPI4_Init+0x74>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004fe4:	4b11      	ldr	r3, [pc, #68]	@ (800502c <MX_SPI4_Init+0x74>)
 8004fe6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fea:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004fec:	4b0f      	ldr	r3, [pc, #60]	@ (800502c <MX_SPI4_Init+0x74>)
 8004fee:	2210      	movs	r2, #16
 8004ff0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800502c <MX_SPI4_Init+0x74>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800502c <MX_SPI4_Init+0x74>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800502c <MX_SPI4_Init+0x74>)
 8005000:	2200      	movs	r2, #0
 8005002:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8005004:	4b09      	ldr	r3, [pc, #36]	@ (800502c <MX_SPI4_Init+0x74>)
 8005006:	2207      	movs	r2, #7
 8005008:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800500a:	4b08      	ldr	r3, [pc, #32]	@ (800502c <MX_SPI4_Init+0x74>)
 800500c:	2200      	movs	r2, #0
 800500e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005010:	4b06      	ldr	r3, [pc, #24]	@ (800502c <MX_SPI4_Init+0x74>)
 8005012:	2200      	movs	r2, #0
 8005014:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8005016:	4805      	ldr	r0, [pc, #20]	@ (800502c <MX_SPI4_Init+0x74>)
 8005018:	f003 fa30 	bl	800847c <HAL_SPI_Init>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8005022:	f7ff ff87 	bl	8004f34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8005026:	bf00      	nop
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	200003ec 	.word	0x200003ec
 8005030:	40013400 	.word	0x40013400

08005034 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08c      	sub	sp, #48	@ 0x30
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800503c:	f107 031c 	add.w	r3, r7, #28
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	605a      	str	r2, [r3, #4]
 8005046:	609a      	str	r2, [r3, #8]
 8005048:	60da      	str	r2, [r3, #12]
 800504a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a40      	ldr	r2, [pc, #256]	@ (8005154 <HAL_SPI_MspInit+0x120>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d145      	bne.n	80050e2 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005056:	4b40      	ldr	r3, [pc, #256]	@ (8005158 <HAL_SPI_MspInit+0x124>)
 8005058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505a:	4a3f      	ldr	r2, [pc, #252]	@ (8005158 <HAL_SPI_MspInit+0x124>)
 800505c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005060:	6413      	str	r3, [r2, #64]	@ 0x40
 8005062:	4b3d      	ldr	r3, [pc, #244]	@ (8005158 <HAL_SPI_MspInit+0x124>)
 8005064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800506a:	61bb      	str	r3, [r7, #24]
 800506c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800506e:	4b3a      	ldr	r3, [pc, #232]	@ (8005158 <HAL_SPI_MspInit+0x124>)
 8005070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005072:	4a39      	ldr	r2, [pc, #228]	@ (8005158 <HAL_SPI_MspInit+0x124>)
 8005074:	f043 0304 	orr.w	r3, r3, #4
 8005078:	6313      	str	r3, [r2, #48]	@ 0x30
 800507a:	4b37      	ldr	r3, [pc, #220]	@ (8005158 <HAL_SPI_MspInit+0x124>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005086:	4b34      	ldr	r3, [pc, #208]	@ (8005158 <HAL_SPI_MspInit+0x124>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508a:	4a33      	ldr	r2, [pc, #204]	@ (8005158 <HAL_SPI_MspInit+0x124>)
 800508c:	f043 0302 	orr.w	r3, r3, #2
 8005090:	6313      	str	r3, [r2, #48]	@ 0x30
 8005092:	4b31      	ldr	r3, [pc, #196]	@ (8005158 <HAL_SPI_MspInit+0x124>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	613b      	str	r3, [r7, #16]
 800509c:	693b      	ldr	r3, [r7, #16]
    PC1     ------> SPI2_MOSI
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800509e:	2302      	movs	r3, #2
 80050a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a2:	2302      	movs	r3, #2
 80050a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050aa:	2303      	movs	r3, #3
 80050ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80050ae:	2305      	movs	r3, #5
 80050b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050b2:	f107 031c 	add.w	r3, r7, #28
 80050b6:	4619      	mov	r1, r3
 80050b8:	4828      	ldr	r0, [pc, #160]	@ (800515c <HAL_SPI_MspInit+0x128>)
 80050ba:	f001 f801 	bl	80060c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80050be:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80050c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c4:	2302      	movs	r3, #2
 80050c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c8:	2300      	movs	r3, #0
 80050ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050cc:	2303      	movs	r3, #3
 80050ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80050d0:	2305      	movs	r3, #5
 80050d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050d4:	f107 031c 	add.w	r3, r7, #28
 80050d8:	4619      	mov	r1, r3
 80050da:	4821      	ldr	r0, [pc, #132]	@ (8005160 <HAL_SPI_MspInit+0x12c>)
 80050dc:	f000 fff0 	bl	80060c0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80050e0:	e034      	b.n	800514c <HAL_SPI_MspInit+0x118>
  else if(spiHandle->Instance==SPI4)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1f      	ldr	r2, [pc, #124]	@ (8005164 <HAL_SPI_MspInit+0x130>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d12f      	bne.n	800514c <HAL_SPI_MspInit+0x118>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80050ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005158 <HAL_SPI_MspInit+0x124>)
 80050ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f0:	4a19      	ldr	r2, [pc, #100]	@ (8005158 <HAL_SPI_MspInit+0x124>)
 80050f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80050f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80050f8:	4b17      	ldr	r3, [pc, #92]	@ (8005158 <HAL_SPI_MspInit+0x124>)
 80050fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005104:	4b14      	ldr	r3, [pc, #80]	@ (8005158 <HAL_SPI_MspInit+0x124>)
 8005106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005108:	4a13      	ldr	r2, [pc, #76]	@ (8005158 <HAL_SPI_MspInit+0x124>)
 800510a:	f043 0310 	orr.w	r3, r3, #16
 800510e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005110:	4b11      	ldr	r3, [pc, #68]	@ (8005158 <HAL_SPI_MspInit+0x124>)
 8005112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005114:	f003 0310 	and.w	r3, r3, #16
 8005118:	60bb      	str	r3, [r7, #8]
 800511a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI4_SCK_temperature_Pin|SPI4_MISO_temperature_Pin|SPI4_MOSI_temperature_Pin;
 800511c:	2364      	movs	r3, #100	@ 0x64
 800511e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005120:	2302      	movs	r3, #2
 8005122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005124:	2300      	movs	r3, #0
 8005126:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005128:	2303      	movs	r3, #3
 800512a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800512c:	2305      	movs	r3, #5
 800512e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005130:	f107 031c 	add.w	r3, r7, #28
 8005134:	4619      	mov	r1, r3
 8005136:	480c      	ldr	r0, [pc, #48]	@ (8005168 <HAL_SPI_MspInit+0x134>)
 8005138:	f000 ffc2 	bl	80060c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800513c:	2200      	movs	r2, #0
 800513e:	2100      	movs	r1, #0
 8005140:	2054      	movs	r0, #84	@ 0x54
 8005142:	f000 fef4 	bl	8005f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8005146:	2054      	movs	r0, #84	@ 0x54
 8005148:	f000 ff0d 	bl	8005f66 <HAL_NVIC_EnableIRQ>
}
 800514c:	bf00      	nop
 800514e:	3730      	adds	r7, #48	@ 0x30
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	40003800 	.word	0x40003800
 8005158:	40023800 	.word	0x40023800
 800515c:	40020800 	.word	0x40020800
 8005160:	40020400 	.word	0x40020400
 8005164:	40013400 	.word	0x40013400
 8005168:	40021000 	.word	0x40021000

0800516c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005172:	4b0f      	ldr	r3, [pc, #60]	@ (80051b0 <HAL_MspInit+0x44>)
 8005174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005176:	4a0e      	ldr	r2, [pc, #56]	@ (80051b0 <HAL_MspInit+0x44>)
 8005178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800517c:	6413      	str	r3, [r2, #64]	@ 0x40
 800517e:	4b0c      	ldr	r3, [pc, #48]	@ (80051b0 <HAL_MspInit+0x44>)
 8005180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005186:	607b      	str	r3, [r7, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800518a:	4b09      	ldr	r3, [pc, #36]	@ (80051b0 <HAL_MspInit+0x44>)
 800518c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800518e:	4a08      	ldr	r2, [pc, #32]	@ (80051b0 <HAL_MspInit+0x44>)
 8005190:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005194:	6453      	str	r3, [r2, #68]	@ 0x44
 8005196:	4b06      	ldr	r3, [pc, #24]	@ (80051b0 <HAL_MspInit+0x44>)
 8005198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800519a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800519e:	603b      	str	r3, [r7, #0]
 80051a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40023800 	.word	0x40023800

080051b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80051b8:	bf00      	nop
 80051ba:	e7fd      	b.n	80051b8 <NMI_Handler+0x4>

080051bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051c0:	bf00      	nop
 80051c2:	e7fd      	b.n	80051c0 <HardFault_Handler+0x4>

080051c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051c8:	bf00      	nop
 80051ca:	e7fd      	b.n	80051c8 <MemManage_Handler+0x4>

080051cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051d0:	bf00      	nop
 80051d2:	e7fd      	b.n	80051d0 <BusFault_Handler+0x4>

080051d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051d8:	bf00      	nop
 80051da:	e7fd      	b.n	80051d8 <UsageFault_Handler+0x4>

080051dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051e0:	bf00      	nop
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051ea:	b480      	push	{r7}
 80051ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051ee:	bf00      	nop
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051fc:	bf00      	nop
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800520a:	f000 fd71 	bl	8005cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800520e:	bf00      	nop
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005218:	4802      	ldr	r0, [pc, #8]	@ (8005224 <TIM1_CC_IRQHandler+0x10>)
 800521a:	f004 fc7d 	bl	8009b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800521e:	bf00      	nop
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20000454 	.word	0x20000454

08005228 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800522c:	4802      	ldr	r0, [pc, #8]	@ (8005238 <TIM2_IRQHandler+0x10>)
 800522e:	f004 fc73 	bl	8009b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005232:	bf00      	nop
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	200004a0 	.word	0x200004a0

0800523c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005240:	4802      	ldr	r0, [pc, #8]	@ (800524c <TIM3_IRQHandler+0x10>)
 8005242:	f004 fc69 	bl	8009b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005246:	bf00      	nop
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	200004ec 	.word	0x200004ec

08005250 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005254:	4802      	ldr	r0, [pc, #8]	@ (8005260 <TIM4_IRQHandler+0x10>)
 8005256:	f004 fc5f 	bl	8009b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800525a:	bf00      	nop
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20000538 	.word	0x20000538

08005264 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8005268:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800526c:	f001 f920 	bl	80064b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005270:	bf00      	nop
 8005272:	bd80      	pop	{r7, pc}

08005274 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005278:	4802      	ldr	r0, [pc, #8]	@ (8005284 <USART6_IRQHandler+0x10>)
 800527a:	f005 fd71 	bl	800ad60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800527e:	bf00      	nop
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	20000584 	.word	0x20000584

08005288 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800528c:	4802      	ldr	r0, [pc, #8]	@ (8005298 <SPI4_IRQHandler+0x10>)
 800528e:	f003 fe51 	bl	8008f34 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8005292:	bf00      	nop
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	200003ec 	.word	0x200003ec

0800529c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80052a4:	4a14      	ldr	r2, [pc, #80]	@ (80052f8 <_sbrk+0x5c>)
 80052a6:	4b15      	ldr	r3, [pc, #84]	@ (80052fc <_sbrk+0x60>)
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80052b0:	4b13      	ldr	r3, [pc, #76]	@ (8005300 <_sbrk+0x64>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d102      	bne.n	80052be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052b8:	4b11      	ldr	r3, [pc, #68]	@ (8005300 <_sbrk+0x64>)
 80052ba:	4a12      	ldr	r2, [pc, #72]	@ (8005304 <_sbrk+0x68>)
 80052bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052be:	4b10      	ldr	r3, [pc, #64]	@ (8005300 <_sbrk+0x64>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4413      	add	r3, r2
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d207      	bcs.n	80052dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052cc:	f006 fff2 	bl	800c2b4 <__errno>
 80052d0:	4603      	mov	r3, r0
 80052d2:	220c      	movs	r2, #12
 80052d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052d6:	f04f 33ff 	mov.w	r3, #4294967295
 80052da:	e009      	b.n	80052f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052dc:	4b08      	ldr	r3, [pc, #32]	@ (8005300 <_sbrk+0x64>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052e2:	4b07      	ldr	r3, [pc, #28]	@ (8005300 <_sbrk+0x64>)
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4413      	add	r3, r2
 80052ea:	4a05      	ldr	r2, [pc, #20]	@ (8005300 <_sbrk+0x64>)
 80052ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052ee:	68fb      	ldr	r3, [r7, #12]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	20050000 	.word	0x20050000
 80052fc:	00000400 	.word	0x00000400
 8005300:	20000450 	.word	0x20000450
 8005304:	20000758 	.word	0x20000758

08005308 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800530c:	4b06      	ldr	r3, [pc, #24]	@ (8005328 <SystemInit+0x20>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005312:	4a05      	ldr	r2, [pc, #20]	@ (8005328 <SystemInit+0x20>)
 8005314:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005318:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800531c:	bf00      	nop
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	e000ed00 	.word	0xe000ed00

0800532c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b09a      	sub	sp, #104	@ 0x68
 8005330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005332:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005336:	2200      	movs	r2, #0
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	605a      	str	r2, [r3, #4]
 800533c:	609a      	str	r2, [r3, #8]
 800533e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005340:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	605a      	str	r2, [r3, #4]
 800534a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800534c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	605a      	str	r2, [r3, #4]
 8005356:	609a      	str	r2, [r3, #8]
 8005358:	60da      	str	r2, [r3, #12]
 800535a:	611a      	str	r2, [r3, #16]
 800535c:	615a      	str	r2, [r3, #20]
 800535e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005360:	1d3b      	adds	r3, r7, #4
 8005362:	222c      	movs	r2, #44	@ 0x2c
 8005364:	2100      	movs	r1, #0
 8005366:	4618      	mov	r0, r3
 8005368:	f006 ff9c 	bl	800c2a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800536c:	4b55      	ldr	r3, [pc, #340]	@ (80054c4 <MX_TIM1_Init+0x198>)
 800536e:	4a56      	ldr	r2, [pc, #344]	@ (80054c8 <MX_TIM1_Init+0x19c>)
 8005370:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8005372:	4b54      	ldr	r3, [pc, #336]	@ (80054c4 <MX_TIM1_Init+0x198>)
 8005374:	2247      	movs	r2, #71	@ 0x47
 8005376:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005378:	4b52      	ldr	r3, [pc, #328]	@ (80054c4 <MX_TIM1_Init+0x198>)
 800537a:	2200      	movs	r2, #0
 800537c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 800537e:	4b51      	ldr	r3, [pc, #324]	@ (80054c4 <MX_TIM1_Init+0x198>)
 8005380:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8005384:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005386:	4b4f      	ldr	r3, [pc, #316]	@ (80054c4 <MX_TIM1_Init+0x198>)
 8005388:	2200      	movs	r2, #0
 800538a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800538c:	4b4d      	ldr	r3, [pc, #308]	@ (80054c4 <MX_TIM1_Init+0x198>)
 800538e:	2200      	movs	r2, #0
 8005390:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005392:	4b4c      	ldr	r3, [pc, #304]	@ (80054c4 <MX_TIM1_Init+0x198>)
 8005394:	2200      	movs	r2, #0
 8005396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005398:	484a      	ldr	r0, [pc, #296]	@ (80054c4 <MX_TIM1_Init+0x198>)
 800539a:	f004 f8e3 	bl	8009564 <HAL_TIM_Base_Init>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80053a4:	f7ff fdc6 	bl	8004f34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80053ae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80053b2:	4619      	mov	r1, r3
 80053b4:	4843      	ldr	r0, [pc, #268]	@ (80054c4 <MX_TIM1_Init+0x198>)
 80053b6:	f004 fde3 	bl	8009f80 <HAL_TIM_ConfigClockSource>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80053c0:	f7ff fdb8 	bl	8004f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80053c4:	483f      	ldr	r0, [pc, #252]	@ (80054c4 <MX_TIM1_Init+0x198>)
 80053c6:	f004 f9cc 	bl	8009762 <HAL_TIM_PWM_Init>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80053d0:	f7ff fdb0 	bl	8004f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053d4:	2300      	movs	r3, #0
 80053d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80053d8:	2300      	movs	r3, #0
 80053da:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053dc:	2300      	movs	r3, #0
 80053de:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80053e0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80053e4:	4619      	mov	r1, r3
 80053e6:	4837      	ldr	r0, [pc, #220]	@ (80054c4 <MX_TIM1_Init+0x198>)
 80053e8:	f005 fa7a 	bl	800a8e0 <HAL_TIMEx_MasterConfigSynchronization>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80053f2:	f7ff fd9f 	bl	8004f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80053f6:	2360      	movs	r3, #96	@ 0x60
 80053f8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053fe:	2300      	movs	r3, #0
 8005400:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005402:	2300      	movs	r3, #0
 8005404:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005406:	2300      	movs	r3, #0
 8005408:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800540a:	2300      	movs	r3, #0
 800540c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800540e:	2300      	movs	r3, #0
 8005410:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005412:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005416:	2200      	movs	r2, #0
 8005418:	4619      	mov	r1, r3
 800541a:	482a      	ldr	r0, [pc, #168]	@ (80054c4 <MX_TIM1_Init+0x198>)
 800541c:	f004 fc9c 	bl	8009d58 <HAL_TIM_PWM_ConfigChannel>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8005426:	f7ff fd85 	bl	8004f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800542a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800542e:	2204      	movs	r2, #4
 8005430:	4619      	mov	r1, r3
 8005432:	4824      	ldr	r0, [pc, #144]	@ (80054c4 <MX_TIM1_Init+0x198>)
 8005434:	f004 fc90 	bl	8009d58 <HAL_TIM_PWM_ConfigChannel>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800543e:	f7ff fd79 	bl	8004f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005442:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005446:	2208      	movs	r2, #8
 8005448:	4619      	mov	r1, r3
 800544a:	481e      	ldr	r0, [pc, #120]	@ (80054c4 <MX_TIM1_Init+0x198>)
 800544c:	f004 fc84 	bl	8009d58 <HAL_TIM_PWM_ConfigChannel>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8005456:	f7ff fd6d 	bl	8004f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800545a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800545e:	220c      	movs	r2, #12
 8005460:	4619      	mov	r1, r3
 8005462:	4818      	ldr	r0, [pc, #96]	@ (80054c4 <MX_TIM1_Init+0x198>)
 8005464:	f004 fc78 	bl	8009d58 <HAL_TIM_PWM_ConfigChannel>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800546e:	f7ff fd61 	bl	8004f34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005472:	2300      	movs	r3, #0
 8005474:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005476:	2300      	movs	r3, #0
 8005478:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800547a:	2300      	movs	r3, #0
 800547c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800547e:	2300      	movs	r3, #0
 8005480:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005482:	2300      	movs	r3, #0
 8005484:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005486:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800548a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800548c:	2300      	movs	r3, #0
 800548e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005490:	2300      	movs	r3, #0
 8005492:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005494:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005498:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800549a:	2300      	movs	r3, #0
 800549c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800549e:	2300      	movs	r3, #0
 80054a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80054a2:	1d3b      	adds	r3, r7, #4
 80054a4:	4619      	mov	r1, r3
 80054a6:	4807      	ldr	r0, [pc, #28]	@ (80054c4 <MX_TIM1_Init+0x198>)
 80054a8:	f005 faa8 	bl	800a9fc <HAL_TIMEx_ConfigBreakDeadTime>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 80054b2:	f7ff fd3f 	bl	8004f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80054b6:	4803      	ldr	r0, [pc, #12]	@ (80054c4 <MX_TIM1_Init+0x198>)
 80054b8:	f000 fa1a 	bl	80058f0 <HAL_TIM_MspPostInit>

}
 80054bc:	bf00      	nop
 80054be:	3768      	adds	r7, #104	@ 0x68
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20000454 	.word	0x20000454
 80054c8:	40010000 	.word	0x40010000

080054cc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08e      	sub	sp, #56	@ 0x38
 80054d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	605a      	str	r2, [r3, #4]
 80054dc:	609a      	str	r2, [r3, #8]
 80054de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054e0:	f107 031c 	add.w	r3, r7, #28
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	605a      	str	r2, [r3, #4]
 80054ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80054ec:	463b      	mov	r3, r7
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	605a      	str	r2, [r3, #4]
 80054f4:	609a      	str	r2, [r3, #8]
 80054f6:	60da      	str	r2, [r3, #12]
 80054f8:	611a      	str	r2, [r3, #16]
 80054fa:	615a      	str	r2, [r3, #20]
 80054fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80054fe:	4b3b      	ldr	r3, [pc, #236]	@ (80055ec <MX_TIM2_Init+0x120>)
 8005500:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005504:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8005506:	4b39      	ldr	r3, [pc, #228]	@ (80055ec <MX_TIM2_Init+0x120>)
 8005508:	2247      	movs	r2, #71	@ 0x47
 800550a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800550c:	4b37      	ldr	r3, [pc, #220]	@ (80055ec <MX_TIM2_Init+0x120>)
 800550e:	2200      	movs	r2, #0
 8005510:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8005512:	4b36      	ldr	r3, [pc, #216]	@ (80055ec <MX_TIM2_Init+0x120>)
 8005514:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005518:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800551a:	4b34      	ldr	r3, [pc, #208]	@ (80055ec <MX_TIM2_Init+0x120>)
 800551c:	2200      	movs	r2, #0
 800551e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005520:	4b32      	ldr	r3, [pc, #200]	@ (80055ec <MX_TIM2_Init+0x120>)
 8005522:	2200      	movs	r2, #0
 8005524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005526:	4831      	ldr	r0, [pc, #196]	@ (80055ec <MX_TIM2_Init+0x120>)
 8005528:	f004 f81c 	bl	8009564 <HAL_TIM_Base_Init>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8005532:	f7ff fcff 	bl	8004f34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005536:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800553a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800553c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005540:	4619      	mov	r1, r3
 8005542:	482a      	ldr	r0, [pc, #168]	@ (80055ec <MX_TIM2_Init+0x120>)
 8005544:	f004 fd1c 	bl	8009f80 <HAL_TIM_ConfigClockSource>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800554e:	f7ff fcf1 	bl	8004f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005552:	4826      	ldr	r0, [pc, #152]	@ (80055ec <MX_TIM2_Init+0x120>)
 8005554:	f004 f905 	bl	8009762 <HAL_TIM_PWM_Init>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800555e:	f7ff fce9 	bl	8004f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005562:	2300      	movs	r3, #0
 8005564:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005566:	2300      	movs	r3, #0
 8005568:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800556a:	f107 031c 	add.w	r3, r7, #28
 800556e:	4619      	mov	r1, r3
 8005570:	481e      	ldr	r0, [pc, #120]	@ (80055ec <MX_TIM2_Init+0x120>)
 8005572:	f005 f9b5 	bl	800a8e0 <HAL_TIMEx_MasterConfigSynchronization>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800557c:	f7ff fcda 	bl	8004f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005580:	2360      	movs	r3, #96	@ 0x60
 8005582:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8005584:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005588:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800558a:	2300      	movs	r3, #0
 800558c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800558e:	2300      	movs	r3, #0
 8005590:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005592:	463b      	mov	r3, r7
 8005594:	2200      	movs	r2, #0
 8005596:	4619      	mov	r1, r3
 8005598:	4814      	ldr	r0, [pc, #80]	@ (80055ec <MX_TIM2_Init+0x120>)
 800559a:	f004 fbdd 	bl	8009d58 <HAL_TIM_PWM_ConfigChannel>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80055a4:	f7ff fcc6 	bl	8004f34 <Error_Handler>
  }
  sConfigOC.Pulse = 10;
 80055a8:	230a      	movs	r3, #10
 80055aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80055ac:	463b      	mov	r3, r7
 80055ae:	2208      	movs	r2, #8
 80055b0:	4619      	mov	r1, r3
 80055b2:	480e      	ldr	r0, [pc, #56]	@ (80055ec <MX_TIM2_Init+0x120>)
 80055b4:	f004 fbd0 	bl	8009d58 <HAL_TIM_PWM_ConfigChannel>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 80055be:	f7ff fcb9 	bl	8004f34 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80055c2:	2300      	movs	r3, #0
 80055c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80055c6:	463b      	mov	r3, r7
 80055c8:	220c      	movs	r2, #12
 80055ca:	4619      	mov	r1, r3
 80055cc:	4807      	ldr	r0, [pc, #28]	@ (80055ec <MX_TIM2_Init+0x120>)
 80055ce:	f004 fbc3 	bl	8009d58 <HAL_TIM_PWM_ConfigChannel>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 80055d8:	f7ff fcac 	bl	8004f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80055dc:	4803      	ldr	r0, [pc, #12]	@ (80055ec <MX_TIM2_Init+0x120>)
 80055de:	f000 f987 	bl	80058f0 <HAL_TIM_MspPostInit>

}
 80055e2:	bf00      	nop
 80055e4:	3738      	adds	r7, #56	@ 0x38
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	200004a0 	.word	0x200004a0

080055f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08e      	sub	sp, #56	@ 0x38
 80055f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80055f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80055fa:	2200      	movs	r2, #0
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	605a      	str	r2, [r3, #4]
 8005600:	609a      	str	r2, [r3, #8]
 8005602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005604:	f107 031c 	add.w	r3, r7, #28
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	605a      	str	r2, [r3, #4]
 800560e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005610:	463b      	mov	r3, r7
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	605a      	str	r2, [r3, #4]
 8005618:	609a      	str	r2, [r3, #8]
 800561a:	60da      	str	r2, [r3, #12]
 800561c:	611a      	str	r2, [r3, #16]
 800561e:	615a      	str	r2, [r3, #20]
 8005620:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005622:	4b32      	ldr	r3, [pc, #200]	@ (80056ec <MX_TIM3_Init+0xfc>)
 8005624:	4a32      	ldr	r2, [pc, #200]	@ (80056f0 <MX_TIM3_Init+0x100>)
 8005626:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8005628:	4b30      	ldr	r3, [pc, #192]	@ (80056ec <MX_TIM3_Init+0xfc>)
 800562a:	2247      	movs	r2, #71	@ 0x47
 800562c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800562e:	4b2f      	ldr	r3, [pc, #188]	@ (80056ec <MX_TIM3_Init+0xfc>)
 8005630:	2200      	movs	r2, #0
 8005632:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8005634:	4b2d      	ldr	r3, [pc, #180]	@ (80056ec <MX_TIM3_Init+0xfc>)
 8005636:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800563a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800563c:	4b2b      	ldr	r3, [pc, #172]	@ (80056ec <MX_TIM3_Init+0xfc>)
 800563e:	2200      	movs	r2, #0
 8005640:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005642:	4b2a      	ldr	r3, [pc, #168]	@ (80056ec <MX_TIM3_Init+0xfc>)
 8005644:	2200      	movs	r2, #0
 8005646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005648:	4828      	ldr	r0, [pc, #160]	@ (80056ec <MX_TIM3_Init+0xfc>)
 800564a:	f003 ff8b 	bl	8009564 <HAL_TIM_Base_Init>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8005654:	f7ff fc6e 	bl	8004f34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005658:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800565c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800565e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005662:	4619      	mov	r1, r3
 8005664:	4821      	ldr	r0, [pc, #132]	@ (80056ec <MX_TIM3_Init+0xfc>)
 8005666:	f004 fc8b 	bl	8009f80 <HAL_TIM_ConfigClockSource>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005670:	f7ff fc60 	bl	8004f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005674:	481d      	ldr	r0, [pc, #116]	@ (80056ec <MX_TIM3_Init+0xfc>)
 8005676:	f004 f874 	bl	8009762 <HAL_TIM_PWM_Init>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005680:	f7ff fc58 	bl	8004f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005684:	2300      	movs	r3, #0
 8005686:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005688:	2300      	movs	r3, #0
 800568a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800568c:	f107 031c 	add.w	r3, r7, #28
 8005690:	4619      	mov	r1, r3
 8005692:	4816      	ldr	r0, [pc, #88]	@ (80056ec <MX_TIM3_Init+0xfc>)
 8005694:	f005 f924 	bl	800a8e0 <HAL_TIMEx_MasterConfigSynchronization>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800569e:	f7ff fc49 	bl	8004f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056a2:	2360      	movs	r3, #96	@ 0x60
 80056a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80056a6:	2300      	movs	r3, #0
 80056a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056aa:	2300      	movs	r3, #0
 80056ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80056ae:	2300      	movs	r3, #0
 80056b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80056b2:	463b      	mov	r3, r7
 80056b4:	2208      	movs	r2, #8
 80056b6:	4619      	mov	r1, r3
 80056b8:	480c      	ldr	r0, [pc, #48]	@ (80056ec <MX_TIM3_Init+0xfc>)
 80056ba:	f004 fb4d 	bl	8009d58 <HAL_TIM_PWM_ConfigChannel>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80056c4:	f7ff fc36 	bl	8004f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80056c8:	463b      	mov	r3, r7
 80056ca:	220c      	movs	r2, #12
 80056cc:	4619      	mov	r1, r3
 80056ce:	4807      	ldr	r0, [pc, #28]	@ (80056ec <MX_TIM3_Init+0xfc>)
 80056d0:	f004 fb42 	bl	8009d58 <HAL_TIM_PWM_ConfigChannel>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80056da:	f7ff fc2b 	bl	8004f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80056de:	4803      	ldr	r0, [pc, #12]	@ (80056ec <MX_TIM3_Init+0xfc>)
 80056e0:	f000 f906 	bl	80058f0 <HAL_TIM_MspPostInit>

}
 80056e4:	bf00      	nop
 80056e6:	3738      	adds	r7, #56	@ 0x38
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	200004ec 	.word	0x200004ec
 80056f0:	40000400 	.word	0x40000400

080056f4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b08e      	sub	sp, #56	@ 0x38
 80056f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80056fe:	2200      	movs	r2, #0
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	605a      	str	r2, [r3, #4]
 8005704:	609a      	str	r2, [r3, #8]
 8005706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005708:	f107 031c 	add.w	r3, r7, #28
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	605a      	str	r2, [r3, #4]
 8005712:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005714:	463b      	mov	r3, r7
 8005716:	2200      	movs	r2, #0
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	605a      	str	r2, [r3, #4]
 800571c:	609a      	str	r2, [r3, #8]
 800571e:	60da      	str	r2, [r3, #12]
 8005720:	611a      	str	r2, [r3, #16]
 8005722:	615a      	str	r2, [r3, #20]
 8005724:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005726:	4b34      	ldr	r3, [pc, #208]	@ (80057f8 <MX_TIM4_Init+0x104>)
 8005728:	4a34      	ldr	r2, [pc, #208]	@ (80057fc <MX_TIM4_Init+0x108>)
 800572a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 800572c:	4b32      	ldr	r3, [pc, #200]	@ (80057f8 <MX_TIM4_Init+0x104>)
 800572e:	2247      	movs	r2, #71	@ 0x47
 8005730:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005732:	4b31      	ldr	r3, [pc, #196]	@ (80057f8 <MX_TIM4_Init+0x104>)
 8005734:	2200      	movs	r2, #0
 8005736:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8005738:	4b2f      	ldr	r3, [pc, #188]	@ (80057f8 <MX_TIM4_Init+0x104>)
 800573a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800573e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005740:	4b2d      	ldr	r3, [pc, #180]	@ (80057f8 <MX_TIM4_Init+0x104>)
 8005742:	2200      	movs	r2, #0
 8005744:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005746:	4b2c      	ldr	r3, [pc, #176]	@ (80057f8 <MX_TIM4_Init+0x104>)
 8005748:	2200      	movs	r2, #0
 800574a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800574c:	482a      	ldr	r0, [pc, #168]	@ (80057f8 <MX_TIM4_Init+0x104>)
 800574e:	f003 ff09 	bl	8009564 <HAL_TIM_Base_Init>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8005758:	f7ff fbec 	bl	8004f34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800575c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005760:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005762:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005766:	4619      	mov	r1, r3
 8005768:	4823      	ldr	r0, [pc, #140]	@ (80057f8 <MX_TIM4_Init+0x104>)
 800576a:	f004 fc09 	bl	8009f80 <HAL_TIM_ConfigClockSource>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8005774:	f7ff fbde 	bl	8004f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005778:	481f      	ldr	r0, [pc, #124]	@ (80057f8 <MX_TIM4_Init+0x104>)
 800577a:	f003 fff2 	bl	8009762 <HAL_TIM_PWM_Init>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8005784:	f7ff fbd6 	bl	8004f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005788:	2300      	movs	r3, #0
 800578a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800578c:	2300      	movs	r3, #0
 800578e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005790:	f107 031c 	add.w	r3, r7, #28
 8005794:	4619      	mov	r1, r3
 8005796:	4818      	ldr	r0, [pc, #96]	@ (80057f8 <MX_TIM4_Init+0x104>)
 8005798:	f005 f8a2 	bl	800a8e0 <HAL_TIMEx_MasterConfigSynchronization>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80057a2:	f7ff fbc7 	bl	8004f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80057a6:	2360      	movs	r3, #96	@ 0x60
 80057a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 80057aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80057ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80057b0:	2300      	movs	r3, #0
 80057b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80057b4:	2300      	movs	r3, #0
 80057b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80057b8:	463b      	mov	r3, r7
 80057ba:	2200      	movs	r2, #0
 80057bc:	4619      	mov	r1, r3
 80057be:	480e      	ldr	r0, [pc, #56]	@ (80057f8 <MX_TIM4_Init+0x104>)
 80057c0:	f004 faca 	bl	8009d58 <HAL_TIM_PWM_ConfigChannel>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80057ca:	f7ff fbb3 	bl	8004f34 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80057d2:	463b      	mov	r3, r7
 80057d4:	2208      	movs	r2, #8
 80057d6:	4619      	mov	r1, r3
 80057d8:	4807      	ldr	r0, [pc, #28]	@ (80057f8 <MX_TIM4_Init+0x104>)
 80057da:	f004 fabd 	bl	8009d58 <HAL_TIM_PWM_ConfigChannel>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 80057e4:	f7ff fba6 	bl	8004f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80057e8:	4803      	ldr	r0, [pc, #12]	@ (80057f8 <MX_TIM4_Init+0x104>)
 80057ea:	f000 f881 	bl	80058f0 <HAL_TIM_MspPostInit>

}
 80057ee:	bf00      	nop
 80057f0:	3738      	adds	r7, #56	@ 0x38
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20000538 	.word	0x20000538
 80057fc:	40000800 	.word	0x40000800

08005800 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a34      	ldr	r2, [pc, #208]	@ (80058e0 <HAL_TIM_Base_MspInit+0xe0>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d114      	bne.n	800583c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005812:	4b34      	ldr	r3, [pc, #208]	@ (80058e4 <HAL_TIM_Base_MspInit+0xe4>)
 8005814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005816:	4a33      	ldr	r2, [pc, #204]	@ (80058e4 <HAL_TIM_Base_MspInit+0xe4>)
 8005818:	f043 0301 	orr.w	r3, r3, #1
 800581c:	6453      	str	r3, [r2, #68]	@ 0x44
 800581e:	4b31      	ldr	r3, [pc, #196]	@ (80058e4 <HAL_TIM_Base_MspInit+0xe4>)
 8005820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	617b      	str	r3, [r7, #20]
 8005828:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800582a:	2200      	movs	r2, #0
 800582c:	2100      	movs	r1, #0
 800582e:	201b      	movs	r0, #27
 8005830:	f000 fb7d 	bl	8005f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005834:	201b      	movs	r0, #27
 8005836:	f000 fb96 	bl	8005f66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800583a:	e04c      	b.n	80058d6 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005844:	d114      	bne.n	8005870 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005846:	4b27      	ldr	r3, [pc, #156]	@ (80058e4 <HAL_TIM_Base_MspInit+0xe4>)
 8005848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584a:	4a26      	ldr	r2, [pc, #152]	@ (80058e4 <HAL_TIM_Base_MspInit+0xe4>)
 800584c:	f043 0301 	orr.w	r3, r3, #1
 8005850:	6413      	str	r3, [r2, #64]	@ 0x40
 8005852:	4b24      	ldr	r3, [pc, #144]	@ (80058e4 <HAL_TIM_Base_MspInit+0xe4>)
 8005854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	613b      	str	r3, [r7, #16]
 800585c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800585e:	2200      	movs	r2, #0
 8005860:	2100      	movs	r1, #0
 8005862:	201c      	movs	r0, #28
 8005864:	f000 fb63 	bl	8005f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005868:	201c      	movs	r0, #28
 800586a:	f000 fb7c 	bl	8005f66 <HAL_NVIC_EnableIRQ>
}
 800586e:	e032      	b.n	80058d6 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a1c      	ldr	r2, [pc, #112]	@ (80058e8 <HAL_TIM_Base_MspInit+0xe8>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d114      	bne.n	80058a4 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800587a:	4b1a      	ldr	r3, [pc, #104]	@ (80058e4 <HAL_TIM_Base_MspInit+0xe4>)
 800587c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587e:	4a19      	ldr	r2, [pc, #100]	@ (80058e4 <HAL_TIM_Base_MspInit+0xe4>)
 8005880:	f043 0302 	orr.w	r3, r3, #2
 8005884:	6413      	str	r3, [r2, #64]	@ 0x40
 8005886:	4b17      	ldr	r3, [pc, #92]	@ (80058e4 <HAL_TIM_Base_MspInit+0xe4>)
 8005888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005892:	2200      	movs	r2, #0
 8005894:	2100      	movs	r1, #0
 8005896:	201d      	movs	r0, #29
 8005898:	f000 fb49 	bl	8005f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800589c:	201d      	movs	r0, #29
 800589e:	f000 fb62 	bl	8005f66 <HAL_NVIC_EnableIRQ>
}
 80058a2:	e018      	b.n	80058d6 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a10      	ldr	r2, [pc, #64]	@ (80058ec <HAL_TIM_Base_MspInit+0xec>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d113      	bne.n	80058d6 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80058ae:	4b0d      	ldr	r3, [pc, #52]	@ (80058e4 <HAL_TIM_Base_MspInit+0xe4>)
 80058b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b2:	4a0c      	ldr	r2, [pc, #48]	@ (80058e4 <HAL_TIM_Base_MspInit+0xe4>)
 80058b4:	f043 0304 	orr.w	r3, r3, #4
 80058b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80058ba:	4b0a      	ldr	r3, [pc, #40]	@ (80058e4 <HAL_TIM_Base_MspInit+0xe4>)
 80058bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058be:	f003 0304 	and.w	r3, r3, #4
 80058c2:	60bb      	str	r3, [r7, #8]
 80058c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80058c6:	2200      	movs	r2, #0
 80058c8:	2100      	movs	r1, #0
 80058ca:	201e      	movs	r0, #30
 80058cc:	f000 fb2f 	bl	8005f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80058d0:	201e      	movs	r0, #30
 80058d2:	f000 fb48 	bl	8005f66 <HAL_NVIC_EnableIRQ>
}
 80058d6:	bf00      	nop
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	40010000 	.word	0x40010000
 80058e4:	40023800 	.word	0x40023800
 80058e8:	40000400 	.word	0x40000400
 80058ec:	40000800 	.word	0x40000800

080058f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08e      	sub	sp, #56	@ 0x38
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	605a      	str	r2, [r3, #4]
 8005902:	609a      	str	r2, [r3, #8]
 8005904:	60da      	str	r2, [r3, #12]
 8005906:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a70      	ldr	r2, [pc, #448]	@ (8005ad0 <HAL_TIM_MspPostInit+0x1e0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d13a      	bne.n	8005988 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005912:	4b70      	ldr	r3, [pc, #448]	@ (8005ad4 <HAL_TIM_MspPostInit+0x1e4>)
 8005914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005916:	4a6f      	ldr	r2, [pc, #444]	@ (8005ad4 <HAL_TIM_MspPostInit+0x1e4>)
 8005918:	f043 0310 	orr.w	r3, r3, #16
 800591c:	6313      	str	r3, [r2, #48]	@ 0x30
 800591e:	4b6d      	ldr	r3, [pc, #436]	@ (8005ad4 <HAL_TIM_MspPostInit+0x1e4>)
 8005920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005922:	f003 0310 	and.w	r3, r3, #16
 8005926:	623b      	str	r3, [r7, #32]
 8005928:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800592a:	4b6a      	ldr	r3, [pc, #424]	@ (8005ad4 <HAL_TIM_MspPostInit+0x1e4>)
 800592c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592e:	4a69      	ldr	r2, [pc, #420]	@ (8005ad4 <HAL_TIM_MspPostInit+0x1e4>)
 8005930:	f043 0301 	orr.w	r3, r3, #1
 8005934:	6313      	str	r3, [r2, #48]	@ 0x30
 8005936:	4b67      	ldr	r3, [pc, #412]	@ (8005ad4 <HAL_TIM_MspPostInit+0x1e4>)
 8005938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	61fb      	str	r3, [r7, #28]
 8005940:	69fb      	ldr	r3, [r7, #28]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_Kitchen_Shutter_Pin|TIM1_CH2_LivingRoom_Shutter_Pin|TIM1_CH3_Garage_Shutter_Pin;
 8005942:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 8005946:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005948:	2302      	movs	r3, #2
 800594a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800594c:	2300      	movs	r3, #0
 800594e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005950:	2300      	movs	r3, #0
 8005952:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005954:	2301      	movs	r3, #1
 8005956:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005958:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800595c:	4619      	mov	r1, r3
 800595e:	485e      	ldr	r0, [pc, #376]	@ (8005ad8 <HAL_TIM_MspPostInit+0x1e8>)
 8005960:	f000 fbae 	bl	80060c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM1_CH4_Door_Pin;
 8005964:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005968:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800596a:	2302      	movs	r3, #2
 800596c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800596e:	2300      	movs	r3, #0
 8005970:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005972:	2300      	movs	r3, #0
 8005974:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005976:	2301      	movs	r3, #1
 8005978:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TIM1_CH4_Door_GPIO_Port, &GPIO_InitStruct);
 800597a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800597e:	4619      	mov	r1, r3
 8005980:	4856      	ldr	r0, [pc, #344]	@ (8005adc <HAL_TIM_MspPostInit+0x1ec>)
 8005982:	f000 fb9d 	bl	80060c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005986:	e09f      	b.n	8005ac8 <HAL_TIM_MspPostInit+0x1d8>
  else if(timHandle->Instance==TIM2)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005990:	d139      	bne.n	8005a06 <HAL_TIM_MspPostInit+0x116>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005992:	4b50      	ldr	r3, [pc, #320]	@ (8005ad4 <HAL_TIM_MspPostInit+0x1e4>)
 8005994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005996:	4a4f      	ldr	r2, [pc, #316]	@ (8005ad4 <HAL_TIM_MspPostInit+0x1e4>)
 8005998:	f043 0301 	orr.w	r3, r3, #1
 800599c:	6313      	str	r3, [r2, #48]	@ 0x30
 800599e:	4b4d      	ldr	r3, [pc, #308]	@ (8005ad4 <HAL_TIM_MspPostInit+0x1e4>)
 80059a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	61bb      	str	r3, [r7, #24]
 80059a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059aa:	4b4a      	ldr	r3, [pc, #296]	@ (8005ad4 <HAL_TIM_MspPostInit+0x1e4>)
 80059ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ae:	4a49      	ldr	r2, [pc, #292]	@ (8005ad4 <HAL_TIM_MspPostInit+0x1e4>)
 80059b0:	f043 0302 	orr.w	r3, r3, #2
 80059b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80059b6:	4b47      	ldr	r3, [pc, #284]	@ (8005ad4 <HAL_TIM_MspPostInit+0x1e4>)
 80059b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_RGB_Garage_Pin;
 80059c2:	2301      	movs	r3, #1
 80059c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059c6:	2302      	movs	r3, #2
 80059c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059ce:	2300      	movs	r3, #0
 80059d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80059d2:	2301      	movs	r3, #1
 80059d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TIM2_CH1_RGB_Garage_GPIO_Port, &GPIO_InitStruct);
 80059d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059da:	4619      	mov	r1, r3
 80059dc:	483f      	ldr	r0, [pc, #252]	@ (8005adc <HAL_TIM_MspPostInit+0x1ec>)
 80059de:	f000 fb6f 	bl	80060c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM2_CH3_Alarm_Buzzer_Pin|TIM2_CH4_RGB_Kitchen_Pin;
 80059e2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80059e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059e8:	2302      	movs	r3, #2
 80059ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ec:	2300      	movs	r3, #0
 80059ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059f0:	2300      	movs	r3, #0
 80059f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80059f4:	2301      	movs	r3, #1
 80059f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059fc:	4619      	mov	r1, r3
 80059fe:	4838      	ldr	r0, [pc, #224]	@ (8005ae0 <HAL_TIM_MspPostInit+0x1f0>)
 8005a00:	f000 fb5e 	bl	80060c0 <HAL_GPIO_Init>
}
 8005a04:	e060      	b.n	8005ac8 <HAL_TIM_MspPostInit+0x1d8>
  else if(timHandle->Instance==TIM3)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a36      	ldr	r2, [pc, #216]	@ (8005ae4 <HAL_TIM_MspPostInit+0x1f4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d139      	bne.n	8005a84 <HAL_TIM_MspPostInit+0x194>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a10:	4b30      	ldr	r3, [pc, #192]	@ (8005ad4 <HAL_TIM_MspPostInit+0x1e4>)
 8005a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a14:	4a2f      	ldr	r2, [pc, #188]	@ (8005ad4 <HAL_TIM_MspPostInit+0x1e4>)
 8005a16:	f043 0302 	orr.w	r3, r3, #2
 8005a1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8005ad4 <HAL_TIM_MspPostInit+0x1e4>)
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	613b      	str	r3, [r7, #16]
 8005a26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a28:	4b2a      	ldr	r3, [pc, #168]	@ (8005ad4 <HAL_TIM_MspPostInit+0x1e4>)
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2c:	4a29      	ldr	r2, [pc, #164]	@ (8005ad4 <HAL_TIM_MspPostInit+0x1e4>)
 8005a2e:	f043 0304 	orr.w	r3, r3, #4
 8005a32:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a34:	4b27      	ldr	r3, [pc, #156]	@ (8005ad4 <HAL_TIM_MspPostInit+0x1e4>)
 8005a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a38:	f003 0304 	and.w	r3, r3, #4
 8005a3c:	60fb      	str	r3, [r7, #12]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005a40:	2301      	movs	r3, #1
 8005a42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a44:	2302      	movs	r3, #2
 8005a46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005a50:	2302      	movs	r3, #2
 8005a52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4821      	ldr	r0, [pc, #132]	@ (8005ae0 <HAL_TIM_MspPostInit+0x1f0>)
 8005a5c:	f000 fb30 	bl	80060c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM3_CH4_Garage_Pin;
 8005a60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a66:	2302      	movs	r3, #2
 8005a68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005a72:	2302      	movs	r3, #2
 8005a74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TIM3_CH4_Garage_GPIO_Port, &GPIO_InitStruct);
 8005a76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	481a      	ldr	r0, [pc, #104]	@ (8005ae8 <HAL_TIM_MspPostInit+0x1f8>)
 8005a7e:	f000 fb1f 	bl	80060c0 <HAL_GPIO_Init>
}
 8005a82:	e021      	b.n	8005ac8 <HAL_TIM_MspPostInit+0x1d8>
  else if(timHandle->Instance==TIM4)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a18      	ldr	r2, [pc, #96]	@ (8005aec <HAL_TIM_MspPostInit+0x1fc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d11c      	bne.n	8005ac8 <HAL_TIM_MspPostInit+0x1d8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a8e:	4b11      	ldr	r3, [pc, #68]	@ (8005ad4 <HAL_TIM_MspPostInit+0x1e4>)
 8005a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a92:	4a10      	ldr	r2, [pc, #64]	@ (8005ad4 <HAL_TIM_MspPostInit+0x1e4>)
 8005a94:	f043 0308 	orr.w	r3, r3, #8
 8005a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8005ad4 <HAL_TIM_MspPostInit+0x1e4>)
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	60bb      	str	r3, [r7, #8]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM4_CH1_RGB_LivingRoom_Pin|TIM4_CH3_heating_Pin;
 8005aa6:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8005aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aac:	2302      	movs	r3, #2
 8005aae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005ab8:	2302      	movs	r3, #2
 8005aba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005abc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	480b      	ldr	r0, [pc, #44]	@ (8005af0 <HAL_TIM_MspPostInit+0x200>)
 8005ac4:	f000 fafc 	bl	80060c0 <HAL_GPIO_Init>
}
 8005ac8:	bf00      	nop
 8005aca:	3738      	adds	r7, #56	@ 0x38
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40010000 	.word	0x40010000
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	40020000 	.word	0x40020000
 8005ae0:	40020400 	.word	0x40020400
 8005ae4:	40000400 	.word	0x40000400
 8005ae8:	40020800 	.word	0x40020800
 8005aec:	40000800 	.word	0x40000800
 8005af0:	40020c00 	.word	0x40020c00

08005af4 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005af8:	4b14      	ldr	r3, [pc, #80]	@ (8005b4c <MX_USART6_UART_Init+0x58>)
 8005afa:	4a15      	ldr	r2, [pc, #84]	@ (8005b50 <MX_USART6_UART_Init+0x5c>)
 8005afc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8005afe:	4b13      	ldr	r3, [pc, #76]	@ (8005b4c <MX_USART6_UART_Init+0x58>)
 8005b00:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8005b04:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005b06:	4b11      	ldr	r3, [pc, #68]	@ (8005b4c <MX_USART6_UART_Init+0x58>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005b4c <MX_USART6_UART_Init+0x58>)
 8005b0e:	2200      	movs	r2, #0
 8005b10:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005b12:	4b0e      	ldr	r3, [pc, #56]	@ (8005b4c <MX_USART6_UART_Init+0x58>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005b18:	4b0c      	ldr	r3, [pc, #48]	@ (8005b4c <MX_USART6_UART_Init+0x58>)
 8005b1a:	220c      	movs	r2, #12
 8005b1c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b4c <MX_USART6_UART_Init+0x58>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b24:	4b09      	ldr	r3, [pc, #36]	@ (8005b4c <MX_USART6_UART_Init+0x58>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b2a:	4b08      	ldr	r3, [pc, #32]	@ (8005b4c <MX_USART6_UART_Init+0x58>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b30:	4b06      	ldr	r3, [pc, #24]	@ (8005b4c <MX_USART6_UART_Init+0x58>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005b36:	4805      	ldr	r0, [pc, #20]	@ (8005b4c <MX_USART6_UART_Init+0x58>)
 8005b38:	f004 fffc 	bl	800ab34 <HAL_UART_Init>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8005b42:	f7ff f9f7 	bl	8004f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005b46:	bf00      	nop
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20000584 	.word	0x20000584
 8005b50:	40011400 	.word	0x40011400

08005b54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b0aa      	sub	sp, #168	@ 0xa8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b5c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005b60:	2200      	movs	r2, #0
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	605a      	str	r2, [r3, #4]
 8005b66:	609a      	str	r2, [r3, #8]
 8005b68:	60da      	str	r2, [r3, #12]
 8005b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005b6c:	f107 0310 	add.w	r3, r7, #16
 8005b70:	2284      	movs	r2, #132	@ 0x84
 8005b72:	2100      	movs	r1, #0
 8005b74:	4618      	mov	r0, r3
 8005b76:	f006 fb95 	bl	800c2a4 <memset>
  if(uartHandle->Instance==USART6)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a26      	ldr	r2, [pc, #152]	@ (8005c18 <HAL_UART_MspInit+0xc4>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d144      	bne.n	8005c0e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8005b84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005b88:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005b8e:	f107 0310 	add.w	r3, r7, #16
 8005b92:	4618      	mov	r0, r3
 8005b94:	f002 f882 	bl	8007c9c <HAL_RCCEx_PeriphCLKConfig>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005b9e:	f7ff f9c9 	bl	8004f34 <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8005ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8005c1c <HAL_UART_MspInit+0xc8>)
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ba6:	4a1d      	ldr	r2, [pc, #116]	@ (8005c1c <HAL_UART_MspInit+0xc8>)
 8005ba8:	f043 0320 	orr.w	r3, r3, #32
 8005bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8005bae:	4b1b      	ldr	r3, [pc, #108]	@ (8005c1c <HAL_UART_MspInit+0xc8>)
 8005bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bb2:	f003 0320 	and.w	r3, r3, #32
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005bba:	4b18      	ldr	r3, [pc, #96]	@ (8005c1c <HAL_UART_MspInit+0xc8>)
 8005bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bbe:	4a17      	ldr	r2, [pc, #92]	@ (8005c1c <HAL_UART_MspInit+0xc8>)
 8005bc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bc6:	4b15      	ldr	r3, [pc, #84]	@ (8005c1c <HAL_UART_MspInit+0xc8>)
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bce:	60bb      	str	r3, [r7, #8]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8005bd2:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8005bd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bda:	2302      	movs	r3, #2
 8005bdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005be0:	2300      	movs	r3, #0
 8005be2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005be6:	2303      	movs	r3, #3
 8005be8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005bec:	2308      	movs	r3, #8
 8005bee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005bf2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	4809      	ldr	r0, [pc, #36]	@ (8005c20 <HAL_UART_MspInit+0xcc>)
 8005bfa:	f000 fa61 	bl	80060c0 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005bfe:	2200      	movs	r2, #0
 8005c00:	2100      	movs	r1, #0
 8005c02:	2047      	movs	r0, #71	@ 0x47
 8005c04:	f000 f993 	bl	8005f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005c08:	2047      	movs	r0, #71	@ 0x47
 8005c0a:	f000 f9ac 	bl	8005f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005c0e:	bf00      	nop
 8005c10:	37a8      	adds	r7, #168	@ 0xa8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	40011400 	.word	0x40011400
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	40021800 	.word	0x40021800

08005c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005c24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005c5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005c28:	480d      	ldr	r0, [pc, #52]	@ (8005c60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005c2a:	490e      	ldr	r1, [pc, #56]	@ (8005c64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005c2c:	4a0e      	ldr	r2, [pc, #56]	@ (8005c68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c30:	e002      	b.n	8005c38 <LoopCopyDataInit>

08005c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c36:	3304      	adds	r3, #4

08005c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c3c:	d3f9      	bcc.n	8005c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c3e:	4a0b      	ldr	r2, [pc, #44]	@ (8005c6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005c40:	4c0b      	ldr	r4, [pc, #44]	@ (8005c70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c44:	e001      	b.n	8005c4a <LoopFillZerobss>

08005c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c48:	3204      	adds	r2, #4

08005c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c4c:	d3fb      	bcc.n	8005c46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005c4e:	f7ff fb5b 	bl	8005308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005c52:	f006 fb35 	bl	800c2c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005c56:	f7fd faff 	bl	8003258 <main>
  bx  lr    
 8005c5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005c5c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005c64:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 8005c68:	0800d168 	.word	0x0800d168
  ldr r2, =_sbss
 8005c6c:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8005c70:	20000758 	.word	0x20000758

08005c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005c74:	e7fe      	b.n	8005c74 <ADC_IRQHandler>

08005c76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c7a:	2003      	movs	r0, #3
 8005c7c:	f000 f94c 	bl	8005f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005c80:	2000      	movs	r0, #0
 8005c82:	f000 f805 	bl	8005c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005c86:	f7ff fa71 	bl	800516c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005c98:	4b12      	ldr	r3, [pc, #72]	@ (8005ce4 <HAL_InitTick+0x54>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	4b12      	ldr	r3, [pc, #72]	@ (8005ce8 <HAL_InitTick+0x58>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 f967 	bl	8005f82 <HAL_SYSTICK_Config>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e00e      	b.n	8005cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b0f      	cmp	r3, #15
 8005cc2:	d80a      	bhi.n	8005cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	6879      	ldr	r1, [r7, #4]
 8005cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ccc:	f000 f92f 	bl	8005f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005cd0:	4a06      	ldr	r2, [pc, #24]	@ (8005cec <HAL_InitTick+0x5c>)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e000      	b.n	8005cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3708      	adds	r7, #8
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	20000158 	.word	0x20000158
 8005ce8:	20000160 	.word	0x20000160
 8005cec:	2000015c 	.word	0x2000015c

08005cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005cf4:	4b06      	ldr	r3, [pc, #24]	@ (8005d10 <HAL_IncTick+0x20>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	4b06      	ldr	r3, [pc, #24]	@ (8005d14 <HAL_IncTick+0x24>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4413      	add	r3, r2
 8005d00:	4a04      	ldr	r2, [pc, #16]	@ (8005d14 <HAL_IncTick+0x24>)
 8005d02:	6013      	str	r3, [r2, #0]
}
 8005d04:	bf00      	nop
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	20000160 	.word	0x20000160
 8005d14:	2000060c 	.word	0x2000060c

08005d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8005d1c:	4b03      	ldr	r3, [pc, #12]	@ (8005d2c <HAL_GetTick+0x14>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	2000060c 	.word	0x2000060c

08005d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d38:	f7ff ffee 	bl	8005d18 <HAL_GetTick>
 8005d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d48:	d005      	beq.n	8005d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d74 <HAL_Delay+0x44>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d56:	bf00      	nop
 8005d58:	f7ff ffde 	bl	8005d18 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d8f7      	bhi.n	8005d58 <HAL_Delay+0x28>
  {
  }
}
 8005d68:	bf00      	nop
 8005d6a:	bf00      	nop
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	20000160 	.word	0x20000160

08005d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d88:	4b0b      	ldr	r3, [pc, #44]	@ (8005db8 <__NVIC_SetPriorityGrouping+0x40>)
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005d94:	4013      	ands	r3, r2
 8005d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005da0:	4b06      	ldr	r3, [pc, #24]	@ (8005dbc <__NVIC_SetPriorityGrouping+0x44>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005da6:	4a04      	ldr	r2, [pc, #16]	@ (8005db8 <__NVIC_SetPriorityGrouping+0x40>)
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	60d3      	str	r3, [r2, #12]
}
 8005dac:	bf00      	nop
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	e000ed00 	.word	0xe000ed00
 8005dbc:	05fa0000 	.word	0x05fa0000

08005dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005dc4:	4b04      	ldr	r3, [pc, #16]	@ (8005dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	0a1b      	lsrs	r3, r3, #8
 8005dca:	f003 0307 	and.w	r3, r3, #7
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	e000ed00 	.word	0xe000ed00

08005ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	4603      	mov	r3, r0
 8005de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	db0b      	blt.n	8005e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005dee:	79fb      	ldrb	r3, [r7, #7]
 8005df0:	f003 021f 	and.w	r2, r3, #31
 8005df4:	4907      	ldr	r1, [pc, #28]	@ (8005e14 <__NVIC_EnableIRQ+0x38>)
 8005df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	2001      	movs	r0, #1
 8005dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8005e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e06:	bf00      	nop
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	e000e100 	.word	0xe000e100

08005e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	4603      	mov	r3, r0
 8005e20:	6039      	str	r1, [r7, #0]
 8005e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	db0a      	blt.n	8005e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	490c      	ldr	r1, [pc, #48]	@ (8005e64 <__NVIC_SetPriority+0x4c>)
 8005e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e36:	0112      	lsls	r2, r2, #4
 8005e38:	b2d2      	uxtb	r2, r2
 8005e3a:	440b      	add	r3, r1
 8005e3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e40:	e00a      	b.n	8005e58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	4908      	ldr	r1, [pc, #32]	@ (8005e68 <__NVIC_SetPriority+0x50>)
 8005e48:	79fb      	ldrb	r3, [r7, #7]
 8005e4a:	f003 030f 	and.w	r3, r3, #15
 8005e4e:	3b04      	subs	r3, #4
 8005e50:	0112      	lsls	r2, r2, #4
 8005e52:	b2d2      	uxtb	r2, r2
 8005e54:	440b      	add	r3, r1
 8005e56:	761a      	strb	r2, [r3, #24]
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	e000e100 	.word	0xe000e100
 8005e68:	e000ed00 	.word	0xe000ed00

08005e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b089      	sub	sp, #36	@ 0x24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	f1c3 0307 	rsb	r3, r3, #7
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	bf28      	it	cs
 8005e8a:	2304      	movcs	r3, #4
 8005e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	3304      	adds	r3, #4
 8005e92:	2b06      	cmp	r3, #6
 8005e94:	d902      	bls.n	8005e9c <NVIC_EncodePriority+0x30>
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	3b03      	subs	r3, #3
 8005e9a:	e000      	b.n	8005e9e <NVIC_EncodePriority+0x32>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eaa:	43da      	mvns	r2, r3
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	401a      	ands	r2, r3
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	fa01 f303 	lsl.w	r3, r1, r3
 8005ebe:	43d9      	mvns	r1, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ec4:	4313      	orrs	r3, r2
         );
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3724      	adds	r7, #36	@ 0x24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
	...

08005ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ee4:	d301      	bcc.n	8005eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e00f      	b.n	8005f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005eea:	4a0a      	ldr	r2, [pc, #40]	@ (8005f14 <SysTick_Config+0x40>)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ef2:	210f      	movs	r1, #15
 8005ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef8:	f7ff ff8e 	bl	8005e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005efc:	4b05      	ldr	r3, [pc, #20]	@ (8005f14 <SysTick_Config+0x40>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f02:	4b04      	ldr	r3, [pc, #16]	@ (8005f14 <SysTick_Config+0x40>)
 8005f04:	2207      	movs	r2, #7
 8005f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	e000e010 	.word	0xe000e010

08005f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7ff ff29 	bl	8005d78 <__NVIC_SetPriorityGrouping>
}
 8005f26:	bf00      	nop
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b086      	sub	sp, #24
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	4603      	mov	r3, r0
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	607a      	str	r2, [r7, #4]
 8005f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f40:	f7ff ff3e 	bl	8005dc0 <__NVIC_GetPriorityGrouping>
 8005f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	68b9      	ldr	r1, [r7, #8]
 8005f4a:	6978      	ldr	r0, [r7, #20]
 8005f4c:	f7ff ff8e 	bl	8005e6c <NVIC_EncodePriority>
 8005f50:	4602      	mov	r2, r0
 8005f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f56:	4611      	mov	r1, r2
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff ff5d 	bl	8005e18 <__NVIC_SetPriority>
}
 8005f5e:	bf00      	nop
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b082      	sub	sp, #8
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff ff31 	bl	8005ddc <__NVIC_EnableIRQ>
}
 8005f7a:	bf00      	nop
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff ffa2 	bl	8005ed4 <SysTick_Config>
 8005f90:	4603      	mov	r3, r0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b084      	sub	sp, #16
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fa6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005fa8:	f7ff feb6 	bl	8005d18 <HAL_GetTick>
 8005fac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d008      	beq.n	8005fcc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2280      	movs	r2, #128	@ 0x80
 8005fbe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e052      	b.n	8006072 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0216 	bic.w	r2, r2, #22
 8005fda:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	695a      	ldr	r2, [r3, #20]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005fea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d103      	bne.n	8005ffc <HAL_DMA_Abort+0x62>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0208 	bic.w	r2, r2, #8
 800600a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0201 	bic.w	r2, r2, #1
 800601a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800601c:	e013      	b.n	8006046 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800601e:	f7ff fe7b 	bl	8005d18 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	2b05      	cmp	r3, #5
 800602a:	d90c      	bls.n	8006046 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2220      	movs	r2, #32
 8006030:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2203      	movs	r2, #3
 8006036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e015      	b.n	8006072 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1e4      	bne.n	800601e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006058:	223f      	movs	r2, #63	@ 0x3f
 800605a:	409a      	lsls	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d004      	beq.n	8006098 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2280      	movs	r2, #128	@ 0x80
 8006092:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e00c      	b.n	80060b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2205      	movs	r2, #5
 800609c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0201 	bic.w	r2, r2, #1
 80060ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
	...

080060c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b089      	sub	sp, #36	@ 0x24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80060ca:	2300      	movs	r3, #0
 80060cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80060ce:	2300      	movs	r3, #0
 80060d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80060d2:	2300      	movs	r3, #0
 80060d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80060d6:	2300      	movs	r3, #0
 80060d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80060da:	2300      	movs	r3, #0
 80060dc:	61fb      	str	r3, [r7, #28]
 80060de:	e175      	b.n	80063cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80060e0:	2201      	movs	r2, #1
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	fa02 f303 	lsl.w	r3, r2, r3
 80060e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	4013      	ands	r3, r2
 80060f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	f040 8164 	bne.w	80063c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f003 0303 	and.w	r3, r3, #3
 8006106:	2b01      	cmp	r3, #1
 8006108:	d005      	beq.n	8006116 <HAL_GPIO_Init+0x56>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d130      	bne.n	8006178 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	2203      	movs	r2, #3
 8006122:	fa02 f303 	lsl.w	r3, r2, r3
 8006126:	43db      	mvns	r3, r3
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	4013      	ands	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	fa02 f303 	lsl.w	r3, r2, r3
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	4313      	orrs	r3, r2
 800613e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800614c:	2201      	movs	r2, #1
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	fa02 f303 	lsl.w	r3, r2, r3
 8006154:	43db      	mvns	r3, r3
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	4013      	ands	r3, r2
 800615a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	091b      	lsrs	r3, r3, #4
 8006162:	f003 0201 	and.w	r2, r3, #1
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	4313      	orrs	r3, r2
 8006170:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f003 0303 	and.w	r3, r3, #3
 8006180:	2b03      	cmp	r3, #3
 8006182:	d017      	beq.n	80061b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	2203      	movs	r2, #3
 8006190:	fa02 f303 	lsl.w	r3, r2, r3
 8006194:	43db      	mvns	r3, r3
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	4013      	ands	r3, r2
 800619a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	fa02 f303 	lsl.w	r3, r2, r3
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f003 0303 	and.w	r3, r3, #3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d123      	bne.n	8006208 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	08da      	lsrs	r2, r3, #3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3208      	adds	r2, #8
 80061c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	f003 0307 	and.w	r3, r3, #7
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	220f      	movs	r2, #15
 80061d8:	fa02 f303 	lsl.w	r3, r2, r3
 80061dc:	43db      	mvns	r3, r3
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	4013      	ands	r3, r2
 80061e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	691a      	ldr	r2, [r3, #16]
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	f003 0307 	and.w	r3, r3, #7
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	fa02 f303 	lsl.w	r3, r2, r3
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	08da      	lsrs	r2, r3, #3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	3208      	adds	r2, #8
 8006202:	69b9      	ldr	r1, [r7, #24]
 8006204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	005b      	lsls	r3, r3, #1
 8006212:	2203      	movs	r2, #3
 8006214:	fa02 f303 	lsl.w	r3, r2, r3
 8006218:	43db      	mvns	r3, r3
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	4013      	ands	r3, r2
 800621e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f003 0203 	and.w	r2, r3, #3
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	fa02 f303 	lsl.w	r3, r2, r3
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	4313      	orrs	r3, r2
 8006234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 80be 	beq.w	80063c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800624a:	4b66      	ldr	r3, [pc, #408]	@ (80063e4 <HAL_GPIO_Init+0x324>)
 800624c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800624e:	4a65      	ldr	r2, [pc, #404]	@ (80063e4 <HAL_GPIO_Init+0x324>)
 8006250:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006254:	6453      	str	r3, [r2, #68]	@ 0x44
 8006256:	4b63      	ldr	r3, [pc, #396]	@ (80063e4 <HAL_GPIO_Init+0x324>)
 8006258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800625a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006262:	4a61      	ldr	r2, [pc, #388]	@ (80063e8 <HAL_GPIO_Init+0x328>)
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	089b      	lsrs	r3, r3, #2
 8006268:	3302      	adds	r3, #2
 800626a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800626e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	220f      	movs	r2, #15
 800627a:	fa02 f303 	lsl.w	r3, r2, r3
 800627e:	43db      	mvns	r3, r3
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	4013      	ands	r3, r2
 8006284:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a58      	ldr	r2, [pc, #352]	@ (80063ec <HAL_GPIO_Init+0x32c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d037      	beq.n	80062fe <HAL_GPIO_Init+0x23e>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a57      	ldr	r2, [pc, #348]	@ (80063f0 <HAL_GPIO_Init+0x330>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d031      	beq.n	80062fa <HAL_GPIO_Init+0x23a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a56      	ldr	r2, [pc, #344]	@ (80063f4 <HAL_GPIO_Init+0x334>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d02b      	beq.n	80062f6 <HAL_GPIO_Init+0x236>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a55      	ldr	r2, [pc, #340]	@ (80063f8 <HAL_GPIO_Init+0x338>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d025      	beq.n	80062f2 <HAL_GPIO_Init+0x232>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a54      	ldr	r2, [pc, #336]	@ (80063fc <HAL_GPIO_Init+0x33c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d01f      	beq.n	80062ee <HAL_GPIO_Init+0x22e>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a53      	ldr	r2, [pc, #332]	@ (8006400 <HAL_GPIO_Init+0x340>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d019      	beq.n	80062ea <HAL_GPIO_Init+0x22a>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a52      	ldr	r2, [pc, #328]	@ (8006404 <HAL_GPIO_Init+0x344>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d013      	beq.n	80062e6 <HAL_GPIO_Init+0x226>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a51      	ldr	r2, [pc, #324]	@ (8006408 <HAL_GPIO_Init+0x348>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d00d      	beq.n	80062e2 <HAL_GPIO_Init+0x222>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a50      	ldr	r2, [pc, #320]	@ (800640c <HAL_GPIO_Init+0x34c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d007      	beq.n	80062de <HAL_GPIO_Init+0x21e>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a4f      	ldr	r2, [pc, #316]	@ (8006410 <HAL_GPIO_Init+0x350>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d101      	bne.n	80062da <HAL_GPIO_Init+0x21a>
 80062d6:	2309      	movs	r3, #9
 80062d8:	e012      	b.n	8006300 <HAL_GPIO_Init+0x240>
 80062da:	230a      	movs	r3, #10
 80062dc:	e010      	b.n	8006300 <HAL_GPIO_Init+0x240>
 80062de:	2308      	movs	r3, #8
 80062e0:	e00e      	b.n	8006300 <HAL_GPIO_Init+0x240>
 80062e2:	2307      	movs	r3, #7
 80062e4:	e00c      	b.n	8006300 <HAL_GPIO_Init+0x240>
 80062e6:	2306      	movs	r3, #6
 80062e8:	e00a      	b.n	8006300 <HAL_GPIO_Init+0x240>
 80062ea:	2305      	movs	r3, #5
 80062ec:	e008      	b.n	8006300 <HAL_GPIO_Init+0x240>
 80062ee:	2304      	movs	r3, #4
 80062f0:	e006      	b.n	8006300 <HAL_GPIO_Init+0x240>
 80062f2:	2303      	movs	r3, #3
 80062f4:	e004      	b.n	8006300 <HAL_GPIO_Init+0x240>
 80062f6:	2302      	movs	r3, #2
 80062f8:	e002      	b.n	8006300 <HAL_GPIO_Init+0x240>
 80062fa:	2301      	movs	r3, #1
 80062fc:	e000      	b.n	8006300 <HAL_GPIO_Init+0x240>
 80062fe:	2300      	movs	r3, #0
 8006300:	69fa      	ldr	r2, [r7, #28]
 8006302:	f002 0203 	and.w	r2, r2, #3
 8006306:	0092      	lsls	r2, r2, #2
 8006308:	4093      	lsls	r3, r2
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	4313      	orrs	r3, r2
 800630e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006310:	4935      	ldr	r1, [pc, #212]	@ (80063e8 <HAL_GPIO_Init+0x328>)
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	089b      	lsrs	r3, r3, #2
 8006316:	3302      	adds	r3, #2
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800631e:	4b3d      	ldr	r3, [pc, #244]	@ (8006414 <HAL_GPIO_Init+0x354>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	43db      	mvns	r3, r3
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	4013      	ands	r3, r2
 800632c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800633a:	69ba      	ldr	r2, [r7, #24]
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	4313      	orrs	r3, r2
 8006340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006342:	4a34      	ldr	r2, [pc, #208]	@ (8006414 <HAL_GPIO_Init+0x354>)
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006348:	4b32      	ldr	r3, [pc, #200]	@ (8006414 <HAL_GPIO_Init+0x354>)
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	43db      	mvns	r3, r3
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	4013      	ands	r3, r2
 8006356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800636c:	4a29      	ldr	r2, [pc, #164]	@ (8006414 <HAL_GPIO_Init+0x354>)
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006372:	4b28      	ldr	r3, [pc, #160]	@ (8006414 <HAL_GPIO_Init+0x354>)
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	43db      	mvns	r3, r3
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	4013      	ands	r3, r2
 8006380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	4313      	orrs	r3, r2
 8006394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006396:	4a1f      	ldr	r2, [pc, #124]	@ (8006414 <HAL_GPIO_Init+0x354>)
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800639c:	4b1d      	ldr	r3, [pc, #116]	@ (8006414 <HAL_GPIO_Init+0x354>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	43db      	mvns	r3, r3
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	4013      	ands	r3, r2
 80063aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d003      	beq.n	80063c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	4313      	orrs	r3, r2
 80063be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80063c0:	4a14      	ldr	r2, [pc, #80]	@ (8006414 <HAL_GPIO_Init+0x354>)
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	3301      	adds	r3, #1
 80063ca:	61fb      	str	r3, [r7, #28]
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	2b0f      	cmp	r3, #15
 80063d0:	f67f ae86 	bls.w	80060e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop
 80063d8:	3724      	adds	r7, #36	@ 0x24
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	40023800 	.word	0x40023800
 80063e8:	40013800 	.word	0x40013800
 80063ec:	40020000 	.word	0x40020000
 80063f0:	40020400 	.word	0x40020400
 80063f4:	40020800 	.word	0x40020800
 80063f8:	40020c00 	.word	0x40020c00
 80063fc:	40021000 	.word	0x40021000
 8006400:	40021400 	.word	0x40021400
 8006404:	40021800 	.word	0x40021800
 8006408:	40021c00 	.word	0x40021c00
 800640c:	40022000 	.word	0x40022000
 8006410:	40022400 	.word	0x40022400
 8006414:	40013c00 	.word	0x40013c00

08006418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	460b      	mov	r3, r1
 8006422:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691a      	ldr	r2, [r3, #16]
 8006428:	887b      	ldrh	r3, [r7, #2]
 800642a:	4013      	ands	r3, r2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d002      	beq.n	8006436 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006430:	2301      	movs	r3, #1
 8006432:	73fb      	strb	r3, [r7, #15]
 8006434:	e001      	b.n	800643a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006436:	2300      	movs	r3, #0
 8006438:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800643a:	7bfb      	ldrb	r3, [r7, #15]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	460b      	mov	r3, r1
 8006452:	807b      	strh	r3, [r7, #2]
 8006454:	4613      	mov	r3, r2
 8006456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006458:	787b      	ldrb	r3, [r7, #1]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800645e:	887a      	ldrh	r2, [r7, #2]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006464:	e003      	b.n	800646e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006466:	887b      	ldrh	r3, [r7, #2]
 8006468:	041a      	lsls	r2, r3, #16
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	619a      	str	r2, [r3, #24]
}
 800646e:	bf00      	nop
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	460b      	mov	r3, r1
 8006484:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800648c:	887a      	ldrh	r2, [r7, #2]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4013      	ands	r3, r2
 8006492:	041a      	lsls	r2, r3, #16
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	43d9      	mvns	r1, r3
 8006498:	887b      	ldrh	r3, [r7, #2]
 800649a:	400b      	ands	r3, r1
 800649c:	431a      	orrs	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	619a      	str	r2, [r3, #24]
}
 80064a2:	bf00      	nop
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
	...

080064b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	4603      	mov	r3, r0
 80064b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80064ba:	4b08      	ldr	r3, [pc, #32]	@ (80064dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064bc:	695a      	ldr	r2, [r3, #20]
 80064be:	88fb      	ldrh	r3, [r7, #6]
 80064c0:	4013      	ands	r3, r2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d006      	beq.n	80064d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064c6:	4a05      	ldr	r2, [pc, #20]	@ (80064dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064c8:	88fb      	ldrh	r3, [r7, #6]
 80064ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064cc:	88fb      	ldrh	r3, [r7, #6]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 f806 	bl	80064e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80064d4:	bf00      	nop
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	40013c00 	.word	0x40013c00

080064e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	4603      	mov	r3, r0
 80064e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80064ea:	bf00      	nop
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
	...

080064f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e07f      	b.n	800660a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d106      	bne.n	8006524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7fc f904 	bl	800272c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2224      	movs	r2, #36	@ 0x24
 8006528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 0201 	bic.w	r2, r2, #1
 800653a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006548:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689a      	ldr	r2, [r3, #8]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006558:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d107      	bne.n	8006572 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689a      	ldr	r2, [r3, #8]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800656e:	609a      	str	r2, [r3, #8]
 8006570:	e006      	b.n	8006580 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	689a      	ldr	r2, [r3, #8]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800657e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	2b02      	cmp	r3, #2
 8006586:	d104      	bne.n	8006592 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006590:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6859      	ldr	r1, [r3, #4]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	4b1d      	ldr	r3, [pc, #116]	@ (8006614 <HAL_I2C_Init+0x11c>)
 800659e:	430b      	orrs	r3, r1
 80065a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68da      	ldr	r2, [r3, #12]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	691a      	ldr	r2, [r3, #16]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	69d9      	ldr	r1, [r3, #28]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a1a      	ldr	r2, [r3, #32]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0201 	orr.w	r2, r2, #1
 80065ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	02008000 	.word	0x02008000

08006618 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b088      	sub	sp, #32
 800661c:	af02      	add	r7, sp, #8
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	4608      	mov	r0, r1
 8006622:	4611      	mov	r1, r2
 8006624:	461a      	mov	r2, r3
 8006626:	4603      	mov	r3, r0
 8006628:	817b      	strh	r3, [r7, #10]
 800662a:	460b      	mov	r3, r1
 800662c:	813b      	strh	r3, [r7, #8]
 800662e:	4613      	mov	r3, r2
 8006630:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b20      	cmp	r3, #32
 800663c:	f040 80f9 	bne.w	8006832 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <HAL_I2C_Mem_Write+0x34>
 8006646:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006648:	2b00      	cmp	r3, #0
 800664a:	d105      	bne.n	8006658 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006652:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e0ed      	b.n	8006834 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800665e:	2b01      	cmp	r3, #1
 8006660:	d101      	bne.n	8006666 <HAL_I2C_Mem_Write+0x4e>
 8006662:	2302      	movs	r3, #2
 8006664:	e0e6      	b.n	8006834 <HAL_I2C_Mem_Write+0x21c>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800666e:	f7ff fb53 	bl	8005d18 <HAL_GetTick>
 8006672:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	2319      	movs	r3, #25
 800667a:	2201      	movs	r2, #1
 800667c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 fbcb 	bl	8006e1c <I2C_WaitOnFlagUntilTimeout>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d001      	beq.n	8006690 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e0d1      	b.n	8006834 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2221      	movs	r2, #33	@ 0x21
 8006694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2240      	movs	r2, #64	@ 0x40
 800669c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6a3a      	ldr	r2, [r7, #32]
 80066aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80066b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066b8:	88f8      	ldrh	r0, [r7, #6]
 80066ba:	893a      	ldrh	r2, [r7, #8]
 80066bc:	8979      	ldrh	r1, [r7, #10]
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	9301      	str	r3, [sp, #4]
 80066c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	4603      	mov	r3, r0
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 fadb 	bl	8006c84 <I2C_RequestMemoryWrite>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d005      	beq.n	80066e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e0a9      	b.n	8006834 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	2bff      	cmp	r3, #255	@ 0xff
 80066e8:	d90e      	bls.n	8006708 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	22ff      	movs	r2, #255	@ 0xff
 80066ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	8979      	ldrh	r1, [r7, #10]
 80066f8:	2300      	movs	r3, #0
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 fd27 	bl	8007154 <I2C_TransferConfig>
 8006706:	e00f      	b.n	8006728 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800670c:	b29a      	uxth	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006716:	b2da      	uxtb	r2, r3
 8006718:	8979      	ldrh	r1, [r7, #10]
 800671a:	2300      	movs	r3, #0
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f000 fd16 	bl	8007154 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 fbb5 	bl	8006e9c <I2C_WaitOnTXISFlagUntilTimeout>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e07b      	b.n	8006834 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006740:	781a      	ldrb	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006756:	b29b      	uxth	r3, r3
 8006758:	3b01      	subs	r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006764:	3b01      	subs	r3, #1
 8006766:	b29a      	uxth	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006770:	b29b      	uxth	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d034      	beq.n	80067e0 <HAL_I2C_Mem_Write+0x1c8>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800677a:	2b00      	cmp	r3, #0
 800677c:	d130      	bne.n	80067e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006784:	2200      	movs	r2, #0
 8006786:	2180      	movs	r1, #128	@ 0x80
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 fb47 	bl	8006e1c <I2C_WaitOnFlagUntilTimeout>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e04d      	b.n	8006834 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800679c:	b29b      	uxth	r3, r3
 800679e:	2bff      	cmp	r3, #255	@ 0xff
 80067a0:	d90e      	bls.n	80067c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	22ff      	movs	r2, #255	@ 0xff
 80067a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	8979      	ldrh	r1, [r7, #10]
 80067b0:	2300      	movs	r3, #0
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f000 fccb 	bl	8007154 <I2C_TransferConfig>
 80067be:	e00f      	b.n	80067e0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	8979      	ldrh	r1, [r7, #10]
 80067d2:	2300      	movs	r3, #0
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 fcba 	bl	8007154 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d19e      	bne.n	8006728 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 fb94 	bl	8006f1c <I2C_WaitOnSTOPFlagUntilTimeout>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e01a      	b.n	8006834 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2220      	movs	r2, #32
 8006804:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6859      	ldr	r1, [r3, #4]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	4b0a      	ldr	r3, [pc, #40]	@ (800683c <HAL_I2C_Mem_Write+0x224>)
 8006812:	400b      	ands	r3, r1
 8006814:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2220      	movs	r2, #32
 800681a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	e000      	b.n	8006834 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006832:	2302      	movs	r3, #2
  }
}
 8006834:	4618      	mov	r0, r3
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	fe00e800 	.word	0xfe00e800

08006840 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b088      	sub	sp, #32
 8006844:	af02      	add	r7, sp, #8
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	4608      	mov	r0, r1
 800684a:	4611      	mov	r1, r2
 800684c:	461a      	mov	r2, r3
 800684e:	4603      	mov	r3, r0
 8006850:	817b      	strh	r3, [r7, #10]
 8006852:	460b      	mov	r3, r1
 8006854:	813b      	strh	r3, [r7, #8]
 8006856:	4613      	mov	r3, r2
 8006858:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b20      	cmp	r3, #32
 8006864:	f040 80fd 	bne.w	8006a62 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d002      	beq.n	8006874 <HAL_I2C_Mem_Read+0x34>
 800686e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006870:	2b00      	cmp	r3, #0
 8006872:	d105      	bne.n	8006880 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800687a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e0f1      	b.n	8006a64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006886:	2b01      	cmp	r3, #1
 8006888:	d101      	bne.n	800688e <HAL_I2C_Mem_Read+0x4e>
 800688a:	2302      	movs	r3, #2
 800688c:	e0ea      	b.n	8006a64 <HAL_I2C_Mem_Read+0x224>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006896:	f7ff fa3f 	bl	8005d18 <HAL_GetTick>
 800689a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	2319      	movs	r3, #25
 80068a2:	2201      	movs	r2, #1
 80068a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 fab7 	bl	8006e1c <I2C_WaitOnFlagUntilTimeout>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e0d5      	b.n	8006a64 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2222      	movs	r2, #34	@ 0x22
 80068bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2240      	movs	r2, #64	@ 0x40
 80068c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6a3a      	ldr	r2, [r7, #32]
 80068d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80068d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068e0:	88f8      	ldrh	r0, [r7, #6]
 80068e2:	893a      	ldrh	r2, [r7, #8]
 80068e4:	8979      	ldrh	r1, [r7, #10]
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	9301      	str	r3, [sp, #4]
 80068ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	4603      	mov	r3, r0
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f000 fa1b 	bl	8006d2c <I2C_RequestMemoryRead>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d005      	beq.n	8006908 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e0ad      	b.n	8006a64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800690c:	b29b      	uxth	r3, r3
 800690e:	2bff      	cmp	r3, #255	@ 0xff
 8006910:	d90e      	bls.n	8006930 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	22ff      	movs	r2, #255	@ 0xff
 8006916:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800691c:	b2da      	uxtb	r2, r3
 800691e:	8979      	ldrh	r1, [r7, #10]
 8006920:	4b52      	ldr	r3, [pc, #328]	@ (8006a6c <HAL_I2C_Mem_Read+0x22c>)
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f000 fc13 	bl	8007154 <I2C_TransferConfig>
 800692e:	e00f      	b.n	8006950 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006934:	b29a      	uxth	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800693e:	b2da      	uxtb	r2, r3
 8006940:	8979      	ldrh	r1, [r7, #10]
 8006942:	4b4a      	ldr	r3, [pc, #296]	@ (8006a6c <HAL_I2C_Mem_Read+0x22c>)
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 fc02 	bl	8007154 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006956:	2200      	movs	r2, #0
 8006958:	2104      	movs	r1, #4
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f000 fa5e 	bl	8006e1c <I2C_WaitOnFlagUntilTimeout>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e07c      	b.n	8006a64 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006974:	b2d2      	uxtb	r2, r2
 8006976:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800697c:	1c5a      	adds	r2, r3, #1
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006986:	3b01      	subs	r3, #1
 8006988:	b29a      	uxth	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006992:	b29b      	uxth	r3, r3
 8006994:	3b01      	subs	r3, #1
 8006996:	b29a      	uxth	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d034      	beq.n	8006a10 <HAL_I2C_Mem_Read+0x1d0>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d130      	bne.n	8006a10 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b4:	2200      	movs	r2, #0
 80069b6:	2180      	movs	r1, #128	@ 0x80
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 fa2f 	bl	8006e1c <I2C_WaitOnFlagUntilTimeout>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e04d      	b.n	8006a64 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	2bff      	cmp	r3, #255	@ 0xff
 80069d0:	d90e      	bls.n	80069f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	22ff      	movs	r2, #255	@ 0xff
 80069d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	8979      	ldrh	r1, [r7, #10]
 80069e0:	2300      	movs	r3, #0
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 fbb3 	bl	8007154 <I2C_TransferConfig>
 80069ee:	e00f      	b.n	8006a10 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	8979      	ldrh	r1, [r7, #10]
 8006a02:	2300      	movs	r3, #0
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 fba2 	bl	8007154 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d19a      	bne.n	8006950 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f000 fa7c 	bl	8006f1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e01a      	b.n	8006a64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2220      	movs	r2, #32
 8006a34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6859      	ldr	r1, [r3, #4]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	4b0b      	ldr	r3, [pc, #44]	@ (8006a70 <HAL_I2C_Mem_Read+0x230>)
 8006a42:	400b      	ands	r3, r1
 8006a44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	e000      	b.n	8006a64 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006a62:	2302      	movs	r3, #2
  }
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3718      	adds	r7, #24
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	80002400 	.word	0x80002400
 8006a70:	fe00e800 	.word	0xfe00e800

08006a74 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b08a      	sub	sp, #40	@ 0x28
 8006a78:	af02      	add	r7, sp, #8
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	607a      	str	r2, [r7, #4]
 8006a7e:	603b      	str	r3, [r7, #0]
 8006a80:	460b      	mov	r3, r1
 8006a82:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006a84:	2300      	movs	r3, #0
 8006a86:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b20      	cmp	r3, #32
 8006a92:	f040 80ef 	bne.w	8006c74 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006aa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006aa4:	d101      	bne.n	8006aaa <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e0e5      	b.n	8006c76 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d101      	bne.n	8006ab8 <HAL_I2C_IsDeviceReady+0x44>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	e0de      	b.n	8006c76 <HAL_I2C_IsDeviceReady+0x202>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2224      	movs	r2, #36	@ 0x24
 8006ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d105      	bne.n	8006ae2 <HAL_I2C_IsDeviceReady+0x6e>
 8006ad6:	897b      	ldrh	r3, [r7, #10]
 8006ad8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006adc:	4b68      	ldr	r3, [pc, #416]	@ (8006c80 <HAL_I2C_IsDeviceReady+0x20c>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	e004      	b.n	8006aec <HAL_I2C_IsDeviceReady+0x78>
 8006ae2:	897b      	ldrh	r3, [r7, #10]
 8006ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ae8:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	6812      	ldr	r2, [r2, #0]
 8006af0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006af2:	f7ff f911 	bl	8005d18 <HAL_GetTick>
 8006af6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	f003 0320 	and.w	r3, r3, #32
 8006b02:	2b20      	cmp	r3, #32
 8006b04:	bf0c      	ite	eq
 8006b06:	2301      	moveq	r3, #1
 8006b08:	2300      	movne	r3, #0
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	f003 0310 	and.w	r3, r3, #16
 8006b18:	2b10      	cmp	r3, #16
 8006b1a:	bf0c      	ite	eq
 8006b1c:	2301      	moveq	r3, #1
 8006b1e:	2300      	movne	r3, #0
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006b24:	e034      	b.n	8006b90 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2c:	d01a      	beq.n	8006b64 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b2e:	f7ff f8f3 	bl	8005d18 <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d302      	bcc.n	8006b44 <HAL_I2C_IsDeviceReady+0xd0>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10f      	bne.n	8006b64 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2220      	movs	r2, #32
 8006b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b50:	f043 0220 	orr.w	r2, r3, #32
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e088      	b.n	8006c76 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	f003 0320 	and.w	r3, r3, #32
 8006b6e:	2b20      	cmp	r3, #32
 8006b70:	bf0c      	ite	eq
 8006b72:	2301      	moveq	r3, #1
 8006b74:	2300      	movne	r3, #0
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	f003 0310 	and.w	r3, r3, #16
 8006b84:	2b10      	cmp	r3, #16
 8006b86:	bf0c      	ite	eq
 8006b88:	2301      	moveq	r3, #1
 8006b8a:	2300      	movne	r3, #0
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006b90:	7ffb      	ldrb	r3, [r7, #31]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d102      	bne.n	8006b9c <HAL_I2C_IsDeviceReady+0x128>
 8006b96:	7fbb      	ldrb	r3, [r7, #30]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d0c4      	beq.n	8006b26 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	f003 0310 	and.w	r3, r3, #16
 8006ba6:	2b10      	cmp	r3, #16
 8006ba8:	d01a      	beq.n	8006be0 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	2120      	movs	r1, #32
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 f931 	bl	8006e1c <I2C_WaitOnFlagUntilTimeout>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e058      	b.n	8006c76 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	e04a      	b.n	8006c76 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	2200      	movs	r2, #0
 8006be8:	2120      	movs	r1, #32
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 f916 	bl	8006e1c <I2C_WaitOnFlagUntilTimeout>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e03d      	b.n	8006c76 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2210      	movs	r2, #16
 8006c00:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2220      	movs	r2, #32
 8006c08:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d118      	bne.n	8006c44 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c20:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	2120      	movs	r1, #32
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 f8f5 	bl	8006e1c <I2C_WaitOnFlagUntilTimeout>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e01c      	b.n	8006c76 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2220      	movs	r2, #32
 8006c42:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	3301      	adds	r3, #1
 8006c48:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	f63f af3d 	bhi.w	8006ace <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2220      	movs	r2, #32
 8006c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c60:	f043 0220 	orr.w	r2, r3, #32
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e000      	b.n	8006c76 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8006c74:	2302      	movs	r3, #2
  }
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3720      	adds	r7, #32
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	02002000 	.word	0x02002000

08006c84 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af02      	add	r7, sp, #8
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	4608      	mov	r0, r1
 8006c8e:	4611      	mov	r1, r2
 8006c90:	461a      	mov	r2, r3
 8006c92:	4603      	mov	r3, r0
 8006c94:	817b      	strh	r3, [r7, #10]
 8006c96:	460b      	mov	r3, r1
 8006c98:	813b      	strh	r3, [r7, #8]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006c9e:	88fb      	ldrh	r3, [r7, #6]
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	8979      	ldrh	r1, [r7, #10]
 8006ca4:	4b20      	ldr	r3, [pc, #128]	@ (8006d28 <I2C_RequestMemoryWrite+0xa4>)
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 fa51 	bl	8007154 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cb2:	69fa      	ldr	r2, [r7, #28]
 8006cb4:	69b9      	ldr	r1, [r7, #24]
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f000 f8f0 	bl	8006e9c <I2C_WaitOnTXISFlagUntilTimeout>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e02c      	b.n	8006d20 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cc6:	88fb      	ldrh	r3, [r7, #6]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d105      	bne.n	8006cd8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ccc:	893b      	ldrh	r3, [r7, #8]
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8006cd6:	e015      	b.n	8006d04 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006cd8:	893b      	ldrh	r3, [r7, #8]
 8006cda:	0a1b      	lsrs	r3, r3, #8
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ce6:	69fa      	ldr	r2, [r7, #28]
 8006ce8:	69b9      	ldr	r1, [r7, #24]
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 f8d6 	bl	8006e9c <I2C_WaitOnTXISFlagUntilTimeout>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e012      	b.n	8006d20 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cfa:	893b      	ldrh	r3, [r7, #8]
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2180      	movs	r1, #128	@ 0x80
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 f884 	bl	8006e1c <I2C_WaitOnFlagUntilTimeout>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e000      	b.n	8006d20 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	80002000 	.word	0x80002000

08006d2c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af02      	add	r7, sp, #8
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	4608      	mov	r0, r1
 8006d36:	4611      	mov	r1, r2
 8006d38:	461a      	mov	r2, r3
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	817b      	strh	r3, [r7, #10]
 8006d3e:	460b      	mov	r3, r1
 8006d40:	813b      	strh	r3, [r7, #8]
 8006d42:	4613      	mov	r3, r2
 8006d44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	8979      	ldrh	r1, [r7, #10]
 8006d4c:	4b20      	ldr	r3, [pc, #128]	@ (8006dd0 <I2C_RequestMemoryRead+0xa4>)
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	2300      	movs	r3, #0
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f000 f9fe 	bl	8007154 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d58:	69fa      	ldr	r2, [r7, #28]
 8006d5a:	69b9      	ldr	r1, [r7, #24]
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 f89d 	bl	8006e9c <I2C_WaitOnTXISFlagUntilTimeout>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e02c      	b.n	8006dc6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d6c:	88fb      	ldrh	r3, [r7, #6]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d105      	bne.n	8006d7e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d72:	893b      	ldrh	r3, [r7, #8]
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d7c:	e015      	b.n	8006daa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d7e:	893b      	ldrh	r3, [r7, #8]
 8006d80:	0a1b      	lsrs	r3, r3, #8
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	b2da      	uxtb	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d8c:	69fa      	ldr	r2, [r7, #28]
 8006d8e:	69b9      	ldr	r1, [r7, #24]
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 f883 	bl	8006e9c <I2C_WaitOnTXISFlagUntilTimeout>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e012      	b.n	8006dc6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006da0:	893b      	ldrh	r3, [r7, #8]
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	2200      	movs	r2, #0
 8006db2:	2140      	movs	r1, #64	@ 0x40
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f000 f831 	bl	8006e1c <I2C_WaitOnFlagUntilTimeout>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d001      	beq.n	8006dc4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e000      	b.n	8006dc6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	80002000 	.word	0x80002000

08006dd4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d103      	bne.n	8006df2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2200      	movs	r2, #0
 8006df0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d007      	beq.n	8006e10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	699a      	ldr	r2, [r3, #24]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0201 	orr.w	r2, r2, #1
 8006e0e:	619a      	str	r2, [r3, #24]
  }
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	603b      	str	r3, [r7, #0]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e2c:	e022      	b.n	8006e74 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e34:	d01e      	beq.n	8006e74 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e36:	f7fe ff6f 	bl	8005d18 <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d302      	bcc.n	8006e4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d113      	bne.n	8006e74 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e50:	f043 0220 	orr.w	r2, r3, #32
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e00f      	b.n	8006e94 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	699a      	ldr	r2, [r3, #24]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	bf0c      	ite	eq
 8006e84:	2301      	moveq	r3, #1
 8006e86:	2300      	movne	r3, #0
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	79fb      	ldrb	r3, [r7, #7]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d0cd      	beq.n	8006e2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ea8:	e02c      	b.n	8006f04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	68b9      	ldr	r1, [r7, #8]
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 f870 	bl	8006f94 <I2C_IsErrorOccurred>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e02a      	b.n	8006f14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec4:	d01e      	beq.n	8006f04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ec6:	f7fe ff27 	bl	8005d18 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d302      	bcc.n	8006edc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d113      	bne.n	8006f04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ee0:	f043 0220 	orr.w	r2, r3, #32
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2220      	movs	r2, #32
 8006eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e007      	b.n	8006f14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	f003 0302 	and.w	r3, r3, #2
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d1cb      	bne.n	8006eaa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f28:	e028      	b.n	8006f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	68b9      	ldr	r1, [r7, #8]
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 f830 	bl	8006f94 <I2C_IsErrorOccurred>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e026      	b.n	8006f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f3e:	f7fe feeb 	bl	8005d18 <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d302      	bcc.n	8006f54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d113      	bne.n	8006f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f58:	f043 0220 	orr.w	r2, r3, #32
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2220      	movs	r2, #32
 8006f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e007      	b.n	8006f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	f003 0320 	and.w	r3, r3, #32
 8006f86:	2b20      	cmp	r3, #32
 8006f88:	d1cf      	bne.n	8006f2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b08a      	sub	sp, #40	@ 0x28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	f003 0310 	and.w	r3, r3, #16
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d068      	beq.n	8007092 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2210      	movs	r2, #16
 8006fc6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006fc8:	e049      	b.n	800705e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd0:	d045      	beq.n	800705e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006fd2:	f7fe fea1 	bl	8005d18 <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d302      	bcc.n	8006fe8 <I2C_IsErrorOccurred+0x54>
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d13a      	bne.n	800705e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ff2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ffa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007006:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800700a:	d121      	bne.n	8007050 <I2C_IsErrorOccurred+0xbc>
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007012:	d01d      	beq.n	8007050 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007014:	7cfb      	ldrb	r3, [r7, #19]
 8007016:	2b20      	cmp	r3, #32
 8007018:	d01a      	beq.n	8007050 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007028:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800702a:	f7fe fe75 	bl	8005d18 <HAL_GetTick>
 800702e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007030:	e00e      	b.n	8007050 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007032:	f7fe fe71 	bl	8005d18 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	2b19      	cmp	r3, #25
 800703e:	d907      	bls.n	8007050 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	f043 0320 	orr.w	r3, r3, #32
 8007046:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800704e:	e006      	b.n	800705e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	f003 0320 	and.w	r3, r3, #32
 800705a:	2b20      	cmp	r3, #32
 800705c:	d1e9      	bne.n	8007032 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	f003 0320 	and.w	r3, r3, #32
 8007068:	2b20      	cmp	r3, #32
 800706a:	d003      	beq.n	8007074 <I2C_IsErrorOccurred+0xe0>
 800706c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007070:	2b00      	cmp	r3, #0
 8007072:	d0aa      	beq.n	8006fca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007074:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007078:	2b00      	cmp	r3, #0
 800707a:	d103      	bne.n	8007084 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2220      	movs	r2, #32
 8007082:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	f043 0304 	orr.w	r3, r3, #4
 800708a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00b      	beq.n	80070bc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	f043 0301 	orr.w	r3, r3, #1
 80070aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80070b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00b      	beq.n	80070de <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	f043 0308 	orr.w	r3, r3, #8
 80070cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80070d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00b      	beq.n	8007100 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	f043 0302 	orr.w	r3, r3, #2
 80070ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007100:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007104:	2b00      	cmp	r3, #0
 8007106:	d01c      	beq.n	8007142 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f7ff fe63 	bl	8006dd4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6859      	ldr	r1, [r3, #4]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	4b0d      	ldr	r3, [pc, #52]	@ (8007150 <I2C_IsErrorOccurred+0x1bc>)
 800711a:	400b      	ands	r3, r1
 800711c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007122:	6a3b      	ldr	r3, [r7, #32]
 8007124:	431a      	orrs	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2220      	movs	r2, #32
 800712e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007142:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007146:	4618      	mov	r0, r3
 8007148:	3728      	adds	r7, #40	@ 0x28
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	fe00e800 	.word	0xfe00e800

08007154 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007154:	b480      	push	{r7}
 8007156:	b087      	sub	sp, #28
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	607b      	str	r3, [r7, #4]
 800715e:	460b      	mov	r3, r1
 8007160:	817b      	strh	r3, [r7, #10]
 8007162:	4613      	mov	r3, r2
 8007164:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007166:	897b      	ldrh	r3, [r7, #10]
 8007168:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800716c:	7a7b      	ldrb	r3, [r7, #9]
 800716e:	041b      	lsls	r3, r3, #16
 8007170:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007174:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	4313      	orrs	r3, r2
 800717e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007182:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	0d5b      	lsrs	r3, r3, #21
 800718e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007192:	4b08      	ldr	r3, [pc, #32]	@ (80071b4 <I2C_TransferConfig+0x60>)
 8007194:	430b      	orrs	r3, r1
 8007196:	43db      	mvns	r3, r3
 8007198:	ea02 0103 	and.w	r1, r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	430a      	orrs	r2, r1
 80071a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80071a6:	bf00      	nop
 80071a8:	371c      	adds	r7, #28
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	03ff63ff 	.word	0x03ff63ff

080071b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	2b20      	cmp	r3, #32
 80071cc:	d138      	bne.n	8007240 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d101      	bne.n	80071dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80071d8:	2302      	movs	r3, #2
 80071da:	e032      	b.n	8007242 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2224      	movs	r2, #36	@ 0x24
 80071e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 0201 	bic.w	r2, r2, #1
 80071fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800720a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6819      	ldr	r1, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0201 	orr.w	r2, r2, #1
 800722a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2220      	movs	r2, #32
 8007230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800723c:	2300      	movs	r3, #0
 800723e:	e000      	b.n	8007242 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007240:	2302      	movs	r3, #2
  }
}
 8007242:	4618      	mov	r0, r3
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800724e:	b480      	push	{r7}
 8007250:	b085      	sub	sp, #20
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b20      	cmp	r3, #32
 8007262:	d139      	bne.n	80072d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800726a:	2b01      	cmp	r3, #1
 800726c:	d101      	bne.n	8007272 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800726e:	2302      	movs	r3, #2
 8007270:	e033      	b.n	80072da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2224      	movs	r2, #36	@ 0x24
 800727e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 0201 	bic.w	r2, r2, #1
 8007290:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80072a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	021b      	lsls	r3, r3, #8
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f042 0201 	orr.w	r2, r2, #1
 80072c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2220      	movs	r2, #32
 80072c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	e000      	b.n	80072da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80072d8:	2302      	movs	r3, #2
  }
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
	...

080072e8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80072e8:	b480      	push	{r7}
 80072ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072ec:	4b05      	ldr	r3, [pc, #20]	@ (8007304 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a04      	ldr	r2, [pc, #16]	@ (8007304 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80072f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072f6:	6013      	str	r3, [r2, #0]
}
 80072f8:	bf00      	nop
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	40007000 	.word	0x40007000

08007308 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007310:	2300      	movs	r3, #0
 8007312:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e291      	b.n	8007842 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 8087 	beq.w	800743a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800732c:	4b96      	ldr	r3, [pc, #600]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f003 030c 	and.w	r3, r3, #12
 8007334:	2b04      	cmp	r3, #4
 8007336:	d00c      	beq.n	8007352 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007338:	4b93      	ldr	r3, [pc, #588]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f003 030c 	and.w	r3, r3, #12
 8007340:	2b08      	cmp	r3, #8
 8007342:	d112      	bne.n	800736a <HAL_RCC_OscConfig+0x62>
 8007344:	4b90      	ldr	r3, [pc, #576]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800734c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007350:	d10b      	bne.n	800736a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007352:	4b8d      	ldr	r3, [pc, #564]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d06c      	beq.n	8007438 <HAL_RCC_OscConfig+0x130>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d168      	bne.n	8007438 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e26b      	b.n	8007842 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007372:	d106      	bne.n	8007382 <HAL_RCC_OscConfig+0x7a>
 8007374:	4b84      	ldr	r3, [pc, #528]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a83      	ldr	r2, [pc, #524]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 800737a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800737e:	6013      	str	r3, [r2, #0]
 8007380:	e02e      	b.n	80073e0 <HAL_RCC_OscConfig+0xd8>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10c      	bne.n	80073a4 <HAL_RCC_OscConfig+0x9c>
 800738a:	4b7f      	ldr	r3, [pc, #508]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a7e      	ldr	r2, [pc, #504]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 8007390:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007394:	6013      	str	r3, [r2, #0]
 8007396:	4b7c      	ldr	r3, [pc, #496]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a7b      	ldr	r2, [pc, #492]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 800739c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80073a0:	6013      	str	r3, [r2, #0]
 80073a2:	e01d      	b.n	80073e0 <HAL_RCC_OscConfig+0xd8>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073ac:	d10c      	bne.n	80073c8 <HAL_RCC_OscConfig+0xc0>
 80073ae:	4b76      	ldr	r3, [pc, #472]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a75      	ldr	r2, [pc, #468]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 80073b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80073b8:	6013      	str	r3, [r2, #0]
 80073ba:	4b73      	ldr	r3, [pc, #460]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a72      	ldr	r2, [pc, #456]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 80073c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073c4:	6013      	str	r3, [r2, #0]
 80073c6:	e00b      	b.n	80073e0 <HAL_RCC_OscConfig+0xd8>
 80073c8:	4b6f      	ldr	r3, [pc, #444]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a6e      	ldr	r2, [pc, #440]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 80073ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073d2:	6013      	str	r3, [r2, #0]
 80073d4:	4b6c      	ldr	r3, [pc, #432]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a6b      	ldr	r2, [pc, #428]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 80073da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80073de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d013      	beq.n	8007410 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e8:	f7fe fc96 	bl	8005d18 <HAL_GetTick>
 80073ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ee:	e008      	b.n	8007402 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073f0:	f7fe fc92 	bl	8005d18 <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	2b64      	cmp	r3, #100	@ 0x64
 80073fc:	d901      	bls.n	8007402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e21f      	b.n	8007842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007402:	4b61      	ldr	r3, [pc, #388]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d0f0      	beq.n	80073f0 <HAL_RCC_OscConfig+0xe8>
 800740e:	e014      	b.n	800743a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007410:	f7fe fc82 	bl	8005d18 <HAL_GetTick>
 8007414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007416:	e008      	b.n	800742a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007418:	f7fe fc7e 	bl	8005d18 <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	2b64      	cmp	r3, #100	@ 0x64
 8007424:	d901      	bls.n	800742a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e20b      	b.n	8007842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800742a:	4b57      	ldr	r3, [pc, #348]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1f0      	bne.n	8007418 <HAL_RCC_OscConfig+0x110>
 8007436:	e000      	b.n	800743a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0302 	and.w	r3, r3, #2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d069      	beq.n	800751a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007446:	4b50      	ldr	r3, [pc, #320]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f003 030c 	and.w	r3, r3, #12
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00b      	beq.n	800746a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007452:	4b4d      	ldr	r3, [pc, #308]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f003 030c 	and.w	r3, r3, #12
 800745a:	2b08      	cmp	r3, #8
 800745c:	d11c      	bne.n	8007498 <HAL_RCC_OscConfig+0x190>
 800745e:	4b4a      	ldr	r3, [pc, #296]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d116      	bne.n	8007498 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800746a:	4b47      	ldr	r3, [pc, #284]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 0302 	and.w	r3, r3, #2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d005      	beq.n	8007482 <HAL_RCC_OscConfig+0x17a>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d001      	beq.n	8007482 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e1df      	b.n	8007842 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007482:	4b41      	ldr	r3, [pc, #260]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	00db      	lsls	r3, r3, #3
 8007490:	493d      	ldr	r1, [pc, #244]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 8007492:	4313      	orrs	r3, r2
 8007494:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007496:	e040      	b.n	800751a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d023      	beq.n	80074e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074a0:	4b39      	ldr	r3, [pc, #228]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a38      	ldr	r2, [pc, #224]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 80074a6:	f043 0301 	orr.w	r3, r3, #1
 80074aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ac:	f7fe fc34 	bl	8005d18 <HAL_GetTick>
 80074b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074b2:	e008      	b.n	80074c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074b4:	f7fe fc30 	bl	8005d18 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d901      	bls.n	80074c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e1bd      	b.n	8007842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074c6:	4b30      	ldr	r3, [pc, #192]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0302 	and.w	r3, r3, #2
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d0f0      	beq.n	80074b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074d2:	4b2d      	ldr	r3, [pc, #180]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	00db      	lsls	r3, r3, #3
 80074e0:	4929      	ldr	r1, [pc, #164]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	600b      	str	r3, [r1, #0]
 80074e6:	e018      	b.n	800751a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074e8:	4b27      	ldr	r3, [pc, #156]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a26      	ldr	r2, [pc, #152]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 80074ee:	f023 0301 	bic.w	r3, r3, #1
 80074f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f4:	f7fe fc10 	bl	8005d18 <HAL_GetTick>
 80074f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074fa:	e008      	b.n	800750e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074fc:	f7fe fc0c 	bl	8005d18 <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	2b02      	cmp	r3, #2
 8007508:	d901      	bls.n	800750e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e199      	b.n	8007842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800750e:	4b1e      	ldr	r3, [pc, #120]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0302 	and.w	r3, r3, #2
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1f0      	bne.n	80074fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0308 	and.w	r3, r3, #8
 8007522:	2b00      	cmp	r3, #0
 8007524:	d038      	beq.n	8007598 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d019      	beq.n	8007562 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800752e:	4b16      	ldr	r3, [pc, #88]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 8007530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007532:	4a15      	ldr	r2, [pc, #84]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 8007534:	f043 0301 	orr.w	r3, r3, #1
 8007538:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800753a:	f7fe fbed 	bl	8005d18 <HAL_GetTick>
 800753e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007540:	e008      	b.n	8007554 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007542:	f7fe fbe9 	bl	8005d18 <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	2b02      	cmp	r3, #2
 800754e:	d901      	bls.n	8007554 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e176      	b.n	8007842 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007554:	4b0c      	ldr	r3, [pc, #48]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 8007556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007558:	f003 0302 	and.w	r3, r3, #2
 800755c:	2b00      	cmp	r3, #0
 800755e:	d0f0      	beq.n	8007542 <HAL_RCC_OscConfig+0x23a>
 8007560:	e01a      	b.n	8007598 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007562:	4b09      	ldr	r3, [pc, #36]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 8007564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007566:	4a08      	ldr	r2, [pc, #32]	@ (8007588 <HAL_RCC_OscConfig+0x280>)
 8007568:	f023 0301 	bic.w	r3, r3, #1
 800756c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800756e:	f7fe fbd3 	bl	8005d18 <HAL_GetTick>
 8007572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007574:	e00a      	b.n	800758c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007576:	f7fe fbcf 	bl	8005d18 <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	2b02      	cmp	r3, #2
 8007582:	d903      	bls.n	800758c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e15c      	b.n	8007842 <HAL_RCC_OscConfig+0x53a>
 8007588:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800758c:	4b91      	ldr	r3, [pc, #580]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 800758e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007590:	f003 0302 	and.w	r3, r3, #2
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1ee      	bne.n	8007576 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0304 	and.w	r3, r3, #4
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 80a4 	beq.w	80076ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075a6:	4b8b      	ldr	r3, [pc, #556]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 80075a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10d      	bne.n	80075ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80075b2:	4b88      	ldr	r3, [pc, #544]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 80075b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b6:	4a87      	ldr	r2, [pc, #540]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 80075b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80075be:	4b85      	ldr	r3, [pc, #532]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 80075c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075c6:	60bb      	str	r3, [r7, #8]
 80075c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075ca:	2301      	movs	r3, #1
 80075cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075ce:	4b82      	ldr	r3, [pc, #520]	@ (80077d8 <HAL_RCC_OscConfig+0x4d0>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d118      	bne.n	800760c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80075da:	4b7f      	ldr	r3, [pc, #508]	@ (80077d8 <HAL_RCC_OscConfig+0x4d0>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a7e      	ldr	r2, [pc, #504]	@ (80077d8 <HAL_RCC_OscConfig+0x4d0>)
 80075e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075e6:	f7fe fb97 	bl	8005d18 <HAL_GetTick>
 80075ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075ec:	e008      	b.n	8007600 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075ee:	f7fe fb93 	bl	8005d18 <HAL_GetTick>
 80075f2:	4602      	mov	r2, r0
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	2b64      	cmp	r3, #100	@ 0x64
 80075fa:	d901      	bls.n	8007600 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e120      	b.n	8007842 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007600:	4b75      	ldr	r3, [pc, #468]	@ (80077d8 <HAL_RCC_OscConfig+0x4d0>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007608:	2b00      	cmp	r3, #0
 800760a:	d0f0      	beq.n	80075ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d106      	bne.n	8007622 <HAL_RCC_OscConfig+0x31a>
 8007614:	4b6f      	ldr	r3, [pc, #444]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 8007616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007618:	4a6e      	ldr	r2, [pc, #440]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 800761a:	f043 0301 	orr.w	r3, r3, #1
 800761e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007620:	e02d      	b.n	800767e <HAL_RCC_OscConfig+0x376>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10c      	bne.n	8007644 <HAL_RCC_OscConfig+0x33c>
 800762a:	4b6a      	ldr	r3, [pc, #424]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 800762c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800762e:	4a69      	ldr	r2, [pc, #420]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 8007630:	f023 0301 	bic.w	r3, r3, #1
 8007634:	6713      	str	r3, [r2, #112]	@ 0x70
 8007636:	4b67      	ldr	r3, [pc, #412]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 8007638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800763a:	4a66      	ldr	r2, [pc, #408]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 800763c:	f023 0304 	bic.w	r3, r3, #4
 8007640:	6713      	str	r3, [r2, #112]	@ 0x70
 8007642:	e01c      	b.n	800767e <HAL_RCC_OscConfig+0x376>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	2b05      	cmp	r3, #5
 800764a:	d10c      	bne.n	8007666 <HAL_RCC_OscConfig+0x35e>
 800764c:	4b61      	ldr	r3, [pc, #388]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 800764e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007650:	4a60      	ldr	r2, [pc, #384]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 8007652:	f043 0304 	orr.w	r3, r3, #4
 8007656:	6713      	str	r3, [r2, #112]	@ 0x70
 8007658:	4b5e      	ldr	r3, [pc, #376]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 800765a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800765c:	4a5d      	ldr	r2, [pc, #372]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 800765e:	f043 0301 	orr.w	r3, r3, #1
 8007662:	6713      	str	r3, [r2, #112]	@ 0x70
 8007664:	e00b      	b.n	800767e <HAL_RCC_OscConfig+0x376>
 8007666:	4b5b      	ldr	r3, [pc, #364]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 8007668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800766a:	4a5a      	ldr	r2, [pc, #360]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 800766c:	f023 0301 	bic.w	r3, r3, #1
 8007670:	6713      	str	r3, [r2, #112]	@ 0x70
 8007672:	4b58      	ldr	r3, [pc, #352]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 8007674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007676:	4a57      	ldr	r2, [pc, #348]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 8007678:	f023 0304 	bic.w	r3, r3, #4
 800767c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d015      	beq.n	80076b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007686:	f7fe fb47 	bl	8005d18 <HAL_GetTick>
 800768a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800768c:	e00a      	b.n	80076a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800768e:	f7fe fb43 	bl	8005d18 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	f241 3288 	movw	r2, #5000	@ 0x1388
 800769c:	4293      	cmp	r3, r2
 800769e:	d901      	bls.n	80076a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e0ce      	b.n	8007842 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076a4:	4b4b      	ldr	r3, [pc, #300]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 80076a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076a8:	f003 0302 	and.w	r3, r3, #2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d0ee      	beq.n	800768e <HAL_RCC_OscConfig+0x386>
 80076b0:	e014      	b.n	80076dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076b2:	f7fe fb31 	bl	8005d18 <HAL_GetTick>
 80076b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076b8:	e00a      	b.n	80076d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076ba:	f7fe fb2d 	bl	8005d18 <HAL_GetTick>
 80076be:	4602      	mov	r2, r0
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d901      	bls.n	80076d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e0b8      	b.n	8007842 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076d0:	4b40      	ldr	r3, [pc, #256]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 80076d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076d4:	f003 0302 	and.w	r3, r3, #2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1ee      	bne.n	80076ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80076dc:	7dfb      	ldrb	r3, [r7, #23]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d105      	bne.n	80076ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076e2:	4b3c      	ldr	r3, [pc, #240]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 80076e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e6:	4a3b      	ldr	r2, [pc, #236]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 80076e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076ec:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f000 80a4 	beq.w	8007840 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80076f8:	4b36      	ldr	r3, [pc, #216]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f003 030c 	and.w	r3, r3, #12
 8007700:	2b08      	cmp	r3, #8
 8007702:	d06b      	beq.n	80077dc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	2b02      	cmp	r3, #2
 800770a:	d149      	bne.n	80077a0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800770c:	4b31      	ldr	r3, [pc, #196]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a30      	ldr	r2, [pc, #192]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 8007712:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007718:	f7fe fafe 	bl	8005d18 <HAL_GetTick>
 800771c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800771e:	e008      	b.n	8007732 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007720:	f7fe fafa 	bl	8005d18 <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	2b02      	cmp	r3, #2
 800772c:	d901      	bls.n	8007732 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e087      	b.n	8007842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007732:	4b28      	ldr	r3, [pc, #160]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1f0      	bne.n	8007720 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	69da      	ldr	r2, [r3, #28]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	431a      	orrs	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800774c:	019b      	lsls	r3, r3, #6
 800774e:	431a      	orrs	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007754:	085b      	lsrs	r3, r3, #1
 8007756:	3b01      	subs	r3, #1
 8007758:	041b      	lsls	r3, r3, #16
 800775a:	431a      	orrs	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007760:	061b      	lsls	r3, r3, #24
 8007762:	4313      	orrs	r3, r2
 8007764:	4a1b      	ldr	r2, [pc, #108]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 8007766:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800776a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800776c:	4b19      	ldr	r3, [pc, #100]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a18      	ldr	r2, [pc, #96]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 8007772:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007778:	f7fe face 	bl	8005d18 <HAL_GetTick>
 800777c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800777e:	e008      	b.n	8007792 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007780:	f7fe faca 	bl	8005d18 <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	2b02      	cmp	r3, #2
 800778c:	d901      	bls.n	8007792 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e057      	b.n	8007842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007792:	4b10      	ldr	r3, [pc, #64]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0f0      	beq.n	8007780 <HAL_RCC_OscConfig+0x478>
 800779e:	e04f      	b.n	8007840 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077a0:	4b0c      	ldr	r3, [pc, #48]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a0b      	ldr	r2, [pc, #44]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 80077a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80077aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ac:	f7fe fab4 	bl	8005d18 <HAL_GetTick>
 80077b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077b2:	e008      	b.n	80077c6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077b4:	f7fe fab0 	bl	8005d18 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d901      	bls.n	80077c6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e03d      	b.n	8007842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077c6:	4b03      	ldr	r3, [pc, #12]	@ (80077d4 <HAL_RCC_OscConfig+0x4cc>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1f0      	bne.n	80077b4 <HAL_RCC_OscConfig+0x4ac>
 80077d2:	e035      	b.n	8007840 <HAL_RCC_OscConfig+0x538>
 80077d4:	40023800 	.word	0x40023800
 80077d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80077dc:	4b1b      	ldr	r3, [pc, #108]	@ (800784c <HAL_RCC_OscConfig+0x544>)
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d028      	beq.n	800783c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d121      	bne.n	800783c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007802:	429a      	cmp	r2, r3
 8007804:	d11a      	bne.n	800783c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800780c:	4013      	ands	r3, r2
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007812:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007814:	4293      	cmp	r3, r2
 8007816:	d111      	bne.n	800783c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007822:	085b      	lsrs	r3, r3, #1
 8007824:	3b01      	subs	r3, #1
 8007826:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007828:	429a      	cmp	r2, r3
 800782a:	d107      	bne.n	800783c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007836:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007838:	429a      	cmp	r2, r3
 800783a:	d001      	beq.n	8007840 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e000      	b.n	8007842 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3718      	adds	r7, #24
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	40023800 	.word	0x40023800

08007850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800785a:	2300      	movs	r3, #0
 800785c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d101      	bne.n	8007868 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e0d0      	b.n	8007a0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007868:	4b6a      	ldr	r3, [pc, #424]	@ (8007a14 <HAL_RCC_ClockConfig+0x1c4>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 030f 	and.w	r3, r3, #15
 8007870:	683a      	ldr	r2, [r7, #0]
 8007872:	429a      	cmp	r2, r3
 8007874:	d910      	bls.n	8007898 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007876:	4b67      	ldr	r3, [pc, #412]	@ (8007a14 <HAL_RCC_ClockConfig+0x1c4>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f023 020f 	bic.w	r2, r3, #15
 800787e:	4965      	ldr	r1, [pc, #404]	@ (8007a14 <HAL_RCC_ClockConfig+0x1c4>)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	4313      	orrs	r3, r2
 8007884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007886:	4b63      	ldr	r3, [pc, #396]	@ (8007a14 <HAL_RCC_ClockConfig+0x1c4>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 030f 	and.w	r3, r3, #15
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	429a      	cmp	r2, r3
 8007892:	d001      	beq.n	8007898 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e0b8      	b.n	8007a0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0302 	and.w	r3, r3, #2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d020      	beq.n	80078e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0304 	and.w	r3, r3, #4
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d005      	beq.n	80078bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078b0:	4b59      	ldr	r3, [pc, #356]	@ (8007a18 <HAL_RCC_ClockConfig+0x1c8>)
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	4a58      	ldr	r2, [pc, #352]	@ (8007a18 <HAL_RCC_ClockConfig+0x1c8>)
 80078b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80078ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0308 	and.w	r3, r3, #8
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d005      	beq.n	80078d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078c8:	4b53      	ldr	r3, [pc, #332]	@ (8007a18 <HAL_RCC_ClockConfig+0x1c8>)
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	4a52      	ldr	r2, [pc, #328]	@ (8007a18 <HAL_RCC_ClockConfig+0x1c8>)
 80078ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80078d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078d4:	4b50      	ldr	r3, [pc, #320]	@ (8007a18 <HAL_RCC_ClockConfig+0x1c8>)
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	494d      	ldr	r1, [pc, #308]	@ (8007a18 <HAL_RCC_ClockConfig+0x1c8>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d040      	beq.n	8007974 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d107      	bne.n	800790a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078fa:	4b47      	ldr	r3, [pc, #284]	@ (8007a18 <HAL_RCC_ClockConfig+0x1c8>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d115      	bne.n	8007932 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e07f      	b.n	8007a0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	2b02      	cmp	r3, #2
 8007910:	d107      	bne.n	8007922 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007912:	4b41      	ldr	r3, [pc, #260]	@ (8007a18 <HAL_RCC_ClockConfig+0x1c8>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d109      	bne.n	8007932 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e073      	b.n	8007a0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007922:	4b3d      	ldr	r3, [pc, #244]	@ (8007a18 <HAL_RCC_ClockConfig+0x1c8>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0302 	and.w	r3, r3, #2
 800792a:	2b00      	cmp	r3, #0
 800792c:	d101      	bne.n	8007932 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e06b      	b.n	8007a0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007932:	4b39      	ldr	r3, [pc, #228]	@ (8007a18 <HAL_RCC_ClockConfig+0x1c8>)
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f023 0203 	bic.w	r2, r3, #3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	4936      	ldr	r1, [pc, #216]	@ (8007a18 <HAL_RCC_ClockConfig+0x1c8>)
 8007940:	4313      	orrs	r3, r2
 8007942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007944:	f7fe f9e8 	bl	8005d18 <HAL_GetTick>
 8007948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800794a:	e00a      	b.n	8007962 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800794c:	f7fe f9e4 	bl	8005d18 <HAL_GetTick>
 8007950:	4602      	mov	r2, r0
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800795a:	4293      	cmp	r3, r2
 800795c:	d901      	bls.n	8007962 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e053      	b.n	8007a0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007962:	4b2d      	ldr	r3, [pc, #180]	@ (8007a18 <HAL_RCC_ClockConfig+0x1c8>)
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f003 020c 	and.w	r2, r3, #12
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	429a      	cmp	r2, r3
 8007972:	d1eb      	bne.n	800794c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007974:	4b27      	ldr	r3, [pc, #156]	@ (8007a14 <HAL_RCC_ClockConfig+0x1c4>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 030f 	and.w	r3, r3, #15
 800797c:	683a      	ldr	r2, [r7, #0]
 800797e:	429a      	cmp	r2, r3
 8007980:	d210      	bcs.n	80079a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007982:	4b24      	ldr	r3, [pc, #144]	@ (8007a14 <HAL_RCC_ClockConfig+0x1c4>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f023 020f 	bic.w	r2, r3, #15
 800798a:	4922      	ldr	r1, [pc, #136]	@ (8007a14 <HAL_RCC_ClockConfig+0x1c4>)
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	4313      	orrs	r3, r2
 8007990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007992:	4b20      	ldr	r3, [pc, #128]	@ (8007a14 <HAL_RCC_ClockConfig+0x1c4>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 030f 	and.w	r3, r3, #15
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	429a      	cmp	r2, r3
 800799e:	d001      	beq.n	80079a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e032      	b.n	8007a0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0304 	and.w	r3, r3, #4
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d008      	beq.n	80079c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079b0:	4b19      	ldr	r3, [pc, #100]	@ (8007a18 <HAL_RCC_ClockConfig+0x1c8>)
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	4916      	ldr	r1, [pc, #88]	@ (8007a18 <HAL_RCC_ClockConfig+0x1c8>)
 80079be:	4313      	orrs	r3, r2
 80079c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 0308 	and.w	r3, r3, #8
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d009      	beq.n	80079e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80079ce:	4b12      	ldr	r3, [pc, #72]	@ (8007a18 <HAL_RCC_ClockConfig+0x1c8>)
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	00db      	lsls	r3, r3, #3
 80079dc:	490e      	ldr	r1, [pc, #56]	@ (8007a18 <HAL_RCC_ClockConfig+0x1c8>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80079e2:	f000 f821 	bl	8007a28 <HAL_RCC_GetSysClockFreq>
 80079e6:	4602      	mov	r2, r0
 80079e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007a18 <HAL_RCC_ClockConfig+0x1c8>)
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	091b      	lsrs	r3, r3, #4
 80079ee:	f003 030f 	and.w	r3, r3, #15
 80079f2:	490a      	ldr	r1, [pc, #40]	@ (8007a1c <HAL_RCC_ClockConfig+0x1cc>)
 80079f4:	5ccb      	ldrb	r3, [r1, r3]
 80079f6:	fa22 f303 	lsr.w	r3, r2, r3
 80079fa:	4a09      	ldr	r2, [pc, #36]	@ (8007a20 <HAL_RCC_ClockConfig+0x1d0>)
 80079fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80079fe:	4b09      	ldr	r3, [pc, #36]	@ (8007a24 <HAL_RCC_ClockConfig+0x1d4>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7fe f944 	bl	8005c90 <HAL_InitTick>

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	40023c00 	.word	0x40023c00
 8007a18:	40023800 	.word	0x40023800
 8007a1c:	0800d00c 	.word	0x0800d00c
 8007a20:	20000158 	.word	0x20000158
 8007a24:	2000015c 	.word	0x2000015c

08007a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a2c:	b094      	sub	sp, #80	@ 0x50
 8007a2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007a30:	2300      	movs	r3, #0
 8007a32:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a34:	2300      	movs	r3, #0
 8007a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a38:	2300      	movs	r3, #0
 8007a3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a40:	4b79      	ldr	r3, [pc, #484]	@ (8007c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f003 030c 	and.w	r3, r3, #12
 8007a48:	2b08      	cmp	r3, #8
 8007a4a:	d00d      	beq.n	8007a68 <HAL_RCC_GetSysClockFreq+0x40>
 8007a4c:	2b08      	cmp	r3, #8
 8007a4e:	f200 80e1 	bhi.w	8007c14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <HAL_RCC_GetSysClockFreq+0x34>
 8007a56:	2b04      	cmp	r3, #4
 8007a58:	d003      	beq.n	8007a62 <HAL_RCC_GetSysClockFreq+0x3a>
 8007a5a:	e0db      	b.n	8007c14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a5c:	4b73      	ldr	r3, [pc, #460]	@ (8007c2c <HAL_RCC_GetSysClockFreq+0x204>)
 8007a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007a60:	e0db      	b.n	8007c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a62:	4b73      	ldr	r3, [pc, #460]	@ (8007c30 <HAL_RCC_GetSysClockFreq+0x208>)
 8007a64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007a66:	e0d8      	b.n	8007c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a68:	4b6f      	ldr	r3, [pc, #444]	@ (8007c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a70:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007a72:	4b6d      	ldr	r3, [pc, #436]	@ (8007c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d063      	beq.n	8007b46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a7e:	4b6a      	ldr	r3, [pc, #424]	@ (8007c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	099b      	lsrs	r3, r3, #6
 8007a84:	2200      	movs	r2, #0
 8007a86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a90:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a92:	2300      	movs	r3, #0
 8007a94:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007a9a:	4622      	mov	r2, r4
 8007a9c:	462b      	mov	r3, r5
 8007a9e:	f04f 0000 	mov.w	r0, #0
 8007aa2:	f04f 0100 	mov.w	r1, #0
 8007aa6:	0159      	lsls	r1, r3, #5
 8007aa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007aac:	0150      	lsls	r0, r2, #5
 8007aae:	4602      	mov	r2, r0
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	4621      	mov	r1, r4
 8007ab4:	1a51      	subs	r1, r2, r1
 8007ab6:	6139      	str	r1, [r7, #16]
 8007ab8:	4629      	mov	r1, r5
 8007aba:	eb63 0301 	sbc.w	r3, r3, r1
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	f04f 0200 	mov.w	r2, #0
 8007ac4:	f04f 0300 	mov.w	r3, #0
 8007ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007acc:	4659      	mov	r1, fp
 8007ace:	018b      	lsls	r3, r1, #6
 8007ad0:	4651      	mov	r1, sl
 8007ad2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007ad6:	4651      	mov	r1, sl
 8007ad8:	018a      	lsls	r2, r1, #6
 8007ada:	4651      	mov	r1, sl
 8007adc:	ebb2 0801 	subs.w	r8, r2, r1
 8007ae0:	4659      	mov	r1, fp
 8007ae2:	eb63 0901 	sbc.w	r9, r3, r1
 8007ae6:	f04f 0200 	mov.w	r2, #0
 8007aea:	f04f 0300 	mov.w	r3, #0
 8007aee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007af2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007af6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007afa:	4690      	mov	r8, r2
 8007afc:	4699      	mov	r9, r3
 8007afe:	4623      	mov	r3, r4
 8007b00:	eb18 0303 	adds.w	r3, r8, r3
 8007b04:	60bb      	str	r3, [r7, #8]
 8007b06:	462b      	mov	r3, r5
 8007b08:	eb49 0303 	adc.w	r3, r9, r3
 8007b0c:	60fb      	str	r3, [r7, #12]
 8007b0e:	f04f 0200 	mov.w	r2, #0
 8007b12:	f04f 0300 	mov.w	r3, #0
 8007b16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	024b      	lsls	r3, r1, #9
 8007b1e:	4621      	mov	r1, r4
 8007b20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007b24:	4621      	mov	r1, r4
 8007b26:	024a      	lsls	r2, r1, #9
 8007b28:	4610      	mov	r0, r2
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b2e:	2200      	movs	r2, #0
 8007b30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007b38:	f7f9 f8c0 	bl	8000cbc <__aeabi_uldivmod>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4613      	mov	r3, r2
 8007b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b44:	e058      	b.n	8007bf8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b46:	4b38      	ldr	r3, [pc, #224]	@ (8007c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	099b      	lsrs	r3, r3, #6
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	4618      	mov	r0, r3
 8007b50:	4611      	mov	r1, r2
 8007b52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007b56:	623b      	str	r3, [r7, #32]
 8007b58:	2300      	movs	r3, #0
 8007b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007b60:	4642      	mov	r2, r8
 8007b62:	464b      	mov	r3, r9
 8007b64:	f04f 0000 	mov.w	r0, #0
 8007b68:	f04f 0100 	mov.w	r1, #0
 8007b6c:	0159      	lsls	r1, r3, #5
 8007b6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b72:	0150      	lsls	r0, r2, #5
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	4641      	mov	r1, r8
 8007b7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8007b7e:	4649      	mov	r1, r9
 8007b80:	eb63 0b01 	sbc.w	fp, r3, r1
 8007b84:	f04f 0200 	mov.w	r2, #0
 8007b88:	f04f 0300 	mov.w	r3, #0
 8007b8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007b90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007b94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007b98:	ebb2 040a 	subs.w	r4, r2, sl
 8007b9c:	eb63 050b 	sbc.w	r5, r3, fp
 8007ba0:	f04f 0200 	mov.w	r2, #0
 8007ba4:	f04f 0300 	mov.w	r3, #0
 8007ba8:	00eb      	lsls	r3, r5, #3
 8007baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bae:	00e2      	lsls	r2, r4, #3
 8007bb0:	4614      	mov	r4, r2
 8007bb2:	461d      	mov	r5, r3
 8007bb4:	4643      	mov	r3, r8
 8007bb6:	18e3      	adds	r3, r4, r3
 8007bb8:	603b      	str	r3, [r7, #0]
 8007bba:	464b      	mov	r3, r9
 8007bbc:	eb45 0303 	adc.w	r3, r5, r3
 8007bc0:	607b      	str	r3, [r7, #4]
 8007bc2:	f04f 0200 	mov.w	r2, #0
 8007bc6:	f04f 0300 	mov.w	r3, #0
 8007bca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007bce:	4629      	mov	r1, r5
 8007bd0:	028b      	lsls	r3, r1, #10
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007bd8:	4621      	mov	r1, r4
 8007bda:	028a      	lsls	r2, r1, #10
 8007bdc:	4610      	mov	r0, r2
 8007bde:	4619      	mov	r1, r3
 8007be0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007be2:	2200      	movs	r2, #0
 8007be4:	61bb      	str	r3, [r7, #24]
 8007be6:	61fa      	str	r2, [r7, #28]
 8007be8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bec:	f7f9 f866 	bl	8000cbc <__aeabi_uldivmod>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8007c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	0c1b      	lsrs	r3, r3, #16
 8007bfe:	f003 0303 	and.w	r3, r3, #3
 8007c02:	3301      	adds	r3, #1
 8007c04:	005b      	lsls	r3, r3, #1
 8007c06:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007c08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007c0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007c12:	e002      	b.n	8007c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c14:	4b05      	ldr	r3, [pc, #20]	@ (8007c2c <HAL_RCC_GetSysClockFreq+0x204>)
 8007c16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3750      	adds	r7, #80	@ 0x50
 8007c20:	46bd      	mov	sp, r7
 8007c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c26:	bf00      	nop
 8007c28:	40023800 	.word	0x40023800
 8007c2c:	00f42400 	.word	0x00f42400
 8007c30:	007a1200 	.word	0x007a1200

08007c34 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c34:	b480      	push	{r7}
 8007c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c38:	4b03      	ldr	r3, [pc, #12]	@ (8007c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	20000158 	.word	0x20000158

08007c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007c50:	f7ff fff0 	bl	8007c34 <HAL_RCC_GetHCLKFreq>
 8007c54:	4602      	mov	r2, r0
 8007c56:	4b05      	ldr	r3, [pc, #20]	@ (8007c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	0a9b      	lsrs	r3, r3, #10
 8007c5c:	f003 0307 	and.w	r3, r3, #7
 8007c60:	4903      	ldr	r1, [pc, #12]	@ (8007c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c62:	5ccb      	ldrb	r3, [r1, r3]
 8007c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	40023800 	.word	0x40023800
 8007c70:	0800d01c 	.word	0x0800d01c

08007c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007c78:	f7ff ffdc 	bl	8007c34 <HAL_RCC_GetHCLKFreq>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	4b05      	ldr	r3, [pc, #20]	@ (8007c94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	0b5b      	lsrs	r3, r3, #13
 8007c84:	f003 0307 	and.w	r3, r3, #7
 8007c88:	4903      	ldr	r1, [pc, #12]	@ (8007c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c8a:	5ccb      	ldrb	r3, [r1, r3]
 8007c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	40023800 	.word	0x40023800
 8007c98:	0800d01c 	.word	0x0800d01c

08007c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b088      	sub	sp, #32
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007cac:	2300      	movs	r3, #0
 8007cae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0301 	and.w	r3, r3, #1
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d012      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007cc4:	4b69      	ldr	r3, [pc, #420]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	4a68      	ldr	r2, [pc, #416]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007cce:	6093      	str	r3, [r2, #8]
 8007cd0:	4b66      	ldr	r3, [pc, #408]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cd2:	689a      	ldr	r2, [r3, #8]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cd8:	4964      	ldr	r1, [pc, #400]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d101      	bne.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d017      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007cf6:	4b5d      	ldr	r3, [pc, #372]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cfc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d04:	4959      	ldr	r1, [pc, #356]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d14:	d101      	bne.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007d16:	2301      	movs	r3, #1
 8007d18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d101      	bne.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007d22:	2301      	movs	r3, #1
 8007d24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d017      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007d32:	4b4e      	ldr	r3, [pc, #312]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d38:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d40:	494a      	ldr	r1, [pc, #296]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d50:	d101      	bne.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007d52:	2301      	movs	r3, #1
 8007d54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d101      	bne.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0320 	and.w	r3, r3, #32
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f000 808b 	beq.w	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d80:	4b3a      	ldr	r3, [pc, #232]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d84:	4a39      	ldr	r2, [pc, #228]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8007d8c:	4b37      	ldr	r3, [pc, #220]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d94:	60bb      	str	r3, [r7, #8]
 8007d96:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007d98:	4b35      	ldr	r3, [pc, #212]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a34      	ldr	r2, [pc, #208]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007da2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007da4:	f7fd ffb8 	bl	8005d18 <HAL_GetTick>
 8007da8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007daa:	e008      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dac:	f7fd ffb4 	bl	8005d18 <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	2b64      	cmp	r3, #100	@ 0x64
 8007db8:	d901      	bls.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e357      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d0f0      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007dca:	4b28      	ldr	r3, [pc, #160]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dd2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d035      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d02e      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007de8:	4b20      	ldr	r3, [pc, #128]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007df0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007df2:	4b1e      	ldr	r3, [pc, #120]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007df6:	4a1d      	ldr	r2, [pc, #116]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007dfc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e02:	4a1a      	ldr	r2, [pc, #104]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e08:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007e0a:	4a18      	ldr	r2, [pc, #96]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007e10:	4b16      	ldr	r3, [pc, #88]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e14:	f003 0301 	and.w	r3, r3, #1
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d114      	bne.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e1c:	f7fd ff7c 	bl	8005d18 <HAL_GetTick>
 8007e20:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e22:	e00a      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e24:	f7fd ff78 	bl	8005d18 <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d901      	bls.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e319      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e3e:	f003 0302 	and.w	r3, r3, #2
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d0ee      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e52:	d111      	bne.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007e54:	4b05      	ldr	r3, [pc, #20]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007e60:	4b04      	ldr	r3, [pc, #16]	@ (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007e62:	400b      	ands	r3, r1
 8007e64:	4901      	ldr	r1, [pc, #4]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	608b      	str	r3, [r1, #8]
 8007e6a:	e00b      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007e6c:	40023800 	.word	0x40023800
 8007e70:	40007000 	.word	0x40007000
 8007e74:	0ffffcff 	.word	0x0ffffcff
 8007e78:	4baa      	ldr	r3, [pc, #680]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	4aa9      	ldr	r2, [pc, #676]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e7e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007e82:	6093      	str	r3, [r2, #8]
 8007e84:	4ba7      	ldr	r3, [pc, #668]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e86:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e90:	49a4      	ldr	r1, [pc, #656]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0310 	and.w	r3, r3, #16
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d010      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ea2:	4ba0      	ldr	r3, [pc, #640]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ea8:	4a9e      	ldr	r2, [pc, #632]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007eae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007eb2:	4b9c      	ldr	r3, [pc, #624]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eb4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ebc:	4999      	ldr	r1, [pc, #612]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00a      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ed0:	4b94      	ldr	r3, [pc, #592]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ed6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ede:	4991      	ldr	r1, [pc, #580]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00a      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007ef2:	4b8c      	ldr	r3, [pc, #560]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ef8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f00:	4988      	ldr	r1, [pc, #544]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00a      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007f14:	4b83      	ldr	r3, [pc, #524]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f22:	4980      	ldr	r1, [pc, #512]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f24:	4313      	orrs	r3, r2
 8007f26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00a      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f36:	4b7b      	ldr	r3, [pc, #492]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f3c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f44:	4977      	ldr	r1, [pc, #476]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f46:	4313      	orrs	r3, r2
 8007f48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00a      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007f58:	4b72      	ldr	r3, [pc, #456]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f5e:	f023 0203 	bic.w	r2, r3, #3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f66:	496f      	ldr	r1, [pc, #444]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00a      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007f7a:	4b6a      	ldr	r3, [pc, #424]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f80:	f023 020c 	bic.w	r2, r3, #12
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f88:	4966      	ldr	r1, [pc, #408]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00a      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007f9c:	4b61      	ldr	r3, [pc, #388]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fa2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007faa:	495e      	ldr	r1, [pc, #376]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fac:	4313      	orrs	r3, r2
 8007fae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007fbe:	4b59      	ldr	r3, [pc, #356]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fc4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fcc:	4955      	ldr	r1, [pc, #340]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00a      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007fe0:	4b50      	ldr	r3, [pc, #320]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fe6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fee:	494d      	ldr	r1, [pc, #308]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00a      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008002:	4b48      	ldr	r3, [pc, #288]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008008:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008010:	4944      	ldr	r1, [pc, #272]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008012:	4313      	orrs	r3, r2
 8008014:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00a      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008024:	4b3f      	ldr	r3, [pc, #252]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800802a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008032:	493c      	ldr	r1, [pc, #240]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008034:	4313      	orrs	r3, r2
 8008036:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00a      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008046:	4b37      	ldr	r3, [pc, #220]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800804c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008054:	4933      	ldr	r1, [pc, #204]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008056:	4313      	orrs	r3, r2
 8008058:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00a      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008068:	4b2e      	ldr	r3, [pc, #184]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800806a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800806e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008076:	492b      	ldr	r1, [pc, #172]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008078:	4313      	orrs	r3, r2
 800807a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008086:	2b00      	cmp	r3, #0
 8008088:	d011      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800808a:	4b26      	ldr	r3, [pc, #152]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800808c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008090:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008098:	4922      	ldr	r1, [pc, #136]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800809a:	4313      	orrs	r3, r2
 800809c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080a8:	d101      	bne.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80080aa:	2301      	movs	r3, #1
 80080ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0308 	and.w	r3, r3, #8
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80080ba:	2301      	movs	r3, #1
 80080bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080ca:	4b16      	ldr	r3, [pc, #88]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080d0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080d8:	4912      	ldr	r1, [pc, #72]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080da:	4313      	orrs	r3, r2
 80080dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00b      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80080ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080f2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080fc:	4909      	ldr	r1, [pc, #36]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080fe:	4313      	orrs	r3, r2
 8008100:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d006      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 80d9 	beq.w	80082ca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008118:	4b02      	ldr	r3, [pc, #8]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a01      	ldr	r2, [pc, #4]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800811e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008122:	e001      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008124:	40023800 	.word	0x40023800
 8008128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800812a:	f7fd fdf5 	bl	8005d18 <HAL_GetTick>
 800812e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008130:	e008      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008132:	f7fd fdf1 	bl	8005d18 <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	2b64      	cmp	r3, #100	@ 0x64
 800813e:	d901      	bls.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e194      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008144:	4b6c      	ldr	r3, [pc, #432]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1f0      	bne.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0301 	and.w	r3, r3, #1
 8008158:	2b00      	cmp	r3, #0
 800815a:	d021      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008160:	2b00      	cmp	r3, #0
 8008162:	d11d      	bne.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008164:	4b64      	ldr	r3, [pc, #400]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800816a:	0c1b      	lsrs	r3, r3, #16
 800816c:	f003 0303 	and.w	r3, r3, #3
 8008170:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008172:	4b61      	ldr	r3, [pc, #388]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008174:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008178:	0e1b      	lsrs	r3, r3, #24
 800817a:	f003 030f 	and.w	r3, r3, #15
 800817e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	019a      	lsls	r2, r3, #6
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	041b      	lsls	r3, r3, #16
 800818a:	431a      	orrs	r2, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	061b      	lsls	r3, r3, #24
 8008190:	431a      	orrs	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	071b      	lsls	r3, r3, #28
 8008198:	4957      	ldr	r1, [pc, #348]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800819a:	4313      	orrs	r3, r2
 800819c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d004      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081b4:	d00a      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d02e      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80081ca:	d129      	bne.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80081cc:	4b4a      	ldr	r3, [pc, #296]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081d2:	0c1b      	lsrs	r3, r3, #16
 80081d4:	f003 0303 	and.w	r3, r3, #3
 80081d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80081da:	4b47      	ldr	r3, [pc, #284]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081e0:	0f1b      	lsrs	r3, r3, #28
 80081e2:	f003 0307 	and.w	r3, r3, #7
 80081e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	019a      	lsls	r2, r3, #6
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	041b      	lsls	r3, r3, #16
 80081f2:	431a      	orrs	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	061b      	lsls	r3, r3, #24
 80081fa:	431a      	orrs	r2, r3
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	071b      	lsls	r3, r3, #28
 8008200:	493d      	ldr	r1, [pc, #244]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008202:	4313      	orrs	r3, r2
 8008204:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008208:	4b3b      	ldr	r3, [pc, #236]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800820a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800820e:	f023 021f 	bic.w	r2, r3, #31
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008216:	3b01      	subs	r3, #1
 8008218:	4937      	ldr	r1, [pc, #220]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800821a:	4313      	orrs	r3, r2
 800821c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008228:	2b00      	cmp	r3, #0
 800822a:	d01d      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800822c:	4b32      	ldr	r3, [pc, #200]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800822e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008232:	0e1b      	lsrs	r3, r3, #24
 8008234:	f003 030f 	and.w	r3, r3, #15
 8008238:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800823a:	4b2f      	ldr	r3, [pc, #188]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800823c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008240:	0f1b      	lsrs	r3, r3, #28
 8008242:	f003 0307 	and.w	r3, r3, #7
 8008246:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	019a      	lsls	r2, r3, #6
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	041b      	lsls	r3, r3, #16
 8008254:	431a      	orrs	r2, r3
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	061b      	lsls	r3, r3, #24
 800825a:	431a      	orrs	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	071b      	lsls	r3, r3, #28
 8008260:	4925      	ldr	r1, [pc, #148]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008262:	4313      	orrs	r3, r2
 8008264:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d011      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	019a      	lsls	r2, r3, #6
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	041b      	lsls	r3, r3, #16
 8008280:	431a      	orrs	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	061b      	lsls	r3, r3, #24
 8008288:	431a      	orrs	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	071b      	lsls	r3, r3, #28
 8008290:	4919      	ldr	r1, [pc, #100]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008292:	4313      	orrs	r3, r2
 8008294:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008298:	4b17      	ldr	r3, [pc, #92]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a16      	ldr	r2, [pc, #88]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800829e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80082a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082a4:	f7fd fd38 	bl	8005d18 <HAL_GetTick>
 80082a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80082aa:	e008      	b.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80082ac:	f7fd fd34 	bl	8005d18 <HAL_GetTick>
 80082b0:	4602      	mov	r2, r0
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	2b64      	cmp	r3, #100	@ 0x64
 80082b8:	d901      	bls.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e0d7      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80082be:	4b0e      	ldr	r3, [pc, #56]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d0f0      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	f040 80cd 	bne.w	800846c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80082d2:	4b09      	ldr	r3, [pc, #36]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a08      	ldr	r2, [pc, #32]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082de:	f7fd fd1b 	bl	8005d18 <HAL_GetTick>
 80082e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80082e4:	e00a      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80082e6:	f7fd fd17 	bl	8005d18 <HAL_GetTick>
 80082ea:	4602      	mov	r2, r0
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	1ad3      	subs	r3, r2, r3
 80082f0:	2b64      	cmp	r3, #100	@ 0x64
 80082f2:	d903      	bls.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	e0ba      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80082f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80082fc:	4b5e      	ldr	r3, [pc, #376]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008308:	d0ed      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800831a:	2b00      	cmp	r3, #0
 800831c:	d009      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008326:	2b00      	cmp	r3, #0
 8008328:	d02e      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800832e:	2b00      	cmp	r3, #0
 8008330:	d12a      	bne.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008332:	4b51      	ldr	r3, [pc, #324]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008338:	0c1b      	lsrs	r3, r3, #16
 800833a:	f003 0303 	and.w	r3, r3, #3
 800833e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008340:	4b4d      	ldr	r3, [pc, #308]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008346:	0f1b      	lsrs	r3, r3, #28
 8008348:	f003 0307 	and.w	r3, r3, #7
 800834c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	695b      	ldr	r3, [r3, #20]
 8008352:	019a      	lsls	r2, r3, #6
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	041b      	lsls	r3, r3, #16
 8008358:	431a      	orrs	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	061b      	lsls	r3, r3, #24
 8008360:	431a      	orrs	r2, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	071b      	lsls	r3, r3, #28
 8008366:	4944      	ldr	r1, [pc, #272]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008368:	4313      	orrs	r3, r2
 800836a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800836e:	4b42      	ldr	r3, [pc, #264]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008370:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008374:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800837c:	3b01      	subs	r3, #1
 800837e:	021b      	lsls	r3, r3, #8
 8008380:	493d      	ldr	r1, [pc, #244]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008382:	4313      	orrs	r3, r2
 8008384:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d022      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008398:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800839c:	d11d      	bne.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800839e:	4b36      	ldr	r3, [pc, #216]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083a4:	0e1b      	lsrs	r3, r3, #24
 80083a6:	f003 030f 	and.w	r3, r3, #15
 80083aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80083ac:	4b32      	ldr	r3, [pc, #200]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083b2:	0f1b      	lsrs	r3, r3, #28
 80083b4:	f003 0307 	and.w	r3, r3, #7
 80083b8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	019a      	lsls	r2, r3, #6
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a1b      	ldr	r3, [r3, #32]
 80083c4:	041b      	lsls	r3, r3, #16
 80083c6:	431a      	orrs	r2, r3
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	061b      	lsls	r3, r3, #24
 80083cc:	431a      	orrs	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	071b      	lsls	r3, r3, #28
 80083d2:	4929      	ldr	r1, [pc, #164]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0308 	and.w	r3, r3, #8
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d028      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80083e6:	4b24      	ldr	r3, [pc, #144]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083ec:	0e1b      	lsrs	r3, r3, #24
 80083ee:	f003 030f 	and.w	r3, r3, #15
 80083f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80083f4:	4b20      	ldr	r3, [pc, #128]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083fa:	0c1b      	lsrs	r3, r3, #16
 80083fc:	f003 0303 	and.w	r3, r3, #3
 8008400:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	695b      	ldr	r3, [r3, #20]
 8008406:	019a      	lsls	r2, r3, #6
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	041b      	lsls	r3, r3, #16
 800840c:	431a      	orrs	r2, r3
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	061b      	lsls	r3, r3, #24
 8008412:	431a      	orrs	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	69db      	ldr	r3, [r3, #28]
 8008418:	071b      	lsls	r3, r3, #28
 800841a:	4917      	ldr	r1, [pc, #92]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800841c:	4313      	orrs	r3, r2
 800841e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008422:	4b15      	ldr	r3, [pc, #84]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008424:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008428:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008430:	4911      	ldr	r1, [pc, #68]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008432:	4313      	orrs	r3, r2
 8008434:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008438:	4b0f      	ldr	r3, [pc, #60]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a0e      	ldr	r2, [pc, #56]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800843e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008442:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008444:	f7fd fc68 	bl	8005d18 <HAL_GetTick>
 8008448:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800844a:	e008      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800844c:	f7fd fc64 	bl	8005d18 <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	2b64      	cmp	r3, #100	@ 0x64
 8008458:	d901      	bls.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e007      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800845e:	4b06      	ldr	r3, [pc, #24]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008466:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800846a:	d1ef      	bne.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3720      	adds	r7, #32
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	40023800 	.word	0x40023800

0800847c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d101      	bne.n	800848e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e09d      	b.n	80085ca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008492:	2b00      	cmp	r3, #0
 8008494:	d108      	bne.n	80084a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800849e:	d009      	beq.n	80084b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	61da      	str	r2, [r3, #28]
 80084a6:	e005      	b.n	80084b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d106      	bne.n	80084d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f7fc fdb0 	bl	8005034 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2202      	movs	r2, #2
 80084d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80084f4:	d902      	bls.n	80084fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80084f6:	2300      	movs	r3, #0
 80084f8:	60fb      	str	r3, [r7, #12]
 80084fa:	e002      	b.n	8008502 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80084fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008500:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800850a:	d007      	beq.n	800851c <HAL_SPI_Init+0xa0>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008514:	d002      	beq.n	800851c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800852c:	431a      	orrs	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	f003 0302 	and.w	r3, r3, #2
 8008536:	431a      	orrs	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	695b      	ldr	r3, [r3, #20]
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	431a      	orrs	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800854a:	431a      	orrs	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	69db      	ldr	r3, [r3, #28]
 8008550:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008554:	431a      	orrs	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800855e:	ea42 0103 	orr.w	r1, r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008566:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	430a      	orrs	r2, r1
 8008570:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	699b      	ldr	r3, [r3, #24]
 8008576:	0c1b      	lsrs	r3, r3, #16
 8008578:	f003 0204 	and.w	r2, r3, #4
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008580:	f003 0310 	and.w	r3, r3, #16
 8008584:	431a      	orrs	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800858a:	f003 0308 	and.w	r3, r3, #8
 800858e:	431a      	orrs	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008598:	ea42 0103 	orr.w	r1, r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	430a      	orrs	r2, r1
 80085a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	69da      	ldr	r2, [r3, #28]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80085b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b088      	sub	sp, #32
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	60f8      	str	r0, [r7, #12]
 80085da:	60b9      	str	r1, [r7, #8]
 80085dc:	603b      	str	r3, [r7, #0]
 80085de:	4613      	mov	r3, r2
 80085e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d101      	bne.n	80085f4 <HAL_SPI_Transmit+0x22>
 80085f0:	2302      	movs	r3, #2
 80085f2:	e158      	b.n	80088a6 <HAL_SPI_Transmit+0x2d4>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085fc:	f7fd fb8c 	bl	8005d18 <HAL_GetTick>
 8008600:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008602:	88fb      	ldrh	r3, [r7, #6]
 8008604:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b01      	cmp	r3, #1
 8008610:	d002      	beq.n	8008618 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008612:	2302      	movs	r3, #2
 8008614:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008616:	e13d      	b.n	8008894 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d002      	beq.n	8008624 <HAL_SPI_Transmit+0x52>
 800861e:	88fb      	ldrh	r3, [r7, #6]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d102      	bne.n	800862a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008628:	e134      	b.n	8008894 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2203      	movs	r2, #3
 800862e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	88fa      	ldrh	r2, [r7, #6]
 8008642:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	88fa      	ldrh	r2, [r7, #6]
 8008648:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008674:	d10f      	bne.n	8008696 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008684:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008694:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086a0:	2b40      	cmp	r3, #64	@ 0x40
 80086a2:	d007      	beq.n	80086b4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80086bc:	d94b      	bls.n	8008756 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d002      	beq.n	80086cc <HAL_SPI_Transmit+0xfa>
 80086c6:	8afb      	ldrh	r3, [r7, #22]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d13e      	bne.n	800874a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d0:	881a      	ldrh	r2, [r3, #0]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086dc:	1c9a      	adds	r2, r3, #2
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	3b01      	subs	r3, #1
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80086f0:	e02b      	b.n	800874a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	f003 0302 	and.w	r3, r3, #2
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d112      	bne.n	8008726 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008704:	881a      	ldrh	r2, [r3, #0]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008710:	1c9a      	adds	r2, r3, #2
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800871a:	b29b      	uxth	r3, r3
 800871c:	3b01      	subs	r3, #1
 800871e:	b29a      	uxth	r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008724:	e011      	b.n	800874a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008726:	f7fd faf7 	bl	8005d18 <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	683a      	ldr	r2, [r7, #0]
 8008732:	429a      	cmp	r2, r3
 8008734:	d803      	bhi.n	800873e <HAL_SPI_Transmit+0x16c>
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800873c:	d102      	bne.n	8008744 <HAL_SPI_Transmit+0x172>
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d102      	bne.n	800874a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008744:	2303      	movs	r3, #3
 8008746:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008748:	e0a4      	b.n	8008894 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800874e:	b29b      	uxth	r3, r3
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1ce      	bne.n	80086f2 <HAL_SPI_Transmit+0x120>
 8008754:	e07c      	b.n	8008850 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d002      	beq.n	8008764 <HAL_SPI_Transmit+0x192>
 800875e:	8afb      	ldrh	r3, [r7, #22]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d170      	bne.n	8008846 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008768:	b29b      	uxth	r3, r3
 800876a:	2b01      	cmp	r3, #1
 800876c:	d912      	bls.n	8008794 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008772:	881a      	ldrh	r2, [r3, #0]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800877e:	1c9a      	adds	r2, r3, #2
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008788:	b29b      	uxth	r3, r3
 800878a:	3b02      	subs	r3, #2
 800878c:	b29a      	uxth	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008792:	e058      	b.n	8008846 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	330c      	adds	r3, #12
 800879e:	7812      	ldrb	r2, [r2, #0]
 80087a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087a6:	1c5a      	adds	r2, r3, #1
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	3b01      	subs	r3, #1
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80087ba:	e044      	b.n	8008846 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	f003 0302 	and.w	r3, r3, #2
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d12b      	bne.n	8008822 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d912      	bls.n	80087fa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d8:	881a      	ldrh	r2, [r3, #0]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087e4:	1c9a      	adds	r2, r3, #2
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	3b02      	subs	r3, #2
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80087f8:	e025      	b.n	8008846 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	330c      	adds	r3, #12
 8008804:	7812      	ldrb	r2, [r2, #0]
 8008806:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880c:	1c5a      	adds	r2, r3, #1
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008816:	b29b      	uxth	r3, r3
 8008818:	3b01      	subs	r3, #1
 800881a:	b29a      	uxth	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008820:	e011      	b.n	8008846 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008822:	f7fd fa79 	bl	8005d18 <HAL_GetTick>
 8008826:	4602      	mov	r2, r0
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	1ad3      	subs	r3, r2, r3
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	429a      	cmp	r2, r3
 8008830:	d803      	bhi.n	800883a <HAL_SPI_Transmit+0x268>
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008838:	d102      	bne.n	8008840 <HAL_SPI_Transmit+0x26e>
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d102      	bne.n	8008846 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008844:	e026      	b.n	8008894 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800884a:	b29b      	uxth	r3, r3
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1b5      	bne.n	80087bc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008850:	69ba      	ldr	r2, [r7, #24]
 8008852:	6839      	ldr	r1, [r7, #0]
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f000 fe1b 	bl	8009490 <SPI_EndRxTxTransaction>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2220      	movs	r2, #32
 8008864:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10a      	bne.n	8008884 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800886e:	2300      	movs	r3, #0
 8008870:	613b      	str	r3, [r7, #16]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	613b      	str	r3, [r7, #16]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	613b      	str	r3, [r7, #16]
 8008882:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008888:	2b00      	cmp	r3, #0
 800888a:	d002      	beq.n	8008892 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	77fb      	strb	r3, [r7, #31]
 8008890:	e000      	b.n	8008894 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008892:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2200      	movs	r2, #0
 80088a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80088a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3720      	adds	r7, #32
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b088      	sub	sp, #32
 80088b2:	af02      	add	r7, sp, #8
 80088b4:	60f8      	str	r0, [r7, #12]
 80088b6:	60b9      	str	r1, [r7, #8]
 80088b8:	603b      	str	r3, [r7, #0]
 80088ba:	4613      	mov	r3, r2
 80088bc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088be:	2300      	movs	r3, #0
 80088c0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80088ca:	d112      	bne.n	80088f2 <HAL_SPI_Receive+0x44>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10e      	bne.n	80088f2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2204      	movs	r2, #4
 80088d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80088dc:	88fa      	ldrh	r2, [r7, #6]
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	4613      	mov	r3, r2
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	68b9      	ldr	r1, [r7, #8]
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f000 f910 	bl	8008b0e <HAL_SPI_TransmitReceive>
 80088ee:	4603      	mov	r3, r0
 80088f0:	e109      	b.n	8008b06 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d101      	bne.n	8008900 <HAL_SPI_Receive+0x52>
 80088fc:	2302      	movs	r3, #2
 80088fe:	e102      	b.n	8008b06 <HAL_SPI_Receive+0x258>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008908:	f7fd fa06 	bl	8005d18 <HAL_GetTick>
 800890c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b01      	cmp	r3, #1
 8008918:	d002      	beq.n	8008920 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800891a:	2302      	movs	r3, #2
 800891c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800891e:	e0e9      	b.n	8008af4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d002      	beq.n	800892c <HAL_SPI_Receive+0x7e>
 8008926:	88fb      	ldrh	r3, [r7, #6]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d102      	bne.n	8008932 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008930:	e0e0      	b.n	8008af4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2204      	movs	r2, #4
 8008936:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	88fa      	ldrh	r2, [r7, #6]
 800894a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	88fa      	ldrh	r2, [r7, #6]
 8008952:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800897c:	d908      	bls.n	8008990 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	685a      	ldr	r2, [r3, #4]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800898c:	605a      	str	r2, [r3, #4]
 800898e:	e007      	b.n	80089a0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	685a      	ldr	r2, [r3, #4]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800899e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089a8:	d10f      	bne.n	80089ca <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80089c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089d4:	2b40      	cmp	r3, #64	@ 0x40
 80089d6:	d007      	beq.n	80089e8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80089f0:	d867      	bhi.n	8008ac2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80089f2:	e030      	b.n	8008a56 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	f003 0301 	and.w	r3, r3, #1
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d117      	bne.n	8008a32 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f103 020c 	add.w	r2, r3, #12
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a0e:	7812      	ldrb	r2, [r2, #0]
 8008a10:	b2d2      	uxtb	r2, r2
 8008a12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a18:	1c5a      	adds	r2, r3, #1
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	3b01      	subs	r3, #1
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008a30:	e011      	b.n	8008a56 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a32:	f7fd f971 	bl	8005d18 <HAL_GetTick>
 8008a36:	4602      	mov	r2, r0
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	683a      	ldr	r2, [r7, #0]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d803      	bhi.n	8008a4a <HAL_SPI_Receive+0x19c>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a48:	d102      	bne.n	8008a50 <HAL_SPI_Receive+0x1a2>
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d102      	bne.n	8008a56 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008a54:	e04e      	b.n	8008af4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1c8      	bne.n	80089f4 <HAL_SPI_Receive+0x146>
 8008a62:	e034      	b.n	8008ace <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d115      	bne.n	8008a9e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68da      	ldr	r2, [r3, #12]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a7c:	b292      	uxth	r2, r2
 8008a7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a84:	1c9a      	adds	r2, r3, #2
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	3b01      	subs	r3, #1
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008a9c:	e011      	b.n	8008ac2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a9e:	f7fd f93b 	bl	8005d18 <HAL_GetTick>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	1ad3      	subs	r3, r2, r3
 8008aa8:	683a      	ldr	r2, [r7, #0]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d803      	bhi.n	8008ab6 <HAL_SPI_Receive+0x208>
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab4:	d102      	bne.n	8008abc <HAL_SPI_Receive+0x20e>
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d102      	bne.n	8008ac2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8008abc:	2303      	movs	r3, #3
 8008abe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008ac0:	e018      	b.n	8008af4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1ca      	bne.n	8008a64 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	6839      	ldr	r1, [r7, #0]
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f000 fc60 	bl	8009398 <SPI_EndRxTransaction>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d002      	beq.n	8008ae4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2220      	movs	r2, #32
 8008ae2:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d002      	beq.n	8008af2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	75fb      	strb	r3, [r7, #23]
 8008af0:	e000      	b.n	8008af4 <HAL_SPI_Receive+0x246>
  }

error :
 8008af2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3718      	adds	r7, #24
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b08a      	sub	sp, #40	@ 0x28
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	607a      	str	r2, [r7, #4]
 8008b1a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d101      	bne.n	8008b34 <HAL_SPI_TransmitReceive+0x26>
 8008b30:	2302      	movs	r3, #2
 8008b32:	e1fb      	b.n	8008f2c <HAL_SPI_TransmitReceive+0x41e>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b3c:	f7fd f8ec 	bl	8005d18 <HAL_GetTick>
 8008b40:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008b48:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008b50:	887b      	ldrh	r3, [r7, #2]
 8008b52:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008b54:	887b      	ldrh	r3, [r7, #2]
 8008b56:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008b58:	7efb      	ldrb	r3, [r7, #27]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d00e      	beq.n	8008b7c <HAL_SPI_TransmitReceive+0x6e>
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b64:	d106      	bne.n	8008b74 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d102      	bne.n	8008b74 <HAL_SPI_TransmitReceive+0x66>
 8008b6e:	7efb      	ldrb	r3, [r7, #27]
 8008b70:	2b04      	cmp	r3, #4
 8008b72:	d003      	beq.n	8008b7c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008b74:	2302      	movs	r3, #2
 8008b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008b7a:	e1cd      	b.n	8008f18 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d005      	beq.n	8008b8e <HAL_SPI_TransmitReceive+0x80>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d002      	beq.n	8008b8e <HAL_SPI_TransmitReceive+0x80>
 8008b88:	887b      	ldrh	r3, [r7, #2]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d103      	bne.n	8008b96 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008b94:	e1c0      	b.n	8008f18 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	d003      	beq.n	8008baa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2205      	movs	r2, #5
 8008ba6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	887a      	ldrh	r2, [r7, #2]
 8008bba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	887a      	ldrh	r2, [r7, #2]
 8008bc2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	887a      	ldrh	r2, [r7, #2]
 8008bd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	887a      	ldrh	r2, [r7, #2]
 8008bd6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008bec:	d802      	bhi.n	8008bf4 <HAL_SPI_TransmitReceive+0xe6>
 8008bee:	8a3b      	ldrh	r3, [r7, #16]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d908      	bls.n	8008c06 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008c02:	605a      	str	r2, [r3, #4]
 8008c04:	e007      	b.n	8008c16 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008c14:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c20:	2b40      	cmp	r3, #64	@ 0x40
 8008c22:	d007      	beq.n	8008c34 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008c3c:	d97c      	bls.n	8008d38 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d002      	beq.n	8008c4c <HAL_SPI_TransmitReceive+0x13e>
 8008c46:	8a7b      	ldrh	r3, [r7, #18]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d169      	bne.n	8008d20 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c50:	881a      	ldrh	r2, [r3, #0]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c5c:	1c9a      	adds	r2, r3, #2
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	3b01      	subs	r3, #1
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c70:	e056      	b.n	8008d20 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	f003 0302 	and.w	r3, r3, #2
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d11b      	bne.n	8008cb8 <HAL_SPI_TransmitReceive+0x1aa>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d016      	beq.n	8008cb8 <HAL_SPI_TransmitReceive+0x1aa>
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d113      	bne.n	8008cb8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c94:	881a      	ldrh	r2, [r3, #0]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca0:	1c9a      	adds	r2, r3, #2
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	3b01      	subs	r3, #1
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d11c      	bne.n	8008d00 <HAL_SPI_TransmitReceive+0x1f2>
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d016      	beq.n	8008d00 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68da      	ldr	r2, [r3, #12]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cdc:	b292      	uxth	r2, r2
 8008cde:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce4:	1c9a      	adds	r2, r3, #2
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008d00:	f7fd f80a 	bl	8005d18 <HAL_GetTick>
 8008d04:	4602      	mov	r2, r0
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d807      	bhi.n	8008d20 <HAL_SPI_TransmitReceive+0x212>
 8008d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d16:	d003      	beq.n	8008d20 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8008d1e:	e0fb      	b.n	8008f18 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1a3      	bne.n	8008c72 <HAL_SPI_TransmitReceive+0x164>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d19d      	bne.n	8008c72 <HAL_SPI_TransmitReceive+0x164>
 8008d36:	e0df      	b.n	8008ef8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d003      	beq.n	8008d48 <HAL_SPI_TransmitReceive+0x23a>
 8008d40:	8a7b      	ldrh	r3, [r7, #18]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	f040 80cb 	bne.w	8008ede <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d912      	bls.n	8008d78 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d56:	881a      	ldrh	r2, [r3, #0]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d62:	1c9a      	adds	r2, r3, #2
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	3b02      	subs	r3, #2
 8008d70:	b29a      	uxth	r2, r3
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008d76:	e0b2      	b.n	8008ede <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	330c      	adds	r3, #12
 8008d82:	7812      	ldrb	r2, [r2, #0]
 8008d84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d8a:	1c5a      	adds	r2, r3, #1
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	3b01      	subs	r3, #1
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d9e:	e09e      	b.n	8008ede <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	f003 0302 	and.w	r3, r3, #2
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d134      	bne.n	8008e18 <HAL_SPI_TransmitReceive+0x30a>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d02f      	beq.n	8008e18 <HAL_SPI_TransmitReceive+0x30a>
 8008db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d12c      	bne.n	8008e18 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d912      	bls.n	8008dee <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dcc:	881a      	ldrh	r2, [r3, #0]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd8:	1c9a      	adds	r2, r3, #2
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	3b02      	subs	r3, #2
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008dec:	e012      	b.n	8008e14 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	330c      	adds	r3, #12
 8008df8:	7812      	ldrb	r2, [r2, #0]
 8008dfa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e00:	1c5a      	adds	r2, r3, #1
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e14:	2300      	movs	r3, #0
 8008e16:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d148      	bne.n	8008eb8 <HAL_SPI_TransmitReceive+0x3aa>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d042      	beq.n	8008eb8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d923      	bls.n	8008e86 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68da      	ldr	r2, [r3, #12]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e48:	b292      	uxth	r2, r2
 8008e4a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e50:	1c9a      	adds	r2, r3, #2
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	3b02      	subs	r3, #2
 8008e60:	b29a      	uxth	r2, r3
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d81f      	bhi.n	8008eb4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	685a      	ldr	r2, [r3, #4]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008e82:	605a      	str	r2, [r3, #4]
 8008e84:	e016      	b.n	8008eb4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f103 020c 	add.w	r2, r3, #12
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e92:	7812      	ldrb	r2, [r2, #0]
 8008e94:	b2d2      	uxtb	r2, r2
 8008e96:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e9c:	1c5a      	adds	r2, r3, #1
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008eb8:	f7fc ff2e 	bl	8005d18 <HAL_GetTick>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d803      	bhi.n	8008ed0 <HAL_SPI_TransmitReceive+0x3c2>
 8008ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ece:	d102      	bne.n	8008ed6 <HAL_SPI_TransmitReceive+0x3c8>
 8008ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d103      	bne.n	8008ede <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8008edc:	e01c      	b.n	8008f18 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f47f af5b 	bne.w	8008da0 <HAL_SPI_TransmitReceive+0x292>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f47f af54 	bne.w	8008da0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ef8:	69fa      	ldr	r2, [r7, #28]
 8008efa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f000 fac7 	bl	8009490 <SPI_EndRxTxTransaction>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d006      	beq.n	8008f16 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2220      	movs	r2, #32
 8008f12:	661a      	str	r2, [r3, #96]	@ 0x60
 8008f14:	e000      	b.n	8008f18 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008f16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008f28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3728      	adds	r7, #40	@ 0x28
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b088      	sub	sp, #32
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10e      	bne.n	8008f74 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d009      	beq.n	8008f74 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d004      	beq.n	8008f74 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	4798      	blx	r3
    return;
 8008f72:	e0ce      	b.n	8009112 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	f003 0302 	and.w	r3, r3, #2
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d009      	beq.n	8008f92 <HAL_SPI_IRQHandler+0x5e>
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d004      	beq.n	8008f92 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	4798      	blx	r3
    return;
 8008f90:	e0bf      	b.n	8009112 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	f003 0320 	and.w	r3, r3, #32
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10a      	bne.n	8008fb2 <HAL_SPI_IRQHandler+0x7e>
 8008f9c:	69bb      	ldr	r3, [r7, #24]
 8008f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d105      	bne.n	8008fb2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f000 80b0 	beq.w	8009112 <HAL_SPI_IRQHandler+0x1de>
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	f003 0320 	and.w	r3, r3, #32
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 80aa 	beq.w	8009112 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d023      	beq.n	8009010 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b03      	cmp	r3, #3
 8008fd2:	d011      	beq.n	8008ff8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fd8:	f043 0204 	orr.w	r2, r3, #4
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	617b      	str	r3, [r7, #20]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	617b      	str	r3, [r7, #20]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	617b      	str	r3, [r7, #20]
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	e00b      	b.n	8009010 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	613b      	str	r3, [r7, #16]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	613b      	str	r3, [r7, #16]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	613b      	str	r3, [r7, #16]
 800900c:	693b      	ldr	r3, [r7, #16]
        return;
 800900e:	e080      	b.n	8009112 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	f003 0320 	and.w	r3, r3, #32
 8009016:	2b00      	cmp	r3, #0
 8009018:	d014      	beq.n	8009044 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800901e:	f043 0201 	orr.w	r2, r3, #1
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009026:	2300      	movs	r3, #0
 8009028:	60fb      	str	r3, [r7, #12]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	60fb      	str	r3, [r7, #12]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009040:	601a      	str	r2, [r3, #0]
 8009042:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00c      	beq.n	8009068 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009052:	f043 0208 	orr.w	r2, r3, #8
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800905a:	2300      	movs	r3, #0
 800905c:	60bb      	str	r3, [r7, #8]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	60bb      	str	r3, [r7, #8]
 8009066:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800906c:	2b00      	cmp	r3, #0
 800906e:	d04f      	beq.n	8009110 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	685a      	ldr	r2, [r3, #4]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800907e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	f003 0302 	and.w	r3, r3, #2
 800908e:	2b00      	cmp	r3, #0
 8009090:	d104      	bne.n	800909c <HAL_SPI_IRQHandler+0x168>
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	f003 0301 	and.w	r3, r3, #1
 8009098:	2b00      	cmp	r3, #0
 800909a:	d034      	beq.n	8009106 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	685a      	ldr	r2, [r3, #4]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f022 0203 	bic.w	r2, r2, #3
 80090aa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d011      	beq.n	80090d8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090b8:	4a17      	ldr	r2, [pc, #92]	@ (8009118 <HAL_SPI_IRQHandler+0x1e4>)
 80090ba:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fc ffda 	bl	800607a <HAL_DMA_Abort_IT>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d005      	beq.n	80090d8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d016      	beq.n	800910e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090e4:	4a0c      	ldr	r2, [pc, #48]	@ (8009118 <HAL_SPI_IRQHandler+0x1e4>)
 80090e6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fc ffc4 	bl	800607a <HAL_DMA_Abort_IT>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00a      	beq.n	800910e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8009104:	e003      	b.n	800910e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f808 	bl	800911c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800910c:	e000      	b.n	8009110 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800910e:	bf00      	nop
    return;
 8009110:	bf00      	nop
  }
}
 8009112:	3720      	adds	r7, #32
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	08009131 	.word	0x08009131

0800911c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009124:	bf00      	nop
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800913c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f7ff ffe5 	bl	800911c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009152:	bf00      	nop
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
	...

0800915c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b088      	sub	sp, #32
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	603b      	str	r3, [r7, #0]
 8009168:	4613      	mov	r3, r2
 800916a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800916c:	f7fc fdd4 	bl	8005d18 <HAL_GetTick>
 8009170:	4602      	mov	r2, r0
 8009172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009174:	1a9b      	subs	r3, r3, r2
 8009176:	683a      	ldr	r2, [r7, #0]
 8009178:	4413      	add	r3, r2
 800917a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800917c:	f7fc fdcc 	bl	8005d18 <HAL_GetTick>
 8009180:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009182:	4b39      	ldr	r3, [pc, #228]	@ (8009268 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	015b      	lsls	r3, r3, #5
 8009188:	0d1b      	lsrs	r3, r3, #20
 800918a:	69fa      	ldr	r2, [r7, #28]
 800918c:	fb02 f303 	mul.w	r3, r2, r3
 8009190:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009192:	e054      	b.n	800923e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800919a:	d050      	beq.n	800923e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800919c:	f7fc fdbc 	bl	8005d18 <HAL_GetTick>
 80091a0:	4602      	mov	r2, r0
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	69fa      	ldr	r2, [r7, #28]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d902      	bls.n	80091b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d13d      	bne.n	800922e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	685a      	ldr	r2, [r3, #4]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80091c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80091ca:	d111      	bne.n	80091f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091d4:	d004      	beq.n	80091e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091de:	d107      	bne.n	80091f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091f8:	d10f      	bne.n	800921a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009208:	601a      	str	r2, [r3, #0]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009218:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2201      	movs	r2, #1
 800921e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2200      	movs	r2, #0
 8009226:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800922a:	2303      	movs	r3, #3
 800922c:	e017      	b.n	800925e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d101      	bne.n	8009238 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009234:	2300      	movs	r3, #0
 8009236:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	3b01      	subs	r3, #1
 800923c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	689a      	ldr	r2, [r3, #8]
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	4013      	ands	r3, r2
 8009248:	68ba      	ldr	r2, [r7, #8]
 800924a:	429a      	cmp	r2, r3
 800924c:	bf0c      	ite	eq
 800924e:	2301      	moveq	r3, #1
 8009250:	2300      	movne	r3, #0
 8009252:	b2db      	uxtb	r3, r3
 8009254:	461a      	mov	r2, r3
 8009256:	79fb      	ldrb	r3, [r7, #7]
 8009258:	429a      	cmp	r2, r3
 800925a:	d19b      	bne.n	8009194 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3720      	adds	r7, #32
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	20000158 	.word	0x20000158

0800926c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b08a      	sub	sp, #40	@ 0x28
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
 8009278:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800927a:	2300      	movs	r3, #0
 800927c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800927e:	f7fc fd4b 	bl	8005d18 <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009286:	1a9b      	subs	r3, r3, r2
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	4413      	add	r3, r2
 800928c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800928e:	f7fc fd43 	bl	8005d18 <HAL_GetTick>
 8009292:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	330c      	adds	r3, #12
 800929a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800929c:	4b3d      	ldr	r3, [pc, #244]	@ (8009394 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	4613      	mov	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4413      	add	r3, r2
 80092a6:	00da      	lsls	r2, r3, #3
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	0d1b      	lsrs	r3, r3, #20
 80092ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092ae:	fb02 f303 	mul.w	r3, r2, r3
 80092b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80092b4:	e060      	b.n	8009378 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80092bc:	d107      	bne.n	80092ce <SPI_WaitFifoStateUntilTimeout+0x62>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d104      	bne.n	80092ce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80092cc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d4:	d050      	beq.n	8009378 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80092d6:	f7fc fd1f 	bl	8005d18 <HAL_GetTick>
 80092da:	4602      	mov	r2, r0
 80092dc:	6a3b      	ldr	r3, [r7, #32]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d902      	bls.n	80092ec <SPI_WaitFifoStateUntilTimeout+0x80>
 80092e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d13d      	bne.n	8009368 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	685a      	ldr	r2, [r3, #4]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80092fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009304:	d111      	bne.n	800932a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800930e:	d004      	beq.n	800931a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009318:	d107      	bne.n	800932a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009328:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800932e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009332:	d10f      	bne.n	8009354 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009342:	601a      	str	r2, [r3, #0]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009352:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2200      	movs	r2, #0
 8009360:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009364:	2303      	movs	r3, #3
 8009366:	e010      	b.n	800938a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d101      	bne.n	8009372 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800936e:	2300      	movs	r3, #0
 8009370:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	3b01      	subs	r3, #1
 8009376:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	689a      	ldr	r2, [r3, #8]
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	4013      	ands	r3, r2
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	429a      	cmp	r2, r3
 8009386:	d196      	bne.n	80092b6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3728      	adds	r7, #40	@ 0x28
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	20000158 	.word	0x20000158

08009398 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b088      	sub	sp, #32
 800939c:	af02      	add	r7, sp, #8
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093ac:	d111      	bne.n	80093d2 <SPI_EndRxTransaction+0x3a>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093b6:	d004      	beq.n	80093c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093c0:	d107      	bne.n	80093d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093d0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093da:	d112      	bne.n	8009402 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	2200      	movs	r2, #0
 80093e4:	2180      	movs	r1, #128	@ 0x80
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f7ff feb8 	bl	800915c <SPI_WaitFlagStateUntilTimeout>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d021      	beq.n	8009436 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093f6:	f043 0220 	orr.w	r2, r3, #32
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80093fe:	2303      	movs	r3, #3
 8009400:	e03d      	b.n	800947e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009402:	4b21      	ldr	r3, [pc, #132]	@ (8009488 <SPI_EndRxTransaction+0xf0>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a21      	ldr	r2, [pc, #132]	@ (800948c <SPI_EndRxTransaction+0xf4>)
 8009408:	fba2 2303 	umull	r2, r3, r2, r3
 800940c:	0d5b      	lsrs	r3, r3, #21
 800940e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009412:	fb02 f303 	mul.w	r3, r2, r3
 8009416:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00a      	beq.n	8009434 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	3b01      	subs	r3, #1
 8009422:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800942e:	2b80      	cmp	r3, #128	@ 0x80
 8009430:	d0f2      	beq.n	8009418 <SPI_EndRxTransaction+0x80>
 8009432:	e000      	b.n	8009436 <SPI_EndRxTransaction+0x9e>
        break;
 8009434:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800943e:	d11d      	bne.n	800947c <SPI_EndRxTransaction+0xe4>
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009448:	d004      	beq.n	8009454 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009452:	d113      	bne.n	800947c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	9300      	str	r3, [sp, #0]
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	2200      	movs	r2, #0
 800945c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f7ff ff03 	bl	800926c <SPI_WaitFifoStateUntilTimeout>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d007      	beq.n	800947c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009470:	f043 0220 	orr.w	r2, r3, #32
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009478:	2303      	movs	r3, #3
 800947a:	e000      	b.n	800947e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3718      	adds	r7, #24
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20000158 	.word	0x20000158
 800948c:	165e9f81 	.word	0x165e9f81

08009490 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b088      	sub	sp, #32
 8009494:	af02      	add	r7, sp, #8
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f7ff fedf 	bl	800926c <SPI_WaitFifoStateUntilTimeout>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d007      	beq.n	80094c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094b8:	f043 0220 	orr.w	r2, r3, #32
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80094c0:	2303      	movs	r3, #3
 80094c2:	e046      	b.n	8009552 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80094c4:	4b25      	ldr	r3, [pc, #148]	@ (800955c <SPI_EndRxTxTransaction+0xcc>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a25      	ldr	r2, [pc, #148]	@ (8009560 <SPI_EndRxTxTransaction+0xd0>)
 80094ca:	fba2 2303 	umull	r2, r3, r2, r3
 80094ce:	0d5b      	lsrs	r3, r3, #21
 80094d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80094d4:	fb02 f303 	mul.w	r3, r2, r3
 80094d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80094e2:	d112      	bne.n	800950a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	2200      	movs	r2, #0
 80094ec:	2180      	movs	r1, #128	@ 0x80
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f7ff fe34 	bl	800915c <SPI_WaitFlagStateUntilTimeout>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d016      	beq.n	8009528 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094fe:	f043 0220 	orr.w	r2, r3, #32
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	e023      	b.n	8009552 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00a      	beq.n	8009526 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	3b01      	subs	r3, #1
 8009514:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009520:	2b80      	cmp	r3, #128	@ 0x80
 8009522:	d0f2      	beq.n	800950a <SPI_EndRxTxTransaction+0x7a>
 8009524:	e000      	b.n	8009528 <SPI_EndRxTxTransaction+0x98>
        break;
 8009526:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	2200      	movs	r2, #0
 8009530:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f7ff fe99 	bl	800926c <SPI_WaitFifoStateUntilTimeout>
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d007      	beq.n	8009550 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009544:	f043 0220 	orr.w	r2, r3, #32
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800954c:	2303      	movs	r3, #3
 800954e:	e000      	b.n	8009552 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3718      	adds	r7, #24
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	20000158 	.word	0x20000158
 8009560:	165e9f81 	.word	0x165e9f81

08009564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d101      	bne.n	8009576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	e049      	b.n	800960a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800957c:	b2db      	uxtb	r3, r3
 800957e:	2b00      	cmp	r3, #0
 8009580:	d106      	bne.n	8009590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7fc f938 	bl	8005800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2202      	movs	r2, #2
 8009594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	3304      	adds	r3, #4
 80095a0:	4619      	mov	r1, r3
 80095a2:	4610      	mov	r0, r2
 80095a4:	f000 fdde 	bl	800a164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2201      	movs	r2, #1
 80095cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3708      	adds	r7, #8
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
	...

08009614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2b01      	cmp	r3, #1
 8009626:	d001      	beq.n	800962c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	e054      	b.n	80096d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2202      	movs	r2, #2
 8009630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68da      	ldr	r2, [r3, #12]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f042 0201 	orr.w	r2, r2, #1
 8009642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a26      	ldr	r2, [pc, #152]	@ (80096e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d022      	beq.n	8009694 <HAL_TIM_Base_Start_IT+0x80>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009656:	d01d      	beq.n	8009694 <HAL_TIM_Base_Start_IT+0x80>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a22      	ldr	r2, [pc, #136]	@ (80096e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d018      	beq.n	8009694 <HAL_TIM_Base_Start_IT+0x80>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a21      	ldr	r2, [pc, #132]	@ (80096ec <HAL_TIM_Base_Start_IT+0xd8>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d013      	beq.n	8009694 <HAL_TIM_Base_Start_IT+0x80>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a1f      	ldr	r2, [pc, #124]	@ (80096f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d00e      	beq.n	8009694 <HAL_TIM_Base_Start_IT+0x80>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a1e      	ldr	r2, [pc, #120]	@ (80096f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d009      	beq.n	8009694 <HAL_TIM_Base_Start_IT+0x80>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a1c      	ldr	r2, [pc, #112]	@ (80096f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d004      	beq.n	8009694 <HAL_TIM_Base_Start_IT+0x80>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a1b      	ldr	r2, [pc, #108]	@ (80096fc <HAL_TIM_Base_Start_IT+0xe8>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d115      	bne.n	80096c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	689a      	ldr	r2, [r3, #8]
 800969a:	4b19      	ldr	r3, [pc, #100]	@ (8009700 <HAL_TIM_Base_Start_IT+0xec>)
 800969c:	4013      	ands	r3, r2
 800969e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2b06      	cmp	r3, #6
 80096a4:	d015      	beq.n	80096d2 <HAL_TIM_Base_Start_IT+0xbe>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096ac:	d011      	beq.n	80096d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f042 0201 	orr.w	r2, r2, #1
 80096bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096be:	e008      	b.n	80096d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f042 0201 	orr.w	r2, r2, #1
 80096ce:	601a      	str	r2, [r3, #0]
 80096d0:	e000      	b.n	80096d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3714      	adds	r7, #20
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	40010000 	.word	0x40010000
 80096e8:	40000400 	.word	0x40000400
 80096ec:	40000800 	.word	0x40000800
 80096f0:	40000c00 	.word	0x40000c00
 80096f4:	40010400 	.word	0x40010400
 80096f8:	40014000 	.word	0x40014000
 80096fc:	40001800 	.word	0x40001800
 8009700:	00010007 	.word	0x00010007

08009704 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68da      	ldr	r2, [r3, #12]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f022 0201 	bic.w	r2, r2, #1
 800971a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	6a1a      	ldr	r2, [r3, #32]
 8009722:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009726:	4013      	ands	r3, r2
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10f      	bne.n	800974c <HAL_TIM_Base_Stop_IT+0x48>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6a1a      	ldr	r2, [r3, #32]
 8009732:	f240 4344 	movw	r3, #1092	@ 0x444
 8009736:	4013      	ands	r3, r2
 8009738:	2b00      	cmp	r3, #0
 800973a:	d107      	bne.n	800974c <HAL_TIM_Base_Stop_IT+0x48>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f022 0201 	bic.w	r2, r2, #1
 800974a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b082      	sub	sp, #8
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d101      	bne.n	8009774 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e049      	b.n	8009808 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800977a:	b2db      	uxtb	r3, r3
 800977c:	2b00      	cmp	r3, #0
 800977e:	d106      	bne.n	800978e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f841 	bl	8009810 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2202      	movs	r2, #2
 8009792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	3304      	adds	r3, #4
 800979e:	4619      	mov	r1, r3
 80097a0:	4610      	mov	r0, r2
 80097a2:	f000 fcdf 	bl	800a164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2201      	movs	r2, #1
 80097aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2201      	movs	r2, #1
 80097b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2201      	movs	r2, #1
 80097ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2201      	movs	r2, #1
 80097c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2201      	movs	r2, #1
 80097ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2201      	movs	r2, #1
 80097d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2201      	movs	r2, #1
 80097da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2201      	movs	r2, #1
 80097e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2201      	movs	r2, #1
 80097f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2201      	movs	r2, #1
 8009802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d109      	bne.n	8009848 <HAL_TIM_PWM_Start+0x24>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b01      	cmp	r3, #1
 800983e:	bf14      	ite	ne
 8009840:	2301      	movne	r3, #1
 8009842:	2300      	moveq	r3, #0
 8009844:	b2db      	uxtb	r3, r3
 8009846:	e03c      	b.n	80098c2 <HAL_TIM_PWM_Start+0x9e>
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	2b04      	cmp	r3, #4
 800984c:	d109      	bne.n	8009862 <HAL_TIM_PWM_Start+0x3e>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009854:	b2db      	uxtb	r3, r3
 8009856:	2b01      	cmp	r3, #1
 8009858:	bf14      	ite	ne
 800985a:	2301      	movne	r3, #1
 800985c:	2300      	moveq	r3, #0
 800985e:	b2db      	uxtb	r3, r3
 8009860:	e02f      	b.n	80098c2 <HAL_TIM_PWM_Start+0x9e>
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	2b08      	cmp	r3, #8
 8009866:	d109      	bne.n	800987c <HAL_TIM_PWM_Start+0x58>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800986e:	b2db      	uxtb	r3, r3
 8009870:	2b01      	cmp	r3, #1
 8009872:	bf14      	ite	ne
 8009874:	2301      	movne	r3, #1
 8009876:	2300      	moveq	r3, #0
 8009878:	b2db      	uxtb	r3, r3
 800987a:	e022      	b.n	80098c2 <HAL_TIM_PWM_Start+0x9e>
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	2b0c      	cmp	r3, #12
 8009880:	d109      	bne.n	8009896 <HAL_TIM_PWM_Start+0x72>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b01      	cmp	r3, #1
 800988c:	bf14      	ite	ne
 800988e:	2301      	movne	r3, #1
 8009890:	2300      	moveq	r3, #0
 8009892:	b2db      	uxtb	r3, r3
 8009894:	e015      	b.n	80098c2 <HAL_TIM_PWM_Start+0x9e>
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	2b10      	cmp	r3, #16
 800989a:	d109      	bne.n	80098b0 <HAL_TIM_PWM_Start+0x8c>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	bf14      	ite	ne
 80098a8:	2301      	movne	r3, #1
 80098aa:	2300      	moveq	r3, #0
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	e008      	b.n	80098c2 <HAL_TIM_PWM_Start+0x9e>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	bf14      	ite	ne
 80098bc:	2301      	movne	r3, #1
 80098be:	2300      	moveq	r3, #0
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d001      	beq.n	80098ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e092      	b.n	80099f0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d104      	bne.n	80098da <HAL_TIM_PWM_Start+0xb6>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2202      	movs	r2, #2
 80098d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80098d8:	e023      	b.n	8009922 <HAL_TIM_PWM_Start+0xfe>
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	2b04      	cmp	r3, #4
 80098de:	d104      	bne.n	80098ea <HAL_TIM_PWM_Start+0xc6>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2202      	movs	r2, #2
 80098e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80098e8:	e01b      	b.n	8009922 <HAL_TIM_PWM_Start+0xfe>
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	2b08      	cmp	r3, #8
 80098ee:	d104      	bne.n	80098fa <HAL_TIM_PWM_Start+0xd6>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2202      	movs	r2, #2
 80098f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80098f8:	e013      	b.n	8009922 <HAL_TIM_PWM_Start+0xfe>
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2b0c      	cmp	r3, #12
 80098fe:	d104      	bne.n	800990a <HAL_TIM_PWM_Start+0xe6>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2202      	movs	r2, #2
 8009904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009908:	e00b      	b.n	8009922 <HAL_TIM_PWM_Start+0xfe>
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	2b10      	cmp	r3, #16
 800990e:	d104      	bne.n	800991a <HAL_TIM_PWM_Start+0xf6>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2202      	movs	r2, #2
 8009914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009918:	e003      	b.n	8009922 <HAL_TIM_PWM_Start+0xfe>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2202      	movs	r2, #2
 800991e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2201      	movs	r2, #1
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	4618      	mov	r0, r3
 800992c:	f000 ffb2 	bl	800a894 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a30      	ldr	r2, [pc, #192]	@ (80099f8 <HAL_TIM_PWM_Start+0x1d4>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d004      	beq.n	8009944 <HAL_TIM_PWM_Start+0x120>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a2f      	ldr	r2, [pc, #188]	@ (80099fc <HAL_TIM_PWM_Start+0x1d8>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d101      	bne.n	8009948 <HAL_TIM_PWM_Start+0x124>
 8009944:	2301      	movs	r3, #1
 8009946:	e000      	b.n	800994a <HAL_TIM_PWM_Start+0x126>
 8009948:	2300      	movs	r3, #0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d007      	beq.n	800995e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800995c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a25      	ldr	r2, [pc, #148]	@ (80099f8 <HAL_TIM_PWM_Start+0x1d4>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d022      	beq.n	80099ae <HAL_TIM_PWM_Start+0x18a>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009970:	d01d      	beq.n	80099ae <HAL_TIM_PWM_Start+0x18a>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a22      	ldr	r2, [pc, #136]	@ (8009a00 <HAL_TIM_PWM_Start+0x1dc>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d018      	beq.n	80099ae <HAL_TIM_PWM_Start+0x18a>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a20      	ldr	r2, [pc, #128]	@ (8009a04 <HAL_TIM_PWM_Start+0x1e0>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d013      	beq.n	80099ae <HAL_TIM_PWM_Start+0x18a>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a1f      	ldr	r2, [pc, #124]	@ (8009a08 <HAL_TIM_PWM_Start+0x1e4>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d00e      	beq.n	80099ae <HAL_TIM_PWM_Start+0x18a>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a19      	ldr	r2, [pc, #100]	@ (80099fc <HAL_TIM_PWM_Start+0x1d8>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d009      	beq.n	80099ae <HAL_TIM_PWM_Start+0x18a>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a1b      	ldr	r2, [pc, #108]	@ (8009a0c <HAL_TIM_PWM_Start+0x1e8>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d004      	beq.n	80099ae <HAL_TIM_PWM_Start+0x18a>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a19      	ldr	r2, [pc, #100]	@ (8009a10 <HAL_TIM_PWM_Start+0x1ec>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d115      	bne.n	80099da <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	689a      	ldr	r2, [r3, #8]
 80099b4:	4b17      	ldr	r3, [pc, #92]	@ (8009a14 <HAL_TIM_PWM_Start+0x1f0>)
 80099b6:	4013      	ands	r3, r2
 80099b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2b06      	cmp	r3, #6
 80099be:	d015      	beq.n	80099ec <HAL_TIM_PWM_Start+0x1c8>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099c6:	d011      	beq.n	80099ec <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f042 0201 	orr.w	r2, r2, #1
 80099d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099d8:	e008      	b.n	80099ec <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f042 0201 	orr.w	r2, r2, #1
 80099e8:	601a      	str	r2, [r3, #0]
 80099ea:	e000      	b.n	80099ee <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	40010000 	.word	0x40010000
 80099fc:	40010400 	.word	0x40010400
 8009a00:	40000400 	.word	0x40000400
 8009a04:	40000800 	.word	0x40000800
 8009a08:	40000c00 	.word	0x40000c00
 8009a0c:	40014000 	.word	0x40014000
 8009a10:	40001800 	.word	0x40001800
 8009a14:	00010007 	.word	0x00010007

08009a18 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2200      	movs	r2, #0
 8009a28:	6839      	ldr	r1, [r7, #0]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 ff32 	bl	800a894 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a36      	ldr	r2, [pc, #216]	@ (8009b10 <HAL_TIM_PWM_Stop+0xf8>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d004      	beq.n	8009a44 <HAL_TIM_PWM_Stop+0x2c>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a35      	ldr	r2, [pc, #212]	@ (8009b14 <HAL_TIM_PWM_Stop+0xfc>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d101      	bne.n	8009a48 <HAL_TIM_PWM_Stop+0x30>
 8009a44:	2301      	movs	r3, #1
 8009a46:	e000      	b.n	8009a4a <HAL_TIM_PWM_Stop+0x32>
 8009a48:	2300      	movs	r3, #0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d017      	beq.n	8009a7e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	6a1a      	ldr	r2, [r3, #32]
 8009a54:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009a58:	4013      	ands	r3, r2
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10f      	bne.n	8009a7e <HAL_TIM_PWM_Stop+0x66>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	6a1a      	ldr	r2, [r3, #32]
 8009a64:	f240 4344 	movw	r3, #1092	@ 0x444
 8009a68:	4013      	ands	r3, r2
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d107      	bne.n	8009a7e <HAL_TIM_PWM_Stop+0x66>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009a7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	6a1a      	ldr	r2, [r3, #32]
 8009a84:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009a88:	4013      	ands	r3, r2
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d10f      	bne.n	8009aae <HAL_TIM_PWM_Stop+0x96>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	6a1a      	ldr	r2, [r3, #32]
 8009a94:	f240 4344 	movw	r3, #1092	@ 0x444
 8009a98:	4013      	ands	r3, r2
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d107      	bne.n	8009aae <HAL_TIM_PWM_Stop+0x96>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f022 0201 	bic.w	r2, r2, #1
 8009aac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d104      	bne.n	8009abe <HAL_TIM_PWM_Stop+0xa6>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009abc:	e023      	b.n	8009b06 <HAL_TIM_PWM_Stop+0xee>
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	2b04      	cmp	r3, #4
 8009ac2:	d104      	bne.n	8009ace <HAL_TIM_PWM_Stop+0xb6>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009acc:	e01b      	b.n	8009b06 <HAL_TIM_PWM_Stop+0xee>
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	2b08      	cmp	r3, #8
 8009ad2:	d104      	bne.n	8009ade <HAL_TIM_PWM_Stop+0xc6>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009adc:	e013      	b.n	8009b06 <HAL_TIM_PWM_Stop+0xee>
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	2b0c      	cmp	r3, #12
 8009ae2:	d104      	bne.n	8009aee <HAL_TIM_PWM_Stop+0xd6>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009aec:	e00b      	b.n	8009b06 <HAL_TIM_PWM_Stop+0xee>
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	2b10      	cmp	r3, #16
 8009af2:	d104      	bne.n	8009afe <HAL_TIM_PWM_Stop+0xe6>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009afc:	e003      	b.n	8009b06 <HAL_TIM_PWM_Stop+0xee>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	40010000 	.word	0x40010000
 8009b14:	40010400 	.word	0x40010400

08009b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	f003 0302 	and.w	r3, r3, #2
 8009b2a:	2b02      	cmp	r3, #2
 8009b2c:	d122      	bne.n	8009b74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	f003 0302 	and.w	r3, r3, #2
 8009b38:	2b02      	cmp	r3, #2
 8009b3a:	d11b      	bne.n	8009b74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f06f 0202 	mvn.w	r2, #2
 8009b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	699b      	ldr	r3, [r3, #24]
 8009b52:	f003 0303 	and.w	r3, r3, #3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d003      	beq.n	8009b62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 fae4 	bl	800a128 <HAL_TIM_IC_CaptureCallback>
 8009b60:	e005      	b.n	8009b6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fad6 	bl	800a114 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 fae7 	bl	800a13c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	f003 0304 	and.w	r3, r3, #4
 8009b7e:	2b04      	cmp	r3, #4
 8009b80:	d122      	bne.n	8009bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	f003 0304 	and.w	r3, r3, #4
 8009b8c:	2b04      	cmp	r3, #4
 8009b8e:	d11b      	bne.n	8009bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f06f 0204 	mvn.w	r2, #4
 8009b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2202      	movs	r2, #2
 8009b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	699b      	ldr	r3, [r3, #24]
 8009ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d003      	beq.n	8009bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 faba 	bl	800a128 <HAL_TIM_IC_CaptureCallback>
 8009bb4:	e005      	b.n	8009bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 faac 	bl	800a114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 fabd 	bl	800a13c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	f003 0308 	and.w	r3, r3, #8
 8009bd2:	2b08      	cmp	r3, #8
 8009bd4:	d122      	bne.n	8009c1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	f003 0308 	and.w	r3, r3, #8
 8009be0:	2b08      	cmp	r3, #8
 8009be2:	d11b      	bne.n	8009c1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f06f 0208 	mvn.w	r2, #8
 8009bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2204      	movs	r2, #4
 8009bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	69db      	ldr	r3, [r3, #28]
 8009bfa:	f003 0303 	and.w	r3, r3, #3
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d003      	beq.n	8009c0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 fa90 	bl	800a128 <HAL_TIM_IC_CaptureCallback>
 8009c08:	e005      	b.n	8009c16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fa82 	bl	800a114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fa93 	bl	800a13c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	f003 0310 	and.w	r3, r3, #16
 8009c26:	2b10      	cmp	r3, #16
 8009c28:	d122      	bne.n	8009c70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	f003 0310 	and.w	r3, r3, #16
 8009c34:	2b10      	cmp	r3, #16
 8009c36:	d11b      	bne.n	8009c70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f06f 0210 	mvn.w	r2, #16
 8009c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2208      	movs	r2, #8
 8009c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	69db      	ldr	r3, [r3, #28]
 8009c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d003      	beq.n	8009c5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 fa66 	bl	800a128 <HAL_TIM_IC_CaptureCallback>
 8009c5c:	e005      	b.n	8009c6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fa58 	bl	800a114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fa69 	bl	800a13c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	f003 0301 	and.w	r3, r3, #1
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d10e      	bne.n	8009c9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	f003 0301 	and.w	r3, r3, #1
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d107      	bne.n	8009c9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f06f 0201 	mvn.w	r2, #1
 8009c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7f9 fa54 	bl	8003144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ca6:	2b80      	cmp	r3, #128	@ 0x80
 8009ca8:	d10e      	bne.n	8009cc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cb4:	2b80      	cmp	r3, #128	@ 0x80
 8009cb6:	d107      	bne.n	8009cc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 ff22 	bl	800ab0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cd6:	d10e      	bne.n	8009cf6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ce2:	2b80      	cmp	r3, #128	@ 0x80
 8009ce4:	d107      	bne.n	8009cf6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 ff15 	bl	800ab20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d00:	2b40      	cmp	r3, #64	@ 0x40
 8009d02:	d10e      	bne.n	8009d22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d0e:	2b40      	cmp	r3, #64	@ 0x40
 8009d10:	d107      	bne.n	8009d22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fa17 	bl	800a150 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	691b      	ldr	r3, [r3, #16]
 8009d28:	f003 0320 	and.w	r3, r3, #32
 8009d2c:	2b20      	cmp	r3, #32
 8009d2e:	d10e      	bne.n	8009d4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	f003 0320 	and.w	r3, r3, #32
 8009d3a:	2b20      	cmp	r3, #32
 8009d3c:	d107      	bne.n	8009d4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f06f 0220 	mvn.w	r2, #32
 8009d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 fed5 	bl	800aaf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d4e:	bf00      	nop
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
	...

08009d58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d64:	2300      	movs	r3, #0
 8009d66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d101      	bne.n	8009d76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009d72:	2302      	movs	r3, #2
 8009d74:	e0ff      	b.n	8009f76 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2b14      	cmp	r3, #20
 8009d82:	f200 80f0 	bhi.w	8009f66 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009d86:	a201      	add	r2, pc, #4	@ (adr r2, 8009d8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d8c:	08009de1 	.word	0x08009de1
 8009d90:	08009f67 	.word	0x08009f67
 8009d94:	08009f67 	.word	0x08009f67
 8009d98:	08009f67 	.word	0x08009f67
 8009d9c:	08009e21 	.word	0x08009e21
 8009da0:	08009f67 	.word	0x08009f67
 8009da4:	08009f67 	.word	0x08009f67
 8009da8:	08009f67 	.word	0x08009f67
 8009dac:	08009e63 	.word	0x08009e63
 8009db0:	08009f67 	.word	0x08009f67
 8009db4:	08009f67 	.word	0x08009f67
 8009db8:	08009f67 	.word	0x08009f67
 8009dbc:	08009ea3 	.word	0x08009ea3
 8009dc0:	08009f67 	.word	0x08009f67
 8009dc4:	08009f67 	.word	0x08009f67
 8009dc8:	08009f67 	.word	0x08009f67
 8009dcc:	08009ee5 	.word	0x08009ee5
 8009dd0:	08009f67 	.word	0x08009f67
 8009dd4:	08009f67 	.word	0x08009f67
 8009dd8:	08009f67 	.word	0x08009f67
 8009ddc:	08009f25 	.word	0x08009f25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	68b9      	ldr	r1, [r7, #8]
 8009de6:	4618      	mov	r0, r3
 8009de8:	f000 fa5c 	bl	800a2a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	699a      	ldr	r2, [r3, #24]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f042 0208 	orr.w	r2, r2, #8
 8009dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	699a      	ldr	r2, [r3, #24]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f022 0204 	bic.w	r2, r2, #4
 8009e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6999      	ldr	r1, [r3, #24]
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	691a      	ldr	r2, [r3, #16]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	430a      	orrs	r2, r1
 8009e1c:	619a      	str	r2, [r3, #24]
      break;
 8009e1e:	e0a5      	b.n	8009f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	68b9      	ldr	r1, [r7, #8]
 8009e26:	4618      	mov	r0, r3
 8009e28:	f000 faae 	bl	800a388 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	699a      	ldr	r2, [r3, #24]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	699a      	ldr	r2, [r3, #24]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6999      	ldr	r1, [r3, #24]
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	021a      	lsls	r2, r3, #8
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	430a      	orrs	r2, r1
 8009e5e:	619a      	str	r2, [r3, #24]
      break;
 8009e60:	e084      	b.n	8009f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68b9      	ldr	r1, [r7, #8]
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f000 fb05 	bl	800a478 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	69da      	ldr	r2, [r3, #28]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f042 0208 	orr.w	r2, r2, #8
 8009e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	69da      	ldr	r2, [r3, #28]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f022 0204 	bic.w	r2, r2, #4
 8009e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	69d9      	ldr	r1, [r3, #28]
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	691a      	ldr	r2, [r3, #16]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	430a      	orrs	r2, r1
 8009e9e:	61da      	str	r2, [r3, #28]
      break;
 8009ea0:	e064      	b.n	8009f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68b9      	ldr	r1, [r7, #8]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f000 fb5b 	bl	800a564 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	69da      	ldr	r2, [r3, #28]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ebc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	69da      	ldr	r2, [r3, #28]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	69d9      	ldr	r1, [r3, #28]
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	021a      	lsls	r2, r3, #8
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	430a      	orrs	r2, r1
 8009ee0:	61da      	str	r2, [r3, #28]
      break;
 8009ee2:	e043      	b.n	8009f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68b9      	ldr	r1, [r7, #8]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 fb92 	bl	800a614 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f042 0208 	orr.w	r2, r2, #8
 8009efe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f022 0204 	bic.w	r2, r2, #4
 8009f0e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	691a      	ldr	r2, [r3, #16]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	430a      	orrs	r2, r1
 8009f20:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009f22:	e023      	b.n	8009f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	68b9      	ldr	r1, [r7, #8]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f000 fbc4 	bl	800a6b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f3e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f4e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	021a      	lsls	r2, r3, #8
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	430a      	orrs	r2, r1
 8009f62:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009f64:	e002      	b.n	8009f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	75fb      	strb	r3, [r7, #23]
      break;
 8009f6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3718      	adds	r7, #24
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop

08009f80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d101      	bne.n	8009f9c <HAL_TIM_ConfigClockSource+0x1c>
 8009f98:	2302      	movs	r3, #2
 8009f9a:	e0b4      	b.n	800a106 <HAL_TIM_ConfigClockSource+0x186>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009fb4:	68ba      	ldr	r2, [r7, #8]
 8009fb6:	4b56      	ldr	r3, [pc, #344]	@ (800a110 <HAL_TIM_ConfigClockSource+0x190>)
 8009fb8:	4013      	ands	r3, r2
 8009fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009fc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	68ba      	ldr	r2, [r7, #8]
 8009fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fd4:	d03e      	beq.n	800a054 <HAL_TIM_ConfigClockSource+0xd4>
 8009fd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fda:	f200 8087 	bhi.w	800a0ec <HAL_TIM_ConfigClockSource+0x16c>
 8009fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fe2:	f000 8086 	beq.w	800a0f2 <HAL_TIM_ConfigClockSource+0x172>
 8009fe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fea:	d87f      	bhi.n	800a0ec <HAL_TIM_ConfigClockSource+0x16c>
 8009fec:	2b70      	cmp	r3, #112	@ 0x70
 8009fee:	d01a      	beq.n	800a026 <HAL_TIM_ConfigClockSource+0xa6>
 8009ff0:	2b70      	cmp	r3, #112	@ 0x70
 8009ff2:	d87b      	bhi.n	800a0ec <HAL_TIM_ConfigClockSource+0x16c>
 8009ff4:	2b60      	cmp	r3, #96	@ 0x60
 8009ff6:	d050      	beq.n	800a09a <HAL_TIM_ConfigClockSource+0x11a>
 8009ff8:	2b60      	cmp	r3, #96	@ 0x60
 8009ffa:	d877      	bhi.n	800a0ec <HAL_TIM_ConfigClockSource+0x16c>
 8009ffc:	2b50      	cmp	r3, #80	@ 0x50
 8009ffe:	d03c      	beq.n	800a07a <HAL_TIM_ConfigClockSource+0xfa>
 800a000:	2b50      	cmp	r3, #80	@ 0x50
 800a002:	d873      	bhi.n	800a0ec <HAL_TIM_ConfigClockSource+0x16c>
 800a004:	2b40      	cmp	r3, #64	@ 0x40
 800a006:	d058      	beq.n	800a0ba <HAL_TIM_ConfigClockSource+0x13a>
 800a008:	2b40      	cmp	r3, #64	@ 0x40
 800a00a:	d86f      	bhi.n	800a0ec <HAL_TIM_ConfigClockSource+0x16c>
 800a00c:	2b30      	cmp	r3, #48	@ 0x30
 800a00e:	d064      	beq.n	800a0da <HAL_TIM_ConfigClockSource+0x15a>
 800a010:	2b30      	cmp	r3, #48	@ 0x30
 800a012:	d86b      	bhi.n	800a0ec <HAL_TIM_ConfigClockSource+0x16c>
 800a014:	2b20      	cmp	r3, #32
 800a016:	d060      	beq.n	800a0da <HAL_TIM_ConfigClockSource+0x15a>
 800a018:	2b20      	cmp	r3, #32
 800a01a:	d867      	bhi.n	800a0ec <HAL_TIM_ConfigClockSource+0x16c>
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d05c      	beq.n	800a0da <HAL_TIM_ConfigClockSource+0x15a>
 800a020:	2b10      	cmp	r3, #16
 800a022:	d05a      	beq.n	800a0da <HAL_TIM_ConfigClockSource+0x15a>
 800a024:	e062      	b.n	800a0ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a036:	f000 fc0d 	bl	800a854 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a048:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	68ba      	ldr	r2, [r7, #8]
 800a050:	609a      	str	r2, [r3, #8]
      break;
 800a052:	e04f      	b.n	800a0f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a064:	f000 fbf6 	bl	800a854 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	689a      	ldr	r2, [r3, #8]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a076:	609a      	str	r2, [r3, #8]
      break;
 800a078:	e03c      	b.n	800a0f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a086:	461a      	mov	r2, r3
 800a088:	f000 fb6a 	bl	800a760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2150      	movs	r1, #80	@ 0x50
 800a092:	4618      	mov	r0, r3
 800a094:	f000 fbc3 	bl	800a81e <TIM_ITRx_SetConfig>
      break;
 800a098:	e02c      	b.n	800a0f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	f000 fb89 	bl	800a7be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2160      	movs	r1, #96	@ 0x60
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f000 fbb3 	bl	800a81e <TIM_ITRx_SetConfig>
      break;
 800a0b8:	e01c      	b.n	800a0f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	f000 fb4a 	bl	800a760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2140      	movs	r1, #64	@ 0x40
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f000 fba3 	bl	800a81e <TIM_ITRx_SetConfig>
      break;
 800a0d8:	e00c      	b.n	800a0f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	4610      	mov	r0, r2
 800a0e6:	f000 fb9a 	bl	800a81e <TIM_ITRx_SetConfig>
      break;
 800a0ea:	e003      	b.n	800a0f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	73fb      	strb	r3, [r7, #15]
      break;
 800a0f0:	e000      	b.n	800a0f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a0f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a104:	7bfb      	ldrb	r3, [r7, #15]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	fffeff88 	.word	0xfffeff88

0800a114 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a11c:	bf00      	nop
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a144:	bf00      	nop
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a158:	bf00      	nop
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a40      	ldr	r2, [pc, #256]	@ (800a278 <TIM_Base_SetConfig+0x114>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d013      	beq.n	800a1a4 <TIM_Base_SetConfig+0x40>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a182:	d00f      	beq.n	800a1a4 <TIM_Base_SetConfig+0x40>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4a3d      	ldr	r2, [pc, #244]	@ (800a27c <TIM_Base_SetConfig+0x118>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d00b      	beq.n	800a1a4 <TIM_Base_SetConfig+0x40>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	4a3c      	ldr	r2, [pc, #240]	@ (800a280 <TIM_Base_SetConfig+0x11c>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d007      	beq.n	800a1a4 <TIM_Base_SetConfig+0x40>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4a3b      	ldr	r2, [pc, #236]	@ (800a284 <TIM_Base_SetConfig+0x120>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d003      	beq.n	800a1a4 <TIM_Base_SetConfig+0x40>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a3a      	ldr	r2, [pc, #232]	@ (800a288 <TIM_Base_SetConfig+0x124>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d108      	bne.n	800a1b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a2f      	ldr	r2, [pc, #188]	@ (800a278 <TIM_Base_SetConfig+0x114>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d02b      	beq.n	800a216 <TIM_Base_SetConfig+0xb2>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1c4:	d027      	beq.n	800a216 <TIM_Base_SetConfig+0xb2>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4a2c      	ldr	r2, [pc, #176]	@ (800a27c <TIM_Base_SetConfig+0x118>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d023      	beq.n	800a216 <TIM_Base_SetConfig+0xb2>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4a2b      	ldr	r2, [pc, #172]	@ (800a280 <TIM_Base_SetConfig+0x11c>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d01f      	beq.n	800a216 <TIM_Base_SetConfig+0xb2>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a2a      	ldr	r2, [pc, #168]	@ (800a284 <TIM_Base_SetConfig+0x120>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d01b      	beq.n	800a216 <TIM_Base_SetConfig+0xb2>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a29      	ldr	r2, [pc, #164]	@ (800a288 <TIM_Base_SetConfig+0x124>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d017      	beq.n	800a216 <TIM_Base_SetConfig+0xb2>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a28      	ldr	r2, [pc, #160]	@ (800a28c <TIM_Base_SetConfig+0x128>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d013      	beq.n	800a216 <TIM_Base_SetConfig+0xb2>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a27      	ldr	r2, [pc, #156]	@ (800a290 <TIM_Base_SetConfig+0x12c>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d00f      	beq.n	800a216 <TIM_Base_SetConfig+0xb2>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	4a26      	ldr	r2, [pc, #152]	@ (800a294 <TIM_Base_SetConfig+0x130>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d00b      	beq.n	800a216 <TIM_Base_SetConfig+0xb2>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4a25      	ldr	r2, [pc, #148]	@ (800a298 <TIM_Base_SetConfig+0x134>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d007      	beq.n	800a216 <TIM_Base_SetConfig+0xb2>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	4a24      	ldr	r2, [pc, #144]	@ (800a29c <TIM_Base_SetConfig+0x138>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d003      	beq.n	800a216 <TIM_Base_SetConfig+0xb2>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	4a23      	ldr	r2, [pc, #140]	@ (800a2a0 <TIM_Base_SetConfig+0x13c>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d108      	bne.n	800a228 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a21c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	68fa      	ldr	r2, [r7, #12]
 800a224:	4313      	orrs	r3, r2
 800a226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	695b      	ldr	r3, [r3, #20]
 800a232:	4313      	orrs	r3, r2
 800a234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	689a      	ldr	r2, [r3, #8]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4a0a      	ldr	r2, [pc, #40]	@ (800a278 <TIM_Base_SetConfig+0x114>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d003      	beq.n	800a25c <TIM_Base_SetConfig+0xf8>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	4a0c      	ldr	r2, [pc, #48]	@ (800a288 <TIM_Base_SetConfig+0x124>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d103      	bne.n	800a264 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	691a      	ldr	r2, [r3, #16]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2201      	movs	r2, #1
 800a268:	615a      	str	r2, [r3, #20]
}
 800a26a:	bf00      	nop
 800a26c:	3714      	adds	r7, #20
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr
 800a276:	bf00      	nop
 800a278:	40010000 	.word	0x40010000
 800a27c:	40000400 	.word	0x40000400
 800a280:	40000800 	.word	0x40000800
 800a284:	40000c00 	.word	0x40000c00
 800a288:	40010400 	.word	0x40010400
 800a28c:	40014000 	.word	0x40014000
 800a290:	40014400 	.word	0x40014400
 800a294:	40014800 	.word	0x40014800
 800a298:	40001800 	.word	0x40001800
 800a29c:	40001c00 	.word	0x40001c00
 800a2a0:	40002000 	.word	0x40002000

0800a2a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b087      	sub	sp, #28
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a1b      	ldr	r3, [r3, #32]
 800a2b2:	f023 0201 	bic.w	r2, r3, #1
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6a1b      	ldr	r3, [r3, #32]
 800a2be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	699b      	ldr	r3, [r3, #24]
 800a2ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	4b2b      	ldr	r3, [pc, #172]	@ (800a37c <TIM_OC1_SetConfig+0xd8>)
 800a2d0:	4013      	ands	r3, r2
 800a2d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f023 0303 	bic.w	r3, r3, #3
 800a2da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	f023 0302 	bic.w	r3, r3, #2
 800a2ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	697a      	ldr	r2, [r7, #20]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a21      	ldr	r2, [pc, #132]	@ (800a380 <TIM_OC1_SetConfig+0xdc>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d003      	beq.n	800a308 <TIM_OC1_SetConfig+0x64>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4a20      	ldr	r2, [pc, #128]	@ (800a384 <TIM_OC1_SetConfig+0xe0>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d10c      	bne.n	800a322 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	f023 0308 	bic.w	r3, r3, #8
 800a30e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	697a      	ldr	r2, [r7, #20]
 800a316:	4313      	orrs	r3, r2
 800a318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	f023 0304 	bic.w	r3, r3, #4
 800a320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	4a16      	ldr	r2, [pc, #88]	@ (800a380 <TIM_OC1_SetConfig+0xdc>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d003      	beq.n	800a332 <TIM_OC1_SetConfig+0x8e>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4a15      	ldr	r2, [pc, #84]	@ (800a384 <TIM_OC1_SetConfig+0xe0>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d111      	bne.n	800a356 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	695b      	ldr	r3, [r3, #20]
 800a346:	693a      	ldr	r2, [r7, #16]
 800a348:	4313      	orrs	r3, r2
 800a34a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	699b      	ldr	r3, [r3, #24]
 800a350:	693a      	ldr	r2, [r7, #16]
 800a352:	4313      	orrs	r3, r2
 800a354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	693a      	ldr	r2, [r7, #16]
 800a35a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	685a      	ldr	r2, [r3, #4]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	697a      	ldr	r2, [r7, #20]
 800a36e:	621a      	str	r2, [r3, #32]
}
 800a370:	bf00      	nop
 800a372:	371c      	adds	r7, #28
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr
 800a37c:	fffeff8f 	.word	0xfffeff8f
 800a380:	40010000 	.word	0x40010000
 800a384:	40010400 	.word	0x40010400

0800a388 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a388:	b480      	push	{r7}
 800a38a:	b087      	sub	sp, #28
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	f023 0210 	bic.w	r2, r3, #16
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a1b      	ldr	r3, [r3, #32]
 800a3a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	699b      	ldr	r3, [r3, #24]
 800a3ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	4b2e      	ldr	r3, [pc, #184]	@ (800a46c <TIM_OC2_SetConfig+0xe4>)
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	021b      	lsls	r3, r3, #8
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	f023 0320 	bic.w	r3, r3, #32
 800a3d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	011b      	lsls	r3, r3, #4
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a23      	ldr	r2, [pc, #140]	@ (800a470 <TIM_OC2_SetConfig+0xe8>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d003      	beq.n	800a3f0 <TIM_OC2_SetConfig+0x68>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4a22      	ldr	r2, [pc, #136]	@ (800a474 <TIM_OC2_SetConfig+0xec>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d10d      	bne.n	800a40c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	011b      	lsls	r3, r3, #4
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	4313      	orrs	r3, r2
 800a402:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a40a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4a18      	ldr	r2, [pc, #96]	@ (800a470 <TIM_OC2_SetConfig+0xe8>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d003      	beq.n	800a41c <TIM_OC2_SetConfig+0x94>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	4a17      	ldr	r2, [pc, #92]	@ (800a474 <TIM_OC2_SetConfig+0xec>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d113      	bne.n	800a444 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a422:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a42a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	695b      	ldr	r3, [r3, #20]
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	693a      	ldr	r2, [r7, #16]
 800a434:	4313      	orrs	r3, r2
 800a436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	699b      	ldr	r3, [r3, #24]
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	693a      	ldr	r2, [r7, #16]
 800a440:	4313      	orrs	r3, r2
 800a442:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	693a      	ldr	r2, [r7, #16]
 800a448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	685a      	ldr	r2, [r3, #4]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	697a      	ldr	r2, [r7, #20]
 800a45c:	621a      	str	r2, [r3, #32]
}
 800a45e:	bf00      	nop
 800a460:	371c      	adds	r7, #28
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	feff8fff 	.word	0xfeff8fff
 800a470:	40010000 	.word	0x40010000
 800a474:	40010400 	.word	0x40010400

0800a478 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a478:	b480      	push	{r7}
 800a47a:	b087      	sub	sp, #28
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6a1b      	ldr	r3, [r3, #32]
 800a486:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a1b      	ldr	r3, [r3, #32]
 800a492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	69db      	ldr	r3, [r3, #28]
 800a49e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	4b2d      	ldr	r3, [pc, #180]	@ (800a558 <TIM_OC3_SetConfig+0xe0>)
 800a4a4:	4013      	ands	r3, r2
 800a4a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f023 0303 	bic.w	r3, r3, #3
 800a4ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a4c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	021b      	lsls	r3, r3, #8
 800a4c8:	697a      	ldr	r2, [r7, #20]
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4a22      	ldr	r2, [pc, #136]	@ (800a55c <TIM_OC3_SetConfig+0xe4>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d003      	beq.n	800a4de <TIM_OC3_SetConfig+0x66>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4a21      	ldr	r2, [pc, #132]	@ (800a560 <TIM_OC3_SetConfig+0xe8>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d10d      	bne.n	800a4fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a4e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	021b      	lsls	r3, r3, #8
 800a4ec:	697a      	ldr	r2, [r7, #20]
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a4f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4a17      	ldr	r2, [pc, #92]	@ (800a55c <TIM_OC3_SetConfig+0xe4>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d003      	beq.n	800a50a <TIM_OC3_SetConfig+0x92>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4a16      	ldr	r2, [pc, #88]	@ (800a560 <TIM_OC3_SetConfig+0xe8>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d113      	bne.n	800a532 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	695b      	ldr	r3, [r3, #20]
 800a51e:	011b      	lsls	r3, r3, #4
 800a520:	693a      	ldr	r2, [r7, #16]
 800a522:	4313      	orrs	r3, r2
 800a524:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	699b      	ldr	r3, [r3, #24]
 800a52a:	011b      	lsls	r3, r3, #4
 800a52c:	693a      	ldr	r2, [r7, #16]
 800a52e:	4313      	orrs	r3, r2
 800a530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	693a      	ldr	r2, [r7, #16]
 800a536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	685a      	ldr	r2, [r3, #4]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	697a      	ldr	r2, [r7, #20]
 800a54a:	621a      	str	r2, [r3, #32]
}
 800a54c:	bf00      	nop
 800a54e:	371c      	adds	r7, #28
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr
 800a558:	fffeff8f 	.word	0xfffeff8f
 800a55c:	40010000 	.word	0x40010000
 800a560:	40010400 	.word	0x40010400

0800a564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a564:	b480      	push	{r7}
 800a566:	b087      	sub	sp, #28
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a1b      	ldr	r3, [r3, #32]
 800a572:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a1b      	ldr	r3, [r3, #32]
 800a57e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	69db      	ldr	r3, [r3, #28]
 800a58a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	4b1e      	ldr	r3, [pc, #120]	@ (800a608 <TIM_OC4_SetConfig+0xa4>)
 800a590:	4013      	ands	r3, r2
 800a592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a59a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	021b      	lsls	r3, r3, #8
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a5ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	031b      	lsls	r3, r3, #12
 800a5b6:	693a      	ldr	r2, [r7, #16]
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4a13      	ldr	r2, [pc, #76]	@ (800a60c <TIM_OC4_SetConfig+0xa8>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d003      	beq.n	800a5cc <TIM_OC4_SetConfig+0x68>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a12      	ldr	r2, [pc, #72]	@ (800a610 <TIM_OC4_SetConfig+0xac>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d109      	bne.n	800a5e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a5d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	695b      	ldr	r3, [r3, #20]
 800a5d8:	019b      	lsls	r3, r3, #6
 800a5da:	697a      	ldr	r2, [r7, #20]
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	697a      	ldr	r2, [r7, #20]
 800a5e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	685a      	ldr	r2, [r3, #4]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	693a      	ldr	r2, [r7, #16]
 800a5f8:	621a      	str	r2, [r3, #32]
}
 800a5fa:	bf00      	nop
 800a5fc:	371c      	adds	r7, #28
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop
 800a608:	feff8fff 	.word	0xfeff8fff
 800a60c:	40010000 	.word	0x40010000
 800a610:	40010400 	.word	0x40010400

0800a614 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a614:	b480      	push	{r7}
 800a616:	b087      	sub	sp, #28
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a1b      	ldr	r3, [r3, #32]
 800a62e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a63a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	4b1b      	ldr	r3, [pc, #108]	@ (800a6ac <TIM_OC5_SetConfig+0x98>)
 800a640:	4013      	ands	r3, r2
 800a642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	68fa      	ldr	r2, [r7, #12]
 800a64a:	4313      	orrs	r3, r2
 800a64c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a654:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	041b      	lsls	r3, r3, #16
 800a65c:	693a      	ldr	r2, [r7, #16]
 800a65e:	4313      	orrs	r3, r2
 800a660:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4a12      	ldr	r2, [pc, #72]	@ (800a6b0 <TIM_OC5_SetConfig+0x9c>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d003      	beq.n	800a672 <TIM_OC5_SetConfig+0x5e>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4a11      	ldr	r2, [pc, #68]	@ (800a6b4 <TIM_OC5_SetConfig+0xa0>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d109      	bne.n	800a686 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a678:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	695b      	ldr	r3, [r3, #20]
 800a67e:	021b      	lsls	r3, r3, #8
 800a680:	697a      	ldr	r2, [r7, #20]
 800a682:	4313      	orrs	r3, r2
 800a684:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	697a      	ldr	r2, [r7, #20]
 800a68a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	68fa      	ldr	r2, [r7, #12]
 800a690:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	685a      	ldr	r2, [r3, #4]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	693a      	ldr	r2, [r7, #16]
 800a69e:	621a      	str	r2, [r3, #32]
}
 800a6a0:	bf00      	nop
 800a6a2:	371c      	adds	r7, #28
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr
 800a6ac:	fffeff8f 	.word	0xfffeff8f
 800a6b0:	40010000 	.word	0x40010000
 800a6b4:	40010400 	.word	0x40010400

0800a6b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b087      	sub	sp, #28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a1b      	ldr	r3, [r3, #32]
 800a6c6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a1b      	ldr	r3, [r3, #32]
 800a6d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	4b1c      	ldr	r3, [pc, #112]	@ (800a754 <TIM_OC6_SetConfig+0x9c>)
 800a6e4:	4013      	ands	r3, r2
 800a6e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	021b      	lsls	r3, r3, #8
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a6fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	051b      	lsls	r3, r3, #20
 800a702:	693a      	ldr	r2, [r7, #16]
 800a704:	4313      	orrs	r3, r2
 800a706:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	4a13      	ldr	r2, [pc, #76]	@ (800a758 <TIM_OC6_SetConfig+0xa0>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d003      	beq.n	800a718 <TIM_OC6_SetConfig+0x60>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	4a12      	ldr	r2, [pc, #72]	@ (800a75c <TIM_OC6_SetConfig+0xa4>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d109      	bne.n	800a72c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a71e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	695b      	ldr	r3, [r3, #20]
 800a724:	029b      	lsls	r3, r3, #10
 800a726:	697a      	ldr	r2, [r7, #20]
 800a728:	4313      	orrs	r3, r2
 800a72a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	697a      	ldr	r2, [r7, #20]
 800a730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	693a      	ldr	r2, [r7, #16]
 800a744:	621a      	str	r2, [r3, #32]
}
 800a746:	bf00      	nop
 800a748:	371c      	adds	r7, #28
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	feff8fff 	.word	0xfeff8fff
 800a758:	40010000 	.word	0x40010000
 800a75c:	40010400 	.word	0x40010400

0800a760 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a760:	b480      	push	{r7}
 800a762:	b087      	sub	sp, #28
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6a1b      	ldr	r3, [r3, #32]
 800a770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	6a1b      	ldr	r3, [r3, #32]
 800a776:	f023 0201 	bic.w	r2, r3, #1
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	699b      	ldr	r3, [r3, #24]
 800a782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a78a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	011b      	lsls	r3, r3, #4
 800a790:	693a      	ldr	r2, [r7, #16]
 800a792:	4313      	orrs	r3, r2
 800a794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	f023 030a 	bic.w	r3, r3, #10
 800a79c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a79e:	697a      	ldr	r2, [r7, #20]
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	693a      	ldr	r2, [r7, #16]
 800a7aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	697a      	ldr	r2, [r7, #20]
 800a7b0:	621a      	str	r2, [r3, #32]
}
 800a7b2:	bf00      	nop
 800a7b4:	371c      	adds	r7, #28
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b087      	sub	sp, #28
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	60f8      	str	r0, [r7, #12]
 800a7c6:	60b9      	str	r1, [r7, #8]
 800a7c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6a1b      	ldr	r3, [r3, #32]
 800a7ce:	f023 0210 	bic.w	r2, r3, #16
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	699b      	ldr	r3, [r3, #24]
 800a7da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6a1b      	ldr	r3, [r3, #32]
 800a7e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a7e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	031b      	lsls	r3, r3, #12
 800a7ee:	697a      	ldr	r2, [r7, #20]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a7fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	011b      	lsls	r3, r3, #4
 800a800:	693a      	ldr	r2, [r7, #16]
 800a802:	4313      	orrs	r3, r2
 800a804:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	697a      	ldr	r2, [r7, #20]
 800a80a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	693a      	ldr	r2, [r7, #16]
 800a810:	621a      	str	r2, [r3, #32]
}
 800a812:	bf00      	nop
 800a814:	371c      	adds	r7, #28
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr

0800a81e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a81e:	b480      	push	{r7}
 800a820:	b085      	sub	sp, #20
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
 800a826:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a834:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a836:	683a      	ldr	r2, [r7, #0]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	4313      	orrs	r3, r2
 800a83c:	f043 0307 	orr.w	r3, r3, #7
 800a840:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	609a      	str	r2, [r3, #8]
}
 800a848:	bf00      	nop
 800a84a:	3714      	adds	r7, #20
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a854:	b480      	push	{r7}
 800a856:	b087      	sub	sp, #28
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	607a      	str	r2, [r7, #4]
 800a860:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a86e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	021a      	lsls	r2, r3, #8
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	431a      	orrs	r2, r3
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	4313      	orrs	r3, r2
 800a87c:	697a      	ldr	r2, [r7, #20]
 800a87e:	4313      	orrs	r3, r2
 800a880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	697a      	ldr	r2, [r7, #20]
 800a886:	609a      	str	r2, [r3, #8]
}
 800a888:	bf00      	nop
 800a88a:	371c      	adds	r7, #28
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a894:	b480      	push	{r7}
 800a896:	b087      	sub	sp, #28
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	60b9      	str	r1, [r7, #8]
 800a89e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	f003 031f 	and.w	r3, r3, #31
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6a1a      	ldr	r2, [r3, #32]
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	43db      	mvns	r3, r3
 800a8b6:	401a      	ands	r2, r3
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6a1a      	ldr	r2, [r3, #32]
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	f003 031f 	and.w	r3, r3, #31
 800a8c6:	6879      	ldr	r1, [r7, #4]
 800a8c8:	fa01 f303 	lsl.w	r3, r1, r3
 800a8cc:	431a      	orrs	r2, r3
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	621a      	str	r2, [r3, #32]
}
 800a8d2:	bf00      	nop
 800a8d4:	371c      	adds	r7, #28
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr
	...

0800a8e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b085      	sub	sp, #20
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d101      	bne.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a8f4:	2302      	movs	r3, #2
 800a8f6:	e06d      	b.n	800a9d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2202      	movs	r2, #2
 800a904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4a30      	ldr	r2, [pc, #192]	@ (800a9e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d004      	beq.n	800a92c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a2f      	ldr	r2, [pc, #188]	@ (800a9e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d108      	bne.n	800a93e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a932:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	4313      	orrs	r3, r2
 800a93c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a944:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a20      	ldr	r2, [pc, #128]	@ (800a9e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d022      	beq.n	800a9a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a96a:	d01d      	beq.n	800a9a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a1d      	ldr	r2, [pc, #116]	@ (800a9e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d018      	beq.n	800a9a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a1c      	ldr	r2, [pc, #112]	@ (800a9ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d013      	beq.n	800a9a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a1a      	ldr	r2, [pc, #104]	@ (800a9f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d00e      	beq.n	800a9a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a15      	ldr	r2, [pc, #84]	@ (800a9e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d009      	beq.n	800a9a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a16      	ldr	r2, [pc, #88]	@ (800a9f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d004      	beq.n	800a9a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a15      	ldr	r2, [pc, #84]	@ (800a9f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d10c      	bne.n	800a9c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	689b      	ldr	r3, [r3, #8]
 800a9b4:	68ba      	ldr	r2, [r7, #8]
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	68ba      	ldr	r2, [r7, #8]
 800a9c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3714      	adds	r7, #20
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr
 800a9e0:	40010000 	.word	0x40010000
 800a9e4:	40010400 	.word	0x40010400
 800a9e8:	40000400 	.word	0x40000400
 800a9ec:	40000800 	.word	0x40000800
 800a9f0:	40000c00 	.word	0x40000c00
 800a9f4:	40014000 	.word	0x40014000
 800a9f8:	40001800 	.word	0x40001800

0800a9fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b085      	sub	sp, #20
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aa06:	2300      	movs	r3, #0
 800aa08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d101      	bne.n	800aa18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aa14:	2302      	movs	r3, #2
 800aa16:	e065      	b.n	800aae4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4313      	orrs	r3, r2
 800aa56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	695b      	ldr	r3, [r3, #20]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	699b      	ldr	r3, [r3, #24]
 800aa8c:	041b      	lsls	r3, r3, #16
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a16      	ldr	r2, [pc, #88]	@ (800aaf0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d004      	beq.n	800aaa6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a14      	ldr	r2, [pc, #80]	@ (800aaf4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d115      	bne.n	800aad2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aab0:	051b      	lsls	r3, r3, #20
 800aab2:	4313      	orrs	r3, r2
 800aab4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	69db      	ldr	r3, [r3, #28]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	4313      	orrs	r3, r2
 800aad0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr
 800aaf0:	40010000 	.word	0x40010000
 800aaf4:	40010400 	.word	0x40010400

0800aaf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ab28:	bf00      	nop
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b082      	sub	sp, #8
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d101      	bne.n	800ab46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab42:	2301      	movs	r3, #1
 800ab44:	e040      	b.n	800abc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d106      	bne.n	800ab5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f7fa fffc 	bl	8005b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2224      	movs	r2, #36	@ 0x24
 800ab60:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f022 0201 	bic.w	r2, r2, #1
 800ab70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 fbe6 	bl	800b344 <UART_SetConfig>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d101      	bne.n	800ab82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	e022      	b.n	800abc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d002      	beq.n	800ab90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 fe3e 	bl	800b80c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	685a      	ldr	r2, [r3, #4]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ab9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	689a      	ldr	r2, [r3, #8]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800abae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f042 0201 	orr.w	r2, r2, #1
 800abbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 fec5 	bl	800b950 <UART_CheckIdleState>
 800abc6:	4603      	mov	r3, r0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3708      	adds	r7, #8
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b08a      	sub	sp, #40	@ 0x28
 800abd4:	af02      	add	r7, sp, #8
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	603b      	str	r3, [r7, #0]
 800abdc:	4613      	mov	r3, r2
 800abde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800abe4:	2b20      	cmp	r3, #32
 800abe6:	d171      	bne.n	800accc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d002      	beq.n	800abf4 <HAL_UART_Transmit+0x24>
 800abee:	88fb      	ldrh	r3, [r7, #6]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d101      	bne.n	800abf8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	e06a      	b.n	800acce <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2221      	movs	r2, #33	@ 0x21
 800ac04:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ac06:	f7fb f887 	bl	8005d18 <HAL_GetTick>
 800ac0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	88fa      	ldrh	r2, [r7, #6]
 800ac10:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	88fa      	ldrh	r2, [r7, #6]
 800ac18:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac24:	d108      	bne.n	800ac38 <HAL_UART_Transmit+0x68>
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	691b      	ldr	r3, [r3, #16]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d104      	bne.n	800ac38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	61bb      	str	r3, [r7, #24]
 800ac36:	e003      	b.n	800ac40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ac40:	e02c      	b.n	800ac9c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	9300      	str	r3, [sp, #0]
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	2180      	movs	r1, #128	@ 0x80
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f000 feb6 	bl	800b9be <UART_WaitOnFlagUntilTimeout>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d001      	beq.n	800ac5c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800ac58:	2303      	movs	r3, #3
 800ac5a:	e038      	b.n	800acce <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800ac5c:	69fb      	ldr	r3, [r7, #28]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d10b      	bne.n	800ac7a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	881b      	ldrh	r3, [r3, #0]
 800ac66:	461a      	mov	r2, r3
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac70:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	3302      	adds	r3, #2
 800ac76:	61bb      	str	r3, [r7, #24]
 800ac78:	e007      	b.n	800ac8a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	781a      	ldrb	r2, [r3, #0]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ac84:	69fb      	ldr	r3, [r7, #28]
 800ac86:	3301      	adds	r3, #1
 800ac88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	3b01      	subs	r3, #1
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d1cc      	bne.n	800ac42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	9300      	str	r3, [sp, #0]
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	2200      	movs	r2, #0
 800acb0:	2140      	movs	r1, #64	@ 0x40
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f000 fe83 	bl	800b9be <UART_WaitOnFlagUntilTimeout>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d001      	beq.n	800acc2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800acbe:	2303      	movs	r3, #3
 800acc0:	e005      	b.n	800acce <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2220      	movs	r2, #32
 800acc6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800acc8:	2300      	movs	r3, #0
 800acca:	e000      	b.n	800acce <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800accc:	2302      	movs	r3, #2
  }
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3720      	adds	r7, #32
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b08a      	sub	sp, #40	@ 0x28
 800acda:	af00      	add	r7, sp, #0
 800acdc:	60f8      	str	r0, [r7, #12]
 800acde:	60b9      	str	r1, [r7, #8]
 800ace0:	4613      	mov	r3, r2
 800ace2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acea:	2b20      	cmp	r3, #32
 800acec:	d132      	bne.n	800ad54 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d002      	beq.n	800acfa <HAL_UART_Receive_IT+0x24>
 800acf4:	88fb      	ldrh	r3, [r7, #6]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d101      	bne.n	800acfe <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800acfa:	2301      	movs	r3, #1
 800acfc:	e02b      	b.n	800ad56 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d018      	beq.n	800ad44 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	e853 3f00 	ldrex	r3, [r3]
 800ad1e:	613b      	str	r3, [r7, #16]
   return(result);
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ad26:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad30:	623b      	str	r3, [r7, #32]
 800ad32:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad34:	69f9      	ldr	r1, [r7, #28]
 800ad36:	6a3a      	ldr	r2, [r7, #32]
 800ad38:	e841 2300 	strex	r3, r2, [r1]
 800ad3c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1e6      	bne.n	800ad12 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ad44:	88fb      	ldrh	r3, [r7, #6]
 800ad46:	461a      	mov	r2, r3
 800ad48:	68b9      	ldr	r1, [r7, #8]
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f000 fefe 	bl	800bb4c <UART_Start_Receive_IT>
 800ad50:	4603      	mov	r3, r0
 800ad52:	e000      	b.n	800ad56 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800ad54:	2302      	movs	r3, #2
  }
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3728      	adds	r7, #40	@ 0x28
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
	...

0800ad60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b0ba      	sub	sp, #232	@ 0xe8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	69db      	ldr	r3, [r3, #28]
 800ad6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ad8a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ad8e:	4013      	ands	r3, r2
 800ad90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ad94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d115      	bne.n	800adc8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ad9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ada0:	f003 0320 	and.w	r3, r3, #32
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d00f      	beq.n	800adc8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ada8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800adac:	f003 0320 	and.w	r3, r3, #32
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d009      	beq.n	800adc8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f000 8297 	beq.w	800b2ec <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	4798      	blx	r3
      }
      return;
 800adc6:	e291      	b.n	800b2ec <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800adc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800adcc:	2b00      	cmp	r3, #0
 800adce:	f000 8117 	beq.w	800b000 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800add2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800add6:	f003 0301 	and.w	r3, r3, #1
 800adda:	2b00      	cmp	r3, #0
 800addc:	d106      	bne.n	800adec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800adde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ade2:	4b85      	ldr	r3, [pc, #532]	@ (800aff8 <HAL_UART_IRQHandler+0x298>)
 800ade4:	4013      	ands	r3, r2
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	f000 810a 	beq.w	800b000 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800adec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adf0:	f003 0301 	and.w	r3, r3, #1
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d011      	beq.n	800ae1c <HAL_UART_IRQHandler+0xbc>
 800adf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800adfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d00b      	beq.n	800ae1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2201      	movs	r2, #1
 800ae0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae12:	f043 0201 	orr.w	r2, r3, #1
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae20:	f003 0302 	and.w	r3, r3, #2
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d011      	beq.n	800ae4c <HAL_UART_IRQHandler+0xec>
 800ae28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae2c:	f003 0301 	and.w	r3, r3, #1
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00b      	beq.n	800ae4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2202      	movs	r2, #2
 800ae3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae42:	f043 0204 	orr.w	r2, r3, #4
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae50:	f003 0304 	and.w	r3, r3, #4
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d011      	beq.n	800ae7c <HAL_UART_IRQHandler+0x11c>
 800ae58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae5c:	f003 0301 	and.w	r3, r3, #1
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00b      	beq.n	800ae7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2204      	movs	r2, #4
 800ae6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae72:	f043 0202 	orr.w	r2, r3, #2
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae80:	f003 0308 	and.w	r3, r3, #8
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d017      	beq.n	800aeb8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ae88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae8c:	f003 0320 	and.w	r3, r3, #32
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d105      	bne.n	800aea0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ae94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00b      	beq.n	800aeb8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	2208      	movs	r2, #8
 800aea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aeae:	f043 0208 	orr.w	r2, r3, #8
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aeb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aebc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d012      	beq.n	800aeea <HAL_UART_IRQHandler+0x18a>
 800aec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aec8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d00c      	beq.n	800aeea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aed8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aee0:	f043 0220 	orr.w	r2, r3, #32
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f000 81fd 	beq.w	800b2f0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800aef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aefa:	f003 0320 	and.w	r3, r3, #32
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d00d      	beq.n	800af1e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800af02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af06:	f003 0320 	and.w	r3, r3, #32
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d007      	beq.n	800af1e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af12:	2b00      	cmp	r3, #0
 800af14:	d003      	beq.n	800af1e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af32:	2b40      	cmp	r3, #64	@ 0x40
 800af34:	d005      	beq.n	800af42 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800af36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800af3a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d04f      	beq.n	800afe2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 fec8 	bl	800bcd8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af52:	2b40      	cmp	r3, #64	@ 0x40
 800af54:	d141      	bne.n	800afda <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	3308      	adds	r3, #8
 800af5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800af64:	e853 3f00 	ldrex	r3, [r3]
 800af68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800af6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800af70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	3308      	adds	r3, #8
 800af7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800af82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800af86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800af8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800af92:	e841 2300 	strex	r3, r2, [r1]
 800af96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800af9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d1d9      	bne.n	800af56 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d013      	beq.n	800afd2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afae:	4a13      	ldr	r2, [pc, #76]	@ (800affc <HAL_UART_IRQHandler+0x29c>)
 800afb0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7fb f85f 	bl	800607a <HAL_DMA_Abort_IT>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d017      	beq.n	800aff2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800afcc:	4610      	mov	r0, r2
 800afce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afd0:	e00f      	b.n	800aff2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 f9a0 	bl	800b318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afd8:	e00b      	b.n	800aff2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 f99c 	bl	800b318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afe0:	e007      	b.n	800aff2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 f998 	bl	800b318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800aff0:	e17e      	b.n	800b2f0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aff2:	bf00      	nop
    return;
 800aff4:	e17c      	b.n	800b2f0 <HAL_UART_IRQHandler+0x590>
 800aff6:	bf00      	nop
 800aff8:	04000120 	.word	0x04000120
 800affc:	0800bda1 	.word	0x0800bda1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b004:	2b01      	cmp	r3, #1
 800b006:	f040 814c 	bne.w	800b2a2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b00a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b00e:	f003 0310 	and.w	r3, r3, #16
 800b012:	2b00      	cmp	r3, #0
 800b014:	f000 8145 	beq.w	800b2a2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b01c:	f003 0310 	and.w	r3, r3, #16
 800b020:	2b00      	cmp	r3, #0
 800b022:	f000 813e 	beq.w	800b2a2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	2210      	movs	r2, #16
 800b02c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b038:	2b40      	cmp	r3, #64	@ 0x40
 800b03a:	f040 80b6 	bne.w	800b1aa <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b04a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b04e:	2b00      	cmp	r3, #0
 800b050:	f000 8150 	beq.w	800b2f4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b05a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b05e:	429a      	cmp	r2, r3
 800b060:	f080 8148 	bcs.w	800b2f4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b06a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b072:	69db      	ldr	r3, [r3, #28]
 800b074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b078:	f000 8086 	beq.w	800b188 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b084:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b088:	e853 3f00 	ldrex	r3, [r3]
 800b08c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b090:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b098:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b0a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b0aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b0b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b0b6:	e841 2300 	strex	r3, r2, [r1]
 800b0ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b0be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d1da      	bne.n	800b07c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	3308      	adds	r3, #8
 800b0cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b0d0:	e853 3f00 	ldrex	r3, [r3]
 800b0d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b0d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b0d8:	f023 0301 	bic.w	r3, r3, #1
 800b0dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	3308      	adds	r3, #8
 800b0e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b0ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b0ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b0f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b0f6:	e841 2300 	strex	r3, r2, [r1]
 800b0fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b0fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1e1      	bne.n	800b0c6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	3308      	adds	r3, #8
 800b108:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b10c:	e853 3f00 	ldrex	r3, [r3]
 800b110:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b114:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b118:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	3308      	adds	r3, #8
 800b122:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b126:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b128:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b12a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b12c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b12e:	e841 2300 	strex	r3, r2, [r1]
 800b132:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b134:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1e3      	bne.n	800b102 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2220      	movs	r2, #32
 800b13e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b14e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b150:	e853 3f00 	ldrex	r3, [r3]
 800b154:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b156:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b158:	f023 0310 	bic.w	r3, r3, #16
 800b15c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	461a      	mov	r2, r3
 800b166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b16a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b16c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b16e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b170:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b172:	e841 2300 	strex	r3, r2, [r1]
 800b176:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b178:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d1e4      	bne.n	800b148 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b182:	4618      	mov	r0, r3
 800b184:	f7fa ff09 	bl	8005f9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2202      	movs	r2, #2
 800b18c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	1ad3      	subs	r3, r2, r3
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 f8c2 	bl	800b32c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b1a8:	e0a4      	b.n	800b2f4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	1ad3      	subs	r3, r2, r3
 800b1ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f000 8096 	beq.w	800b2f8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800b1cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	f000 8091 	beq.w	800b2f8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1de:	e853 3f00 	ldrex	r3, [r3]
 800b1e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b1e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b1ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b1f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b1fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b200:	e841 2300 	strex	r3, r2, [r1]
 800b204:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d1e4      	bne.n	800b1d6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	3308      	adds	r3, #8
 800b212:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b216:	e853 3f00 	ldrex	r3, [r3]
 800b21a:	623b      	str	r3, [r7, #32]
   return(result);
 800b21c:	6a3b      	ldr	r3, [r7, #32]
 800b21e:	f023 0301 	bic.w	r3, r3, #1
 800b222:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	3308      	adds	r3, #8
 800b22c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b230:	633a      	str	r2, [r7, #48]	@ 0x30
 800b232:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b234:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b238:	e841 2300 	strex	r3, r2, [r1]
 800b23c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b240:	2b00      	cmp	r3, #0
 800b242:	d1e3      	bne.n	800b20c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2220      	movs	r2, #32
 800b248:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2200      	movs	r2, #0
 800b256:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	e853 3f00 	ldrex	r3, [r3]
 800b264:	60fb      	str	r3, [r7, #12]
   return(result);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f023 0310 	bic.w	r3, r3, #16
 800b26c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	461a      	mov	r2, r3
 800b276:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b27a:	61fb      	str	r3, [r7, #28]
 800b27c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27e:	69b9      	ldr	r1, [r7, #24]
 800b280:	69fa      	ldr	r2, [r7, #28]
 800b282:	e841 2300 	strex	r3, r2, [r1]
 800b286:	617b      	str	r3, [r7, #20]
   return(result);
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d1e4      	bne.n	800b258 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2202      	movs	r2, #2
 800b292:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b294:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b298:	4619      	mov	r1, r3
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 f846 	bl	800b32c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b2a0:	e02a      	b.n	800b2f8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b2a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00e      	beq.n	800b2cc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b2ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d008      	beq.n	800b2cc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d01c      	beq.n	800b2fc <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	4798      	blx	r3
    }
    return;
 800b2ca:	e017      	b.n	800b2fc <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b2cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d012      	beq.n	800b2fe <HAL_UART_IRQHandler+0x59e>
 800b2d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d00c      	beq.n	800b2fe <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 fd71 	bl	800bdcc <UART_EndTransmit_IT>
    return;
 800b2ea:	e008      	b.n	800b2fe <HAL_UART_IRQHandler+0x59e>
      return;
 800b2ec:	bf00      	nop
 800b2ee:	e006      	b.n	800b2fe <HAL_UART_IRQHandler+0x59e>
    return;
 800b2f0:	bf00      	nop
 800b2f2:	e004      	b.n	800b2fe <HAL_UART_IRQHandler+0x59e>
      return;
 800b2f4:	bf00      	nop
 800b2f6:	e002      	b.n	800b2fe <HAL_UART_IRQHandler+0x59e>
      return;
 800b2f8:	bf00      	nop
 800b2fa:	e000      	b.n	800b2fe <HAL_UART_IRQHandler+0x59e>
    return;
 800b2fc:	bf00      	nop
  }

}
 800b2fe:	37e8      	adds	r7, #232	@ 0xe8
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b30c:	bf00      	nop
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b320:	bf00      	nop
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	460b      	mov	r3, r1
 800b336:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b338:	bf00      	nop
 800b33a:	370c      	adds	r7, #12
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr

0800b344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b088      	sub	sp, #32
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b34c:	2300      	movs	r3, #0
 800b34e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	689a      	ldr	r2, [r3, #8]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	431a      	orrs	r2, r3
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	695b      	ldr	r3, [r3, #20]
 800b35e:	431a      	orrs	r2, r3
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	69db      	ldr	r3, [r3, #28]
 800b364:	4313      	orrs	r3, r2
 800b366:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	4ba6      	ldr	r3, [pc, #664]	@ (800b608 <UART_SetConfig+0x2c4>)
 800b370:	4013      	ands	r3, r2
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	6812      	ldr	r2, [r2, #0]
 800b376:	6979      	ldr	r1, [r7, #20]
 800b378:	430b      	orrs	r3, r1
 800b37a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	68da      	ldr	r2, [r3, #12]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	430a      	orrs	r2, r1
 800b390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	699b      	ldr	r3, [r3, #24]
 800b396:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6a1b      	ldr	r3, [r3, #32]
 800b39c:	697a      	ldr	r2, [r7, #20]
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	689b      	ldr	r3, [r3, #8]
 800b3a8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	697a      	ldr	r2, [r7, #20]
 800b3b2:	430a      	orrs	r2, r1
 800b3b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a94      	ldr	r2, [pc, #592]	@ (800b60c <UART_SetConfig+0x2c8>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d120      	bne.n	800b402 <UART_SetConfig+0xbe>
 800b3c0:	4b93      	ldr	r3, [pc, #588]	@ (800b610 <UART_SetConfig+0x2cc>)
 800b3c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3c6:	f003 0303 	and.w	r3, r3, #3
 800b3ca:	2b03      	cmp	r3, #3
 800b3cc:	d816      	bhi.n	800b3fc <UART_SetConfig+0xb8>
 800b3ce:	a201      	add	r2, pc, #4	@ (adr r2, 800b3d4 <UART_SetConfig+0x90>)
 800b3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d4:	0800b3e5 	.word	0x0800b3e5
 800b3d8:	0800b3f1 	.word	0x0800b3f1
 800b3dc:	0800b3eb 	.word	0x0800b3eb
 800b3e0:	0800b3f7 	.word	0x0800b3f7
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	77fb      	strb	r3, [r7, #31]
 800b3e8:	e150      	b.n	800b68c <UART_SetConfig+0x348>
 800b3ea:	2302      	movs	r3, #2
 800b3ec:	77fb      	strb	r3, [r7, #31]
 800b3ee:	e14d      	b.n	800b68c <UART_SetConfig+0x348>
 800b3f0:	2304      	movs	r3, #4
 800b3f2:	77fb      	strb	r3, [r7, #31]
 800b3f4:	e14a      	b.n	800b68c <UART_SetConfig+0x348>
 800b3f6:	2308      	movs	r3, #8
 800b3f8:	77fb      	strb	r3, [r7, #31]
 800b3fa:	e147      	b.n	800b68c <UART_SetConfig+0x348>
 800b3fc:	2310      	movs	r3, #16
 800b3fe:	77fb      	strb	r3, [r7, #31]
 800b400:	e144      	b.n	800b68c <UART_SetConfig+0x348>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4a83      	ldr	r2, [pc, #524]	@ (800b614 <UART_SetConfig+0x2d0>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d132      	bne.n	800b472 <UART_SetConfig+0x12e>
 800b40c:	4b80      	ldr	r3, [pc, #512]	@ (800b610 <UART_SetConfig+0x2cc>)
 800b40e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b412:	f003 030c 	and.w	r3, r3, #12
 800b416:	2b0c      	cmp	r3, #12
 800b418:	d828      	bhi.n	800b46c <UART_SetConfig+0x128>
 800b41a:	a201      	add	r2, pc, #4	@ (adr r2, 800b420 <UART_SetConfig+0xdc>)
 800b41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b420:	0800b455 	.word	0x0800b455
 800b424:	0800b46d 	.word	0x0800b46d
 800b428:	0800b46d 	.word	0x0800b46d
 800b42c:	0800b46d 	.word	0x0800b46d
 800b430:	0800b461 	.word	0x0800b461
 800b434:	0800b46d 	.word	0x0800b46d
 800b438:	0800b46d 	.word	0x0800b46d
 800b43c:	0800b46d 	.word	0x0800b46d
 800b440:	0800b45b 	.word	0x0800b45b
 800b444:	0800b46d 	.word	0x0800b46d
 800b448:	0800b46d 	.word	0x0800b46d
 800b44c:	0800b46d 	.word	0x0800b46d
 800b450:	0800b467 	.word	0x0800b467
 800b454:	2300      	movs	r3, #0
 800b456:	77fb      	strb	r3, [r7, #31]
 800b458:	e118      	b.n	800b68c <UART_SetConfig+0x348>
 800b45a:	2302      	movs	r3, #2
 800b45c:	77fb      	strb	r3, [r7, #31]
 800b45e:	e115      	b.n	800b68c <UART_SetConfig+0x348>
 800b460:	2304      	movs	r3, #4
 800b462:	77fb      	strb	r3, [r7, #31]
 800b464:	e112      	b.n	800b68c <UART_SetConfig+0x348>
 800b466:	2308      	movs	r3, #8
 800b468:	77fb      	strb	r3, [r7, #31]
 800b46a:	e10f      	b.n	800b68c <UART_SetConfig+0x348>
 800b46c:	2310      	movs	r3, #16
 800b46e:	77fb      	strb	r3, [r7, #31]
 800b470:	e10c      	b.n	800b68c <UART_SetConfig+0x348>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a68      	ldr	r2, [pc, #416]	@ (800b618 <UART_SetConfig+0x2d4>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d120      	bne.n	800b4be <UART_SetConfig+0x17a>
 800b47c:	4b64      	ldr	r3, [pc, #400]	@ (800b610 <UART_SetConfig+0x2cc>)
 800b47e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b482:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b486:	2b30      	cmp	r3, #48	@ 0x30
 800b488:	d013      	beq.n	800b4b2 <UART_SetConfig+0x16e>
 800b48a:	2b30      	cmp	r3, #48	@ 0x30
 800b48c:	d814      	bhi.n	800b4b8 <UART_SetConfig+0x174>
 800b48e:	2b20      	cmp	r3, #32
 800b490:	d009      	beq.n	800b4a6 <UART_SetConfig+0x162>
 800b492:	2b20      	cmp	r3, #32
 800b494:	d810      	bhi.n	800b4b8 <UART_SetConfig+0x174>
 800b496:	2b00      	cmp	r3, #0
 800b498:	d002      	beq.n	800b4a0 <UART_SetConfig+0x15c>
 800b49a:	2b10      	cmp	r3, #16
 800b49c:	d006      	beq.n	800b4ac <UART_SetConfig+0x168>
 800b49e:	e00b      	b.n	800b4b8 <UART_SetConfig+0x174>
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	77fb      	strb	r3, [r7, #31]
 800b4a4:	e0f2      	b.n	800b68c <UART_SetConfig+0x348>
 800b4a6:	2302      	movs	r3, #2
 800b4a8:	77fb      	strb	r3, [r7, #31]
 800b4aa:	e0ef      	b.n	800b68c <UART_SetConfig+0x348>
 800b4ac:	2304      	movs	r3, #4
 800b4ae:	77fb      	strb	r3, [r7, #31]
 800b4b0:	e0ec      	b.n	800b68c <UART_SetConfig+0x348>
 800b4b2:	2308      	movs	r3, #8
 800b4b4:	77fb      	strb	r3, [r7, #31]
 800b4b6:	e0e9      	b.n	800b68c <UART_SetConfig+0x348>
 800b4b8:	2310      	movs	r3, #16
 800b4ba:	77fb      	strb	r3, [r7, #31]
 800b4bc:	e0e6      	b.n	800b68c <UART_SetConfig+0x348>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a56      	ldr	r2, [pc, #344]	@ (800b61c <UART_SetConfig+0x2d8>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d120      	bne.n	800b50a <UART_SetConfig+0x1c6>
 800b4c8:	4b51      	ldr	r3, [pc, #324]	@ (800b610 <UART_SetConfig+0x2cc>)
 800b4ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b4d2:	2bc0      	cmp	r3, #192	@ 0xc0
 800b4d4:	d013      	beq.n	800b4fe <UART_SetConfig+0x1ba>
 800b4d6:	2bc0      	cmp	r3, #192	@ 0xc0
 800b4d8:	d814      	bhi.n	800b504 <UART_SetConfig+0x1c0>
 800b4da:	2b80      	cmp	r3, #128	@ 0x80
 800b4dc:	d009      	beq.n	800b4f2 <UART_SetConfig+0x1ae>
 800b4de:	2b80      	cmp	r3, #128	@ 0x80
 800b4e0:	d810      	bhi.n	800b504 <UART_SetConfig+0x1c0>
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d002      	beq.n	800b4ec <UART_SetConfig+0x1a8>
 800b4e6:	2b40      	cmp	r3, #64	@ 0x40
 800b4e8:	d006      	beq.n	800b4f8 <UART_SetConfig+0x1b4>
 800b4ea:	e00b      	b.n	800b504 <UART_SetConfig+0x1c0>
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	77fb      	strb	r3, [r7, #31]
 800b4f0:	e0cc      	b.n	800b68c <UART_SetConfig+0x348>
 800b4f2:	2302      	movs	r3, #2
 800b4f4:	77fb      	strb	r3, [r7, #31]
 800b4f6:	e0c9      	b.n	800b68c <UART_SetConfig+0x348>
 800b4f8:	2304      	movs	r3, #4
 800b4fa:	77fb      	strb	r3, [r7, #31]
 800b4fc:	e0c6      	b.n	800b68c <UART_SetConfig+0x348>
 800b4fe:	2308      	movs	r3, #8
 800b500:	77fb      	strb	r3, [r7, #31]
 800b502:	e0c3      	b.n	800b68c <UART_SetConfig+0x348>
 800b504:	2310      	movs	r3, #16
 800b506:	77fb      	strb	r3, [r7, #31]
 800b508:	e0c0      	b.n	800b68c <UART_SetConfig+0x348>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	4a44      	ldr	r2, [pc, #272]	@ (800b620 <UART_SetConfig+0x2dc>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d125      	bne.n	800b560 <UART_SetConfig+0x21c>
 800b514:	4b3e      	ldr	r3, [pc, #248]	@ (800b610 <UART_SetConfig+0x2cc>)
 800b516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b51a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b51e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b522:	d017      	beq.n	800b554 <UART_SetConfig+0x210>
 800b524:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b528:	d817      	bhi.n	800b55a <UART_SetConfig+0x216>
 800b52a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b52e:	d00b      	beq.n	800b548 <UART_SetConfig+0x204>
 800b530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b534:	d811      	bhi.n	800b55a <UART_SetConfig+0x216>
 800b536:	2b00      	cmp	r3, #0
 800b538:	d003      	beq.n	800b542 <UART_SetConfig+0x1fe>
 800b53a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b53e:	d006      	beq.n	800b54e <UART_SetConfig+0x20a>
 800b540:	e00b      	b.n	800b55a <UART_SetConfig+0x216>
 800b542:	2300      	movs	r3, #0
 800b544:	77fb      	strb	r3, [r7, #31]
 800b546:	e0a1      	b.n	800b68c <UART_SetConfig+0x348>
 800b548:	2302      	movs	r3, #2
 800b54a:	77fb      	strb	r3, [r7, #31]
 800b54c:	e09e      	b.n	800b68c <UART_SetConfig+0x348>
 800b54e:	2304      	movs	r3, #4
 800b550:	77fb      	strb	r3, [r7, #31]
 800b552:	e09b      	b.n	800b68c <UART_SetConfig+0x348>
 800b554:	2308      	movs	r3, #8
 800b556:	77fb      	strb	r3, [r7, #31]
 800b558:	e098      	b.n	800b68c <UART_SetConfig+0x348>
 800b55a:	2310      	movs	r3, #16
 800b55c:	77fb      	strb	r3, [r7, #31]
 800b55e:	e095      	b.n	800b68c <UART_SetConfig+0x348>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a2f      	ldr	r2, [pc, #188]	@ (800b624 <UART_SetConfig+0x2e0>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d125      	bne.n	800b5b6 <UART_SetConfig+0x272>
 800b56a:	4b29      	ldr	r3, [pc, #164]	@ (800b610 <UART_SetConfig+0x2cc>)
 800b56c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b570:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b574:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b578:	d017      	beq.n	800b5aa <UART_SetConfig+0x266>
 800b57a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b57e:	d817      	bhi.n	800b5b0 <UART_SetConfig+0x26c>
 800b580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b584:	d00b      	beq.n	800b59e <UART_SetConfig+0x25a>
 800b586:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b58a:	d811      	bhi.n	800b5b0 <UART_SetConfig+0x26c>
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d003      	beq.n	800b598 <UART_SetConfig+0x254>
 800b590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b594:	d006      	beq.n	800b5a4 <UART_SetConfig+0x260>
 800b596:	e00b      	b.n	800b5b0 <UART_SetConfig+0x26c>
 800b598:	2301      	movs	r3, #1
 800b59a:	77fb      	strb	r3, [r7, #31]
 800b59c:	e076      	b.n	800b68c <UART_SetConfig+0x348>
 800b59e:	2302      	movs	r3, #2
 800b5a0:	77fb      	strb	r3, [r7, #31]
 800b5a2:	e073      	b.n	800b68c <UART_SetConfig+0x348>
 800b5a4:	2304      	movs	r3, #4
 800b5a6:	77fb      	strb	r3, [r7, #31]
 800b5a8:	e070      	b.n	800b68c <UART_SetConfig+0x348>
 800b5aa:	2308      	movs	r3, #8
 800b5ac:	77fb      	strb	r3, [r7, #31]
 800b5ae:	e06d      	b.n	800b68c <UART_SetConfig+0x348>
 800b5b0:	2310      	movs	r3, #16
 800b5b2:	77fb      	strb	r3, [r7, #31]
 800b5b4:	e06a      	b.n	800b68c <UART_SetConfig+0x348>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a1b      	ldr	r2, [pc, #108]	@ (800b628 <UART_SetConfig+0x2e4>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d138      	bne.n	800b632 <UART_SetConfig+0x2ee>
 800b5c0:	4b13      	ldr	r3, [pc, #76]	@ (800b610 <UART_SetConfig+0x2cc>)
 800b5c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5c6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b5ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b5ce:	d017      	beq.n	800b600 <UART_SetConfig+0x2bc>
 800b5d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b5d4:	d82a      	bhi.n	800b62c <UART_SetConfig+0x2e8>
 800b5d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b5da:	d00b      	beq.n	800b5f4 <UART_SetConfig+0x2b0>
 800b5dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b5e0:	d824      	bhi.n	800b62c <UART_SetConfig+0x2e8>
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d003      	beq.n	800b5ee <UART_SetConfig+0x2aa>
 800b5e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5ea:	d006      	beq.n	800b5fa <UART_SetConfig+0x2b6>
 800b5ec:	e01e      	b.n	800b62c <UART_SetConfig+0x2e8>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	77fb      	strb	r3, [r7, #31]
 800b5f2:	e04b      	b.n	800b68c <UART_SetConfig+0x348>
 800b5f4:	2302      	movs	r3, #2
 800b5f6:	77fb      	strb	r3, [r7, #31]
 800b5f8:	e048      	b.n	800b68c <UART_SetConfig+0x348>
 800b5fa:	2304      	movs	r3, #4
 800b5fc:	77fb      	strb	r3, [r7, #31]
 800b5fe:	e045      	b.n	800b68c <UART_SetConfig+0x348>
 800b600:	2308      	movs	r3, #8
 800b602:	77fb      	strb	r3, [r7, #31]
 800b604:	e042      	b.n	800b68c <UART_SetConfig+0x348>
 800b606:	bf00      	nop
 800b608:	efff69f3 	.word	0xefff69f3
 800b60c:	40011000 	.word	0x40011000
 800b610:	40023800 	.word	0x40023800
 800b614:	40004400 	.word	0x40004400
 800b618:	40004800 	.word	0x40004800
 800b61c:	40004c00 	.word	0x40004c00
 800b620:	40005000 	.word	0x40005000
 800b624:	40011400 	.word	0x40011400
 800b628:	40007800 	.word	0x40007800
 800b62c:	2310      	movs	r3, #16
 800b62e:	77fb      	strb	r3, [r7, #31]
 800b630:	e02c      	b.n	800b68c <UART_SetConfig+0x348>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4a72      	ldr	r2, [pc, #456]	@ (800b800 <UART_SetConfig+0x4bc>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d125      	bne.n	800b688 <UART_SetConfig+0x344>
 800b63c:	4b71      	ldr	r3, [pc, #452]	@ (800b804 <UART_SetConfig+0x4c0>)
 800b63e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b642:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b646:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b64a:	d017      	beq.n	800b67c <UART_SetConfig+0x338>
 800b64c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b650:	d817      	bhi.n	800b682 <UART_SetConfig+0x33e>
 800b652:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b656:	d00b      	beq.n	800b670 <UART_SetConfig+0x32c>
 800b658:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b65c:	d811      	bhi.n	800b682 <UART_SetConfig+0x33e>
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d003      	beq.n	800b66a <UART_SetConfig+0x326>
 800b662:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b666:	d006      	beq.n	800b676 <UART_SetConfig+0x332>
 800b668:	e00b      	b.n	800b682 <UART_SetConfig+0x33e>
 800b66a:	2300      	movs	r3, #0
 800b66c:	77fb      	strb	r3, [r7, #31]
 800b66e:	e00d      	b.n	800b68c <UART_SetConfig+0x348>
 800b670:	2302      	movs	r3, #2
 800b672:	77fb      	strb	r3, [r7, #31]
 800b674:	e00a      	b.n	800b68c <UART_SetConfig+0x348>
 800b676:	2304      	movs	r3, #4
 800b678:	77fb      	strb	r3, [r7, #31]
 800b67a:	e007      	b.n	800b68c <UART_SetConfig+0x348>
 800b67c:	2308      	movs	r3, #8
 800b67e:	77fb      	strb	r3, [r7, #31]
 800b680:	e004      	b.n	800b68c <UART_SetConfig+0x348>
 800b682:	2310      	movs	r3, #16
 800b684:	77fb      	strb	r3, [r7, #31]
 800b686:	e001      	b.n	800b68c <UART_SetConfig+0x348>
 800b688:	2310      	movs	r3, #16
 800b68a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	69db      	ldr	r3, [r3, #28]
 800b690:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b694:	d15b      	bne.n	800b74e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b696:	7ffb      	ldrb	r3, [r7, #31]
 800b698:	2b08      	cmp	r3, #8
 800b69a:	d828      	bhi.n	800b6ee <UART_SetConfig+0x3aa>
 800b69c:	a201      	add	r2, pc, #4	@ (adr r2, 800b6a4 <UART_SetConfig+0x360>)
 800b69e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a2:	bf00      	nop
 800b6a4:	0800b6c9 	.word	0x0800b6c9
 800b6a8:	0800b6d1 	.word	0x0800b6d1
 800b6ac:	0800b6d9 	.word	0x0800b6d9
 800b6b0:	0800b6ef 	.word	0x0800b6ef
 800b6b4:	0800b6df 	.word	0x0800b6df
 800b6b8:	0800b6ef 	.word	0x0800b6ef
 800b6bc:	0800b6ef 	.word	0x0800b6ef
 800b6c0:	0800b6ef 	.word	0x0800b6ef
 800b6c4:	0800b6e7 	.word	0x0800b6e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6c8:	f7fc fac0 	bl	8007c4c <HAL_RCC_GetPCLK1Freq>
 800b6cc:	61b8      	str	r0, [r7, #24]
        break;
 800b6ce:	e013      	b.n	800b6f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6d0:	f7fc fad0 	bl	8007c74 <HAL_RCC_GetPCLK2Freq>
 800b6d4:	61b8      	str	r0, [r7, #24]
        break;
 800b6d6:	e00f      	b.n	800b6f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b6d8:	4b4b      	ldr	r3, [pc, #300]	@ (800b808 <UART_SetConfig+0x4c4>)
 800b6da:	61bb      	str	r3, [r7, #24]
        break;
 800b6dc:	e00c      	b.n	800b6f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6de:	f7fc f9a3 	bl	8007a28 <HAL_RCC_GetSysClockFreq>
 800b6e2:	61b8      	str	r0, [r7, #24]
        break;
 800b6e4:	e008      	b.n	800b6f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b6ea:	61bb      	str	r3, [r7, #24]
        break;
 800b6ec:	e004      	b.n	800b6f8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	77bb      	strb	r3, [r7, #30]
        break;
 800b6f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b6f8:	69bb      	ldr	r3, [r7, #24]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d074      	beq.n	800b7e8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	005a      	lsls	r2, r3, #1
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	085b      	lsrs	r3, r3, #1
 800b708:	441a      	add	r2, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b712:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	2b0f      	cmp	r3, #15
 800b718:	d916      	bls.n	800b748 <UART_SetConfig+0x404>
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b720:	d212      	bcs.n	800b748 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	b29b      	uxth	r3, r3
 800b726:	f023 030f 	bic.w	r3, r3, #15
 800b72a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	085b      	lsrs	r3, r3, #1
 800b730:	b29b      	uxth	r3, r3
 800b732:	f003 0307 	and.w	r3, r3, #7
 800b736:	b29a      	uxth	r2, r3
 800b738:	89fb      	ldrh	r3, [r7, #14]
 800b73a:	4313      	orrs	r3, r2
 800b73c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	89fa      	ldrh	r2, [r7, #14]
 800b744:	60da      	str	r2, [r3, #12]
 800b746:	e04f      	b.n	800b7e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b748:	2301      	movs	r3, #1
 800b74a:	77bb      	strb	r3, [r7, #30]
 800b74c:	e04c      	b.n	800b7e8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b74e:	7ffb      	ldrb	r3, [r7, #31]
 800b750:	2b08      	cmp	r3, #8
 800b752:	d828      	bhi.n	800b7a6 <UART_SetConfig+0x462>
 800b754:	a201      	add	r2, pc, #4	@ (adr r2, 800b75c <UART_SetConfig+0x418>)
 800b756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b75a:	bf00      	nop
 800b75c:	0800b781 	.word	0x0800b781
 800b760:	0800b789 	.word	0x0800b789
 800b764:	0800b791 	.word	0x0800b791
 800b768:	0800b7a7 	.word	0x0800b7a7
 800b76c:	0800b797 	.word	0x0800b797
 800b770:	0800b7a7 	.word	0x0800b7a7
 800b774:	0800b7a7 	.word	0x0800b7a7
 800b778:	0800b7a7 	.word	0x0800b7a7
 800b77c:	0800b79f 	.word	0x0800b79f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b780:	f7fc fa64 	bl	8007c4c <HAL_RCC_GetPCLK1Freq>
 800b784:	61b8      	str	r0, [r7, #24]
        break;
 800b786:	e013      	b.n	800b7b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b788:	f7fc fa74 	bl	8007c74 <HAL_RCC_GetPCLK2Freq>
 800b78c:	61b8      	str	r0, [r7, #24]
        break;
 800b78e:	e00f      	b.n	800b7b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b790:	4b1d      	ldr	r3, [pc, #116]	@ (800b808 <UART_SetConfig+0x4c4>)
 800b792:	61bb      	str	r3, [r7, #24]
        break;
 800b794:	e00c      	b.n	800b7b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b796:	f7fc f947 	bl	8007a28 <HAL_RCC_GetSysClockFreq>
 800b79a:	61b8      	str	r0, [r7, #24]
        break;
 800b79c:	e008      	b.n	800b7b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b79e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b7a2:	61bb      	str	r3, [r7, #24]
        break;
 800b7a4:	e004      	b.n	800b7b0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	77bb      	strb	r3, [r7, #30]
        break;
 800b7ae:	bf00      	nop
    }

    if (pclk != 0U)
 800b7b0:	69bb      	ldr	r3, [r7, #24]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d018      	beq.n	800b7e8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	085a      	lsrs	r2, r3, #1
 800b7bc:	69bb      	ldr	r3, [r7, #24]
 800b7be:	441a      	add	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	2b0f      	cmp	r3, #15
 800b7ce:	d909      	bls.n	800b7e4 <UART_SetConfig+0x4a0>
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7d6:	d205      	bcs.n	800b7e4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	b29a      	uxth	r2, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	60da      	str	r2, [r3, #12]
 800b7e2:	e001      	b.n	800b7e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b7f4:	7fbb      	ldrb	r3, [r7, #30]
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3720      	adds	r7, #32
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	40007c00 	.word	0x40007c00
 800b804:	40023800 	.word	0x40023800
 800b808:	00f42400 	.word	0x00f42400

0800b80c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b818:	f003 0301 	and.w	r3, r3, #1
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d00a      	beq.n	800b836 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	430a      	orrs	r2, r1
 800b834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b83a:	f003 0302 	and.w	r3, r3, #2
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00a      	beq.n	800b858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	430a      	orrs	r2, r1
 800b856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b85c:	f003 0304 	and.w	r3, r3, #4
 800b860:	2b00      	cmp	r3, #0
 800b862:	d00a      	beq.n	800b87a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	430a      	orrs	r2, r1
 800b878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b87e:	f003 0308 	and.w	r3, r3, #8
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00a      	beq.n	800b89c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	430a      	orrs	r2, r1
 800b89a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8a0:	f003 0310 	and.w	r3, r3, #16
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d00a      	beq.n	800b8be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	689b      	ldr	r3, [r3, #8]
 800b8ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	430a      	orrs	r2, r1
 800b8bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8c2:	f003 0320 	and.w	r3, r3, #32
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00a      	beq.n	800b8e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	689b      	ldr	r3, [r3, #8]
 800b8d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	430a      	orrs	r2, r1
 800b8de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d01a      	beq.n	800b922 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	430a      	orrs	r2, r1
 800b900:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b906:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b90a:	d10a      	bne.n	800b922 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	430a      	orrs	r2, r1
 800b920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d00a      	beq.n	800b944 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	430a      	orrs	r2, r1
 800b942:	605a      	str	r2, [r3, #4]
  }
}
 800b944:	bf00      	nop
 800b946:	370c      	adds	r7, #12
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b086      	sub	sp, #24
 800b954:	af02      	add	r7, sp, #8
 800b956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b960:	f7fa f9da 	bl	8005d18 <HAL_GetTick>
 800b964:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f003 0308 	and.w	r3, r3, #8
 800b970:	2b08      	cmp	r3, #8
 800b972:	d10e      	bne.n	800b992 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b974:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b978:	9300      	str	r3, [sp, #0]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2200      	movs	r2, #0
 800b97e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 f81b 	bl	800b9be <UART_WaitOnFlagUntilTimeout>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d001      	beq.n	800b992 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b98e:	2303      	movs	r3, #3
 800b990:	e011      	b.n	800b9b6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2220      	movs	r2, #32
 800b996:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2220      	movs	r2, #32
 800b99c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b09c      	sub	sp, #112	@ 0x70
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	60f8      	str	r0, [r7, #12]
 800b9c6:	60b9      	str	r1, [r7, #8]
 800b9c8:	603b      	str	r3, [r7, #0]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9ce:	e0a7      	b.n	800bb20 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9d6:	f000 80a3 	beq.w	800bb20 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9da:	f7fa f99d 	bl	8005d18 <HAL_GetTick>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	1ad3      	subs	r3, r2, r3
 800b9e4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d302      	bcc.n	800b9f0 <UART_WaitOnFlagUntilTimeout+0x32>
 800b9ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d13f      	bne.n	800ba70 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9f8:	e853 3f00 	ldrex	r3, [r3]
 800b9fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b9fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba00:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800ba04:	667b      	str	r3, [r7, #100]	@ 0x64
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba10:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba12:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ba14:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ba16:	e841 2300 	strex	r3, r2, [r1]
 800ba1a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800ba1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d1e6      	bne.n	800b9f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	3308      	adds	r3, #8
 800ba28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba2c:	e853 3f00 	ldrex	r3, [r3]
 800ba30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba34:	f023 0301 	bic.w	r3, r3, #1
 800ba38:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	3308      	adds	r3, #8
 800ba40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ba42:	64ba      	str	r2, [r7, #72]	@ 0x48
 800ba44:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba46:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ba48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba4a:	e841 2300 	strex	r3, r2, [r1]
 800ba4e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ba50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d1e5      	bne.n	800ba22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2220      	movs	r2, #32
 800ba5a:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2220      	movs	r2, #32
 800ba60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2200      	movs	r2, #0
 800ba68:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800ba6c:	2303      	movs	r3, #3
 800ba6e:	e068      	b.n	800bb42 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f003 0304 	and.w	r3, r3, #4
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d050      	beq.n	800bb20 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	69db      	ldr	r3, [r3, #28]
 800ba84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ba88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ba8c:	d148      	bne.n	800bb20 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ba96:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baa0:	e853 3f00 	ldrex	r3, [r3]
 800baa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800baa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800baac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	461a      	mov	r2, r3
 800bab4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bab6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bab8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800babc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800babe:	e841 2300 	strex	r3, r2, [r1]
 800bac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d1e6      	bne.n	800ba98 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	3308      	adds	r3, #8
 800bad0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	e853 3f00 	ldrex	r3, [r3]
 800bad8:	613b      	str	r3, [r7, #16]
   return(result);
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	f023 0301 	bic.w	r3, r3, #1
 800bae0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	3308      	adds	r3, #8
 800bae8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800baea:	623a      	str	r2, [r7, #32]
 800baec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baee:	69f9      	ldr	r1, [r7, #28]
 800baf0:	6a3a      	ldr	r2, [r7, #32]
 800baf2:	e841 2300 	strex	r3, r2, [r1]
 800baf6:	61bb      	str	r3, [r7, #24]
   return(result);
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d1e5      	bne.n	800baca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2220      	movs	r2, #32
 800bb02:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2220      	movs	r2, #32
 800bb08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2220      	movs	r2, #32
 800bb10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2200      	movs	r2, #0
 800bb18:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800bb1c:	2303      	movs	r3, #3
 800bb1e:	e010      	b.n	800bb42 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	69da      	ldr	r2, [r3, #28]
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	4013      	ands	r3, r2
 800bb2a:	68ba      	ldr	r2, [r7, #8]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	bf0c      	ite	eq
 800bb30:	2301      	moveq	r3, #1
 800bb32:	2300      	movne	r3, #0
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	461a      	mov	r2, r3
 800bb38:	79fb      	ldrb	r3, [r7, #7]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	f43f af48 	beq.w	800b9d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3770      	adds	r7, #112	@ 0x70
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
	...

0800bb4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b097      	sub	sp, #92	@ 0x5c
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	4613      	mov	r3, r2
 800bb58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	68ba      	ldr	r2, [r7, #8]
 800bb5e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	88fa      	ldrh	r2, [r7, #6]
 800bb64:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	88fa      	ldrh	r2, [r7, #6]
 800bb6c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2200      	movs	r2, #0
 800bb74:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb7e:	d10e      	bne.n	800bb9e <UART_Start_Receive_IT+0x52>
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	691b      	ldr	r3, [r3, #16]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d105      	bne.n	800bb94 <UART_Start_Receive_IT+0x48>
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800bb8e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800bb92:	e02d      	b.n	800bbf0 <UART_Start_Receive_IT+0xa4>
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	22ff      	movs	r2, #255	@ 0xff
 800bb98:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800bb9c:	e028      	b.n	800bbf0 <UART_Start_Receive_IT+0xa4>
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d10d      	bne.n	800bbc2 <UART_Start_Receive_IT+0x76>
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	691b      	ldr	r3, [r3, #16]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d104      	bne.n	800bbb8 <UART_Start_Receive_IT+0x6c>
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	22ff      	movs	r2, #255	@ 0xff
 800bbb2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800bbb6:	e01b      	b.n	800bbf0 <UART_Start_Receive_IT+0xa4>
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	227f      	movs	r2, #127	@ 0x7f
 800bbbc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800bbc0:	e016      	b.n	800bbf0 <UART_Start_Receive_IT+0xa4>
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bbca:	d10d      	bne.n	800bbe8 <UART_Start_Receive_IT+0x9c>
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	691b      	ldr	r3, [r3, #16]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d104      	bne.n	800bbde <UART_Start_Receive_IT+0x92>
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	227f      	movs	r2, #127	@ 0x7f
 800bbd8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800bbdc:	e008      	b.n	800bbf0 <UART_Start_Receive_IT+0xa4>
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	223f      	movs	r2, #63	@ 0x3f
 800bbe2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800bbe6:	e003      	b.n	800bbf0 <UART_Start_Receive_IT+0xa4>
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2200      	movs	r2, #0
 800bbec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2222      	movs	r2, #34	@ 0x22
 800bbfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	3308      	adds	r3, #8
 800bc06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc0a:	e853 3f00 	ldrex	r3, [r3]
 800bc0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bc10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc12:	f043 0301 	orr.w	r3, r3, #1
 800bc16:	657b      	str	r3, [r7, #84]	@ 0x54
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	3308      	adds	r3, #8
 800bc1e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bc20:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bc22:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc24:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bc26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc28:	e841 2300 	strex	r3, r2, [r1]
 800bc2c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bc2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d1e5      	bne.n	800bc00 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc3c:	d107      	bne.n	800bc4e <UART_Start_Receive_IT+0x102>
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	691b      	ldr	r3, [r3, #16]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d103      	bne.n	800bc4e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	4a21      	ldr	r2, [pc, #132]	@ (800bcd0 <UART_Start_Receive_IT+0x184>)
 800bc4a:	669a      	str	r2, [r3, #104]	@ 0x68
 800bc4c:	e002      	b.n	800bc54 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	4a20      	ldr	r2, [pc, #128]	@ (800bcd4 <UART_Start_Receive_IT+0x188>)
 800bc52:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	691b      	ldr	r3, [r3, #16]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d019      	beq.n	800bc90 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc64:	e853 3f00 	ldrex	r3, [r3]
 800bc68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc6c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800bc70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	461a      	mov	r2, r3
 800bc78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc7a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc7c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bc80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bc82:	e841 2300 	strex	r3, r2, [r1]
 800bc86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bc88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d1e6      	bne.n	800bc5c <UART_Start_Receive_IT+0x110>
 800bc8e:	e018      	b.n	800bcc2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	e853 3f00 	ldrex	r3, [r3]
 800bc9c:	613b      	str	r3, [r7, #16]
   return(result);
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	f043 0320 	orr.w	r3, r3, #32
 800bca4:	653b      	str	r3, [r7, #80]	@ 0x50
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	461a      	mov	r2, r3
 800bcac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcae:	623b      	str	r3, [r7, #32]
 800bcb0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb2:	69f9      	ldr	r1, [r7, #28]
 800bcb4:	6a3a      	ldr	r2, [r7, #32]
 800bcb6:	e841 2300 	strex	r3, r2, [r1]
 800bcba:	61bb      	str	r3, [r7, #24]
   return(result);
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d1e6      	bne.n	800bc90 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	375c      	adds	r7, #92	@ 0x5c
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr
 800bcd0:	0800bf87 	.word	0x0800bf87
 800bcd4:	0800be21 	.word	0x0800be21

0800bcd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b095      	sub	sp, #84	@ 0x54
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bce8:	e853 3f00 	ldrex	r3, [r3]
 800bcec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bcee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bcf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bcfe:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd00:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bd04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd06:	e841 2300 	strex	r3, r2, [r1]
 800bd0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bd0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1e6      	bne.n	800bce0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	3308      	adds	r3, #8
 800bd18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd1a:	6a3b      	ldr	r3, [r7, #32]
 800bd1c:	e853 3f00 	ldrex	r3, [r3]
 800bd20:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd22:	69fb      	ldr	r3, [r7, #28]
 800bd24:	f023 0301 	bic.w	r3, r3, #1
 800bd28:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	3308      	adds	r3, #8
 800bd30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bd32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bd34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bd38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd3a:	e841 2300 	strex	r3, r2, [r1]
 800bd3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bd40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d1e5      	bne.n	800bd12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd4a:	2b01      	cmp	r3, #1
 800bd4c:	d118      	bne.n	800bd80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	e853 3f00 	ldrex	r3, [r3]
 800bd5a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	f023 0310 	bic.w	r3, r3, #16
 800bd62:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	461a      	mov	r2, r3
 800bd6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd6c:	61bb      	str	r3, [r7, #24]
 800bd6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd70:	6979      	ldr	r1, [r7, #20]
 800bd72:	69ba      	ldr	r2, [r7, #24]
 800bd74:	e841 2300 	strex	r3, r2, [r1]
 800bd78:	613b      	str	r3, [r7, #16]
   return(result);
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d1e6      	bne.n	800bd4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2220      	movs	r2, #32
 800bd84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2200      	movs	r2, #0
 800bd92:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800bd94:	bf00      	nop
 800bd96:	3754      	adds	r7, #84	@ 0x54
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	f7ff faaa 	bl	800b318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdc4:	bf00      	nop
 800bdc6:	3710      	adds	r7, #16
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b088      	sub	sp, #32
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	e853 3f00 	ldrex	r3, [r3]
 800bde0:	60bb      	str	r3, [r7, #8]
   return(result);
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bde8:	61fb      	str	r3, [r7, #28]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	461a      	mov	r2, r3
 800bdf0:	69fb      	ldr	r3, [r7, #28]
 800bdf2:	61bb      	str	r3, [r7, #24]
 800bdf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf6:	6979      	ldr	r1, [r7, #20]
 800bdf8:	69ba      	ldr	r2, [r7, #24]
 800bdfa:	e841 2300 	strex	r3, r2, [r1]
 800bdfe:	613b      	str	r3, [r7, #16]
   return(result);
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1e6      	bne.n	800bdd4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2220      	movs	r2, #32
 800be0a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f7ff fa76 	bl	800b304 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be18:	bf00      	nop
 800be1a:	3720      	adds	r7, #32
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b096      	sub	sp, #88	@ 0x58
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800be2e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be38:	2b22      	cmp	r3, #34	@ 0x22
 800be3a:	f040 8098 	bne.w	800bf6e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be44:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800be48:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800be4c:	b2d9      	uxtb	r1, r3
 800be4e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800be52:	b2da      	uxtb	r2, r3
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be58:	400a      	ands	r2, r1
 800be5a:	b2d2      	uxtb	r2, r2
 800be5c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be62:	1c5a      	adds	r2, r3, #1
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800be6e:	b29b      	uxth	r3, r3
 800be70:	3b01      	subs	r3, #1
 800be72:	b29a      	uxth	r2, r3
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800be80:	b29b      	uxth	r3, r3
 800be82:	2b00      	cmp	r3, #0
 800be84:	d17b      	bne.n	800bf7e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be8e:	e853 3f00 	ldrex	r3, [r3]
 800be92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800be94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be9a:	653b      	str	r3, [r7, #80]	@ 0x50
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	461a      	mov	r2, r3
 800bea2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bea4:	647b      	str	r3, [r7, #68]	@ 0x44
 800bea6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800beaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800beac:	e841 2300 	strex	r3, r2, [r1]
 800beb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800beb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d1e6      	bne.n	800be86 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	3308      	adds	r3, #8
 800bebe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bec2:	e853 3f00 	ldrex	r3, [r3]
 800bec6:	623b      	str	r3, [r7, #32]
   return(result);
 800bec8:	6a3b      	ldr	r3, [r7, #32]
 800beca:	f023 0301 	bic.w	r3, r3, #1
 800bece:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	3308      	adds	r3, #8
 800bed6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bed8:	633a      	str	r2, [r7, #48]	@ 0x30
 800beda:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bedc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bede:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bee0:	e841 2300 	strex	r3, r2, [r1]
 800bee4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d1e5      	bne.n	800beb8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2220      	movs	r2, #32
 800bef0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2200      	movs	r2, #0
 800befe:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	d12e      	bne.n	800bf66 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	e853 3f00 	ldrex	r3, [r3]
 800bf1a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f023 0310 	bic.w	r3, r3, #16
 800bf22:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	461a      	mov	r2, r3
 800bf2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf2c:	61fb      	str	r3, [r7, #28]
 800bf2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf30:	69b9      	ldr	r1, [r7, #24]
 800bf32:	69fa      	ldr	r2, [r7, #28]
 800bf34:	e841 2300 	strex	r3, r2, [r1]
 800bf38:	617b      	str	r3, [r7, #20]
   return(result);
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d1e6      	bne.n	800bf0e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	69db      	ldr	r3, [r3, #28]
 800bf46:	f003 0310 	and.w	r3, r3, #16
 800bf4a:	2b10      	cmp	r3, #16
 800bf4c:	d103      	bne.n	800bf56 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	2210      	movs	r2, #16
 800bf54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f7ff f9e4 	bl	800b32c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bf64:	e00b      	b.n	800bf7e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f7f7 f8c2 	bl	80030f0 <HAL_UART_RxCpltCallback>
}
 800bf6c:	e007      	b.n	800bf7e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	699a      	ldr	r2, [r3, #24]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f042 0208 	orr.w	r2, r2, #8
 800bf7c:	619a      	str	r2, [r3, #24]
}
 800bf7e:	bf00      	nop
 800bf80:	3758      	adds	r7, #88	@ 0x58
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b096      	sub	sp, #88	@ 0x58
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bf94:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf9e:	2b22      	cmp	r3, #34	@ 0x22
 800bfa0:	f040 8098 	bne.w	800c0d4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfaa:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfb2:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800bfb4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800bfb8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800bfbc:	4013      	ands	r3, r2
 800bfbe:	b29a      	uxth	r2, r3
 800bfc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfc2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfc8:	1c9a      	adds	r2, r3, #2
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bfd4:	b29b      	uxth	r3, r3
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	b29a      	uxth	r2, r3
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d17b      	bne.n	800c0e4 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bff4:	e853 3f00 	ldrex	r3, [r3]
 800bff8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bffc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c000:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	461a      	mov	r2, r3
 800c008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c00a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c00c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c00e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c010:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c012:	e841 2300 	strex	r3, r2, [r1]
 800c016:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d1e6      	bne.n	800bfec <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	3308      	adds	r3, #8
 800c024:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c026:	6a3b      	ldr	r3, [r7, #32]
 800c028:	e853 3f00 	ldrex	r3, [r3]
 800c02c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	f023 0301 	bic.w	r3, r3, #1
 800c034:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	3308      	adds	r3, #8
 800c03c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c03e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c040:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c042:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c044:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c046:	e841 2300 	strex	r3, r2, [r1]
 800c04a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d1e5      	bne.n	800c01e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2220      	movs	r2, #32
 800c056:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2200      	movs	r2, #0
 800c05e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2200      	movs	r2, #0
 800c064:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	d12e      	bne.n	800c0cc <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2200      	movs	r2, #0
 800c072:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	e853 3f00 	ldrex	r3, [r3]
 800c080:	60bb      	str	r3, [r7, #8]
   return(result);
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	f023 0310 	bic.w	r3, r3, #16
 800c088:	647b      	str	r3, [r7, #68]	@ 0x44
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	461a      	mov	r2, r3
 800c090:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c092:	61bb      	str	r3, [r7, #24]
 800c094:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c096:	6979      	ldr	r1, [r7, #20]
 800c098:	69ba      	ldr	r2, [r7, #24]
 800c09a:	e841 2300 	strex	r3, r2, [r1]
 800c09e:	613b      	str	r3, [r7, #16]
   return(result);
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d1e6      	bne.n	800c074 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	69db      	ldr	r3, [r3, #28]
 800c0ac:	f003 0310 	and.w	r3, r3, #16
 800c0b0:	2b10      	cmp	r3, #16
 800c0b2:	d103      	bne.n	800c0bc <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2210      	movs	r2, #16
 800c0ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f7ff f931 	bl	800b32c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c0ca:	e00b      	b.n	800c0e4 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f7f7 f80f 	bl	80030f0 <HAL_UART_RxCpltCallback>
}
 800c0d2:	e007      	b.n	800c0e4 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	699a      	ldr	r2, [r3, #24]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f042 0208 	orr.w	r2, r2, #8
 800c0e2:	619a      	str	r2, [r3, #24]
}
 800c0e4:	bf00      	nop
 800c0e6:	3758      	adds	r7, #88	@ 0x58
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <atoi>:
 800c0ec:	220a      	movs	r2, #10
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	f000 b87a 	b.w	800c1e8 <strtol>

0800c0f4 <_strtol_l.constprop.0>:
 800c0f4:	2b24      	cmp	r3, #36	@ 0x24
 800c0f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0fa:	4686      	mov	lr, r0
 800c0fc:	4690      	mov	r8, r2
 800c0fe:	d801      	bhi.n	800c104 <_strtol_l.constprop.0+0x10>
 800c100:	2b01      	cmp	r3, #1
 800c102:	d106      	bne.n	800c112 <_strtol_l.constprop.0+0x1e>
 800c104:	f000 f8d6 	bl	800c2b4 <__errno>
 800c108:	2316      	movs	r3, #22
 800c10a:	6003      	str	r3, [r0, #0]
 800c10c:	2000      	movs	r0, #0
 800c10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c112:	4834      	ldr	r0, [pc, #208]	@ (800c1e4 <_strtol_l.constprop.0+0xf0>)
 800c114:	460d      	mov	r5, r1
 800c116:	462a      	mov	r2, r5
 800c118:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c11c:	5d06      	ldrb	r6, [r0, r4]
 800c11e:	f016 0608 	ands.w	r6, r6, #8
 800c122:	d1f8      	bne.n	800c116 <_strtol_l.constprop.0+0x22>
 800c124:	2c2d      	cmp	r4, #45	@ 0x2d
 800c126:	d12d      	bne.n	800c184 <_strtol_l.constprop.0+0x90>
 800c128:	782c      	ldrb	r4, [r5, #0]
 800c12a:	2601      	movs	r6, #1
 800c12c:	1c95      	adds	r5, r2, #2
 800c12e:	f033 0210 	bics.w	r2, r3, #16
 800c132:	d109      	bne.n	800c148 <_strtol_l.constprop.0+0x54>
 800c134:	2c30      	cmp	r4, #48	@ 0x30
 800c136:	d12a      	bne.n	800c18e <_strtol_l.constprop.0+0x9a>
 800c138:	782a      	ldrb	r2, [r5, #0]
 800c13a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c13e:	2a58      	cmp	r2, #88	@ 0x58
 800c140:	d125      	bne.n	800c18e <_strtol_l.constprop.0+0x9a>
 800c142:	786c      	ldrb	r4, [r5, #1]
 800c144:	2310      	movs	r3, #16
 800c146:	3502      	adds	r5, #2
 800c148:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c14c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c150:	2200      	movs	r2, #0
 800c152:	fbbc f9f3 	udiv	r9, ip, r3
 800c156:	4610      	mov	r0, r2
 800c158:	fb03 ca19 	mls	sl, r3, r9, ip
 800c15c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c160:	2f09      	cmp	r7, #9
 800c162:	d81b      	bhi.n	800c19c <_strtol_l.constprop.0+0xa8>
 800c164:	463c      	mov	r4, r7
 800c166:	42a3      	cmp	r3, r4
 800c168:	dd27      	ble.n	800c1ba <_strtol_l.constprop.0+0xc6>
 800c16a:	1c57      	adds	r7, r2, #1
 800c16c:	d007      	beq.n	800c17e <_strtol_l.constprop.0+0x8a>
 800c16e:	4581      	cmp	r9, r0
 800c170:	d320      	bcc.n	800c1b4 <_strtol_l.constprop.0+0xc0>
 800c172:	d101      	bne.n	800c178 <_strtol_l.constprop.0+0x84>
 800c174:	45a2      	cmp	sl, r4
 800c176:	db1d      	blt.n	800c1b4 <_strtol_l.constprop.0+0xc0>
 800c178:	fb00 4003 	mla	r0, r0, r3, r4
 800c17c:	2201      	movs	r2, #1
 800c17e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c182:	e7eb      	b.n	800c15c <_strtol_l.constprop.0+0x68>
 800c184:	2c2b      	cmp	r4, #43	@ 0x2b
 800c186:	bf04      	itt	eq
 800c188:	782c      	ldrbeq	r4, [r5, #0]
 800c18a:	1c95      	addeq	r5, r2, #2
 800c18c:	e7cf      	b.n	800c12e <_strtol_l.constprop.0+0x3a>
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d1da      	bne.n	800c148 <_strtol_l.constprop.0+0x54>
 800c192:	2c30      	cmp	r4, #48	@ 0x30
 800c194:	bf0c      	ite	eq
 800c196:	2308      	moveq	r3, #8
 800c198:	230a      	movne	r3, #10
 800c19a:	e7d5      	b.n	800c148 <_strtol_l.constprop.0+0x54>
 800c19c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c1a0:	2f19      	cmp	r7, #25
 800c1a2:	d801      	bhi.n	800c1a8 <_strtol_l.constprop.0+0xb4>
 800c1a4:	3c37      	subs	r4, #55	@ 0x37
 800c1a6:	e7de      	b.n	800c166 <_strtol_l.constprop.0+0x72>
 800c1a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c1ac:	2f19      	cmp	r7, #25
 800c1ae:	d804      	bhi.n	800c1ba <_strtol_l.constprop.0+0xc6>
 800c1b0:	3c57      	subs	r4, #87	@ 0x57
 800c1b2:	e7d8      	b.n	800c166 <_strtol_l.constprop.0+0x72>
 800c1b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c1b8:	e7e1      	b.n	800c17e <_strtol_l.constprop.0+0x8a>
 800c1ba:	1c53      	adds	r3, r2, #1
 800c1bc:	d108      	bne.n	800c1d0 <_strtol_l.constprop.0+0xdc>
 800c1be:	2322      	movs	r3, #34	@ 0x22
 800c1c0:	f8ce 3000 	str.w	r3, [lr]
 800c1c4:	4660      	mov	r0, ip
 800c1c6:	f1b8 0f00 	cmp.w	r8, #0
 800c1ca:	d0a0      	beq.n	800c10e <_strtol_l.constprop.0+0x1a>
 800c1cc:	1e69      	subs	r1, r5, #1
 800c1ce:	e006      	b.n	800c1de <_strtol_l.constprop.0+0xea>
 800c1d0:	b106      	cbz	r6, 800c1d4 <_strtol_l.constprop.0+0xe0>
 800c1d2:	4240      	negs	r0, r0
 800c1d4:	f1b8 0f00 	cmp.w	r8, #0
 800c1d8:	d099      	beq.n	800c10e <_strtol_l.constprop.0+0x1a>
 800c1da:	2a00      	cmp	r2, #0
 800c1dc:	d1f6      	bne.n	800c1cc <_strtol_l.constprop.0+0xd8>
 800c1de:	f8c8 1000 	str.w	r1, [r8]
 800c1e2:	e794      	b.n	800c10e <_strtol_l.constprop.0+0x1a>
 800c1e4:	0800d025 	.word	0x0800d025

0800c1e8 <strtol>:
 800c1e8:	4613      	mov	r3, r2
 800c1ea:	460a      	mov	r2, r1
 800c1ec:	4601      	mov	r1, r0
 800c1ee:	4802      	ldr	r0, [pc, #8]	@ (800c1f8 <strtol+0x10>)
 800c1f0:	6800      	ldr	r0, [r0, #0]
 800c1f2:	f7ff bf7f 	b.w	800c0f4 <_strtol_l.constprop.0>
 800c1f6:	bf00      	nop
 800c1f8:	20000164 	.word	0x20000164

0800c1fc <sniprintf>:
 800c1fc:	b40c      	push	{r2, r3}
 800c1fe:	b530      	push	{r4, r5, lr}
 800c200:	4b17      	ldr	r3, [pc, #92]	@ (800c260 <sniprintf+0x64>)
 800c202:	1e0c      	subs	r4, r1, #0
 800c204:	681d      	ldr	r5, [r3, #0]
 800c206:	b09d      	sub	sp, #116	@ 0x74
 800c208:	da08      	bge.n	800c21c <sniprintf+0x20>
 800c20a:	238b      	movs	r3, #139	@ 0x8b
 800c20c:	602b      	str	r3, [r5, #0]
 800c20e:	f04f 30ff 	mov.w	r0, #4294967295
 800c212:	b01d      	add	sp, #116	@ 0x74
 800c214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c218:	b002      	add	sp, #8
 800c21a:	4770      	bx	lr
 800c21c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c220:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c224:	bf14      	ite	ne
 800c226:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c22a:	4623      	moveq	r3, r4
 800c22c:	9304      	str	r3, [sp, #16]
 800c22e:	9307      	str	r3, [sp, #28]
 800c230:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c234:	9002      	str	r0, [sp, #8]
 800c236:	9006      	str	r0, [sp, #24]
 800c238:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c23c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c23e:	ab21      	add	r3, sp, #132	@ 0x84
 800c240:	a902      	add	r1, sp, #8
 800c242:	4628      	mov	r0, r5
 800c244:	9301      	str	r3, [sp, #4]
 800c246:	f000 f9b5 	bl	800c5b4 <_svfiprintf_r>
 800c24a:	1c43      	adds	r3, r0, #1
 800c24c:	bfbc      	itt	lt
 800c24e:	238b      	movlt	r3, #139	@ 0x8b
 800c250:	602b      	strlt	r3, [r5, #0]
 800c252:	2c00      	cmp	r4, #0
 800c254:	d0dd      	beq.n	800c212 <sniprintf+0x16>
 800c256:	9b02      	ldr	r3, [sp, #8]
 800c258:	2200      	movs	r2, #0
 800c25a:	701a      	strb	r2, [r3, #0]
 800c25c:	e7d9      	b.n	800c212 <sniprintf+0x16>
 800c25e:	bf00      	nop
 800c260:	20000164 	.word	0x20000164

0800c264 <siprintf>:
 800c264:	b40e      	push	{r1, r2, r3}
 800c266:	b500      	push	{lr}
 800c268:	b09c      	sub	sp, #112	@ 0x70
 800c26a:	ab1d      	add	r3, sp, #116	@ 0x74
 800c26c:	9002      	str	r0, [sp, #8]
 800c26e:	9006      	str	r0, [sp, #24]
 800c270:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c274:	4809      	ldr	r0, [pc, #36]	@ (800c29c <siprintf+0x38>)
 800c276:	9107      	str	r1, [sp, #28]
 800c278:	9104      	str	r1, [sp, #16]
 800c27a:	4909      	ldr	r1, [pc, #36]	@ (800c2a0 <siprintf+0x3c>)
 800c27c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c280:	9105      	str	r1, [sp, #20]
 800c282:	6800      	ldr	r0, [r0, #0]
 800c284:	9301      	str	r3, [sp, #4]
 800c286:	a902      	add	r1, sp, #8
 800c288:	f000 f994 	bl	800c5b4 <_svfiprintf_r>
 800c28c:	9b02      	ldr	r3, [sp, #8]
 800c28e:	2200      	movs	r2, #0
 800c290:	701a      	strb	r2, [r3, #0]
 800c292:	b01c      	add	sp, #112	@ 0x70
 800c294:	f85d eb04 	ldr.w	lr, [sp], #4
 800c298:	b003      	add	sp, #12
 800c29a:	4770      	bx	lr
 800c29c:	20000164 	.word	0x20000164
 800c2a0:	ffff0208 	.word	0xffff0208

0800c2a4 <memset>:
 800c2a4:	4402      	add	r2, r0
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d100      	bne.n	800c2ae <memset+0xa>
 800c2ac:	4770      	bx	lr
 800c2ae:	f803 1b01 	strb.w	r1, [r3], #1
 800c2b2:	e7f9      	b.n	800c2a8 <memset+0x4>

0800c2b4 <__errno>:
 800c2b4:	4b01      	ldr	r3, [pc, #4]	@ (800c2bc <__errno+0x8>)
 800c2b6:	6818      	ldr	r0, [r3, #0]
 800c2b8:	4770      	bx	lr
 800c2ba:	bf00      	nop
 800c2bc:	20000164 	.word	0x20000164

0800c2c0 <__libc_init_array>:
 800c2c0:	b570      	push	{r4, r5, r6, lr}
 800c2c2:	4d0d      	ldr	r5, [pc, #52]	@ (800c2f8 <__libc_init_array+0x38>)
 800c2c4:	4c0d      	ldr	r4, [pc, #52]	@ (800c2fc <__libc_init_array+0x3c>)
 800c2c6:	1b64      	subs	r4, r4, r5
 800c2c8:	10a4      	asrs	r4, r4, #2
 800c2ca:	2600      	movs	r6, #0
 800c2cc:	42a6      	cmp	r6, r4
 800c2ce:	d109      	bne.n	800c2e4 <__libc_init_array+0x24>
 800c2d0:	4d0b      	ldr	r5, [pc, #44]	@ (800c300 <__libc_init_array+0x40>)
 800c2d2:	4c0c      	ldr	r4, [pc, #48]	@ (800c304 <__libc_init_array+0x44>)
 800c2d4:	f000 fd2a 	bl	800cd2c <_init>
 800c2d8:	1b64      	subs	r4, r4, r5
 800c2da:	10a4      	asrs	r4, r4, #2
 800c2dc:	2600      	movs	r6, #0
 800c2de:	42a6      	cmp	r6, r4
 800c2e0:	d105      	bne.n	800c2ee <__libc_init_array+0x2e>
 800c2e2:	bd70      	pop	{r4, r5, r6, pc}
 800c2e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2e8:	4798      	blx	r3
 800c2ea:	3601      	adds	r6, #1
 800c2ec:	e7ee      	b.n	800c2cc <__libc_init_array+0xc>
 800c2ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2f2:	4798      	blx	r3
 800c2f4:	3601      	adds	r6, #1
 800c2f6:	e7f2      	b.n	800c2de <__libc_init_array+0x1e>
 800c2f8:	0800d160 	.word	0x0800d160
 800c2fc:	0800d160 	.word	0x0800d160
 800c300:	0800d160 	.word	0x0800d160
 800c304:	0800d164 	.word	0x0800d164

0800c308 <__retarget_lock_acquire_recursive>:
 800c308:	4770      	bx	lr

0800c30a <__retarget_lock_release_recursive>:
 800c30a:	4770      	bx	lr

0800c30c <_free_r>:
 800c30c:	b538      	push	{r3, r4, r5, lr}
 800c30e:	4605      	mov	r5, r0
 800c310:	2900      	cmp	r1, #0
 800c312:	d041      	beq.n	800c398 <_free_r+0x8c>
 800c314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c318:	1f0c      	subs	r4, r1, #4
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	bfb8      	it	lt
 800c31e:	18e4      	addlt	r4, r4, r3
 800c320:	f000 f8e0 	bl	800c4e4 <__malloc_lock>
 800c324:	4a1d      	ldr	r2, [pc, #116]	@ (800c39c <_free_r+0x90>)
 800c326:	6813      	ldr	r3, [r2, #0]
 800c328:	b933      	cbnz	r3, 800c338 <_free_r+0x2c>
 800c32a:	6063      	str	r3, [r4, #4]
 800c32c:	6014      	str	r4, [r2, #0]
 800c32e:	4628      	mov	r0, r5
 800c330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c334:	f000 b8dc 	b.w	800c4f0 <__malloc_unlock>
 800c338:	42a3      	cmp	r3, r4
 800c33a:	d908      	bls.n	800c34e <_free_r+0x42>
 800c33c:	6820      	ldr	r0, [r4, #0]
 800c33e:	1821      	adds	r1, r4, r0
 800c340:	428b      	cmp	r3, r1
 800c342:	bf01      	itttt	eq
 800c344:	6819      	ldreq	r1, [r3, #0]
 800c346:	685b      	ldreq	r3, [r3, #4]
 800c348:	1809      	addeq	r1, r1, r0
 800c34a:	6021      	streq	r1, [r4, #0]
 800c34c:	e7ed      	b.n	800c32a <_free_r+0x1e>
 800c34e:	461a      	mov	r2, r3
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	b10b      	cbz	r3, 800c358 <_free_r+0x4c>
 800c354:	42a3      	cmp	r3, r4
 800c356:	d9fa      	bls.n	800c34e <_free_r+0x42>
 800c358:	6811      	ldr	r1, [r2, #0]
 800c35a:	1850      	adds	r0, r2, r1
 800c35c:	42a0      	cmp	r0, r4
 800c35e:	d10b      	bne.n	800c378 <_free_r+0x6c>
 800c360:	6820      	ldr	r0, [r4, #0]
 800c362:	4401      	add	r1, r0
 800c364:	1850      	adds	r0, r2, r1
 800c366:	4283      	cmp	r3, r0
 800c368:	6011      	str	r1, [r2, #0]
 800c36a:	d1e0      	bne.n	800c32e <_free_r+0x22>
 800c36c:	6818      	ldr	r0, [r3, #0]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	6053      	str	r3, [r2, #4]
 800c372:	4408      	add	r0, r1
 800c374:	6010      	str	r0, [r2, #0]
 800c376:	e7da      	b.n	800c32e <_free_r+0x22>
 800c378:	d902      	bls.n	800c380 <_free_r+0x74>
 800c37a:	230c      	movs	r3, #12
 800c37c:	602b      	str	r3, [r5, #0]
 800c37e:	e7d6      	b.n	800c32e <_free_r+0x22>
 800c380:	6820      	ldr	r0, [r4, #0]
 800c382:	1821      	adds	r1, r4, r0
 800c384:	428b      	cmp	r3, r1
 800c386:	bf04      	itt	eq
 800c388:	6819      	ldreq	r1, [r3, #0]
 800c38a:	685b      	ldreq	r3, [r3, #4]
 800c38c:	6063      	str	r3, [r4, #4]
 800c38e:	bf04      	itt	eq
 800c390:	1809      	addeq	r1, r1, r0
 800c392:	6021      	streq	r1, [r4, #0]
 800c394:	6054      	str	r4, [r2, #4]
 800c396:	e7ca      	b.n	800c32e <_free_r+0x22>
 800c398:	bd38      	pop	{r3, r4, r5, pc}
 800c39a:	bf00      	nop
 800c39c:	20000754 	.word	0x20000754

0800c3a0 <sbrk_aligned>:
 800c3a0:	b570      	push	{r4, r5, r6, lr}
 800c3a2:	4e0f      	ldr	r6, [pc, #60]	@ (800c3e0 <sbrk_aligned+0x40>)
 800c3a4:	460c      	mov	r4, r1
 800c3a6:	6831      	ldr	r1, [r6, #0]
 800c3a8:	4605      	mov	r5, r0
 800c3aa:	b911      	cbnz	r1, 800c3b2 <sbrk_aligned+0x12>
 800c3ac:	f000 fba6 	bl	800cafc <_sbrk_r>
 800c3b0:	6030      	str	r0, [r6, #0]
 800c3b2:	4621      	mov	r1, r4
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	f000 fba1 	bl	800cafc <_sbrk_r>
 800c3ba:	1c43      	adds	r3, r0, #1
 800c3bc:	d103      	bne.n	800c3c6 <sbrk_aligned+0x26>
 800c3be:	f04f 34ff 	mov.w	r4, #4294967295
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	bd70      	pop	{r4, r5, r6, pc}
 800c3c6:	1cc4      	adds	r4, r0, #3
 800c3c8:	f024 0403 	bic.w	r4, r4, #3
 800c3cc:	42a0      	cmp	r0, r4
 800c3ce:	d0f8      	beq.n	800c3c2 <sbrk_aligned+0x22>
 800c3d0:	1a21      	subs	r1, r4, r0
 800c3d2:	4628      	mov	r0, r5
 800c3d4:	f000 fb92 	bl	800cafc <_sbrk_r>
 800c3d8:	3001      	adds	r0, #1
 800c3da:	d1f2      	bne.n	800c3c2 <sbrk_aligned+0x22>
 800c3dc:	e7ef      	b.n	800c3be <sbrk_aligned+0x1e>
 800c3de:	bf00      	nop
 800c3e0:	20000750 	.word	0x20000750

0800c3e4 <_malloc_r>:
 800c3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3e8:	1ccd      	adds	r5, r1, #3
 800c3ea:	f025 0503 	bic.w	r5, r5, #3
 800c3ee:	3508      	adds	r5, #8
 800c3f0:	2d0c      	cmp	r5, #12
 800c3f2:	bf38      	it	cc
 800c3f4:	250c      	movcc	r5, #12
 800c3f6:	2d00      	cmp	r5, #0
 800c3f8:	4606      	mov	r6, r0
 800c3fa:	db01      	blt.n	800c400 <_malloc_r+0x1c>
 800c3fc:	42a9      	cmp	r1, r5
 800c3fe:	d904      	bls.n	800c40a <_malloc_r+0x26>
 800c400:	230c      	movs	r3, #12
 800c402:	6033      	str	r3, [r6, #0]
 800c404:	2000      	movs	r0, #0
 800c406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c40a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c4e0 <_malloc_r+0xfc>
 800c40e:	f000 f869 	bl	800c4e4 <__malloc_lock>
 800c412:	f8d8 3000 	ldr.w	r3, [r8]
 800c416:	461c      	mov	r4, r3
 800c418:	bb44      	cbnz	r4, 800c46c <_malloc_r+0x88>
 800c41a:	4629      	mov	r1, r5
 800c41c:	4630      	mov	r0, r6
 800c41e:	f7ff ffbf 	bl	800c3a0 <sbrk_aligned>
 800c422:	1c43      	adds	r3, r0, #1
 800c424:	4604      	mov	r4, r0
 800c426:	d158      	bne.n	800c4da <_malloc_r+0xf6>
 800c428:	f8d8 4000 	ldr.w	r4, [r8]
 800c42c:	4627      	mov	r7, r4
 800c42e:	2f00      	cmp	r7, #0
 800c430:	d143      	bne.n	800c4ba <_malloc_r+0xd6>
 800c432:	2c00      	cmp	r4, #0
 800c434:	d04b      	beq.n	800c4ce <_malloc_r+0xea>
 800c436:	6823      	ldr	r3, [r4, #0]
 800c438:	4639      	mov	r1, r7
 800c43a:	4630      	mov	r0, r6
 800c43c:	eb04 0903 	add.w	r9, r4, r3
 800c440:	f000 fb5c 	bl	800cafc <_sbrk_r>
 800c444:	4581      	cmp	r9, r0
 800c446:	d142      	bne.n	800c4ce <_malloc_r+0xea>
 800c448:	6821      	ldr	r1, [r4, #0]
 800c44a:	1a6d      	subs	r5, r5, r1
 800c44c:	4629      	mov	r1, r5
 800c44e:	4630      	mov	r0, r6
 800c450:	f7ff ffa6 	bl	800c3a0 <sbrk_aligned>
 800c454:	3001      	adds	r0, #1
 800c456:	d03a      	beq.n	800c4ce <_malloc_r+0xea>
 800c458:	6823      	ldr	r3, [r4, #0]
 800c45a:	442b      	add	r3, r5
 800c45c:	6023      	str	r3, [r4, #0]
 800c45e:	f8d8 3000 	ldr.w	r3, [r8]
 800c462:	685a      	ldr	r2, [r3, #4]
 800c464:	bb62      	cbnz	r2, 800c4c0 <_malloc_r+0xdc>
 800c466:	f8c8 7000 	str.w	r7, [r8]
 800c46a:	e00f      	b.n	800c48c <_malloc_r+0xa8>
 800c46c:	6822      	ldr	r2, [r4, #0]
 800c46e:	1b52      	subs	r2, r2, r5
 800c470:	d420      	bmi.n	800c4b4 <_malloc_r+0xd0>
 800c472:	2a0b      	cmp	r2, #11
 800c474:	d917      	bls.n	800c4a6 <_malloc_r+0xc2>
 800c476:	1961      	adds	r1, r4, r5
 800c478:	42a3      	cmp	r3, r4
 800c47a:	6025      	str	r5, [r4, #0]
 800c47c:	bf18      	it	ne
 800c47e:	6059      	strne	r1, [r3, #4]
 800c480:	6863      	ldr	r3, [r4, #4]
 800c482:	bf08      	it	eq
 800c484:	f8c8 1000 	streq.w	r1, [r8]
 800c488:	5162      	str	r2, [r4, r5]
 800c48a:	604b      	str	r3, [r1, #4]
 800c48c:	4630      	mov	r0, r6
 800c48e:	f000 f82f 	bl	800c4f0 <__malloc_unlock>
 800c492:	f104 000b 	add.w	r0, r4, #11
 800c496:	1d23      	adds	r3, r4, #4
 800c498:	f020 0007 	bic.w	r0, r0, #7
 800c49c:	1ac2      	subs	r2, r0, r3
 800c49e:	bf1c      	itt	ne
 800c4a0:	1a1b      	subne	r3, r3, r0
 800c4a2:	50a3      	strne	r3, [r4, r2]
 800c4a4:	e7af      	b.n	800c406 <_malloc_r+0x22>
 800c4a6:	6862      	ldr	r2, [r4, #4]
 800c4a8:	42a3      	cmp	r3, r4
 800c4aa:	bf0c      	ite	eq
 800c4ac:	f8c8 2000 	streq.w	r2, [r8]
 800c4b0:	605a      	strne	r2, [r3, #4]
 800c4b2:	e7eb      	b.n	800c48c <_malloc_r+0xa8>
 800c4b4:	4623      	mov	r3, r4
 800c4b6:	6864      	ldr	r4, [r4, #4]
 800c4b8:	e7ae      	b.n	800c418 <_malloc_r+0x34>
 800c4ba:	463c      	mov	r4, r7
 800c4bc:	687f      	ldr	r7, [r7, #4]
 800c4be:	e7b6      	b.n	800c42e <_malloc_r+0x4a>
 800c4c0:	461a      	mov	r2, r3
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	42a3      	cmp	r3, r4
 800c4c6:	d1fb      	bne.n	800c4c0 <_malloc_r+0xdc>
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	6053      	str	r3, [r2, #4]
 800c4cc:	e7de      	b.n	800c48c <_malloc_r+0xa8>
 800c4ce:	230c      	movs	r3, #12
 800c4d0:	6033      	str	r3, [r6, #0]
 800c4d2:	4630      	mov	r0, r6
 800c4d4:	f000 f80c 	bl	800c4f0 <__malloc_unlock>
 800c4d8:	e794      	b.n	800c404 <_malloc_r+0x20>
 800c4da:	6005      	str	r5, [r0, #0]
 800c4dc:	e7d6      	b.n	800c48c <_malloc_r+0xa8>
 800c4de:	bf00      	nop
 800c4e0:	20000754 	.word	0x20000754

0800c4e4 <__malloc_lock>:
 800c4e4:	4801      	ldr	r0, [pc, #4]	@ (800c4ec <__malloc_lock+0x8>)
 800c4e6:	f7ff bf0f 	b.w	800c308 <__retarget_lock_acquire_recursive>
 800c4ea:	bf00      	nop
 800c4ec:	2000074c 	.word	0x2000074c

0800c4f0 <__malloc_unlock>:
 800c4f0:	4801      	ldr	r0, [pc, #4]	@ (800c4f8 <__malloc_unlock+0x8>)
 800c4f2:	f7ff bf0a 	b.w	800c30a <__retarget_lock_release_recursive>
 800c4f6:	bf00      	nop
 800c4f8:	2000074c 	.word	0x2000074c

0800c4fc <__ssputs_r>:
 800c4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c500:	688e      	ldr	r6, [r1, #8]
 800c502:	461f      	mov	r7, r3
 800c504:	42be      	cmp	r6, r7
 800c506:	680b      	ldr	r3, [r1, #0]
 800c508:	4682      	mov	sl, r0
 800c50a:	460c      	mov	r4, r1
 800c50c:	4690      	mov	r8, r2
 800c50e:	d82d      	bhi.n	800c56c <__ssputs_r+0x70>
 800c510:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c514:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c518:	d026      	beq.n	800c568 <__ssputs_r+0x6c>
 800c51a:	6965      	ldr	r5, [r4, #20]
 800c51c:	6909      	ldr	r1, [r1, #16]
 800c51e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c522:	eba3 0901 	sub.w	r9, r3, r1
 800c526:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c52a:	1c7b      	adds	r3, r7, #1
 800c52c:	444b      	add	r3, r9
 800c52e:	106d      	asrs	r5, r5, #1
 800c530:	429d      	cmp	r5, r3
 800c532:	bf38      	it	cc
 800c534:	461d      	movcc	r5, r3
 800c536:	0553      	lsls	r3, r2, #21
 800c538:	d527      	bpl.n	800c58a <__ssputs_r+0x8e>
 800c53a:	4629      	mov	r1, r5
 800c53c:	f7ff ff52 	bl	800c3e4 <_malloc_r>
 800c540:	4606      	mov	r6, r0
 800c542:	b360      	cbz	r0, 800c59e <__ssputs_r+0xa2>
 800c544:	6921      	ldr	r1, [r4, #16]
 800c546:	464a      	mov	r2, r9
 800c548:	f000 fae8 	bl	800cb1c <memcpy>
 800c54c:	89a3      	ldrh	r3, [r4, #12]
 800c54e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c556:	81a3      	strh	r3, [r4, #12]
 800c558:	6126      	str	r6, [r4, #16]
 800c55a:	6165      	str	r5, [r4, #20]
 800c55c:	444e      	add	r6, r9
 800c55e:	eba5 0509 	sub.w	r5, r5, r9
 800c562:	6026      	str	r6, [r4, #0]
 800c564:	60a5      	str	r5, [r4, #8]
 800c566:	463e      	mov	r6, r7
 800c568:	42be      	cmp	r6, r7
 800c56a:	d900      	bls.n	800c56e <__ssputs_r+0x72>
 800c56c:	463e      	mov	r6, r7
 800c56e:	6820      	ldr	r0, [r4, #0]
 800c570:	4632      	mov	r2, r6
 800c572:	4641      	mov	r1, r8
 800c574:	f000 faa8 	bl	800cac8 <memmove>
 800c578:	68a3      	ldr	r3, [r4, #8]
 800c57a:	1b9b      	subs	r3, r3, r6
 800c57c:	60a3      	str	r3, [r4, #8]
 800c57e:	6823      	ldr	r3, [r4, #0]
 800c580:	4433      	add	r3, r6
 800c582:	6023      	str	r3, [r4, #0]
 800c584:	2000      	movs	r0, #0
 800c586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c58a:	462a      	mov	r2, r5
 800c58c:	f000 fad4 	bl	800cb38 <_realloc_r>
 800c590:	4606      	mov	r6, r0
 800c592:	2800      	cmp	r0, #0
 800c594:	d1e0      	bne.n	800c558 <__ssputs_r+0x5c>
 800c596:	6921      	ldr	r1, [r4, #16]
 800c598:	4650      	mov	r0, sl
 800c59a:	f7ff feb7 	bl	800c30c <_free_r>
 800c59e:	230c      	movs	r3, #12
 800c5a0:	f8ca 3000 	str.w	r3, [sl]
 800c5a4:	89a3      	ldrh	r3, [r4, #12]
 800c5a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5aa:	81a3      	strh	r3, [r4, #12]
 800c5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c5b0:	e7e9      	b.n	800c586 <__ssputs_r+0x8a>
	...

0800c5b4 <_svfiprintf_r>:
 800c5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b8:	4698      	mov	r8, r3
 800c5ba:	898b      	ldrh	r3, [r1, #12]
 800c5bc:	061b      	lsls	r3, r3, #24
 800c5be:	b09d      	sub	sp, #116	@ 0x74
 800c5c0:	4607      	mov	r7, r0
 800c5c2:	460d      	mov	r5, r1
 800c5c4:	4614      	mov	r4, r2
 800c5c6:	d510      	bpl.n	800c5ea <_svfiprintf_r+0x36>
 800c5c8:	690b      	ldr	r3, [r1, #16]
 800c5ca:	b973      	cbnz	r3, 800c5ea <_svfiprintf_r+0x36>
 800c5cc:	2140      	movs	r1, #64	@ 0x40
 800c5ce:	f7ff ff09 	bl	800c3e4 <_malloc_r>
 800c5d2:	6028      	str	r0, [r5, #0]
 800c5d4:	6128      	str	r0, [r5, #16]
 800c5d6:	b930      	cbnz	r0, 800c5e6 <_svfiprintf_r+0x32>
 800c5d8:	230c      	movs	r3, #12
 800c5da:	603b      	str	r3, [r7, #0]
 800c5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e0:	b01d      	add	sp, #116	@ 0x74
 800c5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e6:	2340      	movs	r3, #64	@ 0x40
 800c5e8:	616b      	str	r3, [r5, #20]
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5ee:	2320      	movs	r3, #32
 800c5f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5f8:	2330      	movs	r3, #48	@ 0x30
 800c5fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c798 <_svfiprintf_r+0x1e4>
 800c5fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c602:	f04f 0901 	mov.w	r9, #1
 800c606:	4623      	mov	r3, r4
 800c608:	469a      	mov	sl, r3
 800c60a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c60e:	b10a      	cbz	r2, 800c614 <_svfiprintf_r+0x60>
 800c610:	2a25      	cmp	r2, #37	@ 0x25
 800c612:	d1f9      	bne.n	800c608 <_svfiprintf_r+0x54>
 800c614:	ebba 0b04 	subs.w	fp, sl, r4
 800c618:	d00b      	beq.n	800c632 <_svfiprintf_r+0x7e>
 800c61a:	465b      	mov	r3, fp
 800c61c:	4622      	mov	r2, r4
 800c61e:	4629      	mov	r1, r5
 800c620:	4638      	mov	r0, r7
 800c622:	f7ff ff6b 	bl	800c4fc <__ssputs_r>
 800c626:	3001      	adds	r0, #1
 800c628:	f000 80a7 	beq.w	800c77a <_svfiprintf_r+0x1c6>
 800c62c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c62e:	445a      	add	r2, fp
 800c630:	9209      	str	r2, [sp, #36]	@ 0x24
 800c632:	f89a 3000 	ldrb.w	r3, [sl]
 800c636:	2b00      	cmp	r3, #0
 800c638:	f000 809f 	beq.w	800c77a <_svfiprintf_r+0x1c6>
 800c63c:	2300      	movs	r3, #0
 800c63e:	f04f 32ff 	mov.w	r2, #4294967295
 800c642:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c646:	f10a 0a01 	add.w	sl, sl, #1
 800c64a:	9304      	str	r3, [sp, #16]
 800c64c:	9307      	str	r3, [sp, #28]
 800c64e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c652:	931a      	str	r3, [sp, #104]	@ 0x68
 800c654:	4654      	mov	r4, sl
 800c656:	2205      	movs	r2, #5
 800c658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c65c:	484e      	ldr	r0, [pc, #312]	@ (800c798 <_svfiprintf_r+0x1e4>)
 800c65e:	f7f3 fdef 	bl	8000240 <memchr>
 800c662:	9a04      	ldr	r2, [sp, #16]
 800c664:	b9d8      	cbnz	r0, 800c69e <_svfiprintf_r+0xea>
 800c666:	06d0      	lsls	r0, r2, #27
 800c668:	bf44      	itt	mi
 800c66a:	2320      	movmi	r3, #32
 800c66c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c670:	0711      	lsls	r1, r2, #28
 800c672:	bf44      	itt	mi
 800c674:	232b      	movmi	r3, #43	@ 0x2b
 800c676:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c67a:	f89a 3000 	ldrb.w	r3, [sl]
 800c67e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c680:	d015      	beq.n	800c6ae <_svfiprintf_r+0xfa>
 800c682:	9a07      	ldr	r2, [sp, #28]
 800c684:	4654      	mov	r4, sl
 800c686:	2000      	movs	r0, #0
 800c688:	f04f 0c0a 	mov.w	ip, #10
 800c68c:	4621      	mov	r1, r4
 800c68e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c692:	3b30      	subs	r3, #48	@ 0x30
 800c694:	2b09      	cmp	r3, #9
 800c696:	d94b      	bls.n	800c730 <_svfiprintf_r+0x17c>
 800c698:	b1b0      	cbz	r0, 800c6c8 <_svfiprintf_r+0x114>
 800c69a:	9207      	str	r2, [sp, #28]
 800c69c:	e014      	b.n	800c6c8 <_svfiprintf_r+0x114>
 800c69e:	eba0 0308 	sub.w	r3, r0, r8
 800c6a2:	fa09 f303 	lsl.w	r3, r9, r3
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	9304      	str	r3, [sp, #16]
 800c6aa:	46a2      	mov	sl, r4
 800c6ac:	e7d2      	b.n	800c654 <_svfiprintf_r+0xa0>
 800c6ae:	9b03      	ldr	r3, [sp, #12]
 800c6b0:	1d19      	adds	r1, r3, #4
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	9103      	str	r1, [sp, #12]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	bfbb      	ittet	lt
 800c6ba:	425b      	neglt	r3, r3
 800c6bc:	f042 0202 	orrlt.w	r2, r2, #2
 800c6c0:	9307      	strge	r3, [sp, #28]
 800c6c2:	9307      	strlt	r3, [sp, #28]
 800c6c4:	bfb8      	it	lt
 800c6c6:	9204      	strlt	r2, [sp, #16]
 800c6c8:	7823      	ldrb	r3, [r4, #0]
 800c6ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6cc:	d10a      	bne.n	800c6e4 <_svfiprintf_r+0x130>
 800c6ce:	7863      	ldrb	r3, [r4, #1]
 800c6d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6d2:	d132      	bne.n	800c73a <_svfiprintf_r+0x186>
 800c6d4:	9b03      	ldr	r3, [sp, #12]
 800c6d6:	1d1a      	adds	r2, r3, #4
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	9203      	str	r2, [sp, #12]
 800c6dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6e0:	3402      	adds	r4, #2
 800c6e2:	9305      	str	r3, [sp, #20]
 800c6e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c7a8 <_svfiprintf_r+0x1f4>
 800c6e8:	7821      	ldrb	r1, [r4, #0]
 800c6ea:	2203      	movs	r2, #3
 800c6ec:	4650      	mov	r0, sl
 800c6ee:	f7f3 fda7 	bl	8000240 <memchr>
 800c6f2:	b138      	cbz	r0, 800c704 <_svfiprintf_r+0x150>
 800c6f4:	9b04      	ldr	r3, [sp, #16]
 800c6f6:	eba0 000a 	sub.w	r0, r0, sl
 800c6fa:	2240      	movs	r2, #64	@ 0x40
 800c6fc:	4082      	lsls	r2, r0
 800c6fe:	4313      	orrs	r3, r2
 800c700:	3401      	adds	r4, #1
 800c702:	9304      	str	r3, [sp, #16]
 800c704:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c708:	4824      	ldr	r0, [pc, #144]	@ (800c79c <_svfiprintf_r+0x1e8>)
 800c70a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c70e:	2206      	movs	r2, #6
 800c710:	f7f3 fd96 	bl	8000240 <memchr>
 800c714:	2800      	cmp	r0, #0
 800c716:	d036      	beq.n	800c786 <_svfiprintf_r+0x1d2>
 800c718:	4b21      	ldr	r3, [pc, #132]	@ (800c7a0 <_svfiprintf_r+0x1ec>)
 800c71a:	bb1b      	cbnz	r3, 800c764 <_svfiprintf_r+0x1b0>
 800c71c:	9b03      	ldr	r3, [sp, #12]
 800c71e:	3307      	adds	r3, #7
 800c720:	f023 0307 	bic.w	r3, r3, #7
 800c724:	3308      	adds	r3, #8
 800c726:	9303      	str	r3, [sp, #12]
 800c728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c72a:	4433      	add	r3, r6
 800c72c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c72e:	e76a      	b.n	800c606 <_svfiprintf_r+0x52>
 800c730:	fb0c 3202 	mla	r2, ip, r2, r3
 800c734:	460c      	mov	r4, r1
 800c736:	2001      	movs	r0, #1
 800c738:	e7a8      	b.n	800c68c <_svfiprintf_r+0xd8>
 800c73a:	2300      	movs	r3, #0
 800c73c:	3401      	adds	r4, #1
 800c73e:	9305      	str	r3, [sp, #20]
 800c740:	4619      	mov	r1, r3
 800c742:	f04f 0c0a 	mov.w	ip, #10
 800c746:	4620      	mov	r0, r4
 800c748:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c74c:	3a30      	subs	r2, #48	@ 0x30
 800c74e:	2a09      	cmp	r2, #9
 800c750:	d903      	bls.n	800c75a <_svfiprintf_r+0x1a6>
 800c752:	2b00      	cmp	r3, #0
 800c754:	d0c6      	beq.n	800c6e4 <_svfiprintf_r+0x130>
 800c756:	9105      	str	r1, [sp, #20]
 800c758:	e7c4      	b.n	800c6e4 <_svfiprintf_r+0x130>
 800c75a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c75e:	4604      	mov	r4, r0
 800c760:	2301      	movs	r3, #1
 800c762:	e7f0      	b.n	800c746 <_svfiprintf_r+0x192>
 800c764:	ab03      	add	r3, sp, #12
 800c766:	9300      	str	r3, [sp, #0]
 800c768:	462a      	mov	r2, r5
 800c76a:	4b0e      	ldr	r3, [pc, #56]	@ (800c7a4 <_svfiprintf_r+0x1f0>)
 800c76c:	a904      	add	r1, sp, #16
 800c76e:	4638      	mov	r0, r7
 800c770:	f3af 8000 	nop.w
 800c774:	1c42      	adds	r2, r0, #1
 800c776:	4606      	mov	r6, r0
 800c778:	d1d6      	bne.n	800c728 <_svfiprintf_r+0x174>
 800c77a:	89ab      	ldrh	r3, [r5, #12]
 800c77c:	065b      	lsls	r3, r3, #25
 800c77e:	f53f af2d 	bmi.w	800c5dc <_svfiprintf_r+0x28>
 800c782:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c784:	e72c      	b.n	800c5e0 <_svfiprintf_r+0x2c>
 800c786:	ab03      	add	r3, sp, #12
 800c788:	9300      	str	r3, [sp, #0]
 800c78a:	462a      	mov	r2, r5
 800c78c:	4b05      	ldr	r3, [pc, #20]	@ (800c7a4 <_svfiprintf_r+0x1f0>)
 800c78e:	a904      	add	r1, sp, #16
 800c790:	4638      	mov	r0, r7
 800c792:	f000 f879 	bl	800c888 <_printf_i>
 800c796:	e7ed      	b.n	800c774 <_svfiprintf_r+0x1c0>
 800c798:	0800d125 	.word	0x0800d125
 800c79c:	0800d12f 	.word	0x0800d12f
 800c7a0:	00000000 	.word	0x00000000
 800c7a4:	0800c4fd 	.word	0x0800c4fd
 800c7a8:	0800d12b 	.word	0x0800d12b

0800c7ac <_printf_common>:
 800c7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7b0:	4616      	mov	r6, r2
 800c7b2:	4698      	mov	r8, r3
 800c7b4:	688a      	ldr	r2, [r1, #8]
 800c7b6:	690b      	ldr	r3, [r1, #16]
 800c7b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	bfb8      	it	lt
 800c7c0:	4613      	movlt	r3, r2
 800c7c2:	6033      	str	r3, [r6, #0]
 800c7c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c7c8:	4607      	mov	r7, r0
 800c7ca:	460c      	mov	r4, r1
 800c7cc:	b10a      	cbz	r2, 800c7d2 <_printf_common+0x26>
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	6033      	str	r3, [r6, #0]
 800c7d2:	6823      	ldr	r3, [r4, #0]
 800c7d4:	0699      	lsls	r1, r3, #26
 800c7d6:	bf42      	ittt	mi
 800c7d8:	6833      	ldrmi	r3, [r6, #0]
 800c7da:	3302      	addmi	r3, #2
 800c7dc:	6033      	strmi	r3, [r6, #0]
 800c7de:	6825      	ldr	r5, [r4, #0]
 800c7e0:	f015 0506 	ands.w	r5, r5, #6
 800c7e4:	d106      	bne.n	800c7f4 <_printf_common+0x48>
 800c7e6:	f104 0a19 	add.w	sl, r4, #25
 800c7ea:	68e3      	ldr	r3, [r4, #12]
 800c7ec:	6832      	ldr	r2, [r6, #0]
 800c7ee:	1a9b      	subs	r3, r3, r2
 800c7f0:	42ab      	cmp	r3, r5
 800c7f2:	dc26      	bgt.n	800c842 <_printf_common+0x96>
 800c7f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c7f8:	6822      	ldr	r2, [r4, #0]
 800c7fa:	3b00      	subs	r3, #0
 800c7fc:	bf18      	it	ne
 800c7fe:	2301      	movne	r3, #1
 800c800:	0692      	lsls	r2, r2, #26
 800c802:	d42b      	bmi.n	800c85c <_printf_common+0xb0>
 800c804:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c808:	4641      	mov	r1, r8
 800c80a:	4638      	mov	r0, r7
 800c80c:	47c8      	blx	r9
 800c80e:	3001      	adds	r0, #1
 800c810:	d01e      	beq.n	800c850 <_printf_common+0xa4>
 800c812:	6823      	ldr	r3, [r4, #0]
 800c814:	6922      	ldr	r2, [r4, #16]
 800c816:	f003 0306 	and.w	r3, r3, #6
 800c81a:	2b04      	cmp	r3, #4
 800c81c:	bf02      	ittt	eq
 800c81e:	68e5      	ldreq	r5, [r4, #12]
 800c820:	6833      	ldreq	r3, [r6, #0]
 800c822:	1aed      	subeq	r5, r5, r3
 800c824:	68a3      	ldr	r3, [r4, #8]
 800c826:	bf0c      	ite	eq
 800c828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c82c:	2500      	movne	r5, #0
 800c82e:	4293      	cmp	r3, r2
 800c830:	bfc4      	itt	gt
 800c832:	1a9b      	subgt	r3, r3, r2
 800c834:	18ed      	addgt	r5, r5, r3
 800c836:	2600      	movs	r6, #0
 800c838:	341a      	adds	r4, #26
 800c83a:	42b5      	cmp	r5, r6
 800c83c:	d11a      	bne.n	800c874 <_printf_common+0xc8>
 800c83e:	2000      	movs	r0, #0
 800c840:	e008      	b.n	800c854 <_printf_common+0xa8>
 800c842:	2301      	movs	r3, #1
 800c844:	4652      	mov	r2, sl
 800c846:	4641      	mov	r1, r8
 800c848:	4638      	mov	r0, r7
 800c84a:	47c8      	blx	r9
 800c84c:	3001      	adds	r0, #1
 800c84e:	d103      	bne.n	800c858 <_printf_common+0xac>
 800c850:	f04f 30ff 	mov.w	r0, #4294967295
 800c854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c858:	3501      	adds	r5, #1
 800c85a:	e7c6      	b.n	800c7ea <_printf_common+0x3e>
 800c85c:	18e1      	adds	r1, r4, r3
 800c85e:	1c5a      	adds	r2, r3, #1
 800c860:	2030      	movs	r0, #48	@ 0x30
 800c862:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c866:	4422      	add	r2, r4
 800c868:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c86c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c870:	3302      	adds	r3, #2
 800c872:	e7c7      	b.n	800c804 <_printf_common+0x58>
 800c874:	2301      	movs	r3, #1
 800c876:	4622      	mov	r2, r4
 800c878:	4641      	mov	r1, r8
 800c87a:	4638      	mov	r0, r7
 800c87c:	47c8      	blx	r9
 800c87e:	3001      	adds	r0, #1
 800c880:	d0e6      	beq.n	800c850 <_printf_common+0xa4>
 800c882:	3601      	adds	r6, #1
 800c884:	e7d9      	b.n	800c83a <_printf_common+0x8e>
	...

0800c888 <_printf_i>:
 800c888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c88c:	7e0f      	ldrb	r7, [r1, #24]
 800c88e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c890:	2f78      	cmp	r7, #120	@ 0x78
 800c892:	4691      	mov	r9, r2
 800c894:	4680      	mov	r8, r0
 800c896:	460c      	mov	r4, r1
 800c898:	469a      	mov	sl, r3
 800c89a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c89e:	d807      	bhi.n	800c8b0 <_printf_i+0x28>
 800c8a0:	2f62      	cmp	r7, #98	@ 0x62
 800c8a2:	d80a      	bhi.n	800c8ba <_printf_i+0x32>
 800c8a4:	2f00      	cmp	r7, #0
 800c8a6:	f000 80d2 	beq.w	800ca4e <_printf_i+0x1c6>
 800c8aa:	2f58      	cmp	r7, #88	@ 0x58
 800c8ac:	f000 80b9 	beq.w	800ca22 <_printf_i+0x19a>
 800c8b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c8b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c8b8:	e03a      	b.n	800c930 <_printf_i+0xa8>
 800c8ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c8be:	2b15      	cmp	r3, #21
 800c8c0:	d8f6      	bhi.n	800c8b0 <_printf_i+0x28>
 800c8c2:	a101      	add	r1, pc, #4	@ (adr r1, 800c8c8 <_printf_i+0x40>)
 800c8c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c8c8:	0800c921 	.word	0x0800c921
 800c8cc:	0800c935 	.word	0x0800c935
 800c8d0:	0800c8b1 	.word	0x0800c8b1
 800c8d4:	0800c8b1 	.word	0x0800c8b1
 800c8d8:	0800c8b1 	.word	0x0800c8b1
 800c8dc:	0800c8b1 	.word	0x0800c8b1
 800c8e0:	0800c935 	.word	0x0800c935
 800c8e4:	0800c8b1 	.word	0x0800c8b1
 800c8e8:	0800c8b1 	.word	0x0800c8b1
 800c8ec:	0800c8b1 	.word	0x0800c8b1
 800c8f0:	0800c8b1 	.word	0x0800c8b1
 800c8f4:	0800ca35 	.word	0x0800ca35
 800c8f8:	0800c95f 	.word	0x0800c95f
 800c8fc:	0800c9ef 	.word	0x0800c9ef
 800c900:	0800c8b1 	.word	0x0800c8b1
 800c904:	0800c8b1 	.word	0x0800c8b1
 800c908:	0800ca57 	.word	0x0800ca57
 800c90c:	0800c8b1 	.word	0x0800c8b1
 800c910:	0800c95f 	.word	0x0800c95f
 800c914:	0800c8b1 	.word	0x0800c8b1
 800c918:	0800c8b1 	.word	0x0800c8b1
 800c91c:	0800c9f7 	.word	0x0800c9f7
 800c920:	6833      	ldr	r3, [r6, #0]
 800c922:	1d1a      	adds	r2, r3, #4
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	6032      	str	r2, [r6, #0]
 800c928:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c92c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c930:	2301      	movs	r3, #1
 800c932:	e09d      	b.n	800ca70 <_printf_i+0x1e8>
 800c934:	6833      	ldr	r3, [r6, #0]
 800c936:	6820      	ldr	r0, [r4, #0]
 800c938:	1d19      	adds	r1, r3, #4
 800c93a:	6031      	str	r1, [r6, #0]
 800c93c:	0606      	lsls	r6, r0, #24
 800c93e:	d501      	bpl.n	800c944 <_printf_i+0xbc>
 800c940:	681d      	ldr	r5, [r3, #0]
 800c942:	e003      	b.n	800c94c <_printf_i+0xc4>
 800c944:	0645      	lsls	r5, r0, #25
 800c946:	d5fb      	bpl.n	800c940 <_printf_i+0xb8>
 800c948:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c94c:	2d00      	cmp	r5, #0
 800c94e:	da03      	bge.n	800c958 <_printf_i+0xd0>
 800c950:	232d      	movs	r3, #45	@ 0x2d
 800c952:	426d      	negs	r5, r5
 800c954:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c958:	4859      	ldr	r0, [pc, #356]	@ (800cac0 <_printf_i+0x238>)
 800c95a:	230a      	movs	r3, #10
 800c95c:	e011      	b.n	800c982 <_printf_i+0xfa>
 800c95e:	6821      	ldr	r1, [r4, #0]
 800c960:	6833      	ldr	r3, [r6, #0]
 800c962:	0608      	lsls	r0, r1, #24
 800c964:	f853 5b04 	ldr.w	r5, [r3], #4
 800c968:	d402      	bmi.n	800c970 <_printf_i+0xe8>
 800c96a:	0649      	lsls	r1, r1, #25
 800c96c:	bf48      	it	mi
 800c96e:	b2ad      	uxthmi	r5, r5
 800c970:	2f6f      	cmp	r7, #111	@ 0x6f
 800c972:	4853      	ldr	r0, [pc, #332]	@ (800cac0 <_printf_i+0x238>)
 800c974:	6033      	str	r3, [r6, #0]
 800c976:	bf14      	ite	ne
 800c978:	230a      	movne	r3, #10
 800c97a:	2308      	moveq	r3, #8
 800c97c:	2100      	movs	r1, #0
 800c97e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c982:	6866      	ldr	r6, [r4, #4]
 800c984:	60a6      	str	r6, [r4, #8]
 800c986:	2e00      	cmp	r6, #0
 800c988:	bfa2      	ittt	ge
 800c98a:	6821      	ldrge	r1, [r4, #0]
 800c98c:	f021 0104 	bicge.w	r1, r1, #4
 800c990:	6021      	strge	r1, [r4, #0]
 800c992:	b90d      	cbnz	r5, 800c998 <_printf_i+0x110>
 800c994:	2e00      	cmp	r6, #0
 800c996:	d04b      	beq.n	800ca30 <_printf_i+0x1a8>
 800c998:	4616      	mov	r6, r2
 800c99a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c99e:	fb03 5711 	mls	r7, r3, r1, r5
 800c9a2:	5dc7      	ldrb	r7, [r0, r7]
 800c9a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c9a8:	462f      	mov	r7, r5
 800c9aa:	42bb      	cmp	r3, r7
 800c9ac:	460d      	mov	r5, r1
 800c9ae:	d9f4      	bls.n	800c99a <_printf_i+0x112>
 800c9b0:	2b08      	cmp	r3, #8
 800c9b2:	d10b      	bne.n	800c9cc <_printf_i+0x144>
 800c9b4:	6823      	ldr	r3, [r4, #0]
 800c9b6:	07df      	lsls	r7, r3, #31
 800c9b8:	d508      	bpl.n	800c9cc <_printf_i+0x144>
 800c9ba:	6923      	ldr	r3, [r4, #16]
 800c9bc:	6861      	ldr	r1, [r4, #4]
 800c9be:	4299      	cmp	r1, r3
 800c9c0:	bfde      	ittt	le
 800c9c2:	2330      	movle	r3, #48	@ 0x30
 800c9c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c9c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c9cc:	1b92      	subs	r2, r2, r6
 800c9ce:	6122      	str	r2, [r4, #16]
 800c9d0:	f8cd a000 	str.w	sl, [sp]
 800c9d4:	464b      	mov	r3, r9
 800c9d6:	aa03      	add	r2, sp, #12
 800c9d8:	4621      	mov	r1, r4
 800c9da:	4640      	mov	r0, r8
 800c9dc:	f7ff fee6 	bl	800c7ac <_printf_common>
 800c9e0:	3001      	adds	r0, #1
 800c9e2:	d14a      	bne.n	800ca7a <_printf_i+0x1f2>
 800c9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9e8:	b004      	add	sp, #16
 800c9ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9ee:	6823      	ldr	r3, [r4, #0]
 800c9f0:	f043 0320 	orr.w	r3, r3, #32
 800c9f4:	6023      	str	r3, [r4, #0]
 800c9f6:	4833      	ldr	r0, [pc, #204]	@ (800cac4 <_printf_i+0x23c>)
 800c9f8:	2778      	movs	r7, #120	@ 0x78
 800c9fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c9fe:	6823      	ldr	r3, [r4, #0]
 800ca00:	6831      	ldr	r1, [r6, #0]
 800ca02:	061f      	lsls	r7, r3, #24
 800ca04:	f851 5b04 	ldr.w	r5, [r1], #4
 800ca08:	d402      	bmi.n	800ca10 <_printf_i+0x188>
 800ca0a:	065f      	lsls	r7, r3, #25
 800ca0c:	bf48      	it	mi
 800ca0e:	b2ad      	uxthmi	r5, r5
 800ca10:	6031      	str	r1, [r6, #0]
 800ca12:	07d9      	lsls	r1, r3, #31
 800ca14:	bf44      	itt	mi
 800ca16:	f043 0320 	orrmi.w	r3, r3, #32
 800ca1a:	6023      	strmi	r3, [r4, #0]
 800ca1c:	b11d      	cbz	r5, 800ca26 <_printf_i+0x19e>
 800ca1e:	2310      	movs	r3, #16
 800ca20:	e7ac      	b.n	800c97c <_printf_i+0xf4>
 800ca22:	4827      	ldr	r0, [pc, #156]	@ (800cac0 <_printf_i+0x238>)
 800ca24:	e7e9      	b.n	800c9fa <_printf_i+0x172>
 800ca26:	6823      	ldr	r3, [r4, #0]
 800ca28:	f023 0320 	bic.w	r3, r3, #32
 800ca2c:	6023      	str	r3, [r4, #0]
 800ca2e:	e7f6      	b.n	800ca1e <_printf_i+0x196>
 800ca30:	4616      	mov	r6, r2
 800ca32:	e7bd      	b.n	800c9b0 <_printf_i+0x128>
 800ca34:	6833      	ldr	r3, [r6, #0]
 800ca36:	6825      	ldr	r5, [r4, #0]
 800ca38:	6961      	ldr	r1, [r4, #20]
 800ca3a:	1d18      	adds	r0, r3, #4
 800ca3c:	6030      	str	r0, [r6, #0]
 800ca3e:	062e      	lsls	r6, r5, #24
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	d501      	bpl.n	800ca48 <_printf_i+0x1c0>
 800ca44:	6019      	str	r1, [r3, #0]
 800ca46:	e002      	b.n	800ca4e <_printf_i+0x1c6>
 800ca48:	0668      	lsls	r0, r5, #25
 800ca4a:	d5fb      	bpl.n	800ca44 <_printf_i+0x1bc>
 800ca4c:	8019      	strh	r1, [r3, #0]
 800ca4e:	2300      	movs	r3, #0
 800ca50:	6123      	str	r3, [r4, #16]
 800ca52:	4616      	mov	r6, r2
 800ca54:	e7bc      	b.n	800c9d0 <_printf_i+0x148>
 800ca56:	6833      	ldr	r3, [r6, #0]
 800ca58:	1d1a      	adds	r2, r3, #4
 800ca5a:	6032      	str	r2, [r6, #0]
 800ca5c:	681e      	ldr	r6, [r3, #0]
 800ca5e:	6862      	ldr	r2, [r4, #4]
 800ca60:	2100      	movs	r1, #0
 800ca62:	4630      	mov	r0, r6
 800ca64:	f7f3 fbec 	bl	8000240 <memchr>
 800ca68:	b108      	cbz	r0, 800ca6e <_printf_i+0x1e6>
 800ca6a:	1b80      	subs	r0, r0, r6
 800ca6c:	6060      	str	r0, [r4, #4]
 800ca6e:	6863      	ldr	r3, [r4, #4]
 800ca70:	6123      	str	r3, [r4, #16]
 800ca72:	2300      	movs	r3, #0
 800ca74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca78:	e7aa      	b.n	800c9d0 <_printf_i+0x148>
 800ca7a:	6923      	ldr	r3, [r4, #16]
 800ca7c:	4632      	mov	r2, r6
 800ca7e:	4649      	mov	r1, r9
 800ca80:	4640      	mov	r0, r8
 800ca82:	47d0      	blx	sl
 800ca84:	3001      	adds	r0, #1
 800ca86:	d0ad      	beq.n	800c9e4 <_printf_i+0x15c>
 800ca88:	6823      	ldr	r3, [r4, #0]
 800ca8a:	079b      	lsls	r3, r3, #30
 800ca8c:	d413      	bmi.n	800cab6 <_printf_i+0x22e>
 800ca8e:	68e0      	ldr	r0, [r4, #12]
 800ca90:	9b03      	ldr	r3, [sp, #12]
 800ca92:	4298      	cmp	r0, r3
 800ca94:	bfb8      	it	lt
 800ca96:	4618      	movlt	r0, r3
 800ca98:	e7a6      	b.n	800c9e8 <_printf_i+0x160>
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	4632      	mov	r2, r6
 800ca9e:	4649      	mov	r1, r9
 800caa0:	4640      	mov	r0, r8
 800caa2:	47d0      	blx	sl
 800caa4:	3001      	adds	r0, #1
 800caa6:	d09d      	beq.n	800c9e4 <_printf_i+0x15c>
 800caa8:	3501      	adds	r5, #1
 800caaa:	68e3      	ldr	r3, [r4, #12]
 800caac:	9903      	ldr	r1, [sp, #12]
 800caae:	1a5b      	subs	r3, r3, r1
 800cab0:	42ab      	cmp	r3, r5
 800cab2:	dcf2      	bgt.n	800ca9a <_printf_i+0x212>
 800cab4:	e7eb      	b.n	800ca8e <_printf_i+0x206>
 800cab6:	2500      	movs	r5, #0
 800cab8:	f104 0619 	add.w	r6, r4, #25
 800cabc:	e7f5      	b.n	800caaa <_printf_i+0x222>
 800cabe:	bf00      	nop
 800cac0:	0800d136 	.word	0x0800d136
 800cac4:	0800d147 	.word	0x0800d147

0800cac8 <memmove>:
 800cac8:	4288      	cmp	r0, r1
 800caca:	b510      	push	{r4, lr}
 800cacc:	eb01 0402 	add.w	r4, r1, r2
 800cad0:	d902      	bls.n	800cad8 <memmove+0x10>
 800cad2:	4284      	cmp	r4, r0
 800cad4:	4623      	mov	r3, r4
 800cad6:	d807      	bhi.n	800cae8 <memmove+0x20>
 800cad8:	1e43      	subs	r3, r0, #1
 800cada:	42a1      	cmp	r1, r4
 800cadc:	d008      	beq.n	800caf0 <memmove+0x28>
 800cade:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cae2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cae6:	e7f8      	b.n	800cada <memmove+0x12>
 800cae8:	4402      	add	r2, r0
 800caea:	4601      	mov	r1, r0
 800caec:	428a      	cmp	r2, r1
 800caee:	d100      	bne.n	800caf2 <memmove+0x2a>
 800caf0:	bd10      	pop	{r4, pc}
 800caf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800caf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cafa:	e7f7      	b.n	800caec <memmove+0x24>

0800cafc <_sbrk_r>:
 800cafc:	b538      	push	{r3, r4, r5, lr}
 800cafe:	4d06      	ldr	r5, [pc, #24]	@ (800cb18 <_sbrk_r+0x1c>)
 800cb00:	2300      	movs	r3, #0
 800cb02:	4604      	mov	r4, r0
 800cb04:	4608      	mov	r0, r1
 800cb06:	602b      	str	r3, [r5, #0]
 800cb08:	f7f8 fbc8 	bl	800529c <_sbrk>
 800cb0c:	1c43      	adds	r3, r0, #1
 800cb0e:	d102      	bne.n	800cb16 <_sbrk_r+0x1a>
 800cb10:	682b      	ldr	r3, [r5, #0]
 800cb12:	b103      	cbz	r3, 800cb16 <_sbrk_r+0x1a>
 800cb14:	6023      	str	r3, [r4, #0]
 800cb16:	bd38      	pop	{r3, r4, r5, pc}
 800cb18:	20000748 	.word	0x20000748

0800cb1c <memcpy>:
 800cb1c:	440a      	add	r2, r1
 800cb1e:	4291      	cmp	r1, r2
 800cb20:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb24:	d100      	bne.n	800cb28 <memcpy+0xc>
 800cb26:	4770      	bx	lr
 800cb28:	b510      	push	{r4, lr}
 800cb2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb32:	4291      	cmp	r1, r2
 800cb34:	d1f9      	bne.n	800cb2a <memcpy+0xe>
 800cb36:	bd10      	pop	{r4, pc}

0800cb38 <_realloc_r>:
 800cb38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb3c:	4680      	mov	r8, r0
 800cb3e:	4615      	mov	r5, r2
 800cb40:	460c      	mov	r4, r1
 800cb42:	b921      	cbnz	r1, 800cb4e <_realloc_r+0x16>
 800cb44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb48:	4611      	mov	r1, r2
 800cb4a:	f7ff bc4b 	b.w	800c3e4 <_malloc_r>
 800cb4e:	b92a      	cbnz	r2, 800cb5c <_realloc_r+0x24>
 800cb50:	f7ff fbdc 	bl	800c30c <_free_r>
 800cb54:	2400      	movs	r4, #0
 800cb56:	4620      	mov	r0, r4
 800cb58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb5c:	f000 f81a 	bl	800cb94 <_malloc_usable_size_r>
 800cb60:	4285      	cmp	r5, r0
 800cb62:	4606      	mov	r6, r0
 800cb64:	d802      	bhi.n	800cb6c <_realloc_r+0x34>
 800cb66:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cb6a:	d8f4      	bhi.n	800cb56 <_realloc_r+0x1e>
 800cb6c:	4629      	mov	r1, r5
 800cb6e:	4640      	mov	r0, r8
 800cb70:	f7ff fc38 	bl	800c3e4 <_malloc_r>
 800cb74:	4607      	mov	r7, r0
 800cb76:	2800      	cmp	r0, #0
 800cb78:	d0ec      	beq.n	800cb54 <_realloc_r+0x1c>
 800cb7a:	42b5      	cmp	r5, r6
 800cb7c:	462a      	mov	r2, r5
 800cb7e:	4621      	mov	r1, r4
 800cb80:	bf28      	it	cs
 800cb82:	4632      	movcs	r2, r6
 800cb84:	f7ff ffca 	bl	800cb1c <memcpy>
 800cb88:	4621      	mov	r1, r4
 800cb8a:	4640      	mov	r0, r8
 800cb8c:	f7ff fbbe 	bl	800c30c <_free_r>
 800cb90:	463c      	mov	r4, r7
 800cb92:	e7e0      	b.n	800cb56 <_realloc_r+0x1e>

0800cb94 <_malloc_usable_size_r>:
 800cb94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb98:	1f18      	subs	r0, r3, #4
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	bfbc      	itt	lt
 800cb9e:	580b      	ldrlt	r3, [r1, r0]
 800cba0:	18c0      	addlt	r0, r0, r3
 800cba2:	4770      	bx	lr
 800cba4:	0000      	movs	r0, r0
	...

0800cba8 <floor>:
 800cba8:	ec51 0b10 	vmov	r0, r1, d0
 800cbac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800cbb8:	2e13      	cmp	r6, #19
 800cbba:	460c      	mov	r4, r1
 800cbbc:	4605      	mov	r5, r0
 800cbbe:	4680      	mov	r8, r0
 800cbc0:	dc34      	bgt.n	800cc2c <floor+0x84>
 800cbc2:	2e00      	cmp	r6, #0
 800cbc4:	da17      	bge.n	800cbf6 <floor+0x4e>
 800cbc6:	a332      	add	r3, pc, #200	@ (adr r3, 800cc90 <floor+0xe8>)
 800cbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbcc:	f7f3 fb8e 	bl	80002ec <__adddf3>
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	f7f3 ffd0 	bl	8000b78 <__aeabi_dcmpgt>
 800cbd8:	b150      	cbz	r0, 800cbf0 <floor+0x48>
 800cbda:	2c00      	cmp	r4, #0
 800cbdc:	da55      	bge.n	800cc8a <floor+0xe2>
 800cbde:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800cbe2:	432c      	orrs	r4, r5
 800cbe4:	2500      	movs	r5, #0
 800cbe6:	42ac      	cmp	r4, r5
 800cbe8:	4c2b      	ldr	r4, [pc, #172]	@ (800cc98 <floor+0xf0>)
 800cbea:	bf08      	it	eq
 800cbec:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800cbf0:	4621      	mov	r1, r4
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	e023      	b.n	800cc3e <floor+0x96>
 800cbf6:	4f29      	ldr	r7, [pc, #164]	@ (800cc9c <floor+0xf4>)
 800cbf8:	4137      	asrs	r7, r6
 800cbfa:	ea01 0307 	and.w	r3, r1, r7
 800cbfe:	4303      	orrs	r3, r0
 800cc00:	d01d      	beq.n	800cc3e <floor+0x96>
 800cc02:	a323      	add	r3, pc, #140	@ (adr r3, 800cc90 <floor+0xe8>)
 800cc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc08:	f7f3 fb70 	bl	80002ec <__adddf3>
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	2300      	movs	r3, #0
 800cc10:	f7f3 ffb2 	bl	8000b78 <__aeabi_dcmpgt>
 800cc14:	2800      	cmp	r0, #0
 800cc16:	d0eb      	beq.n	800cbf0 <floor+0x48>
 800cc18:	2c00      	cmp	r4, #0
 800cc1a:	bfbe      	ittt	lt
 800cc1c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800cc20:	4133      	asrlt	r3, r6
 800cc22:	18e4      	addlt	r4, r4, r3
 800cc24:	ea24 0407 	bic.w	r4, r4, r7
 800cc28:	2500      	movs	r5, #0
 800cc2a:	e7e1      	b.n	800cbf0 <floor+0x48>
 800cc2c:	2e33      	cmp	r6, #51	@ 0x33
 800cc2e:	dd0a      	ble.n	800cc46 <floor+0x9e>
 800cc30:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800cc34:	d103      	bne.n	800cc3e <floor+0x96>
 800cc36:	4602      	mov	r2, r0
 800cc38:	460b      	mov	r3, r1
 800cc3a:	f7f3 fb57 	bl	80002ec <__adddf3>
 800cc3e:	ec41 0b10 	vmov	d0, r0, r1
 800cc42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc46:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800cc4a:	f04f 37ff 	mov.w	r7, #4294967295
 800cc4e:	40df      	lsrs	r7, r3
 800cc50:	4207      	tst	r7, r0
 800cc52:	d0f4      	beq.n	800cc3e <floor+0x96>
 800cc54:	a30e      	add	r3, pc, #56	@ (adr r3, 800cc90 <floor+0xe8>)
 800cc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5a:	f7f3 fb47 	bl	80002ec <__adddf3>
 800cc5e:	2200      	movs	r2, #0
 800cc60:	2300      	movs	r3, #0
 800cc62:	f7f3 ff89 	bl	8000b78 <__aeabi_dcmpgt>
 800cc66:	2800      	cmp	r0, #0
 800cc68:	d0c2      	beq.n	800cbf0 <floor+0x48>
 800cc6a:	2c00      	cmp	r4, #0
 800cc6c:	da0a      	bge.n	800cc84 <floor+0xdc>
 800cc6e:	2e14      	cmp	r6, #20
 800cc70:	d101      	bne.n	800cc76 <floor+0xce>
 800cc72:	3401      	adds	r4, #1
 800cc74:	e006      	b.n	800cc84 <floor+0xdc>
 800cc76:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	40b3      	lsls	r3, r6
 800cc7e:	441d      	add	r5, r3
 800cc80:	4545      	cmp	r5, r8
 800cc82:	d3f6      	bcc.n	800cc72 <floor+0xca>
 800cc84:	ea25 0507 	bic.w	r5, r5, r7
 800cc88:	e7b2      	b.n	800cbf0 <floor+0x48>
 800cc8a:	2500      	movs	r5, #0
 800cc8c:	462c      	mov	r4, r5
 800cc8e:	e7af      	b.n	800cbf0 <floor+0x48>
 800cc90:	8800759c 	.word	0x8800759c
 800cc94:	7e37e43c 	.word	0x7e37e43c
 800cc98:	bff00000 	.word	0xbff00000
 800cc9c:	000fffff 	.word	0x000fffff

0800cca0 <round>:
 800cca0:	ec51 0b10 	vmov	r0, r1, d0
 800cca4:	b570      	push	{r4, r5, r6, lr}
 800cca6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800ccaa:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800ccae:	2a13      	cmp	r2, #19
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	4605      	mov	r5, r0
 800ccb4:	dc1b      	bgt.n	800ccee <round+0x4e>
 800ccb6:	2a00      	cmp	r2, #0
 800ccb8:	da0b      	bge.n	800ccd2 <round+0x32>
 800ccba:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800ccbe:	3201      	adds	r2, #1
 800ccc0:	bf04      	itt	eq
 800ccc2:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800ccc6:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800ccca:	2200      	movs	r2, #0
 800cccc:	4619      	mov	r1, r3
 800ccce:	4610      	mov	r0, r2
 800ccd0:	e015      	b.n	800ccfe <round+0x5e>
 800ccd2:	4c15      	ldr	r4, [pc, #84]	@ (800cd28 <round+0x88>)
 800ccd4:	4114      	asrs	r4, r2
 800ccd6:	ea04 0601 	and.w	r6, r4, r1
 800ccda:	4306      	orrs	r6, r0
 800ccdc:	d00f      	beq.n	800ccfe <round+0x5e>
 800ccde:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800cce2:	fa41 f202 	asr.w	r2, r1, r2
 800cce6:	4413      	add	r3, r2
 800cce8:	ea23 0304 	bic.w	r3, r3, r4
 800ccec:	e7ed      	b.n	800ccca <round+0x2a>
 800ccee:	2a33      	cmp	r2, #51	@ 0x33
 800ccf0:	dd08      	ble.n	800cd04 <round+0x64>
 800ccf2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800ccf6:	d102      	bne.n	800ccfe <round+0x5e>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	f7f3 faf7 	bl	80002ec <__adddf3>
 800ccfe:	ec41 0b10 	vmov	d0, r0, r1
 800cd02:	bd70      	pop	{r4, r5, r6, pc}
 800cd04:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800cd08:	f04f 34ff 	mov.w	r4, #4294967295
 800cd0c:	40f4      	lsrs	r4, r6
 800cd0e:	4204      	tst	r4, r0
 800cd10:	d0f5      	beq.n	800ccfe <round+0x5e>
 800cd12:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800cd16:	2201      	movs	r2, #1
 800cd18:	408a      	lsls	r2, r1
 800cd1a:	1952      	adds	r2, r2, r5
 800cd1c:	bf28      	it	cs
 800cd1e:	3301      	addcs	r3, #1
 800cd20:	ea22 0204 	bic.w	r2, r2, r4
 800cd24:	e7d2      	b.n	800cccc <round+0x2c>
 800cd26:	bf00      	nop
 800cd28:	000fffff 	.word	0x000fffff

0800cd2c <_init>:
 800cd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd2e:	bf00      	nop
 800cd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd32:	bc08      	pop	{r3}
 800cd34:	469e      	mov	lr, r3
 800cd36:	4770      	bx	lr

0800cd38 <_fini>:
 800cd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd3a:	bf00      	nop
 800cd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd3e:	bc08      	pop	{r3}
 800cd40:	469e      	mov	lr, r3
 800cd42:	4770      	bx	lr
